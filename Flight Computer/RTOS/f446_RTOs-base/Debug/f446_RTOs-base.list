
f446_RTOs-base.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c64  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  08009e38  08009e38  00019e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3bc  0800a3bc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3bc  0800a3bc  0001a3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3c4  0800a3c4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3c4  0800a3c4  0001a3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3c8  0800a3c8  0001a3c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a3cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000698c  200001e0  0800a5ac  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006b6c  0800a5ac  00026b6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021baa  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fb6  00000000  00000000  00041dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  00045d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a8  00000000  00000000  00047580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004d5c  00000000  00000000  00048c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab1b  00000000  00000000  0004d984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ded25  00000000  00000000  0006849f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001471c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077d0  00000000  00000000  00147218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009e1c 	.word	0x08009e1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08009e1c 	.word	0x08009e1c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <myprintf>:
void StartSensors(void *argument);
void StartTelemetry(void *argument);
void StartEjection(void *argument);

/* USER CODE BEGIN PFP */
void myprintf(char *buffer) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 8000ee8:	2364      	movs	r3, #100	; 0x64
 8000eea:	2264      	movs	r2, #100	; 0x64
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4803      	ldr	r0, [pc, #12]	; (8000efc <myprintf+0x1c>)
 8000ef0:	f002 fd01 	bl	80038f6 <HAL_UART_Transmit>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20004be0 	.word	0x20004be0

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f000 fcf8 	bl	80018f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f836 	bl	8000f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0c:	f000 f8f8 	bl	8001100 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f10:	f000 f89e 	bl	8001050 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f14:	f000 f8c6 	bl	80010a4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f18:	f003 fad4 	bl	80044c4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of sensors */
  sensorsHandle = osThreadNew(StartSensors, NULL, &sensors_attributes);
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <main+0x54>)
 8000f1e:	2100      	movs	r1, #0
 8000f20:	480d      	ldr	r0, [pc, #52]	; (8000f58 <main+0x58>)
 8000f22:	f003 fb19 	bl	8004558 <osThreadNew>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <main+0x5c>)
 8000f2a:	6013      	str	r3, [r2, #0]

  /* creation of telemetry */
  telemetryHandle = osThreadNew(StartTelemetry, NULL, &telemetry_attributes);
 8000f2c:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <main+0x60>)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	480c      	ldr	r0, [pc, #48]	; (8000f64 <main+0x64>)
 8000f32:	f003 fb11 	bl	8004558 <osThreadNew>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a0b      	ldr	r2, [pc, #44]	; (8000f68 <main+0x68>)
 8000f3a:	6013      	str	r3, [r2, #0]

  /* creation of ejection */
  ejectionHandle = osThreadNew(StartEjection, NULL, &ejection_attributes);
 8000f3c:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <main+0x6c>)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	480b      	ldr	r0, [pc, #44]	; (8000f70 <main+0x70>)
 8000f42:	f003 fb09 	bl	8004558 <osThreadNew>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <main+0x74>)
 8000f4a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f4c:	f003 fade 	bl	800450c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <main+0x50>
 8000f52:	bf00      	nop
 8000f54:	08009f54 	.word	0x08009f54
 8000f58:	0800125d 	.word	0x0800125d
 8000f5c:	20005950 	.word	0x20005950
 8000f60:	08009f78 	.word	0x08009f78
 8000f64:	08001351 	.word	0x08001351
 8000f68:	2000594c 	.word	0x2000594c
 8000f6c:	08009f9c 	.word	0x08009f9c
 8000f70:	080013c5 	.word	0x080013c5
 8000f74:	20004bdc 	.word	0x20004bdc

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b094      	sub	sp, #80	; 0x50
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	2234      	movs	r2, #52	; 0x34
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f006 f952 	bl	8007230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	f107 0308 	add.w	r3, r7, #8
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	4b29      	ldr	r3, [pc, #164]	; (8001048 <SystemClock_Config+0xd0>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa4:	4a28      	ldr	r2, [pc, #160]	; (8001048 <SystemClock_Config+0xd0>)
 8000fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000faa:	6413      	str	r3, [r2, #64]	; 0x40
 8000fac:	4b26      	ldr	r3, [pc, #152]	; (8001048 <SystemClock_Config+0xd0>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb8:	2300      	movs	r3, #0
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	4b23      	ldr	r3, [pc, #140]	; (800104c <SystemClock_Config+0xd4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a22      	ldr	r2, [pc, #136]	; (800104c <SystemClock_Config+0xd4>)
 8000fc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b20      	ldr	r3, [pc, #128]	; (800104c <SystemClock_Config+0xd4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fd8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fdc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fe2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fec:	23a8      	movs	r3, #168	; 0xa8
 8000fee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4618      	mov	r0, r3
 8001002:	f001 fedf 	bl	8002dc4 <HAL_RCC_OscConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800100c:	f000 fa0e 	bl	800142c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001010:	230f      	movs	r3, #15
 8001012:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001014:	2302      	movs	r3, #2
 8001016:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800101c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001020:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001026:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	2105      	movs	r1, #5
 800102e:	4618      	mov	r0, r3
 8001030:	f001 f8a0 	bl	8002174 <HAL_RCC_ClockConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800103a:	f000 f9f7 	bl	800142c <Error_Handler>
  }
}
 800103e:	bf00      	nop
 8001040:	3750      	adds	r7, #80	; 0x50
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40007000 	.word	0x40007000

08001050 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001054:	4b11      	ldr	r3, [pc, #68]	; (800109c <MX_USART3_UART_Init+0x4c>)
 8001056:	4a12      	ldr	r2, [pc, #72]	; (80010a0 <MX_USART3_UART_Init+0x50>)
 8001058:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800105a:	4b10      	ldr	r3, [pc, #64]	; (800109c <MX_USART3_UART_Init+0x4c>)
 800105c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001060:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_USART3_UART_Init+0x4c>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001068:	4b0c      	ldr	r3, [pc, #48]	; (800109c <MX_USART3_UART_Init+0x4c>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800106e:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_USART3_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <MX_USART3_UART_Init+0x4c>)
 8001076:	220c      	movs	r2, #12
 8001078:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <MX_USART3_UART_Init+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_USART3_UART_Init+0x4c>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_USART3_UART_Init+0x4c>)
 8001088:	f002 fbe8 	bl	800385c <HAL_UART_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001092:	f000 f9cb 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20004be0 	.word	0x20004be0
 80010a0:	40004800 	.word	0x40004800

080010a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010b2:	2206      	movs	r2, #6
 80010b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010b8:	2202      	movs	r2, #2
 80010ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010c4:	2202      	movs	r2, #2
 80010c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010dc:	2201      	movs	r2, #1
 80010de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010e8:	f000 fefb 	bl	8001ee2 <HAL_PCD_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80010f2:	f000 f99b 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20004c24 	.word	0x20004c24

08001100 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	; 0x30
 8001104:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]
 8001114:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
 800111a:	4b4c      	ldr	r3, [pc, #304]	; (800124c <MX_GPIO_Init+0x14c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a4b      	ldr	r2, [pc, #300]	; (800124c <MX_GPIO_Init+0x14c>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b49      	ldr	r3, [pc, #292]	; (800124c <MX_GPIO_Init+0x14c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	4b45      	ldr	r3, [pc, #276]	; (800124c <MX_GPIO_Init+0x14c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a44      	ldr	r2, [pc, #272]	; (800124c <MX_GPIO_Init+0x14c>)
 800113c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b42      	ldr	r3, [pc, #264]	; (800124c <MX_GPIO_Init+0x14c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	4b3e      	ldr	r3, [pc, #248]	; (800124c <MX_GPIO_Init+0x14c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a3d      	ldr	r2, [pc, #244]	; (800124c <MX_GPIO_Init+0x14c>)
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b3b      	ldr	r3, [pc, #236]	; (800124c <MX_GPIO_Init+0x14c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b37      	ldr	r3, [pc, #220]	; (800124c <MX_GPIO_Init+0x14c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a36      	ldr	r2, [pc, #216]	; (800124c <MX_GPIO_Init+0x14c>)
 8001174:	f043 0308 	orr.w	r3, r3, #8
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b34      	ldr	r3, [pc, #208]	; (800124c <MX_GPIO_Init+0x14c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	4b30      	ldr	r3, [pc, #192]	; (800124c <MX_GPIO_Init+0x14c>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a2f      	ldr	r2, [pc, #188]	; (800124c <MX_GPIO_Init+0x14c>)
 8001190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b2d      	ldr	r3, [pc, #180]	; (800124c <MX_GPIO_Init+0x14c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b29      	ldr	r3, [pc, #164]	; (800124c <MX_GPIO_Init+0x14c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a28      	ldr	r2, [pc, #160]	; (800124c <MX_GPIO_Init+0x14c>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <MX_GPIO_Init+0x14c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f244 0181 	movw	r1, #16513	; 0x4081
 80011c4:	4822      	ldr	r0, [pc, #136]	; (8001250 <MX_GPIO_Init+0x150>)
 80011c6:	f000 fe73 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2140      	movs	r1, #64	; 0x40
 80011ce:	4821      	ldr	r0, [pc, #132]	; (8001254 <MX_GPIO_Init+0x154>)
 80011d0:	f000 fe6e 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	4619      	mov	r1, r3
 80011ea:	481b      	ldr	r0, [pc, #108]	; (8001258 <MX_GPIO_Init+0x158>)
 80011ec:	f000 fccc 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011f0:	f244 0381 	movw	r3, #16513	; 0x4081
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f6:	2301      	movs	r3, #1
 80011f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	4811      	ldr	r0, [pc, #68]	; (8001250 <MX_GPIO_Init+0x150>)
 800120a:	f000 fcbd 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800120e:	2340      	movs	r3, #64	; 0x40
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	480b      	ldr	r0, [pc, #44]	; (8001254 <MX_GPIO_Init+0x154>)
 8001226:	f000 fcaf 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122e:	2300      	movs	r3, #0
 8001230:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_GPIO_Init+0x154>)
 800123e:	f000 fca3 	bl	8001b88 <HAL_GPIO_Init>

}
 8001242:	bf00      	nop
 8001244:	3730      	adds	r7, #48	; 0x30
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800
 8001250:	40020400 	.word	0x40020400
 8001254:	40021800 	.word	0x40021800
 8001258:	40020800 	.word	0x40020800

0800125c <StartSensors>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartSensors */
void StartSensors(void *argument)
{
 800125c:	b5b0      	push	{r4, r5, r7, lr}
 800125e:	b098      	sub	sp, #96	; 0x60
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	float accels[10] = { 0.0, 0.23, 120.0, 420.0, 69.42, 10.3, 20.5, 12.12,
 8001264:	4b33      	ldr	r3, [pc, #204]	; (8001334 <StartSensors+0xd8>)
 8001266:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800126a:	461d      	mov	r5, r3
 800126c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800126e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001274:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001278:	e884 0003 	stmia.w	r4, {r0, r1}
				42.42, 0.0 };
		uint32_t friends[10] = { 0, 1, 2, 3, 4, 5, 4, 3, 2, 1 };
 800127c:	4b2e      	ldr	r3, [pc, #184]	; (8001338 <StartSensors+0xdc>)
 800127e:	f107 0408 	add.w	r4, r7, #8
 8001282:	461d      	mov	r5, r3
 8001284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001290:	e884 0003 	stmia.w	r4, {r0, r1}
		/* Infinite loop */

		char *buffer = (char*) malloc(100);
 8001294:	2064      	movs	r0, #100	; 0x64
 8001296:	f005 ffb5 	bl	8007204 <malloc>
 800129a:	4603      	mov	r3, r0
 800129c:	65bb      	str	r3, [r7, #88]	; 0x58
		memset(buffer, 0, 100);
 800129e:	2264      	movs	r2, #100	; 0x64
 80012a0:	2100      	movs	r1, #0
 80012a2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80012a4:	f005 ffc4 	bl	8007230 <memset>
		for (uint32_t i = 0;;i++) {
 80012a8:	2300      	movs	r3, #0
 80012aa:	65fb      	str	r3, [r7, #92]	; 0x5c

			acceleration = accels[i % 10];
 80012ac:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80012ae:	4b23      	ldr	r3, [pc, #140]	; (800133c <StartSensors+0xe0>)
 80012b0:	fba3 2301 	umull	r2, r3, r3, r1
 80012b4:	08da      	lsrs	r2, r3, #3
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	1aca      	subs	r2, r1, r3
 80012c0:	0093      	lsls	r3, r2, #2
 80012c2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012c6:	4413      	add	r3, r2
 80012c8:	3b30      	subs	r3, #48	; 0x30
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a1c      	ldr	r2, [pc, #112]	; (8001340 <StartSensors+0xe4>)
 80012ce:	6013      	str	r3, [r2, #0]
			numberOfFriends = friends[i % 10];
 80012d0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <StartSensors+0xe0>)
 80012d4:	fba3 2301 	umull	r2, r3, r3, r1
 80012d8:	08da      	lsrs	r2, r3, #3
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	1aca      	subs	r2, r1, r3
 80012e4:	0093      	lsls	r3, r2, #2
 80012e6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80012ea:	4413      	add	r3, r2
 80012ec:	f853 3c58 	ldr.w	r3, [r3, #-88]
 80012f0:	4a14      	ldr	r2, [pc, #80]	; (8001344 <StartSensors+0xe8>)
 80012f2:	6013      	str	r3, [r2, #0]
			sprintf(buffer, "IN Acceleration: %f\r\n", acceleration);
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <StartSensors+0xe4>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f945 	bl	8000588 <__aeabi_f2d>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4911      	ldr	r1, [pc, #68]	; (8001348 <StartSensors+0xec>)
 8001304:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001306:	f006 fd29 	bl	8007d5c <siprintf>
			myprintf(buffer);
 800130a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800130c:	f7ff fde8 	bl	8000ee0 <myprintf>
			sprintf(buffer, "IN Number of friends: %lu\r\n", numberOfFriends);
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <StartSensors+0xe8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	490d      	ldr	r1, [pc, #52]	; (800134c <StartSensors+0xf0>)
 8001318:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800131a:	f006 fd1f 	bl	8007d5c <siprintf>
			myprintf(buffer);
 800131e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001320:	f7ff fdde 	bl	8000ee0 <myprintf>
			osDelay(2000);
 8001324:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001328:	f003 f9a8 	bl	800467c <osDelay>
		for (uint32_t i = 0;;i++) {
 800132c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800132e:	3301      	adds	r3, #1
 8001330:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001332:	e7bb      	b.n	80012ac <StartSensors+0x50>
 8001334:	08009e8c 	.word	0x08009e8c
 8001338:	08009eb4 	.word	0x08009eb4
 800133c:	cccccccd 	.word	0xcccccccd
 8001340:	20006acc 	.word	0x20006acc
 8001344:	200001fc 	.word	0x200001fc
 8001348:	08009e58 	.word	0x08009e58
 800134c:	08009e70 	.word	0x08009e70

08001350 <StartTelemetry>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry */
void StartTelemetry(void *argument)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry */
  /* Infinite loop */
	char* buffer = (char*) malloc(100);
 8001358:	2064      	movs	r0, #100	; 0x64
 800135a:	f005 ff53 	bl	8007204 <malloc>
 800135e:	4603      	mov	r3, r0
 8001360:	60fb      	str	r3, [r7, #12]
		sprintf(buffer, "OUT Acceleration");
 8001362:	4913      	ldr	r1, [pc, #76]	; (80013b0 <StartTelemetry+0x60>)
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f006 fcf9 	bl	8007d5c <siprintf>
		memset(buffer, 0, 100);
 800136a:	2264      	movs	r2, #100	; 0x64
 800136c:	2100      	movs	r1, #0
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f005 ff5e 	bl	8007230 <memset>
		for (;;) {

			sprintf(buffer, "OUT Acceleration: %f\r\n", acceleration);
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <StartTelemetry+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f905 	bl	8000588 <__aeabi_f2d>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	490d      	ldr	r1, [pc, #52]	; (80013b8 <StartTelemetry+0x68>)
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f006 fce9 	bl	8007d5c <siprintf>
			myprintf(buffer);
 800138a:	68f8      	ldr	r0, [r7, #12]
 800138c:	f7ff fda8 	bl	8000ee0 <myprintf>
			sprintf(buffer, "OUT Number of friends: %li\r\n", numberOfFriends);
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <StartTelemetry+0x6c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	490a      	ldr	r1, [pc, #40]	; (80013c0 <StartTelemetry+0x70>)
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f006 fcdf 	bl	8007d5c <siprintf>
			myprintf(buffer);
 800139e:	68f8      	ldr	r0, [r7, #12]
 80013a0:	f7ff fd9e 	bl	8000ee0 <myprintf>
			osDelay(1000);
 80013a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013a8:	f003 f968 	bl	800467c <osDelay>
			sprintf(buffer, "OUT Acceleration: %f\r\n", acceleration);
 80013ac:	e7e2      	b.n	8001374 <StartTelemetry+0x24>
 80013ae:	bf00      	nop
 80013b0:	08009edc 	.word	0x08009edc
 80013b4:	20006acc 	.word	0x20006acc
 80013b8:	08009ef0 	.word	0x08009ef0
 80013bc:	200001fc 	.word	0x200001fc
 80013c0:	08009f08 	.word	0x08009f08

080013c4 <StartEjection>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEjection */
void StartEjection(void *argument)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEjection */
  /* Infinite loop */
	char *buffer = (char*) malloc(100);
 80013cc:	2064      	movs	r0, #100	; 0x64
 80013ce:	f005 ff19 	bl	8007204 <malloc>
 80013d2:	4603      	mov	r3, r0
 80013d4:	60fb      	str	r3, [r7, #12]
		memset(buffer, 0, 100);
 80013d6:	2264      	movs	r2, #100	; 0x64
 80013d8:	2100      	movs	r1, #0
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f005 ff28 	bl	8007230 <memset>
		for (;;) {

			if (numberOfFriends == 5) {
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <StartEjection+0x3c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b05      	cmp	r3, #5
 80013e6:	d106      	bne.n	80013f6 <StartEjection+0x32>
				sprintf(buffer, "EJECT or smthg\r\n");
 80013e8:	4906      	ldr	r1, [pc, #24]	; (8001404 <StartEjection+0x40>)
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f006 fcb6 	bl	8007d5c <siprintf>
				myprintf(buffer);
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f7ff fd75 	bl	8000ee0 <myprintf>
			}
			osDelay(1000);
 80013f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013fa:	f003 f93f 	bl	800467c <osDelay>
			if (numberOfFriends == 5) {
 80013fe:	e7ef      	b.n	80013e0 <StartEjection+0x1c>
 8001400:	200001fc 	.word	0x200001fc
 8001404:	08009f28 	.word	0x08009f28

08001408 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d101      	bne.n	800141e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800141a:	f000 fa8f 	bl	800193c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40001000 	.word	0x40001000

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001434:	e7fe      	b.n	8001434 <Error_Handler+0x8>
	...

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_MspInit+0x54>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_MspInit+0x54>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <HAL_MspInit+0x54>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_MspInit+0x54>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <HAL_MspInit+0x54>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <HAL_MspInit+0x54>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	210f      	movs	r1, #15
 800147a:	f06f 0001 	mvn.w	r0, #1
 800147e:	f000 fb59 	bl	8001b34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	; 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a19      	ldr	r2, [pc, #100]	; (8001514 <HAL_UART_MspInit+0x84>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d12c      	bne.n	800150c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <HAL_UART_MspInit+0x88>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a17      	ldr	r2, [pc, #92]	; (8001518 <HAL_UART_MspInit+0x88>)
 80014bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_UART_MspInit+0x88>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_UART_MspInit+0x88>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a10      	ldr	r2, [pc, #64]	; (8001518 <HAL_UART_MspInit+0x88>)
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <HAL_UART_MspInit+0x88>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014fc:	2307      	movs	r3, #7
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <HAL_UART_MspInit+0x8c>)
 8001508:	f000 fb3e 	bl	8001b88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	; 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40004800 	.word	0x40004800
 8001518:	40023800 	.word	0x40023800
 800151c:	40020c00 	.word	0x40020c00

08001520 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b0a0      	sub	sp, #128	; 0x80
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	225c      	movs	r2, #92	; 0x5c
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f005 fe75 	bl	8007230 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800154e:	d14e      	bne.n	80015ee <HAL_PCD_MspInit+0xce>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001550:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001554:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001556:	2300      	movs	r3, #0
 8001558:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	4618      	mov	r0, r3
 8001560:	f000 ff54 	bl	800240c <HAL_RCCEx_PeriphCLKConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800156a:	f7ff ff5f 	bl	800142c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <HAL_PCD_MspInit+0xd8>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a20      	ldr	r2, [pc, #128]	; (80015f8 <HAL_PCD_MspInit+0xd8>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <HAL_PCD_MspInit+0xd8>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800158a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800158e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800159c:	230a      	movs	r3, #10
 800159e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015a4:	4619      	mov	r1, r3
 80015a6:	4815      	ldr	r0, [pc, #84]	; (80015fc <HAL_PCD_MspInit+0xdc>)
 80015a8:	f000 faee 	bl	8001b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b2:	2300      	movs	r3, #0
 80015b4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015be:	4619      	mov	r1, r3
 80015c0:	480e      	ldr	r0, [pc, #56]	; (80015fc <HAL_PCD_MspInit+0xdc>)
 80015c2:	f000 fae1 	bl	8001b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <HAL_PCD_MspInit+0xd8>)
 80015c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ca:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <HAL_PCD_MspInit+0xd8>)
 80015cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d0:	6353      	str	r3, [r2, #52]	; 0x34
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_PCD_MspInit+0xd8>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_PCD_MspInit+0xd8>)
 80015dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e0:	6453      	str	r3, [r2, #68]	; 0x44
 80015e2:	4b05      	ldr	r3, [pc, #20]	; (80015f8 <HAL_PCD_MspInit+0xd8>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	3780      	adds	r7, #128	; 0x80
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020000 	.word	0x40020000

08001600 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	; 0x30
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001610:	2200      	movs	r2, #0
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	2036      	movs	r0, #54	; 0x36
 8001616:	f000 fa8d 	bl	8001b34 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800161a:	2036      	movs	r0, #54	; 0x36
 800161c:	f000 faa6 	bl	8001b6c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <HAL_InitTick+0xa4>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	4a1e      	ldr	r2, [pc, #120]	; (80016a4 <HAL_InitTick+0xa4>)
 800162a:	f043 0310 	orr.w	r3, r3, #16
 800162e:	6413      	str	r3, [r2, #64]	; 0x40
 8001630:	4b1c      	ldr	r3, [pc, #112]	; (80016a4 <HAL_InitTick+0xa4>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	f003 0310 	and.w	r3, r3, #16
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800163c:	f107 0210 	add.w	r2, r7, #16
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f000 feae 	bl	80023a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800164c:	f000 fe84 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 8001650:	4603      	mov	r3, r0
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001658:	4a13      	ldr	r2, [pc, #76]	; (80016a8 <HAL_InitTick+0xa8>)
 800165a:	fba2 2303 	umull	r2, r3, r2, r3
 800165e:	0c9b      	lsrs	r3, r3, #18
 8001660:	3b01      	subs	r3, #1
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <HAL_InitTick+0xac>)
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <HAL_InitTick+0xb0>)
 8001668:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_InitTick+0xac>)
 800166c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001670:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001672:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <HAL_InitTick+0xac>)
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001676:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <HAL_InitTick+0xac>)
 800167a:	2200      	movs	r2, #0
 800167c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167e:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_InitTick+0xac>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001684:	4809      	ldr	r0, [pc, #36]	; (80016ac <HAL_InitTick+0xac>)
 8001686:	f001 fe3b 	bl	8003300 <HAL_TIM_Base_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d104      	bne.n	800169a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001690:	4806      	ldr	r0, [pc, #24]	; (80016ac <HAL_InitTick+0xac>)
 8001692:	f001 fe8f 	bl	80033b4 <HAL_TIM_Base_Start_IT>
 8001696:	4603      	mov	r3, r0
 8001698:	e000      	b.n	800169c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	3730      	adds	r7, #48	; 0x30
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40023800 	.word	0x40023800
 80016a8:	431bde83 	.word	0x431bde83
 80016ac:	20006ad0 	.word	0x20006ad0
 80016b0:	40001000 	.word	0x40001000

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <NMI_Handler+0x4>

080016ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <HardFault_Handler+0x4>

080016c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <MemManage_Handler+0x4>

080016c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <BusFault_Handler+0x4>

080016cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <UsageFault_Handler+0x4>

080016d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <TIM6_DAC_IRQHandler+0x10>)
 80016e6:	f001 fed5 	bl	8003494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20006ad0 	.word	0x20006ad0

080016f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
	return 1;
 80016f8:	2301      	movs	r3, #1
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <_kill>:

int _kill(int pid, int sig)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800170e:	f005 fc55 	bl	8006fbc <__errno>
 8001712:	4603      	mov	r3, r0
 8001714:	2216      	movs	r2, #22
 8001716:	601a      	str	r2, [r3, #0]
	return -1;
 8001718:	f04f 33ff 	mov.w	r3, #4294967295
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <_exit>:

void _exit (int status)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800172c:	f04f 31ff 	mov.w	r1, #4294967295
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ffe7 	bl	8001704 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001736:	e7fe      	b.n	8001736 <_exit+0x12>

08001738 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	e00a      	b.n	8001760 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800174a:	f3af 8000 	nop.w
 800174e:	4601      	mov	r1, r0
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	60ba      	str	r2, [r7, #8]
 8001756:	b2ca      	uxtb	r2, r1
 8001758:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	dbf0      	blt.n	800174a <_read+0x12>
	}

return len;
 8001768:	687b      	ldr	r3, [r7, #4]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e009      	b.n	8001798 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	60ba      	str	r2, [r7, #8]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	429a      	cmp	r2, r3
 800179e:	dbf1      	blt.n	8001784 <_write+0x12>
	}
	return len;
 80017a0:	687b      	ldr	r3, [r7, #4]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <_close>:

int _close(int file)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
	return -1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017d2:	605a      	str	r2, [r3, #4]
	return 0;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <_isatty>:

int _isatty(int file)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
	return 1;
 80017ea:	2301      	movs	r3, #1
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
	return 0;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800181c:	4a14      	ldr	r2, [pc, #80]	; (8001870 <_sbrk+0x5c>)
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <_sbrk+0x60>)
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <_sbrk+0x64>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <_sbrk+0x64>)
 8001832:	4a12      	ldr	r2, [pc, #72]	; (800187c <_sbrk+0x68>)
 8001834:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <_sbrk+0x64>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	429a      	cmp	r2, r3
 8001842:	d207      	bcs.n	8001854 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001844:	f005 fbba 	bl	8006fbc <__errno>
 8001848:	4603      	mov	r3, r0
 800184a:	220c      	movs	r2, #12
 800184c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800184e:	f04f 33ff 	mov.w	r3, #4294967295
 8001852:	e009      	b.n	8001868 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800185a:	4b07      	ldr	r3, [pc, #28]	; (8001878 <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <_sbrk+0x64>)
 8001864:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001866:	68fb      	ldr	r3, [r7, #12]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20020000 	.word	0x20020000
 8001874:	00000400 	.word	0x00000400
 8001878:	20000200 	.word	0x20000200
 800187c:	20006b70 	.word	0x20006b70

08001880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <SystemInit+0x20>)
 8001886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <SystemInit+0x20>)
 800188c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018a8:	480d      	ldr	r0, [pc, #52]	; (80018e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018aa:	490e      	ldr	r1, [pc, #56]	; (80018e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018ac:	4a0e      	ldr	r2, [pc, #56]	; (80018e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b0:	e002      	b.n	80018b8 <LoopCopyDataInit>

080018b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b6:	3304      	adds	r3, #4

080018b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018bc:	d3f9      	bcc.n	80018b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018be:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018c0:	4c0b      	ldr	r4, [pc, #44]	; (80018f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c4:	e001      	b.n	80018ca <LoopFillZerobss>

080018c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c8:	3204      	adds	r2, #4

080018ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018cc:	d3fb      	bcc.n	80018c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018ce:	f7ff ffd7 	bl	8001880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018d2:	f005 fc6f 	bl	80071b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d6:	f7ff fb13 	bl	8000f00 <main>
  bx  lr    
 80018da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80018e8:	0800a3cc 	.word	0x0800a3cc
  ldr r2, =_sbss
 80018ec:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80018f0:	20006b6c 	.word	0x20006b6c

080018f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC_IRQHandler>
	...

080018f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_Init+0x40>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0d      	ldr	r2, [pc, #52]	; (8001938 <HAL_Init+0x40>)
 8001902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_Init+0x40>)
 800190e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_Init+0x40>)
 800191a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001920:	2003      	movs	r0, #3
 8001922:	f000 f8fc 	bl	8001b1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001926:	200f      	movs	r0, #15
 8001928:	f7ff fe6a 	bl	8001600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800192c:	f7ff fd84 	bl	8001438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023c00 	.word	0x40023c00

0800193c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x20>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x24>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <HAL_IncTick+0x24>)
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000008 	.word	0x20000008
 8001960:	20006b18 	.word	0x20006b18

08001964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return uwTick;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <HAL_GetTick+0x14>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20006b18 	.word	0x20006b18

0800197c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001984:	f7ff ffee 	bl	8001964 <HAL_GetTick>
 8001988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001994:	d005      	beq.n	80019a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <HAL_Delay+0x44>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4413      	add	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019a2:	bf00      	nop
 80019a4:	f7ff ffde 	bl	8001964 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d8f7      	bhi.n	80019a4 <HAL_Delay+0x28>
  {
  }
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000008 	.word	0x20000008

080019c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d4:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f6:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	60d3      	str	r3, [r2, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <__NVIC_GetPriorityGrouping+0x18>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	f003 0307 	and.w	r3, r3, #7
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db0b      	blt.n	8001a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	4907      	ldr	r1, [pc, #28]	; (8001a60 <__NVIC_EnableIRQ+0x38>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2001      	movs	r0, #1
 8001a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e100 	.word	0xe000e100

08001a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db0a      	blt.n	8001a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	; (8001ab0 <__NVIC_SetPriority+0x4c>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a8c:	e00a      	b.n	8001aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <__NVIC_SetPriority+0x50>)
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	761a      	strb	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	; 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f1c3 0307 	rsb	r3, r3, #7
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	bf28      	it	cs
 8001ad6:	2304      	movcs	r3, #4
 8001ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3304      	adds	r3, #4
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d902      	bls.n	8001ae8 <NVIC_EncodePriority+0x30>
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3b03      	subs	r3, #3
 8001ae6:	e000      	b.n	8001aea <NVIC_EncodePriority+0x32>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	401a      	ands	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	4313      	orrs	r3, r2
         );
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	; 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7ff ff4c 	bl	80019c4 <__NVIC_SetPriorityGrouping>
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b46:	f7ff ff61 	bl	8001a0c <__NVIC_GetPriorityGrouping>
 8001b4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	68b9      	ldr	r1, [r7, #8]
 8001b50:	6978      	ldr	r0, [r7, #20]
 8001b52:	f7ff ffb1 	bl	8001ab8 <NVIC_EncodePriority>
 8001b56:	4602      	mov	r2, r0
 8001b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ff80 	bl	8001a64 <__NVIC_SetPriority>
}
 8001b64:	bf00      	nop
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff54 	bl	8001a28 <__NVIC_EnableIRQ>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b089      	sub	sp, #36	; 0x24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	e165      	b.n	8001e70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	f040 8154 	bne.w	8001e6a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d005      	beq.n	8001bda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d130      	bne.n	8001c3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	2203      	movs	r2, #3
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c10:	2201      	movs	r2, #1
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	f003 0201 	and.w	r2, r3, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b03      	cmp	r3, #3
 8001c46:	d017      	beq.n	8001c78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d123      	bne.n	8001ccc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	08da      	lsrs	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3208      	adds	r2, #8
 8001c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	220f      	movs	r2, #15
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	691a      	ldr	r2, [r3, #16]
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	08da      	lsrs	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3208      	adds	r2, #8
 8001cc6:	69b9      	ldr	r1, [r7, #24]
 8001cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 0203 	and.w	r2, r3, #3
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 80ae 	beq.w	8001e6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	4b5d      	ldr	r3, [pc, #372]	; (8001e88 <HAL_GPIO_Init+0x300>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	4a5c      	ldr	r2, [pc, #368]	; (8001e88 <HAL_GPIO_Init+0x300>)
 8001d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1e:	4b5a      	ldr	r3, [pc, #360]	; (8001e88 <HAL_GPIO_Init+0x300>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d2a:	4a58      	ldr	r2, [pc, #352]	; (8001e8c <HAL_GPIO_Init+0x304>)
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	3302      	adds	r3, #2
 8001d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	220f      	movs	r2, #15
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a4f      	ldr	r2, [pc, #316]	; (8001e90 <HAL_GPIO_Init+0x308>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d025      	beq.n	8001da2 <HAL_GPIO_Init+0x21a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4e      	ldr	r2, [pc, #312]	; (8001e94 <HAL_GPIO_Init+0x30c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d01f      	beq.n	8001d9e <HAL_GPIO_Init+0x216>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4d      	ldr	r2, [pc, #308]	; (8001e98 <HAL_GPIO_Init+0x310>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d019      	beq.n	8001d9a <HAL_GPIO_Init+0x212>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4c      	ldr	r2, [pc, #304]	; (8001e9c <HAL_GPIO_Init+0x314>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d013      	beq.n	8001d96 <HAL_GPIO_Init+0x20e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4b      	ldr	r2, [pc, #300]	; (8001ea0 <HAL_GPIO_Init+0x318>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00d      	beq.n	8001d92 <HAL_GPIO_Init+0x20a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4a      	ldr	r2, [pc, #296]	; (8001ea4 <HAL_GPIO_Init+0x31c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d007      	beq.n	8001d8e <HAL_GPIO_Init+0x206>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a49      	ldr	r2, [pc, #292]	; (8001ea8 <HAL_GPIO_Init+0x320>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d101      	bne.n	8001d8a <HAL_GPIO_Init+0x202>
 8001d86:	2306      	movs	r3, #6
 8001d88:	e00c      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001d8a:	2307      	movs	r3, #7
 8001d8c:	e00a      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001d8e:	2305      	movs	r3, #5
 8001d90:	e008      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001d92:	2304      	movs	r3, #4
 8001d94:	e006      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001d96:	2303      	movs	r3, #3
 8001d98:	e004      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e002      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_GPIO_Init+0x21c>
 8001da2:	2300      	movs	r3, #0
 8001da4:	69fa      	ldr	r2, [r7, #28]
 8001da6:	f002 0203 	and.w	r2, r2, #3
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	4093      	lsls	r3, r2
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db4:	4935      	ldr	r1, [pc, #212]	; (8001e8c <HAL_GPIO_Init+0x304>)
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	3302      	adds	r3, #2
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc2:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001de6:	4a31      	ldr	r2, [pc, #196]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dec:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e10:	4a26      	ldr	r2, [pc, #152]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e16:	4b25      	ldr	r3, [pc, #148]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e3a:	4a1c      	ldr	r2, [pc, #112]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e64:	4a11      	ldr	r2, [pc, #68]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	61fb      	str	r3, [r7, #28]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	2b0f      	cmp	r3, #15
 8001e74:	f67f ae96 	bls.w	8001ba4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3724      	adds	r7, #36	; 0x24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40013800 	.word	0x40013800
 8001e90:	40020000 	.word	0x40020000
 8001e94:	40020400 	.word	0x40020400
 8001e98:	40020800 	.word	0x40020800
 8001e9c:	40020c00 	.word	0x40020c00
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40021400 	.word	0x40021400
 8001ea8:	40021800 	.word	0x40021800
 8001eac:	40013c00 	.word	0x40013c00

08001eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec0:	787b      	ldrb	r3, [r7, #1]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ecc:	e003      	b.n	8001ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	041a      	lsls	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	619a      	str	r2, [r3, #24]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ee4:	b08f      	sub	sp, #60	; 0x3c
 8001ee6:	af0a      	add	r7, sp, #40	; 0x28
 8001ee8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e116      	b.n	8002122 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d106      	bne.n	8001f14 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff fb06 	bl	8001520 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2203      	movs	r2, #3
 8001f18:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d102      	bne.n	8001f2e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f002 f809 	bl	8003f4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	687e      	ldr	r6, [r7, #4]
 8001f40:	466d      	mov	r5, sp
 8001f42:	f106 0410 	add.w	r4, r6, #16
 8001f46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f52:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f56:	1d33      	adds	r3, r6, #4
 8001f58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f5a:	6838      	ldr	r0, [r7, #0]
 8001f5c:	f001 ff94 	bl	8003e88 <USB_CoreInit>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e0d7      	b.n	8002122 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f001 fff7 	bl	8003f6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73fb      	strb	r3, [r7, #15]
 8001f82:	e04a      	b.n	800201a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f84:	7bfa      	ldrb	r2, [r7, #15]
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	333d      	adds	r3, #61	; 0x3d
 8001f94:	2201      	movs	r2, #1
 8001f96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	333c      	adds	r3, #60	; 0x3c
 8001fa8:	7bfa      	ldrb	r2, [r7, #15]
 8001faa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	b298      	uxth	r0, r3
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3342      	adds	r3, #66	; 0x42
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	333f      	adds	r3, #63	; 0x3f
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	1a9b      	subs	r3, r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3344      	adds	r3, #68	; 0x44
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	3348      	adds	r3, #72	; 0x48
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	3350      	adds	r3, #80	; 0x50
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002014:	7bfb      	ldrb	r3, [r7, #15]
 8002016:	3301      	adds	r3, #1
 8002018:	73fb      	strb	r3, [r7, #15]
 800201a:	7bfa      	ldrb	r2, [r7, #15]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	429a      	cmp	r2, r3
 8002022:	d3af      	bcc.n	8001f84 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002024:	2300      	movs	r3, #0
 8002026:	73fb      	strb	r3, [r7, #15]
 8002028:	e044      	b.n	80020b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002040:	7bfa      	ldrb	r2, [r7, #15]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	1a9b      	subs	r3, r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	1a9b      	subs	r3, r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	1a9b      	subs	r3, r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ae:	7bfb      	ldrb	r3, [r7, #15]
 80020b0:	3301      	adds	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d3b5      	bcc.n	800202a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	603b      	str	r3, [r7, #0]
 80020c4:	687e      	ldr	r6, [r7, #4]
 80020c6:	466d      	mov	r5, sp
 80020c8:	f106 0410 	add.w	r4, r6, #16
 80020cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80020dc:	1d33      	adds	r3, r6, #4
 80020de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e0:	6838      	ldr	r0, [r7, #0]
 80020e2:	f001 ff8f 	bl	8004004 <USB_DevInit>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e014      	b.n	8002122 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	2b01      	cmp	r3, #1
 800210e:	d102      	bne.n	8002116 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f80a 	bl	800212a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f002 f92d 	bl	800437a <USB_DevDisconnect>

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800212a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215c:	f043 0303 	orr.w	r3, r3, #3
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
	...

08002174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d101      	bne.n	8002188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0cc      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002188:	4b68      	ldr	r3, [pc, #416]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 030f 	and.w	r3, r3, #15
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d90c      	bls.n	80021b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b65      	ldr	r3, [pc, #404]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b63      	ldr	r3, [pc, #396]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0b8      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d020      	beq.n	80021fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d005      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c8:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	4a58      	ldr	r2, [pc, #352]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0308 	and.w	r3, r3, #8
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e0:	4b53      	ldr	r3, [pc, #332]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a52      	ldr	r2, [pc, #328]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021ec:	4b50      	ldr	r3, [pc, #320]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	494d      	ldr	r1, [pc, #308]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d044      	beq.n	8002294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d119      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e07f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d003      	beq.n	8002232 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800222e:	2b03      	cmp	r3, #3
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002232:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e06f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002242:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e067      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002252:	4b37      	ldr	r3, [pc, #220]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f023 0203 	bic.w	r2, r3, #3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4934      	ldr	r1, [pc, #208]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002260:	4313      	orrs	r3, r2
 8002262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002264:	f7ff fb7e 	bl	8001964 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	e00a      	b.n	8002282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800226c:	f7ff fb7a 	bl	8001964 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e04f      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f003 020c 	and.w	r2, r3, #12
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	429a      	cmp	r2, r3
 8002292:	d1eb      	bne.n	800226c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002294:	4b25      	ldr	r3, [pc, #148]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d20c      	bcs.n	80022bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b22      	ldr	r3, [pc, #136]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_RCC_ClockConfig+0x1b8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 030f 	and.w	r3, r3, #15
 80022b2:	683a      	ldr	r2, [r7, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e032      	b.n	8002322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d008      	beq.n	80022da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	4916      	ldr	r1, [pc, #88]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d009      	beq.n	80022fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022e6:	4b12      	ldr	r3, [pc, #72]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	490e      	ldr	r1, [pc, #56]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022fa:	f000 fbb1 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 80022fe:	4602      	mov	r2, r0
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	490a      	ldr	r1, [pc, #40]	; (8002334 <HAL_RCC_ClockConfig+0x1c0>)
 800230c:	5ccb      	ldrb	r3, [r1, r3]
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	4a09      	ldr	r2, [pc, #36]	; (8002338 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_RCC_ClockConfig+0x1c8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff f970 	bl	8001600 <HAL_InitTick>

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023c00 	.word	0x40023c00
 8002330:	40023800 	.word	0x40023800
 8002334:	08009fc0 	.word	0x08009fc0
 8002338:	20000000 	.word	0x20000000
 800233c:	20000004 	.word	0x20000004

08002340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002344:	4b03      	ldr	r3, [pc, #12]	; (8002354 <HAL_RCC_GetHCLKFreq+0x14>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	20000000 	.word	0x20000000

08002358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800235c:	f7ff fff0 	bl	8002340 <HAL_RCC_GetHCLKFreq>
 8002360:	4602      	mov	r2, r0
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	0a9b      	lsrs	r3, r3, #10
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	4903      	ldr	r1, [pc, #12]	; (800237c <HAL_RCC_GetPCLK1Freq+0x24>)
 800236e:	5ccb      	ldrb	r3, [r1, r3]
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002374:	4618      	mov	r0, r3
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40023800 	.word	0x40023800
 800237c:	08009fd0 	.word	0x08009fd0

08002380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002384:	f7ff ffdc 	bl	8002340 <HAL_RCC_GetHCLKFreq>
 8002388:	4602      	mov	r2, r0
 800238a:	4b05      	ldr	r3, [pc, #20]	; (80023a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	0b5b      	lsrs	r3, r3, #13
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	4903      	ldr	r1, [pc, #12]	; (80023a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002396:	5ccb      	ldrb	r3, [r1, r3]
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800239c:	4618      	mov	r0, r3
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40023800 	.word	0x40023800
 80023a4:	08009fd0 	.word	0x08009fd0

080023a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	220f      	movs	r2, #15
 80023b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_RCC_GetClockConfig+0x5c>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0203 	and.w	r2, r3, #3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023c4:	4b0f      	ldr	r3, [pc, #60]	; (8002404 <HAL_RCC_GetClockConfig+0x5c>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023d0:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <HAL_RCC_GetClockConfig+0x5c>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_RCC_GetClockConfig+0x5c>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	08db      	lsrs	r3, r3, #3
 80023e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <HAL_RCC_GetClockConfig+0x60>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 020f 	and.w	r2, r3, #15
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	601a      	str	r2, [r3, #0]
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40023800 	.word	0x40023800
 8002408:	40023c00 	.word	0x40023c00

0800240c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08c      	sub	sp, #48	; 0x30
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002418:	2300      	movs	r3, #0
 800241a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d010      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002444:	4b6f      	ldr	r3, [pc, #444]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800244a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	496c      	ldr	r1, [pc, #432]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002454:	4313      	orrs	r3, r2
 8002456:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002462:	2301      	movs	r3, #1
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d010      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002472:	4b64      	ldr	r3, [pc, #400]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002478:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002480:	4960      	ldr	r1, [pc, #384]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002482:	4313      	orrs	r3, r2
 8002484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002490:	2301      	movs	r3, #1
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d017      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024a0:	4b58      	ldr	r3, [pc, #352]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	4955      	ldr	r1, [pc, #340]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024be:	d101      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80024c0:	2301      	movs	r3, #1
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80024cc:	2301      	movs	r3, #1
 80024ce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d017      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024dc:	4b49      	ldr	r3, [pc, #292]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ea:	4946      	ldr	r1, [pc, #280]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024fa:	d101      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80024fc:	2301      	movs	r3, #1
 80024fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002508:	2301      	movs	r3, #1
 800250a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 808a 	beq.w	800262e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	4b39      	ldr	r3, [pc, #228]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	4a38      	ldr	r2, [pc, #224]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002528:	6413      	str	r3, [r2, #64]	; 0x40
 800252a:	4b36      	ldr	r3, [pc, #216]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002536:	4b34      	ldr	r3, [pc, #208]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a33      	ldr	r2, [pc, #204]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800253c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002540:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002542:	f7ff fa0f 	bl	8001964 <HAL_GetTick>
 8002546:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002548:	e008      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800254a:	f7ff fa0b 	bl	8001964 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e278      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800255c:	4b2a      	ldr	r3, [pc, #168]	; (8002608 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002568:	4b26      	ldr	r3, [pc, #152]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002570:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d02f      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002580:	6a3a      	ldr	r2, [r7, #32]
 8002582:	429a      	cmp	r2, r3
 8002584:	d028      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002586:	4b1f      	ldr	r3, [pc, #124]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002590:	4b1e      	ldr	r3, [pc, #120]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002596:	4b1d      	ldr	r3, [pc, #116]	; (800260c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800259c:	4a19      	ldr	r2, [pc, #100]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800259e:	6a3b      	ldr	r3, [r7, #32]
 80025a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025a2:	4b18      	ldr	r3, [pc, #96]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d114      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80025ae:	f7ff f9d9 	bl	8001964 <HAL_GetTick>
 80025b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025b4:	e00a      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7ff f9d5 	bl	8001964 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d901      	bls.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e240      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025cc:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0ee      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025e4:	d114      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80025e6:	4b07      	ldr	r3, [pc, #28]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80025f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025fa:	4902      	ldr	r1, [pc, #8]	; (8002604 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	608b      	str	r3, [r1, #8]
 8002600:	e00c      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800
 8002608:	40007000 	.word	0x40007000
 800260c:	42470e40 	.word	0x42470e40
 8002610:	4b4a      	ldr	r3, [pc, #296]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	4a49      	ldr	r2, [pc, #292]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002616:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800261a:	6093      	str	r3, [r2, #8]
 800261c:	4b47      	ldr	r3, [pc, #284]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800261e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002628:	4944      	ldr	r1, [pc, #272]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800262a:	4313      	orrs	r3, r2
 800262c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002640:	4b3f      	ldr	r3, [pc, #252]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002642:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002650:	4b3a      	ldr	r3, [pc, #232]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002652:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002656:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265e:	4937      	ldr	r1, [pc, #220]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00a      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002672:	4b32      	ldr	r3, [pc, #200]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002678:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002680:	492e      	ldr	r1, [pc, #184]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002682:	4313      	orrs	r3, r2
 8002684:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002690:	2b00      	cmp	r3, #0
 8002692:	d011      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002694:	4b29      	ldr	r3, [pc, #164]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800269a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a2:	4926      	ldr	r1, [pc, #152]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026a4:	4313      	orrs	r3, r2
 80026a6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026b2:	d101      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80026b4:	2301      	movs	r3, #1
 80026b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00a      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	491a      	ldr	r1, [pc, #104]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d011      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80026e6:	4b15      	ldr	r3, [pc, #84]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ec:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f4:	4911      	ldr	r1, [pc, #68]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002704:	d101      	bne.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002706:	2301      	movs	r3, #1
 8002708:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270c:	2b01      	cmp	r3, #1
 800270e:	d005      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002718:	f040 80ff 	bne.w	800291a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002722:	f7ff f91f 	bl	8001964 <HAL_GetTick>
 8002726:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002728:	e00e      	b.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800272a:	f7ff f91b 	bl	8001964 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d907      	bls.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e188      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800273c:	40023800 	.word	0x40023800
 8002740:	424711e0 	.word	0x424711e0
 8002744:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002748:	4b7e      	ldr	r3, [pc, #504]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1ea      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002764:	2b00      	cmp	r3, #0
 8002766:	d009      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002770:	2b00      	cmp	r3, #0
 8002772:	d028      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002778:	2b00      	cmp	r3, #0
 800277a:	d124      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800277c:	4b71      	ldr	r3, [pc, #452]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800277e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002782:	0c1b      	lsrs	r3, r3, #16
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	3301      	adds	r3, #1
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800278e:	4b6d      	ldr	r3, [pc, #436]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002794:	0e1b      	lsrs	r3, r3, #24
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	019b      	lsls	r3, r3, #6
 80027a6:	431a      	orrs	r2, r3
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	085b      	lsrs	r3, r3, #1
 80027ac:	3b01      	subs	r3, #1
 80027ae:	041b      	lsls	r3, r3, #16
 80027b0:	431a      	orrs	r2, r3
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	061b      	lsls	r3, r3, #24
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	071b      	lsls	r3, r3, #28
 80027be:	4961      	ldr	r1, [pc, #388]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d004      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027da:	d00a      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d035      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027f0:	d130      	bne.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80027f2:	4b54      	ldr	r3, [pc, #336]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f8:	0c1b      	lsrs	r3, r3, #16
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	3301      	adds	r3, #1
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002804:	4b4f      	ldr	r3, [pc, #316]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800280a:	0f1b      	lsrs	r3, r3, #28
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	019b      	lsls	r3, r3, #6
 800281c:	431a      	orrs	r2, r3
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	085b      	lsrs	r3, r3, #1
 8002822:	3b01      	subs	r3, #1
 8002824:	041b      	lsls	r3, r3, #16
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	061b      	lsls	r3, r3, #24
 800282e:	431a      	orrs	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	071b      	lsls	r3, r3, #28
 8002834:	4943      	ldr	r1, [pc, #268]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800283c:	4b41      	ldr	r3, [pc, #260]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800283e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002842:	f023 021f 	bic.w	r2, r3, #31
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	3b01      	subs	r3, #1
 800284c:	493d      	ldr	r1, [pc, #244]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285c:	2b00      	cmp	r3, #0
 800285e:	d029      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002868:	d124      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800286a:	4b36      	ldr	r3, [pc, #216]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800286c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002870:	0c1b      	lsrs	r3, r3, #16
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	3301      	adds	r3, #1
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800287c:	4b31      	ldr	r3, [pc, #196]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800287e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002882:	0f1b      	lsrs	r3, r3, #28
 8002884:	f003 0307 	and.w	r3, r3, #7
 8002888:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685a      	ldr	r2, [r3, #4]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	019b      	lsls	r3, r3, #6
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	085b      	lsrs	r3, r3, #1
 800289c:	3b01      	subs	r3, #1
 800289e:	041b      	lsls	r3, r3, #16
 80028a0:	431a      	orrs	r2, r3
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	061b      	lsls	r3, r3, #24
 80028a6:	431a      	orrs	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	071b      	lsls	r3, r3, #28
 80028ac:	4925      	ldr	r1, [pc, #148]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d016      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	019b      	lsls	r3, r3, #6
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	085b      	lsrs	r3, r3, #1
 80028d2:	3b01      	subs	r3, #1
 80028d4:	041b      	lsls	r3, r3, #16
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	061b      	lsls	r3, r3, #24
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	071b      	lsls	r3, r3, #28
 80028e6:	4917      	ldr	r1, [pc, #92]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028ee:	4b16      	ldr	r3, [pc, #88]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80028f4:	f7ff f836 	bl	8001964 <HAL_GetTick>
 80028f8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80028fc:	f7ff f832 	bl	8001964 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e09f      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800290e:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f0      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800291a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291c:	2b01      	cmp	r3, #1
 800291e:	f040 8095 	bne.w	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002922:	4b0a      	ldr	r3, [pc, #40]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002928:	f7ff f81c 	bl	8001964 <HAL_GetTick>
 800292c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800292e:	e00f      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002930:	f7ff f818 	bl	8001964 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d908      	bls.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e085      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	42470068 	.word	0x42470068
 800294c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002950:	4b41      	ldr	r3, [pc, #260]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800295c:	d0e8      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800297a:	2b00      	cmp	r3, #0
 800297c:	d02b      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002982:	2b00      	cmp	r3, #0
 8002984:	d127      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002986:	4b34      	ldr	r3, [pc, #208]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298c:	0c1b      	lsrs	r3, r3, #16
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	3301      	adds	r3, #1
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699a      	ldr	r2, [r3, #24]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	019b      	lsls	r3, r3, #6
 80029a2:	431a      	orrs	r2, r3
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	085b      	lsrs	r3, r3, #1
 80029a8:	3b01      	subs	r3, #1
 80029aa:	041b      	lsls	r3, r3, #16
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	061b      	lsls	r3, r3, #24
 80029b4:	4928      	ldr	r1, [pc, #160]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029bc:	4b26      	ldr	r3, [pc, #152]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ca:	3b01      	subs	r3, #1
 80029cc:	021b      	lsls	r3, r3, #8
 80029ce:	4922      	ldr	r1, [pc, #136]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d01d      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x612>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029ea:	d118      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029ec:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f2:	0e1b      	lsrs	r3, r3, #24
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	019b      	lsls	r3, r3, #6
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	085b      	lsrs	r3, r3, #1
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	041b      	lsls	r3, r3, #16
 8002a10:	431a      	orrs	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	061b      	lsls	r3, r3, #24
 8002a16:	4910      	ldr	r1, [pc, #64]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a24:	f7fe ff9e 	bl	8001964 <HAL_GetTick>
 8002a28:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002a2c:	f7fe ff9a 	bl	8001964 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e007      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a3e:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a4a:	d1ef      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3730      	adds	r7, #48	; 0x30
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	42470070 	.word	0x42470070

08002a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a64:	b088      	sub	sp, #32
 8002a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a7c:	4bce      	ldr	r3, [pc, #824]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 030c 	and.w	r3, r3, #12
 8002a84:	2b0c      	cmp	r3, #12
 8002a86:	f200 818d 	bhi.w	8002da4 <HAL_RCC_GetSysClockFreq+0x344>
 8002a8a:	a201      	add	r2, pc, #4	; (adr r2, 8002a90 <HAL_RCC_GetSysClockFreq+0x30>)
 8002a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a90:	08002ac5 	.word	0x08002ac5
 8002a94:	08002da5 	.word	0x08002da5
 8002a98:	08002da5 	.word	0x08002da5
 8002a9c:	08002da5 	.word	0x08002da5
 8002aa0:	08002acb 	.word	0x08002acb
 8002aa4:	08002da5 	.word	0x08002da5
 8002aa8:	08002da5 	.word	0x08002da5
 8002aac:	08002da5 	.word	0x08002da5
 8002ab0:	08002ad1 	.word	0x08002ad1
 8002ab4:	08002da5 	.word	0x08002da5
 8002ab8:	08002da5 	.word	0x08002da5
 8002abc:	08002da5 	.word	0x08002da5
 8002ac0:	08002c45 	.word	0x08002c45
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac4:	4bbd      	ldr	r3, [pc, #756]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002ac6:	61bb      	str	r3, [r7, #24]
       break;
 8002ac8:	e16f      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aca:	4bbd      	ldr	r3, [pc, #756]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0x360>)
 8002acc:	61bb      	str	r3, [r7, #24]
      break;
 8002ace:	e16c      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad0:	4bb9      	ldr	r3, [pc, #740]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ada:	4bb7      	ldr	r3, [pc, #732]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d053      	beq.n	8002b8e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae6:	4bb4      	ldr	r3, [pc, #720]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	099b      	lsrs	r3, r3, #6
 8002aec:	461a      	mov	r2, r3
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002af6:	f04f 0100 	mov.w	r1, #0
 8002afa:	ea02 0400 	and.w	r4, r2, r0
 8002afe:	603c      	str	r4, [r7, #0]
 8002b00:	400b      	ands	r3, r1
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b08:	4620      	mov	r0, r4
 8002b0a:	4629      	mov	r1, r5
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	014b      	lsls	r3, r1, #5
 8002b16:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b1a:	0142      	lsls	r2, r0, #5
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4623      	mov	r3, r4
 8002b22:	1ac0      	subs	r0, r0, r3
 8002b24:	462b      	mov	r3, r5
 8002b26:	eb61 0103 	sbc.w	r1, r1, r3
 8002b2a:	f04f 0200 	mov.w	r2, #0
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	018b      	lsls	r3, r1, #6
 8002b34:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b38:	0182      	lsls	r2, r0, #6
 8002b3a:	1a12      	subs	r2, r2, r0
 8002b3c:	eb63 0301 	sbc.w	r3, r3, r1
 8002b40:	f04f 0000 	mov.w	r0, #0
 8002b44:	f04f 0100 	mov.w	r1, #0
 8002b48:	00d9      	lsls	r1, r3, #3
 8002b4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b4e:	00d0      	lsls	r0, r2, #3
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4621      	mov	r1, r4
 8002b56:	1852      	adds	r2, r2, r1
 8002b58:	4629      	mov	r1, r5
 8002b5a:	eb43 0101 	adc.w	r1, r3, r1
 8002b5e:	460b      	mov	r3, r1
 8002b60:	f04f 0000 	mov.w	r0, #0
 8002b64:	f04f 0100 	mov.w	r1, #0
 8002b68:	0259      	lsls	r1, r3, #9
 8002b6a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b6e:	0250      	lsls	r0, r2, #9
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4610      	mov	r0, r2
 8002b76:	4619      	mov	r1, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	f7fe f832 	bl	8000be8 <__aeabi_uldivmod>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4613      	mov	r3, r2
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	e04c      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b8e:	4b8a      	ldr	r3, [pc, #552]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	099b      	lsrs	r3, r3, #6
 8002b94:	461a      	mov	r2, r3
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b9e:	f04f 0100 	mov.w	r1, #0
 8002ba2:	ea02 0a00 	and.w	sl, r2, r0
 8002ba6:	ea03 0b01 	and.w	fp, r3, r1
 8002baa:	4650      	mov	r0, sl
 8002bac:	4659      	mov	r1, fp
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	014b      	lsls	r3, r1, #5
 8002bb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bbc:	0142      	lsls	r2, r0, #5
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	ebb0 000a 	subs.w	r0, r0, sl
 8002bc6:	eb61 010b 	sbc.w	r1, r1, fp
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	018b      	lsls	r3, r1, #6
 8002bd4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bd8:	0182      	lsls	r2, r0, #6
 8002bda:	1a12      	subs	r2, r2, r0
 8002bdc:	eb63 0301 	sbc.w	r3, r3, r1
 8002be0:	f04f 0000 	mov.w	r0, #0
 8002be4:	f04f 0100 	mov.w	r1, #0
 8002be8:	00d9      	lsls	r1, r3, #3
 8002bea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bee:	00d0      	lsls	r0, r2, #3
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	eb12 020a 	adds.w	r2, r2, sl
 8002bf8:	eb43 030b 	adc.w	r3, r3, fp
 8002bfc:	f04f 0000 	mov.w	r0, #0
 8002c00:	f04f 0100 	mov.w	r1, #0
 8002c04:	0299      	lsls	r1, r3, #10
 8002c06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c0a:	0290      	lsls	r0, r2, #10
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	461a      	mov	r2, r3
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	f7fd ffe4 	bl	8000be8 <__aeabi_uldivmod>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4613      	mov	r3, r2
 8002c26:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c28:	4b63      	ldr	r3, [pc, #396]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	3301      	adds	r3, #1
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002c38:	69fa      	ldr	r2, [r7, #28]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c40:	61bb      	str	r3, [r7, #24]
      break;
 8002c42:	e0b2      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c44:	4b5c      	ldr	r3, [pc, #368]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c4c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c4e:	4b5a      	ldr	r3, [pc, #360]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d04d      	beq.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c5a:	4b57      	ldr	r3, [pc, #348]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	099b      	lsrs	r3, r3, #6
 8002c60:	461a      	mov	r2, r3
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c6a:	f04f 0100 	mov.w	r1, #0
 8002c6e:	ea02 0800 	and.w	r8, r2, r0
 8002c72:	ea03 0901 	and.w	r9, r3, r1
 8002c76:	4640      	mov	r0, r8
 8002c78:	4649      	mov	r1, r9
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	014b      	lsls	r3, r1, #5
 8002c84:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c88:	0142      	lsls	r2, r0, #5
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	ebb0 0008 	subs.w	r0, r0, r8
 8002c92:	eb61 0109 	sbc.w	r1, r1, r9
 8002c96:	f04f 0200 	mov.w	r2, #0
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	018b      	lsls	r3, r1, #6
 8002ca0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ca4:	0182      	lsls	r2, r0, #6
 8002ca6:	1a12      	subs	r2, r2, r0
 8002ca8:	eb63 0301 	sbc.w	r3, r3, r1
 8002cac:	f04f 0000 	mov.w	r0, #0
 8002cb0:	f04f 0100 	mov.w	r1, #0
 8002cb4:	00d9      	lsls	r1, r3, #3
 8002cb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cba:	00d0      	lsls	r0, r2, #3
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	eb12 0208 	adds.w	r2, r2, r8
 8002cc4:	eb43 0309 	adc.w	r3, r3, r9
 8002cc8:	f04f 0000 	mov.w	r0, #0
 8002ccc:	f04f 0100 	mov.w	r1, #0
 8002cd0:	0259      	lsls	r1, r3, #9
 8002cd2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002cd6:	0250      	lsls	r0, r2, #9
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	f7fd ff7e 	bl	8000be8 <__aeabi_uldivmod>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	61fb      	str	r3, [r7, #28]
 8002cf4:	e04a      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cf6:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	099b      	lsrs	r3, r3, #6
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d06:	f04f 0100 	mov.w	r1, #0
 8002d0a:	ea02 0400 	and.w	r4, r2, r0
 8002d0e:	ea03 0501 	and.w	r5, r3, r1
 8002d12:	4620      	mov	r0, r4
 8002d14:	4629      	mov	r1, r5
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	014b      	lsls	r3, r1, #5
 8002d20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d24:	0142      	lsls	r2, r0, #5
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	1b00      	subs	r0, r0, r4
 8002d2c:	eb61 0105 	sbc.w	r1, r1, r5
 8002d30:	f04f 0200 	mov.w	r2, #0
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	018b      	lsls	r3, r1, #6
 8002d3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d3e:	0182      	lsls	r2, r0, #6
 8002d40:	1a12      	subs	r2, r2, r0
 8002d42:	eb63 0301 	sbc.w	r3, r3, r1
 8002d46:	f04f 0000 	mov.w	r0, #0
 8002d4a:	f04f 0100 	mov.w	r1, #0
 8002d4e:	00d9      	lsls	r1, r3, #3
 8002d50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d54:	00d0      	lsls	r0, r2, #3
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	1912      	adds	r2, r2, r4
 8002d5c:	eb45 0303 	adc.w	r3, r5, r3
 8002d60:	f04f 0000 	mov.w	r0, #0
 8002d64:	f04f 0100 	mov.w	r1, #0
 8002d68:	0299      	lsls	r1, r3, #10
 8002d6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d6e:	0290      	lsls	r0, r2, #10
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4610      	mov	r0, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	f7fd ff32 	bl	8000be8 <__aeabi_uldivmod>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4613      	mov	r3, r2
 8002d8a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	0f1b      	lsrs	r3, r3, #28
 8002d92:	f003 0307 	and.w	r3, r3, #7
 8002d96:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da0:	61bb      	str	r3, [r7, #24]
      break;
 8002da2:	e002      	b.n	8002daa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002da4:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002da6:	61bb      	str	r3, [r7, #24]
      break;
 8002da8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002daa:	69bb      	ldr	r3, [r7, #24]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3720      	adds	r7, #32
 8002db0:	46bd      	mov	sp, r7
 8002db2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	00f42400 	.word	0x00f42400
 8002dc0:	007a1200 	.word	0x007a1200

08002dc4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e28d      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	f000 8083 	beq.w	8002eea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002de4:	4b94      	ldr	r3, [pc, #592]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d019      	beq.n	8002e24 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002df0:	4b91      	ldr	r3, [pc, #580]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d106      	bne.n	8002e0a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002dfc:	4b8e      	ldr	r3, [pc, #568]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e08:	d00c      	beq.n	8002e24 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e0a:	4b8b      	ldr	r3, [pc, #556]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e12:	2b0c      	cmp	r3, #12
 8002e14:	d112      	bne.n	8002e3c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e16:	4b88      	ldr	r3, [pc, #544]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e22:	d10b      	bne.n	8002e3c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e24:	4b84      	ldr	r3, [pc, #528]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d05b      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x124>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d157      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e25a      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e44:	d106      	bne.n	8002e54 <HAL_RCC_OscConfig+0x90>
 8002e46:	4b7c      	ldr	r3, [pc, #496]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a7b      	ldr	r2, [pc, #492]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	e01d      	b.n	8002e90 <HAL_RCC_OscConfig+0xcc>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCC_OscConfig+0xb4>
 8002e5e:	4b76      	ldr	r3, [pc, #472]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a75      	ldr	r2, [pc, #468]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	4b73      	ldr	r3, [pc, #460]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a72      	ldr	r2, [pc, #456]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	e00b      	b.n	8002e90 <HAL_RCC_OscConfig+0xcc>
 8002e78:	4b6f      	ldr	r3, [pc, #444]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a6e      	ldr	r2, [pc, #440]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	4b6c      	ldr	r3, [pc, #432]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a6b      	ldr	r2, [pc, #428]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d013      	beq.n	8002ec0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e98:	f7fe fd64 	bl	8001964 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7fe fd60 	bl	8001964 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	; 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e21f      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb2:	4b61      	ldr	r3, [pc, #388]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0xdc>
 8002ebe:	e014      	b.n	8002eea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fd50 	bl	8001964 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec8:	f7fe fd4c 	bl	8001964 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b64      	cmp	r3, #100	; 0x64
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e20b      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eda:	4b57      	ldr	r3, [pc, #348]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x104>
 8002ee6:	e000      	b.n	8002eea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d06f      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ef6:	4b50      	ldr	r3, [pc, #320]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d017      	beq.n	8002f32 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f02:	4b4d      	ldr	r3, [pc, #308]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d105      	bne.n	8002f1a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f0e:	4b4a      	ldr	r3, [pc, #296]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f1a:	4b47      	ldr	r3, [pc, #284]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f22:	2b0c      	cmp	r3, #12
 8002f24:	d11c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f26:	4b44      	ldr	r3, [pc, #272]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d116      	bne.n	8002f60 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f32:	4b41      	ldr	r3, [pc, #260]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d005      	beq.n	8002f4a <HAL_RCC_OscConfig+0x186>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d001      	beq.n	8002f4a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e1d3      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4a:	4b3b      	ldr	r3, [pc, #236]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4937      	ldr	r1, [pc, #220]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	e03a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d020      	beq.n	8002faa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f68:	4b34      	ldr	r3, [pc, #208]	; (800303c <HAL_RCC_OscConfig+0x278>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7fe fcf9 	bl	8001964 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f76:	f7fe fcf5 	bl	8001964 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e1b4      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f88:	4b2b      	ldr	r3, [pc, #172]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f94:	4b28      	ldr	r3, [pc, #160]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4925      	ldr	r1, [pc, #148]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	600b      	str	r3, [r1, #0]
 8002fa8:	e015      	b.n	8002fd6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002faa:	4b24      	ldr	r3, [pc, #144]	; (800303c <HAL_RCC_OscConfig+0x278>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fcd8 	bl	8001964 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fb8:	f7fe fcd4 	bl	8001964 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e193      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fca:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d036      	beq.n	8003050 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d016      	beq.n	8003018 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <HAL_RCC_OscConfig+0x27c>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7fe fcb8 	bl	8001964 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ff8:	f7fe fcb4 	bl	8001964 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e173      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300a:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <HAL_RCC_OscConfig+0x274>)
 800300c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x234>
 8003016:	e01b      	b.n	8003050 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003018:	4b09      	ldr	r3, [pc, #36]	; (8003040 <HAL_RCC_OscConfig+0x27c>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301e:	f7fe fca1 	bl	8001964 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003024:	e00e      	b.n	8003044 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003026:	f7fe fc9d 	bl	8001964 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d907      	bls.n	8003044 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e15c      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
 8003038:	40023800 	.word	0x40023800
 800303c:	42470000 	.word	0x42470000
 8003040:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003044:	4b8a      	ldr	r3, [pc, #552]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ea      	bne.n	8003026 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 8097 	beq.w	800318c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800305e:	2300      	movs	r3, #0
 8003060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003062:	4b83      	ldr	r3, [pc, #524]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10f      	bne.n	800308e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	4b7f      	ldr	r3, [pc, #508]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	4a7e      	ldr	r2, [pc, #504]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307c:	6413      	str	r3, [r2, #64]	; 0x40
 800307e:	4b7c      	ldr	r3, [pc, #496]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800308a:	2301      	movs	r3, #1
 800308c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308e:	4b79      	ldr	r3, [pc, #484]	; (8003274 <HAL_RCC_OscConfig+0x4b0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d118      	bne.n	80030cc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800309a:	4b76      	ldr	r3, [pc, #472]	; (8003274 <HAL_RCC_OscConfig+0x4b0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a75      	ldr	r2, [pc, #468]	; (8003274 <HAL_RCC_OscConfig+0x4b0>)
 80030a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a6:	f7fe fc5d 	bl	8001964 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ae:	f7fe fc59 	bl	8001964 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e118      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c0:	4b6c      	ldr	r3, [pc, #432]	; (8003274 <HAL_RCC_OscConfig+0x4b0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d106      	bne.n	80030e2 <HAL_RCC_OscConfig+0x31e>
 80030d4:	4b66      	ldr	r3, [pc, #408]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 80030d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d8:	4a65      	ldr	r2, [pc, #404]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6713      	str	r3, [r2, #112]	; 0x70
 80030e0:	e01c      	b.n	800311c <HAL_RCC_OscConfig+0x358>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b05      	cmp	r3, #5
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0x340>
 80030ea:	4b61      	ldr	r3, [pc, #388]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	4a60      	ldr	r2, [pc, #384]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 80030f0:	f043 0304 	orr.w	r3, r3, #4
 80030f4:	6713      	str	r3, [r2, #112]	; 0x70
 80030f6:	4b5e      	ldr	r3, [pc, #376]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	4a5d      	ldr	r2, [pc, #372]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6713      	str	r3, [r2, #112]	; 0x70
 8003102:	e00b      	b.n	800311c <HAL_RCC_OscConfig+0x358>
 8003104:	4b5a      	ldr	r3, [pc, #360]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003108:	4a59      	ldr	r2, [pc, #356]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 800310a:	f023 0301 	bic.w	r3, r3, #1
 800310e:	6713      	str	r3, [r2, #112]	; 0x70
 8003110:	4b57      	ldr	r3, [pc, #348]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	4a56      	ldr	r2, [pc, #344]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003116:	f023 0304 	bic.w	r3, r3, #4
 800311a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d015      	beq.n	8003150 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003124:	f7fe fc1e 	bl	8001964 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312a:	e00a      	b.n	8003142 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800312c:	f7fe fc1a 	bl	8001964 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	; 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e0d7      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003142:	4b4b      	ldr	r3, [pc, #300]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0ee      	beq.n	800312c <HAL_RCC_OscConfig+0x368>
 800314e:	e014      	b.n	800317a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7fe fc08 	bl	8001964 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003156:	e00a      	b.n	800316e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003158:	f7fe fc04 	bl	8001964 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	; 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e0c1      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316e:	4b40      	ldr	r3, [pc, #256]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1ee      	bne.n	8003158 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800317a:	7dfb      	ldrb	r3, [r7, #23]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d105      	bne.n	800318c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003180:	4b3b      	ldr	r3, [pc, #236]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003184:	4a3a      	ldr	r2, [pc, #232]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800318a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80ad 	beq.w	80032f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003196:	4b36      	ldr	r3, [pc, #216]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d060      	beq.n	8003264 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d145      	bne.n	8003236 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	4b33      	ldr	r3, [pc, #204]	; (8003278 <HAL_RCC_OscConfig+0x4b4>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fe fbd8 	bl	8001964 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fe fbd4 	bl	8001964 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e093      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ca:	4b29      	ldr	r3, [pc, #164]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69da      	ldr	r2, [r3, #28]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	019b      	lsls	r3, r3, #6
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ec:	085b      	lsrs	r3, r3, #1
 80031ee:	3b01      	subs	r3, #1
 80031f0:	041b      	lsls	r3, r3, #16
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	061b      	lsls	r3, r3, #24
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003200:	071b      	lsls	r3, r3, #28
 8003202:	491b      	ldr	r1, [pc, #108]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003204:	4313      	orrs	r3, r2
 8003206:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003208:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <HAL_RCC_OscConfig+0x4b4>)
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7fe fba9 	bl	8001964 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003216:	f7fe fba5 	bl	8001964 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e064      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003228:	4b11      	ldr	r3, [pc, #68]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x452>
 8003234:	e05c      	b.n	80032f0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003236:	4b10      	ldr	r3, [pc, #64]	; (8003278 <HAL_RCC_OscConfig+0x4b4>)
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe fb92 	bl	8001964 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003244:	f7fe fb8e 	bl	8001964 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e04d      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_RCC_OscConfig+0x4ac>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1f0      	bne.n	8003244 <HAL_RCC_OscConfig+0x480>
 8003262:	e045      	b.n	80032f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d107      	bne.n	800327c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e040      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
 8003270:	40023800 	.word	0x40023800
 8003274:	40007000 	.word	0x40007000
 8003278:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800327c:	4b1f      	ldr	r3, [pc, #124]	; (80032fc <HAL_RCC_OscConfig+0x538>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d030      	beq.n	80032ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003294:	429a      	cmp	r2, r3
 8003296:	d129      	bne.n	80032ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d122      	bne.n	80032ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032ac:	4013      	ands	r3, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d119      	bne.n	80032ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	085b      	lsrs	r3, r3, #1
 80032c4:	3b01      	subs	r3, #1
 80032c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d10f      	bne.n	80032ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032d8:	429a      	cmp	r2, r3
 80032da:	d107      	bne.n	80032ec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d001      	beq.n	80032f0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e000      	b.n	80032f2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800

08003300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e041      	b.n	8003396 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f839 	bl	800339e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	4619      	mov	r1, r3
 800333e:	4610      	mov	r0, r2
 8003340:	f000 f9d8 	bl	80036f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d001      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e04e      	b.n	800346a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a23      	ldr	r2, [pc, #140]	; (8003478 <HAL_TIM_Base_Start_IT+0xc4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d022      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f6:	d01d      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1f      	ldr	r2, [pc, #124]	; (800347c <HAL_TIM_Base_Start_IT+0xc8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d018      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1e      	ldr	r2, [pc, #120]	; (8003480 <HAL_TIM_Base_Start_IT+0xcc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d013      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1c      	ldr	r2, [pc, #112]	; (8003484 <HAL_TIM_Base_Start_IT+0xd0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00e      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1b      	ldr	r2, [pc, #108]	; (8003488 <HAL_TIM_Base_Start_IT+0xd4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d009      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a19      	ldr	r2, [pc, #100]	; (800348c <HAL_TIM_Base_Start_IT+0xd8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d004      	beq.n	8003434 <HAL_TIM_Base_Start_IT+0x80>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a18      	ldr	r2, [pc, #96]	; (8003490 <HAL_TIM_Base_Start_IT+0xdc>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d111      	bne.n	8003458 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b06      	cmp	r3, #6
 8003444:	d010      	beq.n	8003468 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0201 	orr.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003456:	e007      	b.n	8003468 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3714      	adds	r7, #20
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	40010000 	.word	0x40010000
 800347c:	40000400 	.word	0x40000400
 8003480:	40000800 	.word	0x40000800
 8003484:	40000c00 	.word	0x40000c00
 8003488:	40010400 	.word	0x40010400
 800348c:	40014000 	.word	0x40014000
 8003490:	40001800 	.word	0x40001800

08003494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d122      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d11b      	bne.n	80034f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0202 	mvn.w	r2, #2
 80034c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f8ee 	bl	80036b8 <HAL_TIM_IC_CaptureCallback>
 80034dc:	e005      	b.n	80034ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f8e0 	bl	80036a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f8f1 	bl	80036cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d122      	bne.n	8003544 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b04      	cmp	r3, #4
 800350a:	d11b      	bne.n	8003544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0204 	mvn.w	r2, #4
 8003514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2202      	movs	r2, #2
 800351a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f8c4 	bl	80036b8 <HAL_TIM_IC_CaptureCallback>
 8003530:	e005      	b.n	800353e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f8b6 	bl	80036a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f8c7 	bl	80036cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b08      	cmp	r3, #8
 8003550:	d122      	bne.n	8003598 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b08      	cmp	r3, #8
 800355e:	d11b      	bne.n	8003598 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f06f 0208 	mvn.w	r2, #8
 8003568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2204      	movs	r2, #4
 800356e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f89a 	bl	80036b8 <HAL_TIM_IC_CaptureCallback>
 8003584:	e005      	b.n	8003592 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f88c 	bl	80036a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f89d 	bl	80036cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	2b10      	cmp	r3, #16
 80035a4:	d122      	bne.n	80035ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b10      	cmp	r3, #16
 80035b2:	d11b      	bne.n	80035ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0210 	mvn.w	r2, #16
 80035bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2208      	movs	r2, #8
 80035c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f870 	bl	80036b8 <HAL_TIM_IC_CaptureCallback>
 80035d8:	e005      	b.n	80035e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f862 	bl	80036a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f873 	bl	80036cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d10e      	bne.n	8003618 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b01      	cmp	r3, #1
 8003606:	d107      	bne.n	8003618 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0201 	mvn.w	r2, #1
 8003610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fd fef8 	bl	8001408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003622:	2b80      	cmp	r3, #128	; 0x80
 8003624:	d10e      	bne.n	8003644 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003630:	2b80      	cmp	r3, #128	; 0x80
 8003632:	d107      	bne.n	8003644 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800363c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f902 	bl	8003848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364e:	2b40      	cmp	r3, #64	; 0x40
 8003650:	d10e      	bne.n	8003670 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d107      	bne.n	8003670 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f838 	bl	80036e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b20      	cmp	r3, #32
 800367c:	d10e      	bne.n	800369c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b20      	cmp	r3, #32
 800368a:	d107      	bne.n	800369c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0220 	mvn.w	r2, #32
 8003694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f8cc 	bl	8003834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800369c:	bf00      	nop
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a40      	ldr	r2, [pc, #256]	; (8003808 <TIM_Base_SetConfig+0x114>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d013      	beq.n	8003734 <TIM_Base_SetConfig+0x40>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003712:	d00f      	beq.n	8003734 <TIM_Base_SetConfig+0x40>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a3d      	ldr	r2, [pc, #244]	; (800380c <TIM_Base_SetConfig+0x118>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d00b      	beq.n	8003734 <TIM_Base_SetConfig+0x40>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a3c      	ldr	r2, [pc, #240]	; (8003810 <TIM_Base_SetConfig+0x11c>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d007      	beq.n	8003734 <TIM_Base_SetConfig+0x40>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a3b      	ldr	r2, [pc, #236]	; (8003814 <TIM_Base_SetConfig+0x120>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d003      	beq.n	8003734 <TIM_Base_SetConfig+0x40>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a3a      	ldr	r2, [pc, #232]	; (8003818 <TIM_Base_SetConfig+0x124>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d108      	bne.n	8003746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a2f      	ldr	r2, [pc, #188]	; (8003808 <TIM_Base_SetConfig+0x114>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d02b      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003754:	d027      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a2c      	ldr	r2, [pc, #176]	; (800380c <TIM_Base_SetConfig+0x118>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d023      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a2b      	ldr	r2, [pc, #172]	; (8003810 <TIM_Base_SetConfig+0x11c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d01f      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a2a      	ldr	r2, [pc, #168]	; (8003814 <TIM_Base_SetConfig+0x120>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d01b      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a29      	ldr	r2, [pc, #164]	; (8003818 <TIM_Base_SetConfig+0x124>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d017      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a28      	ldr	r2, [pc, #160]	; (800381c <TIM_Base_SetConfig+0x128>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d013      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a27      	ldr	r2, [pc, #156]	; (8003820 <TIM_Base_SetConfig+0x12c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00f      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a26      	ldr	r2, [pc, #152]	; (8003824 <TIM_Base_SetConfig+0x130>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00b      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a25      	ldr	r2, [pc, #148]	; (8003828 <TIM_Base_SetConfig+0x134>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d007      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a24      	ldr	r2, [pc, #144]	; (800382c <TIM_Base_SetConfig+0x138>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d003      	beq.n	80037a6 <TIM_Base_SetConfig+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a23      	ldr	r2, [pc, #140]	; (8003830 <TIM_Base_SetConfig+0x13c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d108      	bne.n	80037b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <TIM_Base_SetConfig+0x114>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d003      	beq.n	80037ec <TIM_Base_SetConfig+0xf8>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a0c      	ldr	r2, [pc, #48]	; (8003818 <TIM_Base_SetConfig+0x124>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d103      	bne.n	80037f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	691a      	ldr	r2, [r3, #16]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	615a      	str	r2, [r3, #20]
}
 80037fa:	bf00      	nop
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40010000 	.word	0x40010000
 800380c:	40000400 	.word	0x40000400
 8003810:	40000800 	.word	0x40000800
 8003814:	40000c00 	.word	0x40000c00
 8003818:	40010400 	.word	0x40010400
 800381c:	40014000 	.word	0x40014000
 8003820:	40014400 	.word	0x40014400
 8003824:	40014800 	.word	0x40014800
 8003828:	40001800 	.word	0x40001800
 800382c:	40001c00 	.word	0x40001c00
 8003830:	40002000 	.word	0x40002000

08003834 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e03f      	b.n	80038ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd fe04 	bl	8001490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2224      	movs	r2, #36	; 0x24
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800389e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f929 	bl	8003af8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b08a      	sub	sp, #40	; 0x28
 80038fa:	af02      	add	r7, sp, #8
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	603b      	str	r3, [r7, #0]
 8003902:	4613      	mov	r3, r2
 8003904:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b20      	cmp	r3, #32
 8003914:	d17c      	bne.n	8003a10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_UART_Transmit+0x2c>
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e075      	b.n	8003a12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_UART_Transmit+0x3e>
 8003930:	2302      	movs	r3, #2
 8003932:	e06e      	b.n	8003a12 <HAL_UART_Transmit+0x11c>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2221      	movs	r2, #33	; 0x21
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800394a:	f7fe f80b 	bl	8001964 <HAL_GetTick>
 800394e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	88fa      	ldrh	r2, [r7, #6]
 8003954:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	88fa      	ldrh	r2, [r7, #6]
 800395a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003964:	d108      	bne.n	8003978 <HAL_UART_Transmit+0x82>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d104      	bne.n	8003978 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	e003      	b.n	8003980 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800397c:	2300      	movs	r3, #0
 800397e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003988:	e02a      	b.n	80039e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2200      	movs	r2, #0
 8003992:	2180      	movs	r1, #128	; 0x80
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f840 	bl	8003a1a <UART_WaitOnFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e036      	b.n	8003a12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10b      	bne.n	80039c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	3302      	adds	r3, #2
 80039be:	61bb      	str	r3, [r7, #24]
 80039c0:	e007      	b.n	80039d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	3301      	adds	r3, #1
 80039d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1cf      	bne.n	800398a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	9300      	str	r3, [sp, #0]
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2200      	movs	r2, #0
 80039f2:	2140      	movs	r1, #64	; 0x40
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 f810 	bl	8003a1a <UART_WaitOnFlagUntilTimeout>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e006      	b.n	8003a12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	e000      	b.n	8003a12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a10:	2302      	movs	r3, #2
  }
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3720      	adds	r7, #32
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b090      	sub	sp, #64	; 0x40
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	603b      	str	r3, [r7, #0]
 8003a26:	4613      	mov	r3, r2
 8003a28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a2a:	e050      	b.n	8003ace <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a32:	d04c      	beq.n	8003ace <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d007      	beq.n	8003a4a <UART_WaitOnFlagUntilTimeout+0x30>
 8003a3a:	f7fd ff93 	bl	8001964 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d241      	bcs.n	8003ace <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	330c      	adds	r3, #12
 8003a50:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	e853 3f00 	ldrex	r3, [r3]
 8003a58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	330c      	adds	r3, #12
 8003a68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a6a:	637a      	str	r2, [r7, #52]	; 0x34
 8003a6c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a72:	e841 2300 	strex	r3, r2, [r1]
 8003a76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e5      	bne.n	8003a4a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	3314      	adds	r3, #20
 8003a84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	e853 3f00 	ldrex	r3, [r3]
 8003a8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	3314      	adds	r3, #20
 8003a9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a9e:	623a      	str	r2, [r7, #32]
 8003aa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	69f9      	ldr	r1, [r7, #28]
 8003aa4:	6a3a      	ldr	r2, [r7, #32]
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e5      	bne.n	8003a7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e00f      	b.n	8003aee <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	bf0c      	ite	eq
 8003ade:	2301      	moveq	r3, #1
 8003ae0:	2300      	movne	r3, #0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d09f      	beq.n	8003a2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3740      	adds	r7, #64	; 0x40
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003afc:	b09f      	sub	sp, #124	; 0x7c
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b0e:	68d9      	ldr	r1, [r3, #12]
 8003b10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	ea40 0301 	orr.w	r3, r0, r1
 8003b18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b3c:	f021 010c 	bic.w	r1, r1, #12
 8003b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b46:	430b      	orrs	r3, r1
 8003b48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b56:	6999      	ldr	r1, [r3, #24]
 8003b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	ea40 0301 	orr.w	r3, r0, r1
 8003b60:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4bc5      	ldr	r3, [pc, #788]	; (8003e7c <UART_SetConfig+0x384>)
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d004      	beq.n	8003b76 <UART_SetConfig+0x7e>
 8003b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4bc3      	ldr	r3, [pc, #780]	; (8003e80 <UART_SetConfig+0x388>)
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d103      	bne.n	8003b7e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b76:	f7fe fc03 	bl	8002380 <HAL_RCC_GetPCLK2Freq>
 8003b7a:	6778      	str	r0, [r7, #116]	; 0x74
 8003b7c:	e002      	b.n	8003b84 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b7e:	f7fe fbeb 	bl	8002358 <HAL_RCC_GetPCLK1Freq>
 8003b82:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b8c:	f040 80b6 	bne.w	8003cfc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b92:	461c      	mov	r4, r3
 8003b94:	f04f 0500 	mov.w	r5, #0
 8003b98:	4622      	mov	r2, r4
 8003b9a:	462b      	mov	r3, r5
 8003b9c:	1891      	adds	r1, r2, r2
 8003b9e:	6439      	str	r1, [r7, #64]	; 0x40
 8003ba0:	415b      	adcs	r3, r3
 8003ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ba4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ba8:	1912      	adds	r2, r2, r4
 8003baa:	eb45 0303 	adc.w	r3, r5, r3
 8003bae:	f04f 0000 	mov.w	r0, #0
 8003bb2:	f04f 0100 	mov.w	r1, #0
 8003bb6:	00d9      	lsls	r1, r3, #3
 8003bb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bbc:	00d0      	lsls	r0, r2, #3
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	1911      	adds	r1, r2, r4
 8003bc4:	6639      	str	r1, [r7, #96]	; 0x60
 8003bc6:	416b      	adcs	r3, r5
 8003bc8:	667b      	str	r3, [r7, #100]	; 0x64
 8003bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	1891      	adds	r1, r2, r2
 8003bd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bd8:	415b      	adcs	r3, r3
 8003bda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003be0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003be4:	f7fd f800 	bl	8000be8 <__aeabi_uldivmod>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4ba5      	ldr	r3, [pc, #660]	; (8003e84 <UART_SetConfig+0x38c>)
 8003bee:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	011e      	lsls	r6, r3, #4
 8003bf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf8:	461c      	mov	r4, r3
 8003bfa:	f04f 0500 	mov.w	r5, #0
 8003bfe:	4622      	mov	r2, r4
 8003c00:	462b      	mov	r3, r5
 8003c02:	1891      	adds	r1, r2, r2
 8003c04:	6339      	str	r1, [r7, #48]	; 0x30
 8003c06:	415b      	adcs	r3, r3
 8003c08:	637b      	str	r3, [r7, #52]	; 0x34
 8003c0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c0e:	1912      	adds	r2, r2, r4
 8003c10:	eb45 0303 	adc.w	r3, r5, r3
 8003c14:	f04f 0000 	mov.w	r0, #0
 8003c18:	f04f 0100 	mov.w	r1, #0
 8003c1c:	00d9      	lsls	r1, r3, #3
 8003c1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c22:	00d0      	lsls	r0, r2, #3
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	1911      	adds	r1, r2, r4
 8003c2a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c2c:	416b      	adcs	r3, r5
 8003c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	461a      	mov	r2, r3
 8003c36:	f04f 0300 	mov.w	r3, #0
 8003c3a:	1891      	adds	r1, r2, r2
 8003c3c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c3e:	415b      	adcs	r3, r3
 8003c40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c46:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003c4a:	f7fc ffcd 	bl	8000be8 <__aeabi_uldivmod>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	4b8c      	ldr	r3, [pc, #560]	; (8003e84 <UART_SetConfig+0x38c>)
 8003c54:	fba3 1302 	umull	r1, r3, r3, r2
 8003c58:	095b      	lsrs	r3, r3, #5
 8003c5a:	2164      	movs	r1, #100	; 0x64
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	3332      	adds	r3, #50	; 0x32
 8003c66:	4a87      	ldr	r2, [pc, #540]	; (8003e84 <UART_SetConfig+0x38c>)
 8003c68:	fba2 2303 	umull	r2, r3, r2, r3
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c74:	441e      	add	r6, r3
 8003c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f04f 0100 	mov.w	r1, #0
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	1894      	adds	r4, r2, r2
 8003c84:	623c      	str	r4, [r7, #32]
 8003c86:	415b      	adcs	r3, r3
 8003c88:	627b      	str	r3, [r7, #36]	; 0x24
 8003c8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c8e:	1812      	adds	r2, r2, r0
 8003c90:	eb41 0303 	adc.w	r3, r1, r3
 8003c94:	f04f 0400 	mov.w	r4, #0
 8003c98:	f04f 0500 	mov.w	r5, #0
 8003c9c:	00dd      	lsls	r5, r3, #3
 8003c9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ca2:	00d4      	lsls	r4, r2, #3
 8003ca4:	4622      	mov	r2, r4
 8003ca6:	462b      	mov	r3, r5
 8003ca8:	1814      	adds	r4, r2, r0
 8003caa:	653c      	str	r4, [r7, #80]	; 0x50
 8003cac:	414b      	adcs	r3, r1
 8003cae:	657b      	str	r3, [r7, #84]	; 0x54
 8003cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	1891      	adds	r1, r2, r2
 8003cbc:	61b9      	str	r1, [r7, #24]
 8003cbe:	415b      	adcs	r3, r3
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cc6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003cca:	f7fc ff8d 	bl	8000be8 <__aeabi_uldivmod>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4b6c      	ldr	r3, [pc, #432]	; (8003e84 <UART_SetConfig+0x38c>)
 8003cd4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	2164      	movs	r1, #100	; 0x64
 8003cdc:	fb01 f303 	mul.w	r3, r1, r3
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	3332      	adds	r3, #50	; 0x32
 8003ce6:	4a67      	ldr	r2, [pc, #412]	; (8003e84 <UART_SetConfig+0x38c>)
 8003ce8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	f003 0207 	and.w	r2, r3, #7
 8003cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4432      	add	r2, r6
 8003cf8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cfa:	e0b9      	b.n	8003e70 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cfe:	461c      	mov	r4, r3
 8003d00:	f04f 0500 	mov.w	r5, #0
 8003d04:	4622      	mov	r2, r4
 8003d06:	462b      	mov	r3, r5
 8003d08:	1891      	adds	r1, r2, r2
 8003d0a:	6139      	str	r1, [r7, #16]
 8003d0c:	415b      	adcs	r3, r3
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d14:	1912      	adds	r2, r2, r4
 8003d16:	eb45 0303 	adc.w	r3, r5, r3
 8003d1a:	f04f 0000 	mov.w	r0, #0
 8003d1e:	f04f 0100 	mov.w	r1, #0
 8003d22:	00d9      	lsls	r1, r3, #3
 8003d24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d28:	00d0      	lsls	r0, r2, #3
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	eb12 0804 	adds.w	r8, r2, r4
 8003d32:	eb43 0905 	adc.w	r9, r3, r5
 8003d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f04f 0100 	mov.w	r1, #0
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	008b      	lsls	r3, r1, #2
 8003d4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d4e:	0082      	lsls	r2, r0, #2
 8003d50:	4640      	mov	r0, r8
 8003d52:	4649      	mov	r1, r9
 8003d54:	f7fc ff48 	bl	8000be8 <__aeabi_uldivmod>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4b49      	ldr	r3, [pc, #292]	; (8003e84 <UART_SetConfig+0x38c>)
 8003d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	011e      	lsls	r6, r3, #4
 8003d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f04f 0100 	mov.w	r1, #0
 8003d6e:	4602      	mov	r2, r0
 8003d70:	460b      	mov	r3, r1
 8003d72:	1894      	adds	r4, r2, r2
 8003d74:	60bc      	str	r4, [r7, #8]
 8003d76:	415b      	adcs	r3, r3
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d7e:	1812      	adds	r2, r2, r0
 8003d80:	eb41 0303 	adc.w	r3, r1, r3
 8003d84:	f04f 0400 	mov.w	r4, #0
 8003d88:	f04f 0500 	mov.w	r5, #0
 8003d8c:	00dd      	lsls	r5, r3, #3
 8003d8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d92:	00d4      	lsls	r4, r2, #3
 8003d94:	4622      	mov	r2, r4
 8003d96:	462b      	mov	r3, r5
 8003d98:	1814      	adds	r4, r2, r0
 8003d9a:	64bc      	str	r4, [r7, #72]	; 0x48
 8003d9c:	414b      	adcs	r3, r1
 8003d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f04f 0100 	mov.w	r1, #0
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	008b      	lsls	r3, r1, #2
 8003db4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003db8:	0082      	lsls	r2, r0, #2
 8003dba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003dbe:	f7fc ff13 	bl	8000be8 <__aeabi_uldivmod>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4b2f      	ldr	r3, [pc, #188]	; (8003e84 <UART_SetConfig+0x38c>)
 8003dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	2164      	movs	r1, #100	; 0x64
 8003dd0:	fb01 f303 	mul.w	r3, r1, r3
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	3332      	adds	r3, #50	; 0x32
 8003dda:	4a2a      	ldr	r2, [pc, #168]	; (8003e84 <UART_SetConfig+0x38c>)
 8003ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8003de0:	095b      	lsrs	r3, r3, #5
 8003de2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003de6:	441e      	add	r6, r3
 8003de8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dea:	4618      	mov	r0, r3
 8003dec:	f04f 0100 	mov.w	r1, #0
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	1894      	adds	r4, r2, r2
 8003df6:	603c      	str	r4, [r7, #0]
 8003df8:	415b      	adcs	r3, r3
 8003dfa:	607b      	str	r3, [r7, #4]
 8003dfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e00:	1812      	adds	r2, r2, r0
 8003e02:	eb41 0303 	adc.w	r3, r1, r3
 8003e06:	f04f 0400 	mov.w	r4, #0
 8003e0a:	f04f 0500 	mov.w	r5, #0
 8003e0e:	00dd      	lsls	r5, r3, #3
 8003e10:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e14:	00d4      	lsls	r4, r2, #3
 8003e16:	4622      	mov	r2, r4
 8003e18:	462b      	mov	r3, r5
 8003e1a:	eb12 0a00 	adds.w	sl, r2, r0
 8003e1e:	eb43 0b01 	adc.w	fp, r3, r1
 8003e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f04f 0100 	mov.w	r1, #0
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	008b      	lsls	r3, r1, #2
 8003e36:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e3a:	0082      	lsls	r2, r0, #2
 8003e3c:	4650      	mov	r0, sl
 8003e3e:	4659      	mov	r1, fp
 8003e40:	f7fc fed2 	bl	8000be8 <__aeabi_uldivmod>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <UART_SetConfig+0x38c>)
 8003e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	2164      	movs	r1, #100	; 0x64
 8003e52:	fb01 f303 	mul.w	r3, r1, r3
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	3332      	adds	r3, #50	; 0x32
 8003e5c:	4a09      	ldr	r2, [pc, #36]	; (8003e84 <UART_SetConfig+0x38c>)
 8003e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	f003 020f 	and.w	r2, r3, #15
 8003e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4432      	add	r2, r6
 8003e6e:	609a      	str	r2, [r3, #8]
}
 8003e70:	bf00      	nop
 8003e72:	377c      	adds	r7, #124	; 0x7c
 8003e74:	46bd      	mov	sp, r7
 8003e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40011000 	.word	0x40011000
 8003e80:	40011400 	.word	0x40011400
 8003e84:	51eb851f 	.word	0x51eb851f

08003e88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e88:	b084      	sub	sp, #16
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	f107 001c 	add.w	r0, r7, #28
 8003e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d122      	bne.n	8003ee6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003eb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d105      	bne.n	8003eda <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fa7c 	bl	80043d8 <USB_CoreReset>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	73fb      	strb	r3, [r7, #15]
 8003ee4:	e01a      	b.n	8003f1c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 fa70 	bl	80043d8 <USB_CoreReset>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	639a      	str	r2, [r3, #56]	; 0x38
 8003f0e:	e005      	b.n	8003f1c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d10b      	bne.n	8003f3a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f043 0206 	orr.w	r2, r3, #6
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f043 0220 	orr.w	r2, r3, #32
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f46:	b004      	add	sp, #16
 8003f48:	4770      	bx	lr

08003f4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f023 0201 	bic.w	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	460b      	mov	r3, r1
 8003f76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d115      	bne.n	8003fba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003f9a:	2001      	movs	r0, #1
 8003f9c:	f7fd fcee 	bl	800197c <HAL_Delay>
      ms++;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fa08 	bl	80043bc <USB_GetMode>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d01e      	beq.n	8003ff0 <USB_SetCurrentMode+0x84>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b31      	cmp	r3, #49	; 0x31
 8003fb6:	d9f0      	bls.n	8003f9a <USB_SetCurrentMode+0x2e>
 8003fb8:	e01a      	b.n	8003ff0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d115      	bne.n	8003fec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fcc:	2001      	movs	r0, #1
 8003fce:	f7fd fcd5 	bl	800197c <HAL_Delay>
      ms++;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f9ef 	bl	80043bc <USB_GetMode>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <USB_SetCurrentMode+0x84>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2b31      	cmp	r3, #49	; 0x31
 8003fe8:	d9f0      	bls.n	8003fcc <USB_SetCurrentMode+0x60>
 8003fea:	e001      	b.n	8003ff0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e005      	b.n	8003ffc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2b32      	cmp	r3, #50	; 0x32
 8003ff4:	d101      	bne.n	8003ffa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004004:	b084      	sub	sp, #16
 8004006:	b580      	push	{r7, lr}
 8004008:	b086      	sub	sp, #24
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004012:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800401e:	2300      	movs	r3, #0
 8004020:	613b      	str	r3, [r7, #16]
 8004022:	e009      	b.n	8004038 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	3340      	adds	r3, #64	; 0x40
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	2200      	movs	r2, #0
 8004030:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	3301      	adds	r3, #1
 8004036:	613b      	str	r3, [r7, #16]
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	2b0e      	cmp	r3, #14
 800403c:	d9f2      	bls.n	8004024 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800403e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004040:	2b00      	cmp	r3, #0
 8004042:	d11c      	bne.n	800407e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004052:	f043 0302 	orr.w	r3, r3, #2
 8004056:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	e005      	b.n	800408a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004082:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004090:	461a      	mov	r2, r3
 8004092:	2300      	movs	r3, #0
 8004094:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409c:	4619      	mov	r1, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a4:	461a      	mov	r2, r3
 80040a6:	680b      	ldr	r3, [r1, #0]
 80040a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d10c      	bne.n	80040ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d104      	bne.n	80040c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040b6:	2100      	movs	r1, #0
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f945 	bl	8004348 <USB_SetDevSpeed>
 80040be:	e008      	b.n	80040d2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040c0:	2101      	movs	r1, #1
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f940 	bl	8004348 <USB_SetDevSpeed>
 80040c8:	e003      	b.n	80040d2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040ca:	2103      	movs	r1, #3
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f93b 	bl	8004348 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040d2:	2110      	movs	r1, #16
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f8f3 	bl	80042c0 <USB_FlushTxFifo>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f90f 	bl	8004308 <USB_FlushRxFifo>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fa:	461a      	mov	r2, r3
 80040fc:	2300      	movs	r3, #0
 80040fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004106:	461a      	mov	r2, r3
 8004108:	2300      	movs	r3, #0
 800410a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004112:	461a      	mov	r2, r3
 8004114:	2300      	movs	r3, #0
 8004116:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004118:	2300      	movs	r3, #0
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	e043      	b.n	80041a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004134:	d118      	bne.n	8004168 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10a      	bne.n	8004152 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004148:	461a      	mov	r2, r3
 800414a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	e013      	b.n	800417a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415e:	461a      	mov	r2, r3
 8004160:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e008      	b.n	800417a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004174:	461a      	mov	r2, r3
 8004176:	2300      	movs	r3, #0
 8004178:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004186:	461a      	mov	r2, r3
 8004188:	2300      	movs	r3, #0
 800418a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004198:	461a      	mov	r2, r3
 800419a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800419e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	3301      	adds	r3, #1
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d3b7      	bcc.n	800411e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041ae:	2300      	movs	r3, #0
 80041b0:	613b      	str	r3, [r7, #16]
 80041b2:	e043      	b.n	800423c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041ca:	d118      	bne.n	80041fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	015a      	lsls	r2, r3, #5
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4413      	add	r3, r2
 80041da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041de:	461a      	mov	r2, r3
 80041e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	e013      	b.n	8004210 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	015a      	lsls	r2, r3, #5
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4413      	add	r3, r2
 80041f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f4:	461a      	mov	r2, r3
 80041f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	e008      	b.n	8004210 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420a:	461a      	mov	r2, r3
 800420c:	2300      	movs	r3, #0
 800420e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4413      	add	r3, r2
 8004218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421c:	461a      	mov	r2, r3
 800421e:	2300      	movs	r3, #0
 8004220:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	015a      	lsls	r2, r3, #5
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4413      	add	r3, r2
 800422a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422e:	461a      	mov	r2, r3
 8004230:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004234:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	3301      	adds	r3, #1
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	429a      	cmp	r2, r3
 8004242:	d3b7      	bcc.n	80041b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004252:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004256:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004264:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004268:	2b00      	cmp	r3, #0
 800426a:	d105      	bne.n	8004278 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	f043 0210 	orr.w	r2, r3, #16
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	699a      	ldr	r2, [r3, #24]
 800427c:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <USB_DevInit+0x2b8>)
 800427e:	4313      	orrs	r3, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d005      	beq.n	8004296 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f043 0208 	orr.w	r2, r3, #8
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004298:	2b01      	cmp	r3, #1
 800429a:	d107      	bne.n	80042ac <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042a4:	f043 0304 	orr.w	r3, r3, #4
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042b8:	b004      	add	sp, #16
 80042ba:	4770      	bx	lr
 80042bc:	803c3800 	.word	0x803c3800

080042c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	019b      	lsls	r3, r3, #6
 80042d2:	f043 0220 	orr.w	r2, r3, #32
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3301      	adds	r3, #1
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	4a08      	ldr	r2, [pc, #32]	; (8004304 <USB_FlushTxFifo+0x44>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d901      	bls.n	80042ea <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e006      	b.n	80042f8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d0f1      	beq.n	80042da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	00030d40 	.word	0x00030d40

08004308 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2210      	movs	r2, #16
 8004318:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3301      	adds	r3, #1
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	4a08      	ldr	r2, [pc, #32]	; (8004344 <USB_FlushRxFifo+0x3c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d901      	bls.n	800432a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e006      	b.n	8004338 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f003 0310 	and.w	r3, r3, #16
 8004332:	2b10      	cmp	r3, #16
 8004334:	d0f1      	beq.n	800431a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	00030d40 	.word	0x00030d40

08004348 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	68f9      	ldr	r1, [r7, #12]
 8004364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004368:	4313      	orrs	r3, r2
 800436a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800437a:	b480      	push	{r7}
 800437c:	b085      	sub	sp, #20
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004394:	f023 0303 	bic.w	r3, r3, #3
 8004398:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043a8:	f043 0302 	orr.w	r3, r3, #2
 80043ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	f003 0301 	and.w	r3, r3, #1
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3301      	adds	r3, #1
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	4a13      	ldr	r2, [pc, #76]	; (8004438 <USB_CoreReset+0x60>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d901      	bls.n	80043f4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e01a      	b.n	800442a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	daf3      	bge.n	80043e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	f043 0201 	orr.w	r2, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3301      	adds	r3, #1
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	4a09      	ldr	r2, [pc, #36]	; (8004438 <USB_CoreReset+0x60>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d901      	bls.n	800441c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e006      	b.n	800442a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b01      	cmp	r3, #1
 8004426:	d0f1      	beq.n	800440c <USB_CoreReset+0x34>

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	00030d40 	.word	0x00030d40

0800443c <__NVIC_SetPriority>:
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	4603      	mov	r3, r0
 8004444:	6039      	str	r1, [r7, #0]
 8004446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800444c:	2b00      	cmp	r3, #0
 800444e:	db0a      	blt.n	8004466 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	b2da      	uxtb	r2, r3
 8004454:	490c      	ldr	r1, [pc, #48]	; (8004488 <__NVIC_SetPriority+0x4c>)
 8004456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445a:	0112      	lsls	r2, r2, #4
 800445c:	b2d2      	uxtb	r2, r2
 800445e:	440b      	add	r3, r1
 8004460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004464:	e00a      	b.n	800447c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	b2da      	uxtb	r2, r3
 800446a:	4908      	ldr	r1, [pc, #32]	; (800448c <__NVIC_SetPriority+0x50>)
 800446c:	79fb      	ldrb	r3, [r7, #7]
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	3b04      	subs	r3, #4
 8004474:	0112      	lsls	r2, r2, #4
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	440b      	add	r3, r1
 800447a:	761a      	strb	r2, [r3, #24]
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	e000e100 	.word	0xe000e100
 800448c:	e000ed00 	.word	0xe000ed00

08004490 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <SysTick_Handler+0x1c>)
 8004496:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004498:	f001 fd28 	bl	8005eec <xTaskGetSchedulerState>
 800449c:	4603      	mov	r3, r0
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d001      	beq.n	80044a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80044a2:	f002 fb11 	bl	8006ac8 <xPortSysTickHandler>
  }
}
 80044a6:	bf00      	nop
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	e000e010 	.word	0xe000e010

080044b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80044b0:	b580      	push	{r7, lr}
 80044b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80044b4:	2100      	movs	r1, #0
 80044b6:	f06f 0004 	mvn.w	r0, #4
 80044ba:	f7ff ffbf 	bl	800443c <__NVIC_SetPriority>
#endif
}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044ca:	f3ef 8305 	mrs	r3, IPSR
 80044ce:	603b      	str	r3, [r7, #0]
  return(result);
 80044d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80044d6:	f06f 0305 	mvn.w	r3, #5
 80044da:	607b      	str	r3, [r7, #4]
 80044dc:	e00c      	b.n	80044f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80044de:	4b0a      	ldr	r3, [pc, #40]	; (8004508 <osKernelInitialize+0x44>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d105      	bne.n	80044f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80044e6:	4b08      	ldr	r3, [pc, #32]	; (8004508 <osKernelInitialize+0x44>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	607b      	str	r3, [r7, #4]
 80044f0:	e002      	b.n	80044f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80044f2:	f04f 33ff 	mov.w	r3, #4294967295
 80044f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044f8:	687b      	ldr	r3, [r7, #4]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000204 	.word	0x20000204

0800450c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004512:	f3ef 8305 	mrs	r3, IPSR
 8004516:	603b      	str	r3, [r7, #0]
  return(result);
 8004518:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <osKernelStart+0x1a>
    stat = osErrorISR;
 800451e:	f06f 0305 	mvn.w	r3, #5
 8004522:	607b      	str	r3, [r7, #4]
 8004524:	e010      	b.n	8004548 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004526:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <osKernelStart+0x48>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d109      	bne.n	8004542 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800452e:	f7ff ffbf 	bl	80044b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004532:	4b08      	ldr	r3, [pc, #32]	; (8004554 <osKernelStart+0x48>)
 8004534:	2202      	movs	r2, #2
 8004536:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004538:	f001 f87c 	bl	8005634 <vTaskStartScheduler>
      stat = osOK;
 800453c:	2300      	movs	r3, #0
 800453e:	607b      	str	r3, [r7, #4]
 8004540:	e002      	b.n	8004548 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004542:	f04f 33ff 	mov.w	r3, #4294967295
 8004546:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004548:	687b      	ldr	r3, [r7, #4]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000204 	.word	0x20000204

08004558 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004558:	b580      	push	{r7, lr}
 800455a:	b08e      	sub	sp, #56	; 0x38
 800455c:	af04      	add	r7, sp, #16
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004564:	2300      	movs	r3, #0
 8004566:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004568:	f3ef 8305 	mrs	r3, IPSR
 800456c:	617b      	str	r3, [r7, #20]
  return(result);
 800456e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004570:	2b00      	cmp	r3, #0
 8004572:	d17e      	bne.n	8004672 <osThreadNew+0x11a>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d07b      	beq.n	8004672 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800457a:	2380      	movs	r3, #128	; 0x80
 800457c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800457e:	2318      	movs	r3, #24
 8004580:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004582:	2300      	movs	r3, #0
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004586:	f04f 33ff 	mov.w	r3, #4294967295
 800458a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d045      	beq.n	800461e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <osThreadNew+0x48>
        name = attr->name;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d008      	beq.n	80045c6 <osThreadNew+0x6e>
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	2b38      	cmp	r3, #56	; 0x38
 80045b8:	d805      	bhi.n	80045c6 <osThreadNew+0x6e>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <osThreadNew+0x72>
        return (NULL);
 80045c6:	2300      	movs	r3, #0
 80045c8:	e054      	b.n	8004674 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	089b      	lsrs	r3, r3, #2
 80045d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00e      	beq.n	8004600 <osThreadNew+0xa8>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	2bbb      	cmp	r3, #187	; 0xbb
 80045e8:	d90a      	bls.n	8004600 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d006      	beq.n	8004600 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <osThreadNew+0xa8>
        mem = 1;
 80045fa:	2301      	movs	r3, #1
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	e010      	b.n	8004622 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10c      	bne.n	8004622 <osThreadNew+0xca>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d108      	bne.n	8004622 <osThreadNew+0xca>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d104      	bne.n	8004622 <osThreadNew+0xca>
          mem = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	61bb      	str	r3, [r7, #24]
 800461c:	e001      	b.n	8004622 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800461e:	2300      	movs	r3, #0
 8004620:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d110      	bne.n	800464a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004630:	9202      	str	r2, [sp, #8]
 8004632:	9301      	str	r3, [sp, #4]
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	6a3a      	ldr	r2, [r7, #32]
 800463c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 fe0c 	bl	800525c <xTaskCreateStatic>
 8004644:	4603      	mov	r3, r0
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	e013      	b.n	8004672 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d110      	bne.n	8004672 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	b29a      	uxth	r2, r3
 8004654:	f107 0310 	add.w	r3, r7, #16
 8004658:	9301      	str	r3, [sp, #4]
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 fe57 	bl	8005316 <xTaskCreate>
 8004668:	4603      	mov	r3, r0
 800466a:	2b01      	cmp	r3, #1
 800466c:	d001      	beq.n	8004672 <osThreadNew+0x11a>
            hTask = NULL;
 800466e:	2300      	movs	r3, #0
 8004670:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004672:	693b      	ldr	r3, [r7, #16]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3728      	adds	r7, #40	; 0x28
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004684:	f3ef 8305 	mrs	r3, IPSR
 8004688:	60bb      	str	r3, [r7, #8]
  return(result);
 800468a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <osDelay+0x1c>
    stat = osErrorISR;
 8004690:	f06f 0305 	mvn.w	r3, #5
 8004694:	60fb      	str	r3, [r7, #12]
 8004696:	e007      	b.n	80046a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 ff92 	bl	80055cc <vTaskDelay>
    }
  }

  return (stat);
 80046a8:	68fb      	ldr	r3, [r7, #12]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
	...

080046b4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4a07      	ldr	r2, [pc, #28]	; (80046e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80046c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	4a06      	ldr	r2, [pc, #24]	; (80046e4 <vApplicationGetIdleTaskMemory+0x30>)
 80046ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2280      	movs	r2, #128	; 0x80
 80046d0:	601a      	str	r2, [r3, #0]
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	20000208 	.word	0x20000208
 80046e4:	200002c4 	.word	0x200002c4

080046e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4a07      	ldr	r2, [pc, #28]	; (8004714 <vApplicationGetTimerTaskMemory+0x2c>)
 80046f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4a06      	ldr	r2, [pc, #24]	; (8004718 <vApplicationGetTimerTaskMemory+0x30>)
 80046fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004706:	601a      	str	r2, [r3, #0]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	200004c4 	.word	0x200004c4
 8004718:	20000580 	.word	0x20000580

0800471c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f103 0208 	add.w	r2, r3, #8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f04f 32ff 	mov.w	r2, #4294967295
 8004734:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f103 0208 	add.w	r2, r3, #8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f103 0208 	add.w	r2, r3, #8
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004776:	b480      	push	{r7}
 8004778:	b085      	sub	sp, #20
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
 800477e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	601a      	str	r2, [r3, #0]
}
 80047b2:	bf00      	nop
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047be:	b480      	push	{r7}
 80047c0:	b085      	sub	sp, #20
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
 80047c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d4:	d103      	bne.n	80047de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	e00c      	b.n	80047f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3308      	adds	r3, #8
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	e002      	b.n	80047ec <vListInsert+0x2e>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d2f6      	bcs.n	80047e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	683a      	ldr	r2, [r7, #0]
 8004812:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	601a      	str	r2, [r3, #0]
}
 8004824:	bf00      	nop
 8004826:	3714      	adds	r7, #20
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6892      	ldr	r2, [r2, #8]
 8004846:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6852      	ldr	r2, [r2, #4]
 8004850:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	429a      	cmp	r2, r3
 800485a:	d103      	bne.n	8004864 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	689a      	ldr	r2, [r3, #8]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	1e5a      	subs	r2, r3, #1
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048aa:	bf00      	nop
 80048ac:	e7fe      	b.n	80048ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80048ae:	f002 f879 	bl	80069a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ba:	68f9      	ldr	r1, [r7, #12]
 80048bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048be:	fb01 f303 	mul.w	r3, r1, r3
 80048c2:	441a      	add	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048de:	3b01      	subs	r3, #1
 80048e0:	68f9      	ldr	r1, [r7, #12]
 80048e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048e4:	fb01 f303 	mul.w	r3, r1, r3
 80048e8:	441a      	add	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	22ff      	movs	r2, #255	; 0xff
 80048f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	22ff      	movs	r2, #255	; 0xff
 80048fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d114      	bne.n	800492e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01a      	beq.n	8004942 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3310      	adds	r3, #16
 8004910:	4618      	mov	r0, r3
 8004912:	f001 f929 	bl	8005b68 <xTaskRemoveFromEventList>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d012      	beq.n	8004942 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800491c:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <xQueueGenericReset+0xcc>)
 800491e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	e009      	b.n	8004942 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	3310      	adds	r3, #16
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff fef2 	bl	800471c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	3324      	adds	r3, #36	; 0x24
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff feed 	bl	800471c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004942:	f002 f85f 	bl	8006a04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004946:	2301      	movs	r3, #1
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	e000ed04 	.word	0xe000ed04

08004954 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004954:	b580      	push	{r7, lr}
 8004956:	b08e      	sub	sp, #56	; 0x38
 8004958:	af02      	add	r7, sp, #8
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10a      	bne.n	800497e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10a      	bne.n	800499a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004996:	bf00      	nop
 8004998:	e7fe      	b.n	8004998 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <xQueueGenericCreateStatic+0x52>
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <xQueueGenericCreateStatic+0x56>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <xQueueGenericCreateStatic+0x58>
 80049aa:	2300      	movs	r3, #0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	623b      	str	r3, [r7, #32]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d102      	bne.n	80049d2 <xQueueGenericCreateStatic+0x7e>
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <xQueueGenericCreateStatic+0x82>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <xQueueGenericCreateStatic+0x84>
 80049d6:	2300      	movs	r3, #0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10a      	bne.n	80049f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	61fb      	str	r3, [r7, #28]
}
 80049ee:	bf00      	nop
 80049f0:	e7fe      	b.n	80049f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049f2:	2350      	movs	r3, #80	; 0x50
 80049f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2b50      	cmp	r3, #80	; 0x50
 80049fa:	d00a      	beq.n	8004a12 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	61bb      	str	r3, [r7, #24]
}
 8004a0e:	bf00      	nop
 8004a10:	e7fe      	b.n	8004a10 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a12:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00d      	beq.n	8004a3a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 f805 	bl	8004a44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3730      	adds	r7, #48	; 0x30
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d103      	bne.n	8004a60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	e002      	b.n	8004a66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a72:	2101      	movs	r1, #1
 8004a74:	69b8      	ldr	r0, [r7, #24]
 8004a76:	f7ff ff05 	bl	8004884 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	78fa      	ldrb	r2, [r7, #3]
 8004a7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a82:	bf00      	nop
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08e      	sub	sp, #56	; 0x38
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <xQueueGenericSend+0x32>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d103      	bne.n	8004acc <xQueueGenericSend+0x40>
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <xQueueGenericSend+0x44>
 8004acc:	2301      	movs	r3, #1
 8004ace:	e000      	b.n	8004ad2 <xQueueGenericSend+0x46>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10a      	bne.n	8004aec <xQueueGenericSend+0x60>
	__asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ae8:	bf00      	nop
 8004aea:	e7fe      	b.n	8004aea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d103      	bne.n	8004afa <xQueueGenericSend+0x6e>
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <xQueueGenericSend+0x72>
 8004afa:	2301      	movs	r3, #1
 8004afc:	e000      	b.n	8004b00 <xQueueGenericSend+0x74>
 8004afe:	2300      	movs	r3, #0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10a      	bne.n	8004b1a <xQueueGenericSend+0x8e>
	__asm volatile
 8004b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	623b      	str	r3, [r7, #32]
}
 8004b16:	bf00      	nop
 8004b18:	e7fe      	b.n	8004b18 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b1a:	f001 f9e7 	bl	8005eec <xTaskGetSchedulerState>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d102      	bne.n	8004b2a <xQueueGenericSend+0x9e>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <xQueueGenericSend+0xa2>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e000      	b.n	8004b30 <xQueueGenericSend+0xa4>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10a      	bne.n	8004b4a <xQueueGenericSend+0xbe>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	61fb      	str	r3, [r7, #28]
}
 8004b46:	bf00      	nop
 8004b48:	e7fe      	b.n	8004b48 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b4a:	f001 ff2b 	bl	80069a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d302      	bcc.n	8004b60 <xQueueGenericSend+0xd4>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d129      	bne.n	8004bb4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b66:	f000 fa0b 	bl	8004f80 <prvCopyDataToQueue>
 8004b6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d010      	beq.n	8004b96 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b76:	3324      	adds	r3, #36	; 0x24
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fff5 	bl	8005b68 <xTaskRemoveFromEventList>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d013      	beq.n	8004bac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b84:	4b3f      	ldr	r3, [pc, #252]	; (8004c84 <xQueueGenericSend+0x1f8>)
 8004b86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	e00a      	b.n	8004bac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d007      	beq.n	8004bac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b9c:	4b39      	ldr	r3, [pc, #228]	; (8004c84 <xQueueGenericSend+0x1f8>)
 8004b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bac:	f001 ff2a 	bl	8006a04 <vPortExitCritical>
				return pdPASS;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e063      	b.n	8004c7c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d103      	bne.n	8004bc2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bba:	f001 ff23 	bl	8006a04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e05c      	b.n	8004c7c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d106      	bne.n	8004bd6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bc8:	f107 0314 	add.w	r3, r7, #20
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f001 f82f 	bl	8005c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bd6:	f001 ff15 	bl	8006a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bda:	f000 fd9b 	bl	8005714 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bde:	f001 fee1 	bl	80069a4 <vPortEnterCritical>
 8004be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004be8:	b25b      	sxtb	r3, r3
 8004bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bee:	d103      	bne.n	8004bf8 <xQueueGenericSend+0x16c>
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bfe:	b25b      	sxtb	r3, r3
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c04:	d103      	bne.n	8004c0e <xQueueGenericSend+0x182>
 8004c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c0e:	f001 fef9 	bl	8006a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c12:	1d3a      	adds	r2, r7, #4
 8004c14:	f107 0314 	add.w	r3, r7, #20
 8004c18:	4611      	mov	r1, r2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f001 f81e 	bl	8005c5c <xTaskCheckForTimeOut>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d124      	bne.n	8004c70 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c28:	f000 faa2 	bl	8005170 <prvIsQueueFull>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d018      	beq.n	8004c64 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	3310      	adds	r3, #16
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	4611      	mov	r1, r2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 ff44 	bl	8005ac8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c42:	f000 fa2d 	bl	80050a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c46:	f000 fd73 	bl	8005730 <xTaskResumeAll>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f47f af7c 	bne.w	8004b4a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004c52:	4b0c      	ldr	r3, [pc, #48]	; (8004c84 <xQueueGenericSend+0x1f8>)
 8004c54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	e772      	b.n	8004b4a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c66:	f000 fa1b 	bl	80050a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c6a:	f000 fd61 	bl	8005730 <xTaskResumeAll>
 8004c6e:	e76c      	b.n	8004b4a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c72:	f000 fa15 	bl	80050a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c76:	f000 fd5b 	bl	8005730 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3738      	adds	r7, #56	; 0x38
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	e000ed04 	.word	0xe000ed04

08004c88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b090      	sub	sp, #64	; 0x40
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10a      	bne.n	8004cb6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cb2:	bf00      	nop
 8004cb4:	e7fe      	b.n	8004cb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d103      	bne.n	8004cc4 <xQueueGenericSendFromISR+0x3c>
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <xQueueGenericSendFromISR+0x40>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e000      	b.n	8004cca <xQueueGenericSendFromISR+0x42>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ce0:	bf00      	nop
 8004ce2:	e7fe      	b.n	8004ce2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d103      	bne.n	8004cf2 <xQueueGenericSendFromISR+0x6a>
 8004cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d101      	bne.n	8004cf6 <xQueueGenericSendFromISR+0x6e>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <xQueueGenericSendFromISR+0x70>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10a      	bne.n	8004d12 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d00:	f383 8811 	msr	BASEPRI, r3
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	f3bf 8f4f 	dsb	sy
 8004d0c:	623b      	str	r3, [r7, #32]
}
 8004d0e:	bf00      	nop
 8004d10:	e7fe      	b.n	8004d10 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d12:	f001 ff29 	bl	8006b68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d16:	f3ef 8211 	mrs	r2, BASEPRI
 8004d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	61fa      	str	r2, [r7, #28]
 8004d2c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d2e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d30:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d302      	bcc.n	8004d44 <xQueueGenericSendFromISR+0xbc>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d12f      	bne.n	8004da4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d5a:	f000 f911 	bl	8004f80 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d66:	d112      	bne.n	8004d8e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d016      	beq.n	8004d9e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d72:	3324      	adds	r3, #36	; 0x24
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fef7 	bl	8005b68 <xTaskRemoveFromEventList>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00e      	beq.n	8004d9e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00b      	beq.n	8004d9e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	e007      	b.n	8004d9e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d92:	3301      	adds	r3, #1
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	b25a      	sxtb	r2, r3
 8004d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004da2:	e001      	b.n	8004da8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004daa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004db2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3740      	adds	r7, #64	; 0x40
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08c      	sub	sp, #48	; 0x30
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10a      	bne.n	8004df0 <xQueueReceive+0x30>
	__asm volatile
 8004dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	623b      	str	r3, [r7, #32]
}
 8004dec:	bf00      	nop
 8004dee:	e7fe      	b.n	8004dee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d103      	bne.n	8004dfe <xQueueReceive+0x3e>
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <xQueueReceive+0x42>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <xQueueReceive+0x44>
 8004e02:	2300      	movs	r3, #0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <xQueueReceive+0x5e>
	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	61fb      	str	r3, [r7, #28]
}
 8004e1a:	bf00      	nop
 8004e1c:	e7fe      	b.n	8004e1c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e1e:	f001 f865 	bl	8005eec <xTaskGetSchedulerState>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d102      	bne.n	8004e2e <xQueueReceive+0x6e>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <xQueueReceive+0x72>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <xQueueReceive+0x74>
 8004e32:	2300      	movs	r3, #0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10a      	bne.n	8004e4e <xQueueReceive+0x8e>
	__asm volatile
 8004e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3c:	f383 8811 	msr	BASEPRI, r3
 8004e40:	f3bf 8f6f 	isb	sy
 8004e44:	f3bf 8f4f 	dsb	sy
 8004e48:	61bb      	str	r3, [r7, #24]
}
 8004e4a:	bf00      	nop
 8004e4c:	e7fe      	b.n	8004e4c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e4e:	f001 fda9 	bl	80069a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d01f      	beq.n	8004e9e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e62:	f000 f8f7 	bl	8005054 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	1e5a      	subs	r2, r3, #1
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00f      	beq.n	8004e96 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	3310      	adds	r3, #16
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 fe74 	bl	8005b68 <xTaskRemoveFromEventList>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d007      	beq.n	8004e96 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e86:	4b3d      	ldr	r3, [pc, #244]	; (8004f7c <xQueueReceive+0x1bc>)
 8004e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e96:	f001 fdb5 	bl	8006a04 <vPortExitCritical>
				return pdPASS;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e069      	b.n	8004f72 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d103      	bne.n	8004eac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ea4:	f001 fdae 	bl	8006a04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	e062      	b.n	8004f72 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d106      	bne.n	8004ec0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004eb2:	f107 0310 	add.w	r3, r7, #16
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 feba 	bl	8005c30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ec0:	f001 fda0 	bl	8006a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ec4:	f000 fc26 	bl	8005714 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ec8:	f001 fd6c 	bl	80069a4 <vPortEnterCritical>
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ed2:	b25b      	sxtb	r3, r3
 8004ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed8:	d103      	bne.n	8004ee2 <xQueueReceive+0x122>
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ee8:	b25b      	sxtb	r3, r3
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	d103      	bne.n	8004ef8 <xQueueReceive+0x138>
 8004ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ef8:	f001 fd84 	bl	8006a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004efc:	1d3a      	adds	r2, r7, #4
 8004efe:	f107 0310 	add.w	r3, r7, #16
 8004f02:	4611      	mov	r1, r2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f000 fea9 	bl	8005c5c <xTaskCheckForTimeOut>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d123      	bne.n	8004f58 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f12:	f000 f917 	bl	8005144 <prvIsQueueEmpty>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d017      	beq.n	8004f4c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	3324      	adds	r3, #36	; 0x24
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	4611      	mov	r1, r2
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fdcf 	bl	8005ac8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f2c:	f000 f8b8 	bl	80050a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f30:	f000 fbfe 	bl	8005730 <xTaskResumeAll>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d189      	bne.n	8004e4e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004f3a:	4b10      	ldr	r3, [pc, #64]	; (8004f7c <xQueueReceive+0x1bc>)
 8004f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	f3bf 8f6f 	isb	sy
 8004f4a:	e780      	b.n	8004e4e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f4e:	f000 f8a7 	bl	80050a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f52:	f000 fbed 	bl	8005730 <xTaskResumeAll>
 8004f56:	e77a      	b.n	8004e4e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f5a:	f000 f8a1 	bl	80050a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f5e:	f000 fbe7 	bl	8005730 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f64:	f000 f8ee 	bl	8005144 <prvIsQueueEmpty>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f43f af6f 	beq.w	8004e4e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3730      	adds	r7, #48	; 0x30
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	e000ed04 	.word	0xe000ed04

08004f80 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b086      	sub	sp, #24
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10d      	bne.n	8004fba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d14d      	bne.n	8005042 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f000 ffbc 	bl	8005f28 <xTaskPriorityDisinherit>
 8004fb0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	609a      	str	r2, [r3, #8]
 8004fb8:	e043      	b.n	8005042 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d119      	bne.n	8004ff4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6858      	ldr	r0, [r3, #4]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	461a      	mov	r2, r3
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	f002 f922 	bl	8007214 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	441a      	add	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d32b      	bcc.n	8005042 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	605a      	str	r2, [r3, #4]
 8004ff2:	e026      	b.n	8005042 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	68d8      	ldr	r0, [r3, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	68b9      	ldr	r1, [r7, #8]
 8005000:	f002 f908 	bl	8007214 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	425b      	negs	r3, r3
 800500e:	441a      	add	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	429a      	cmp	r2, r3
 800501e:	d207      	bcs.n	8005030 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	425b      	negs	r3, r3
 800502a:	441a      	add	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b02      	cmp	r3, #2
 8005034:	d105      	bne.n	8005042 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	3b01      	subs	r3, #1
 8005040:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800504a:	697b      	ldr	r3, [r7, #20]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d018      	beq.n	8005098 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	441a      	add	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68da      	ldr	r2, [r3, #12]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	429a      	cmp	r2, r3
 800507e:	d303      	bcc.n	8005088 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68d9      	ldr	r1, [r3, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	461a      	mov	r2, r3
 8005092:	6838      	ldr	r0, [r7, #0]
 8005094:	f002 f8be 	bl	8007214 <memcpy>
	}
}
 8005098:	bf00      	nop
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050a8:	f001 fc7c 	bl	80069a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050b4:	e011      	b.n	80050da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d012      	beq.n	80050e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3324      	adds	r3, #36	; 0x24
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fd50 	bl	8005b68 <xTaskRemoveFromEventList>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050ce:	f000 fe27 	bl	8005d20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	dce9      	bgt.n	80050b6 <prvUnlockQueue+0x16>
 80050e2:	e000      	b.n	80050e6 <prvUnlockQueue+0x46>
					break;
 80050e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	22ff      	movs	r2, #255	; 0xff
 80050ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80050ee:	f001 fc89 	bl	8006a04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050f2:	f001 fc57 	bl	80069a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050fe:	e011      	b.n	8005124 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d012      	beq.n	800512e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3310      	adds	r3, #16
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fd2b 	bl	8005b68 <xTaskRemoveFromEventList>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005118:	f000 fe02 	bl	8005d20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800511c:	7bbb      	ldrb	r3, [r7, #14]
 800511e:	3b01      	subs	r3, #1
 8005120:	b2db      	uxtb	r3, r3
 8005122:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005124:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005128:	2b00      	cmp	r3, #0
 800512a:	dce9      	bgt.n	8005100 <prvUnlockQueue+0x60>
 800512c:	e000      	b.n	8005130 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800512e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	22ff      	movs	r2, #255	; 0xff
 8005134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005138:	f001 fc64 	bl	8006a04 <vPortExitCritical>
}
 800513c:	bf00      	nop
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800514c:	f001 fc2a 	bl	80069a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005154:	2b00      	cmp	r3, #0
 8005156:	d102      	bne.n	800515e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005158:	2301      	movs	r3, #1
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	e001      	b.n	8005162 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005162:	f001 fc4f 	bl	8006a04 <vPortExitCritical>

	return xReturn;
 8005166:	68fb      	ldr	r3, [r7, #12]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005178:	f001 fc14 	bl	80069a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005184:	429a      	cmp	r2, r3
 8005186:	d102      	bne.n	800518e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005188:	2301      	movs	r3, #1
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	e001      	b.n	8005192 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005192:	f001 fc37 	bl	8006a04 <vPortExitCritical>

	return xReturn;
 8005196:	68fb      	ldr	r3, [r7, #12]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051aa:	2300      	movs	r3, #0
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	e014      	b.n	80051da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051b0:	4a0f      	ldr	r2, [pc, #60]	; (80051f0 <vQueueAddToRegistry+0x50>)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10b      	bne.n	80051d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80051bc:	490c      	ldr	r1, [pc, #48]	; (80051f0 <vQueueAddToRegistry+0x50>)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80051c6:	4a0a      	ldr	r2, [pc, #40]	; (80051f0 <vQueueAddToRegistry+0x50>)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	4413      	add	r3, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80051d2:	e006      	b.n	80051e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	3301      	adds	r3, #1
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2b07      	cmp	r3, #7
 80051de:	d9e7      	bls.n	80051b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80051e0:	bf00      	nop
 80051e2:	bf00      	nop
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	20006b1c 	.word	0x20006b1c

080051f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005204:	f001 fbce 	bl	80069a4 <vPortEnterCritical>
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800520e:	b25b      	sxtb	r3, r3
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005214:	d103      	bne.n	800521e <vQueueWaitForMessageRestricted+0x2a>
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005224:	b25b      	sxtb	r3, r3
 8005226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522a:	d103      	bne.n	8005234 <vQueueWaitForMessageRestricted+0x40>
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005234:	f001 fbe6 	bl	8006a04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	2b00      	cmp	r3, #0
 800523e:	d106      	bne.n	800524e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	3324      	adds	r3, #36	; 0x24
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	68b9      	ldr	r1, [r7, #8]
 8005248:	4618      	mov	r0, r3
 800524a:	f000 fc61 	bl	8005b10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800524e:	6978      	ldr	r0, [r7, #20]
 8005250:	f7ff ff26 	bl	80050a0 <prvUnlockQueue>
	}
 8005254:	bf00      	nop
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800525c:	b580      	push	{r7, lr}
 800525e:	b08e      	sub	sp, #56	; 0x38
 8005260:	af04      	add	r7, sp, #16
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800526a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	623b      	str	r3, [r7, #32]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10a      	bne.n	80052a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800528c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005290:	f383 8811 	msr	BASEPRI, r3
 8005294:	f3bf 8f6f 	isb	sy
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	61fb      	str	r3, [r7, #28]
}
 800529e:	bf00      	nop
 80052a0:	e7fe      	b.n	80052a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052a2:	23bc      	movs	r3, #188	; 0xbc
 80052a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2bbc      	cmp	r3, #188	; 0xbc
 80052aa:	d00a      	beq.n	80052c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80052ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	61bb      	str	r3, [r7, #24]
}
 80052be:	bf00      	nop
 80052c0:	e7fe      	b.n	80052c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80052c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d01e      	beq.n	8005308 <xTaskCreateStatic+0xac>
 80052ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d01b      	beq.n	8005308 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052dc:	2202      	movs	r2, #2
 80052de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052e2:	2300      	movs	r3, #0
 80052e4:	9303      	str	r3, [sp, #12]
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	9302      	str	r3, [sp, #8]
 80052ea:	f107 0314 	add.w	r3, r7, #20
 80052ee:	9301      	str	r3, [sp, #4]
 80052f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f000 f850 	bl	80053a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005300:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005302:	f000 f8f3 	bl	80054ec <prvAddNewTaskToReadyList>
 8005306:	e001      	b.n	800530c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005308:	2300      	movs	r3, #0
 800530a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800530c:	697b      	ldr	r3, [r7, #20]
	}
 800530e:	4618      	mov	r0, r3
 8005310:	3728      	adds	r7, #40	; 0x28
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005316:	b580      	push	{r7, lr}
 8005318:	b08c      	sub	sp, #48	; 0x30
 800531a:	af04      	add	r7, sp, #16
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	603b      	str	r3, [r7, #0]
 8005322:	4613      	mov	r3, r2
 8005324:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4618      	mov	r0, r3
 800532c:	f001 fc5c 	bl	8006be8 <pvPortMalloc>
 8005330:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00e      	beq.n	8005356 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005338:	20bc      	movs	r0, #188	; 0xbc
 800533a:	f001 fc55 	bl	8006be8 <pvPortMalloc>
 800533e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	631a      	str	r2, [r3, #48]	; 0x30
 800534c:	e005      	b.n	800535a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800534e:	6978      	ldr	r0, [r7, #20]
 8005350:	f001 fd16 	bl	8006d80 <vPortFree>
 8005354:	e001      	b.n	800535a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005356:	2300      	movs	r3, #0
 8005358:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d017      	beq.n	8005390 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005368:	88fa      	ldrh	r2, [r7, #6]
 800536a:	2300      	movs	r3, #0
 800536c:	9303      	str	r3, [sp, #12]
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	9302      	str	r3, [sp, #8]
 8005372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 f80e 	bl	80053a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005384:	69f8      	ldr	r0, [r7, #28]
 8005386:	f000 f8b1 	bl	80054ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800538a:	2301      	movs	r3, #1
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	e002      	b.n	8005396 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005390:	f04f 33ff 	mov.w	r3, #4294967295
 8005394:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005396:	69bb      	ldr	r3, [r7, #24]
	}
 8005398:	4618      	mov	r0, r3
 800539a:	3720      	adds	r7, #32
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b088      	sub	sp, #32
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	461a      	mov	r2, r3
 80053b8:	21a5      	movs	r1, #165	; 0xa5
 80053ba:	f001 ff39 	bl	8007230 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053c8:	3b01      	subs	r3, #1
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4413      	add	r3, r2
 80053ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	f023 0307 	bic.w	r3, r3, #7
 80053d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	f003 0307 	and.w	r3, r3, #7
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	617b      	str	r3, [r7, #20]
}
 80053f4:	bf00      	nop
 80053f6:	e7fe      	b.n	80053f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d01f      	beq.n	800543e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053fe:	2300      	movs	r3, #0
 8005400:	61fb      	str	r3, [r7, #28]
 8005402:	e012      	b.n	800542a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	4413      	add	r3, r2
 800540a:	7819      	ldrb	r1, [r3, #0]
 800540c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	4413      	add	r3, r2
 8005412:	3334      	adds	r3, #52	; 0x34
 8005414:	460a      	mov	r2, r1
 8005416:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	4413      	add	r3, r2
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d006      	beq.n	8005432 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	3301      	adds	r3, #1
 8005428:	61fb      	str	r3, [r7, #28]
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	2b0f      	cmp	r3, #15
 800542e:	d9e9      	bls.n	8005404 <prvInitialiseNewTask+0x64>
 8005430:	e000      	b.n	8005434 <prvInitialiseNewTask+0x94>
			{
				break;
 8005432:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005436:	2200      	movs	r2, #0
 8005438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800543c:	e003      	b.n	8005446 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800543e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	2b37      	cmp	r3, #55	; 0x37
 800544a:	d901      	bls.n	8005450 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800544c:	2337      	movs	r3, #55	; 0x37
 800544e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005454:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800545a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545e:	2200      	movs	r2, #0
 8005460:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005464:	3304      	adds	r3, #4
 8005466:	4618      	mov	r0, r3
 8005468:	f7ff f978 	bl	800475c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800546c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546e:	3318      	adds	r3, #24
 8005470:	4618      	mov	r0, r3
 8005472:	f7ff f973 	bl	800475c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800547a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800548a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800548c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548e:	2200      	movs	r2, #0
 8005490:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005496:	2200      	movs	r2, #0
 8005498:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549e:	3354      	adds	r3, #84	; 0x54
 80054a0:	2260      	movs	r2, #96	; 0x60
 80054a2:	2100      	movs	r1, #0
 80054a4:	4618      	mov	r0, r3
 80054a6:	f001 fec3 	bl	8007230 <memset>
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	4a0c      	ldr	r2, [pc, #48]	; (80054e0 <prvInitialiseNewTask+0x140>)
 80054ae:	659a      	str	r2, [r3, #88]	; 0x58
 80054b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b2:	4a0c      	ldr	r2, [pc, #48]	; (80054e4 <prvInitialiseNewTask+0x144>)
 80054b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80054b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b8:	4a0b      	ldr	r2, [pc, #44]	; (80054e8 <prvInitialiseNewTask+0x148>)
 80054ba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	68f9      	ldr	r1, [r7, #12]
 80054c0:	69b8      	ldr	r0, [r7, #24]
 80054c2:	f001 f941 	bl	8006748 <pxPortInitialiseStack>
 80054c6:	4602      	mov	r2, r0
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80054cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054d8:	bf00      	nop
 80054da:	3720      	adds	r7, #32
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	08009ff8 	.word	0x08009ff8
 80054e4:	0800a018 	.word	0x0800a018
 80054e8:	08009fd8 	.word	0x08009fd8

080054ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054f4:	f001 fa56 	bl	80069a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054f8:	4b2d      	ldr	r3, [pc, #180]	; (80055b0 <prvAddNewTaskToReadyList+0xc4>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3301      	adds	r3, #1
 80054fe:	4a2c      	ldr	r2, [pc, #176]	; (80055b0 <prvAddNewTaskToReadyList+0xc4>)
 8005500:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005502:	4b2c      	ldr	r3, [pc, #176]	; (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d109      	bne.n	800551e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800550a:	4a2a      	ldr	r2, [pc, #168]	; (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005510:	4b27      	ldr	r3, [pc, #156]	; (80055b0 <prvAddNewTaskToReadyList+0xc4>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d110      	bne.n	800553a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005518:	f000 fc26 	bl	8005d68 <prvInitialiseTaskLists>
 800551c:	e00d      	b.n	800553a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800551e:	4b26      	ldr	r3, [pc, #152]	; (80055b8 <prvAddNewTaskToReadyList+0xcc>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005526:	4b23      	ldr	r3, [pc, #140]	; (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	429a      	cmp	r2, r3
 8005532:	d802      	bhi.n	800553a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005534:	4a1f      	ldr	r2, [pc, #124]	; (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800553a:	4b20      	ldr	r3, [pc, #128]	; (80055bc <prvAddNewTaskToReadyList+0xd0>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3301      	adds	r3, #1
 8005540:	4a1e      	ldr	r2, [pc, #120]	; (80055bc <prvAddNewTaskToReadyList+0xd0>)
 8005542:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005544:	4b1d      	ldr	r3, [pc, #116]	; (80055bc <prvAddNewTaskToReadyList+0xd0>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005550:	4b1b      	ldr	r3, [pc, #108]	; (80055c0 <prvAddNewTaskToReadyList+0xd4>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d903      	bls.n	8005560 <prvAddNewTaskToReadyList+0x74>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800555c:	4a18      	ldr	r2, [pc, #96]	; (80055c0 <prvAddNewTaskToReadyList+0xd4>)
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005564:	4613      	mov	r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4a15      	ldr	r2, [pc, #84]	; (80055c4 <prvAddNewTaskToReadyList+0xd8>)
 800556e:	441a      	add	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	3304      	adds	r3, #4
 8005574:	4619      	mov	r1, r3
 8005576:	4610      	mov	r0, r2
 8005578:	f7ff f8fd 	bl	8004776 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800557c:	f001 fa42 	bl	8006a04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005580:	4b0d      	ldr	r3, [pc, #52]	; (80055b8 <prvAddNewTaskToReadyList+0xcc>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00e      	beq.n	80055a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005588:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <prvAddNewTaskToReadyList+0xc8>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005592:	429a      	cmp	r2, r3
 8005594:	d207      	bcs.n	80055a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005596:	4b0c      	ldr	r3, [pc, #48]	; (80055c8 <prvAddNewTaskToReadyList+0xdc>)
 8005598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055a6:	bf00      	nop
 80055a8:	3708      	adds	r7, #8
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000e54 	.word	0x20000e54
 80055b4:	20000980 	.word	0x20000980
 80055b8:	20000e60 	.word	0x20000e60
 80055bc:	20000e70 	.word	0x20000e70
 80055c0:	20000e5c 	.word	0x20000e5c
 80055c4:	20000984 	.word	0x20000984
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d017      	beq.n	800560e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055de:	4b13      	ldr	r3, [pc, #76]	; (800562c <vTaskDelay+0x60>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <vTaskDelay+0x30>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	60bb      	str	r3, [r7, #8]
}
 80055f8:	bf00      	nop
 80055fa:	e7fe      	b.n	80055fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80055fc:	f000 f88a 	bl	8005714 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005600:	2100      	movs	r1, #0
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fcfe 	bl	8006004 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005608:	f000 f892 	bl	8005730 <xTaskResumeAll>
 800560c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d107      	bne.n	8005624 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005614:	4b06      	ldr	r3, [pc, #24]	; (8005630 <vTaskDelay+0x64>)
 8005616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005624:	bf00      	nop
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	20000e7c 	.word	0x20000e7c
 8005630:	e000ed04 	.word	0xe000ed04

08005634 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08a      	sub	sp, #40	; 0x28
 8005638:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800563a:	2300      	movs	r3, #0
 800563c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800563e:	2300      	movs	r3, #0
 8005640:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005642:	463a      	mov	r2, r7
 8005644:	1d39      	adds	r1, r7, #4
 8005646:	f107 0308 	add.w	r3, r7, #8
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff f832 	bl	80046b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005650:	6839      	ldr	r1, [r7, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	9202      	str	r2, [sp, #8]
 8005658:	9301      	str	r3, [sp, #4]
 800565a:	2300      	movs	r3, #0
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	2300      	movs	r3, #0
 8005660:	460a      	mov	r2, r1
 8005662:	4924      	ldr	r1, [pc, #144]	; (80056f4 <vTaskStartScheduler+0xc0>)
 8005664:	4824      	ldr	r0, [pc, #144]	; (80056f8 <vTaskStartScheduler+0xc4>)
 8005666:	f7ff fdf9 	bl	800525c <xTaskCreateStatic>
 800566a:	4603      	mov	r3, r0
 800566c:	4a23      	ldr	r2, [pc, #140]	; (80056fc <vTaskStartScheduler+0xc8>)
 800566e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005670:	4b22      	ldr	r3, [pc, #136]	; (80056fc <vTaskStartScheduler+0xc8>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005678:	2301      	movs	r3, #1
 800567a:	617b      	str	r3, [r7, #20]
 800567c:	e001      	b.n	8005682 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800567e:	2300      	movs	r3, #0
 8005680:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d102      	bne.n	800568e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005688:	f000 fd10 	bl	80060ac <xTimerCreateTimerTask>
 800568c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d11b      	bne.n	80056cc <vTaskStartScheduler+0x98>
	__asm volatile
 8005694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	613b      	str	r3, [r7, #16]
}
 80056a6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056a8:	4b15      	ldr	r3, [pc, #84]	; (8005700 <vTaskStartScheduler+0xcc>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3354      	adds	r3, #84	; 0x54
 80056ae:	4a15      	ldr	r2, [pc, #84]	; (8005704 <vTaskStartScheduler+0xd0>)
 80056b0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056b2:	4b15      	ldr	r3, [pc, #84]	; (8005708 <vTaskStartScheduler+0xd4>)
 80056b4:	f04f 32ff 	mov.w	r2, #4294967295
 80056b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056ba:	4b14      	ldr	r3, [pc, #80]	; (800570c <vTaskStartScheduler+0xd8>)
 80056bc:	2201      	movs	r2, #1
 80056be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056c0:	4b13      	ldr	r3, [pc, #76]	; (8005710 <vTaskStartScheduler+0xdc>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056c6:	f001 f8cb 	bl	8006860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056ca:	e00e      	b.n	80056ea <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	d10a      	bne.n	80056ea <vTaskStartScheduler+0xb6>
	__asm volatile
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	60fb      	str	r3, [r7, #12]
}
 80056e6:	bf00      	nop
 80056e8:	e7fe      	b.n	80056e8 <vTaskStartScheduler+0xb4>
}
 80056ea:	bf00      	nop
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	08009f3c 	.word	0x08009f3c
 80056f8:	08005d39 	.word	0x08005d39
 80056fc:	20000e78 	.word	0x20000e78
 8005700:	20000980 	.word	0x20000980
 8005704:	20000010 	.word	0x20000010
 8005708:	20000e74 	.word	0x20000e74
 800570c:	20000e60 	.word	0x20000e60
 8005710:	20000e58 	.word	0x20000e58

08005714 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005718:	4b04      	ldr	r3, [pc, #16]	; (800572c <vTaskSuspendAll+0x18>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3301      	adds	r3, #1
 800571e:	4a03      	ldr	r2, [pc, #12]	; (800572c <vTaskSuspendAll+0x18>)
 8005720:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005722:	bf00      	nop
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	20000e7c 	.word	0x20000e7c

08005730 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005736:	2300      	movs	r3, #0
 8005738:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800573a:	2300      	movs	r3, #0
 800573c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800573e:	4b42      	ldr	r3, [pc, #264]	; (8005848 <xTaskResumeAll+0x118>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d10a      	bne.n	800575c <xTaskResumeAll+0x2c>
	__asm volatile
 8005746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574a:	f383 8811 	msr	BASEPRI, r3
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f3bf 8f4f 	dsb	sy
 8005756:	603b      	str	r3, [r7, #0]
}
 8005758:	bf00      	nop
 800575a:	e7fe      	b.n	800575a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800575c:	f001 f922 	bl	80069a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005760:	4b39      	ldr	r3, [pc, #228]	; (8005848 <xTaskResumeAll+0x118>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3b01      	subs	r3, #1
 8005766:	4a38      	ldr	r2, [pc, #224]	; (8005848 <xTaskResumeAll+0x118>)
 8005768:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800576a:	4b37      	ldr	r3, [pc, #220]	; (8005848 <xTaskResumeAll+0x118>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d162      	bne.n	8005838 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005772:	4b36      	ldr	r3, [pc, #216]	; (800584c <xTaskResumeAll+0x11c>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d05e      	beq.n	8005838 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800577a:	e02f      	b.n	80057dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800577c:	4b34      	ldr	r3, [pc, #208]	; (8005850 <xTaskResumeAll+0x120>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3318      	adds	r3, #24
 8005788:	4618      	mov	r0, r3
 800578a:	f7ff f851 	bl	8004830 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3304      	adds	r3, #4
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff f84c 	bl	8004830 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800579c:	4b2d      	ldr	r3, [pc, #180]	; (8005854 <xTaskResumeAll+0x124>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d903      	bls.n	80057ac <xTaskResumeAll+0x7c>
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	4a2a      	ldr	r2, [pc, #168]	; (8005854 <xTaskResumeAll+0x124>)
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b0:	4613      	mov	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4a27      	ldr	r2, [pc, #156]	; (8005858 <xTaskResumeAll+0x128>)
 80057ba:	441a      	add	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	3304      	adds	r3, #4
 80057c0:	4619      	mov	r1, r3
 80057c2:	4610      	mov	r0, r2
 80057c4:	f7fe ffd7 	bl	8004776 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057cc:	4b23      	ldr	r3, [pc, #140]	; (800585c <xTaskResumeAll+0x12c>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d302      	bcc.n	80057dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80057d6:	4b22      	ldr	r3, [pc, #136]	; (8005860 <xTaskResumeAll+0x130>)
 80057d8:	2201      	movs	r2, #1
 80057da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057dc:	4b1c      	ldr	r3, [pc, #112]	; (8005850 <xTaskResumeAll+0x120>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1cb      	bne.n	800577c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d001      	beq.n	80057ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057ea:	f000 fb5f 	bl	8005eac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80057ee:	4b1d      	ldr	r3, [pc, #116]	; (8005864 <xTaskResumeAll+0x134>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d010      	beq.n	800581c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057fa:	f000 f847 	bl	800588c <xTaskIncrementTick>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005804:	4b16      	ldr	r3, [pc, #88]	; (8005860 <xTaskResumeAll+0x130>)
 8005806:	2201      	movs	r2, #1
 8005808:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	3b01      	subs	r3, #1
 800580e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1f1      	bne.n	80057fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005816:	4b13      	ldr	r3, [pc, #76]	; (8005864 <xTaskResumeAll+0x134>)
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800581c:	4b10      	ldr	r3, [pc, #64]	; (8005860 <xTaskResumeAll+0x130>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d009      	beq.n	8005838 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005824:	2301      	movs	r3, #1
 8005826:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005828:	4b0f      	ldr	r3, [pc, #60]	; (8005868 <xTaskResumeAll+0x138>)
 800582a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005838:	f001 f8e4 	bl	8006a04 <vPortExitCritical>

	return xAlreadyYielded;
 800583c:	68bb      	ldr	r3, [r7, #8]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20000e7c 	.word	0x20000e7c
 800584c:	20000e54 	.word	0x20000e54
 8005850:	20000e14 	.word	0x20000e14
 8005854:	20000e5c 	.word	0x20000e5c
 8005858:	20000984 	.word	0x20000984
 800585c:	20000980 	.word	0x20000980
 8005860:	20000e68 	.word	0x20000e68
 8005864:	20000e64 	.word	0x20000e64
 8005868:	e000ed04 	.word	0xe000ed04

0800586c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005872:	4b05      	ldr	r3, [pc, #20]	; (8005888 <xTaskGetTickCount+0x1c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005878:	687b      	ldr	r3, [r7, #4]
}
 800587a:	4618      	mov	r0, r3
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	20000e58 	.word	0x20000e58

0800588c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005892:	2300      	movs	r3, #0
 8005894:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005896:	4b4f      	ldr	r3, [pc, #316]	; (80059d4 <xTaskIncrementTick+0x148>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	f040 808f 	bne.w	80059be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058a0:	4b4d      	ldr	r3, [pc, #308]	; (80059d8 <xTaskIncrementTick+0x14c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3301      	adds	r3, #1
 80058a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058a8:	4a4b      	ldr	r2, [pc, #300]	; (80059d8 <xTaskIncrementTick+0x14c>)
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d120      	bne.n	80058f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80058b4:	4b49      	ldr	r3, [pc, #292]	; (80059dc <xTaskIncrementTick+0x150>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	603b      	str	r3, [r7, #0]
}
 80058d0:	bf00      	nop
 80058d2:	e7fe      	b.n	80058d2 <xTaskIncrementTick+0x46>
 80058d4:	4b41      	ldr	r3, [pc, #260]	; (80059dc <xTaskIncrementTick+0x150>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	4b41      	ldr	r3, [pc, #260]	; (80059e0 <xTaskIncrementTick+0x154>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a3f      	ldr	r2, [pc, #252]	; (80059dc <xTaskIncrementTick+0x150>)
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	4a3f      	ldr	r2, [pc, #252]	; (80059e0 <xTaskIncrementTick+0x154>)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	4b3e      	ldr	r3, [pc, #248]	; (80059e4 <xTaskIncrementTick+0x158>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3301      	adds	r3, #1
 80058ee:	4a3d      	ldr	r2, [pc, #244]	; (80059e4 <xTaskIncrementTick+0x158>)
 80058f0:	6013      	str	r3, [r2, #0]
 80058f2:	f000 fadb 	bl	8005eac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058f6:	4b3c      	ldr	r3, [pc, #240]	; (80059e8 <xTaskIncrementTick+0x15c>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d349      	bcc.n	8005994 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005900:	4b36      	ldr	r3, [pc, #216]	; (80059dc <xTaskIncrementTick+0x150>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d104      	bne.n	8005914 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800590a:	4b37      	ldr	r3, [pc, #220]	; (80059e8 <xTaskIncrementTick+0x15c>)
 800590c:	f04f 32ff 	mov.w	r2, #4294967295
 8005910:	601a      	str	r2, [r3, #0]
					break;
 8005912:	e03f      	b.n	8005994 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005914:	4b31      	ldr	r3, [pc, #196]	; (80059dc <xTaskIncrementTick+0x150>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	429a      	cmp	r2, r3
 800592a:	d203      	bcs.n	8005934 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800592c:	4a2e      	ldr	r2, [pc, #184]	; (80059e8 <xTaskIncrementTick+0x15c>)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005932:	e02f      	b.n	8005994 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	3304      	adds	r3, #4
 8005938:	4618      	mov	r0, r3
 800593a:	f7fe ff79 	bl	8004830 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005942:	2b00      	cmp	r3, #0
 8005944:	d004      	beq.n	8005950 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	3318      	adds	r3, #24
 800594a:	4618      	mov	r0, r3
 800594c:	f7fe ff70 	bl	8004830 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005954:	4b25      	ldr	r3, [pc, #148]	; (80059ec <xTaskIncrementTick+0x160>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	429a      	cmp	r2, r3
 800595a:	d903      	bls.n	8005964 <xTaskIncrementTick+0xd8>
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	4a22      	ldr	r2, [pc, #136]	; (80059ec <xTaskIncrementTick+0x160>)
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005968:	4613      	mov	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4a1f      	ldr	r2, [pc, #124]	; (80059f0 <xTaskIncrementTick+0x164>)
 8005972:	441a      	add	r2, r3
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	3304      	adds	r3, #4
 8005978:	4619      	mov	r1, r3
 800597a:	4610      	mov	r0, r2
 800597c:	f7fe fefb 	bl	8004776 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005984:	4b1b      	ldr	r3, [pc, #108]	; (80059f4 <xTaskIncrementTick+0x168>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598a:	429a      	cmp	r2, r3
 800598c:	d3b8      	bcc.n	8005900 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800598e:	2301      	movs	r3, #1
 8005990:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005992:	e7b5      	b.n	8005900 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005994:	4b17      	ldr	r3, [pc, #92]	; (80059f4 <xTaskIncrementTick+0x168>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599a:	4915      	ldr	r1, [pc, #84]	; (80059f0 <xTaskIncrementTick+0x164>)
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	440b      	add	r3, r1
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d901      	bls.n	80059b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80059ac:	2301      	movs	r3, #1
 80059ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80059b0:	4b11      	ldr	r3, [pc, #68]	; (80059f8 <xTaskIncrementTick+0x16c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d007      	beq.n	80059c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80059b8:	2301      	movs	r3, #1
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	e004      	b.n	80059c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80059be:	4b0f      	ldr	r3, [pc, #60]	; (80059fc <xTaskIncrementTick+0x170>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3301      	adds	r3, #1
 80059c4:	4a0d      	ldr	r2, [pc, #52]	; (80059fc <xTaskIncrementTick+0x170>)
 80059c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80059c8:	697b      	ldr	r3, [r7, #20]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20000e7c 	.word	0x20000e7c
 80059d8:	20000e58 	.word	0x20000e58
 80059dc:	20000e0c 	.word	0x20000e0c
 80059e0:	20000e10 	.word	0x20000e10
 80059e4:	20000e6c 	.word	0x20000e6c
 80059e8:	20000e74 	.word	0x20000e74
 80059ec:	20000e5c 	.word	0x20000e5c
 80059f0:	20000984 	.word	0x20000984
 80059f4:	20000980 	.word	0x20000980
 80059f8:	20000e68 	.word	0x20000e68
 80059fc:	20000e64 	.word	0x20000e64

08005a00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a06:	4b2a      	ldr	r3, [pc, #168]	; (8005ab0 <vTaskSwitchContext+0xb0>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a0e:	4b29      	ldr	r3, [pc, #164]	; (8005ab4 <vTaskSwitchContext+0xb4>)
 8005a10:	2201      	movs	r2, #1
 8005a12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a14:	e046      	b.n	8005aa4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005a16:	4b27      	ldr	r3, [pc, #156]	; (8005ab4 <vTaskSwitchContext+0xb4>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a1c:	4b26      	ldr	r3, [pc, #152]	; (8005ab8 <vTaskSwitchContext+0xb8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	e010      	b.n	8005a46 <vTaskSwitchContext+0x46>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10a      	bne.n	8005a40 <vTaskSwitchContext+0x40>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	607b      	str	r3, [r7, #4]
}
 8005a3c:	bf00      	nop
 8005a3e:	e7fe      	b.n	8005a3e <vTaskSwitchContext+0x3e>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	491d      	ldr	r1, [pc, #116]	; (8005abc <vTaskSwitchContext+0xbc>)
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	440b      	add	r3, r1
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d0e4      	beq.n	8005a24 <vTaskSwitchContext+0x24>
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4a15      	ldr	r2, [pc, #84]	; (8005abc <vTaskSwitchContext+0xbc>)
 8005a66:	4413      	add	r3, r2
 8005a68:	60bb      	str	r3, [r7, #8]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	605a      	str	r2, [r3, #4]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d104      	bne.n	8005a8a <vTaskSwitchContext+0x8a>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	605a      	str	r2, [r3, #4]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	4a0b      	ldr	r2, [pc, #44]	; (8005ac0 <vTaskSwitchContext+0xc0>)
 8005a92:	6013      	str	r3, [r2, #0]
 8005a94:	4a08      	ldr	r2, [pc, #32]	; (8005ab8 <vTaskSwitchContext+0xb8>)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a9a:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <vTaskSwitchContext+0xc0>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	3354      	adds	r3, #84	; 0x54
 8005aa0:	4a08      	ldr	r2, [pc, #32]	; (8005ac4 <vTaskSwitchContext+0xc4>)
 8005aa2:	6013      	str	r3, [r2, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	20000e7c 	.word	0x20000e7c
 8005ab4:	20000e68 	.word	0x20000e68
 8005ab8:	20000e5c 	.word	0x20000e5c
 8005abc:	20000984 	.word	0x20000984
 8005ac0:	20000980 	.word	0x20000980
 8005ac4:	20000010 	.word	0x20000010

08005ac8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	60fb      	str	r3, [r7, #12]
}
 8005aea:	bf00      	nop
 8005aec:	e7fe      	b.n	8005aec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005aee:	4b07      	ldr	r3, [pc, #28]	; (8005b0c <vTaskPlaceOnEventList+0x44>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3318      	adds	r3, #24
 8005af4:	4619      	mov	r1, r3
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f7fe fe61 	bl	80047be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005afc:	2101      	movs	r1, #1
 8005afe:	6838      	ldr	r0, [r7, #0]
 8005b00:	f000 fa80 	bl	8006004 <prvAddCurrentTaskToDelayedList>
}
 8005b04:	bf00      	nop
 8005b06:	3710      	adds	r7, #16
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	20000980 	.word	0x20000980

08005b10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10a      	bne.n	8005b38 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b26:	f383 8811 	msr	BASEPRI, r3
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	f3bf 8f4f 	dsb	sy
 8005b32:	617b      	str	r3, [r7, #20]
}
 8005b34:	bf00      	nop
 8005b36:	e7fe      	b.n	8005b36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b38:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <vTaskPlaceOnEventListRestricted+0x54>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3318      	adds	r3, #24
 8005b3e:	4619      	mov	r1, r3
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f7fe fe18 	bl	8004776 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d002      	beq.n	8005b52 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b50:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b52:	6879      	ldr	r1, [r7, #4]
 8005b54:	68b8      	ldr	r0, [r7, #8]
 8005b56:	f000 fa55 	bl	8006004 <prvAddCurrentTaskToDelayedList>
	}
 8005b5a:	bf00      	nop
 8005b5c:	3718      	adds	r7, #24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	20000980 	.word	0x20000980

08005b68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b82:	f383 8811 	msr	BASEPRI, r3
 8005b86:	f3bf 8f6f 	isb	sy
 8005b8a:	f3bf 8f4f 	dsb	sy
 8005b8e:	60fb      	str	r3, [r7, #12]
}
 8005b90:	bf00      	nop
 8005b92:	e7fe      	b.n	8005b92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	3318      	adds	r3, #24
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7fe fe49 	bl	8004830 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b9e:	4b1e      	ldr	r3, [pc, #120]	; (8005c18 <xTaskRemoveFromEventList+0xb0>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d11d      	bne.n	8005be2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	3304      	adds	r3, #4
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fe fe40 	bl	8004830 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb4:	4b19      	ldr	r3, [pc, #100]	; (8005c1c <xTaskRemoveFromEventList+0xb4>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d903      	bls.n	8005bc4 <xTaskRemoveFromEventList+0x5c>
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc0:	4a16      	ldr	r2, [pc, #88]	; (8005c1c <xTaskRemoveFromEventList+0xb4>)
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc8:	4613      	mov	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4a13      	ldr	r2, [pc, #76]	; (8005c20 <xTaskRemoveFromEventList+0xb8>)
 8005bd2:	441a      	add	r2, r3
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4610      	mov	r0, r2
 8005bdc:	f7fe fdcb 	bl	8004776 <vListInsertEnd>
 8005be0:	e005      	b.n	8005bee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	3318      	adds	r3, #24
 8005be6:	4619      	mov	r1, r3
 8005be8:	480e      	ldr	r0, [pc, #56]	; (8005c24 <xTaskRemoveFromEventList+0xbc>)
 8005bea:	f7fe fdc4 	bl	8004776 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf2:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <xTaskRemoveFromEventList+0xc0>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d905      	bls.n	8005c08 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c00:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <xTaskRemoveFromEventList+0xc4>)
 8005c02:	2201      	movs	r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	e001      	b.n	8005c0c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c0c:	697b      	ldr	r3, [r7, #20]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3718      	adds	r7, #24
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20000e7c 	.word	0x20000e7c
 8005c1c:	20000e5c 	.word	0x20000e5c
 8005c20:	20000984 	.word	0x20000984
 8005c24:	20000e14 	.word	0x20000e14
 8005c28:	20000980 	.word	0x20000980
 8005c2c:	20000e68 	.word	0x20000e68

08005c30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c38:	4b06      	ldr	r3, [pc, #24]	; (8005c54 <vTaskInternalSetTimeOutState+0x24>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c40:	4b05      	ldr	r3, [pc, #20]	; (8005c58 <vTaskInternalSetTimeOutState+0x28>)
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	605a      	str	r2, [r3, #4]
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	20000e6c 	.word	0x20000e6c
 8005c58:	20000e58 	.word	0x20000e58

08005c5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10a      	bne.n	8005c82 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	613b      	str	r3, [r7, #16]
}
 8005c7e:	bf00      	nop
 8005c80:	e7fe      	b.n	8005c80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10a      	bne.n	8005c9e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	60fb      	str	r3, [r7, #12]
}
 8005c9a:	bf00      	nop
 8005c9c:	e7fe      	b.n	8005c9c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c9e:	f000 fe81 	bl	80069a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005ca2:	4b1d      	ldr	r3, [pc, #116]	; (8005d18 <xTaskCheckForTimeOut+0xbc>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cba:	d102      	bne.n	8005cc2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61fb      	str	r3, [r7, #28]
 8005cc0:	e023      	b.n	8005d0a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	4b15      	ldr	r3, [pc, #84]	; (8005d1c <xTaskCheckForTimeOut+0xc0>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d007      	beq.n	8005cde <xTaskCheckForTimeOut+0x82>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d302      	bcc.n	8005cde <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	61fb      	str	r3, [r7, #28]
 8005cdc:	e015      	b.n	8005d0a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d20b      	bcs.n	8005d00 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	1ad2      	subs	r2, r2, r3
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff ff9b 	bl	8005c30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61fb      	str	r3, [r7, #28]
 8005cfe:	e004      	b.n	8005d0a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2200      	movs	r2, #0
 8005d04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d06:	2301      	movs	r3, #1
 8005d08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d0a:	f000 fe7b 	bl	8006a04 <vPortExitCritical>

	return xReturn;
 8005d0e:	69fb      	ldr	r3, [r7, #28]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3720      	adds	r7, #32
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	20000e58 	.word	0x20000e58
 8005d1c:	20000e6c 	.word	0x20000e6c

08005d20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d24:	4b03      	ldr	r3, [pc, #12]	; (8005d34 <vTaskMissedYield+0x14>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	601a      	str	r2, [r3, #0]
}
 8005d2a:	bf00      	nop
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	20000e68 	.word	0x20000e68

08005d38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d40:	f000 f852 	bl	8005de8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d44:	4b06      	ldr	r3, [pc, #24]	; (8005d60 <prvIdleTask+0x28>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d9f9      	bls.n	8005d40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d4c:	4b05      	ldr	r3, [pc, #20]	; (8005d64 <prvIdleTask+0x2c>)
 8005d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d5c:	e7f0      	b.n	8005d40 <prvIdleTask+0x8>
 8005d5e:	bf00      	nop
 8005d60:	20000984 	.word	0x20000984
 8005d64:	e000ed04 	.word	0xe000ed04

08005d68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d6e:	2300      	movs	r3, #0
 8005d70:	607b      	str	r3, [r7, #4]
 8005d72:	e00c      	b.n	8005d8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4a12      	ldr	r2, [pc, #72]	; (8005dc8 <prvInitialiseTaskLists+0x60>)
 8005d80:	4413      	add	r3, r2
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fe fcca 	bl	800471c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	607b      	str	r3, [r7, #4]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b37      	cmp	r3, #55	; 0x37
 8005d92:	d9ef      	bls.n	8005d74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d94:	480d      	ldr	r0, [pc, #52]	; (8005dcc <prvInitialiseTaskLists+0x64>)
 8005d96:	f7fe fcc1 	bl	800471c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d9a:	480d      	ldr	r0, [pc, #52]	; (8005dd0 <prvInitialiseTaskLists+0x68>)
 8005d9c:	f7fe fcbe 	bl	800471c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005da0:	480c      	ldr	r0, [pc, #48]	; (8005dd4 <prvInitialiseTaskLists+0x6c>)
 8005da2:	f7fe fcbb 	bl	800471c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005da6:	480c      	ldr	r0, [pc, #48]	; (8005dd8 <prvInitialiseTaskLists+0x70>)
 8005da8:	f7fe fcb8 	bl	800471c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005dac:	480b      	ldr	r0, [pc, #44]	; (8005ddc <prvInitialiseTaskLists+0x74>)
 8005dae:	f7fe fcb5 	bl	800471c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005db2:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <prvInitialiseTaskLists+0x78>)
 8005db4:	4a05      	ldr	r2, [pc, #20]	; (8005dcc <prvInitialiseTaskLists+0x64>)
 8005db6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005db8:	4b0a      	ldr	r3, [pc, #40]	; (8005de4 <prvInitialiseTaskLists+0x7c>)
 8005dba:	4a05      	ldr	r2, [pc, #20]	; (8005dd0 <prvInitialiseTaskLists+0x68>)
 8005dbc:	601a      	str	r2, [r3, #0]
}
 8005dbe:	bf00      	nop
 8005dc0:	3708      	adds	r7, #8
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20000984 	.word	0x20000984
 8005dcc:	20000de4 	.word	0x20000de4
 8005dd0:	20000df8 	.word	0x20000df8
 8005dd4:	20000e14 	.word	0x20000e14
 8005dd8:	20000e28 	.word	0x20000e28
 8005ddc:	20000e40 	.word	0x20000e40
 8005de0:	20000e0c 	.word	0x20000e0c
 8005de4:	20000e10 	.word	0x20000e10

08005de8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dee:	e019      	b.n	8005e24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005df0:	f000 fdd8 	bl	80069a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005df4:	4b10      	ldr	r3, [pc, #64]	; (8005e38 <prvCheckTasksWaitingTermination+0x50>)
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fe fd15 	bl	8004830 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e06:	4b0d      	ldr	r3, [pc, #52]	; (8005e3c <prvCheckTasksWaitingTermination+0x54>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	4a0b      	ldr	r2, [pc, #44]	; (8005e3c <prvCheckTasksWaitingTermination+0x54>)
 8005e0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e10:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <prvCheckTasksWaitingTermination+0x58>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	3b01      	subs	r3, #1
 8005e16:	4a0a      	ldr	r2, [pc, #40]	; (8005e40 <prvCheckTasksWaitingTermination+0x58>)
 8005e18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e1a:	f000 fdf3 	bl	8006a04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f810 	bl	8005e44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e24:	4b06      	ldr	r3, [pc, #24]	; (8005e40 <prvCheckTasksWaitingTermination+0x58>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1e1      	bne.n	8005df0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e2c:	bf00      	nop
 8005e2e:	bf00      	nop
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000e28 	.word	0x20000e28
 8005e3c:	20000e54 	.word	0x20000e54
 8005e40:	20000e3c 	.word	0x20000e3c

08005e44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3354      	adds	r3, #84	; 0x54
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 ff17 	bl	8007c84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d108      	bne.n	8005e72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e64:	4618      	mov	r0, r3
 8005e66:	f000 ff8b 	bl	8006d80 <vPortFree>
				vPortFree( pxTCB );
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 ff88 	bl	8006d80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e70:	e018      	b.n	8005ea4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d103      	bne.n	8005e84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 ff7f 	bl	8006d80 <vPortFree>
	}
 8005e82:	e00f      	b.n	8005ea4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d00a      	beq.n	8005ea4 <prvDeleteTCB+0x60>
	__asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	60fb      	str	r3, [r7, #12]
}
 8005ea0:	bf00      	nop
 8005ea2:	e7fe      	b.n	8005ea2 <prvDeleteTCB+0x5e>
	}
 8005ea4:	bf00      	nop
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eb2:	4b0c      	ldr	r3, [pc, #48]	; (8005ee4 <prvResetNextTaskUnblockTime+0x38>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d104      	bne.n	8005ec6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	; (8005ee8 <prvResetNextTaskUnblockTime+0x3c>)
 8005ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ec4:	e008      	b.n	8005ed8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ec6:	4b07      	ldr	r3, [pc, #28]	; (8005ee4 <prvResetNextTaskUnblockTime+0x38>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	4a04      	ldr	r2, [pc, #16]	; (8005ee8 <prvResetNextTaskUnblockTime+0x3c>)
 8005ed6:	6013      	str	r3, [r2, #0]
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr
 8005ee4:	20000e0c 	.word	0x20000e0c
 8005ee8:	20000e74 	.word	0x20000e74

08005eec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ef2:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <xTaskGetSchedulerState+0x34>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d102      	bne.n	8005f00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005efa:	2301      	movs	r3, #1
 8005efc:	607b      	str	r3, [r7, #4]
 8005efe:	e008      	b.n	8005f12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f00:	4b08      	ldr	r3, [pc, #32]	; (8005f24 <xTaskGetSchedulerState+0x38>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d102      	bne.n	8005f0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f08:	2302      	movs	r3, #2
 8005f0a:	607b      	str	r3, [r7, #4]
 8005f0c:	e001      	b.n	8005f12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f12:	687b      	ldr	r3, [r7, #4]
	}
 8005f14:	4618      	mov	r0, r3
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	20000e60 	.word	0x20000e60
 8005f24:	20000e7c 	.word	0x20000e7c

08005f28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f34:	2300      	movs	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d056      	beq.n	8005fec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f3e:	4b2e      	ldr	r3, [pc, #184]	; (8005ff8 <xTaskPriorityDisinherit+0xd0>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d00a      	beq.n	8005f5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	60fb      	str	r3, [r7, #12]
}
 8005f5a:	bf00      	nop
 8005f5c:	e7fe      	b.n	8005f5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10a      	bne.n	8005f7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	60bb      	str	r3, [r7, #8]
}
 8005f78:	bf00      	nop
 8005f7a:	e7fe      	b.n	8005f7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f80:	1e5a      	subs	r2, r3, #1
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d02c      	beq.n	8005fec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d128      	bne.n	8005fec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fe fc46 	bl	8004830 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbc:	4b0f      	ldr	r3, [pc, #60]	; (8005ffc <xTaskPriorityDisinherit+0xd4>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d903      	bls.n	8005fcc <xTaskPriorityDisinherit+0xa4>
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc8:	4a0c      	ldr	r2, [pc, #48]	; (8005ffc <xTaskPriorityDisinherit+0xd4>)
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4413      	add	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4a09      	ldr	r2, [pc, #36]	; (8006000 <xTaskPriorityDisinherit+0xd8>)
 8005fda:	441a      	add	r2, r3
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	3304      	adds	r3, #4
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	f7fe fbc7 	bl	8004776 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fec:	697b      	ldr	r3, [r7, #20]
	}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20000980 	.word	0x20000980
 8005ffc:	20000e5c 	.word	0x20000e5c
 8006000:	20000984 	.word	0x20000984

08006004 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800600e:	4b21      	ldr	r3, [pc, #132]	; (8006094 <prvAddCurrentTaskToDelayedList+0x90>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006014:	4b20      	ldr	r3, [pc, #128]	; (8006098 <prvAddCurrentTaskToDelayedList+0x94>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3304      	adds	r3, #4
 800601a:	4618      	mov	r0, r3
 800601c:	f7fe fc08 	bl	8004830 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006026:	d10a      	bne.n	800603e <prvAddCurrentTaskToDelayedList+0x3a>
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800602e:	4b1a      	ldr	r3, [pc, #104]	; (8006098 <prvAddCurrentTaskToDelayedList+0x94>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3304      	adds	r3, #4
 8006034:	4619      	mov	r1, r3
 8006036:	4819      	ldr	r0, [pc, #100]	; (800609c <prvAddCurrentTaskToDelayedList+0x98>)
 8006038:	f7fe fb9d 	bl	8004776 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800603c:	e026      	b.n	800608c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4413      	add	r3, r2
 8006044:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006046:	4b14      	ldr	r3, [pc, #80]	; (8006098 <prvAddCurrentTaskToDelayedList+0x94>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	429a      	cmp	r2, r3
 8006054:	d209      	bcs.n	800606a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006056:	4b12      	ldr	r3, [pc, #72]	; (80060a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	4b0f      	ldr	r3, [pc, #60]	; (8006098 <prvAddCurrentTaskToDelayedList+0x94>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3304      	adds	r3, #4
 8006060:	4619      	mov	r1, r3
 8006062:	4610      	mov	r0, r2
 8006064:	f7fe fbab 	bl	80047be <vListInsert>
}
 8006068:	e010      	b.n	800608c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800606a:	4b0e      	ldr	r3, [pc, #56]	; (80060a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <prvAddCurrentTaskToDelayedList+0x94>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3304      	adds	r3, #4
 8006074:	4619      	mov	r1, r3
 8006076:	4610      	mov	r0, r2
 8006078:	f7fe fba1 	bl	80047be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800607c:	4b0a      	ldr	r3, [pc, #40]	; (80060a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	429a      	cmp	r2, r3
 8006084:	d202      	bcs.n	800608c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006086:	4a08      	ldr	r2, [pc, #32]	; (80060a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	6013      	str	r3, [r2, #0]
}
 800608c:	bf00      	nop
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	20000e58 	.word	0x20000e58
 8006098:	20000980 	.word	0x20000980
 800609c:	20000e40 	.word	0x20000e40
 80060a0:	20000e10 	.word	0x20000e10
 80060a4:	20000e0c 	.word	0x20000e0c
 80060a8:	20000e74 	.word	0x20000e74

080060ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08a      	sub	sp, #40	; 0x28
 80060b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060b6:	f000 fb07 	bl	80066c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060ba:	4b1c      	ldr	r3, [pc, #112]	; (800612c <xTimerCreateTimerTask+0x80>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d021      	beq.n	8006106 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060c6:	2300      	movs	r3, #0
 80060c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060ca:	1d3a      	adds	r2, r7, #4
 80060cc:	f107 0108 	add.w	r1, r7, #8
 80060d0:	f107 030c 	add.w	r3, r7, #12
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7fe fb07 	bl	80046e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060da:	6879      	ldr	r1, [r7, #4]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	9202      	str	r2, [sp, #8]
 80060e2:	9301      	str	r3, [sp, #4]
 80060e4:	2302      	movs	r3, #2
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	2300      	movs	r3, #0
 80060ea:	460a      	mov	r2, r1
 80060ec:	4910      	ldr	r1, [pc, #64]	; (8006130 <xTimerCreateTimerTask+0x84>)
 80060ee:	4811      	ldr	r0, [pc, #68]	; (8006134 <xTimerCreateTimerTask+0x88>)
 80060f0:	f7ff f8b4 	bl	800525c <xTaskCreateStatic>
 80060f4:	4603      	mov	r3, r0
 80060f6:	4a10      	ldr	r2, [pc, #64]	; (8006138 <xTimerCreateTimerTask+0x8c>)
 80060f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060fa:	4b0f      	ldr	r3, [pc, #60]	; (8006138 <xTimerCreateTimerTask+0x8c>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d001      	beq.n	8006106 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006102:	2301      	movs	r3, #1
 8006104:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	613b      	str	r3, [r7, #16]
}
 800611e:	bf00      	nop
 8006120:	e7fe      	b.n	8006120 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006122:	697b      	ldr	r3, [r7, #20]
}
 8006124:	4618      	mov	r0, r3
 8006126:	3718      	adds	r7, #24
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}
 800612c:	20000eb0 	.word	0x20000eb0
 8006130:	08009f44 	.word	0x08009f44
 8006134:	08006271 	.word	0x08006271
 8006138:	20000eb4 	.word	0x20000eb4

0800613c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08a      	sub	sp, #40	; 0x28
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
 8006148:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800614a:	2300      	movs	r3, #0
 800614c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10a      	bne.n	800616a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	623b      	str	r3, [r7, #32]
}
 8006166:	bf00      	nop
 8006168:	e7fe      	b.n	8006168 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800616a:	4b1a      	ldr	r3, [pc, #104]	; (80061d4 <xTimerGenericCommand+0x98>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d02a      	beq.n	80061c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b05      	cmp	r3, #5
 8006182:	dc18      	bgt.n	80061b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006184:	f7ff feb2 	bl	8005eec <xTaskGetSchedulerState>
 8006188:	4603      	mov	r3, r0
 800618a:	2b02      	cmp	r3, #2
 800618c:	d109      	bne.n	80061a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800618e:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <xTimerGenericCommand+0x98>)
 8006190:	6818      	ldr	r0, [r3, #0]
 8006192:	f107 0110 	add.w	r1, r7, #16
 8006196:	2300      	movs	r3, #0
 8006198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800619a:	f7fe fc77 	bl	8004a8c <xQueueGenericSend>
 800619e:	6278      	str	r0, [r7, #36]	; 0x24
 80061a0:	e012      	b.n	80061c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061a2:	4b0c      	ldr	r3, [pc, #48]	; (80061d4 <xTimerGenericCommand+0x98>)
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	f107 0110 	add.w	r1, r7, #16
 80061aa:	2300      	movs	r3, #0
 80061ac:	2200      	movs	r2, #0
 80061ae:	f7fe fc6d 	bl	8004a8c <xQueueGenericSend>
 80061b2:	6278      	str	r0, [r7, #36]	; 0x24
 80061b4:	e008      	b.n	80061c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061b6:	4b07      	ldr	r3, [pc, #28]	; (80061d4 <xTimerGenericCommand+0x98>)
 80061b8:	6818      	ldr	r0, [r3, #0]
 80061ba:	f107 0110 	add.w	r1, r7, #16
 80061be:	2300      	movs	r3, #0
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	f7fe fd61 	bl	8004c88 <xQueueGenericSendFromISR>
 80061c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3728      	adds	r7, #40	; 0x28
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000eb0 	.word	0x20000eb0

080061d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af02      	add	r7, sp, #8
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061e2:	4b22      	ldr	r3, [pc, #136]	; (800626c <prvProcessExpiredTimer+0x94>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	3304      	adds	r3, #4
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fe fb1d 	bl	8004830 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b00      	cmp	r3, #0
 8006202:	d022      	beq.n	800624a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	699a      	ldr	r2, [r3, #24]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	18d1      	adds	r1, r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	6978      	ldr	r0, [r7, #20]
 8006212:	f000 f8d1 	bl	80063b8 <prvInsertTimerInActiveList>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d01f      	beq.n	800625c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800621c:	2300      	movs	r3, #0
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	2300      	movs	r3, #0
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	2100      	movs	r1, #0
 8006226:	6978      	ldr	r0, [r7, #20]
 8006228:	f7ff ff88 	bl	800613c <xTimerGenericCommand>
 800622c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d113      	bne.n	800625c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	60fb      	str	r3, [r7, #12]
}
 8006246:	bf00      	nop
 8006248:	e7fe      	b.n	8006248 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006250:	f023 0301 	bic.w	r3, r3, #1
 8006254:	b2da      	uxtb	r2, r3
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	6978      	ldr	r0, [r7, #20]
 8006262:	4798      	blx	r3
}
 8006264:	bf00      	nop
 8006266:	3718      	adds	r7, #24
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	20000ea8 	.word	0x20000ea8

08006270 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006278:	f107 0308 	add.w	r3, r7, #8
 800627c:	4618      	mov	r0, r3
 800627e:	f000 f857 	bl	8006330 <prvGetNextExpireTime>
 8006282:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	4619      	mov	r1, r3
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 f803 	bl	8006294 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800628e:	f000 f8d5 	bl	800643c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006292:	e7f1      	b.n	8006278 <prvTimerTask+0x8>

08006294 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800629e:	f7ff fa39 	bl	8005714 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062a2:	f107 0308 	add.w	r3, r7, #8
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 f866 	bl	8006378 <prvSampleTimeNow>
 80062ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d130      	bne.n	8006316 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10a      	bne.n	80062d0 <prvProcessTimerOrBlockTask+0x3c>
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	429a      	cmp	r2, r3
 80062c0:	d806      	bhi.n	80062d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062c2:	f7ff fa35 	bl	8005730 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062c6:	68f9      	ldr	r1, [r7, #12]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7ff ff85 	bl	80061d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062ce:	e024      	b.n	800631a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d008      	beq.n	80062e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062d6:	4b13      	ldr	r3, [pc, #76]	; (8006324 <prvProcessTimerOrBlockTask+0x90>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <prvProcessTimerOrBlockTask+0x50>
 80062e0:	2301      	movs	r3, #1
 80062e2:	e000      	b.n	80062e6 <prvProcessTimerOrBlockTask+0x52>
 80062e4:	2300      	movs	r3, #0
 80062e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062e8:	4b0f      	ldr	r3, [pc, #60]	; (8006328 <prvProcessTimerOrBlockTask+0x94>)
 80062ea:	6818      	ldr	r0, [r3, #0]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	4619      	mov	r1, r3
 80062f6:	f7fe ff7d 	bl	80051f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062fa:	f7ff fa19 	bl	8005730 <xTaskResumeAll>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10a      	bne.n	800631a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006304:	4b09      	ldr	r3, [pc, #36]	; (800632c <prvProcessTimerOrBlockTask+0x98>)
 8006306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800630a:	601a      	str	r2, [r3, #0]
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	f3bf 8f6f 	isb	sy
}
 8006314:	e001      	b.n	800631a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006316:	f7ff fa0b 	bl	8005730 <xTaskResumeAll>
}
 800631a:	bf00      	nop
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20000eac 	.word	0x20000eac
 8006328:	20000eb0 	.word	0x20000eb0
 800632c:	e000ed04 	.word	0xe000ed04

08006330 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006338:	4b0e      	ldr	r3, [pc, #56]	; (8006374 <prvGetNextExpireTime+0x44>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <prvGetNextExpireTime+0x16>
 8006342:	2201      	movs	r2, #1
 8006344:	e000      	b.n	8006348 <prvGetNextExpireTime+0x18>
 8006346:	2200      	movs	r2, #0
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d105      	bne.n	8006360 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006354:	4b07      	ldr	r3, [pc, #28]	; (8006374 <prvGetNextExpireTime+0x44>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	60fb      	str	r3, [r7, #12]
 800635e:	e001      	b.n	8006364 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006360:	2300      	movs	r3, #0
 8006362:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006364:	68fb      	ldr	r3, [r7, #12]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	20000ea8 	.word	0x20000ea8

08006378 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006380:	f7ff fa74 	bl	800586c <xTaskGetTickCount>
 8006384:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006386:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <prvSampleTimeNow+0x3c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	429a      	cmp	r2, r3
 800638e:	d205      	bcs.n	800639c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006390:	f000 f936 	bl	8006600 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	601a      	str	r2, [r3, #0]
 800639a:	e002      	b.n	80063a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80063a2:	4a04      	ldr	r2, [pc, #16]	; (80063b4 <prvSampleTimeNow+0x3c>)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063a8:	68fb      	ldr	r3, [r7, #12]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	20000eb8 	.word	0x20000eb8

080063b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
 80063c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063c6:	2300      	movs	r3, #0
 80063c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d812      	bhi.n	8006404 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	1ad2      	subs	r2, r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d302      	bcc.n	80063f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063ec:	2301      	movs	r3, #1
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	e01b      	b.n	800642a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063f2:	4b10      	ldr	r3, [pc, #64]	; (8006434 <prvInsertTimerInActiveList+0x7c>)
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3304      	adds	r3, #4
 80063fa:	4619      	mov	r1, r3
 80063fc:	4610      	mov	r0, r2
 80063fe:	f7fe f9de 	bl	80047be <vListInsert>
 8006402:	e012      	b.n	800642a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	429a      	cmp	r2, r3
 800640a:	d206      	bcs.n	800641a <prvInsertTimerInActiveList+0x62>
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	429a      	cmp	r2, r3
 8006412:	d302      	bcc.n	800641a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006414:	2301      	movs	r3, #1
 8006416:	617b      	str	r3, [r7, #20]
 8006418:	e007      	b.n	800642a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800641a:	4b07      	ldr	r3, [pc, #28]	; (8006438 <prvInsertTimerInActiveList+0x80>)
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	3304      	adds	r3, #4
 8006422:	4619      	mov	r1, r3
 8006424:	4610      	mov	r0, r2
 8006426:	f7fe f9ca 	bl	80047be <vListInsert>
		}
	}

	return xProcessTimerNow;
 800642a:	697b      	ldr	r3, [r7, #20]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	20000eac 	.word	0x20000eac
 8006438:	20000ea8 	.word	0x20000ea8

0800643c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b08e      	sub	sp, #56	; 0x38
 8006440:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006442:	e0ca      	b.n	80065da <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	da18      	bge.n	800647c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800644a:	1d3b      	adds	r3, r7, #4
 800644c:	3304      	adds	r3, #4
 800644e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10a      	bne.n	800646c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	61fb      	str	r3, [r7, #28]
}
 8006468:	bf00      	nop
 800646a:	e7fe      	b.n	800646a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800646c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006472:	6850      	ldr	r0, [r2, #4]
 8006474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006476:	6892      	ldr	r2, [r2, #8]
 8006478:	4611      	mov	r1, r2
 800647a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	f2c0 80aa 	blt.w	80065d8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800648a:	695b      	ldr	r3, [r3, #20]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d004      	beq.n	800649a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	3304      	adds	r3, #4
 8006494:	4618      	mov	r0, r3
 8006496:	f7fe f9cb 	bl	8004830 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800649a:	463b      	mov	r3, r7
 800649c:	4618      	mov	r0, r3
 800649e:	f7ff ff6b 	bl	8006378 <prvSampleTimeNow>
 80064a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b09      	cmp	r3, #9
 80064a8:	f200 8097 	bhi.w	80065da <prvProcessReceivedCommands+0x19e>
 80064ac:	a201      	add	r2, pc, #4	; (adr r2, 80064b4 <prvProcessReceivedCommands+0x78>)
 80064ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b2:	bf00      	nop
 80064b4:	080064dd 	.word	0x080064dd
 80064b8:	080064dd 	.word	0x080064dd
 80064bc:	080064dd 	.word	0x080064dd
 80064c0:	08006551 	.word	0x08006551
 80064c4:	08006565 	.word	0x08006565
 80064c8:	080065af 	.word	0x080065af
 80064cc:	080064dd 	.word	0x080064dd
 80064d0:	080064dd 	.word	0x080064dd
 80064d4:	08006551 	.word	0x08006551
 80064d8:	08006565 	.word	0x08006565
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064e2:	f043 0301 	orr.w	r3, r3, #1
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	18d1      	adds	r1, r2, r3
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064fc:	f7ff ff5c 	bl	80063b8 <prvInsertTimerInActiveList>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d069      	beq.n	80065da <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800650c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006514:	f003 0304 	and.w	r3, r3, #4
 8006518:	2b00      	cmp	r3, #0
 800651a:	d05e      	beq.n	80065da <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800651c:	68ba      	ldr	r2, [r7, #8]
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	441a      	add	r2, r3
 8006524:	2300      	movs	r3, #0
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	2300      	movs	r3, #0
 800652a:	2100      	movs	r1, #0
 800652c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800652e:	f7ff fe05 	bl	800613c <xTimerGenericCommand>
 8006532:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006534:	6a3b      	ldr	r3, [r7, #32]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d14f      	bne.n	80065da <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	61bb      	str	r3, [r7, #24]
}
 800654c:	bf00      	nop
 800654e:	e7fe      	b.n	800654e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006556:	f023 0301 	bic.w	r3, r3, #1
 800655a:	b2da      	uxtb	r2, r3
 800655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006562:	e03a      	b.n	80065da <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800656a:	f043 0301 	orr.w	r3, r3, #1
 800656e:	b2da      	uxtb	r2, r3
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800657c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10a      	bne.n	800659a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	617b      	str	r3, [r7, #20]
}
 8006596:	bf00      	nop
 8006598:	e7fe      	b.n	8006598 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	699a      	ldr	r2, [r3, #24]
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	18d1      	adds	r1, r2, r3
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a8:	f7ff ff06 	bl	80063b8 <prvInsertTimerInActiveList>
					break;
 80065ac:	e015      	b.n	80065da <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065b4:	f003 0302 	and.w	r3, r3, #2
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d103      	bne.n	80065c4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80065bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065be:	f000 fbdf 	bl	8006d80 <vPortFree>
 80065c2:	e00a      	b.n	80065da <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ca:	f023 0301 	bic.w	r3, r3, #1
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065d6:	e000      	b.n	80065da <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80065d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065da:	4b08      	ldr	r3, [pc, #32]	; (80065fc <prvProcessReceivedCommands+0x1c0>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	1d39      	adds	r1, r7, #4
 80065e0:	2200      	movs	r2, #0
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fe fbec 	bl	8004dc0 <xQueueReceive>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f47f af2a 	bne.w	8006444 <prvProcessReceivedCommands+0x8>
	}
}
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop
 80065f4:	3730      	adds	r7, #48	; 0x30
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20000eb0 	.word	0x20000eb0

08006600 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b088      	sub	sp, #32
 8006604:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006606:	e048      	b.n	800669a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006608:	4b2d      	ldr	r3, [pc, #180]	; (80066c0 <prvSwitchTimerLists+0xc0>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006612:	4b2b      	ldr	r3, [pc, #172]	; (80066c0 <prvSwitchTimerLists+0xc0>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	3304      	adds	r3, #4
 8006620:	4618      	mov	r0, r3
 8006622:	f7fe f905 	bl	8004830 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	d02e      	beq.n	800669a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	4413      	add	r3, r2
 8006644:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	429a      	cmp	r2, r3
 800664c:	d90e      	bls.n	800666c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	68ba      	ldr	r2, [r7, #8]
 8006652:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800665a:	4b19      	ldr	r3, [pc, #100]	; (80066c0 <prvSwitchTimerLists+0xc0>)
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	3304      	adds	r3, #4
 8006662:	4619      	mov	r1, r3
 8006664:	4610      	mov	r0, r2
 8006666:	f7fe f8aa 	bl	80047be <vListInsert>
 800666a:	e016      	b.n	800669a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800666c:	2300      	movs	r3, #0
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	2300      	movs	r3, #0
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	2100      	movs	r1, #0
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f7ff fd60 	bl	800613c <xTimerGenericCommand>
 800667c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	603b      	str	r3, [r7, #0]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800669a:	4b09      	ldr	r3, [pc, #36]	; (80066c0 <prvSwitchTimerLists+0xc0>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1b1      	bne.n	8006608 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80066a4:	4b06      	ldr	r3, [pc, #24]	; (80066c0 <prvSwitchTimerLists+0xc0>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80066aa:	4b06      	ldr	r3, [pc, #24]	; (80066c4 <prvSwitchTimerLists+0xc4>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a04      	ldr	r2, [pc, #16]	; (80066c0 <prvSwitchTimerLists+0xc0>)
 80066b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066b2:	4a04      	ldr	r2, [pc, #16]	; (80066c4 <prvSwitchTimerLists+0xc4>)
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	6013      	str	r3, [r2, #0]
}
 80066b8:	bf00      	nop
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	20000ea8 	.word	0x20000ea8
 80066c4:	20000eac 	.word	0x20000eac

080066c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066ce:	f000 f969 	bl	80069a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066d2:	4b15      	ldr	r3, [pc, #84]	; (8006728 <prvCheckForValidListAndQueue+0x60>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d120      	bne.n	800671c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066da:	4814      	ldr	r0, [pc, #80]	; (800672c <prvCheckForValidListAndQueue+0x64>)
 80066dc:	f7fe f81e 	bl	800471c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066e0:	4813      	ldr	r0, [pc, #76]	; (8006730 <prvCheckForValidListAndQueue+0x68>)
 80066e2:	f7fe f81b 	bl	800471c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066e6:	4b13      	ldr	r3, [pc, #76]	; (8006734 <prvCheckForValidListAndQueue+0x6c>)
 80066e8:	4a10      	ldr	r2, [pc, #64]	; (800672c <prvCheckForValidListAndQueue+0x64>)
 80066ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066ec:	4b12      	ldr	r3, [pc, #72]	; (8006738 <prvCheckForValidListAndQueue+0x70>)
 80066ee:	4a10      	ldr	r2, [pc, #64]	; (8006730 <prvCheckForValidListAndQueue+0x68>)
 80066f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066f2:	2300      	movs	r3, #0
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	4b11      	ldr	r3, [pc, #68]	; (800673c <prvCheckForValidListAndQueue+0x74>)
 80066f8:	4a11      	ldr	r2, [pc, #68]	; (8006740 <prvCheckForValidListAndQueue+0x78>)
 80066fa:	2110      	movs	r1, #16
 80066fc:	200a      	movs	r0, #10
 80066fe:	f7fe f929 	bl	8004954 <xQueueGenericCreateStatic>
 8006702:	4603      	mov	r3, r0
 8006704:	4a08      	ldr	r2, [pc, #32]	; (8006728 <prvCheckForValidListAndQueue+0x60>)
 8006706:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006708:	4b07      	ldr	r3, [pc, #28]	; (8006728 <prvCheckForValidListAndQueue+0x60>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d005      	beq.n	800671c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006710:	4b05      	ldr	r3, [pc, #20]	; (8006728 <prvCheckForValidListAndQueue+0x60>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	490b      	ldr	r1, [pc, #44]	; (8006744 <prvCheckForValidListAndQueue+0x7c>)
 8006716:	4618      	mov	r0, r3
 8006718:	f7fe fd42 	bl	80051a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800671c:	f000 f972 	bl	8006a04 <vPortExitCritical>
}
 8006720:	bf00      	nop
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	20000eb0 	.word	0x20000eb0
 800672c:	20000e80 	.word	0x20000e80
 8006730:	20000e94 	.word	0x20000e94
 8006734:	20000ea8 	.word	0x20000ea8
 8006738:	20000eac 	.word	0x20000eac
 800673c:	20000f5c 	.word	0x20000f5c
 8006740:	20000ebc 	.word	0x20000ebc
 8006744:	08009f4c 	.word	0x08009f4c

08006748 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	3b04      	subs	r3, #4
 8006758:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006760:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	3b04      	subs	r3, #4
 8006766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f023 0201 	bic.w	r2, r3, #1
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	3b04      	subs	r3, #4
 8006776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006778:	4a0c      	ldr	r2, [pc, #48]	; (80067ac <pxPortInitialiseStack+0x64>)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3b14      	subs	r3, #20
 8006782:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	3b04      	subs	r3, #4
 800678e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f06f 0202 	mvn.w	r2, #2
 8006796:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3b20      	subs	r3, #32
 800679c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800679e:	68fb      	ldr	r3, [r7, #12]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	080067b1 	.word	0x080067b1

080067b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067ba:	4b12      	ldr	r3, [pc, #72]	; (8006804 <prvTaskExitError+0x54>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c2:	d00a      	beq.n	80067da <prvTaskExitError+0x2a>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	60fb      	str	r3, [r7, #12]
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <prvTaskExitError+0x28>
	__asm volatile
 80067da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	60bb      	str	r3, [r7, #8]
}
 80067ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067ee:	bf00      	nop
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d0fc      	beq.n	80067f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067f6:	bf00      	nop
 80067f8:	bf00      	nop
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	2000000c 	.word	0x2000000c
	...

08006810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006810:	4b07      	ldr	r3, [pc, #28]	; (8006830 <pxCurrentTCBConst2>)
 8006812:	6819      	ldr	r1, [r3, #0]
 8006814:	6808      	ldr	r0, [r1, #0]
 8006816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681a:	f380 8809 	msr	PSP, r0
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f04f 0000 	mov.w	r0, #0
 8006826:	f380 8811 	msr	BASEPRI, r0
 800682a:	4770      	bx	lr
 800682c:	f3af 8000 	nop.w

08006830 <pxCurrentTCBConst2>:
 8006830:	20000980 	.word	0x20000980
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop

08006838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006838:	4808      	ldr	r0, [pc, #32]	; (800685c <prvPortStartFirstTask+0x24>)
 800683a:	6800      	ldr	r0, [r0, #0]
 800683c:	6800      	ldr	r0, [r0, #0]
 800683e:	f380 8808 	msr	MSP, r0
 8006842:	f04f 0000 	mov.w	r0, #0
 8006846:	f380 8814 	msr	CONTROL, r0
 800684a:	b662      	cpsie	i
 800684c:	b661      	cpsie	f
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	df00      	svc	0
 8006858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800685a:	bf00      	nop
 800685c:	e000ed08 	.word	0xe000ed08

08006860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006866:	4b46      	ldr	r3, [pc, #280]	; (8006980 <xPortStartScheduler+0x120>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a46      	ldr	r2, [pc, #280]	; (8006984 <xPortStartScheduler+0x124>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d10a      	bne.n	8006886 <xPortStartScheduler+0x26>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	613b      	str	r3, [r7, #16]
}
 8006882:	bf00      	nop
 8006884:	e7fe      	b.n	8006884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006886:	4b3e      	ldr	r3, [pc, #248]	; (8006980 <xPortStartScheduler+0x120>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a3f      	ldr	r2, [pc, #252]	; (8006988 <xPortStartScheduler+0x128>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d10a      	bne.n	80068a6 <xPortStartScheduler+0x46>
	__asm volatile
 8006890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006894:	f383 8811 	msr	BASEPRI, r3
 8006898:	f3bf 8f6f 	isb	sy
 800689c:	f3bf 8f4f 	dsb	sy
 80068a0:	60fb      	str	r3, [r7, #12]
}
 80068a2:	bf00      	nop
 80068a4:	e7fe      	b.n	80068a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068a6:	4b39      	ldr	r3, [pc, #228]	; (800698c <xPortStartScheduler+0x12c>)
 80068a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	22ff      	movs	r2, #255	; 0xff
 80068b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068c0:	78fb      	ldrb	r3, [r7, #3]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	4b31      	ldr	r3, [pc, #196]	; (8006990 <xPortStartScheduler+0x130>)
 80068cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068ce:	4b31      	ldr	r3, [pc, #196]	; (8006994 <xPortStartScheduler+0x134>)
 80068d0:	2207      	movs	r2, #7
 80068d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068d4:	e009      	b.n	80068ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80068d6:	4b2f      	ldr	r3, [pc, #188]	; (8006994 <xPortStartScheduler+0x134>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3b01      	subs	r3, #1
 80068dc:	4a2d      	ldr	r2, [pc, #180]	; (8006994 <xPortStartScheduler+0x134>)
 80068de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068e0:	78fb      	ldrb	r3, [r7, #3]
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	005b      	lsls	r3, r3, #1
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068ea:	78fb      	ldrb	r3, [r7, #3]
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f2:	2b80      	cmp	r3, #128	; 0x80
 80068f4:	d0ef      	beq.n	80068d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068f6:	4b27      	ldr	r3, [pc, #156]	; (8006994 <xPortStartScheduler+0x134>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f1c3 0307 	rsb	r3, r3, #7
 80068fe:	2b04      	cmp	r3, #4
 8006900:	d00a      	beq.n	8006918 <xPortStartScheduler+0xb8>
	__asm volatile
 8006902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006906:	f383 8811 	msr	BASEPRI, r3
 800690a:	f3bf 8f6f 	isb	sy
 800690e:	f3bf 8f4f 	dsb	sy
 8006912:	60bb      	str	r3, [r7, #8]
}
 8006914:	bf00      	nop
 8006916:	e7fe      	b.n	8006916 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006918:	4b1e      	ldr	r3, [pc, #120]	; (8006994 <xPortStartScheduler+0x134>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	021b      	lsls	r3, r3, #8
 800691e:	4a1d      	ldr	r2, [pc, #116]	; (8006994 <xPortStartScheduler+0x134>)
 8006920:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006922:	4b1c      	ldr	r3, [pc, #112]	; (8006994 <xPortStartScheduler+0x134>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800692a:	4a1a      	ldr	r2, [pc, #104]	; (8006994 <xPortStartScheduler+0x134>)
 800692c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	b2da      	uxtb	r2, r3
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006936:	4b18      	ldr	r3, [pc, #96]	; (8006998 <xPortStartScheduler+0x138>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a17      	ldr	r2, [pc, #92]	; (8006998 <xPortStartScheduler+0x138>)
 800693c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006942:	4b15      	ldr	r3, [pc, #84]	; (8006998 <xPortStartScheduler+0x138>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a14      	ldr	r2, [pc, #80]	; (8006998 <xPortStartScheduler+0x138>)
 8006948:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800694c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800694e:	f000 f8dd 	bl	8006b0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006952:	4b12      	ldr	r3, [pc, #72]	; (800699c <xPortStartScheduler+0x13c>)
 8006954:	2200      	movs	r2, #0
 8006956:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006958:	f000 f8fc 	bl	8006b54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800695c:	4b10      	ldr	r3, [pc, #64]	; (80069a0 <xPortStartScheduler+0x140>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a0f      	ldr	r2, [pc, #60]	; (80069a0 <xPortStartScheduler+0x140>)
 8006962:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006966:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006968:	f7ff ff66 	bl	8006838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800696c:	f7ff f848 	bl	8005a00 <vTaskSwitchContext>
	prvTaskExitError();
 8006970:	f7ff ff1e 	bl	80067b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	e000ed00 	.word	0xe000ed00
 8006984:	410fc271 	.word	0x410fc271
 8006988:	410fc270 	.word	0x410fc270
 800698c:	e000e400 	.word	0xe000e400
 8006990:	20000fac 	.word	0x20000fac
 8006994:	20000fb0 	.word	0x20000fb0
 8006998:	e000ed20 	.word	0xe000ed20
 800699c:	2000000c 	.word	0x2000000c
 80069a0:	e000ef34 	.word	0xe000ef34

080069a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	607b      	str	r3, [r7, #4]
}
 80069bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069be:	4b0f      	ldr	r3, [pc, #60]	; (80069fc <vPortEnterCritical+0x58>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3301      	adds	r3, #1
 80069c4:	4a0d      	ldr	r2, [pc, #52]	; (80069fc <vPortEnterCritical+0x58>)
 80069c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069c8:	4b0c      	ldr	r3, [pc, #48]	; (80069fc <vPortEnterCritical+0x58>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d10f      	bne.n	80069f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069d0:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <vPortEnterCritical+0x5c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00a      	beq.n	80069f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80069da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069de:	f383 8811 	msr	BASEPRI, r3
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	f3bf 8f4f 	dsb	sy
 80069ea:	603b      	str	r3, [r7, #0]
}
 80069ec:	bf00      	nop
 80069ee:	e7fe      	b.n	80069ee <vPortEnterCritical+0x4a>
	}
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	2000000c 	.word	0x2000000c
 8006a00:	e000ed04 	.word	0xe000ed04

08006a04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a0a:	4b12      	ldr	r3, [pc, #72]	; (8006a54 <vPortExitCritical+0x50>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10a      	bne.n	8006a28 <vPortExitCritical+0x24>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	607b      	str	r3, [r7, #4]
}
 8006a24:	bf00      	nop
 8006a26:	e7fe      	b.n	8006a26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a28:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <vPortExitCritical+0x50>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	4a09      	ldr	r2, [pc, #36]	; (8006a54 <vPortExitCritical+0x50>)
 8006a30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a32:	4b08      	ldr	r3, [pc, #32]	; (8006a54 <vPortExitCritical+0x50>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d105      	bne.n	8006a46 <vPortExitCritical+0x42>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	f383 8811 	msr	BASEPRI, r3
}
 8006a44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a46:	bf00      	nop
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	2000000c 	.word	0x2000000c
	...

08006a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a60:	f3ef 8009 	mrs	r0, PSP
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	4b15      	ldr	r3, [pc, #84]	; (8006ac0 <pxCurrentTCBConst>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	f01e 0f10 	tst.w	lr, #16
 8006a70:	bf08      	it	eq
 8006a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7a:	6010      	str	r0, [r2, #0]
 8006a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a84:	f380 8811 	msr	BASEPRI, r0
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f7fe ffb6 	bl	8005a00 <vTaskSwitchContext>
 8006a94:	f04f 0000 	mov.w	r0, #0
 8006a98:	f380 8811 	msr	BASEPRI, r0
 8006a9c:	bc09      	pop	{r0, r3}
 8006a9e:	6819      	ldr	r1, [r3, #0]
 8006aa0:	6808      	ldr	r0, [r1, #0]
 8006aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa6:	f01e 0f10 	tst.w	lr, #16
 8006aaa:	bf08      	it	eq
 8006aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ab0:	f380 8809 	msr	PSP, r0
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	f3af 8000 	nop.w

08006ac0 <pxCurrentTCBConst>:
 8006ac0:	20000980 	.word	0x20000980
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop

08006ac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	607b      	str	r3, [r7, #4]
}
 8006ae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ae2:	f7fe fed3 	bl	800588c <xTaskIncrementTick>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006aec:	4b06      	ldr	r3, [pc, #24]	; (8006b08 <xPortSysTickHandler+0x40>)
 8006aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006af2:	601a      	str	r2, [r3, #0]
 8006af4:	2300      	movs	r3, #0
 8006af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	f383 8811 	msr	BASEPRI, r3
}
 8006afe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b00:	bf00      	nop
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	e000ed04 	.word	0xe000ed04

08006b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b10:	4b0b      	ldr	r3, [pc, #44]	; (8006b40 <vPortSetupTimerInterrupt+0x34>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b16:	4b0b      	ldr	r3, [pc, #44]	; (8006b44 <vPortSetupTimerInterrupt+0x38>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b1c:	4b0a      	ldr	r3, [pc, #40]	; (8006b48 <vPortSetupTimerInterrupt+0x3c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a0a      	ldr	r2, [pc, #40]	; (8006b4c <vPortSetupTimerInterrupt+0x40>)
 8006b22:	fba2 2303 	umull	r2, r3, r2, r3
 8006b26:	099b      	lsrs	r3, r3, #6
 8006b28:	4a09      	ldr	r2, [pc, #36]	; (8006b50 <vPortSetupTimerInterrupt+0x44>)
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b2e:	4b04      	ldr	r3, [pc, #16]	; (8006b40 <vPortSetupTimerInterrupt+0x34>)
 8006b30:	2207      	movs	r2, #7
 8006b32:	601a      	str	r2, [r3, #0]
}
 8006b34:	bf00      	nop
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	e000e010 	.word	0xe000e010
 8006b44:	e000e018 	.word	0xe000e018
 8006b48:	20000000 	.word	0x20000000
 8006b4c:	10624dd3 	.word	0x10624dd3
 8006b50:	e000e014 	.word	0xe000e014

08006b54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b64 <vPortEnableVFP+0x10>
 8006b58:	6801      	ldr	r1, [r0, #0]
 8006b5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b5e:	6001      	str	r1, [r0, #0]
 8006b60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b62:	bf00      	nop
 8006b64:	e000ed88 	.word	0xe000ed88

08006b68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b6e:	f3ef 8305 	mrs	r3, IPSR
 8006b72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2b0f      	cmp	r3, #15
 8006b78:	d914      	bls.n	8006ba4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b7a:	4a17      	ldr	r2, [pc, #92]	; (8006bd8 <vPortValidateInterruptPriority+0x70>)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4413      	add	r3, r2
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b84:	4b15      	ldr	r3, [pc, #84]	; (8006bdc <vPortValidateInterruptPriority+0x74>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	7afa      	ldrb	r2, [r7, #11]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d20a      	bcs.n	8006ba4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	607b      	str	r3, [r7, #4]
}
 8006ba0:	bf00      	nop
 8006ba2:	e7fe      	b.n	8006ba2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ba4:	4b0e      	ldr	r3, [pc, #56]	; (8006be0 <vPortValidateInterruptPriority+0x78>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bac:	4b0d      	ldr	r3, [pc, #52]	; (8006be4 <vPortValidateInterruptPriority+0x7c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d90a      	bls.n	8006bca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	603b      	str	r3, [r7, #0]
}
 8006bc6:	bf00      	nop
 8006bc8:	e7fe      	b.n	8006bc8 <vPortValidateInterruptPriority+0x60>
	}
 8006bca:	bf00      	nop
 8006bcc:	3714      	adds	r7, #20
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr
 8006bd6:	bf00      	nop
 8006bd8:	e000e3f0 	.word	0xe000e3f0
 8006bdc:	20000fac 	.word	0x20000fac
 8006be0:	e000ed0c 	.word	0xe000ed0c
 8006be4:	20000fb0 	.word	0x20000fb0

08006be8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b08a      	sub	sp, #40	; 0x28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006bf4:	f7fe fd8e 	bl	8005714 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bf8:	4b5b      	ldr	r3, [pc, #364]	; (8006d68 <pvPortMalloc+0x180>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c00:	f000 f920 	bl	8006e44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c04:	4b59      	ldr	r3, [pc, #356]	; (8006d6c <pvPortMalloc+0x184>)
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f040 8093 	bne.w	8006d38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d01d      	beq.n	8006c54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c18:	2208      	movs	r2, #8
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f003 0307 	and.w	r3, r3, #7
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d014      	beq.n	8006c54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f023 0307 	bic.w	r3, r3, #7
 8006c30:	3308      	adds	r3, #8
 8006c32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00a      	beq.n	8006c54 <pvPortMalloc+0x6c>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	617b      	str	r3, [r7, #20]
}
 8006c50:	bf00      	nop
 8006c52:	e7fe      	b.n	8006c52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d06e      	beq.n	8006d38 <pvPortMalloc+0x150>
 8006c5a:	4b45      	ldr	r3, [pc, #276]	; (8006d70 <pvPortMalloc+0x188>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d869      	bhi.n	8006d38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c64:	4b43      	ldr	r3, [pc, #268]	; (8006d74 <pvPortMalloc+0x18c>)
 8006c66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c68:	4b42      	ldr	r3, [pc, #264]	; (8006d74 <pvPortMalloc+0x18c>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c6e:	e004      	b.n	8006c7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d903      	bls.n	8006c8c <pvPortMalloc+0xa4>
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1f1      	bne.n	8006c70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c8c:	4b36      	ldr	r3, [pc, #216]	; (8006d68 <pvPortMalloc+0x180>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d050      	beq.n	8006d38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2208      	movs	r2, #8
 8006c9c:	4413      	add	r3, r2
 8006c9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	681a      	ldr	r2, [r3, #0]
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	1ad2      	subs	r2, r2, r3
 8006cb0:	2308      	movs	r3, #8
 8006cb2:	005b      	lsls	r3, r3, #1
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d91f      	bls.n	8006cf8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00a      	beq.n	8006ce0 <pvPortMalloc+0xf8>
	__asm volatile
 8006cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cce:	f383 8811 	msr	BASEPRI, r3
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	613b      	str	r3, [r7, #16]
}
 8006cdc:	bf00      	nop
 8006cde:	e7fe      	b.n	8006cde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	1ad2      	subs	r2, r2, r3
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cf2:	69b8      	ldr	r0, [r7, #24]
 8006cf4:	f000 f908 	bl	8006f08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cf8:	4b1d      	ldr	r3, [pc, #116]	; (8006d70 <pvPortMalloc+0x188>)
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	4a1b      	ldr	r2, [pc, #108]	; (8006d70 <pvPortMalloc+0x188>)
 8006d04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d06:	4b1a      	ldr	r3, [pc, #104]	; (8006d70 <pvPortMalloc+0x188>)
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	4b1b      	ldr	r3, [pc, #108]	; (8006d78 <pvPortMalloc+0x190>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d203      	bcs.n	8006d1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d12:	4b17      	ldr	r3, [pc, #92]	; (8006d70 <pvPortMalloc+0x188>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a18      	ldr	r2, [pc, #96]	; (8006d78 <pvPortMalloc+0x190>)
 8006d18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	4b13      	ldr	r3, [pc, #76]	; (8006d6c <pvPortMalloc+0x184>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	431a      	orrs	r2, r3
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d2e:	4b13      	ldr	r3, [pc, #76]	; (8006d7c <pvPortMalloc+0x194>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	3301      	adds	r3, #1
 8006d34:	4a11      	ldr	r2, [pc, #68]	; (8006d7c <pvPortMalloc+0x194>)
 8006d36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d38:	f7fe fcfa 	bl	8005730 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	f003 0307 	and.w	r3, r3, #7
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00a      	beq.n	8006d5c <pvPortMalloc+0x174>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	60fb      	str	r3, [r7, #12]
}
 8006d58:	bf00      	nop
 8006d5a:	e7fe      	b.n	8006d5a <pvPortMalloc+0x172>
	return pvReturn;
 8006d5c:	69fb      	ldr	r3, [r7, #28]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3728      	adds	r7, #40	; 0x28
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20004bbc 	.word	0x20004bbc
 8006d6c:	20004bd0 	.word	0x20004bd0
 8006d70:	20004bc0 	.word	0x20004bc0
 8006d74:	20004bb4 	.word	0x20004bb4
 8006d78:	20004bc4 	.word	0x20004bc4
 8006d7c:	20004bc8 	.word	0x20004bc8

08006d80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d04d      	beq.n	8006e2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d92:	2308      	movs	r3, #8
 8006d94:	425b      	negs	r3, r3
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	4413      	add	r3, r2
 8006d9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	4b24      	ldr	r3, [pc, #144]	; (8006e38 <vPortFree+0xb8>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4013      	ands	r3, r2
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d10a      	bne.n	8006dc4 <vPortFree+0x44>
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	60fb      	str	r3, [r7, #12]
}
 8006dc0:	bf00      	nop
 8006dc2:	e7fe      	b.n	8006dc2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00a      	beq.n	8006de2 <vPortFree+0x62>
	__asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	60bb      	str	r3, [r7, #8]
}
 8006dde:	bf00      	nop
 8006de0:	e7fe      	b.n	8006de0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	4b14      	ldr	r3, [pc, #80]	; (8006e38 <vPortFree+0xb8>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4013      	ands	r3, r2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d01e      	beq.n	8006e2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d11a      	bne.n	8006e2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	685a      	ldr	r2, [r3, #4]
 8006dfc:	4b0e      	ldr	r3, [pc, #56]	; (8006e38 <vPortFree+0xb8>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	43db      	mvns	r3, r3
 8006e02:	401a      	ands	r2, r3
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e08:	f7fe fc84 	bl	8005714 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <vPortFree+0xbc>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4413      	add	r3, r2
 8006e16:	4a09      	ldr	r2, [pc, #36]	; (8006e3c <vPortFree+0xbc>)
 8006e18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e1a:	6938      	ldr	r0, [r7, #16]
 8006e1c:	f000 f874 	bl	8006f08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e20:	4b07      	ldr	r3, [pc, #28]	; (8006e40 <vPortFree+0xc0>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3301      	adds	r3, #1
 8006e26:	4a06      	ldr	r2, [pc, #24]	; (8006e40 <vPortFree+0xc0>)
 8006e28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e2a:	f7fe fc81 	bl	8005730 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e2e:	bf00      	nop
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20004bd0 	.word	0x20004bd0
 8006e3c:	20004bc0 	.word	0x20004bc0
 8006e40:	20004bcc 	.word	0x20004bcc

08006e44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e50:	4b27      	ldr	r3, [pc, #156]	; (8006ef0 <prvHeapInit+0xac>)
 8006e52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00c      	beq.n	8006e78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	3307      	adds	r3, #7
 8006e62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0307 	bic.w	r3, r3, #7
 8006e6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	4a1f      	ldr	r2, [pc, #124]	; (8006ef0 <prvHeapInit+0xac>)
 8006e74:	4413      	add	r3, r2
 8006e76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e7c:	4a1d      	ldr	r2, [pc, #116]	; (8006ef4 <prvHeapInit+0xb0>)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e82:	4b1c      	ldr	r3, [pc, #112]	; (8006ef4 <prvHeapInit+0xb0>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e90:	2208      	movs	r2, #8
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	1a9b      	subs	r3, r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0307 	bic.w	r3, r3, #7
 8006e9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4a15      	ldr	r2, [pc, #84]	; (8006ef8 <prvHeapInit+0xb4>)
 8006ea4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ea6:	4b14      	ldr	r3, [pc, #80]	; (8006ef8 <prvHeapInit+0xb4>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006eae:	4b12      	ldr	r3, [pc, #72]	; (8006ef8 <prvHeapInit+0xb4>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	1ad2      	subs	r2, r2, r3
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ec4:	4b0c      	ldr	r3, [pc, #48]	; (8006ef8 <prvHeapInit+0xb4>)
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	4a0a      	ldr	r2, [pc, #40]	; (8006efc <prvHeapInit+0xb8>)
 8006ed2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	4a09      	ldr	r2, [pc, #36]	; (8006f00 <prvHeapInit+0xbc>)
 8006eda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006edc:	4b09      	ldr	r3, [pc, #36]	; (8006f04 <prvHeapInit+0xc0>)
 8006ede:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ee2:	601a      	str	r2, [r3, #0]
}
 8006ee4:	bf00      	nop
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	20000fb4 	.word	0x20000fb4
 8006ef4:	20004bb4 	.word	0x20004bb4
 8006ef8:	20004bbc 	.word	0x20004bbc
 8006efc:	20004bc4 	.word	0x20004bc4
 8006f00:	20004bc0 	.word	0x20004bc0
 8006f04:	20004bd0 	.word	0x20004bd0

08006f08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f10:	4b28      	ldr	r3, [pc, #160]	; (8006fb4 <prvInsertBlockIntoFreeList+0xac>)
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	e002      	b.n	8006f1c <prvInsertBlockIntoFreeList+0x14>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d8f7      	bhi.n	8006f16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	4413      	add	r3, r2
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d108      	bne.n	8006f4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	441a      	add	r2, r3
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	441a      	add	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d118      	bne.n	8006f90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4b15      	ldr	r3, [pc, #84]	; (8006fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d00d      	beq.n	8006f86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	441a      	add	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	e008      	b.n	8006f98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f86:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <prvInsertBlockIntoFreeList+0xb0>)
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	e003      	b.n	8006f98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d002      	beq.n	8006fa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fa6:	bf00      	nop
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	20004bb4 	.word	0x20004bb4
 8006fb8:	20004bbc 	.word	0x20004bbc

08006fbc <__errno>:
 8006fbc:	4b01      	ldr	r3, [pc, #4]	; (8006fc4 <__errno+0x8>)
 8006fbe:	6818      	ldr	r0, [r3, #0]
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	20000010 	.word	0x20000010

08006fc8 <std>:
 8006fc8:	2300      	movs	r3, #0
 8006fca:	b510      	push	{r4, lr}
 8006fcc:	4604      	mov	r4, r0
 8006fce:	e9c0 3300 	strd	r3, r3, [r0]
 8006fd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fd6:	6083      	str	r3, [r0, #8]
 8006fd8:	8181      	strh	r1, [r0, #12]
 8006fda:	6643      	str	r3, [r0, #100]	; 0x64
 8006fdc:	81c2      	strh	r2, [r0, #14]
 8006fde:	6183      	str	r3, [r0, #24]
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	2208      	movs	r2, #8
 8006fe4:	305c      	adds	r0, #92	; 0x5c
 8006fe6:	f000 f923 	bl	8007230 <memset>
 8006fea:	4b05      	ldr	r3, [pc, #20]	; (8007000 <std+0x38>)
 8006fec:	6263      	str	r3, [r4, #36]	; 0x24
 8006fee:	4b05      	ldr	r3, [pc, #20]	; (8007004 <std+0x3c>)
 8006ff0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ff2:	4b05      	ldr	r3, [pc, #20]	; (8007008 <std+0x40>)
 8006ff4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ff6:	4b05      	ldr	r3, [pc, #20]	; (800700c <std+0x44>)
 8006ff8:	6224      	str	r4, [r4, #32]
 8006ffa:	6323      	str	r3, [r4, #48]	; 0x30
 8006ffc:	bd10      	pop	{r4, pc}
 8006ffe:	bf00      	nop
 8007000:	08007d9d 	.word	0x08007d9d
 8007004:	08007dbf 	.word	0x08007dbf
 8007008:	08007df7 	.word	0x08007df7
 800700c:	08007e1b 	.word	0x08007e1b

08007010 <_cleanup_r>:
 8007010:	4901      	ldr	r1, [pc, #4]	; (8007018 <_cleanup_r+0x8>)
 8007012:	f000 b8af 	b.w	8007174 <_fwalk_reent>
 8007016:	bf00      	nop
 8007018:	08008c65 	.word	0x08008c65

0800701c <__sfmoreglue>:
 800701c:	b570      	push	{r4, r5, r6, lr}
 800701e:	1e4a      	subs	r2, r1, #1
 8007020:	2568      	movs	r5, #104	; 0x68
 8007022:	4355      	muls	r5, r2
 8007024:	460e      	mov	r6, r1
 8007026:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800702a:	f000 f959 	bl	80072e0 <_malloc_r>
 800702e:	4604      	mov	r4, r0
 8007030:	b140      	cbz	r0, 8007044 <__sfmoreglue+0x28>
 8007032:	2100      	movs	r1, #0
 8007034:	e9c0 1600 	strd	r1, r6, [r0]
 8007038:	300c      	adds	r0, #12
 800703a:	60a0      	str	r0, [r4, #8]
 800703c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007040:	f000 f8f6 	bl	8007230 <memset>
 8007044:	4620      	mov	r0, r4
 8007046:	bd70      	pop	{r4, r5, r6, pc}

08007048 <__sfp_lock_acquire>:
 8007048:	4801      	ldr	r0, [pc, #4]	; (8007050 <__sfp_lock_acquire+0x8>)
 800704a:	f000 b8d8 	b.w	80071fe <__retarget_lock_acquire_recursive>
 800704e:	bf00      	nop
 8007050:	20006b64 	.word	0x20006b64

08007054 <__sfp_lock_release>:
 8007054:	4801      	ldr	r0, [pc, #4]	; (800705c <__sfp_lock_release+0x8>)
 8007056:	f000 b8d3 	b.w	8007200 <__retarget_lock_release_recursive>
 800705a:	bf00      	nop
 800705c:	20006b64 	.word	0x20006b64

08007060 <__sinit_lock_acquire>:
 8007060:	4801      	ldr	r0, [pc, #4]	; (8007068 <__sinit_lock_acquire+0x8>)
 8007062:	f000 b8cc 	b.w	80071fe <__retarget_lock_acquire_recursive>
 8007066:	bf00      	nop
 8007068:	20006b5f 	.word	0x20006b5f

0800706c <__sinit_lock_release>:
 800706c:	4801      	ldr	r0, [pc, #4]	; (8007074 <__sinit_lock_release+0x8>)
 800706e:	f000 b8c7 	b.w	8007200 <__retarget_lock_release_recursive>
 8007072:	bf00      	nop
 8007074:	20006b5f 	.word	0x20006b5f

08007078 <__sinit>:
 8007078:	b510      	push	{r4, lr}
 800707a:	4604      	mov	r4, r0
 800707c:	f7ff fff0 	bl	8007060 <__sinit_lock_acquire>
 8007080:	69a3      	ldr	r3, [r4, #24]
 8007082:	b11b      	cbz	r3, 800708c <__sinit+0x14>
 8007084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007088:	f7ff bff0 	b.w	800706c <__sinit_lock_release>
 800708c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007090:	6523      	str	r3, [r4, #80]	; 0x50
 8007092:	4b13      	ldr	r3, [pc, #76]	; (80070e0 <__sinit+0x68>)
 8007094:	4a13      	ldr	r2, [pc, #76]	; (80070e4 <__sinit+0x6c>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	62a2      	str	r2, [r4, #40]	; 0x28
 800709a:	42a3      	cmp	r3, r4
 800709c:	bf04      	itt	eq
 800709e:	2301      	moveq	r3, #1
 80070a0:	61a3      	streq	r3, [r4, #24]
 80070a2:	4620      	mov	r0, r4
 80070a4:	f000 f820 	bl	80070e8 <__sfp>
 80070a8:	6060      	str	r0, [r4, #4]
 80070aa:	4620      	mov	r0, r4
 80070ac:	f000 f81c 	bl	80070e8 <__sfp>
 80070b0:	60a0      	str	r0, [r4, #8]
 80070b2:	4620      	mov	r0, r4
 80070b4:	f000 f818 	bl	80070e8 <__sfp>
 80070b8:	2200      	movs	r2, #0
 80070ba:	60e0      	str	r0, [r4, #12]
 80070bc:	2104      	movs	r1, #4
 80070be:	6860      	ldr	r0, [r4, #4]
 80070c0:	f7ff ff82 	bl	8006fc8 <std>
 80070c4:	68a0      	ldr	r0, [r4, #8]
 80070c6:	2201      	movs	r2, #1
 80070c8:	2109      	movs	r1, #9
 80070ca:	f7ff ff7d 	bl	8006fc8 <std>
 80070ce:	68e0      	ldr	r0, [r4, #12]
 80070d0:	2202      	movs	r2, #2
 80070d2:	2112      	movs	r1, #18
 80070d4:	f7ff ff78 	bl	8006fc8 <std>
 80070d8:	2301      	movs	r3, #1
 80070da:	61a3      	str	r3, [r4, #24]
 80070dc:	e7d2      	b.n	8007084 <__sinit+0xc>
 80070de:	bf00      	nop
 80070e0:	0800a038 	.word	0x0800a038
 80070e4:	08007011 	.word	0x08007011

080070e8 <__sfp>:
 80070e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ea:	4607      	mov	r7, r0
 80070ec:	f7ff ffac 	bl	8007048 <__sfp_lock_acquire>
 80070f0:	4b1e      	ldr	r3, [pc, #120]	; (800716c <__sfp+0x84>)
 80070f2:	681e      	ldr	r6, [r3, #0]
 80070f4:	69b3      	ldr	r3, [r6, #24]
 80070f6:	b913      	cbnz	r3, 80070fe <__sfp+0x16>
 80070f8:	4630      	mov	r0, r6
 80070fa:	f7ff ffbd 	bl	8007078 <__sinit>
 80070fe:	3648      	adds	r6, #72	; 0x48
 8007100:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007104:	3b01      	subs	r3, #1
 8007106:	d503      	bpl.n	8007110 <__sfp+0x28>
 8007108:	6833      	ldr	r3, [r6, #0]
 800710a:	b30b      	cbz	r3, 8007150 <__sfp+0x68>
 800710c:	6836      	ldr	r6, [r6, #0]
 800710e:	e7f7      	b.n	8007100 <__sfp+0x18>
 8007110:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007114:	b9d5      	cbnz	r5, 800714c <__sfp+0x64>
 8007116:	4b16      	ldr	r3, [pc, #88]	; (8007170 <__sfp+0x88>)
 8007118:	60e3      	str	r3, [r4, #12]
 800711a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800711e:	6665      	str	r5, [r4, #100]	; 0x64
 8007120:	f000 f86c 	bl	80071fc <__retarget_lock_init_recursive>
 8007124:	f7ff ff96 	bl	8007054 <__sfp_lock_release>
 8007128:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800712c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007130:	6025      	str	r5, [r4, #0]
 8007132:	61a5      	str	r5, [r4, #24]
 8007134:	2208      	movs	r2, #8
 8007136:	4629      	mov	r1, r5
 8007138:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800713c:	f000 f878 	bl	8007230 <memset>
 8007140:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007144:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007148:	4620      	mov	r0, r4
 800714a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800714c:	3468      	adds	r4, #104	; 0x68
 800714e:	e7d9      	b.n	8007104 <__sfp+0x1c>
 8007150:	2104      	movs	r1, #4
 8007152:	4638      	mov	r0, r7
 8007154:	f7ff ff62 	bl	800701c <__sfmoreglue>
 8007158:	4604      	mov	r4, r0
 800715a:	6030      	str	r0, [r6, #0]
 800715c:	2800      	cmp	r0, #0
 800715e:	d1d5      	bne.n	800710c <__sfp+0x24>
 8007160:	f7ff ff78 	bl	8007054 <__sfp_lock_release>
 8007164:	230c      	movs	r3, #12
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	e7ee      	b.n	8007148 <__sfp+0x60>
 800716a:	bf00      	nop
 800716c:	0800a038 	.word	0x0800a038
 8007170:	ffff0001 	.word	0xffff0001

08007174 <_fwalk_reent>:
 8007174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007178:	4606      	mov	r6, r0
 800717a:	4688      	mov	r8, r1
 800717c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007180:	2700      	movs	r7, #0
 8007182:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007186:	f1b9 0901 	subs.w	r9, r9, #1
 800718a:	d505      	bpl.n	8007198 <_fwalk_reent+0x24>
 800718c:	6824      	ldr	r4, [r4, #0]
 800718e:	2c00      	cmp	r4, #0
 8007190:	d1f7      	bne.n	8007182 <_fwalk_reent+0xe>
 8007192:	4638      	mov	r0, r7
 8007194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007198:	89ab      	ldrh	r3, [r5, #12]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d907      	bls.n	80071ae <_fwalk_reent+0x3a>
 800719e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071a2:	3301      	adds	r3, #1
 80071a4:	d003      	beq.n	80071ae <_fwalk_reent+0x3a>
 80071a6:	4629      	mov	r1, r5
 80071a8:	4630      	mov	r0, r6
 80071aa:	47c0      	blx	r8
 80071ac:	4307      	orrs	r7, r0
 80071ae:	3568      	adds	r5, #104	; 0x68
 80071b0:	e7e9      	b.n	8007186 <_fwalk_reent+0x12>
	...

080071b4 <__libc_init_array>:
 80071b4:	b570      	push	{r4, r5, r6, lr}
 80071b6:	4d0d      	ldr	r5, [pc, #52]	; (80071ec <__libc_init_array+0x38>)
 80071b8:	4c0d      	ldr	r4, [pc, #52]	; (80071f0 <__libc_init_array+0x3c>)
 80071ba:	1b64      	subs	r4, r4, r5
 80071bc:	10a4      	asrs	r4, r4, #2
 80071be:	2600      	movs	r6, #0
 80071c0:	42a6      	cmp	r6, r4
 80071c2:	d109      	bne.n	80071d8 <__libc_init_array+0x24>
 80071c4:	4d0b      	ldr	r5, [pc, #44]	; (80071f4 <__libc_init_array+0x40>)
 80071c6:	4c0c      	ldr	r4, [pc, #48]	; (80071f8 <__libc_init_array+0x44>)
 80071c8:	f002 fe28 	bl	8009e1c <_init>
 80071cc:	1b64      	subs	r4, r4, r5
 80071ce:	10a4      	asrs	r4, r4, #2
 80071d0:	2600      	movs	r6, #0
 80071d2:	42a6      	cmp	r6, r4
 80071d4:	d105      	bne.n	80071e2 <__libc_init_array+0x2e>
 80071d6:	bd70      	pop	{r4, r5, r6, pc}
 80071d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071dc:	4798      	blx	r3
 80071de:	3601      	adds	r6, #1
 80071e0:	e7ee      	b.n	80071c0 <__libc_init_array+0xc>
 80071e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071e6:	4798      	blx	r3
 80071e8:	3601      	adds	r6, #1
 80071ea:	e7f2      	b.n	80071d2 <__libc_init_array+0x1e>
 80071ec:	0800a3c4 	.word	0x0800a3c4
 80071f0:	0800a3c4 	.word	0x0800a3c4
 80071f4:	0800a3c4 	.word	0x0800a3c4
 80071f8:	0800a3c8 	.word	0x0800a3c8

080071fc <__retarget_lock_init_recursive>:
 80071fc:	4770      	bx	lr

080071fe <__retarget_lock_acquire_recursive>:
 80071fe:	4770      	bx	lr

08007200 <__retarget_lock_release_recursive>:
 8007200:	4770      	bx	lr
	...

08007204 <malloc>:
 8007204:	4b02      	ldr	r3, [pc, #8]	; (8007210 <malloc+0xc>)
 8007206:	4601      	mov	r1, r0
 8007208:	6818      	ldr	r0, [r3, #0]
 800720a:	f000 b869 	b.w	80072e0 <_malloc_r>
 800720e:	bf00      	nop
 8007210:	20000010 	.word	0x20000010

08007214 <memcpy>:
 8007214:	440a      	add	r2, r1
 8007216:	4291      	cmp	r1, r2
 8007218:	f100 33ff 	add.w	r3, r0, #4294967295
 800721c:	d100      	bne.n	8007220 <memcpy+0xc>
 800721e:	4770      	bx	lr
 8007220:	b510      	push	{r4, lr}
 8007222:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007226:	f803 4f01 	strb.w	r4, [r3, #1]!
 800722a:	4291      	cmp	r1, r2
 800722c:	d1f9      	bne.n	8007222 <memcpy+0xe>
 800722e:	bd10      	pop	{r4, pc}

08007230 <memset>:
 8007230:	4402      	add	r2, r0
 8007232:	4603      	mov	r3, r0
 8007234:	4293      	cmp	r3, r2
 8007236:	d100      	bne.n	800723a <memset+0xa>
 8007238:	4770      	bx	lr
 800723a:	f803 1b01 	strb.w	r1, [r3], #1
 800723e:	e7f9      	b.n	8007234 <memset+0x4>

08007240 <_free_r>:
 8007240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007242:	2900      	cmp	r1, #0
 8007244:	d048      	beq.n	80072d8 <_free_r+0x98>
 8007246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800724a:	9001      	str	r0, [sp, #4]
 800724c:	2b00      	cmp	r3, #0
 800724e:	f1a1 0404 	sub.w	r4, r1, #4
 8007252:	bfb8      	it	lt
 8007254:	18e4      	addlt	r4, r4, r3
 8007256:	f001 fd57 	bl	8008d08 <__malloc_lock>
 800725a:	4a20      	ldr	r2, [pc, #128]	; (80072dc <_free_r+0x9c>)
 800725c:	9801      	ldr	r0, [sp, #4]
 800725e:	6813      	ldr	r3, [r2, #0]
 8007260:	4615      	mov	r5, r2
 8007262:	b933      	cbnz	r3, 8007272 <_free_r+0x32>
 8007264:	6063      	str	r3, [r4, #4]
 8007266:	6014      	str	r4, [r2, #0]
 8007268:	b003      	add	sp, #12
 800726a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800726e:	f001 bd51 	b.w	8008d14 <__malloc_unlock>
 8007272:	42a3      	cmp	r3, r4
 8007274:	d90b      	bls.n	800728e <_free_r+0x4e>
 8007276:	6821      	ldr	r1, [r4, #0]
 8007278:	1862      	adds	r2, r4, r1
 800727a:	4293      	cmp	r3, r2
 800727c:	bf04      	itt	eq
 800727e:	681a      	ldreq	r2, [r3, #0]
 8007280:	685b      	ldreq	r3, [r3, #4]
 8007282:	6063      	str	r3, [r4, #4]
 8007284:	bf04      	itt	eq
 8007286:	1852      	addeq	r2, r2, r1
 8007288:	6022      	streq	r2, [r4, #0]
 800728a:	602c      	str	r4, [r5, #0]
 800728c:	e7ec      	b.n	8007268 <_free_r+0x28>
 800728e:	461a      	mov	r2, r3
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	b10b      	cbz	r3, 8007298 <_free_r+0x58>
 8007294:	42a3      	cmp	r3, r4
 8007296:	d9fa      	bls.n	800728e <_free_r+0x4e>
 8007298:	6811      	ldr	r1, [r2, #0]
 800729a:	1855      	adds	r5, r2, r1
 800729c:	42a5      	cmp	r5, r4
 800729e:	d10b      	bne.n	80072b8 <_free_r+0x78>
 80072a0:	6824      	ldr	r4, [r4, #0]
 80072a2:	4421      	add	r1, r4
 80072a4:	1854      	adds	r4, r2, r1
 80072a6:	42a3      	cmp	r3, r4
 80072a8:	6011      	str	r1, [r2, #0]
 80072aa:	d1dd      	bne.n	8007268 <_free_r+0x28>
 80072ac:	681c      	ldr	r4, [r3, #0]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	6053      	str	r3, [r2, #4]
 80072b2:	4421      	add	r1, r4
 80072b4:	6011      	str	r1, [r2, #0]
 80072b6:	e7d7      	b.n	8007268 <_free_r+0x28>
 80072b8:	d902      	bls.n	80072c0 <_free_r+0x80>
 80072ba:	230c      	movs	r3, #12
 80072bc:	6003      	str	r3, [r0, #0]
 80072be:	e7d3      	b.n	8007268 <_free_r+0x28>
 80072c0:	6825      	ldr	r5, [r4, #0]
 80072c2:	1961      	adds	r1, r4, r5
 80072c4:	428b      	cmp	r3, r1
 80072c6:	bf04      	itt	eq
 80072c8:	6819      	ldreq	r1, [r3, #0]
 80072ca:	685b      	ldreq	r3, [r3, #4]
 80072cc:	6063      	str	r3, [r4, #4]
 80072ce:	bf04      	itt	eq
 80072d0:	1949      	addeq	r1, r1, r5
 80072d2:	6021      	streq	r1, [r4, #0]
 80072d4:	6054      	str	r4, [r2, #4]
 80072d6:	e7c7      	b.n	8007268 <_free_r+0x28>
 80072d8:	b003      	add	sp, #12
 80072da:	bd30      	pop	{r4, r5, pc}
 80072dc:	20004bd4 	.word	0x20004bd4

080072e0 <_malloc_r>:
 80072e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e2:	1ccd      	adds	r5, r1, #3
 80072e4:	f025 0503 	bic.w	r5, r5, #3
 80072e8:	3508      	adds	r5, #8
 80072ea:	2d0c      	cmp	r5, #12
 80072ec:	bf38      	it	cc
 80072ee:	250c      	movcc	r5, #12
 80072f0:	2d00      	cmp	r5, #0
 80072f2:	4606      	mov	r6, r0
 80072f4:	db01      	blt.n	80072fa <_malloc_r+0x1a>
 80072f6:	42a9      	cmp	r1, r5
 80072f8:	d903      	bls.n	8007302 <_malloc_r+0x22>
 80072fa:	230c      	movs	r3, #12
 80072fc:	6033      	str	r3, [r6, #0]
 80072fe:	2000      	movs	r0, #0
 8007300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007302:	f001 fd01 	bl	8008d08 <__malloc_lock>
 8007306:	4921      	ldr	r1, [pc, #132]	; (800738c <_malloc_r+0xac>)
 8007308:	680a      	ldr	r2, [r1, #0]
 800730a:	4614      	mov	r4, r2
 800730c:	b99c      	cbnz	r4, 8007336 <_malloc_r+0x56>
 800730e:	4f20      	ldr	r7, [pc, #128]	; (8007390 <_malloc_r+0xb0>)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	b923      	cbnz	r3, 800731e <_malloc_r+0x3e>
 8007314:	4621      	mov	r1, r4
 8007316:	4630      	mov	r0, r6
 8007318:	f000 fd10 	bl	8007d3c <_sbrk_r>
 800731c:	6038      	str	r0, [r7, #0]
 800731e:	4629      	mov	r1, r5
 8007320:	4630      	mov	r0, r6
 8007322:	f000 fd0b 	bl	8007d3c <_sbrk_r>
 8007326:	1c43      	adds	r3, r0, #1
 8007328:	d123      	bne.n	8007372 <_malloc_r+0x92>
 800732a:	230c      	movs	r3, #12
 800732c:	6033      	str	r3, [r6, #0]
 800732e:	4630      	mov	r0, r6
 8007330:	f001 fcf0 	bl	8008d14 <__malloc_unlock>
 8007334:	e7e3      	b.n	80072fe <_malloc_r+0x1e>
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	1b5b      	subs	r3, r3, r5
 800733a:	d417      	bmi.n	800736c <_malloc_r+0x8c>
 800733c:	2b0b      	cmp	r3, #11
 800733e:	d903      	bls.n	8007348 <_malloc_r+0x68>
 8007340:	6023      	str	r3, [r4, #0]
 8007342:	441c      	add	r4, r3
 8007344:	6025      	str	r5, [r4, #0]
 8007346:	e004      	b.n	8007352 <_malloc_r+0x72>
 8007348:	6863      	ldr	r3, [r4, #4]
 800734a:	42a2      	cmp	r2, r4
 800734c:	bf0c      	ite	eq
 800734e:	600b      	streq	r3, [r1, #0]
 8007350:	6053      	strne	r3, [r2, #4]
 8007352:	4630      	mov	r0, r6
 8007354:	f001 fcde 	bl	8008d14 <__malloc_unlock>
 8007358:	f104 000b 	add.w	r0, r4, #11
 800735c:	1d23      	adds	r3, r4, #4
 800735e:	f020 0007 	bic.w	r0, r0, #7
 8007362:	1ac2      	subs	r2, r0, r3
 8007364:	d0cc      	beq.n	8007300 <_malloc_r+0x20>
 8007366:	1a1b      	subs	r3, r3, r0
 8007368:	50a3      	str	r3, [r4, r2]
 800736a:	e7c9      	b.n	8007300 <_malloc_r+0x20>
 800736c:	4622      	mov	r2, r4
 800736e:	6864      	ldr	r4, [r4, #4]
 8007370:	e7cc      	b.n	800730c <_malloc_r+0x2c>
 8007372:	1cc4      	adds	r4, r0, #3
 8007374:	f024 0403 	bic.w	r4, r4, #3
 8007378:	42a0      	cmp	r0, r4
 800737a:	d0e3      	beq.n	8007344 <_malloc_r+0x64>
 800737c:	1a21      	subs	r1, r4, r0
 800737e:	4630      	mov	r0, r6
 8007380:	f000 fcdc 	bl	8007d3c <_sbrk_r>
 8007384:	3001      	adds	r0, #1
 8007386:	d1dd      	bne.n	8007344 <_malloc_r+0x64>
 8007388:	e7cf      	b.n	800732a <_malloc_r+0x4a>
 800738a:	bf00      	nop
 800738c:	20004bd4 	.word	0x20004bd4
 8007390:	20004bd8 	.word	0x20004bd8

08007394 <__cvt>:
 8007394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007398:	ec55 4b10 	vmov	r4, r5, d0
 800739c:	2d00      	cmp	r5, #0
 800739e:	460e      	mov	r6, r1
 80073a0:	4619      	mov	r1, r3
 80073a2:	462b      	mov	r3, r5
 80073a4:	bfbb      	ittet	lt
 80073a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80073aa:	461d      	movlt	r5, r3
 80073ac:	2300      	movge	r3, #0
 80073ae:	232d      	movlt	r3, #45	; 0x2d
 80073b0:	700b      	strb	r3, [r1, #0]
 80073b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80073b8:	4691      	mov	r9, r2
 80073ba:	f023 0820 	bic.w	r8, r3, #32
 80073be:	bfbc      	itt	lt
 80073c0:	4622      	movlt	r2, r4
 80073c2:	4614      	movlt	r4, r2
 80073c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073c8:	d005      	beq.n	80073d6 <__cvt+0x42>
 80073ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80073ce:	d100      	bne.n	80073d2 <__cvt+0x3e>
 80073d0:	3601      	adds	r6, #1
 80073d2:	2102      	movs	r1, #2
 80073d4:	e000      	b.n	80073d8 <__cvt+0x44>
 80073d6:	2103      	movs	r1, #3
 80073d8:	ab03      	add	r3, sp, #12
 80073da:	9301      	str	r3, [sp, #4]
 80073dc:	ab02      	add	r3, sp, #8
 80073de:	9300      	str	r3, [sp, #0]
 80073e0:	ec45 4b10 	vmov	d0, r4, r5
 80073e4:	4653      	mov	r3, sl
 80073e6:	4632      	mov	r2, r6
 80073e8:	f000 fdca 	bl	8007f80 <_dtoa_r>
 80073ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80073f0:	4607      	mov	r7, r0
 80073f2:	d102      	bne.n	80073fa <__cvt+0x66>
 80073f4:	f019 0f01 	tst.w	r9, #1
 80073f8:	d022      	beq.n	8007440 <__cvt+0xac>
 80073fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073fe:	eb07 0906 	add.w	r9, r7, r6
 8007402:	d110      	bne.n	8007426 <__cvt+0x92>
 8007404:	783b      	ldrb	r3, [r7, #0]
 8007406:	2b30      	cmp	r3, #48	; 0x30
 8007408:	d10a      	bne.n	8007420 <__cvt+0x8c>
 800740a:	2200      	movs	r2, #0
 800740c:	2300      	movs	r3, #0
 800740e:	4620      	mov	r0, r4
 8007410:	4629      	mov	r1, r5
 8007412:	f7f9 fb79 	bl	8000b08 <__aeabi_dcmpeq>
 8007416:	b918      	cbnz	r0, 8007420 <__cvt+0x8c>
 8007418:	f1c6 0601 	rsb	r6, r6, #1
 800741c:	f8ca 6000 	str.w	r6, [sl]
 8007420:	f8da 3000 	ldr.w	r3, [sl]
 8007424:	4499      	add	r9, r3
 8007426:	2200      	movs	r2, #0
 8007428:	2300      	movs	r3, #0
 800742a:	4620      	mov	r0, r4
 800742c:	4629      	mov	r1, r5
 800742e:	f7f9 fb6b 	bl	8000b08 <__aeabi_dcmpeq>
 8007432:	b108      	cbz	r0, 8007438 <__cvt+0xa4>
 8007434:	f8cd 900c 	str.w	r9, [sp, #12]
 8007438:	2230      	movs	r2, #48	; 0x30
 800743a:	9b03      	ldr	r3, [sp, #12]
 800743c:	454b      	cmp	r3, r9
 800743e:	d307      	bcc.n	8007450 <__cvt+0xbc>
 8007440:	9b03      	ldr	r3, [sp, #12]
 8007442:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007444:	1bdb      	subs	r3, r3, r7
 8007446:	4638      	mov	r0, r7
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	b004      	add	sp, #16
 800744c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007450:	1c59      	adds	r1, r3, #1
 8007452:	9103      	str	r1, [sp, #12]
 8007454:	701a      	strb	r2, [r3, #0]
 8007456:	e7f0      	b.n	800743a <__cvt+0xa6>

08007458 <__exponent>:
 8007458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800745a:	4603      	mov	r3, r0
 800745c:	2900      	cmp	r1, #0
 800745e:	bfb8      	it	lt
 8007460:	4249      	neglt	r1, r1
 8007462:	f803 2b02 	strb.w	r2, [r3], #2
 8007466:	bfb4      	ite	lt
 8007468:	222d      	movlt	r2, #45	; 0x2d
 800746a:	222b      	movge	r2, #43	; 0x2b
 800746c:	2909      	cmp	r1, #9
 800746e:	7042      	strb	r2, [r0, #1]
 8007470:	dd2a      	ble.n	80074c8 <__exponent+0x70>
 8007472:	f10d 0407 	add.w	r4, sp, #7
 8007476:	46a4      	mov	ip, r4
 8007478:	270a      	movs	r7, #10
 800747a:	46a6      	mov	lr, r4
 800747c:	460a      	mov	r2, r1
 800747e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007482:	fb07 1516 	mls	r5, r7, r6, r1
 8007486:	3530      	adds	r5, #48	; 0x30
 8007488:	2a63      	cmp	r2, #99	; 0x63
 800748a:	f104 34ff 	add.w	r4, r4, #4294967295
 800748e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007492:	4631      	mov	r1, r6
 8007494:	dcf1      	bgt.n	800747a <__exponent+0x22>
 8007496:	3130      	adds	r1, #48	; 0x30
 8007498:	f1ae 0502 	sub.w	r5, lr, #2
 800749c:	f804 1c01 	strb.w	r1, [r4, #-1]
 80074a0:	1c44      	adds	r4, r0, #1
 80074a2:	4629      	mov	r1, r5
 80074a4:	4561      	cmp	r1, ip
 80074a6:	d30a      	bcc.n	80074be <__exponent+0x66>
 80074a8:	f10d 0209 	add.w	r2, sp, #9
 80074ac:	eba2 020e 	sub.w	r2, r2, lr
 80074b0:	4565      	cmp	r5, ip
 80074b2:	bf88      	it	hi
 80074b4:	2200      	movhi	r2, #0
 80074b6:	4413      	add	r3, r2
 80074b8:	1a18      	subs	r0, r3, r0
 80074ba:	b003      	add	sp, #12
 80074bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80074c6:	e7ed      	b.n	80074a4 <__exponent+0x4c>
 80074c8:	2330      	movs	r3, #48	; 0x30
 80074ca:	3130      	adds	r1, #48	; 0x30
 80074cc:	7083      	strb	r3, [r0, #2]
 80074ce:	70c1      	strb	r1, [r0, #3]
 80074d0:	1d03      	adds	r3, r0, #4
 80074d2:	e7f1      	b.n	80074b8 <__exponent+0x60>

080074d4 <_printf_float>:
 80074d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d8:	ed2d 8b02 	vpush	{d8}
 80074dc:	b08d      	sub	sp, #52	; 0x34
 80074de:	460c      	mov	r4, r1
 80074e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80074e4:	4616      	mov	r6, r2
 80074e6:	461f      	mov	r7, r3
 80074e8:	4605      	mov	r5, r0
 80074ea:	f001 fbf7 	bl	8008cdc <_localeconv_r>
 80074ee:	f8d0 a000 	ldr.w	sl, [r0]
 80074f2:	4650      	mov	r0, sl
 80074f4:	f7f8 fe8c 	bl	8000210 <strlen>
 80074f8:	2300      	movs	r3, #0
 80074fa:	930a      	str	r3, [sp, #40]	; 0x28
 80074fc:	6823      	ldr	r3, [r4, #0]
 80074fe:	9305      	str	r3, [sp, #20]
 8007500:	f8d8 3000 	ldr.w	r3, [r8]
 8007504:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007508:	3307      	adds	r3, #7
 800750a:	f023 0307 	bic.w	r3, r3, #7
 800750e:	f103 0208 	add.w	r2, r3, #8
 8007512:	f8c8 2000 	str.w	r2, [r8]
 8007516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800751e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007522:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007526:	9307      	str	r3, [sp, #28]
 8007528:	f8cd 8018 	str.w	r8, [sp, #24]
 800752c:	ee08 0a10 	vmov	s16, r0
 8007530:	4b9f      	ldr	r3, [pc, #636]	; (80077b0 <_printf_float+0x2dc>)
 8007532:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007536:	f04f 32ff 	mov.w	r2, #4294967295
 800753a:	f7f9 fb17 	bl	8000b6c <__aeabi_dcmpun>
 800753e:	bb88      	cbnz	r0, 80075a4 <_printf_float+0xd0>
 8007540:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007544:	4b9a      	ldr	r3, [pc, #616]	; (80077b0 <_printf_float+0x2dc>)
 8007546:	f04f 32ff 	mov.w	r2, #4294967295
 800754a:	f7f9 faf1 	bl	8000b30 <__aeabi_dcmple>
 800754e:	bb48      	cbnz	r0, 80075a4 <_printf_float+0xd0>
 8007550:	2200      	movs	r2, #0
 8007552:	2300      	movs	r3, #0
 8007554:	4640      	mov	r0, r8
 8007556:	4649      	mov	r1, r9
 8007558:	f7f9 fae0 	bl	8000b1c <__aeabi_dcmplt>
 800755c:	b110      	cbz	r0, 8007564 <_printf_float+0x90>
 800755e:	232d      	movs	r3, #45	; 0x2d
 8007560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007564:	4b93      	ldr	r3, [pc, #588]	; (80077b4 <_printf_float+0x2e0>)
 8007566:	4894      	ldr	r0, [pc, #592]	; (80077b8 <_printf_float+0x2e4>)
 8007568:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800756c:	bf94      	ite	ls
 800756e:	4698      	movls	r8, r3
 8007570:	4680      	movhi	r8, r0
 8007572:	2303      	movs	r3, #3
 8007574:	6123      	str	r3, [r4, #16]
 8007576:	9b05      	ldr	r3, [sp, #20]
 8007578:	f023 0204 	bic.w	r2, r3, #4
 800757c:	6022      	str	r2, [r4, #0]
 800757e:	f04f 0900 	mov.w	r9, #0
 8007582:	9700      	str	r7, [sp, #0]
 8007584:	4633      	mov	r3, r6
 8007586:	aa0b      	add	r2, sp, #44	; 0x2c
 8007588:	4621      	mov	r1, r4
 800758a:	4628      	mov	r0, r5
 800758c:	f000 f9d8 	bl	8007940 <_printf_common>
 8007590:	3001      	adds	r0, #1
 8007592:	f040 8090 	bne.w	80076b6 <_printf_float+0x1e2>
 8007596:	f04f 30ff 	mov.w	r0, #4294967295
 800759a:	b00d      	add	sp, #52	; 0x34
 800759c:	ecbd 8b02 	vpop	{d8}
 80075a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a4:	4642      	mov	r2, r8
 80075a6:	464b      	mov	r3, r9
 80075a8:	4640      	mov	r0, r8
 80075aa:	4649      	mov	r1, r9
 80075ac:	f7f9 fade 	bl	8000b6c <__aeabi_dcmpun>
 80075b0:	b140      	cbz	r0, 80075c4 <_printf_float+0xf0>
 80075b2:	464b      	mov	r3, r9
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	bfbc      	itt	lt
 80075b8:	232d      	movlt	r3, #45	; 0x2d
 80075ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80075be:	487f      	ldr	r0, [pc, #508]	; (80077bc <_printf_float+0x2e8>)
 80075c0:	4b7f      	ldr	r3, [pc, #508]	; (80077c0 <_printf_float+0x2ec>)
 80075c2:	e7d1      	b.n	8007568 <_printf_float+0x94>
 80075c4:	6863      	ldr	r3, [r4, #4]
 80075c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80075ca:	9206      	str	r2, [sp, #24]
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	d13f      	bne.n	8007650 <_printf_float+0x17c>
 80075d0:	2306      	movs	r3, #6
 80075d2:	6063      	str	r3, [r4, #4]
 80075d4:	9b05      	ldr	r3, [sp, #20]
 80075d6:	6861      	ldr	r1, [r4, #4]
 80075d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80075dc:	2300      	movs	r3, #0
 80075de:	9303      	str	r3, [sp, #12]
 80075e0:	ab0a      	add	r3, sp, #40	; 0x28
 80075e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80075e6:	ab09      	add	r3, sp, #36	; 0x24
 80075e8:	ec49 8b10 	vmov	d0, r8, r9
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	6022      	str	r2, [r4, #0]
 80075f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80075f4:	4628      	mov	r0, r5
 80075f6:	f7ff fecd 	bl	8007394 <__cvt>
 80075fa:	9b06      	ldr	r3, [sp, #24]
 80075fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075fe:	2b47      	cmp	r3, #71	; 0x47
 8007600:	4680      	mov	r8, r0
 8007602:	d108      	bne.n	8007616 <_printf_float+0x142>
 8007604:	1cc8      	adds	r0, r1, #3
 8007606:	db02      	blt.n	800760e <_printf_float+0x13a>
 8007608:	6863      	ldr	r3, [r4, #4]
 800760a:	4299      	cmp	r1, r3
 800760c:	dd41      	ble.n	8007692 <_printf_float+0x1be>
 800760e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007612:	fa5f fb8b 	uxtb.w	fp, fp
 8007616:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800761a:	d820      	bhi.n	800765e <_printf_float+0x18a>
 800761c:	3901      	subs	r1, #1
 800761e:	465a      	mov	r2, fp
 8007620:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007624:	9109      	str	r1, [sp, #36]	; 0x24
 8007626:	f7ff ff17 	bl	8007458 <__exponent>
 800762a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800762c:	1813      	adds	r3, r2, r0
 800762e:	2a01      	cmp	r2, #1
 8007630:	4681      	mov	r9, r0
 8007632:	6123      	str	r3, [r4, #16]
 8007634:	dc02      	bgt.n	800763c <_printf_float+0x168>
 8007636:	6822      	ldr	r2, [r4, #0]
 8007638:	07d2      	lsls	r2, r2, #31
 800763a:	d501      	bpl.n	8007640 <_printf_float+0x16c>
 800763c:	3301      	adds	r3, #1
 800763e:	6123      	str	r3, [r4, #16]
 8007640:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007644:	2b00      	cmp	r3, #0
 8007646:	d09c      	beq.n	8007582 <_printf_float+0xae>
 8007648:	232d      	movs	r3, #45	; 0x2d
 800764a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800764e:	e798      	b.n	8007582 <_printf_float+0xae>
 8007650:	9a06      	ldr	r2, [sp, #24]
 8007652:	2a47      	cmp	r2, #71	; 0x47
 8007654:	d1be      	bne.n	80075d4 <_printf_float+0x100>
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1bc      	bne.n	80075d4 <_printf_float+0x100>
 800765a:	2301      	movs	r3, #1
 800765c:	e7b9      	b.n	80075d2 <_printf_float+0xfe>
 800765e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007662:	d118      	bne.n	8007696 <_printf_float+0x1c2>
 8007664:	2900      	cmp	r1, #0
 8007666:	6863      	ldr	r3, [r4, #4]
 8007668:	dd0b      	ble.n	8007682 <_printf_float+0x1ae>
 800766a:	6121      	str	r1, [r4, #16]
 800766c:	b913      	cbnz	r3, 8007674 <_printf_float+0x1a0>
 800766e:	6822      	ldr	r2, [r4, #0]
 8007670:	07d0      	lsls	r0, r2, #31
 8007672:	d502      	bpl.n	800767a <_printf_float+0x1a6>
 8007674:	3301      	adds	r3, #1
 8007676:	440b      	add	r3, r1
 8007678:	6123      	str	r3, [r4, #16]
 800767a:	65a1      	str	r1, [r4, #88]	; 0x58
 800767c:	f04f 0900 	mov.w	r9, #0
 8007680:	e7de      	b.n	8007640 <_printf_float+0x16c>
 8007682:	b913      	cbnz	r3, 800768a <_printf_float+0x1b6>
 8007684:	6822      	ldr	r2, [r4, #0]
 8007686:	07d2      	lsls	r2, r2, #31
 8007688:	d501      	bpl.n	800768e <_printf_float+0x1ba>
 800768a:	3302      	adds	r3, #2
 800768c:	e7f4      	b.n	8007678 <_printf_float+0x1a4>
 800768e:	2301      	movs	r3, #1
 8007690:	e7f2      	b.n	8007678 <_printf_float+0x1a4>
 8007692:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007698:	4299      	cmp	r1, r3
 800769a:	db05      	blt.n	80076a8 <_printf_float+0x1d4>
 800769c:	6823      	ldr	r3, [r4, #0]
 800769e:	6121      	str	r1, [r4, #16]
 80076a0:	07d8      	lsls	r0, r3, #31
 80076a2:	d5ea      	bpl.n	800767a <_printf_float+0x1a6>
 80076a4:	1c4b      	adds	r3, r1, #1
 80076a6:	e7e7      	b.n	8007678 <_printf_float+0x1a4>
 80076a8:	2900      	cmp	r1, #0
 80076aa:	bfd4      	ite	le
 80076ac:	f1c1 0202 	rsble	r2, r1, #2
 80076b0:	2201      	movgt	r2, #1
 80076b2:	4413      	add	r3, r2
 80076b4:	e7e0      	b.n	8007678 <_printf_float+0x1a4>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	055a      	lsls	r2, r3, #21
 80076ba:	d407      	bmi.n	80076cc <_printf_float+0x1f8>
 80076bc:	6923      	ldr	r3, [r4, #16]
 80076be:	4642      	mov	r2, r8
 80076c0:	4631      	mov	r1, r6
 80076c2:	4628      	mov	r0, r5
 80076c4:	47b8      	blx	r7
 80076c6:	3001      	adds	r0, #1
 80076c8:	d12c      	bne.n	8007724 <_printf_float+0x250>
 80076ca:	e764      	b.n	8007596 <_printf_float+0xc2>
 80076cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80076d0:	f240 80e0 	bls.w	8007894 <_printf_float+0x3c0>
 80076d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076d8:	2200      	movs	r2, #0
 80076da:	2300      	movs	r3, #0
 80076dc:	f7f9 fa14 	bl	8000b08 <__aeabi_dcmpeq>
 80076e0:	2800      	cmp	r0, #0
 80076e2:	d034      	beq.n	800774e <_printf_float+0x27a>
 80076e4:	4a37      	ldr	r2, [pc, #220]	; (80077c4 <_printf_float+0x2f0>)
 80076e6:	2301      	movs	r3, #1
 80076e8:	4631      	mov	r1, r6
 80076ea:	4628      	mov	r0, r5
 80076ec:	47b8      	blx	r7
 80076ee:	3001      	adds	r0, #1
 80076f0:	f43f af51 	beq.w	8007596 <_printf_float+0xc2>
 80076f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076f8:	429a      	cmp	r2, r3
 80076fa:	db02      	blt.n	8007702 <_printf_float+0x22e>
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	07d8      	lsls	r0, r3, #31
 8007700:	d510      	bpl.n	8007724 <_printf_float+0x250>
 8007702:	ee18 3a10 	vmov	r3, s16
 8007706:	4652      	mov	r2, sl
 8007708:	4631      	mov	r1, r6
 800770a:	4628      	mov	r0, r5
 800770c:	47b8      	blx	r7
 800770e:	3001      	adds	r0, #1
 8007710:	f43f af41 	beq.w	8007596 <_printf_float+0xc2>
 8007714:	f04f 0800 	mov.w	r8, #0
 8007718:	f104 091a 	add.w	r9, r4, #26
 800771c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800771e:	3b01      	subs	r3, #1
 8007720:	4543      	cmp	r3, r8
 8007722:	dc09      	bgt.n	8007738 <_printf_float+0x264>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	079b      	lsls	r3, r3, #30
 8007728:	f100 8105 	bmi.w	8007936 <_printf_float+0x462>
 800772c:	68e0      	ldr	r0, [r4, #12]
 800772e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007730:	4298      	cmp	r0, r3
 8007732:	bfb8      	it	lt
 8007734:	4618      	movlt	r0, r3
 8007736:	e730      	b.n	800759a <_printf_float+0xc6>
 8007738:	2301      	movs	r3, #1
 800773a:	464a      	mov	r2, r9
 800773c:	4631      	mov	r1, r6
 800773e:	4628      	mov	r0, r5
 8007740:	47b8      	blx	r7
 8007742:	3001      	adds	r0, #1
 8007744:	f43f af27 	beq.w	8007596 <_printf_float+0xc2>
 8007748:	f108 0801 	add.w	r8, r8, #1
 800774c:	e7e6      	b.n	800771c <_printf_float+0x248>
 800774e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007750:	2b00      	cmp	r3, #0
 8007752:	dc39      	bgt.n	80077c8 <_printf_float+0x2f4>
 8007754:	4a1b      	ldr	r2, [pc, #108]	; (80077c4 <_printf_float+0x2f0>)
 8007756:	2301      	movs	r3, #1
 8007758:	4631      	mov	r1, r6
 800775a:	4628      	mov	r0, r5
 800775c:	47b8      	blx	r7
 800775e:	3001      	adds	r0, #1
 8007760:	f43f af19 	beq.w	8007596 <_printf_float+0xc2>
 8007764:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007768:	4313      	orrs	r3, r2
 800776a:	d102      	bne.n	8007772 <_printf_float+0x29e>
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	07d9      	lsls	r1, r3, #31
 8007770:	d5d8      	bpl.n	8007724 <_printf_float+0x250>
 8007772:	ee18 3a10 	vmov	r3, s16
 8007776:	4652      	mov	r2, sl
 8007778:	4631      	mov	r1, r6
 800777a:	4628      	mov	r0, r5
 800777c:	47b8      	blx	r7
 800777e:	3001      	adds	r0, #1
 8007780:	f43f af09 	beq.w	8007596 <_printf_float+0xc2>
 8007784:	f04f 0900 	mov.w	r9, #0
 8007788:	f104 0a1a 	add.w	sl, r4, #26
 800778c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800778e:	425b      	negs	r3, r3
 8007790:	454b      	cmp	r3, r9
 8007792:	dc01      	bgt.n	8007798 <_printf_float+0x2c4>
 8007794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007796:	e792      	b.n	80076be <_printf_float+0x1ea>
 8007798:	2301      	movs	r3, #1
 800779a:	4652      	mov	r2, sl
 800779c:	4631      	mov	r1, r6
 800779e:	4628      	mov	r0, r5
 80077a0:	47b8      	blx	r7
 80077a2:	3001      	adds	r0, #1
 80077a4:	f43f aef7 	beq.w	8007596 <_printf_float+0xc2>
 80077a8:	f109 0901 	add.w	r9, r9, #1
 80077ac:	e7ee      	b.n	800778c <_printf_float+0x2b8>
 80077ae:	bf00      	nop
 80077b0:	7fefffff 	.word	0x7fefffff
 80077b4:	0800a03c 	.word	0x0800a03c
 80077b8:	0800a040 	.word	0x0800a040
 80077bc:	0800a048 	.word	0x0800a048
 80077c0:	0800a044 	.word	0x0800a044
 80077c4:	0800a04c 	.word	0x0800a04c
 80077c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077cc:	429a      	cmp	r2, r3
 80077ce:	bfa8      	it	ge
 80077d0:	461a      	movge	r2, r3
 80077d2:	2a00      	cmp	r2, #0
 80077d4:	4691      	mov	r9, r2
 80077d6:	dc37      	bgt.n	8007848 <_printf_float+0x374>
 80077d8:	f04f 0b00 	mov.w	fp, #0
 80077dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077e0:	f104 021a 	add.w	r2, r4, #26
 80077e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077e6:	9305      	str	r3, [sp, #20]
 80077e8:	eba3 0309 	sub.w	r3, r3, r9
 80077ec:	455b      	cmp	r3, fp
 80077ee:	dc33      	bgt.n	8007858 <_printf_float+0x384>
 80077f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077f4:	429a      	cmp	r2, r3
 80077f6:	db3b      	blt.n	8007870 <_printf_float+0x39c>
 80077f8:	6823      	ldr	r3, [r4, #0]
 80077fa:	07da      	lsls	r2, r3, #31
 80077fc:	d438      	bmi.n	8007870 <_printf_float+0x39c>
 80077fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007800:	9b05      	ldr	r3, [sp, #20]
 8007802:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	eba2 0901 	sub.w	r9, r2, r1
 800780a:	4599      	cmp	r9, r3
 800780c:	bfa8      	it	ge
 800780e:	4699      	movge	r9, r3
 8007810:	f1b9 0f00 	cmp.w	r9, #0
 8007814:	dc35      	bgt.n	8007882 <_printf_float+0x3ae>
 8007816:	f04f 0800 	mov.w	r8, #0
 800781a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800781e:	f104 0a1a 	add.w	sl, r4, #26
 8007822:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007826:	1a9b      	subs	r3, r3, r2
 8007828:	eba3 0309 	sub.w	r3, r3, r9
 800782c:	4543      	cmp	r3, r8
 800782e:	f77f af79 	ble.w	8007724 <_printf_float+0x250>
 8007832:	2301      	movs	r3, #1
 8007834:	4652      	mov	r2, sl
 8007836:	4631      	mov	r1, r6
 8007838:	4628      	mov	r0, r5
 800783a:	47b8      	blx	r7
 800783c:	3001      	adds	r0, #1
 800783e:	f43f aeaa 	beq.w	8007596 <_printf_float+0xc2>
 8007842:	f108 0801 	add.w	r8, r8, #1
 8007846:	e7ec      	b.n	8007822 <_printf_float+0x34e>
 8007848:	4613      	mov	r3, r2
 800784a:	4631      	mov	r1, r6
 800784c:	4642      	mov	r2, r8
 800784e:	4628      	mov	r0, r5
 8007850:	47b8      	blx	r7
 8007852:	3001      	adds	r0, #1
 8007854:	d1c0      	bne.n	80077d8 <_printf_float+0x304>
 8007856:	e69e      	b.n	8007596 <_printf_float+0xc2>
 8007858:	2301      	movs	r3, #1
 800785a:	4631      	mov	r1, r6
 800785c:	4628      	mov	r0, r5
 800785e:	9205      	str	r2, [sp, #20]
 8007860:	47b8      	blx	r7
 8007862:	3001      	adds	r0, #1
 8007864:	f43f ae97 	beq.w	8007596 <_printf_float+0xc2>
 8007868:	9a05      	ldr	r2, [sp, #20]
 800786a:	f10b 0b01 	add.w	fp, fp, #1
 800786e:	e7b9      	b.n	80077e4 <_printf_float+0x310>
 8007870:	ee18 3a10 	vmov	r3, s16
 8007874:	4652      	mov	r2, sl
 8007876:	4631      	mov	r1, r6
 8007878:	4628      	mov	r0, r5
 800787a:	47b8      	blx	r7
 800787c:	3001      	adds	r0, #1
 800787e:	d1be      	bne.n	80077fe <_printf_float+0x32a>
 8007880:	e689      	b.n	8007596 <_printf_float+0xc2>
 8007882:	9a05      	ldr	r2, [sp, #20]
 8007884:	464b      	mov	r3, r9
 8007886:	4442      	add	r2, r8
 8007888:	4631      	mov	r1, r6
 800788a:	4628      	mov	r0, r5
 800788c:	47b8      	blx	r7
 800788e:	3001      	adds	r0, #1
 8007890:	d1c1      	bne.n	8007816 <_printf_float+0x342>
 8007892:	e680      	b.n	8007596 <_printf_float+0xc2>
 8007894:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007896:	2a01      	cmp	r2, #1
 8007898:	dc01      	bgt.n	800789e <_printf_float+0x3ca>
 800789a:	07db      	lsls	r3, r3, #31
 800789c:	d538      	bpl.n	8007910 <_printf_float+0x43c>
 800789e:	2301      	movs	r3, #1
 80078a0:	4642      	mov	r2, r8
 80078a2:	4631      	mov	r1, r6
 80078a4:	4628      	mov	r0, r5
 80078a6:	47b8      	blx	r7
 80078a8:	3001      	adds	r0, #1
 80078aa:	f43f ae74 	beq.w	8007596 <_printf_float+0xc2>
 80078ae:	ee18 3a10 	vmov	r3, s16
 80078b2:	4652      	mov	r2, sl
 80078b4:	4631      	mov	r1, r6
 80078b6:	4628      	mov	r0, r5
 80078b8:	47b8      	blx	r7
 80078ba:	3001      	adds	r0, #1
 80078bc:	f43f ae6b 	beq.w	8007596 <_printf_float+0xc2>
 80078c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078c4:	2200      	movs	r2, #0
 80078c6:	2300      	movs	r3, #0
 80078c8:	f7f9 f91e 	bl	8000b08 <__aeabi_dcmpeq>
 80078cc:	b9d8      	cbnz	r0, 8007906 <_printf_float+0x432>
 80078ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078d0:	f108 0201 	add.w	r2, r8, #1
 80078d4:	3b01      	subs	r3, #1
 80078d6:	4631      	mov	r1, r6
 80078d8:	4628      	mov	r0, r5
 80078da:	47b8      	blx	r7
 80078dc:	3001      	adds	r0, #1
 80078de:	d10e      	bne.n	80078fe <_printf_float+0x42a>
 80078e0:	e659      	b.n	8007596 <_printf_float+0xc2>
 80078e2:	2301      	movs	r3, #1
 80078e4:	4652      	mov	r2, sl
 80078e6:	4631      	mov	r1, r6
 80078e8:	4628      	mov	r0, r5
 80078ea:	47b8      	blx	r7
 80078ec:	3001      	adds	r0, #1
 80078ee:	f43f ae52 	beq.w	8007596 <_printf_float+0xc2>
 80078f2:	f108 0801 	add.w	r8, r8, #1
 80078f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078f8:	3b01      	subs	r3, #1
 80078fa:	4543      	cmp	r3, r8
 80078fc:	dcf1      	bgt.n	80078e2 <_printf_float+0x40e>
 80078fe:	464b      	mov	r3, r9
 8007900:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007904:	e6dc      	b.n	80076c0 <_printf_float+0x1ec>
 8007906:	f04f 0800 	mov.w	r8, #0
 800790a:	f104 0a1a 	add.w	sl, r4, #26
 800790e:	e7f2      	b.n	80078f6 <_printf_float+0x422>
 8007910:	2301      	movs	r3, #1
 8007912:	4642      	mov	r2, r8
 8007914:	e7df      	b.n	80078d6 <_printf_float+0x402>
 8007916:	2301      	movs	r3, #1
 8007918:	464a      	mov	r2, r9
 800791a:	4631      	mov	r1, r6
 800791c:	4628      	mov	r0, r5
 800791e:	47b8      	blx	r7
 8007920:	3001      	adds	r0, #1
 8007922:	f43f ae38 	beq.w	8007596 <_printf_float+0xc2>
 8007926:	f108 0801 	add.w	r8, r8, #1
 800792a:	68e3      	ldr	r3, [r4, #12]
 800792c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800792e:	1a5b      	subs	r3, r3, r1
 8007930:	4543      	cmp	r3, r8
 8007932:	dcf0      	bgt.n	8007916 <_printf_float+0x442>
 8007934:	e6fa      	b.n	800772c <_printf_float+0x258>
 8007936:	f04f 0800 	mov.w	r8, #0
 800793a:	f104 0919 	add.w	r9, r4, #25
 800793e:	e7f4      	b.n	800792a <_printf_float+0x456>

08007940 <_printf_common>:
 8007940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007944:	4616      	mov	r6, r2
 8007946:	4699      	mov	r9, r3
 8007948:	688a      	ldr	r2, [r1, #8]
 800794a:	690b      	ldr	r3, [r1, #16]
 800794c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007950:	4293      	cmp	r3, r2
 8007952:	bfb8      	it	lt
 8007954:	4613      	movlt	r3, r2
 8007956:	6033      	str	r3, [r6, #0]
 8007958:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800795c:	4607      	mov	r7, r0
 800795e:	460c      	mov	r4, r1
 8007960:	b10a      	cbz	r2, 8007966 <_printf_common+0x26>
 8007962:	3301      	adds	r3, #1
 8007964:	6033      	str	r3, [r6, #0]
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	0699      	lsls	r1, r3, #26
 800796a:	bf42      	ittt	mi
 800796c:	6833      	ldrmi	r3, [r6, #0]
 800796e:	3302      	addmi	r3, #2
 8007970:	6033      	strmi	r3, [r6, #0]
 8007972:	6825      	ldr	r5, [r4, #0]
 8007974:	f015 0506 	ands.w	r5, r5, #6
 8007978:	d106      	bne.n	8007988 <_printf_common+0x48>
 800797a:	f104 0a19 	add.w	sl, r4, #25
 800797e:	68e3      	ldr	r3, [r4, #12]
 8007980:	6832      	ldr	r2, [r6, #0]
 8007982:	1a9b      	subs	r3, r3, r2
 8007984:	42ab      	cmp	r3, r5
 8007986:	dc26      	bgt.n	80079d6 <_printf_common+0x96>
 8007988:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800798c:	1e13      	subs	r3, r2, #0
 800798e:	6822      	ldr	r2, [r4, #0]
 8007990:	bf18      	it	ne
 8007992:	2301      	movne	r3, #1
 8007994:	0692      	lsls	r2, r2, #26
 8007996:	d42b      	bmi.n	80079f0 <_printf_common+0xb0>
 8007998:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800799c:	4649      	mov	r1, r9
 800799e:	4638      	mov	r0, r7
 80079a0:	47c0      	blx	r8
 80079a2:	3001      	adds	r0, #1
 80079a4:	d01e      	beq.n	80079e4 <_printf_common+0xa4>
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	68e5      	ldr	r5, [r4, #12]
 80079aa:	6832      	ldr	r2, [r6, #0]
 80079ac:	f003 0306 	and.w	r3, r3, #6
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	bf08      	it	eq
 80079b4:	1aad      	subeq	r5, r5, r2
 80079b6:	68a3      	ldr	r3, [r4, #8]
 80079b8:	6922      	ldr	r2, [r4, #16]
 80079ba:	bf0c      	ite	eq
 80079bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079c0:	2500      	movne	r5, #0
 80079c2:	4293      	cmp	r3, r2
 80079c4:	bfc4      	itt	gt
 80079c6:	1a9b      	subgt	r3, r3, r2
 80079c8:	18ed      	addgt	r5, r5, r3
 80079ca:	2600      	movs	r6, #0
 80079cc:	341a      	adds	r4, #26
 80079ce:	42b5      	cmp	r5, r6
 80079d0:	d11a      	bne.n	8007a08 <_printf_common+0xc8>
 80079d2:	2000      	movs	r0, #0
 80079d4:	e008      	b.n	80079e8 <_printf_common+0xa8>
 80079d6:	2301      	movs	r3, #1
 80079d8:	4652      	mov	r2, sl
 80079da:	4649      	mov	r1, r9
 80079dc:	4638      	mov	r0, r7
 80079de:	47c0      	blx	r8
 80079e0:	3001      	adds	r0, #1
 80079e2:	d103      	bne.n	80079ec <_printf_common+0xac>
 80079e4:	f04f 30ff 	mov.w	r0, #4294967295
 80079e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ec:	3501      	adds	r5, #1
 80079ee:	e7c6      	b.n	800797e <_printf_common+0x3e>
 80079f0:	18e1      	adds	r1, r4, r3
 80079f2:	1c5a      	adds	r2, r3, #1
 80079f4:	2030      	movs	r0, #48	; 0x30
 80079f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079fa:	4422      	add	r2, r4
 80079fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a04:	3302      	adds	r3, #2
 8007a06:	e7c7      	b.n	8007998 <_printf_common+0x58>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	4622      	mov	r2, r4
 8007a0c:	4649      	mov	r1, r9
 8007a0e:	4638      	mov	r0, r7
 8007a10:	47c0      	blx	r8
 8007a12:	3001      	adds	r0, #1
 8007a14:	d0e6      	beq.n	80079e4 <_printf_common+0xa4>
 8007a16:	3601      	adds	r6, #1
 8007a18:	e7d9      	b.n	80079ce <_printf_common+0x8e>
	...

08007a1c <_printf_i>:
 8007a1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a20:	460c      	mov	r4, r1
 8007a22:	4691      	mov	r9, r2
 8007a24:	7e27      	ldrb	r7, [r4, #24]
 8007a26:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a28:	2f78      	cmp	r7, #120	; 0x78
 8007a2a:	4680      	mov	r8, r0
 8007a2c:	469a      	mov	sl, r3
 8007a2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a32:	d807      	bhi.n	8007a44 <_printf_i+0x28>
 8007a34:	2f62      	cmp	r7, #98	; 0x62
 8007a36:	d80a      	bhi.n	8007a4e <_printf_i+0x32>
 8007a38:	2f00      	cmp	r7, #0
 8007a3a:	f000 80d8 	beq.w	8007bee <_printf_i+0x1d2>
 8007a3e:	2f58      	cmp	r7, #88	; 0x58
 8007a40:	f000 80a3 	beq.w	8007b8a <_printf_i+0x16e>
 8007a44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007a48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a4c:	e03a      	b.n	8007ac4 <_printf_i+0xa8>
 8007a4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a52:	2b15      	cmp	r3, #21
 8007a54:	d8f6      	bhi.n	8007a44 <_printf_i+0x28>
 8007a56:	a001      	add	r0, pc, #4	; (adr r0, 8007a5c <_printf_i+0x40>)
 8007a58:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007a5c:	08007ab5 	.word	0x08007ab5
 8007a60:	08007ac9 	.word	0x08007ac9
 8007a64:	08007a45 	.word	0x08007a45
 8007a68:	08007a45 	.word	0x08007a45
 8007a6c:	08007a45 	.word	0x08007a45
 8007a70:	08007a45 	.word	0x08007a45
 8007a74:	08007ac9 	.word	0x08007ac9
 8007a78:	08007a45 	.word	0x08007a45
 8007a7c:	08007a45 	.word	0x08007a45
 8007a80:	08007a45 	.word	0x08007a45
 8007a84:	08007a45 	.word	0x08007a45
 8007a88:	08007bd5 	.word	0x08007bd5
 8007a8c:	08007af9 	.word	0x08007af9
 8007a90:	08007bb7 	.word	0x08007bb7
 8007a94:	08007a45 	.word	0x08007a45
 8007a98:	08007a45 	.word	0x08007a45
 8007a9c:	08007bf7 	.word	0x08007bf7
 8007aa0:	08007a45 	.word	0x08007a45
 8007aa4:	08007af9 	.word	0x08007af9
 8007aa8:	08007a45 	.word	0x08007a45
 8007aac:	08007a45 	.word	0x08007a45
 8007ab0:	08007bbf 	.word	0x08007bbf
 8007ab4:	680b      	ldr	r3, [r1, #0]
 8007ab6:	1d1a      	adds	r2, r3, #4
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	600a      	str	r2, [r1, #0]
 8007abc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007ac0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e0a3      	b.n	8007c10 <_printf_i+0x1f4>
 8007ac8:	6825      	ldr	r5, [r4, #0]
 8007aca:	6808      	ldr	r0, [r1, #0]
 8007acc:	062e      	lsls	r6, r5, #24
 8007ace:	f100 0304 	add.w	r3, r0, #4
 8007ad2:	d50a      	bpl.n	8007aea <_printf_i+0xce>
 8007ad4:	6805      	ldr	r5, [r0, #0]
 8007ad6:	600b      	str	r3, [r1, #0]
 8007ad8:	2d00      	cmp	r5, #0
 8007ada:	da03      	bge.n	8007ae4 <_printf_i+0xc8>
 8007adc:	232d      	movs	r3, #45	; 0x2d
 8007ade:	426d      	negs	r5, r5
 8007ae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ae4:	485e      	ldr	r0, [pc, #376]	; (8007c60 <_printf_i+0x244>)
 8007ae6:	230a      	movs	r3, #10
 8007ae8:	e019      	b.n	8007b1e <_printf_i+0x102>
 8007aea:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007aee:	6805      	ldr	r5, [r0, #0]
 8007af0:	600b      	str	r3, [r1, #0]
 8007af2:	bf18      	it	ne
 8007af4:	b22d      	sxthne	r5, r5
 8007af6:	e7ef      	b.n	8007ad8 <_printf_i+0xbc>
 8007af8:	680b      	ldr	r3, [r1, #0]
 8007afa:	6825      	ldr	r5, [r4, #0]
 8007afc:	1d18      	adds	r0, r3, #4
 8007afe:	6008      	str	r0, [r1, #0]
 8007b00:	0628      	lsls	r0, r5, #24
 8007b02:	d501      	bpl.n	8007b08 <_printf_i+0xec>
 8007b04:	681d      	ldr	r5, [r3, #0]
 8007b06:	e002      	b.n	8007b0e <_printf_i+0xf2>
 8007b08:	0669      	lsls	r1, r5, #25
 8007b0a:	d5fb      	bpl.n	8007b04 <_printf_i+0xe8>
 8007b0c:	881d      	ldrh	r5, [r3, #0]
 8007b0e:	4854      	ldr	r0, [pc, #336]	; (8007c60 <_printf_i+0x244>)
 8007b10:	2f6f      	cmp	r7, #111	; 0x6f
 8007b12:	bf0c      	ite	eq
 8007b14:	2308      	moveq	r3, #8
 8007b16:	230a      	movne	r3, #10
 8007b18:	2100      	movs	r1, #0
 8007b1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b1e:	6866      	ldr	r6, [r4, #4]
 8007b20:	60a6      	str	r6, [r4, #8]
 8007b22:	2e00      	cmp	r6, #0
 8007b24:	bfa2      	ittt	ge
 8007b26:	6821      	ldrge	r1, [r4, #0]
 8007b28:	f021 0104 	bicge.w	r1, r1, #4
 8007b2c:	6021      	strge	r1, [r4, #0]
 8007b2e:	b90d      	cbnz	r5, 8007b34 <_printf_i+0x118>
 8007b30:	2e00      	cmp	r6, #0
 8007b32:	d04d      	beq.n	8007bd0 <_printf_i+0x1b4>
 8007b34:	4616      	mov	r6, r2
 8007b36:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b3a:	fb03 5711 	mls	r7, r3, r1, r5
 8007b3e:	5dc7      	ldrb	r7, [r0, r7]
 8007b40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b44:	462f      	mov	r7, r5
 8007b46:	42bb      	cmp	r3, r7
 8007b48:	460d      	mov	r5, r1
 8007b4a:	d9f4      	bls.n	8007b36 <_printf_i+0x11a>
 8007b4c:	2b08      	cmp	r3, #8
 8007b4e:	d10b      	bne.n	8007b68 <_printf_i+0x14c>
 8007b50:	6823      	ldr	r3, [r4, #0]
 8007b52:	07df      	lsls	r7, r3, #31
 8007b54:	d508      	bpl.n	8007b68 <_printf_i+0x14c>
 8007b56:	6923      	ldr	r3, [r4, #16]
 8007b58:	6861      	ldr	r1, [r4, #4]
 8007b5a:	4299      	cmp	r1, r3
 8007b5c:	bfde      	ittt	le
 8007b5e:	2330      	movle	r3, #48	; 0x30
 8007b60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b68:	1b92      	subs	r2, r2, r6
 8007b6a:	6122      	str	r2, [r4, #16]
 8007b6c:	f8cd a000 	str.w	sl, [sp]
 8007b70:	464b      	mov	r3, r9
 8007b72:	aa03      	add	r2, sp, #12
 8007b74:	4621      	mov	r1, r4
 8007b76:	4640      	mov	r0, r8
 8007b78:	f7ff fee2 	bl	8007940 <_printf_common>
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d14c      	bne.n	8007c1a <_printf_i+0x1fe>
 8007b80:	f04f 30ff 	mov.w	r0, #4294967295
 8007b84:	b004      	add	sp, #16
 8007b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b8a:	4835      	ldr	r0, [pc, #212]	; (8007c60 <_printf_i+0x244>)
 8007b8c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b90:	6823      	ldr	r3, [r4, #0]
 8007b92:	680e      	ldr	r6, [r1, #0]
 8007b94:	061f      	lsls	r7, r3, #24
 8007b96:	f856 5b04 	ldr.w	r5, [r6], #4
 8007b9a:	600e      	str	r6, [r1, #0]
 8007b9c:	d514      	bpl.n	8007bc8 <_printf_i+0x1ac>
 8007b9e:	07d9      	lsls	r1, r3, #31
 8007ba0:	bf44      	itt	mi
 8007ba2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ba6:	6023      	strmi	r3, [r4, #0]
 8007ba8:	b91d      	cbnz	r5, 8007bb2 <_printf_i+0x196>
 8007baa:	6823      	ldr	r3, [r4, #0]
 8007bac:	f023 0320 	bic.w	r3, r3, #32
 8007bb0:	6023      	str	r3, [r4, #0]
 8007bb2:	2310      	movs	r3, #16
 8007bb4:	e7b0      	b.n	8007b18 <_printf_i+0xfc>
 8007bb6:	6823      	ldr	r3, [r4, #0]
 8007bb8:	f043 0320 	orr.w	r3, r3, #32
 8007bbc:	6023      	str	r3, [r4, #0]
 8007bbe:	2378      	movs	r3, #120	; 0x78
 8007bc0:	4828      	ldr	r0, [pc, #160]	; (8007c64 <_printf_i+0x248>)
 8007bc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007bc6:	e7e3      	b.n	8007b90 <_printf_i+0x174>
 8007bc8:	065e      	lsls	r6, r3, #25
 8007bca:	bf48      	it	mi
 8007bcc:	b2ad      	uxthmi	r5, r5
 8007bce:	e7e6      	b.n	8007b9e <_printf_i+0x182>
 8007bd0:	4616      	mov	r6, r2
 8007bd2:	e7bb      	b.n	8007b4c <_printf_i+0x130>
 8007bd4:	680b      	ldr	r3, [r1, #0]
 8007bd6:	6826      	ldr	r6, [r4, #0]
 8007bd8:	6960      	ldr	r0, [r4, #20]
 8007bda:	1d1d      	adds	r5, r3, #4
 8007bdc:	600d      	str	r5, [r1, #0]
 8007bde:	0635      	lsls	r5, r6, #24
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	d501      	bpl.n	8007be8 <_printf_i+0x1cc>
 8007be4:	6018      	str	r0, [r3, #0]
 8007be6:	e002      	b.n	8007bee <_printf_i+0x1d2>
 8007be8:	0671      	lsls	r1, r6, #25
 8007bea:	d5fb      	bpl.n	8007be4 <_printf_i+0x1c8>
 8007bec:	8018      	strh	r0, [r3, #0]
 8007bee:	2300      	movs	r3, #0
 8007bf0:	6123      	str	r3, [r4, #16]
 8007bf2:	4616      	mov	r6, r2
 8007bf4:	e7ba      	b.n	8007b6c <_printf_i+0x150>
 8007bf6:	680b      	ldr	r3, [r1, #0]
 8007bf8:	1d1a      	adds	r2, r3, #4
 8007bfa:	600a      	str	r2, [r1, #0]
 8007bfc:	681e      	ldr	r6, [r3, #0]
 8007bfe:	6862      	ldr	r2, [r4, #4]
 8007c00:	2100      	movs	r1, #0
 8007c02:	4630      	mov	r0, r6
 8007c04:	f7f8 fb0c 	bl	8000220 <memchr>
 8007c08:	b108      	cbz	r0, 8007c0e <_printf_i+0x1f2>
 8007c0a:	1b80      	subs	r0, r0, r6
 8007c0c:	6060      	str	r0, [r4, #4]
 8007c0e:	6863      	ldr	r3, [r4, #4]
 8007c10:	6123      	str	r3, [r4, #16]
 8007c12:	2300      	movs	r3, #0
 8007c14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c18:	e7a8      	b.n	8007b6c <_printf_i+0x150>
 8007c1a:	6923      	ldr	r3, [r4, #16]
 8007c1c:	4632      	mov	r2, r6
 8007c1e:	4649      	mov	r1, r9
 8007c20:	4640      	mov	r0, r8
 8007c22:	47d0      	blx	sl
 8007c24:	3001      	adds	r0, #1
 8007c26:	d0ab      	beq.n	8007b80 <_printf_i+0x164>
 8007c28:	6823      	ldr	r3, [r4, #0]
 8007c2a:	079b      	lsls	r3, r3, #30
 8007c2c:	d413      	bmi.n	8007c56 <_printf_i+0x23a>
 8007c2e:	68e0      	ldr	r0, [r4, #12]
 8007c30:	9b03      	ldr	r3, [sp, #12]
 8007c32:	4298      	cmp	r0, r3
 8007c34:	bfb8      	it	lt
 8007c36:	4618      	movlt	r0, r3
 8007c38:	e7a4      	b.n	8007b84 <_printf_i+0x168>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	4632      	mov	r2, r6
 8007c3e:	4649      	mov	r1, r9
 8007c40:	4640      	mov	r0, r8
 8007c42:	47d0      	blx	sl
 8007c44:	3001      	adds	r0, #1
 8007c46:	d09b      	beq.n	8007b80 <_printf_i+0x164>
 8007c48:	3501      	adds	r5, #1
 8007c4a:	68e3      	ldr	r3, [r4, #12]
 8007c4c:	9903      	ldr	r1, [sp, #12]
 8007c4e:	1a5b      	subs	r3, r3, r1
 8007c50:	42ab      	cmp	r3, r5
 8007c52:	dcf2      	bgt.n	8007c3a <_printf_i+0x21e>
 8007c54:	e7eb      	b.n	8007c2e <_printf_i+0x212>
 8007c56:	2500      	movs	r5, #0
 8007c58:	f104 0619 	add.w	r6, r4, #25
 8007c5c:	e7f5      	b.n	8007c4a <_printf_i+0x22e>
 8007c5e:	bf00      	nop
 8007c60:	0800a04e 	.word	0x0800a04e
 8007c64:	0800a05f 	.word	0x0800a05f

08007c68 <cleanup_glue>:
 8007c68:	b538      	push	{r3, r4, r5, lr}
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	6809      	ldr	r1, [r1, #0]
 8007c6e:	4605      	mov	r5, r0
 8007c70:	b109      	cbz	r1, 8007c76 <cleanup_glue+0xe>
 8007c72:	f7ff fff9 	bl	8007c68 <cleanup_glue>
 8007c76:	4621      	mov	r1, r4
 8007c78:	4628      	mov	r0, r5
 8007c7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c7e:	f7ff badf 	b.w	8007240 <_free_r>
	...

08007c84 <_reclaim_reent>:
 8007c84:	4b2c      	ldr	r3, [pc, #176]	; (8007d38 <_reclaim_reent+0xb4>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4283      	cmp	r3, r0
 8007c8a:	b570      	push	{r4, r5, r6, lr}
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	d051      	beq.n	8007d34 <_reclaim_reent+0xb0>
 8007c90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007c92:	b143      	cbz	r3, 8007ca6 <_reclaim_reent+0x22>
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d14a      	bne.n	8007d30 <_reclaim_reent+0xac>
 8007c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c9c:	6819      	ldr	r1, [r3, #0]
 8007c9e:	b111      	cbz	r1, 8007ca6 <_reclaim_reent+0x22>
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f7ff facd 	bl	8007240 <_free_r>
 8007ca6:	6961      	ldr	r1, [r4, #20]
 8007ca8:	b111      	cbz	r1, 8007cb0 <_reclaim_reent+0x2c>
 8007caa:	4620      	mov	r0, r4
 8007cac:	f7ff fac8 	bl	8007240 <_free_r>
 8007cb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007cb2:	b111      	cbz	r1, 8007cba <_reclaim_reent+0x36>
 8007cb4:	4620      	mov	r0, r4
 8007cb6:	f7ff fac3 	bl	8007240 <_free_r>
 8007cba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007cbc:	b111      	cbz	r1, 8007cc4 <_reclaim_reent+0x40>
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f7ff fabe 	bl	8007240 <_free_r>
 8007cc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007cc6:	b111      	cbz	r1, 8007cce <_reclaim_reent+0x4a>
 8007cc8:	4620      	mov	r0, r4
 8007cca:	f7ff fab9 	bl	8007240 <_free_r>
 8007cce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007cd0:	b111      	cbz	r1, 8007cd8 <_reclaim_reent+0x54>
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f7ff fab4 	bl	8007240 <_free_r>
 8007cd8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007cda:	b111      	cbz	r1, 8007ce2 <_reclaim_reent+0x5e>
 8007cdc:	4620      	mov	r0, r4
 8007cde:	f7ff faaf 	bl	8007240 <_free_r>
 8007ce2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007ce4:	b111      	cbz	r1, 8007cec <_reclaim_reent+0x68>
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f7ff faaa 	bl	8007240 <_free_r>
 8007cec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cee:	b111      	cbz	r1, 8007cf6 <_reclaim_reent+0x72>
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f7ff faa5 	bl	8007240 <_free_r>
 8007cf6:	69a3      	ldr	r3, [r4, #24]
 8007cf8:	b1e3      	cbz	r3, 8007d34 <_reclaim_reent+0xb0>
 8007cfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	4798      	blx	r3
 8007d00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007d02:	b1b9      	cbz	r1, 8007d34 <_reclaim_reent+0xb0>
 8007d04:	4620      	mov	r0, r4
 8007d06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007d0a:	f7ff bfad 	b.w	8007c68 <cleanup_glue>
 8007d0e:	5949      	ldr	r1, [r1, r5]
 8007d10:	b941      	cbnz	r1, 8007d24 <_reclaim_reent+0xa0>
 8007d12:	3504      	adds	r5, #4
 8007d14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d16:	2d80      	cmp	r5, #128	; 0x80
 8007d18:	68d9      	ldr	r1, [r3, #12]
 8007d1a:	d1f8      	bne.n	8007d0e <_reclaim_reent+0x8a>
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f7ff fa8f 	bl	8007240 <_free_r>
 8007d22:	e7ba      	b.n	8007c9a <_reclaim_reent+0x16>
 8007d24:	680e      	ldr	r6, [r1, #0]
 8007d26:	4620      	mov	r0, r4
 8007d28:	f7ff fa8a 	bl	8007240 <_free_r>
 8007d2c:	4631      	mov	r1, r6
 8007d2e:	e7ef      	b.n	8007d10 <_reclaim_reent+0x8c>
 8007d30:	2500      	movs	r5, #0
 8007d32:	e7ef      	b.n	8007d14 <_reclaim_reent+0x90>
 8007d34:	bd70      	pop	{r4, r5, r6, pc}
 8007d36:	bf00      	nop
 8007d38:	20000010 	.word	0x20000010

08007d3c <_sbrk_r>:
 8007d3c:	b538      	push	{r3, r4, r5, lr}
 8007d3e:	4d06      	ldr	r5, [pc, #24]	; (8007d58 <_sbrk_r+0x1c>)
 8007d40:	2300      	movs	r3, #0
 8007d42:	4604      	mov	r4, r0
 8007d44:	4608      	mov	r0, r1
 8007d46:	602b      	str	r3, [r5, #0]
 8007d48:	f7f9 fd64 	bl	8001814 <_sbrk>
 8007d4c:	1c43      	adds	r3, r0, #1
 8007d4e:	d102      	bne.n	8007d56 <_sbrk_r+0x1a>
 8007d50:	682b      	ldr	r3, [r5, #0]
 8007d52:	b103      	cbz	r3, 8007d56 <_sbrk_r+0x1a>
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	bd38      	pop	{r3, r4, r5, pc}
 8007d58:	20006b68 	.word	0x20006b68

08007d5c <siprintf>:
 8007d5c:	b40e      	push	{r1, r2, r3}
 8007d5e:	b500      	push	{lr}
 8007d60:	b09c      	sub	sp, #112	; 0x70
 8007d62:	ab1d      	add	r3, sp, #116	; 0x74
 8007d64:	9002      	str	r0, [sp, #8]
 8007d66:	9006      	str	r0, [sp, #24]
 8007d68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d6c:	4809      	ldr	r0, [pc, #36]	; (8007d94 <siprintf+0x38>)
 8007d6e:	9107      	str	r1, [sp, #28]
 8007d70:	9104      	str	r1, [sp, #16]
 8007d72:	4909      	ldr	r1, [pc, #36]	; (8007d98 <siprintf+0x3c>)
 8007d74:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d78:	9105      	str	r1, [sp, #20]
 8007d7a:	6800      	ldr	r0, [r0, #0]
 8007d7c:	9301      	str	r3, [sp, #4]
 8007d7e:	a902      	add	r1, sp, #8
 8007d80:	f001 fbb6 	bl	80094f0 <_svfiprintf_r>
 8007d84:	9b02      	ldr	r3, [sp, #8]
 8007d86:	2200      	movs	r2, #0
 8007d88:	701a      	strb	r2, [r3, #0]
 8007d8a:	b01c      	add	sp, #112	; 0x70
 8007d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d90:	b003      	add	sp, #12
 8007d92:	4770      	bx	lr
 8007d94:	20000010 	.word	0x20000010
 8007d98:	ffff0208 	.word	0xffff0208

08007d9c <__sread>:
 8007d9c:	b510      	push	{r4, lr}
 8007d9e:	460c      	mov	r4, r1
 8007da0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da4:	f001 fca4 	bl	80096f0 <_read_r>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	bfab      	itete	ge
 8007dac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007dae:	89a3      	ldrhlt	r3, [r4, #12]
 8007db0:	181b      	addge	r3, r3, r0
 8007db2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007db6:	bfac      	ite	ge
 8007db8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007dba:	81a3      	strhlt	r3, [r4, #12]
 8007dbc:	bd10      	pop	{r4, pc}

08007dbe <__swrite>:
 8007dbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc2:	461f      	mov	r7, r3
 8007dc4:	898b      	ldrh	r3, [r1, #12]
 8007dc6:	05db      	lsls	r3, r3, #23
 8007dc8:	4605      	mov	r5, r0
 8007dca:	460c      	mov	r4, r1
 8007dcc:	4616      	mov	r6, r2
 8007dce:	d505      	bpl.n	8007ddc <__swrite+0x1e>
 8007dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd4:	2302      	movs	r3, #2
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f000 ff84 	bl	8008ce4 <_lseek_r>
 8007ddc:	89a3      	ldrh	r3, [r4, #12]
 8007dde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007de2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007de6:	81a3      	strh	r3, [r4, #12]
 8007de8:	4632      	mov	r2, r6
 8007dea:	463b      	mov	r3, r7
 8007dec:	4628      	mov	r0, r5
 8007dee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007df2:	f000 b817 	b.w	8007e24 <_write_r>

08007df6 <__sseek>:
 8007df6:	b510      	push	{r4, lr}
 8007df8:	460c      	mov	r4, r1
 8007dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dfe:	f000 ff71 	bl	8008ce4 <_lseek_r>
 8007e02:	1c43      	adds	r3, r0, #1
 8007e04:	89a3      	ldrh	r3, [r4, #12]
 8007e06:	bf15      	itete	ne
 8007e08:	6560      	strne	r0, [r4, #84]	; 0x54
 8007e0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007e0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007e12:	81a3      	strheq	r3, [r4, #12]
 8007e14:	bf18      	it	ne
 8007e16:	81a3      	strhne	r3, [r4, #12]
 8007e18:	bd10      	pop	{r4, pc}

08007e1a <__sclose>:
 8007e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e1e:	f000 b813 	b.w	8007e48 <_close_r>
	...

08007e24 <_write_r>:
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	4d07      	ldr	r5, [pc, #28]	; (8007e44 <_write_r+0x20>)
 8007e28:	4604      	mov	r4, r0
 8007e2a:	4608      	mov	r0, r1
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	2200      	movs	r2, #0
 8007e30:	602a      	str	r2, [r5, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f7f9 fc9d 	bl	8001772 <_write>
 8007e38:	1c43      	adds	r3, r0, #1
 8007e3a:	d102      	bne.n	8007e42 <_write_r+0x1e>
 8007e3c:	682b      	ldr	r3, [r5, #0]
 8007e3e:	b103      	cbz	r3, 8007e42 <_write_r+0x1e>
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	bd38      	pop	{r3, r4, r5, pc}
 8007e44:	20006b68 	.word	0x20006b68

08007e48 <_close_r>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	4d06      	ldr	r5, [pc, #24]	; (8007e64 <_close_r+0x1c>)
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	4604      	mov	r4, r0
 8007e50:	4608      	mov	r0, r1
 8007e52:	602b      	str	r3, [r5, #0]
 8007e54:	f7f9 fca9 	bl	80017aa <_close>
 8007e58:	1c43      	adds	r3, r0, #1
 8007e5a:	d102      	bne.n	8007e62 <_close_r+0x1a>
 8007e5c:	682b      	ldr	r3, [r5, #0]
 8007e5e:	b103      	cbz	r3, 8007e62 <_close_r+0x1a>
 8007e60:	6023      	str	r3, [r4, #0]
 8007e62:	bd38      	pop	{r3, r4, r5, pc}
 8007e64:	20006b68 	.word	0x20006b68

08007e68 <quorem>:
 8007e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6c:	6903      	ldr	r3, [r0, #16]
 8007e6e:	690c      	ldr	r4, [r1, #16]
 8007e70:	42a3      	cmp	r3, r4
 8007e72:	4607      	mov	r7, r0
 8007e74:	f2c0 8081 	blt.w	8007f7a <quorem+0x112>
 8007e78:	3c01      	subs	r4, #1
 8007e7a:	f101 0814 	add.w	r8, r1, #20
 8007e7e:	f100 0514 	add.w	r5, r0, #20
 8007e82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e86:	9301      	str	r3, [sp, #4]
 8007e88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e90:	3301      	adds	r3, #1
 8007e92:	429a      	cmp	r2, r3
 8007e94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e9c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ea0:	d331      	bcc.n	8007f06 <quorem+0x9e>
 8007ea2:	f04f 0e00 	mov.w	lr, #0
 8007ea6:	4640      	mov	r0, r8
 8007ea8:	46ac      	mov	ip, r5
 8007eaa:	46f2      	mov	sl, lr
 8007eac:	f850 2b04 	ldr.w	r2, [r0], #4
 8007eb0:	b293      	uxth	r3, r2
 8007eb2:	fb06 e303 	mla	r3, r6, r3, lr
 8007eb6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	ebaa 0303 	sub.w	r3, sl, r3
 8007ec0:	0c12      	lsrs	r2, r2, #16
 8007ec2:	f8dc a000 	ldr.w	sl, [ip]
 8007ec6:	fb06 e202 	mla	r2, r6, r2, lr
 8007eca:	fa13 f38a 	uxtah	r3, r3, sl
 8007ece:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ed2:	fa1f fa82 	uxth.w	sl, r2
 8007ed6:	f8dc 2000 	ldr.w	r2, [ip]
 8007eda:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007ede:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ee8:	4581      	cmp	r9, r0
 8007eea:	f84c 3b04 	str.w	r3, [ip], #4
 8007eee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ef2:	d2db      	bcs.n	8007eac <quorem+0x44>
 8007ef4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ef8:	b92b      	cbnz	r3, 8007f06 <quorem+0x9e>
 8007efa:	9b01      	ldr	r3, [sp, #4]
 8007efc:	3b04      	subs	r3, #4
 8007efe:	429d      	cmp	r5, r3
 8007f00:	461a      	mov	r2, r3
 8007f02:	d32e      	bcc.n	8007f62 <quorem+0xfa>
 8007f04:	613c      	str	r4, [r7, #16]
 8007f06:	4638      	mov	r0, r7
 8007f08:	f001 f988 	bl	800921c <__mcmp>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	db24      	blt.n	8007f5a <quorem+0xf2>
 8007f10:	3601      	adds	r6, #1
 8007f12:	4628      	mov	r0, r5
 8007f14:	f04f 0c00 	mov.w	ip, #0
 8007f18:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f1c:	f8d0 e000 	ldr.w	lr, [r0]
 8007f20:	b293      	uxth	r3, r2
 8007f22:	ebac 0303 	sub.w	r3, ip, r3
 8007f26:	0c12      	lsrs	r2, r2, #16
 8007f28:	fa13 f38e 	uxtah	r3, r3, lr
 8007f2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f3a:	45c1      	cmp	r9, r8
 8007f3c:	f840 3b04 	str.w	r3, [r0], #4
 8007f40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f44:	d2e8      	bcs.n	8007f18 <quorem+0xb0>
 8007f46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f4e:	b922      	cbnz	r2, 8007f5a <quorem+0xf2>
 8007f50:	3b04      	subs	r3, #4
 8007f52:	429d      	cmp	r5, r3
 8007f54:	461a      	mov	r2, r3
 8007f56:	d30a      	bcc.n	8007f6e <quorem+0x106>
 8007f58:	613c      	str	r4, [r7, #16]
 8007f5a:	4630      	mov	r0, r6
 8007f5c:	b003      	add	sp, #12
 8007f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f62:	6812      	ldr	r2, [r2, #0]
 8007f64:	3b04      	subs	r3, #4
 8007f66:	2a00      	cmp	r2, #0
 8007f68:	d1cc      	bne.n	8007f04 <quorem+0x9c>
 8007f6a:	3c01      	subs	r4, #1
 8007f6c:	e7c7      	b.n	8007efe <quorem+0x96>
 8007f6e:	6812      	ldr	r2, [r2, #0]
 8007f70:	3b04      	subs	r3, #4
 8007f72:	2a00      	cmp	r2, #0
 8007f74:	d1f0      	bne.n	8007f58 <quorem+0xf0>
 8007f76:	3c01      	subs	r4, #1
 8007f78:	e7eb      	b.n	8007f52 <quorem+0xea>
 8007f7a:	2000      	movs	r0, #0
 8007f7c:	e7ee      	b.n	8007f5c <quorem+0xf4>
	...

08007f80 <_dtoa_r>:
 8007f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f84:	ed2d 8b02 	vpush	{d8}
 8007f88:	ec57 6b10 	vmov	r6, r7, d0
 8007f8c:	b095      	sub	sp, #84	; 0x54
 8007f8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f94:	9105      	str	r1, [sp, #20]
 8007f96:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fa0:	b975      	cbnz	r5, 8007fc0 <_dtoa_r+0x40>
 8007fa2:	2010      	movs	r0, #16
 8007fa4:	f7ff f92e 	bl	8007204 <malloc>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	6260      	str	r0, [r4, #36]	; 0x24
 8007fac:	b920      	cbnz	r0, 8007fb8 <_dtoa_r+0x38>
 8007fae:	4bb2      	ldr	r3, [pc, #712]	; (8008278 <_dtoa_r+0x2f8>)
 8007fb0:	21ea      	movs	r1, #234	; 0xea
 8007fb2:	48b2      	ldr	r0, [pc, #712]	; (800827c <_dtoa_r+0x2fc>)
 8007fb4:	f001 fbae 	bl	8009714 <__assert_func>
 8007fb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fbc:	6005      	str	r5, [r0, #0]
 8007fbe:	60c5      	str	r5, [r0, #12]
 8007fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fc2:	6819      	ldr	r1, [r3, #0]
 8007fc4:	b151      	cbz	r1, 8007fdc <_dtoa_r+0x5c>
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	604a      	str	r2, [r1, #4]
 8007fca:	2301      	movs	r3, #1
 8007fcc:	4093      	lsls	r3, r2
 8007fce:	608b      	str	r3, [r1, #8]
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	f000 fee5 	bl	8008da0 <_Bfree>
 8007fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fd8:	2200      	movs	r2, #0
 8007fda:	601a      	str	r2, [r3, #0]
 8007fdc:	1e3b      	subs	r3, r7, #0
 8007fde:	bfb9      	ittee	lt
 8007fe0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007fe4:	9303      	strlt	r3, [sp, #12]
 8007fe6:	2300      	movge	r3, #0
 8007fe8:	f8c8 3000 	strge.w	r3, [r8]
 8007fec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007ff0:	4ba3      	ldr	r3, [pc, #652]	; (8008280 <_dtoa_r+0x300>)
 8007ff2:	bfbc      	itt	lt
 8007ff4:	2201      	movlt	r2, #1
 8007ff6:	f8c8 2000 	strlt.w	r2, [r8]
 8007ffa:	ea33 0309 	bics.w	r3, r3, r9
 8007ffe:	d11b      	bne.n	8008038 <_dtoa_r+0xb8>
 8008000:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008002:	f242 730f 	movw	r3, #9999	; 0x270f
 8008006:	6013      	str	r3, [r2, #0]
 8008008:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800800c:	4333      	orrs	r3, r6
 800800e:	f000 857a 	beq.w	8008b06 <_dtoa_r+0xb86>
 8008012:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008014:	b963      	cbnz	r3, 8008030 <_dtoa_r+0xb0>
 8008016:	4b9b      	ldr	r3, [pc, #620]	; (8008284 <_dtoa_r+0x304>)
 8008018:	e024      	b.n	8008064 <_dtoa_r+0xe4>
 800801a:	4b9b      	ldr	r3, [pc, #620]	; (8008288 <_dtoa_r+0x308>)
 800801c:	9300      	str	r3, [sp, #0]
 800801e:	3308      	adds	r3, #8
 8008020:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008022:	6013      	str	r3, [r2, #0]
 8008024:	9800      	ldr	r0, [sp, #0]
 8008026:	b015      	add	sp, #84	; 0x54
 8008028:	ecbd 8b02 	vpop	{d8}
 800802c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008030:	4b94      	ldr	r3, [pc, #592]	; (8008284 <_dtoa_r+0x304>)
 8008032:	9300      	str	r3, [sp, #0]
 8008034:	3303      	adds	r3, #3
 8008036:	e7f3      	b.n	8008020 <_dtoa_r+0xa0>
 8008038:	ed9d 7b02 	vldr	d7, [sp, #8]
 800803c:	2200      	movs	r2, #0
 800803e:	ec51 0b17 	vmov	r0, r1, d7
 8008042:	2300      	movs	r3, #0
 8008044:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008048:	f7f8 fd5e 	bl	8000b08 <__aeabi_dcmpeq>
 800804c:	4680      	mov	r8, r0
 800804e:	b158      	cbz	r0, 8008068 <_dtoa_r+0xe8>
 8008050:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008052:	2301      	movs	r3, #1
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 8551 	beq.w	8008b00 <_dtoa_r+0xb80>
 800805e:	488b      	ldr	r0, [pc, #556]	; (800828c <_dtoa_r+0x30c>)
 8008060:	6018      	str	r0, [r3, #0]
 8008062:	1e43      	subs	r3, r0, #1
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	e7dd      	b.n	8008024 <_dtoa_r+0xa4>
 8008068:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800806c:	aa12      	add	r2, sp, #72	; 0x48
 800806e:	a913      	add	r1, sp, #76	; 0x4c
 8008070:	4620      	mov	r0, r4
 8008072:	f001 f977 	bl	8009364 <__d2b>
 8008076:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800807a:	4683      	mov	fp, r0
 800807c:	2d00      	cmp	r5, #0
 800807e:	d07c      	beq.n	800817a <_dtoa_r+0x1fa>
 8008080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008082:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008086:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800808a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800808e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008092:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008096:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800809a:	4b7d      	ldr	r3, [pc, #500]	; (8008290 <_dtoa_r+0x310>)
 800809c:	2200      	movs	r2, #0
 800809e:	4630      	mov	r0, r6
 80080a0:	4639      	mov	r1, r7
 80080a2:	f7f8 f911 	bl	80002c8 <__aeabi_dsub>
 80080a6:	a36e      	add	r3, pc, #440	; (adr r3, 8008260 <_dtoa_r+0x2e0>)
 80080a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ac:	f7f8 fac4 	bl	8000638 <__aeabi_dmul>
 80080b0:	a36d      	add	r3, pc, #436	; (adr r3, 8008268 <_dtoa_r+0x2e8>)
 80080b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b6:	f7f8 f909 	bl	80002cc <__adddf3>
 80080ba:	4606      	mov	r6, r0
 80080bc:	4628      	mov	r0, r5
 80080be:	460f      	mov	r7, r1
 80080c0:	f7f8 fa50 	bl	8000564 <__aeabi_i2d>
 80080c4:	a36a      	add	r3, pc, #424	; (adr r3, 8008270 <_dtoa_r+0x2f0>)
 80080c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ca:	f7f8 fab5 	bl	8000638 <__aeabi_dmul>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	4630      	mov	r0, r6
 80080d4:	4639      	mov	r1, r7
 80080d6:	f7f8 f8f9 	bl	80002cc <__adddf3>
 80080da:	4606      	mov	r6, r0
 80080dc:	460f      	mov	r7, r1
 80080de:	f7f8 fd5b 	bl	8000b98 <__aeabi_d2iz>
 80080e2:	2200      	movs	r2, #0
 80080e4:	4682      	mov	sl, r0
 80080e6:	2300      	movs	r3, #0
 80080e8:	4630      	mov	r0, r6
 80080ea:	4639      	mov	r1, r7
 80080ec:	f7f8 fd16 	bl	8000b1c <__aeabi_dcmplt>
 80080f0:	b148      	cbz	r0, 8008106 <_dtoa_r+0x186>
 80080f2:	4650      	mov	r0, sl
 80080f4:	f7f8 fa36 	bl	8000564 <__aeabi_i2d>
 80080f8:	4632      	mov	r2, r6
 80080fa:	463b      	mov	r3, r7
 80080fc:	f7f8 fd04 	bl	8000b08 <__aeabi_dcmpeq>
 8008100:	b908      	cbnz	r0, 8008106 <_dtoa_r+0x186>
 8008102:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008106:	f1ba 0f16 	cmp.w	sl, #22
 800810a:	d854      	bhi.n	80081b6 <_dtoa_r+0x236>
 800810c:	4b61      	ldr	r3, [pc, #388]	; (8008294 <_dtoa_r+0x314>)
 800810e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008116:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800811a:	f7f8 fcff 	bl	8000b1c <__aeabi_dcmplt>
 800811e:	2800      	cmp	r0, #0
 8008120:	d04b      	beq.n	80081ba <_dtoa_r+0x23a>
 8008122:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008126:	2300      	movs	r3, #0
 8008128:	930e      	str	r3, [sp, #56]	; 0x38
 800812a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800812c:	1b5d      	subs	r5, r3, r5
 800812e:	1e6b      	subs	r3, r5, #1
 8008130:	9304      	str	r3, [sp, #16]
 8008132:	bf43      	ittte	mi
 8008134:	2300      	movmi	r3, #0
 8008136:	f1c5 0801 	rsbmi	r8, r5, #1
 800813a:	9304      	strmi	r3, [sp, #16]
 800813c:	f04f 0800 	movpl.w	r8, #0
 8008140:	f1ba 0f00 	cmp.w	sl, #0
 8008144:	db3b      	blt.n	80081be <_dtoa_r+0x23e>
 8008146:	9b04      	ldr	r3, [sp, #16]
 8008148:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800814c:	4453      	add	r3, sl
 800814e:	9304      	str	r3, [sp, #16]
 8008150:	2300      	movs	r3, #0
 8008152:	9306      	str	r3, [sp, #24]
 8008154:	9b05      	ldr	r3, [sp, #20]
 8008156:	2b09      	cmp	r3, #9
 8008158:	d869      	bhi.n	800822e <_dtoa_r+0x2ae>
 800815a:	2b05      	cmp	r3, #5
 800815c:	bfc4      	itt	gt
 800815e:	3b04      	subgt	r3, #4
 8008160:	9305      	strgt	r3, [sp, #20]
 8008162:	9b05      	ldr	r3, [sp, #20]
 8008164:	f1a3 0302 	sub.w	r3, r3, #2
 8008168:	bfcc      	ite	gt
 800816a:	2500      	movgt	r5, #0
 800816c:	2501      	movle	r5, #1
 800816e:	2b03      	cmp	r3, #3
 8008170:	d869      	bhi.n	8008246 <_dtoa_r+0x2c6>
 8008172:	e8df f003 	tbb	[pc, r3]
 8008176:	4e2c      	.short	0x4e2c
 8008178:	5a4c      	.short	0x5a4c
 800817a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800817e:	441d      	add	r5, r3
 8008180:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008184:	2b20      	cmp	r3, #32
 8008186:	bfc1      	itttt	gt
 8008188:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800818c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008190:	fa09 f303 	lslgt.w	r3, r9, r3
 8008194:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008198:	bfda      	itte	le
 800819a:	f1c3 0320 	rsble	r3, r3, #32
 800819e:	fa06 f003 	lslle.w	r0, r6, r3
 80081a2:	4318      	orrgt	r0, r3
 80081a4:	f7f8 f9ce 	bl	8000544 <__aeabi_ui2d>
 80081a8:	2301      	movs	r3, #1
 80081aa:	4606      	mov	r6, r0
 80081ac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80081b0:	3d01      	subs	r5, #1
 80081b2:	9310      	str	r3, [sp, #64]	; 0x40
 80081b4:	e771      	b.n	800809a <_dtoa_r+0x11a>
 80081b6:	2301      	movs	r3, #1
 80081b8:	e7b6      	b.n	8008128 <_dtoa_r+0x1a8>
 80081ba:	900e      	str	r0, [sp, #56]	; 0x38
 80081bc:	e7b5      	b.n	800812a <_dtoa_r+0x1aa>
 80081be:	f1ca 0300 	rsb	r3, sl, #0
 80081c2:	9306      	str	r3, [sp, #24]
 80081c4:	2300      	movs	r3, #0
 80081c6:	eba8 080a 	sub.w	r8, r8, sl
 80081ca:	930d      	str	r3, [sp, #52]	; 0x34
 80081cc:	e7c2      	b.n	8008154 <_dtoa_r+0x1d4>
 80081ce:	2300      	movs	r3, #0
 80081d0:	9308      	str	r3, [sp, #32]
 80081d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	dc39      	bgt.n	800824c <_dtoa_r+0x2cc>
 80081d8:	f04f 0901 	mov.w	r9, #1
 80081dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80081e0:	464b      	mov	r3, r9
 80081e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80081e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80081e8:	2200      	movs	r2, #0
 80081ea:	6042      	str	r2, [r0, #4]
 80081ec:	2204      	movs	r2, #4
 80081ee:	f102 0614 	add.w	r6, r2, #20
 80081f2:	429e      	cmp	r6, r3
 80081f4:	6841      	ldr	r1, [r0, #4]
 80081f6:	d92f      	bls.n	8008258 <_dtoa_r+0x2d8>
 80081f8:	4620      	mov	r0, r4
 80081fa:	f000 fd91 	bl	8008d20 <_Balloc>
 80081fe:	9000      	str	r0, [sp, #0]
 8008200:	2800      	cmp	r0, #0
 8008202:	d14b      	bne.n	800829c <_dtoa_r+0x31c>
 8008204:	4b24      	ldr	r3, [pc, #144]	; (8008298 <_dtoa_r+0x318>)
 8008206:	4602      	mov	r2, r0
 8008208:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800820c:	e6d1      	b.n	8007fb2 <_dtoa_r+0x32>
 800820e:	2301      	movs	r3, #1
 8008210:	e7de      	b.n	80081d0 <_dtoa_r+0x250>
 8008212:	2300      	movs	r3, #0
 8008214:	9308      	str	r3, [sp, #32]
 8008216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008218:	eb0a 0903 	add.w	r9, sl, r3
 800821c:	f109 0301 	add.w	r3, r9, #1
 8008220:	2b01      	cmp	r3, #1
 8008222:	9301      	str	r3, [sp, #4]
 8008224:	bfb8      	it	lt
 8008226:	2301      	movlt	r3, #1
 8008228:	e7dd      	b.n	80081e6 <_dtoa_r+0x266>
 800822a:	2301      	movs	r3, #1
 800822c:	e7f2      	b.n	8008214 <_dtoa_r+0x294>
 800822e:	2501      	movs	r5, #1
 8008230:	2300      	movs	r3, #0
 8008232:	9305      	str	r3, [sp, #20]
 8008234:	9508      	str	r5, [sp, #32]
 8008236:	f04f 39ff 	mov.w	r9, #4294967295
 800823a:	2200      	movs	r2, #0
 800823c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008240:	2312      	movs	r3, #18
 8008242:	9209      	str	r2, [sp, #36]	; 0x24
 8008244:	e7cf      	b.n	80081e6 <_dtoa_r+0x266>
 8008246:	2301      	movs	r3, #1
 8008248:	9308      	str	r3, [sp, #32]
 800824a:	e7f4      	b.n	8008236 <_dtoa_r+0x2b6>
 800824c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008250:	f8cd 9004 	str.w	r9, [sp, #4]
 8008254:	464b      	mov	r3, r9
 8008256:	e7c6      	b.n	80081e6 <_dtoa_r+0x266>
 8008258:	3101      	adds	r1, #1
 800825a:	6041      	str	r1, [r0, #4]
 800825c:	0052      	lsls	r2, r2, #1
 800825e:	e7c6      	b.n	80081ee <_dtoa_r+0x26e>
 8008260:	636f4361 	.word	0x636f4361
 8008264:	3fd287a7 	.word	0x3fd287a7
 8008268:	8b60c8b3 	.word	0x8b60c8b3
 800826c:	3fc68a28 	.word	0x3fc68a28
 8008270:	509f79fb 	.word	0x509f79fb
 8008274:	3fd34413 	.word	0x3fd34413
 8008278:	0800a07d 	.word	0x0800a07d
 800827c:	0800a094 	.word	0x0800a094
 8008280:	7ff00000 	.word	0x7ff00000
 8008284:	0800a079 	.word	0x0800a079
 8008288:	0800a070 	.word	0x0800a070
 800828c:	0800a04d 	.word	0x0800a04d
 8008290:	3ff80000 	.word	0x3ff80000
 8008294:	0800a190 	.word	0x0800a190
 8008298:	0800a0f3 	.word	0x0800a0f3
 800829c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800829e:	9a00      	ldr	r2, [sp, #0]
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	9b01      	ldr	r3, [sp, #4]
 80082a4:	2b0e      	cmp	r3, #14
 80082a6:	f200 80ad 	bhi.w	8008404 <_dtoa_r+0x484>
 80082aa:	2d00      	cmp	r5, #0
 80082ac:	f000 80aa 	beq.w	8008404 <_dtoa_r+0x484>
 80082b0:	f1ba 0f00 	cmp.w	sl, #0
 80082b4:	dd36      	ble.n	8008324 <_dtoa_r+0x3a4>
 80082b6:	4ac3      	ldr	r2, [pc, #780]	; (80085c4 <_dtoa_r+0x644>)
 80082b8:	f00a 030f 	and.w	r3, sl, #15
 80082bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80082c0:	ed93 7b00 	vldr	d7, [r3]
 80082c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80082c8:	ea4f 172a 	mov.w	r7, sl, asr #4
 80082cc:	eeb0 8a47 	vmov.f32	s16, s14
 80082d0:	eef0 8a67 	vmov.f32	s17, s15
 80082d4:	d016      	beq.n	8008304 <_dtoa_r+0x384>
 80082d6:	4bbc      	ldr	r3, [pc, #752]	; (80085c8 <_dtoa_r+0x648>)
 80082d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80082dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082e0:	f7f8 fad4 	bl	800088c <__aeabi_ddiv>
 80082e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082e8:	f007 070f 	and.w	r7, r7, #15
 80082ec:	2503      	movs	r5, #3
 80082ee:	4eb6      	ldr	r6, [pc, #728]	; (80085c8 <_dtoa_r+0x648>)
 80082f0:	b957      	cbnz	r7, 8008308 <_dtoa_r+0x388>
 80082f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082f6:	ec53 2b18 	vmov	r2, r3, d8
 80082fa:	f7f8 fac7 	bl	800088c <__aeabi_ddiv>
 80082fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008302:	e029      	b.n	8008358 <_dtoa_r+0x3d8>
 8008304:	2502      	movs	r5, #2
 8008306:	e7f2      	b.n	80082ee <_dtoa_r+0x36e>
 8008308:	07f9      	lsls	r1, r7, #31
 800830a:	d508      	bpl.n	800831e <_dtoa_r+0x39e>
 800830c:	ec51 0b18 	vmov	r0, r1, d8
 8008310:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008314:	f7f8 f990 	bl	8000638 <__aeabi_dmul>
 8008318:	ec41 0b18 	vmov	d8, r0, r1
 800831c:	3501      	adds	r5, #1
 800831e:	107f      	asrs	r7, r7, #1
 8008320:	3608      	adds	r6, #8
 8008322:	e7e5      	b.n	80082f0 <_dtoa_r+0x370>
 8008324:	f000 80a6 	beq.w	8008474 <_dtoa_r+0x4f4>
 8008328:	f1ca 0600 	rsb	r6, sl, #0
 800832c:	4ba5      	ldr	r3, [pc, #660]	; (80085c4 <_dtoa_r+0x644>)
 800832e:	4fa6      	ldr	r7, [pc, #664]	; (80085c8 <_dtoa_r+0x648>)
 8008330:	f006 020f 	and.w	r2, r6, #15
 8008334:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008340:	f7f8 f97a 	bl	8000638 <__aeabi_dmul>
 8008344:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008348:	1136      	asrs	r6, r6, #4
 800834a:	2300      	movs	r3, #0
 800834c:	2502      	movs	r5, #2
 800834e:	2e00      	cmp	r6, #0
 8008350:	f040 8085 	bne.w	800845e <_dtoa_r+0x4de>
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1d2      	bne.n	80082fe <_dtoa_r+0x37e>
 8008358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800835a:	2b00      	cmp	r3, #0
 800835c:	f000 808c 	beq.w	8008478 <_dtoa_r+0x4f8>
 8008360:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008364:	4b99      	ldr	r3, [pc, #612]	; (80085cc <_dtoa_r+0x64c>)
 8008366:	2200      	movs	r2, #0
 8008368:	4630      	mov	r0, r6
 800836a:	4639      	mov	r1, r7
 800836c:	f7f8 fbd6 	bl	8000b1c <__aeabi_dcmplt>
 8008370:	2800      	cmp	r0, #0
 8008372:	f000 8081 	beq.w	8008478 <_dtoa_r+0x4f8>
 8008376:	9b01      	ldr	r3, [sp, #4]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d07d      	beq.n	8008478 <_dtoa_r+0x4f8>
 800837c:	f1b9 0f00 	cmp.w	r9, #0
 8008380:	dd3c      	ble.n	80083fc <_dtoa_r+0x47c>
 8008382:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008386:	9307      	str	r3, [sp, #28]
 8008388:	2200      	movs	r2, #0
 800838a:	4b91      	ldr	r3, [pc, #580]	; (80085d0 <_dtoa_r+0x650>)
 800838c:	4630      	mov	r0, r6
 800838e:	4639      	mov	r1, r7
 8008390:	f7f8 f952 	bl	8000638 <__aeabi_dmul>
 8008394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008398:	3501      	adds	r5, #1
 800839a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800839e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80083a2:	4628      	mov	r0, r5
 80083a4:	f7f8 f8de 	bl	8000564 <__aeabi_i2d>
 80083a8:	4632      	mov	r2, r6
 80083aa:	463b      	mov	r3, r7
 80083ac:	f7f8 f944 	bl	8000638 <__aeabi_dmul>
 80083b0:	4b88      	ldr	r3, [pc, #544]	; (80085d4 <_dtoa_r+0x654>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	f7f7 ff8a 	bl	80002cc <__adddf3>
 80083b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80083bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083c0:	9303      	str	r3, [sp, #12]
 80083c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d15c      	bne.n	8008482 <_dtoa_r+0x502>
 80083c8:	4b83      	ldr	r3, [pc, #524]	; (80085d8 <_dtoa_r+0x658>)
 80083ca:	2200      	movs	r2, #0
 80083cc:	4630      	mov	r0, r6
 80083ce:	4639      	mov	r1, r7
 80083d0:	f7f7 ff7a 	bl	80002c8 <__aeabi_dsub>
 80083d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083d8:	4606      	mov	r6, r0
 80083da:	460f      	mov	r7, r1
 80083dc:	f7f8 fbbc 	bl	8000b58 <__aeabi_dcmpgt>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	f040 8296 	bne.w	8008912 <_dtoa_r+0x992>
 80083e6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80083ea:	4630      	mov	r0, r6
 80083ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083f0:	4639      	mov	r1, r7
 80083f2:	f7f8 fb93 	bl	8000b1c <__aeabi_dcmplt>
 80083f6:	2800      	cmp	r0, #0
 80083f8:	f040 8288 	bne.w	800890c <_dtoa_r+0x98c>
 80083fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008400:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008404:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008406:	2b00      	cmp	r3, #0
 8008408:	f2c0 8158 	blt.w	80086bc <_dtoa_r+0x73c>
 800840c:	f1ba 0f0e 	cmp.w	sl, #14
 8008410:	f300 8154 	bgt.w	80086bc <_dtoa_r+0x73c>
 8008414:	4b6b      	ldr	r3, [pc, #428]	; (80085c4 <_dtoa_r+0x644>)
 8008416:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800841a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800841e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008420:	2b00      	cmp	r3, #0
 8008422:	f280 80e3 	bge.w	80085ec <_dtoa_r+0x66c>
 8008426:	9b01      	ldr	r3, [sp, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	f300 80df 	bgt.w	80085ec <_dtoa_r+0x66c>
 800842e:	f040 826d 	bne.w	800890c <_dtoa_r+0x98c>
 8008432:	4b69      	ldr	r3, [pc, #420]	; (80085d8 <_dtoa_r+0x658>)
 8008434:	2200      	movs	r2, #0
 8008436:	4640      	mov	r0, r8
 8008438:	4649      	mov	r1, r9
 800843a:	f7f8 f8fd 	bl	8000638 <__aeabi_dmul>
 800843e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008442:	f7f8 fb7f 	bl	8000b44 <__aeabi_dcmpge>
 8008446:	9e01      	ldr	r6, [sp, #4]
 8008448:	4637      	mov	r7, r6
 800844a:	2800      	cmp	r0, #0
 800844c:	f040 8243 	bne.w	80088d6 <_dtoa_r+0x956>
 8008450:	9d00      	ldr	r5, [sp, #0]
 8008452:	2331      	movs	r3, #49	; 0x31
 8008454:	f805 3b01 	strb.w	r3, [r5], #1
 8008458:	f10a 0a01 	add.w	sl, sl, #1
 800845c:	e23f      	b.n	80088de <_dtoa_r+0x95e>
 800845e:	07f2      	lsls	r2, r6, #31
 8008460:	d505      	bpl.n	800846e <_dtoa_r+0x4ee>
 8008462:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008466:	f7f8 f8e7 	bl	8000638 <__aeabi_dmul>
 800846a:	3501      	adds	r5, #1
 800846c:	2301      	movs	r3, #1
 800846e:	1076      	asrs	r6, r6, #1
 8008470:	3708      	adds	r7, #8
 8008472:	e76c      	b.n	800834e <_dtoa_r+0x3ce>
 8008474:	2502      	movs	r5, #2
 8008476:	e76f      	b.n	8008358 <_dtoa_r+0x3d8>
 8008478:	9b01      	ldr	r3, [sp, #4]
 800847a:	f8cd a01c 	str.w	sl, [sp, #28]
 800847e:	930c      	str	r3, [sp, #48]	; 0x30
 8008480:	e78d      	b.n	800839e <_dtoa_r+0x41e>
 8008482:	9900      	ldr	r1, [sp, #0]
 8008484:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008486:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008488:	4b4e      	ldr	r3, [pc, #312]	; (80085c4 <_dtoa_r+0x644>)
 800848a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800848e:	4401      	add	r1, r0
 8008490:	9102      	str	r1, [sp, #8]
 8008492:	9908      	ldr	r1, [sp, #32]
 8008494:	eeb0 8a47 	vmov.f32	s16, s14
 8008498:	eef0 8a67 	vmov.f32	s17, s15
 800849c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80084a4:	2900      	cmp	r1, #0
 80084a6:	d045      	beq.n	8008534 <_dtoa_r+0x5b4>
 80084a8:	494c      	ldr	r1, [pc, #304]	; (80085dc <_dtoa_r+0x65c>)
 80084aa:	2000      	movs	r0, #0
 80084ac:	f7f8 f9ee 	bl	800088c <__aeabi_ddiv>
 80084b0:	ec53 2b18 	vmov	r2, r3, d8
 80084b4:	f7f7 ff08 	bl	80002c8 <__aeabi_dsub>
 80084b8:	9d00      	ldr	r5, [sp, #0]
 80084ba:	ec41 0b18 	vmov	d8, r0, r1
 80084be:	4639      	mov	r1, r7
 80084c0:	4630      	mov	r0, r6
 80084c2:	f7f8 fb69 	bl	8000b98 <__aeabi_d2iz>
 80084c6:	900c      	str	r0, [sp, #48]	; 0x30
 80084c8:	f7f8 f84c 	bl	8000564 <__aeabi_i2d>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4630      	mov	r0, r6
 80084d2:	4639      	mov	r1, r7
 80084d4:	f7f7 fef8 	bl	80002c8 <__aeabi_dsub>
 80084d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084da:	3330      	adds	r3, #48	; 0x30
 80084dc:	f805 3b01 	strb.w	r3, [r5], #1
 80084e0:	ec53 2b18 	vmov	r2, r3, d8
 80084e4:	4606      	mov	r6, r0
 80084e6:	460f      	mov	r7, r1
 80084e8:	f7f8 fb18 	bl	8000b1c <__aeabi_dcmplt>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	d165      	bne.n	80085bc <_dtoa_r+0x63c>
 80084f0:	4632      	mov	r2, r6
 80084f2:	463b      	mov	r3, r7
 80084f4:	4935      	ldr	r1, [pc, #212]	; (80085cc <_dtoa_r+0x64c>)
 80084f6:	2000      	movs	r0, #0
 80084f8:	f7f7 fee6 	bl	80002c8 <__aeabi_dsub>
 80084fc:	ec53 2b18 	vmov	r2, r3, d8
 8008500:	f7f8 fb0c 	bl	8000b1c <__aeabi_dcmplt>
 8008504:	2800      	cmp	r0, #0
 8008506:	f040 80b9 	bne.w	800867c <_dtoa_r+0x6fc>
 800850a:	9b02      	ldr	r3, [sp, #8]
 800850c:	429d      	cmp	r5, r3
 800850e:	f43f af75 	beq.w	80083fc <_dtoa_r+0x47c>
 8008512:	4b2f      	ldr	r3, [pc, #188]	; (80085d0 <_dtoa_r+0x650>)
 8008514:	ec51 0b18 	vmov	r0, r1, d8
 8008518:	2200      	movs	r2, #0
 800851a:	f7f8 f88d 	bl	8000638 <__aeabi_dmul>
 800851e:	4b2c      	ldr	r3, [pc, #176]	; (80085d0 <_dtoa_r+0x650>)
 8008520:	ec41 0b18 	vmov	d8, r0, r1
 8008524:	2200      	movs	r2, #0
 8008526:	4630      	mov	r0, r6
 8008528:	4639      	mov	r1, r7
 800852a:	f7f8 f885 	bl	8000638 <__aeabi_dmul>
 800852e:	4606      	mov	r6, r0
 8008530:	460f      	mov	r7, r1
 8008532:	e7c4      	b.n	80084be <_dtoa_r+0x53e>
 8008534:	ec51 0b17 	vmov	r0, r1, d7
 8008538:	f7f8 f87e 	bl	8000638 <__aeabi_dmul>
 800853c:	9b02      	ldr	r3, [sp, #8]
 800853e:	9d00      	ldr	r5, [sp, #0]
 8008540:	930c      	str	r3, [sp, #48]	; 0x30
 8008542:	ec41 0b18 	vmov	d8, r0, r1
 8008546:	4639      	mov	r1, r7
 8008548:	4630      	mov	r0, r6
 800854a:	f7f8 fb25 	bl	8000b98 <__aeabi_d2iz>
 800854e:	9011      	str	r0, [sp, #68]	; 0x44
 8008550:	f7f8 f808 	bl	8000564 <__aeabi_i2d>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	4630      	mov	r0, r6
 800855a:	4639      	mov	r1, r7
 800855c:	f7f7 feb4 	bl	80002c8 <__aeabi_dsub>
 8008560:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008562:	3330      	adds	r3, #48	; 0x30
 8008564:	f805 3b01 	strb.w	r3, [r5], #1
 8008568:	9b02      	ldr	r3, [sp, #8]
 800856a:	429d      	cmp	r5, r3
 800856c:	4606      	mov	r6, r0
 800856e:	460f      	mov	r7, r1
 8008570:	f04f 0200 	mov.w	r2, #0
 8008574:	d134      	bne.n	80085e0 <_dtoa_r+0x660>
 8008576:	4b19      	ldr	r3, [pc, #100]	; (80085dc <_dtoa_r+0x65c>)
 8008578:	ec51 0b18 	vmov	r0, r1, d8
 800857c:	f7f7 fea6 	bl	80002cc <__adddf3>
 8008580:	4602      	mov	r2, r0
 8008582:	460b      	mov	r3, r1
 8008584:	4630      	mov	r0, r6
 8008586:	4639      	mov	r1, r7
 8008588:	f7f8 fae6 	bl	8000b58 <__aeabi_dcmpgt>
 800858c:	2800      	cmp	r0, #0
 800858e:	d175      	bne.n	800867c <_dtoa_r+0x6fc>
 8008590:	ec53 2b18 	vmov	r2, r3, d8
 8008594:	4911      	ldr	r1, [pc, #68]	; (80085dc <_dtoa_r+0x65c>)
 8008596:	2000      	movs	r0, #0
 8008598:	f7f7 fe96 	bl	80002c8 <__aeabi_dsub>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	4630      	mov	r0, r6
 80085a2:	4639      	mov	r1, r7
 80085a4:	f7f8 faba 	bl	8000b1c <__aeabi_dcmplt>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	f43f af27 	beq.w	80083fc <_dtoa_r+0x47c>
 80085ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085b0:	1e6b      	subs	r3, r5, #1
 80085b2:	930c      	str	r3, [sp, #48]	; 0x30
 80085b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80085b8:	2b30      	cmp	r3, #48	; 0x30
 80085ba:	d0f8      	beq.n	80085ae <_dtoa_r+0x62e>
 80085bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80085c0:	e04a      	b.n	8008658 <_dtoa_r+0x6d8>
 80085c2:	bf00      	nop
 80085c4:	0800a190 	.word	0x0800a190
 80085c8:	0800a168 	.word	0x0800a168
 80085cc:	3ff00000 	.word	0x3ff00000
 80085d0:	40240000 	.word	0x40240000
 80085d4:	401c0000 	.word	0x401c0000
 80085d8:	40140000 	.word	0x40140000
 80085dc:	3fe00000 	.word	0x3fe00000
 80085e0:	4baf      	ldr	r3, [pc, #700]	; (80088a0 <_dtoa_r+0x920>)
 80085e2:	f7f8 f829 	bl	8000638 <__aeabi_dmul>
 80085e6:	4606      	mov	r6, r0
 80085e8:	460f      	mov	r7, r1
 80085ea:	e7ac      	b.n	8008546 <_dtoa_r+0x5c6>
 80085ec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80085f0:	9d00      	ldr	r5, [sp, #0]
 80085f2:	4642      	mov	r2, r8
 80085f4:	464b      	mov	r3, r9
 80085f6:	4630      	mov	r0, r6
 80085f8:	4639      	mov	r1, r7
 80085fa:	f7f8 f947 	bl	800088c <__aeabi_ddiv>
 80085fe:	f7f8 facb 	bl	8000b98 <__aeabi_d2iz>
 8008602:	9002      	str	r0, [sp, #8]
 8008604:	f7f7 ffae 	bl	8000564 <__aeabi_i2d>
 8008608:	4642      	mov	r2, r8
 800860a:	464b      	mov	r3, r9
 800860c:	f7f8 f814 	bl	8000638 <__aeabi_dmul>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	4630      	mov	r0, r6
 8008616:	4639      	mov	r1, r7
 8008618:	f7f7 fe56 	bl	80002c8 <__aeabi_dsub>
 800861c:	9e02      	ldr	r6, [sp, #8]
 800861e:	9f01      	ldr	r7, [sp, #4]
 8008620:	3630      	adds	r6, #48	; 0x30
 8008622:	f805 6b01 	strb.w	r6, [r5], #1
 8008626:	9e00      	ldr	r6, [sp, #0]
 8008628:	1bae      	subs	r6, r5, r6
 800862a:	42b7      	cmp	r7, r6
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	d137      	bne.n	80086a2 <_dtoa_r+0x722>
 8008632:	f7f7 fe4b 	bl	80002cc <__adddf3>
 8008636:	4642      	mov	r2, r8
 8008638:	464b      	mov	r3, r9
 800863a:	4606      	mov	r6, r0
 800863c:	460f      	mov	r7, r1
 800863e:	f7f8 fa8b 	bl	8000b58 <__aeabi_dcmpgt>
 8008642:	b9c8      	cbnz	r0, 8008678 <_dtoa_r+0x6f8>
 8008644:	4642      	mov	r2, r8
 8008646:	464b      	mov	r3, r9
 8008648:	4630      	mov	r0, r6
 800864a:	4639      	mov	r1, r7
 800864c:	f7f8 fa5c 	bl	8000b08 <__aeabi_dcmpeq>
 8008650:	b110      	cbz	r0, 8008658 <_dtoa_r+0x6d8>
 8008652:	9b02      	ldr	r3, [sp, #8]
 8008654:	07d9      	lsls	r1, r3, #31
 8008656:	d40f      	bmi.n	8008678 <_dtoa_r+0x6f8>
 8008658:	4620      	mov	r0, r4
 800865a:	4659      	mov	r1, fp
 800865c:	f000 fba0 	bl	8008da0 <_Bfree>
 8008660:	2300      	movs	r3, #0
 8008662:	702b      	strb	r3, [r5, #0]
 8008664:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008666:	f10a 0001 	add.w	r0, sl, #1
 800866a:	6018      	str	r0, [r3, #0]
 800866c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800866e:	2b00      	cmp	r3, #0
 8008670:	f43f acd8 	beq.w	8008024 <_dtoa_r+0xa4>
 8008674:	601d      	str	r5, [r3, #0]
 8008676:	e4d5      	b.n	8008024 <_dtoa_r+0xa4>
 8008678:	f8cd a01c 	str.w	sl, [sp, #28]
 800867c:	462b      	mov	r3, r5
 800867e:	461d      	mov	r5, r3
 8008680:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008684:	2a39      	cmp	r2, #57	; 0x39
 8008686:	d108      	bne.n	800869a <_dtoa_r+0x71a>
 8008688:	9a00      	ldr	r2, [sp, #0]
 800868a:	429a      	cmp	r2, r3
 800868c:	d1f7      	bne.n	800867e <_dtoa_r+0x6fe>
 800868e:	9a07      	ldr	r2, [sp, #28]
 8008690:	9900      	ldr	r1, [sp, #0]
 8008692:	3201      	adds	r2, #1
 8008694:	9207      	str	r2, [sp, #28]
 8008696:	2230      	movs	r2, #48	; 0x30
 8008698:	700a      	strb	r2, [r1, #0]
 800869a:	781a      	ldrb	r2, [r3, #0]
 800869c:	3201      	adds	r2, #1
 800869e:	701a      	strb	r2, [r3, #0]
 80086a0:	e78c      	b.n	80085bc <_dtoa_r+0x63c>
 80086a2:	4b7f      	ldr	r3, [pc, #508]	; (80088a0 <_dtoa_r+0x920>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	f7f7 ffc7 	bl	8000638 <__aeabi_dmul>
 80086aa:	2200      	movs	r2, #0
 80086ac:	2300      	movs	r3, #0
 80086ae:	4606      	mov	r6, r0
 80086b0:	460f      	mov	r7, r1
 80086b2:	f7f8 fa29 	bl	8000b08 <__aeabi_dcmpeq>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d09b      	beq.n	80085f2 <_dtoa_r+0x672>
 80086ba:	e7cd      	b.n	8008658 <_dtoa_r+0x6d8>
 80086bc:	9a08      	ldr	r2, [sp, #32]
 80086be:	2a00      	cmp	r2, #0
 80086c0:	f000 80c4 	beq.w	800884c <_dtoa_r+0x8cc>
 80086c4:	9a05      	ldr	r2, [sp, #20]
 80086c6:	2a01      	cmp	r2, #1
 80086c8:	f300 80a8 	bgt.w	800881c <_dtoa_r+0x89c>
 80086cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086ce:	2a00      	cmp	r2, #0
 80086d0:	f000 80a0 	beq.w	8008814 <_dtoa_r+0x894>
 80086d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086d8:	9e06      	ldr	r6, [sp, #24]
 80086da:	4645      	mov	r5, r8
 80086dc:	9a04      	ldr	r2, [sp, #16]
 80086de:	2101      	movs	r1, #1
 80086e0:	441a      	add	r2, r3
 80086e2:	4620      	mov	r0, r4
 80086e4:	4498      	add	r8, r3
 80086e6:	9204      	str	r2, [sp, #16]
 80086e8:	f000 fc16 	bl	8008f18 <__i2b>
 80086ec:	4607      	mov	r7, r0
 80086ee:	2d00      	cmp	r5, #0
 80086f0:	dd0b      	ble.n	800870a <_dtoa_r+0x78a>
 80086f2:	9b04      	ldr	r3, [sp, #16]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	dd08      	ble.n	800870a <_dtoa_r+0x78a>
 80086f8:	42ab      	cmp	r3, r5
 80086fa:	9a04      	ldr	r2, [sp, #16]
 80086fc:	bfa8      	it	ge
 80086fe:	462b      	movge	r3, r5
 8008700:	eba8 0803 	sub.w	r8, r8, r3
 8008704:	1aed      	subs	r5, r5, r3
 8008706:	1ad3      	subs	r3, r2, r3
 8008708:	9304      	str	r3, [sp, #16]
 800870a:	9b06      	ldr	r3, [sp, #24]
 800870c:	b1fb      	cbz	r3, 800874e <_dtoa_r+0x7ce>
 800870e:	9b08      	ldr	r3, [sp, #32]
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 809f 	beq.w	8008854 <_dtoa_r+0x8d4>
 8008716:	2e00      	cmp	r6, #0
 8008718:	dd11      	ble.n	800873e <_dtoa_r+0x7be>
 800871a:	4639      	mov	r1, r7
 800871c:	4632      	mov	r2, r6
 800871e:	4620      	mov	r0, r4
 8008720:	f000 fcb6 	bl	8009090 <__pow5mult>
 8008724:	465a      	mov	r2, fp
 8008726:	4601      	mov	r1, r0
 8008728:	4607      	mov	r7, r0
 800872a:	4620      	mov	r0, r4
 800872c:	f000 fc0a 	bl	8008f44 <__multiply>
 8008730:	4659      	mov	r1, fp
 8008732:	9007      	str	r0, [sp, #28]
 8008734:	4620      	mov	r0, r4
 8008736:	f000 fb33 	bl	8008da0 <_Bfree>
 800873a:	9b07      	ldr	r3, [sp, #28]
 800873c:	469b      	mov	fp, r3
 800873e:	9b06      	ldr	r3, [sp, #24]
 8008740:	1b9a      	subs	r2, r3, r6
 8008742:	d004      	beq.n	800874e <_dtoa_r+0x7ce>
 8008744:	4659      	mov	r1, fp
 8008746:	4620      	mov	r0, r4
 8008748:	f000 fca2 	bl	8009090 <__pow5mult>
 800874c:	4683      	mov	fp, r0
 800874e:	2101      	movs	r1, #1
 8008750:	4620      	mov	r0, r4
 8008752:	f000 fbe1 	bl	8008f18 <__i2b>
 8008756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008758:	2b00      	cmp	r3, #0
 800875a:	4606      	mov	r6, r0
 800875c:	dd7c      	ble.n	8008858 <_dtoa_r+0x8d8>
 800875e:	461a      	mov	r2, r3
 8008760:	4601      	mov	r1, r0
 8008762:	4620      	mov	r0, r4
 8008764:	f000 fc94 	bl	8009090 <__pow5mult>
 8008768:	9b05      	ldr	r3, [sp, #20]
 800876a:	2b01      	cmp	r3, #1
 800876c:	4606      	mov	r6, r0
 800876e:	dd76      	ble.n	800885e <_dtoa_r+0x8de>
 8008770:	2300      	movs	r3, #0
 8008772:	9306      	str	r3, [sp, #24]
 8008774:	6933      	ldr	r3, [r6, #16]
 8008776:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800877a:	6918      	ldr	r0, [r3, #16]
 800877c:	f000 fb7c 	bl	8008e78 <__hi0bits>
 8008780:	f1c0 0020 	rsb	r0, r0, #32
 8008784:	9b04      	ldr	r3, [sp, #16]
 8008786:	4418      	add	r0, r3
 8008788:	f010 001f 	ands.w	r0, r0, #31
 800878c:	f000 8086 	beq.w	800889c <_dtoa_r+0x91c>
 8008790:	f1c0 0320 	rsb	r3, r0, #32
 8008794:	2b04      	cmp	r3, #4
 8008796:	dd7f      	ble.n	8008898 <_dtoa_r+0x918>
 8008798:	f1c0 001c 	rsb	r0, r0, #28
 800879c:	9b04      	ldr	r3, [sp, #16]
 800879e:	4403      	add	r3, r0
 80087a0:	4480      	add	r8, r0
 80087a2:	4405      	add	r5, r0
 80087a4:	9304      	str	r3, [sp, #16]
 80087a6:	f1b8 0f00 	cmp.w	r8, #0
 80087aa:	dd05      	ble.n	80087b8 <_dtoa_r+0x838>
 80087ac:	4659      	mov	r1, fp
 80087ae:	4642      	mov	r2, r8
 80087b0:	4620      	mov	r0, r4
 80087b2:	f000 fcc7 	bl	8009144 <__lshift>
 80087b6:	4683      	mov	fp, r0
 80087b8:	9b04      	ldr	r3, [sp, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	dd05      	ble.n	80087ca <_dtoa_r+0x84a>
 80087be:	4631      	mov	r1, r6
 80087c0:	461a      	mov	r2, r3
 80087c2:	4620      	mov	r0, r4
 80087c4:	f000 fcbe 	bl	8009144 <__lshift>
 80087c8:	4606      	mov	r6, r0
 80087ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d069      	beq.n	80088a4 <_dtoa_r+0x924>
 80087d0:	4631      	mov	r1, r6
 80087d2:	4658      	mov	r0, fp
 80087d4:	f000 fd22 	bl	800921c <__mcmp>
 80087d8:	2800      	cmp	r0, #0
 80087da:	da63      	bge.n	80088a4 <_dtoa_r+0x924>
 80087dc:	2300      	movs	r3, #0
 80087de:	4659      	mov	r1, fp
 80087e0:	220a      	movs	r2, #10
 80087e2:	4620      	mov	r0, r4
 80087e4:	f000 fafe 	bl	8008de4 <__multadd>
 80087e8:	9b08      	ldr	r3, [sp, #32]
 80087ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087ee:	4683      	mov	fp, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f000 818f 	beq.w	8008b14 <_dtoa_r+0xb94>
 80087f6:	4639      	mov	r1, r7
 80087f8:	2300      	movs	r3, #0
 80087fa:	220a      	movs	r2, #10
 80087fc:	4620      	mov	r0, r4
 80087fe:	f000 faf1 	bl	8008de4 <__multadd>
 8008802:	f1b9 0f00 	cmp.w	r9, #0
 8008806:	4607      	mov	r7, r0
 8008808:	f300 808e 	bgt.w	8008928 <_dtoa_r+0x9a8>
 800880c:	9b05      	ldr	r3, [sp, #20]
 800880e:	2b02      	cmp	r3, #2
 8008810:	dc50      	bgt.n	80088b4 <_dtoa_r+0x934>
 8008812:	e089      	b.n	8008928 <_dtoa_r+0x9a8>
 8008814:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008816:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800881a:	e75d      	b.n	80086d8 <_dtoa_r+0x758>
 800881c:	9b01      	ldr	r3, [sp, #4]
 800881e:	1e5e      	subs	r6, r3, #1
 8008820:	9b06      	ldr	r3, [sp, #24]
 8008822:	42b3      	cmp	r3, r6
 8008824:	bfbf      	itttt	lt
 8008826:	9b06      	ldrlt	r3, [sp, #24]
 8008828:	9606      	strlt	r6, [sp, #24]
 800882a:	1af2      	sublt	r2, r6, r3
 800882c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800882e:	bfb6      	itet	lt
 8008830:	189b      	addlt	r3, r3, r2
 8008832:	1b9e      	subge	r6, r3, r6
 8008834:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008836:	9b01      	ldr	r3, [sp, #4]
 8008838:	bfb8      	it	lt
 800883a:	2600      	movlt	r6, #0
 800883c:	2b00      	cmp	r3, #0
 800883e:	bfb5      	itete	lt
 8008840:	eba8 0503 	sublt.w	r5, r8, r3
 8008844:	9b01      	ldrge	r3, [sp, #4]
 8008846:	2300      	movlt	r3, #0
 8008848:	4645      	movge	r5, r8
 800884a:	e747      	b.n	80086dc <_dtoa_r+0x75c>
 800884c:	9e06      	ldr	r6, [sp, #24]
 800884e:	9f08      	ldr	r7, [sp, #32]
 8008850:	4645      	mov	r5, r8
 8008852:	e74c      	b.n	80086ee <_dtoa_r+0x76e>
 8008854:	9a06      	ldr	r2, [sp, #24]
 8008856:	e775      	b.n	8008744 <_dtoa_r+0x7c4>
 8008858:	9b05      	ldr	r3, [sp, #20]
 800885a:	2b01      	cmp	r3, #1
 800885c:	dc18      	bgt.n	8008890 <_dtoa_r+0x910>
 800885e:	9b02      	ldr	r3, [sp, #8]
 8008860:	b9b3      	cbnz	r3, 8008890 <_dtoa_r+0x910>
 8008862:	9b03      	ldr	r3, [sp, #12]
 8008864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008868:	b9a3      	cbnz	r3, 8008894 <_dtoa_r+0x914>
 800886a:	9b03      	ldr	r3, [sp, #12]
 800886c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008870:	0d1b      	lsrs	r3, r3, #20
 8008872:	051b      	lsls	r3, r3, #20
 8008874:	b12b      	cbz	r3, 8008882 <_dtoa_r+0x902>
 8008876:	9b04      	ldr	r3, [sp, #16]
 8008878:	3301      	adds	r3, #1
 800887a:	9304      	str	r3, [sp, #16]
 800887c:	f108 0801 	add.w	r8, r8, #1
 8008880:	2301      	movs	r3, #1
 8008882:	9306      	str	r3, [sp, #24]
 8008884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008886:	2b00      	cmp	r3, #0
 8008888:	f47f af74 	bne.w	8008774 <_dtoa_r+0x7f4>
 800888c:	2001      	movs	r0, #1
 800888e:	e779      	b.n	8008784 <_dtoa_r+0x804>
 8008890:	2300      	movs	r3, #0
 8008892:	e7f6      	b.n	8008882 <_dtoa_r+0x902>
 8008894:	9b02      	ldr	r3, [sp, #8]
 8008896:	e7f4      	b.n	8008882 <_dtoa_r+0x902>
 8008898:	d085      	beq.n	80087a6 <_dtoa_r+0x826>
 800889a:	4618      	mov	r0, r3
 800889c:	301c      	adds	r0, #28
 800889e:	e77d      	b.n	800879c <_dtoa_r+0x81c>
 80088a0:	40240000 	.word	0x40240000
 80088a4:	9b01      	ldr	r3, [sp, #4]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	dc38      	bgt.n	800891c <_dtoa_r+0x99c>
 80088aa:	9b05      	ldr	r3, [sp, #20]
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	dd35      	ble.n	800891c <_dtoa_r+0x99c>
 80088b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80088b4:	f1b9 0f00 	cmp.w	r9, #0
 80088b8:	d10d      	bne.n	80088d6 <_dtoa_r+0x956>
 80088ba:	4631      	mov	r1, r6
 80088bc:	464b      	mov	r3, r9
 80088be:	2205      	movs	r2, #5
 80088c0:	4620      	mov	r0, r4
 80088c2:	f000 fa8f 	bl	8008de4 <__multadd>
 80088c6:	4601      	mov	r1, r0
 80088c8:	4606      	mov	r6, r0
 80088ca:	4658      	mov	r0, fp
 80088cc:	f000 fca6 	bl	800921c <__mcmp>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	f73f adbd 	bgt.w	8008450 <_dtoa_r+0x4d0>
 80088d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d8:	9d00      	ldr	r5, [sp, #0]
 80088da:	ea6f 0a03 	mvn.w	sl, r3
 80088de:	f04f 0800 	mov.w	r8, #0
 80088e2:	4631      	mov	r1, r6
 80088e4:	4620      	mov	r0, r4
 80088e6:	f000 fa5b 	bl	8008da0 <_Bfree>
 80088ea:	2f00      	cmp	r7, #0
 80088ec:	f43f aeb4 	beq.w	8008658 <_dtoa_r+0x6d8>
 80088f0:	f1b8 0f00 	cmp.w	r8, #0
 80088f4:	d005      	beq.n	8008902 <_dtoa_r+0x982>
 80088f6:	45b8      	cmp	r8, r7
 80088f8:	d003      	beq.n	8008902 <_dtoa_r+0x982>
 80088fa:	4641      	mov	r1, r8
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 fa4f 	bl	8008da0 <_Bfree>
 8008902:	4639      	mov	r1, r7
 8008904:	4620      	mov	r0, r4
 8008906:	f000 fa4b 	bl	8008da0 <_Bfree>
 800890a:	e6a5      	b.n	8008658 <_dtoa_r+0x6d8>
 800890c:	2600      	movs	r6, #0
 800890e:	4637      	mov	r7, r6
 8008910:	e7e1      	b.n	80088d6 <_dtoa_r+0x956>
 8008912:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008914:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008918:	4637      	mov	r7, r6
 800891a:	e599      	b.n	8008450 <_dtoa_r+0x4d0>
 800891c:	9b08      	ldr	r3, [sp, #32]
 800891e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	f000 80fd 	beq.w	8008b22 <_dtoa_r+0xba2>
 8008928:	2d00      	cmp	r5, #0
 800892a:	dd05      	ble.n	8008938 <_dtoa_r+0x9b8>
 800892c:	4639      	mov	r1, r7
 800892e:	462a      	mov	r2, r5
 8008930:	4620      	mov	r0, r4
 8008932:	f000 fc07 	bl	8009144 <__lshift>
 8008936:	4607      	mov	r7, r0
 8008938:	9b06      	ldr	r3, [sp, #24]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d05c      	beq.n	80089f8 <_dtoa_r+0xa78>
 800893e:	6879      	ldr	r1, [r7, #4]
 8008940:	4620      	mov	r0, r4
 8008942:	f000 f9ed 	bl	8008d20 <_Balloc>
 8008946:	4605      	mov	r5, r0
 8008948:	b928      	cbnz	r0, 8008956 <_dtoa_r+0x9d6>
 800894a:	4b80      	ldr	r3, [pc, #512]	; (8008b4c <_dtoa_r+0xbcc>)
 800894c:	4602      	mov	r2, r0
 800894e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008952:	f7ff bb2e 	b.w	8007fb2 <_dtoa_r+0x32>
 8008956:	693a      	ldr	r2, [r7, #16]
 8008958:	3202      	adds	r2, #2
 800895a:	0092      	lsls	r2, r2, #2
 800895c:	f107 010c 	add.w	r1, r7, #12
 8008960:	300c      	adds	r0, #12
 8008962:	f7fe fc57 	bl	8007214 <memcpy>
 8008966:	2201      	movs	r2, #1
 8008968:	4629      	mov	r1, r5
 800896a:	4620      	mov	r0, r4
 800896c:	f000 fbea 	bl	8009144 <__lshift>
 8008970:	9b00      	ldr	r3, [sp, #0]
 8008972:	3301      	adds	r3, #1
 8008974:	9301      	str	r3, [sp, #4]
 8008976:	9b00      	ldr	r3, [sp, #0]
 8008978:	444b      	add	r3, r9
 800897a:	9307      	str	r3, [sp, #28]
 800897c:	9b02      	ldr	r3, [sp, #8]
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	46b8      	mov	r8, r7
 8008984:	9306      	str	r3, [sp, #24]
 8008986:	4607      	mov	r7, r0
 8008988:	9b01      	ldr	r3, [sp, #4]
 800898a:	4631      	mov	r1, r6
 800898c:	3b01      	subs	r3, #1
 800898e:	4658      	mov	r0, fp
 8008990:	9302      	str	r3, [sp, #8]
 8008992:	f7ff fa69 	bl	8007e68 <quorem>
 8008996:	4603      	mov	r3, r0
 8008998:	3330      	adds	r3, #48	; 0x30
 800899a:	9004      	str	r0, [sp, #16]
 800899c:	4641      	mov	r1, r8
 800899e:	4658      	mov	r0, fp
 80089a0:	9308      	str	r3, [sp, #32]
 80089a2:	f000 fc3b 	bl	800921c <__mcmp>
 80089a6:	463a      	mov	r2, r7
 80089a8:	4681      	mov	r9, r0
 80089aa:	4631      	mov	r1, r6
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 fc51 	bl	8009254 <__mdiff>
 80089b2:	68c2      	ldr	r2, [r0, #12]
 80089b4:	9b08      	ldr	r3, [sp, #32]
 80089b6:	4605      	mov	r5, r0
 80089b8:	bb02      	cbnz	r2, 80089fc <_dtoa_r+0xa7c>
 80089ba:	4601      	mov	r1, r0
 80089bc:	4658      	mov	r0, fp
 80089be:	f000 fc2d 	bl	800921c <__mcmp>
 80089c2:	9b08      	ldr	r3, [sp, #32]
 80089c4:	4602      	mov	r2, r0
 80089c6:	4629      	mov	r1, r5
 80089c8:	4620      	mov	r0, r4
 80089ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80089ce:	f000 f9e7 	bl	8008da0 <_Bfree>
 80089d2:	9b05      	ldr	r3, [sp, #20]
 80089d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089d6:	9d01      	ldr	r5, [sp, #4]
 80089d8:	ea43 0102 	orr.w	r1, r3, r2
 80089dc:	9b06      	ldr	r3, [sp, #24]
 80089de:	430b      	orrs	r3, r1
 80089e0:	9b08      	ldr	r3, [sp, #32]
 80089e2:	d10d      	bne.n	8008a00 <_dtoa_r+0xa80>
 80089e4:	2b39      	cmp	r3, #57	; 0x39
 80089e6:	d029      	beq.n	8008a3c <_dtoa_r+0xabc>
 80089e8:	f1b9 0f00 	cmp.w	r9, #0
 80089ec:	dd01      	ble.n	80089f2 <_dtoa_r+0xa72>
 80089ee:	9b04      	ldr	r3, [sp, #16]
 80089f0:	3331      	adds	r3, #49	; 0x31
 80089f2:	9a02      	ldr	r2, [sp, #8]
 80089f4:	7013      	strb	r3, [r2, #0]
 80089f6:	e774      	b.n	80088e2 <_dtoa_r+0x962>
 80089f8:	4638      	mov	r0, r7
 80089fa:	e7b9      	b.n	8008970 <_dtoa_r+0x9f0>
 80089fc:	2201      	movs	r2, #1
 80089fe:	e7e2      	b.n	80089c6 <_dtoa_r+0xa46>
 8008a00:	f1b9 0f00 	cmp.w	r9, #0
 8008a04:	db06      	blt.n	8008a14 <_dtoa_r+0xa94>
 8008a06:	9905      	ldr	r1, [sp, #20]
 8008a08:	ea41 0909 	orr.w	r9, r1, r9
 8008a0c:	9906      	ldr	r1, [sp, #24]
 8008a0e:	ea59 0101 	orrs.w	r1, r9, r1
 8008a12:	d120      	bne.n	8008a56 <_dtoa_r+0xad6>
 8008a14:	2a00      	cmp	r2, #0
 8008a16:	ddec      	ble.n	80089f2 <_dtoa_r+0xa72>
 8008a18:	4659      	mov	r1, fp
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	9301      	str	r3, [sp, #4]
 8008a20:	f000 fb90 	bl	8009144 <__lshift>
 8008a24:	4631      	mov	r1, r6
 8008a26:	4683      	mov	fp, r0
 8008a28:	f000 fbf8 	bl	800921c <__mcmp>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	9b01      	ldr	r3, [sp, #4]
 8008a30:	dc02      	bgt.n	8008a38 <_dtoa_r+0xab8>
 8008a32:	d1de      	bne.n	80089f2 <_dtoa_r+0xa72>
 8008a34:	07da      	lsls	r2, r3, #31
 8008a36:	d5dc      	bpl.n	80089f2 <_dtoa_r+0xa72>
 8008a38:	2b39      	cmp	r3, #57	; 0x39
 8008a3a:	d1d8      	bne.n	80089ee <_dtoa_r+0xa6e>
 8008a3c:	9a02      	ldr	r2, [sp, #8]
 8008a3e:	2339      	movs	r3, #57	; 0x39
 8008a40:	7013      	strb	r3, [r2, #0]
 8008a42:	462b      	mov	r3, r5
 8008a44:	461d      	mov	r5, r3
 8008a46:	3b01      	subs	r3, #1
 8008a48:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a4c:	2a39      	cmp	r2, #57	; 0x39
 8008a4e:	d050      	beq.n	8008af2 <_dtoa_r+0xb72>
 8008a50:	3201      	adds	r2, #1
 8008a52:	701a      	strb	r2, [r3, #0]
 8008a54:	e745      	b.n	80088e2 <_dtoa_r+0x962>
 8008a56:	2a00      	cmp	r2, #0
 8008a58:	dd03      	ble.n	8008a62 <_dtoa_r+0xae2>
 8008a5a:	2b39      	cmp	r3, #57	; 0x39
 8008a5c:	d0ee      	beq.n	8008a3c <_dtoa_r+0xabc>
 8008a5e:	3301      	adds	r3, #1
 8008a60:	e7c7      	b.n	80089f2 <_dtoa_r+0xa72>
 8008a62:	9a01      	ldr	r2, [sp, #4]
 8008a64:	9907      	ldr	r1, [sp, #28]
 8008a66:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008a6a:	428a      	cmp	r2, r1
 8008a6c:	d02a      	beq.n	8008ac4 <_dtoa_r+0xb44>
 8008a6e:	4659      	mov	r1, fp
 8008a70:	2300      	movs	r3, #0
 8008a72:	220a      	movs	r2, #10
 8008a74:	4620      	mov	r0, r4
 8008a76:	f000 f9b5 	bl	8008de4 <__multadd>
 8008a7a:	45b8      	cmp	r8, r7
 8008a7c:	4683      	mov	fp, r0
 8008a7e:	f04f 0300 	mov.w	r3, #0
 8008a82:	f04f 020a 	mov.w	r2, #10
 8008a86:	4641      	mov	r1, r8
 8008a88:	4620      	mov	r0, r4
 8008a8a:	d107      	bne.n	8008a9c <_dtoa_r+0xb1c>
 8008a8c:	f000 f9aa 	bl	8008de4 <__multadd>
 8008a90:	4680      	mov	r8, r0
 8008a92:	4607      	mov	r7, r0
 8008a94:	9b01      	ldr	r3, [sp, #4]
 8008a96:	3301      	adds	r3, #1
 8008a98:	9301      	str	r3, [sp, #4]
 8008a9a:	e775      	b.n	8008988 <_dtoa_r+0xa08>
 8008a9c:	f000 f9a2 	bl	8008de4 <__multadd>
 8008aa0:	4639      	mov	r1, r7
 8008aa2:	4680      	mov	r8, r0
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	220a      	movs	r2, #10
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f000 f99b 	bl	8008de4 <__multadd>
 8008aae:	4607      	mov	r7, r0
 8008ab0:	e7f0      	b.n	8008a94 <_dtoa_r+0xb14>
 8008ab2:	f1b9 0f00 	cmp.w	r9, #0
 8008ab6:	9a00      	ldr	r2, [sp, #0]
 8008ab8:	bfcc      	ite	gt
 8008aba:	464d      	movgt	r5, r9
 8008abc:	2501      	movle	r5, #1
 8008abe:	4415      	add	r5, r2
 8008ac0:	f04f 0800 	mov.w	r8, #0
 8008ac4:	4659      	mov	r1, fp
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	4620      	mov	r0, r4
 8008aca:	9301      	str	r3, [sp, #4]
 8008acc:	f000 fb3a 	bl	8009144 <__lshift>
 8008ad0:	4631      	mov	r1, r6
 8008ad2:	4683      	mov	fp, r0
 8008ad4:	f000 fba2 	bl	800921c <__mcmp>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	dcb2      	bgt.n	8008a42 <_dtoa_r+0xac2>
 8008adc:	d102      	bne.n	8008ae4 <_dtoa_r+0xb64>
 8008ade:	9b01      	ldr	r3, [sp, #4]
 8008ae0:	07db      	lsls	r3, r3, #31
 8008ae2:	d4ae      	bmi.n	8008a42 <_dtoa_r+0xac2>
 8008ae4:	462b      	mov	r3, r5
 8008ae6:	461d      	mov	r5, r3
 8008ae8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008aec:	2a30      	cmp	r2, #48	; 0x30
 8008aee:	d0fa      	beq.n	8008ae6 <_dtoa_r+0xb66>
 8008af0:	e6f7      	b.n	80088e2 <_dtoa_r+0x962>
 8008af2:	9a00      	ldr	r2, [sp, #0]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d1a5      	bne.n	8008a44 <_dtoa_r+0xac4>
 8008af8:	f10a 0a01 	add.w	sl, sl, #1
 8008afc:	2331      	movs	r3, #49	; 0x31
 8008afe:	e779      	b.n	80089f4 <_dtoa_r+0xa74>
 8008b00:	4b13      	ldr	r3, [pc, #76]	; (8008b50 <_dtoa_r+0xbd0>)
 8008b02:	f7ff baaf 	b.w	8008064 <_dtoa_r+0xe4>
 8008b06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	f47f aa86 	bne.w	800801a <_dtoa_r+0x9a>
 8008b0e:	4b11      	ldr	r3, [pc, #68]	; (8008b54 <_dtoa_r+0xbd4>)
 8008b10:	f7ff baa8 	b.w	8008064 <_dtoa_r+0xe4>
 8008b14:	f1b9 0f00 	cmp.w	r9, #0
 8008b18:	dc03      	bgt.n	8008b22 <_dtoa_r+0xba2>
 8008b1a:	9b05      	ldr	r3, [sp, #20]
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	f73f aec9 	bgt.w	80088b4 <_dtoa_r+0x934>
 8008b22:	9d00      	ldr	r5, [sp, #0]
 8008b24:	4631      	mov	r1, r6
 8008b26:	4658      	mov	r0, fp
 8008b28:	f7ff f99e 	bl	8007e68 <quorem>
 8008b2c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008b30:	f805 3b01 	strb.w	r3, [r5], #1
 8008b34:	9a00      	ldr	r2, [sp, #0]
 8008b36:	1aaa      	subs	r2, r5, r2
 8008b38:	4591      	cmp	r9, r2
 8008b3a:	ddba      	ble.n	8008ab2 <_dtoa_r+0xb32>
 8008b3c:	4659      	mov	r1, fp
 8008b3e:	2300      	movs	r3, #0
 8008b40:	220a      	movs	r2, #10
 8008b42:	4620      	mov	r0, r4
 8008b44:	f000 f94e 	bl	8008de4 <__multadd>
 8008b48:	4683      	mov	fp, r0
 8008b4a:	e7eb      	b.n	8008b24 <_dtoa_r+0xba4>
 8008b4c:	0800a0f3 	.word	0x0800a0f3
 8008b50:	0800a04c 	.word	0x0800a04c
 8008b54:	0800a070 	.word	0x0800a070

08008b58 <__sflush_r>:
 8008b58:	898a      	ldrh	r2, [r1, #12]
 8008b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b5e:	4605      	mov	r5, r0
 8008b60:	0710      	lsls	r0, r2, #28
 8008b62:	460c      	mov	r4, r1
 8008b64:	d458      	bmi.n	8008c18 <__sflush_r+0xc0>
 8008b66:	684b      	ldr	r3, [r1, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	dc05      	bgt.n	8008b78 <__sflush_r+0x20>
 8008b6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	dc02      	bgt.n	8008b78 <__sflush_r+0x20>
 8008b72:	2000      	movs	r0, #0
 8008b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b7a:	2e00      	cmp	r6, #0
 8008b7c:	d0f9      	beq.n	8008b72 <__sflush_r+0x1a>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b84:	682f      	ldr	r7, [r5, #0]
 8008b86:	602b      	str	r3, [r5, #0]
 8008b88:	d032      	beq.n	8008bf0 <__sflush_r+0x98>
 8008b8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	075a      	lsls	r2, r3, #29
 8008b90:	d505      	bpl.n	8008b9e <__sflush_r+0x46>
 8008b92:	6863      	ldr	r3, [r4, #4]
 8008b94:	1ac0      	subs	r0, r0, r3
 8008b96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b98:	b10b      	cbz	r3, 8008b9e <__sflush_r+0x46>
 8008b9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b9c:	1ac0      	subs	r0, r0, r3
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ba4:	6a21      	ldr	r1, [r4, #32]
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	47b0      	blx	r6
 8008baa:	1c43      	adds	r3, r0, #1
 8008bac:	89a3      	ldrh	r3, [r4, #12]
 8008bae:	d106      	bne.n	8008bbe <__sflush_r+0x66>
 8008bb0:	6829      	ldr	r1, [r5, #0]
 8008bb2:	291d      	cmp	r1, #29
 8008bb4:	d82c      	bhi.n	8008c10 <__sflush_r+0xb8>
 8008bb6:	4a2a      	ldr	r2, [pc, #168]	; (8008c60 <__sflush_r+0x108>)
 8008bb8:	40ca      	lsrs	r2, r1
 8008bba:	07d6      	lsls	r6, r2, #31
 8008bbc:	d528      	bpl.n	8008c10 <__sflush_r+0xb8>
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	6062      	str	r2, [r4, #4]
 8008bc2:	04d9      	lsls	r1, r3, #19
 8008bc4:	6922      	ldr	r2, [r4, #16]
 8008bc6:	6022      	str	r2, [r4, #0]
 8008bc8:	d504      	bpl.n	8008bd4 <__sflush_r+0x7c>
 8008bca:	1c42      	adds	r2, r0, #1
 8008bcc:	d101      	bne.n	8008bd2 <__sflush_r+0x7a>
 8008bce:	682b      	ldr	r3, [r5, #0]
 8008bd0:	b903      	cbnz	r3, 8008bd4 <__sflush_r+0x7c>
 8008bd2:	6560      	str	r0, [r4, #84]	; 0x54
 8008bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bd6:	602f      	str	r7, [r5, #0]
 8008bd8:	2900      	cmp	r1, #0
 8008bda:	d0ca      	beq.n	8008b72 <__sflush_r+0x1a>
 8008bdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008be0:	4299      	cmp	r1, r3
 8008be2:	d002      	beq.n	8008bea <__sflush_r+0x92>
 8008be4:	4628      	mov	r0, r5
 8008be6:	f7fe fb2b 	bl	8007240 <_free_r>
 8008bea:	2000      	movs	r0, #0
 8008bec:	6360      	str	r0, [r4, #52]	; 0x34
 8008bee:	e7c1      	b.n	8008b74 <__sflush_r+0x1c>
 8008bf0:	6a21      	ldr	r1, [r4, #32]
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	47b0      	blx	r6
 8008bf8:	1c41      	adds	r1, r0, #1
 8008bfa:	d1c7      	bne.n	8008b8c <__sflush_r+0x34>
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d0c4      	beq.n	8008b8c <__sflush_r+0x34>
 8008c02:	2b1d      	cmp	r3, #29
 8008c04:	d001      	beq.n	8008c0a <__sflush_r+0xb2>
 8008c06:	2b16      	cmp	r3, #22
 8008c08:	d101      	bne.n	8008c0e <__sflush_r+0xb6>
 8008c0a:	602f      	str	r7, [r5, #0]
 8008c0c:	e7b1      	b.n	8008b72 <__sflush_r+0x1a>
 8008c0e:	89a3      	ldrh	r3, [r4, #12]
 8008c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c14:	81a3      	strh	r3, [r4, #12]
 8008c16:	e7ad      	b.n	8008b74 <__sflush_r+0x1c>
 8008c18:	690f      	ldr	r7, [r1, #16]
 8008c1a:	2f00      	cmp	r7, #0
 8008c1c:	d0a9      	beq.n	8008b72 <__sflush_r+0x1a>
 8008c1e:	0793      	lsls	r3, r2, #30
 8008c20:	680e      	ldr	r6, [r1, #0]
 8008c22:	bf08      	it	eq
 8008c24:	694b      	ldreq	r3, [r1, #20]
 8008c26:	600f      	str	r7, [r1, #0]
 8008c28:	bf18      	it	ne
 8008c2a:	2300      	movne	r3, #0
 8008c2c:	eba6 0807 	sub.w	r8, r6, r7
 8008c30:	608b      	str	r3, [r1, #8]
 8008c32:	f1b8 0f00 	cmp.w	r8, #0
 8008c36:	dd9c      	ble.n	8008b72 <__sflush_r+0x1a>
 8008c38:	6a21      	ldr	r1, [r4, #32]
 8008c3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c3c:	4643      	mov	r3, r8
 8008c3e:	463a      	mov	r2, r7
 8008c40:	4628      	mov	r0, r5
 8008c42:	47b0      	blx	r6
 8008c44:	2800      	cmp	r0, #0
 8008c46:	dc06      	bgt.n	8008c56 <__sflush_r+0xfe>
 8008c48:	89a3      	ldrh	r3, [r4, #12]
 8008c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c4e:	81a3      	strh	r3, [r4, #12]
 8008c50:	f04f 30ff 	mov.w	r0, #4294967295
 8008c54:	e78e      	b.n	8008b74 <__sflush_r+0x1c>
 8008c56:	4407      	add	r7, r0
 8008c58:	eba8 0800 	sub.w	r8, r8, r0
 8008c5c:	e7e9      	b.n	8008c32 <__sflush_r+0xda>
 8008c5e:	bf00      	nop
 8008c60:	20400001 	.word	0x20400001

08008c64 <_fflush_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	690b      	ldr	r3, [r1, #16]
 8008c68:	4605      	mov	r5, r0
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	b913      	cbnz	r3, 8008c74 <_fflush_r+0x10>
 8008c6e:	2500      	movs	r5, #0
 8008c70:	4628      	mov	r0, r5
 8008c72:	bd38      	pop	{r3, r4, r5, pc}
 8008c74:	b118      	cbz	r0, 8008c7e <_fflush_r+0x1a>
 8008c76:	6983      	ldr	r3, [r0, #24]
 8008c78:	b90b      	cbnz	r3, 8008c7e <_fflush_r+0x1a>
 8008c7a:	f7fe f9fd 	bl	8007078 <__sinit>
 8008c7e:	4b14      	ldr	r3, [pc, #80]	; (8008cd0 <_fflush_r+0x6c>)
 8008c80:	429c      	cmp	r4, r3
 8008c82:	d11b      	bne.n	8008cbc <_fflush_r+0x58>
 8008c84:	686c      	ldr	r4, [r5, #4]
 8008c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d0ef      	beq.n	8008c6e <_fflush_r+0xa>
 8008c8e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c90:	07d0      	lsls	r0, r2, #31
 8008c92:	d404      	bmi.n	8008c9e <_fflush_r+0x3a>
 8008c94:	0599      	lsls	r1, r3, #22
 8008c96:	d402      	bmi.n	8008c9e <_fflush_r+0x3a>
 8008c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c9a:	f7fe fab0 	bl	80071fe <__retarget_lock_acquire_recursive>
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	f7ff ff59 	bl	8008b58 <__sflush_r>
 8008ca6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ca8:	07da      	lsls	r2, r3, #31
 8008caa:	4605      	mov	r5, r0
 8008cac:	d4e0      	bmi.n	8008c70 <_fflush_r+0xc>
 8008cae:	89a3      	ldrh	r3, [r4, #12]
 8008cb0:	059b      	lsls	r3, r3, #22
 8008cb2:	d4dd      	bmi.n	8008c70 <_fflush_r+0xc>
 8008cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cb6:	f7fe faa3 	bl	8007200 <__retarget_lock_release_recursive>
 8008cba:	e7d9      	b.n	8008c70 <_fflush_r+0xc>
 8008cbc:	4b05      	ldr	r3, [pc, #20]	; (8008cd4 <_fflush_r+0x70>)
 8008cbe:	429c      	cmp	r4, r3
 8008cc0:	d101      	bne.n	8008cc6 <_fflush_r+0x62>
 8008cc2:	68ac      	ldr	r4, [r5, #8]
 8008cc4:	e7df      	b.n	8008c86 <_fflush_r+0x22>
 8008cc6:	4b04      	ldr	r3, [pc, #16]	; (8008cd8 <_fflush_r+0x74>)
 8008cc8:	429c      	cmp	r4, r3
 8008cca:	bf08      	it	eq
 8008ccc:	68ec      	ldreq	r4, [r5, #12]
 8008cce:	e7da      	b.n	8008c86 <_fflush_r+0x22>
 8008cd0:	08009ff8 	.word	0x08009ff8
 8008cd4:	0800a018 	.word	0x0800a018
 8008cd8:	08009fd8 	.word	0x08009fd8

08008cdc <_localeconv_r>:
 8008cdc:	4800      	ldr	r0, [pc, #0]	; (8008ce0 <_localeconv_r+0x4>)
 8008cde:	4770      	bx	lr
 8008ce0:	20000164 	.word	0x20000164

08008ce4 <_lseek_r>:
 8008ce4:	b538      	push	{r3, r4, r5, lr}
 8008ce6:	4d07      	ldr	r5, [pc, #28]	; (8008d04 <_lseek_r+0x20>)
 8008ce8:	4604      	mov	r4, r0
 8008cea:	4608      	mov	r0, r1
 8008cec:	4611      	mov	r1, r2
 8008cee:	2200      	movs	r2, #0
 8008cf0:	602a      	str	r2, [r5, #0]
 8008cf2:	461a      	mov	r2, r3
 8008cf4:	f7f8 fd80 	bl	80017f8 <_lseek>
 8008cf8:	1c43      	adds	r3, r0, #1
 8008cfa:	d102      	bne.n	8008d02 <_lseek_r+0x1e>
 8008cfc:	682b      	ldr	r3, [r5, #0]
 8008cfe:	b103      	cbz	r3, 8008d02 <_lseek_r+0x1e>
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	bd38      	pop	{r3, r4, r5, pc}
 8008d04:	20006b68 	.word	0x20006b68

08008d08 <__malloc_lock>:
 8008d08:	4801      	ldr	r0, [pc, #4]	; (8008d10 <__malloc_lock+0x8>)
 8008d0a:	f7fe ba78 	b.w	80071fe <__retarget_lock_acquire_recursive>
 8008d0e:	bf00      	nop
 8008d10:	20006b60 	.word	0x20006b60

08008d14 <__malloc_unlock>:
 8008d14:	4801      	ldr	r0, [pc, #4]	; (8008d1c <__malloc_unlock+0x8>)
 8008d16:	f7fe ba73 	b.w	8007200 <__retarget_lock_release_recursive>
 8008d1a:	bf00      	nop
 8008d1c:	20006b60 	.word	0x20006b60

08008d20 <_Balloc>:
 8008d20:	b570      	push	{r4, r5, r6, lr}
 8008d22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d24:	4604      	mov	r4, r0
 8008d26:	460d      	mov	r5, r1
 8008d28:	b976      	cbnz	r6, 8008d48 <_Balloc+0x28>
 8008d2a:	2010      	movs	r0, #16
 8008d2c:	f7fe fa6a 	bl	8007204 <malloc>
 8008d30:	4602      	mov	r2, r0
 8008d32:	6260      	str	r0, [r4, #36]	; 0x24
 8008d34:	b920      	cbnz	r0, 8008d40 <_Balloc+0x20>
 8008d36:	4b18      	ldr	r3, [pc, #96]	; (8008d98 <_Balloc+0x78>)
 8008d38:	4818      	ldr	r0, [pc, #96]	; (8008d9c <_Balloc+0x7c>)
 8008d3a:	2166      	movs	r1, #102	; 0x66
 8008d3c:	f000 fcea 	bl	8009714 <__assert_func>
 8008d40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d44:	6006      	str	r6, [r0, #0]
 8008d46:	60c6      	str	r6, [r0, #12]
 8008d48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d4a:	68f3      	ldr	r3, [r6, #12]
 8008d4c:	b183      	cbz	r3, 8008d70 <_Balloc+0x50>
 8008d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d56:	b9b8      	cbnz	r0, 8008d88 <_Balloc+0x68>
 8008d58:	2101      	movs	r1, #1
 8008d5a:	fa01 f605 	lsl.w	r6, r1, r5
 8008d5e:	1d72      	adds	r2, r6, #5
 8008d60:	0092      	lsls	r2, r2, #2
 8008d62:	4620      	mov	r0, r4
 8008d64:	f000 fb5a 	bl	800941c <_calloc_r>
 8008d68:	b160      	cbz	r0, 8008d84 <_Balloc+0x64>
 8008d6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d6e:	e00e      	b.n	8008d8e <_Balloc+0x6e>
 8008d70:	2221      	movs	r2, #33	; 0x21
 8008d72:	2104      	movs	r1, #4
 8008d74:	4620      	mov	r0, r4
 8008d76:	f000 fb51 	bl	800941c <_calloc_r>
 8008d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d7c:	60f0      	str	r0, [r6, #12]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1e4      	bne.n	8008d4e <_Balloc+0x2e>
 8008d84:	2000      	movs	r0, #0
 8008d86:	bd70      	pop	{r4, r5, r6, pc}
 8008d88:	6802      	ldr	r2, [r0, #0]
 8008d8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d8e:	2300      	movs	r3, #0
 8008d90:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d94:	e7f7      	b.n	8008d86 <_Balloc+0x66>
 8008d96:	bf00      	nop
 8008d98:	0800a07d 	.word	0x0800a07d
 8008d9c:	0800a104 	.word	0x0800a104

08008da0 <_Bfree>:
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008da4:	4605      	mov	r5, r0
 8008da6:	460c      	mov	r4, r1
 8008da8:	b976      	cbnz	r6, 8008dc8 <_Bfree+0x28>
 8008daa:	2010      	movs	r0, #16
 8008dac:	f7fe fa2a 	bl	8007204 <malloc>
 8008db0:	4602      	mov	r2, r0
 8008db2:	6268      	str	r0, [r5, #36]	; 0x24
 8008db4:	b920      	cbnz	r0, 8008dc0 <_Bfree+0x20>
 8008db6:	4b09      	ldr	r3, [pc, #36]	; (8008ddc <_Bfree+0x3c>)
 8008db8:	4809      	ldr	r0, [pc, #36]	; (8008de0 <_Bfree+0x40>)
 8008dba:	218a      	movs	r1, #138	; 0x8a
 8008dbc:	f000 fcaa 	bl	8009714 <__assert_func>
 8008dc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dc4:	6006      	str	r6, [r0, #0]
 8008dc6:	60c6      	str	r6, [r0, #12]
 8008dc8:	b13c      	cbz	r4, 8008dda <_Bfree+0x3a>
 8008dca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008dcc:	6862      	ldr	r2, [r4, #4]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008dd4:	6021      	str	r1, [r4, #0]
 8008dd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dda:	bd70      	pop	{r4, r5, r6, pc}
 8008ddc:	0800a07d 	.word	0x0800a07d
 8008de0:	0800a104 	.word	0x0800a104

08008de4 <__multadd>:
 8008de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de8:	690e      	ldr	r6, [r1, #16]
 8008dea:	4607      	mov	r7, r0
 8008dec:	4698      	mov	r8, r3
 8008dee:	460c      	mov	r4, r1
 8008df0:	f101 0014 	add.w	r0, r1, #20
 8008df4:	2300      	movs	r3, #0
 8008df6:	6805      	ldr	r5, [r0, #0]
 8008df8:	b2a9      	uxth	r1, r5
 8008dfa:	fb02 8101 	mla	r1, r2, r1, r8
 8008dfe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008e02:	0c2d      	lsrs	r5, r5, #16
 8008e04:	fb02 c505 	mla	r5, r2, r5, ip
 8008e08:	b289      	uxth	r1, r1
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008e10:	429e      	cmp	r6, r3
 8008e12:	f840 1b04 	str.w	r1, [r0], #4
 8008e16:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008e1a:	dcec      	bgt.n	8008df6 <__multadd+0x12>
 8008e1c:	f1b8 0f00 	cmp.w	r8, #0
 8008e20:	d022      	beq.n	8008e68 <__multadd+0x84>
 8008e22:	68a3      	ldr	r3, [r4, #8]
 8008e24:	42b3      	cmp	r3, r6
 8008e26:	dc19      	bgt.n	8008e5c <__multadd+0x78>
 8008e28:	6861      	ldr	r1, [r4, #4]
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	3101      	adds	r1, #1
 8008e2e:	f7ff ff77 	bl	8008d20 <_Balloc>
 8008e32:	4605      	mov	r5, r0
 8008e34:	b928      	cbnz	r0, 8008e42 <__multadd+0x5e>
 8008e36:	4602      	mov	r2, r0
 8008e38:	4b0d      	ldr	r3, [pc, #52]	; (8008e70 <__multadd+0x8c>)
 8008e3a:	480e      	ldr	r0, [pc, #56]	; (8008e74 <__multadd+0x90>)
 8008e3c:	21b5      	movs	r1, #181	; 0xb5
 8008e3e:	f000 fc69 	bl	8009714 <__assert_func>
 8008e42:	6922      	ldr	r2, [r4, #16]
 8008e44:	3202      	adds	r2, #2
 8008e46:	f104 010c 	add.w	r1, r4, #12
 8008e4a:	0092      	lsls	r2, r2, #2
 8008e4c:	300c      	adds	r0, #12
 8008e4e:	f7fe f9e1 	bl	8007214 <memcpy>
 8008e52:	4621      	mov	r1, r4
 8008e54:	4638      	mov	r0, r7
 8008e56:	f7ff ffa3 	bl	8008da0 <_Bfree>
 8008e5a:	462c      	mov	r4, r5
 8008e5c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008e60:	3601      	adds	r6, #1
 8008e62:	f8c3 8014 	str.w	r8, [r3, #20]
 8008e66:	6126      	str	r6, [r4, #16]
 8008e68:	4620      	mov	r0, r4
 8008e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e6e:	bf00      	nop
 8008e70:	0800a0f3 	.word	0x0800a0f3
 8008e74:	0800a104 	.word	0x0800a104

08008e78 <__hi0bits>:
 8008e78:	0c03      	lsrs	r3, r0, #16
 8008e7a:	041b      	lsls	r3, r3, #16
 8008e7c:	b9d3      	cbnz	r3, 8008eb4 <__hi0bits+0x3c>
 8008e7e:	0400      	lsls	r0, r0, #16
 8008e80:	2310      	movs	r3, #16
 8008e82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e86:	bf04      	itt	eq
 8008e88:	0200      	lsleq	r0, r0, #8
 8008e8a:	3308      	addeq	r3, #8
 8008e8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e90:	bf04      	itt	eq
 8008e92:	0100      	lsleq	r0, r0, #4
 8008e94:	3304      	addeq	r3, #4
 8008e96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e9a:	bf04      	itt	eq
 8008e9c:	0080      	lsleq	r0, r0, #2
 8008e9e:	3302      	addeq	r3, #2
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	db05      	blt.n	8008eb0 <__hi0bits+0x38>
 8008ea4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ea8:	f103 0301 	add.w	r3, r3, #1
 8008eac:	bf08      	it	eq
 8008eae:	2320      	moveq	r3, #32
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	4770      	bx	lr
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	e7e4      	b.n	8008e82 <__hi0bits+0xa>

08008eb8 <__lo0bits>:
 8008eb8:	6803      	ldr	r3, [r0, #0]
 8008eba:	f013 0207 	ands.w	r2, r3, #7
 8008ebe:	4601      	mov	r1, r0
 8008ec0:	d00b      	beq.n	8008eda <__lo0bits+0x22>
 8008ec2:	07da      	lsls	r2, r3, #31
 8008ec4:	d424      	bmi.n	8008f10 <__lo0bits+0x58>
 8008ec6:	0798      	lsls	r0, r3, #30
 8008ec8:	bf49      	itett	mi
 8008eca:	085b      	lsrmi	r3, r3, #1
 8008ecc:	089b      	lsrpl	r3, r3, #2
 8008ece:	2001      	movmi	r0, #1
 8008ed0:	600b      	strmi	r3, [r1, #0]
 8008ed2:	bf5c      	itt	pl
 8008ed4:	600b      	strpl	r3, [r1, #0]
 8008ed6:	2002      	movpl	r0, #2
 8008ed8:	4770      	bx	lr
 8008eda:	b298      	uxth	r0, r3
 8008edc:	b9b0      	cbnz	r0, 8008f0c <__lo0bits+0x54>
 8008ede:	0c1b      	lsrs	r3, r3, #16
 8008ee0:	2010      	movs	r0, #16
 8008ee2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008ee6:	bf04      	itt	eq
 8008ee8:	0a1b      	lsreq	r3, r3, #8
 8008eea:	3008      	addeq	r0, #8
 8008eec:	071a      	lsls	r2, r3, #28
 8008eee:	bf04      	itt	eq
 8008ef0:	091b      	lsreq	r3, r3, #4
 8008ef2:	3004      	addeq	r0, #4
 8008ef4:	079a      	lsls	r2, r3, #30
 8008ef6:	bf04      	itt	eq
 8008ef8:	089b      	lsreq	r3, r3, #2
 8008efa:	3002      	addeq	r0, #2
 8008efc:	07da      	lsls	r2, r3, #31
 8008efe:	d403      	bmi.n	8008f08 <__lo0bits+0x50>
 8008f00:	085b      	lsrs	r3, r3, #1
 8008f02:	f100 0001 	add.w	r0, r0, #1
 8008f06:	d005      	beq.n	8008f14 <__lo0bits+0x5c>
 8008f08:	600b      	str	r3, [r1, #0]
 8008f0a:	4770      	bx	lr
 8008f0c:	4610      	mov	r0, r2
 8008f0e:	e7e8      	b.n	8008ee2 <__lo0bits+0x2a>
 8008f10:	2000      	movs	r0, #0
 8008f12:	4770      	bx	lr
 8008f14:	2020      	movs	r0, #32
 8008f16:	4770      	bx	lr

08008f18 <__i2b>:
 8008f18:	b510      	push	{r4, lr}
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	2101      	movs	r1, #1
 8008f1e:	f7ff feff 	bl	8008d20 <_Balloc>
 8008f22:	4602      	mov	r2, r0
 8008f24:	b928      	cbnz	r0, 8008f32 <__i2b+0x1a>
 8008f26:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <__i2b+0x24>)
 8008f28:	4805      	ldr	r0, [pc, #20]	; (8008f40 <__i2b+0x28>)
 8008f2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f2e:	f000 fbf1 	bl	8009714 <__assert_func>
 8008f32:	2301      	movs	r3, #1
 8008f34:	6144      	str	r4, [r0, #20]
 8008f36:	6103      	str	r3, [r0, #16]
 8008f38:	bd10      	pop	{r4, pc}
 8008f3a:	bf00      	nop
 8008f3c:	0800a0f3 	.word	0x0800a0f3
 8008f40:	0800a104 	.word	0x0800a104

08008f44 <__multiply>:
 8008f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f48:	4614      	mov	r4, r2
 8008f4a:	690a      	ldr	r2, [r1, #16]
 8008f4c:	6923      	ldr	r3, [r4, #16]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	bfb8      	it	lt
 8008f52:	460b      	movlt	r3, r1
 8008f54:	460d      	mov	r5, r1
 8008f56:	bfbc      	itt	lt
 8008f58:	4625      	movlt	r5, r4
 8008f5a:	461c      	movlt	r4, r3
 8008f5c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008f60:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f64:	68ab      	ldr	r3, [r5, #8]
 8008f66:	6869      	ldr	r1, [r5, #4]
 8008f68:	eb0a 0709 	add.w	r7, sl, r9
 8008f6c:	42bb      	cmp	r3, r7
 8008f6e:	b085      	sub	sp, #20
 8008f70:	bfb8      	it	lt
 8008f72:	3101      	addlt	r1, #1
 8008f74:	f7ff fed4 	bl	8008d20 <_Balloc>
 8008f78:	b930      	cbnz	r0, 8008f88 <__multiply+0x44>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	4b42      	ldr	r3, [pc, #264]	; (8009088 <__multiply+0x144>)
 8008f7e:	4843      	ldr	r0, [pc, #268]	; (800908c <__multiply+0x148>)
 8008f80:	f240 115d 	movw	r1, #349	; 0x15d
 8008f84:	f000 fbc6 	bl	8009714 <__assert_func>
 8008f88:	f100 0614 	add.w	r6, r0, #20
 8008f8c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008f90:	4633      	mov	r3, r6
 8008f92:	2200      	movs	r2, #0
 8008f94:	4543      	cmp	r3, r8
 8008f96:	d31e      	bcc.n	8008fd6 <__multiply+0x92>
 8008f98:	f105 0c14 	add.w	ip, r5, #20
 8008f9c:	f104 0314 	add.w	r3, r4, #20
 8008fa0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008fa4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008fa8:	9202      	str	r2, [sp, #8]
 8008faa:	ebac 0205 	sub.w	r2, ip, r5
 8008fae:	3a15      	subs	r2, #21
 8008fb0:	f022 0203 	bic.w	r2, r2, #3
 8008fb4:	3204      	adds	r2, #4
 8008fb6:	f105 0115 	add.w	r1, r5, #21
 8008fba:	458c      	cmp	ip, r1
 8008fbc:	bf38      	it	cc
 8008fbe:	2204      	movcc	r2, #4
 8008fc0:	9201      	str	r2, [sp, #4]
 8008fc2:	9a02      	ldr	r2, [sp, #8]
 8008fc4:	9303      	str	r3, [sp, #12]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d808      	bhi.n	8008fdc <__multiply+0x98>
 8008fca:	2f00      	cmp	r7, #0
 8008fcc:	dc55      	bgt.n	800907a <__multiply+0x136>
 8008fce:	6107      	str	r7, [r0, #16]
 8008fd0:	b005      	add	sp, #20
 8008fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd6:	f843 2b04 	str.w	r2, [r3], #4
 8008fda:	e7db      	b.n	8008f94 <__multiply+0x50>
 8008fdc:	f8b3 a000 	ldrh.w	sl, [r3]
 8008fe0:	f1ba 0f00 	cmp.w	sl, #0
 8008fe4:	d020      	beq.n	8009028 <__multiply+0xe4>
 8008fe6:	f105 0e14 	add.w	lr, r5, #20
 8008fea:	46b1      	mov	r9, r6
 8008fec:	2200      	movs	r2, #0
 8008fee:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008ff2:	f8d9 b000 	ldr.w	fp, [r9]
 8008ff6:	b2a1      	uxth	r1, r4
 8008ff8:	fa1f fb8b 	uxth.w	fp, fp
 8008ffc:	fb0a b101 	mla	r1, sl, r1, fp
 8009000:	4411      	add	r1, r2
 8009002:	f8d9 2000 	ldr.w	r2, [r9]
 8009006:	0c24      	lsrs	r4, r4, #16
 8009008:	0c12      	lsrs	r2, r2, #16
 800900a:	fb0a 2404 	mla	r4, sl, r4, r2
 800900e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009012:	b289      	uxth	r1, r1
 8009014:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009018:	45f4      	cmp	ip, lr
 800901a:	f849 1b04 	str.w	r1, [r9], #4
 800901e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009022:	d8e4      	bhi.n	8008fee <__multiply+0xaa>
 8009024:	9901      	ldr	r1, [sp, #4]
 8009026:	5072      	str	r2, [r6, r1]
 8009028:	9a03      	ldr	r2, [sp, #12]
 800902a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800902e:	3304      	adds	r3, #4
 8009030:	f1b9 0f00 	cmp.w	r9, #0
 8009034:	d01f      	beq.n	8009076 <__multiply+0x132>
 8009036:	6834      	ldr	r4, [r6, #0]
 8009038:	f105 0114 	add.w	r1, r5, #20
 800903c:	46b6      	mov	lr, r6
 800903e:	f04f 0a00 	mov.w	sl, #0
 8009042:	880a      	ldrh	r2, [r1, #0]
 8009044:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009048:	fb09 b202 	mla	r2, r9, r2, fp
 800904c:	4492      	add	sl, r2
 800904e:	b2a4      	uxth	r4, r4
 8009050:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009054:	f84e 4b04 	str.w	r4, [lr], #4
 8009058:	f851 4b04 	ldr.w	r4, [r1], #4
 800905c:	f8be 2000 	ldrh.w	r2, [lr]
 8009060:	0c24      	lsrs	r4, r4, #16
 8009062:	fb09 2404 	mla	r4, r9, r4, r2
 8009066:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800906a:	458c      	cmp	ip, r1
 800906c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009070:	d8e7      	bhi.n	8009042 <__multiply+0xfe>
 8009072:	9a01      	ldr	r2, [sp, #4]
 8009074:	50b4      	str	r4, [r6, r2]
 8009076:	3604      	adds	r6, #4
 8009078:	e7a3      	b.n	8008fc2 <__multiply+0x7e>
 800907a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1a5      	bne.n	8008fce <__multiply+0x8a>
 8009082:	3f01      	subs	r7, #1
 8009084:	e7a1      	b.n	8008fca <__multiply+0x86>
 8009086:	bf00      	nop
 8009088:	0800a0f3 	.word	0x0800a0f3
 800908c:	0800a104 	.word	0x0800a104

08009090 <__pow5mult>:
 8009090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009094:	4615      	mov	r5, r2
 8009096:	f012 0203 	ands.w	r2, r2, #3
 800909a:	4606      	mov	r6, r0
 800909c:	460f      	mov	r7, r1
 800909e:	d007      	beq.n	80090b0 <__pow5mult+0x20>
 80090a0:	4c25      	ldr	r4, [pc, #148]	; (8009138 <__pow5mult+0xa8>)
 80090a2:	3a01      	subs	r2, #1
 80090a4:	2300      	movs	r3, #0
 80090a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090aa:	f7ff fe9b 	bl	8008de4 <__multadd>
 80090ae:	4607      	mov	r7, r0
 80090b0:	10ad      	asrs	r5, r5, #2
 80090b2:	d03d      	beq.n	8009130 <__pow5mult+0xa0>
 80090b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80090b6:	b97c      	cbnz	r4, 80090d8 <__pow5mult+0x48>
 80090b8:	2010      	movs	r0, #16
 80090ba:	f7fe f8a3 	bl	8007204 <malloc>
 80090be:	4602      	mov	r2, r0
 80090c0:	6270      	str	r0, [r6, #36]	; 0x24
 80090c2:	b928      	cbnz	r0, 80090d0 <__pow5mult+0x40>
 80090c4:	4b1d      	ldr	r3, [pc, #116]	; (800913c <__pow5mult+0xac>)
 80090c6:	481e      	ldr	r0, [pc, #120]	; (8009140 <__pow5mult+0xb0>)
 80090c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80090cc:	f000 fb22 	bl	8009714 <__assert_func>
 80090d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090d4:	6004      	str	r4, [r0, #0]
 80090d6:	60c4      	str	r4, [r0, #12]
 80090d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090e0:	b94c      	cbnz	r4, 80090f6 <__pow5mult+0x66>
 80090e2:	f240 2171 	movw	r1, #625	; 0x271
 80090e6:	4630      	mov	r0, r6
 80090e8:	f7ff ff16 	bl	8008f18 <__i2b>
 80090ec:	2300      	movs	r3, #0
 80090ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80090f2:	4604      	mov	r4, r0
 80090f4:	6003      	str	r3, [r0, #0]
 80090f6:	f04f 0900 	mov.w	r9, #0
 80090fa:	07eb      	lsls	r3, r5, #31
 80090fc:	d50a      	bpl.n	8009114 <__pow5mult+0x84>
 80090fe:	4639      	mov	r1, r7
 8009100:	4622      	mov	r2, r4
 8009102:	4630      	mov	r0, r6
 8009104:	f7ff ff1e 	bl	8008f44 <__multiply>
 8009108:	4639      	mov	r1, r7
 800910a:	4680      	mov	r8, r0
 800910c:	4630      	mov	r0, r6
 800910e:	f7ff fe47 	bl	8008da0 <_Bfree>
 8009112:	4647      	mov	r7, r8
 8009114:	106d      	asrs	r5, r5, #1
 8009116:	d00b      	beq.n	8009130 <__pow5mult+0xa0>
 8009118:	6820      	ldr	r0, [r4, #0]
 800911a:	b938      	cbnz	r0, 800912c <__pow5mult+0x9c>
 800911c:	4622      	mov	r2, r4
 800911e:	4621      	mov	r1, r4
 8009120:	4630      	mov	r0, r6
 8009122:	f7ff ff0f 	bl	8008f44 <__multiply>
 8009126:	6020      	str	r0, [r4, #0]
 8009128:	f8c0 9000 	str.w	r9, [r0]
 800912c:	4604      	mov	r4, r0
 800912e:	e7e4      	b.n	80090fa <__pow5mult+0x6a>
 8009130:	4638      	mov	r0, r7
 8009132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009136:	bf00      	nop
 8009138:	0800a258 	.word	0x0800a258
 800913c:	0800a07d 	.word	0x0800a07d
 8009140:	0800a104 	.word	0x0800a104

08009144 <__lshift>:
 8009144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009148:	460c      	mov	r4, r1
 800914a:	6849      	ldr	r1, [r1, #4]
 800914c:	6923      	ldr	r3, [r4, #16]
 800914e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009152:	68a3      	ldr	r3, [r4, #8]
 8009154:	4607      	mov	r7, r0
 8009156:	4691      	mov	r9, r2
 8009158:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800915c:	f108 0601 	add.w	r6, r8, #1
 8009160:	42b3      	cmp	r3, r6
 8009162:	db0b      	blt.n	800917c <__lshift+0x38>
 8009164:	4638      	mov	r0, r7
 8009166:	f7ff fddb 	bl	8008d20 <_Balloc>
 800916a:	4605      	mov	r5, r0
 800916c:	b948      	cbnz	r0, 8009182 <__lshift+0x3e>
 800916e:	4602      	mov	r2, r0
 8009170:	4b28      	ldr	r3, [pc, #160]	; (8009214 <__lshift+0xd0>)
 8009172:	4829      	ldr	r0, [pc, #164]	; (8009218 <__lshift+0xd4>)
 8009174:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009178:	f000 facc 	bl	8009714 <__assert_func>
 800917c:	3101      	adds	r1, #1
 800917e:	005b      	lsls	r3, r3, #1
 8009180:	e7ee      	b.n	8009160 <__lshift+0x1c>
 8009182:	2300      	movs	r3, #0
 8009184:	f100 0114 	add.w	r1, r0, #20
 8009188:	f100 0210 	add.w	r2, r0, #16
 800918c:	4618      	mov	r0, r3
 800918e:	4553      	cmp	r3, sl
 8009190:	db33      	blt.n	80091fa <__lshift+0xb6>
 8009192:	6920      	ldr	r0, [r4, #16]
 8009194:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009198:	f104 0314 	add.w	r3, r4, #20
 800919c:	f019 091f 	ands.w	r9, r9, #31
 80091a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091a8:	d02b      	beq.n	8009202 <__lshift+0xbe>
 80091aa:	f1c9 0e20 	rsb	lr, r9, #32
 80091ae:	468a      	mov	sl, r1
 80091b0:	2200      	movs	r2, #0
 80091b2:	6818      	ldr	r0, [r3, #0]
 80091b4:	fa00 f009 	lsl.w	r0, r0, r9
 80091b8:	4302      	orrs	r2, r0
 80091ba:	f84a 2b04 	str.w	r2, [sl], #4
 80091be:	f853 2b04 	ldr.w	r2, [r3], #4
 80091c2:	459c      	cmp	ip, r3
 80091c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80091c8:	d8f3      	bhi.n	80091b2 <__lshift+0x6e>
 80091ca:	ebac 0304 	sub.w	r3, ip, r4
 80091ce:	3b15      	subs	r3, #21
 80091d0:	f023 0303 	bic.w	r3, r3, #3
 80091d4:	3304      	adds	r3, #4
 80091d6:	f104 0015 	add.w	r0, r4, #21
 80091da:	4584      	cmp	ip, r0
 80091dc:	bf38      	it	cc
 80091de:	2304      	movcc	r3, #4
 80091e0:	50ca      	str	r2, [r1, r3]
 80091e2:	b10a      	cbz	r2, 80091e8 <__lshift+0xa4>
 80091e4:	f108 0602 	add.w	r6, r8, #2
 80091e8:	3e01      	subs	r6, #1
 80091ea:	4638      	mov	r0, r7
 80091ec:	612e      	str	r6, [r5, #16]
 80091ee:	4621      	mov	r1, r4
 80091f0:	f7ff fdd6 	bl	8008da0 <_Bfree>
 80091f4:	4628      	mov	r0, r5
 80091f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80091fe:	3301      	adds	r3, #1
 8009200:	e7c5      	b.n	800918e <__lshift+0x4a>
 8009202:	3904      	subs	r1, #4
 8009204:	f853 2b04 	ldr.w	r2, [r3], #4
 8009208:	f841 2f04 	str.w	r2, [r1, #4]!
 800920c:	459c      	cmp	ip, r3
 800920e:	d8f9      	bhi.n	8009204 <__lshift+0xc0>
 8009210:	e7ea      	b.n	80091e8 <__lshift+0xa4>
 8009212:	bf00      	nop
 8009214:	0800a0f3 	.word	0x0800a0f3
 8009218:	0800a104 	.word	0x0800a104

0800921c <__mcmp>:
 800921c:	b530      	push	{r4, r5, lr}
 800921e:	6902      	ldr	r2, [r0, #16]
 8009220:	690c      	ldr	r4, [r1, #16]
 8009222:	1b12      	subs	r2, r2, r4
 8009224:	d10e      	bne.n	8009244 <__mcmp+0x28>
 8009226:	f100 0314 	add.w	r3, r0, #20
 800922a:	3114      	adds	r1, #20
 800922c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009230:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009234:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009238:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800923c:	42a5      	cmp	r5, r4
 800923e:	d003      	beq.n	8009248 <__mcmp+0x2c>
 8009240:	d305      	bcc.n	800924e <__mcmp+0x32>
 8009242:	2201      	movs	r2, #1
 8009244:	4610      	mov	r0, r2
 8009246:	bd30      	pop	{r4, r5, pc}
 8009248:	4283      	cmp	r3, r0
 800924a:	d3f3      	bcc.n	8009234 <__mcmp+0x18>
 800924c:	e7fa      	b.n	8009244 <__mcmp+0x28>
 800924e:	f04f 32ff 	mov.w	r2, #4294967295
 8009252:	e7f7      	b.n	8009244 <__mcmp+0x28>

08009254 <__mdiff>:
 8009254:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009258:	460c      	mov	r4, r1
 800925a:	4606      	mov	r6, r0
 800925c:	4611      	mov	r1, r2
 800925e:	4620      	mov	r0, r4
 8009260:	4617      	mov	r7, r2
 8009262:	f7ff ffdb 	bl	800921c <__mcmp>
 8009266:	1e05      	subs	r5, r0, #0
 8009268:	d110      	bne.n	800928c <__mdiff+0x38>
 800926a:	4629      	mov	r1, r5
 800926c:	4630      	mov	r0, r6
 800926e:	f7ff fd57 	bl	8008d20 <_Balloc>
 8009272:	b930      	cbnz	r0, 8009282 <__mdiff+0x2e>
 8009274:	4b39      	ldr	r3, [pc, #228]	; (800935c <__mdiff+0x108>)
 8009276:	4602      	mov	r2, r0
 8009278:	f240 2132 	movw	r1, #562	; 0x232
 800927c:	4838      	ldr	r0, [pc, #224]	; (8009360 <__mdiff+0x10c>)
 800927e:	f000 fa49 	bl	8009714 <__assert_func>
 8009282:	2301      	movs	r3, #1
 8009284:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009288:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800928c:	bfa4      	itt	ge
 800928e:	463b      	movge	r3, r7
 8009290:	4627      	movge	r7, r4
 8009292:	4630      	mov	r0, r6
 8009294:	6879      	ldr	r1, [r7, #4]
 8009296:	bfa6      	itte	ge
 8009298:	461c      	movge	r4, r3
 800929a:	2500      	movge	r5, #0
 800929c:	2501      	movlt	r5, #1
 800929e:	f7ff fd3f 	bl	8008d20 <_Balloc>
 80092a2:	b920      	cbnz	r0, 80092ae <__mdiff+0x5a>
 80092a4:	4b2d      	ldr	r3, [pc, #180]	; (800935c <__mdiff+0x108>)
 80092a6:	4602      	mov	r2, r0
 80092a8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80092ac:	e7e6      	b.n	800927c <__mdiff+0x28>
 80092ae:	693e      	ldr	r6, [r7, #16]
 80092b0:	60c5      	str	r5, [r0, #12]
 80092b2:	6925      	ldr	r5, [r4, #16]
 80092b4:	f107 0114 	add.w	r1, r7, #20
 80092b8:	f104 0914 	add.w	r9, r4, #20
 80092bc:	f100 0e14 	add.w	lr, r0, #20
 80092c0:	f107 0210 	add.w	r2, r7, #16
 80092c4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80092c8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80092cc:	46f2      	mov	sl, lr
 80092ce:	2700      	movs	r7, #0
 80092d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80092d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80092d8:	fa1f f883 	uxth.w	r8, r3
 80092dc:	fa17 f78b 	uxtah	r7, r7, fp
 80092e0:	0c1b      	lsrs	r3, r3, #16
 80092e2:	eba7 0808 	sub.w	r8, r7, r8
 80092e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80092ee:	fa1f f888 	uxth.w	r8, r8
 80092f2:	141f      	asrs	r7, r3, #16
 80092f4:	454d      	cmp	r5, r9
 80092f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80092fa:	f84a 3b04 	str.w	r3, [sl], #4
 80092fe:	d8e7      	bhi.n	80092d0 <__mdiff+0x7c>
 8009300:	1b2b      	subs	r3, r5, r4
 8009302:	3b15      	subs	r3, #21
 8009304:	f023 0303 	bic.w	r3, r3, #3
 8009308:	3304      	adds	r3, #4
 800930a:	3415      	adds	r4, #21
 800930c:	42a5      	cmp	r5, r4
 800930e:	bf38      	it	cc
 8009310:	2304      	movcc	r3, #4
 8009312:	4419      	add	r1, r3
 8009314:	4473      	add	r3, lr
 8009316:	469e      	mov	lr, r3
 8009318:	460d      	mov	r5, r1
 800931a:	4565      	cmp	r5, ip
 800931c:	d30e      	bcc.n	800933c <__mdiff+0xe8>
 800931e:	f10c 0203 	add.w	r2, ip, #3
 8009322:	1a52      	subs	r2, r2, r1
 8009324:	f022 0203 	bic.w	r2, r2, #3
 8009328:	3903      	subs	r1, #3
 800932a:	458c      	cmp	ip, r1
 800932c:	bf38      	it	cc
 800932e:	2200      	movcc	r2, #0
 8009330:	441a      	add	r2, r3
 8009332:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009336:	b17b      	cbz	r3, 8009358 <__mdiff+0x104>
 8009338:	6106      	str	r6, [r0, #16]
 800933a:	e7a5      	b.n	8009288 <__mdiff+0x34>
 800933c:	f855 8b04 	ldr.w	r8, [r5], #4
 8009340:	fa17 f488 	uxtah	r4, r7, r8
 8009344:	1422      	asrs	r2, r4, #16
 8009346:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800934a:	b2a4      	uxth	r4, r4
 800934c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009350:	f84e 4b04 	str.w	r4, [lr], #4
 8009354:	1417      	asrs	r7, r2, #16
 8009356:	e7e0      	b.n	800931a <__mdiff+0xc6>
 8009358:	3e01      	subs	r6, #1
 800935a:	e7ea      	b.n	8009332 <__mdiff+0xde>
 800935c:	0800a0f3 	.word	0x0800a0f3
 8009360:	0800a104 	.word	0x0800a104

08009364 <__d2b>:
 8009364:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009368:	4689      	mov	r9, r1
 800936a:	2101      	movs	r1, #1
 800936c:	ec57 6b10 	vmov	r6, r7, d0
 8009370:	4690      	mov	r8, r2
 8009372:	f7ff fcd5 	bl	8008d20 <_Balloc>
 8009376:	4604      	mov	r4, r0
 8009378:	b930      	cbnz	r0, 8009388 <__d2b+0x24>
 800937a:	4602      	mov	r2, r0
 800937c:	4b25      	ldr	r3, [pc, #148]	; (8009414 <__d2b+0xb0>)
 800937e:	4826      	ldr	r0, [pc, #152]	; (8009418 <__d2b+0xb4>)
 8009380:	f240 310a 	movw	r1, #778	; 0x30a
 8009384:	f000 f9c6 	bl	8009714 <__assert_func>
 8009388:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800938c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009390:	bb35      	cbnz	r5, 80093e0 <__d2b+0x7c>
 8009392:	2e00      	cmp	r6, #0
 8009394:	9301      	str	r3, [sp, #4]
 8009396:	d028      	beq.n	80093ea <__d2b+0x86>
 8009398:	4668      	mov	r0, sp
 800939a:	9600      	str	r6, [sp, #0]
 800939c:	f7ff fd8c 	bl	8008eb8 <__lo0bits>
 80093a0:	9900      	ldr	r1, [sp, #0]
 80093a2:	b300      	cbz	r0, 80093e6 <__d2b+0x82>
 80093a4:	9a01      	ldr	r2, [sp, #4]
 80093a6:	f1c0 0320 	rsb	r3, r0, #32
 80093aa:	fa02 f303 	lsl.w	r3, r2, r3
 80093ae:	430b      	orrs	r3, r1
 80093b0:	40c2      	lsrs	r2, r0
 80093b2:	6163      	str	r3, [r4, #20]
 80093b4:	9201      	str	r2, [sp, #4]
 80093b6:	9b01      	ldr	r3, [sp, #4]
 80093b8:	61a3      	str	r3, [r4, #24]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	bf14      	ite	ne
 80093be:	2202      	movne	r2, #2
 80093c0:	2201      	moveq	r2, #1
 80093c2:	6122      	str	r2, [r4, #16]
 80093c4:	b1d5      	cbz	r5, 80093fc <__d2b+0x98>
 80093c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093ca:	4405      	add	r5, r0
 80093cc:	f8c9 5000 	str.w	r5, [r9]
 80093d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093d4:	f8c8 0000 	str.w	r0, [r8]
 80093d8:	4620      	mov	r0, r4
 80093da:	b003      	add	sp, #12
 80093dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093e4:	e7d5      	b.n	8009392 <__d2b+0x2e>
 80093e6:	6161      	str	r1, [r4, #20]
 80093e8:	e7e5      	b.n	80093b6 <__d2b+0x52>
 80093ea:	a801      	add	r0, sp, #4
 80093ec:	f7ff fd64 	bl	8008eb8 <__lo0bits>
 80093f0:	9b01      	ldr	r3, [sp, #4]
 80093f2:	6163      	str	r3, [r4, #20]
 80093f4:	2201      	movs	r2, #1
 80093f6:	6122      	str	r2, [r4, #16]
 80093f8:	3020      	adds	r0, #32
 80093fa:	e7e3      	b.n	80093c4 <__d2b+0x60>
 80093fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009400:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009404:	f8c9 0000 	str.w	r0, [r9]
 8009408:	6918      	ldr	r0, [r3, #16]
 800940a:	f7ff fd35 	bl	8008e78 <__hi0bits>
 800940e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009412:	e7df      	b.n	80093d4 <__d2b+0x70>
 8009414:	0800a0f3 	.word	0x0800a0f3
 8009418:	0800a104 	.word	0x0800a104

0800941c <_calloc_r>:
 800941c:	b513      	push	{r0, r1, r4, lr}
 800941e:	434a      	muls	r2, r1
 8009420:	4611      	mov	r1, r2
 8009422:	9201      	str	r2, [sp, #4]
 8009424:	f7fd ff5c 	bl	80072e0 <_malloc_r>
 8009428:	4604      	mov	r4, r0
 800942a:	b118      	cbz	r0, 8009434 <_calloc_r+0x18>
 800942c:	9a01      	ldr	r2, [sp, #4]
 800942e:	2100      	movs	r1, #0
 8009430:	f7fd fefe 	bl	8007230 <memset>
 8009434:	4620      	mov	r0, r4
 8009436:	b002      	add	sp, #8
 8009438:	bd10      	pop	{r4, pc}

0800943a <__ssputs_r>:
 800943a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800943e:	688e      	ldr	r6, [r1, #8]
 8009440:	429e      	cmp	r6, r3
 8009442:	4682      	mov	sl, r0
 8009444:	460c      	mov	r4, r1
 8009446:	4690      	mov	r8, r2
 8009448:	461f      	mov	r7, r3
 800944a:	d838      	bhi.n	80094be <__ssputs_r+0x84>
 800944c:	898a      	ldrh	r2, [r1, #12]
 800944e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009452:	d032      	beq.n	80094ba <__ssputs_r+0x80>
 8009454:	6825      	ldr	r5, [r4, #0]
 8009456:	6909      	ldr	r1, [r1, #16]
 8009458:	eba5 0901 	sub.w	r9, r5, r1
 800945c:	6965      	ldr	r5, [r4, #20]
 800945e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009462:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009466:	3301      	adds	r3, #1
 8009468:	444b      	add	r3, r9
 800946a:	106d      	asrs	r5, r5, #1
 800946c:	429d      	cmp	r5, r3
 800946e:	bf38      	it	cc
 8009470:	461d      	movcc	r5, r3
 8009472:	0553      	lsls	r3, r2, #21
 8009474:	d531      	bpl.n	80094da <__ssputs_r+0xa0>
 8009476:	4629      	mov	r1, r5
 8009478:	f7fd ff32 	bl	80072e0 <_malloc_r>
 800947c:	4606      	mov	r6, r0
 800947e:	b950      	cbnz	r0, 8009496 <__ssputs_r+0x5c>
 8009480:	230c      	movs	r3, #12
 8009482:	f8ca 3000 	str.w	r3, [sl]
 8009486:	89a3      	ldrh	r3, [r4, #12]
 8009488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800948c:	81a3      	strh	r3, [r4, #12]
 800948e:	f04f 30ff 	mov.w	r0, #4294967295
 8009492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009496:	6921      	ldr	r1, [r4, #16]
 8009498:	464a      	mov	r2, r9
 800949a:	f7fd febb 	bl	8007214 <memcpy>
 800949e:	89a3      	ldrh	r3, [r4, #12]
 80094a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094a8:	81a3      	strh	r3, [r4, #12]
 80094aa:	6126      	str	r6, [r4, #16]
 80094ac:	6165      	str	r5, [r4, #20]
 80094ae:	444e      	add	r6, r9
 80094b0:	eba5 0509 	sub.w	r5, r5, r9
 80094b4:	6026      	str	r6, [r4, #0]
 80094b6:	60a5      	str	r5, [r4, #8]
 80094b8:	463e      	mov	r6, r7
 80094ba:	42be      	cmp	r6, r7
 80094bc:	d900      	bls.n	80094c0 <__ssputs_r+0x86>
 80094be:	463e      	mov	r6, r7
 80094c0:	4632      	mov	r2, r6
 80094c2:	6820      	ldr	r0, [r4, #0]
 80094c4:	4641      	mov	r1, r8
 80094c6:	f000 f967 	bl	8009798 <memmove>
 80094ca:	68a3      	ldr	r3, [r4, #8]
 80094cc:	6822      	ldr	r2, [r4, #0]
 80094ce:	1b9b      	subs	r3, r3, r6
 80094d0:	4432      	add	r2, r6
 80094d2:	60a3      	str	r3, [r4, #8]
 80094d4:	6022      	str	r2, [r4, #0]
 80094d6:	2000      	movs	r0, #0
 80094d8:	e7db      	b.n	8009492 <__ssputs_r+0x58>
 80094da:	462a      	mov	r2, r5
 80094dc:	f000 f976 	bl	80097cc <_realloc_r>
 80094e0:	4606      	mov	r6, r0
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d1e1      	bne.n	80094aa <__ssputs_r+0x70>
 80094e6:	6921      	ldr	r1, [r4, #16]
 80094e8:	4650      	mov	r0, sl
 80094ea:	f7fd fea9 	bl	8007240 <_free_r>
 80094ee:	e7c7      	b.n	8009480 <__ssputs_r+0x46>

080094f0 <_svfiprintf_r>:
 80094f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094f4:	4698      	mov	r8, r3
 80094f6:	898b      	ldrh	r3, [r1, #12]
 80094f8:	061b      	lsls	r3, r3, #24
 80094fa:	b09d      	sub	sp, #116	; 0x74
 80094fc:	4607      	mov	r7, r0
 80094fe:	460d      	mov	r5, r1
 8009500:	4614      	mov	r4, r2
 8009502:	d50e      	bpl.n	8009522 <_svfiprintf_r+0x32>
 8009504:	690b      	ldr	r3, [r1, #16]
 8009506:	b963      	cbnz	r3, 8009522 <_svfiprintf_r+0x32>
 8009508:	2140      	movs	r1, #64	; 0x40
 800950a:	f7fd fee9 	bl	80072e0 <_malloc_r>
 800950e:	6028      	str	r0, [r5, #0]
 8009510:	6128      	str	r0, [r5, #16]
 8009512:	b920      	cbnz	r0, 800951e <_svfiprintf_r+0x2e>
 8009514:	230c      	movs	r3, #12
 8009516:	603b      	str	r3, [r7, #0]
 8009518:	f04f 30ff 	mov.w	r0, #4294967295
 800951c:	e0d1      	b.n	80096c2 <_svfiprintf_r+0x1d2>
 800951e:	2340      	movs	r3, #64	; 0x40
 8009520:	616b      	str	r3, [r5, #20]
 8009522:	2300      	movs	r3, #0
 8009524:	9309      	str	r3, [sp, #36]	; 0x24
 8009526:	2320      	movs	r3, #32
 8009528:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800952c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009530:	2330      	movs	r3, #48	; 0x30
 8009532:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80096dc <_svfiprintf_r+0x1ec>
 8009536:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800953a:	f04f 0901 	mov.w	r9, #1
 800953e:	4623      	mov	r3, r4
 8009540:	469a      	mov	sl, r3
 8009542:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009546:	b10a      	cbz	r2, 800954c <_svfiprintf_r+0x5c>
 8009548:	2a25      	cmp	r2, #37	; 0x25
 800954a:	d1f9      	bne.n	8009540 <_svfiprintf_r+0x50>
 800954c:	ebba 0b04 	subs.w	fp, sl, r4
 8009550:	d00b      	beq.n	800956a <_svfiprintf_r+0x7a>
 8009552:	465b      	mov	r3, fp
 8009554:	4622      	mov	r2, r4
 8009556:	4629      	mov	r1, r5
 8009558:	4638      	mov	r0, r7
 800955a:	f7ff ff6e 	bl	800943a <__ssputs_r>
 800955e:	3001      	adds	r0, #1
 8009560:	f000 80aa 	beq.w	80096b8 <_svfiprintf_r+0x1c8>
 8009564:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009566:	445a      	add	r2, fp
 8009568:	9209      	str	r2, [sp, #36]	; 0x24
 800956a:	f89a 3000 	ldrb.w	r3, [sl]
 800956e:	2b00      	cmp	r3, #0
 8009570:	f000 80a2 	beq.w	80096b8 <_svfiprintf_r+0x1c8>
 8009574:	2300      	movs	r3, #0
 8009576:	f04f 32ff 	mov.w	r2, #4294967295
 800957a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800957e:	f10a 0a01 	add.w	sl, sl, #1
 8009582:	9304      	str	r3, [sp, #16]
 8009584:	9307      	str	r3, [sp, #28]
 8009586:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800958a:	931a      	str	r3, [sp, #104]	; 0x68
 800958c:	4654      	mov	r4, sl
 800958e:	2205      	movs	r2, #5
 8009590:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009594:	4851      	ldr	r0, [pc, #324]	; (80096dc <_svfiprintf_r+0x1ec>)
 8009596:	f7f6 fe43 	bl	8000220 <memchr>
 800959a:	9a04      	ldr	r2, [sp, #16]
 800959c:	b9d8      	cbnz	r0, 80095d6 <_svfiprintf_r+0xe6>
 800959e:	06d0      	lsls	r0, r2, #27
 80095a0:	bf44      	itt	mi
 80095a2:	2320      	movmi	r3, #32
 80095a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095a8:	0711      	lsls	r1, r2, #28
 80095aa:	bf44      	itt	mi
 80095ac:	232b      	movmi	r3, #43	; 0x2b
 80095ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095b2:	f89a 3000 	ldrb.w	r3, [sl]
 80095b6:	2b2a      	cmp	r3, #42	; 0x2a
 80095b8:	d015      	beq.n	80095e6 <_svfiprintf_r+0xf6>
 80095ba:	9a07      	ldr	r2, [sp, #28]
 80095bc:	4654      	mov	r4, sl
 80095be:	2000      	movs	r0, #0
 80095c0:	f04f 0c0a 	mov.w	ip, #10
 80095c4:	4621      	mov	r1, r4
 80095c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095ca:	3b30      	subs	r3, #48	; 0x30
 80095cc:	2b09      	cmp	r3, #9
 80095ce:	d94e      	bls.n	800966e <_svfiprintf_r+0x17e>
 80095d0:	b1b0      	cbz	r0, 8009600 <_svfiprintf_r+0x110>
 80095d2:	9207      	str	r2, [sp, #28]
 80095d4:	e014      	b.n	8009600 <_svfiprintf_r+0x110>
 80095d6:	eba0 0308 	sub.w	r3, r0, r8
 80095da:	fa09 f303 	lsl.w	r3, r9, r3
 80095de:	4313      	orrs	r3, r2
 80095e0:	9304      	str	r3, [sp, #16]
 80095e2:	46a2      	mov	sl, r4
 80095e4:	e7d2      	b.n	800958c <_svfiprintf_r+0x9c>
 80095e6:	9b03      	ldr	r3, [sp, #12]
 80095e8:	1d19      	adds	r1, r3, #4
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	9103      	str	r1, [sp, #12]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	bfbb      	ittet	lt
 80095f2:	425b      	neglt	r3, r3
 80095f4:	f042 0202 	orrlt.w	r2, r2, #2
 80095f8:	9307      	strge	r3, [sp, #28]
 80095fa:	9307      	strlt	r3, [sp, #28]
 80095fc:	bfb8      	it	lt
 80095fe:	9204      	strlt	r2, [sp, #16]
 8009600:	7823      	ldrb	r3, [r4, #0]
 8009602:	2b2e      	cmp	r3, #46	; 0x2e
 8009604:	d10c      	bne.n	8009620 <_svfiprintf_r+0x130>
 8009606:	7863      	ldrb	r3, [r4, #1]
 8009608:	2b2a      	cmp	r3, #42	; 0x2a
 800960a:	d135      	bne.n	8009678 <_svfiprintf_r+0x188>
 800960c:	9b03      	ldr	r3, [sp, #12]
 800960e:	1d1a      	adds	r2, r3, #4
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	9203      	str	r2, [sp, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	bfb8      	it	lt
 8009618:	f04f 33ff 	movlt.w	r3, #4294967295
 800961c:	3402      	adds	r4, #2
 800961e:	9305      	str	r3, [sp, #20]
 8009620:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80096ec <_svfiprintf_r+0x1fc>
 8009624:	7821      	ldrb	r1, [r4, #0]
 8009626:	2203      	movs	r2, #3
 8009628:	4650      	mov	r0, sl
 800962a:	f7f6 fdf9 	bl	8000220 <memchr>
 800962e:	b140      	cbz	r0, 8009642 <_svfiprintf_r+0x152>
 8009630:	2340      	movs	r3, #64	; 0x40
 8009632:	eba0 000a 	sub.w	r0, r0, sl
 8009636:	fa03 f000 	lsl.w	r0, r3, r0
 800963a:	9b04      	ldr	r3, [sp, #16]
 800963c:	4303      	orrs	r3, r0
 800963e:	3401      	adds	r4, #1
 8009640:	9304      	str	r3, [sp, #16]
 8009642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009646:	4826      	ldr	r0, [pc, #152]	; (80096e0 <_svfiprintf_r+0x1f0>)
 8009648:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800964c:	2206      	movs	r2, #6
 800964e:	f7f6 fde7 	bl	8000220 <memchr>
 8009652:	2800      	cmp	r0, #0
 8009654:	d038      	beq.n	80096c8 <_svfiprintf_r+0x1d8>
 8009656:	4b23      	ldr	r3, [pc, #140]	; (80096e4 <_svfiprintf_r+0x1f4>)
 8009658:	bb1b      	cbnz	r3, 80096a2 <_svfiprintf_r+0x1b2>
 800965a:	9b03      	ldr	r3, [sp, #12]
 800965c:	3307      	adds	r3, #7
 800965e:	f023 0307 	bic.w	r3, r3, #7
 8009662:	3308      	adds	r3, #8
 8009664:	9303      	str	r3, [sp, #12]
 8009666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009668:	4433      	add	r3, r6
 800966a:	9309      	str	r3, [sp, #36]	; 0x24
 800966c:	e767      	b.n	800953e <_svfiprintf_r+0x4e>
 800966e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009672:	460c      	mov	r4, r1
 8009674:	2001      	movs	r0, #1
 8009676:	e7a5      	b.n	80095c4 <_svfiprintf_r+0xd4>
 8009678:	2300      	movs	r3, #0
 800967a:	3401      	adds	r4, #1
 800967c:	9305      	str	r3, [sp, #20]
 800967e:	4619      	mov	r1, r3
 8009680:	f04f 0c0a 	mov.w	ip, #10
 8009684:	4620      	mov	r0, r4
 8009686:	f810 2b01 	ldrb.w	r2, [r0], #1
 800968a:	3a30      	subs	r2, #48	; 0x30
 800968c:	2a09      	cmp	r2, #9
 800968e:	d903      	bls.n	8009698 <_svfiprintf_r+0x1a8>
 8009690:	2b00      	cmp	r3, #0
 8009692:	d0c5      	beq.n	8009620 <_svfiprintf_r+0x130>
 8009694:	9105      	str	r1, [sp, #20]
 8009696:	e7c3      	b.n	8009620 <_svfiprintf_r+0x130>
 8009698:	fb0c 2101 	mla	r1, ip, r1, r2
 800969c:	4604      	mov	r4, r0
 800969e:	2301      	movs	r3, #1
 80096a0:	e7f0      	b.n	8009684 <_svfiprintf_r+0x194>
 80096a2:	ab03      	add	r3, sp, #12
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	462a      	mov	r2, r5
 80096a8:	4b0f      	ldr	r3, [pc, #60]	; (80096e8 <_svfiprintf_r+0x1f8>)
 80096aa:	a904      	add	r1, sp, #16
 80096ac:	4638      	mov	r0, r7
 80096ae:	f7fd ff11 	bl	80074d4 <_printf_float>
 80096b2:	1c42      	adds	r2, r0, #1
 80096b4:	4606      	mov	r6, r0
 80096b6:	d1d6      	bne.n	8009666 <_svfiprintf_r+0x176>
 80096b8:	89ab      	ldrh	r3, [r5, #12]
 80096ba:	065b      	lsls	r3, r3, #25
 80096bc:	f53f af2c 	bmi.w	8009518 <_svfiprintf_r+0x28>
 80096c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096c2:	b01d      	add	sp, #116	; 0x74
 80096c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096c8:	ab03      	add	r3, sp, #12
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	462a      	mov	r2, r5
 80096ce:	4b06      	ldr	r3, [pc, #24]	; (80096e8 <_svfiprintf_r+0x1f8>)
 80096d0:	a904      	add	r1, sp, #16
 80096d2:	4638      	mov	r0, r7
 80096d4:	f7fe f9a2 	bl	8007a1c <_printf_i>
 80096d8:	e7eb      	b.n	80096b2 <_svfiprintf_r+0x1c2>
 80096da:	bf00      	nop
 80096dc:	0800a264 	.word	0x0800a264
 80096e0:	0800a26e 	.word	0x0800a26e
 80096e4:	080074d5 	.word	0x080074d5
 80096e8:	0800943b 	.word	0x0800943b
 80096ec:	0800a26a 	.word	0x0800a26a

080096f0 <_read_r>:
 80096f0:	b538      	push	{r3, r4, r5, lr}
 80096f2:	4d07      	ldr	r5, [pc, #28]	; (8009710 <_read_r+0x20>)
 80096f4:	4604      	mov	r4, r0
 80096f6:	4608      	mov	r0, r1
 80096f8:	4611      	mov	r1, r2
 80096fa:	2200      	movs	r2, #0
 80096fc:	602a      	str	r2, [r5, #0]
 80096fe:	461a      	mov	r2, r3
 8009700:	f7f8 f81a 	bl	8001738 <_read>
 8009704:	1c43      	adds	r3, r0, #1
 8009706:	d102      	bne.n	800970e <_read_r+0x1e>
 8009708:	682b      	ldr	r3, [r5, #0]
 800970a:	b103      	cbz	r3, 800970e <_read_r+0x1e>
 800970c:	6023      	str	r3, [r4, #0]
 800970e:	bd38      	pop	{r3, r4, r5, pc}
 8009710:	20006b68 	.word	0x20006b68

08009714 <__assert_func>:
 8009714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009716:	4614      	mov	r4, r2
 8009718:	461a      	mov	r2, r3
 800971a:	4b09      	ldr	r3, [pc, #36]	; (8009740 <__assert_func+0x2c>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4605      	mov	r5, r0
 8009720:	68d8      	ldr	r0, [r3, #12]
 8009722:	b14c      	cbz	r4, 8009738 <__assert_func+0x24>
 8009724:	4b07      	ldr	r3, [pc, #28]	; (8009744 <__assert_func+0x30>)
 8009726:	9100      	str	r1, [sp, #0]
 8009728:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800972c:	4906      	ldr	r1, [pc, #24]	; (8009748 <__assert_func+0x34>)
 800972e:	462b      	mov	r3, r5
 8009730:	f000 f80e 	bl	8009750 <fiprintf>
 8009734:	f000 fa98 	bl	8009c68 <abort>
 8009738:	4b04      	ldr	r3, [pc, #16]	; (800974c <__assert_func+0x38>)
 800973a:	461c      	mov	r4, r3
 800973c:	e7f3      	b.n	8009726 <__assert_func+0x12>
 800973e:	bf00      	nop
 8009740:	20000010 	.word	0x20000010
 8009744:	0800a275 	.word	0x0800a275
 8009748:	0800a282 	.word	0x0800a282
 800974c:	0800a2b0 	.word	0x0800a2b0

08009750 <fiprintf>:
 8009750:	b40e      	push	{r1, r2, r3}
 8009752:	b503      	push	{r0, r1, lr}
 8009754:	4601      	mov	r1, r0
 8009756:	ab03      	add	r3, sp, #12
 8009758:	4805      	ldr	r0, [pc, #20]	; (8009770 <fiprintf+0x20>)
 800975a:	f853 2b04 	ldr.w	r2, [r3], #4
 800975e:	6800      	ldr	r0, [r0, #0]
 8009760:	9301      	str	r3, [sp, #4]
 8009762:	f000 f883 	bl	800986c <_vfiprintf_r>
 8009766:	b002      	add	sp, #8
 8009768:	f85d eb04 	ldr.w	lr, [sp], #4
 800976c:	b003      	add	sp, #12
 800976e:	4770      	bx	lr
 8009770:	20000010 	.word	0x20000010

08009774 <__ascii_mbtowc>:
 8009774:	b082      	sub	sp, #8
 8009776:	b901      	cbnz	r1, 800977a <__ascii_mbtowc+0x6>
 8009778:	a901      	add	r1, sp, #4
 800977a:	b142      	cbz	r2, 800978e <__ascii_mbtowc+0x1a>
 800977c:	b14b      	cbz	r3, 8009792 <__ascii_mbtowc+0x1e>
 800977e:	7813      	ldrb	r3, [r2, #0]
 8009780:	600b      	str	r3, [r1, #0]
 8009782:	7812      	ldrb	r2, [r2, #0]
 8009784:	1e10      	subs	r0, r2, #0
 8009786:	bf18      	it	ne
 8009788:	2001      	movne	r0, #1
 800978a:	b002      	add	sp, #8
 800978c:	4770      	bx	lr
 800978e:	4610      	mov	r0, r2
 8009790:	e7fb      	b.n	800978a <__ascii_mbtowc+0x16>
 8009792:	f06f 0001 	mvn.w	r0, #1
 8009796:	e7f8      	b.n	800978a <__ascii_mbtowc+0x16>

08009798 <memmove>:
 8009798:	4288      	cmp	r0, r1
 800979a:	b510      	push	{r4, lr}
 800979c:	eb01 0402 	add.w	r4, r1, r2
 80097a0:	d902      	bls.n	80097a8 <memmove+0x10>
 80097a2:	4284      	cmp	r4, r0
 80097a4:	4623      	mov	r3, r4
 80097a6:	d807      	bhi.n	80097b8 <memmove+0x20>
 80097a8:	1e43      	subs	r3, r0, #1
 80097aa:	42a1      	cmp	r1, r4
 80097ac:	d008      	beq.n	80097c0 <memmove+0x28>
 80097ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097b6:	e7f8      	b.n	80097aa <memmove+0x12>
 80097b8:	4402      	add	r2, r0
 80097ba:	4601      	mov	r1, r0
 80097bc:	428a      	cmp	r2, r1
 80097be:	d100      	bne.n	80097c2 <memmove+0x2a>
 80097c0:	bd10      	pop	{r4, pc}
 80097c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097ca:	e7f7      	b.n	80097bc <memmove+0x24>

080097cc <_realloc_r>:
 80097cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ce:	4607      	mov	r7, r0
 80097d0:	4614      	mov	r4, r2
 80097d2:	460e      	mov	r6, r1
 80097d4:	b921      	cbnz	r1, 80097e0 <_realloc_r+0x14>
 80097d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80097da:	4611      	mov	r1, r2
 80097dc:	f7fd bd80 	b.w	80072e0 <_malloc_r>
 80097e0:	b922      	cbnz	r2, 80097ec <_realloc_r+0x20>
 80097e2:	f7fd fd2d 	bl	8007240 <_free_r>
 80097e6:	4625      	mov	r5, r4
 80097e8:	4628      	mov	r0, r5
 80097ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097ec:	f000 faa8 	bl	8009d40 <_malloc_usable_size_r>
 80097f0:	42a0      	cmp	r0, r4
 80097f2:	d20f      	bcs.n	8009814 <_realloc_r+0x48>
 80097f4:	4621      	mov	r1, r4
 80097f6:	4638      	mov	r0, r7
 80097f8:	f7fd fd72 	bl	80072e0 <_malloc_r>
 80097fc:	4605      	mov	r5, r0
 80097fe:	2800      	cmp	r0, #0
 8009800:	d0f2      	beq.n	80097e8 <_realloc_r+0x1c>
 8009802:	4631      	mov	r1, r6
 8009804:	4622      	mov	r2, r4
 8009806:	f7fd fd05 	bl	8007214 <memcpy>
 800980a:	4631      	mov	r1, r6
 800980c:	4638      	mov	r0, r7
 800980e:	f7fd fd17 	bl	8007240 <_free_r>
 8009812:	e7e9      	b.n	80097e8 <_realloc_r+0x1c>
 8009814:	4635      	mov	r5, r6
 8009816:	e7e7      	b.n	80097e8 <_realloc_r+0x1c>

08009818 <__sfputc_r>:
 8009818:	6893      	ldr	r3, [r2, #8]
 800981a:	3b01      	subs	r3, #1
 800981c:	2b00      	cmp	r3, #0
 800981e:	b410      	push	{r4}
 8009820:	6093      	str	r3, [r2, #8]
 8009822:	da08      	bge.n	8009836 <__sfputc_r+0x1e>
 8009824:	6994      	ldr	r4, [r2, #24]
 8009826:	42a3      	cmp	r3, r4
 8009828:	db01      	blt.n	800982e <__sfputc_r+0x16>
 800982a:	290a      	cmp	r1, #10
 800982c:	d103      	bne.n	8009836 <__sfputc_r+0x1e>
 800982e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009832:	f000 b94b 	b.w	8009acc <__swbuf_r>
 8009836:	6813      	ldr	r3, [r2, #0]
 8009838:	1c58      	adds	r0, r3, #1
 800983a:	6010      	str	r0, [r2, #0]
 800983c:	7019      	strb	r1, [r3, #0]
 800983e:	4608      	mov	r0, r1
 8009840:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009844:	4770      	bx	lr

08009846 <__sfputs_r>:
 8009846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009848:	4606      	mov	r6, r0
 800984a:	460f      	mov	r7, r1
 800984c:	4614      	mov	r4, r2
 800984e:	18d5      	adds	r5, r2, r3
 8009850:	42ac      	cmp	r4, r5
 8009852:	d101      	bne.n	8009858 <__sfputs_r+0x12>
 8009854:	2000      	movs	r0, #0
 8009856:	e007      	b.n	8009868 <__sfputs_r+0x22>
 8009858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800985c:	463a      	mov	r2, r7
 800985e:	4630      	mov	r0, r6
 8009860:	f7ff ffda 	bl	8009818 <__sfputc_r>
 8009864:	1c43      	adds	r3, r0, #1
 8009866:	d1f3      	bne.n	8009850 <__sfputs_r+0xa>
 8009868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800986c <_vfiprintf_r>:
 800986c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009870:	460d      	mov	r5, r1
 8009872:	b09d      	sub	sp, #116	; 0x74
 8009874:	4614      	mov	r4, r2
 8009876:	4698      	mov	r8, r3
 8009878:	4606      	mov	r6, r0
 800987a:	b118      	cbz	r0, 8009884 <_vfiprintf_r+0x18>
 800987c:	6983      	ldr	r3, [r0, #24]
 800987e:	b90b      	cbnz	r3, 8009884 <_vfiprintf_r+0x18>
 8009880:	f7fd fbfa 	bl	8007078 <__sinit>
 8009884:	4b89      	ldr	r3, [pc, #548]	; (8009aac <_vfiprintf_r+0x240>)
 8009886:	429d      	cmp	r5, r3
 8009888:	d11b      	bne.n	80098c2 <_vfiprintf_r+0x56>
 800988a:	6875      	ldr	r5, [r6, #4]
 800988c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800988e:	07d9      	lsls	r1, r3, #31
 8009890:	d405      	bmi.n	800989e <_vfiprintf_r+0x32>
 8009892:	89ab      	ldrh	r3, [r5, #12]
 8009894:	059a      	lsls	r2, r3, #22
 8009896:	d402      	bmi.n	800989e <_vfiprintf_r+0x32>
 8009898:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800989a:	f7fd fcb0 	bl	80071fe <__retarget_lock_acquire_recursive>
 800989e:	89ab      	ldrh	r3, [r5, #12]
 80098a0:	071b      	lsls	r3, r3, #28
 80098a2:	d501      	bpl.n	80098a8 <_vfiprintf_r+0x3c>
 80098a4:	692b      	ldr	r3, [r5, #16]
 80098a6:	b9eb      	cbnz	r3, 80098e4 <_vfiprintf_r+0x78>
 80098a8:	4629      	mov	r1, r5
 80098aa:	4630      	mov	r0, r6
 80098ac:	f000 f96e 	bl	8009b8c <__swsetup_r>
 80098b0:	b1c0      	cbz	r0, 80098e4 <_vfiprintf_r+0x78>
 80098b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098b4:	07dc      	lsls	r4, r3, #31
 80098b6:	d50e      	bpl.n	80098d6 <_vfiprintf_r+0x6a>
 80098b8:	f04f 30ff 	mov.w	r0, #4294967295
 80098bc:	b01d      	add	sp, #116	; 0x74
 80098be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c2:	4b7b      	ldr	r3, [pc, #492]	; (8009ab0 <_vfiprintf_r+0x244>)
 80098c4:	429d      	cmp	r5, r3
 80098c6:	d101      	bne.n	80098cc <_vfiprintf_r+0x60>
 80098c8:	68b5      	ldr	r5, [r6, #8]
 80098ca:	e7df      	b.n	800988c <_vfiprintf_r+0x20>
 80098cc:	4b79      	ldr	r3, [pc, #484]	; (8009ab4 <_vfiprintf_r+0x248>)
 80098ce:	429d      	cmp	r5, r3
 80098d0:	bf08      	it	eq
 80098d2:	68f5      	ldreq	r5, [r6, #12]
 80098d4:	e7da      	b.n	800988c <_vfiprintf_r+0x20>
 80098d6:	89ab      	ldrh	r3, [r5, #12]
 80098d8:	0598      	lsls	r0, r3, #22
 80098da:	d4ed      	bmi.n	80098b8 <_vfiprintf_r+0x4c>
 80098dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098de:	f7fd fc8f 	bl	8007200 <__retarget_lock_release_recursive>
 80098e2:	e7e9      	b.n	80098b8 <_vfiprintf_r+0x4c>
 80098e4:	2300      	movs	r3, #0
 80098e6:	9309      	str	r3, [sp, #36]	; 0x24
 80098e8:	2320      	movs	r3, #32
 80098ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80098ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80098f2:	2330      	movs	r3, #48	; 0x30
 80098f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ab8 <_vfiprintf_r+0x24c>
 80098f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80098fc:	f04f 0901 	mov.w	r9, #1
 8009900:	4623      	mov	r3, r4
 8009902:	469a      	mov	sl, r3
 8009904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009908:	b10a      	cbz	r2, 800990e <_vfiprintf_r+0xa2>
 800990a:	2a25      	cmp	r2, #37	; 0x25
 800990c:	d1f9      	bne.n	8009902 <_vfiprintf_r+0x96>
 800990e:	ebba 0b04 	subs.w	fp, sl, r4
 8009912:	d00b      	beq.n	800992c <_vfiprintf_r+0xc0>
 8009914:	465b      	mov	r3, fp
 8009916:	4622      	mov	r2, r4
 8009918:	4629      	mov	r1, r5
 800991a:	4630      	mov	r0, r6
 800991c:	f7ff ff93 	bl	8009846 <__sfputs_r>
 8009920:	3001      	adds	r0, #1
 8009922:	f000 80aa 	beq.w	8009a7a <_vfiprintf_r+0x20e>
 8009926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009928:	445a      	add	r2, fp
 800992a:	9209      	str	r2, [sp, #36]	; 0x24
 800992c:	f89a 3000 	ldrb.w	r3, [sl]
 8009930:	2b00      	cmp	r3, #0
 8009932:	f000 80a2 	beq.w	8009a7a <_vfiprintf_r+0x20e>
 8009936:	2300      	movs	r3, #0
 8009938:	f04f 32ff 	mov.w	r2, #4294967295
 800993c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009940:	f10a 0a01 	add.w	sl, sl, #1
 8009944:	9304      	str	r3, [sp, #16]
 8009946:	9307      	str	r3, [sp, #28]
 8009948:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800994c:	931a      	str	r3, [sp, #104]	; 0x68
 800994e:	4654      	mov	r4, sl
 8009950:	2205      	movs	r2, #5
 8009952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009956:	4858      	ldr	r0, [pc, #352]	; (8009ab8 <_vfiprintf_r+0x24c>)
 8009958:	f7f6 fc62 	bl	8000220 <memchr>
 800995c:	9a04      	ldr	r2, [sp, #16]
 800995e:	b9d8      	cbnz	r0, 8009998 <_vfiprintf_r+0x12c>
 8009960:	06d1      	lsls	r1, r2, #27
 8009962:	bf44      	itt	mi
 8009964:	2320      	movmi	r3, #32
 8009966:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800996a:	0713      	lsls	r3, r2, #28
 800996c:	bf44      	itt	mi
 800996e:	232b      	movmi	r3, #43	; 0x2b
 8009970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009974:	f89a 3000 	ldrb.w	r3, [sl]
 8009978:	2b2a      	cmp	r3, #42	; 0x2a
 800997a:	d015      	beq.n	80099a8 <_vfiprintf_r+0x13c>
 800997c:	9a07      	ldr	r2, [sp, #28]
 800997e:	4654      	mov	r4, sl
 8009980:	2000      	movs	r0, #0
 8009982:	f04f 0c0a 	mov.w	ip, #10
 8009986:	4621      	mov	r1, r4
 8009988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800998c:	3b30      	subs	r3, #48	; 0x30
 800998e:	2b09      	cmp	r3, #9
 8009990:	d94e      	bls.n	8009a30 <_vfiprintf_r+0x1c4>
 8009992:	b1b0      	cbz	r0, 80099c2 <_vfiprintf_r+0x156>
 8009994:	9207      	str	r2, [sp, #28]
 8009996:	e014      	b.n	80099c2 <_vfiprintf_r+0x156>
 8009998:	eba0 0308 	sub.w	r3, r0, r8
 800999c:	fa09 f303 	lsl.w	r3, r9, r3
 80099a0:	4313      	orrs	r3, r2
 80099a2:	9304      	str	r3, [sp, #16]
 80099a4:	46a2      	mov	sl, r4
 80099a6:	e7d2      	b.n	800994e <_vfiprintf_r+0xe2>
 80099a8:	9b03      	ldr	r3, [sp, #12]
 80099aa:	1d19      	adds	r1, r3, #4
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	9103      	str	r1, [sp, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	bfbb      	ittet	lt
 80099b4:	425b      	neglt	r3, r3
 80099b6:	f042 0202 	orrlt.w	r2, r2, #2
 80099ba:	9307      	strge	r3, [sp, #28]
 80099bc:	9307      	strlt	r3, [sp, #28]
 80099be:	bfb8      	it	lt
 80099c0:	9204      	strlt	r2, [sp, #16]
 80099c2:	7823      	ldrb	r3, [r4, #0]
 80099c4:	2b2e      	cmp	r3, #46	; 0x2e
 80099c6:	d10c      	bne.n	80099e2 <_vfiprintf_r+0x176>
 80099c8:	7863      	ldrb	r3, [r4, #1]
 80099ca:	2b2a      	cmp	r3, #42	; 0x2a
 80099cc:	d135      	bne.n	8009a3a <_vfiprintf_r+0x1ce>
 80099ce:	9b03      	ldr	r3, [sp, #12]
 80099d0:	1d1a      	adds	r2, r3, #4
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	9203      	str	r2, [sp, #12]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	bfb8      	it	lt
 80099da:	f04f 33ff 	movlt.w	r3, #4294967295
 80099de:	3402      	adds	r4, #2
 80099e0:	9305      	str	r3, [sp, #20]
 80099e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ac8 <_vfiprintf_r+0x25c>
 80099e6:	7821      	ldrb	r1, [r4, #0]
 80099e8:	2203      	movs	r2, #3
 80099ea:	4650      	mov	r0, sl
 80099ec:	f7f6 fc18 	bl	8000220 <memchr>
 80099f0:	b140      	cbz	r0, 8009a04 <_vfiprintf_r+0x198>
 80099f2:	2340      	movs	r3, #64	; 0x40
 80099f4:	eba0 000a 	sub.w	r0, r0, sl
 80099f8:	fa03 f000 	lsl.w	r0, r3, r0
 80099fc:	9b04      	ldr	r3, [sp, #16]
 80099fe:	4303      	orrs	r3, r0
 8009a00:	3401      	adds	r4, #1
 8009a02:	9304      	str	r3, [sp, #16]
 8009a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a08:	482c      	ldr	r0, [pc, #176]	; (8009abc <_vfiprintf_r+0x250>)
 8009a0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a0e:	2206      	movs	r2, #6
 8009a10:	f7f6 fc06 	bl	8000220 <memchr>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d03f      	beq.n	8009a98 <_vfiprintf_r+0x22c>
 8009a18:	4b29      	ldr	r3, [pc, #164]	; (8009ac0 <_vfiprintf_r+0x254>)
 8009a1a:	bb1b      	cbnz	r3, 8009a64 <_vfiprintf_r+0x1f8>
 8009a1c:	9b03      	ldr	r3, [sp, #12]
 8009a1e:	3307      	adds	r3, #7
 8009a20:	f023 0307 	bic.w	r3, r3, #7
 8009a24:	3308      	adds	r3, #8
 8009a26:	9303      	str	r3, [sp, #12]
 8009a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a2a:	443b      	add	r3, r7
 8009a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a2e:	e767      	b.n	8009900 <_vfiprintf_r+0x94>
 8009a30:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a34:	460c      	mov	r4, r1
 8009a36:	2001      	movs	r0, #1
 8009a38:	e7a5      	b.n	8009986 <_vfiprintf_r+0x11a>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	3401      	adds	r4, #1
 8009a3e:	9305      	str	r3, [sp, #20]
 8009a40:	4619      	mov	r1, r3
 8009a42:	f04f 0c0a 	mov.w	ip, #10
 8009a46:	4620      	mov	r0, r4
 8009a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a4c:	3a30      	subs	r2, #48	; 0x30
 8009a4e:	2a09      	cmp	r2, #9
 8009a50:	d903      	bls.n	8009a5a <_vfiprintf_r+0x1ee>
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d0c5      	beq.n	80099e2 <_vfiprintf_r+0x176>
 8009a56:	9105      	str	r1, [sp, #20]
 8009a58:	e7c3      	b.n	80099e2 <_vfiprintf_r+0x176>
 8009a5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a5e:	4604      	mov	r4, r0
 8009a60:	2301      	movs	r3, #1
 8009a62:	e7f0      	b.n	8009a46 <_vfiprintf_r+0x1da>
 8009a64:	ab03      	add	r3, sp, #12
 8009a66:	9300      	str	r3, [sp, #0]
 8009a68:	462a      	mov	r2, r5
 8009a6a:	4b16      	ldr	r3, [pc, #88]	; (8009ac4 <_vfiprintf_r+0x258>)
 8009a6c:	a904      	add	r1, sp, #16
 8009a6e:	4630      	mov	r0, r6
 8009a70:	f7fd fd30 	bl	80074d4 <_printf_float>
 8009a74:	4607      	mov	r7, r0
 8009a76:	1c78      	adds	r0, r7, #1
 8009a78:	d1d6      	bne.n	8009a28 <_vfiprintf_r+0x1bc>
 8009a7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a7c:	07d9      	lsls	r1, r3, #31
 8009a7e:	d405      	bmi.n	8009a8c <_vfiprintf_r+0x220>
 8009a80:	89ab      	ldrh	r3, [r5, #12]
 8009a82:	059a      	lsls	r2, r3, #22
 8009a84:	d402      	bmi.n	8009a8c <_vfiprintf_r+0x220>
 8009a86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a88:	f7fd fbba 	bl	8007200 <__retarget_lock_release_recursive>
 8009a8c:	89ab      	ldrh	r3, [r5, #12]
 8009a8e:	065b      	lsls	r3, r3, #25
 8009a90:	f53f af12 	bmi.w	80098b8 <_vfiprintf_r+0x4c>
 8009a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a96:	e711      	b.n	80098bc <_vfiprintf_r+0x50>
 8009a98:	ab03      	add	r3, sp, #12
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	462a      	mov	r2, r5
 8009a9e:	4b09      	ldr	r3, [pc, #36]	; (8009ac4 <_vfiprintf_r+0x258>)
 8009aa0:	a904      	add	r1, sp, #16
 8009aa2:	4630      	mov	r0, r6
 8009aa4:	f7fd ffba 	bl	8007a1c <_printf_i>
 8009aa8:	e7e4      	b.n	8009a74 <_vfiprintf_r+0x208>
 8009aaa:	bf00      	nop
 8009aac:	08009ff8 	.word	0x08009ff8
 8009ab0:	0800a018 	.word	0x0800a018
 8009ab4:	08009fd8 	.word	0x08009fd8
 8009ab8:	0800a264 	.word	0x0800a264
 8009abc:	0800a26e 	.word	0x0800a26e
 8009ac0:	080074d5 	.word	0x080074d5
 8009ac4:	08009847 	.word	0x08009847
 8009ac8:	0800a26a 	.word	0x0800a26a

08009acc <__swbuf_r>:
 8009acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ace:	460e      	mov	r6, r1
 8009ad0:	4614      	mov	r4, r2
 8009ad2:	4605      	mov	r5, r0
 8009ad4:	b118      	cbz	r0, 8009ade <__swbuf_r+0x12>
 8009ad6:	6983      	ldr	r3, [r0, #24]
 8009ad8:	b90b      	cbnz	r3, 8009ade <__swbuf_r+0x12>
 8009ada:	f7fd facd 	bl	8007078 <__sinit>
 8009ade:	4b21      	ldr	r3, [pc, #132]	; (8009b64 <__swbuf_r+0x98>)
 8009ae0:	429c      	cmp	r4, r3
 8009ae2:	d12b      	bne.n	8009b3c <__swbuf_r+0x70>
 8009ae4:	686c      	ldr	r4, [r5, #4]
 8009ae6:	69a3      	ldr	r3, [r4, #24]
 8009ae8:	60a3      	str	r3, [r4, #8]
 8009aea:	89a3      	ldrh	r3, [r4, #12]
 8009aec:	071a      	lsls	r2, r3, #28
 8009aee:	d52f      	bpl.n	8009b50 <__swbuf_r+0x84>
 8009af0:	6923      	ldr	r3, [r4, #16]
 8009af2:	b36b      	cbz	r3, 8009b50 <__swbuf_r+0x84>
 8009af4:	6923      	ldr	r3, [r4, #16]
 8009af6:	6820      	ldr	r0, [r4, #0]
 8009af8:	1ac0      	subs	r0, r0, r3
 8009afa:	6963      	ldr	r3, [r4, #20]
 8009afc:	b2f6      	uxtb	r6, r6
 8009afe:	4283      	cmp	r3, r0
 8009b00:	4637      	mov	r7, r6
 8009b02:	dc04      	bgt.n	8009b0e <__swbuf_r+0x42>
 8009b04:	4621      	mov	r1, r4
 8009b06:	4628      	mov	r0, r5
 8009b08:	f7ff f8ac 	bl	8008c64 <_fflush_r>
 8009b0c:	bb30      	cbnz	r0, 8009b5c <__swbuf_r+0x90>
 8009b0e:	68a3      	ldr	r3, [r4, #8]
 8009b10:	3b01      	subs	r3, #1
 8009b12:	60a3      	str	r3, [r4, #8]
 8009b14:	6823      	ldr	r3, [r4, #0]
 8009b16:	1c5a      	adds	r2, r3, #1
 8009b18:	6022      	str	r2, [r4, #0]
 8009b1a:	701e      	strb	r6, [r3, #0]
 8009b1c:	6963      	ldr	r3, [r4, #20]
 8009b1e:	3001      	adds	r0, #1
 8009b20:	4283      	cmp	r3, r0
 8009b22:	d004      	beq.n	8009b2e <__swbuf_r+0x62>
 8009b24:	89a3      	ldrh	r3, [r4, #12]
 8009b26:	07db      	lsls	r3, r3, #31
 8009b28:	d506      	bpl.n	8009b38 <__swbuf_r+0x6c>
 8009b2a:	2e0a      	cmp	r6, #10
 8009b2c:	d104      	bne.n	8009b38 <__swbuf_r+0x6c>
 8009b2e:	4621      	mov	r1, r4
 8009b30:	4628      	mov	r0, r5
 8009b32:	f7ff f897 	bl	8008c64 <_fflush_r>
 8009b36:	b988      	cbnz	r0, 8009b5c <__swbuf_r+0x90>
 8009b38:	4638      	mov	r0, r7
 8009b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b3c:	4b0a      	ldr	r3, [pc, #40]	; (8009b68 <__swbuf_r+0x9c>)
 8009b3e:	429c      	cmp	r4, r3
 8009b40:	d101      	bne.n	8009b46 <__swbuf_r+0x7a>
 8009b42:	68ac      	ldr	r4, [r5, #8]
 8009b44:	e7cf      	b.n	8009ae6 <__swbuf_r+0x1a>
 8009b46:	4b09      	ldr	r3, [pc, #36]	; (8009b6c <__swbuf_r+0xa0>)
 8009b48:	429c      	cmp	r4, r3
 8009b4a:	bf08      	it	eq
 8009b4c:	68ec      	ldreq	r4, [r5, #12]
 8009b4e:	e7ca      	b.n	8009ae6 <__swbuf_r+0x1a>
 8009b50:	4621      	mov	r1, r4
 8009b52:	4628      	mov	r0, r5
 8009b54:	f000 f81a 	bl	8009b8c <__swsetup_r>
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d0cb      	beq.n	8009af4 <__swbuf_r+0x28>
 8009b5c:	f04f 37ff 	mov.w	r7, #4294967295
 8009b60:	e7ea      	b.n	8009b38 <__swbuf_r+0x6c>
 8009b62:	bf00      	nop
 8009b64:	08009ff8 	.word	0x08009ff8
 8009b68:	0800a018 	.word	0x0800a018
 8009b6c:	08009fd8 	.word	0x08009fd8

08009b70 <__ascii_wctomb>:
 8009b70:	b149      	cbz	r1, 8009b86 <__ascii_wctomb+0x16>
 8009b72:	2aff      	cmp	r2, #255	; 0xff
 8009b74:	bf85      	ittet	hi
 8009b76:	238a      	movhi	r3, #138	; 0x8a
 8009b78:	6003      	strhi	r3, [r0, #0]
 8009b7a:	700a      	strbls	r2, [r1, #0]
 8009b7c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009b80:	bf98      	it	ls
 8009b82:	2001      	movls	r0, #1
 8009b84:	4770      	bx	lr
 8009b86:	4608      	mov	r0, r1
 8009b88:	4770      	bx	lr
	...

08009b8c <__swsetup_r>:
 8009b8c:	4b32      	ldr	r3, [pc, #200]	; (8009c58 <__swsetup_r+0xcc>)
 8009b8e:	b570      	push	{r4, r5, r6, lr}
 8009b90:	681d      	ldr	r5, [r3, #0]
 8009b92:	4606      	mov	r6, r0
 8009b94:	460c      	mov	r4, r1
 8009b96:	b125      	cbz	r5, 8009ba2 <__swsetup_r+0x16>
 8009b98:	69ab      	ldr	r3, [r5, #24]
 8009b9a:	b913      	cbnz	r3, 8009ba2 <__swsetup_r+0x16>
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	f7fd fa6b 	bl	8007078 <__sinit>
 8009ba2:	4b2e      	ldr	r3, [pc, #184]	; (8009c5c <__swsetup_r+0xd0>)
 8009ba4:	429c      	cmp	r4, r3
 8009ba6:	d10f      	bne.n	8009bc8 <__swsetup_r+0x3c>
 8009ba8:	686c      	ldr	r4, [r5, #4]
 8009baa:	89a3      	ldrh	r3, [r4, #12]
 8009bac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bb0:	0719      	lsls	r1, r3, #28
 8009bb2:	d42c      	bmi.n	8009c0e <__swsetup_r+0x82>
 8009bb4:	06dd      	lsls	r5, r3, #27
 8009bb6:	d411      	bmi.n	8009bdc <__swsetup_r+0x50>
 8009bb8:	2309      	movs	r3, #9
 8009bba:	6033      	str	r3, [r6, #0]
 8009bbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009bc0:	81a3      	strh	r3, [r4, #12]
 8009bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8009bc6:	e03e      	b.n	8009c46 <__swsetup_r+0xba>
 8009bc8:	4b25      	ldr	r3, [pc, #148]	; (8009c60 <__swsetup_r+0xd4>)
 8009bca:	429c      	cmp	r4, r3
 8009bcc:	d101      	bne.n	8009bd2 <__swsetup_r+0x46>
 8009bce:	68ac      	ldr	r4, [r5, #8]
 8009bd0:	e7eb      	b.n	8009baa <__swsetup_r+0x1e>
 8009bd2:	4b24      	ldr	r3, [pc, #144]	; (8009c64 <__swsetup_r+0xd8>)
 8009bd4:	429c      	cmp	r4, r3
 8009bd6:	bf08      	it	eq
 8009bd8:	68ec      	ldreq	r4, [r5, #12]
 8009bda:	e7e6      	b.n	8009baa <__swsetup_r+0x1e>
 8009bdc:	0758      	lsls	r0, r3, #29
 8009bde:	d512      	bpl.n	8009c06 <__swsetup_r+0x7a>
 8009be0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009be2:	b141      	cbz	r1, 8009bf6 <__swsetup_r+0x6a>
 8009be4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009be8:	4299      	cmp	r1, r3
 8009bea:	d002      	beq.n	8009bf2 <__swsetup_r+0x66>
 8009bec:	4630      	mov	r0, r6
 8009bee:	f7fd fb27 	bl	8007240 <_free_r>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	6363      	str	r3, [r4, #52]	; 0x34
 8009bf6:	89a3      	ldrh	r3, [r4, #12]
 8009bf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009bfc:	81a3      	strh	r3, [r4, #12]
 8009bfe:	2300      	movs	r3, #0
 8009c00:	6063      	str	r3, [r4, #4]
 8009c02:	6923      	ldr	r3, [r4, #16]
 8009c04:	6023      	str	r3, [r4, #0]
 8009c06:	89a3      	ldrh	r3, [r4, #12]
 8009c08:	f043 0308 	orr.w	r3, r3, #8
 8009c0c:	81a3      	strh	r3, [r4, #12]
 8009c0e:	6923      	ldr	r3, [r4, #16]
 8009c10:	b94b      	cbnz	r3, 8009c26 <__swsetup_r+0x9a>
 8009c12:	89a3      	ldrh	r3, [r4, #12]
 8009c14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c1c:	d003      	beq.n	8009c26 <__swsetup_r+0x9a>
 8009c1e:	4621      	mov	r1, r4
 8009c20:	4630      	mov	r0, r6
 8009c22:	f000 f84d 	bl	8009cc0 <__smakebuf_r>
 8009c26:	89a0      	ldrh	r0, [r4, #12]
 8009c28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c2c:	f010 0301 	ands.w	r3, r0, #1
 8009c30:	d00a      	beq.n	8009c48 <__swsetup_r+0xbc>
 8009c32:	2300      	movs	r3, #0
 8009c34:	60a3      	str	r3, [r4, #8]
 8009c36:	6963      	ldr	r3, [r4, #20]
 8009c38:	425b      	negs	r3, r3
 8009c3a:	61a3      	str	r3, [r4, #24]
 8009c3c:	6923      	ldr	r3, [r4, #16]
 8009c3e:	b943      	cbnz	r3, 8009c52 <__swsetup_r+0xc6>
 8009c40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c44:	d1ba      	bne.n	8009bbc <__swsetup_r+0x30>
 8009c46:	bd70      	pop	{r4, r5, r6, pc}
 8009c48:	0781      	lsls	r1, r0, #30
 8009c4a:	bf58      	it	pl
 8009c4c:	6963      	ldrpl	r3, [r4, #20]
 8009c4e:	60a3      	str	r3, [r4, #8]
 8009c50:	e7f4      	b.n	8009c3c <__swsetup_r+0xb0>
 8009c52:	2000      	movs	r0, #0
 8009c54:	e7f7      	b.n	8009c46 <__swsetup_r+0xba>
 8009c56:	bf00      	nop
 8009c58:	20000010 	.word	0x20000010
 8009c5c:	08009ff8 	.word	0x08009ff8
 8009c60:	0800a018 	.word	0x0800a018
 8009c64:	08009fd8 	.word	0x08009fd8

08009c68 <abort>:
 8009c68:	b508      	push	{r3, lr}
 8009c6a:	2006      	movs	r0, #6
 8009c6c:	f000 f898 	bl	8009da0 <raise>
 8009c70:	2001      	movs	r0, #1
 8009c72:	f7f7 fd57 	bl	8001724 <_exit>

08009c76 <__swhatbuf_r>:
 8009c76:	b570      	push	{r4, r5, r6, lr}
 8009c78:	460e      	mov	r6, r1
 8009c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c7e:	2900      	cmp	r1, #0
 8009c80:	b096      	sub	sp, #88	; 0x58
 8009c82:	4614      	mov	r4, r2
 8009c84:	461d      	mov	r5, r3
 8009c86:	da07      	bge.n	8009c98 <__swhatbuf_r+0x22>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	602b      	str	r3, [r5, #0]
 8009c8c:	89b3      	ldrh	r3, [r6, #12]
 8009c8e:	061a      	lsls	r2, r3, #24
 8009c90:	d410      	bmi.n	8009cb4 <__swhatbuf_r+0x3e>
 8009c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c96:	e00e      	b.n	8009cb6 <__swhatbuf_r+0x40>
 8009c98:	466a      	mov	r2, sp
 8009c9a:	f000 f89d 	bl	8009dd8 <_fstat_r>
 8009c9e:	2800      	cmp	r0, #0
 8009ca0:	dbf2      	blt.n	8009c88 <__swhatbuf_r+0x12>
 8009ca2:	9a01      	ldr	r2, [sp, #4]
 8009ca4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ca8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cac:	425a      	negs	r2, r3
 8009cae:	415a      	adcs	r2, r3
 8009cb0:	602a      	str	r2, [r5, #0]
 8009cb2:	e7ee      	b.n	8009c92 <__swhatbuf_r+0x1c>
 8009cb4:	2340      	movs	r3, #64	; 0x40
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	6023      	str	r3, [r4, #0]
 8009cba:	b016      	add	sp, #88	; 0x58
 8009cbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08009cc0 <__smakebuf_r>:
 8009cc0:	898b      	ldrh	r3, [r1, #12]
 8009cc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009cc4:	079d      	lsls	r5, r3, #30
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	460c      	mov	r4, r1
 8009cca:	d507      	bpl.n	8009cdc <__smakebuf_r+0x1c>
 8009ccc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009cd0:	6023      	str	r3, [r4, #0]
 8009cd2:	6123      	str	r3, [r4, #16]
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	6163      	str	r3, [r4, #20]
 8009cd8:	b002      	add	sp, #8
 8009cda:	bd70      	pop	{r4, r5, r6, pc}
 8009cdc:	ab01      	add	r3, sp, #4
 8009cde:	466a      	mov	r2, sp
 8009ce0:	f7ff ffc9 	bl	8009c76 <__swhatbuf_r>
 8009ce4:	9900      	ldr	r1, [sp, #0]
 8009ce6:	4605      	mov	r5, r0
 8009ce8:	4630      	mov	r0, r6
 8009cea:	f7fd faf9 	bl	80072e0 <_malloc_r>
 8009cee:	b948      	cbnz	r0, 8009d04 <__smakebuf_r+0x44>
 8009cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cf4:	059a      	lsls	r2, r3, #22
 8009cf6:	d4ef      	bmi.n	8009cd8 <__smakebuf_r+0x18>
 8009cf8:	f023 0303 	bic.w	r3, r3, #3
 8009cfc:	f043 0302 	orr.w	r3, r3, #2
 8009d00:	81a3      	strh	r3, [r4, #12]
 8009d02:	e7e3      	b.n	8009ccc <__smakebuf_r+0xc>
 8009d04:	4b0d      	ldr	r3, [pc, #52]	; (8009d3c <__smakebuf_r+0x7c>)
 8009d06:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d08:	89a3      	ldrh	r3, [r4, #12]
 8009d0a:	6020      	str	r0, [r4, #0]
 8009d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d10:	81a3      	strh	r3, [r4, #12]
 8009d12:	9b00      	ldr	r3, [sp, #0]
 8009d14:	6163      	str	r3, [r4, #20]
 8009d16:	9b01      	ldr	r3, [sp, #4]
 8009d18:	6120      	str	r0, [r4, #16]
 8009d1a:	b15b      	cbz	r3, 8009d34 <__smakebuf_r+0x74>
 8009d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d20:	4630      	mov	r0, r6
 8009d22:	f000 f86b 	bl	8009dfc <_isatty_r>
 8009d26:	b128      	cbz	r0, 8009d34 <__smakebuf_r+0x74>
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	f023 0303 	bic.w	r3, r3, #3
 8009d2e:	f043 0301 	orr.w	r3, r3, #1
 8009d32:	81a3      	strh	r3, [r4, #12]
 8009d34:	89a0      	ldrh	r0, [r4, #12]
 8009d36:	4305      	orrs	r5, r0
 8009d38:	81a5      	strh	r5, [r4, #12]
 8009d3a:	e7cd      	b.n	8009cd8 <__smakebuf_r+0x18>
 8009d3c:	08007011 	.word	0x08007011

08009d40 <_malloc_usable_size_r>:
 8009d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d44:	1f18      	subs	r0, r3, #4
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	bfbc      	itt	lt
 8009d4a:	580b      	ldrlt	r3, [r1, r0]
 8009d4c:	18c0      	addlt	r0, r0, r3
 8009d4e:	4770      	bx	lr

08009d50 <_raise_r>:
 8009d50:	291f      	cmp	r1, #31
 8009d52:	b538      	push	{r3, r4, r5, lr}
 8009d54:	4604      	mov	r4, r0
 8009d56:	460d      	mov	r5, r1
 8009d58:	d904      	bls.n	8009d64 <_raise_r+0x14>
 8009d5a:	2316      	movs	r3, #22
 8009d5c:	6003      	str	r3, [r0, #0]
 8009d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d62:	bd38      	pop	{r3, r4, r5, pc}
 8009d64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009d66:	b112      	cbz	r2, 8009d6e <_raise_r+0x1e>
 8009d68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d6c:	b94b      	cbnz	r3, 8009d82 <_raise_r+0x32>
 8009d6e:	4620      	mov	r0, r4
 8009d70:	f000 f830 	bl	8009dd4 <_getpid_r>
 8009d74:	462a      	mov	r2, r5
 8009d76:	4601      	mov	r1, r0
 8009d78:	4620      	mov	r0, r4
 8009d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d7e:	f000 b817 	b.w	8009db0 <_kill_r>
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d00a      	beq.n	8009d9c <_raise_r+0x4c>
 8009d86:	1c59      	adds	r1, r3, #1
 8009d88:	d103      	bne.n	8009d92 <_raise_r+0x42>
 8009d8a:	2316      	movs	r3, #22
 8009d8c:	6003      	str	r3, [r0, #0]
 8009d8e:	2001      	movs	r0, #1
 8009d90:	e7e7      	b.n	8009d62 <_raise_r+0x12>
 8009d92:	2400      	movs	r4, #0
 8009d94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009d98:	4628      	mov	r0, r5
 8009d9a:	4798      	blx	r3
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	e7e0      	b.n	8009d62 <_raise_r+0x12>

08009da0 <raise>:
 8009da0:	4b02      	ldr	r3, [pc, #8]	; (8009dac <raise+0xc>)
 8009da2:	4601      	mov	r1, r0
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	f7ff bfd3 	b.w	8009d50 <_raise_r>
 8009daa:	bf00      	nop
 8009dac:	20000010 	.word	0x20000010

08009db0 <_kill_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	4d07      	ldr	r5, [pc, #28]	; (8009dd0 <_kill_r+0x20>)
 8009db4:	2300      	movs	r3, #0
 8009db6:	4604      	mov	r4, r0
 8009db8:	4608      	mov	r0, r1
 8009dba:	4611      	mov	r1, r2
 8009dbc:	602b      	str	r3, [r5, #0]
 8009dbe:	f7f7 fca1 	bl	8001704 <_kill>
 8009dc2:	1c43      	adds	r3, r0, #1
 8009dc4:	d102      	bne.n	8009dcc <_kill_r+0x1c>
 8009dc6:	682b      	ldr	r3, [r5, #0]
 8009dc8:	b103      	cbz	r3, 8009dcc <_kill_r+0x1c>
 8009dca:	6023      	str	r3, [r4, #0]
 8009dcc:	bd38      	pop	{r3, r4, r5, pc}
 8009dce:	bf00      	nop
 8009dd0:	20006b68 	.word	0x20006b68

08009dd4 <_getpid_r>:
 8009dd4:	f7f7 bc8e 	b.w	80016f4 <_getpid>

08009dd8 <_fstat_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	4d07      	ldr	r5, [pc, #28]	; (8009df8 <_fstat_r+0x20>)
 8009ddc:	2300      	movs	r3, #0
 8009dde:	4604      	mov	r4, r0
 8009de0:	4608      	mov	r0, r1
 8009de2:	4611      	mov	r1, r2
 8009de4:	602b      	str	r3, [r5, #0]
 8009de6:	f7f7 fcec 	bl	80017c2 <_fstat>
 8009dea:	1c43      	adds	r3, r0, #1
 8009dec:	d102      	bne.n	8009df4 <_fstat_r+0x1c>
 8009dee:	682b      	ldr	r3, [r5, #0]
 8009df0:	b103      	cbz	r3, 8009df4 <_fstat_r+0x1c>
 8009df2:	6023      	str	r3, [r4, #0]
 8009df4:	bd38      	pop	{r3, r4, r5, pc}
 8009df6:	bf00      	nop
 8009df8:	20006b68 	.word	0x20006b68

08009dfc <_isatty_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4d06      	ldr	r5, [pc, #24]	; (8009e18 <_isatty_r+0x1c>)
 8009e00:	2300      	movs	r3, #0
 8009e02:	4604      	mov	r4, r0
 8009e04:	4608      	mov	r0, r1
 8009e06:	602b      	str	r3, [r5, #0]
 8009e08:	f7f7 fceb 	bl	80017e2 <_isatty>
 8009e0c:	1c43      	adds	r3, r0, #1
 8009e0e:	d102      	bne.n	8009e16 <_isatty_r+0x1a>
 8009e10:	682b      	ldr	r3, [r5, #0]
 8009e12:	b103      	cbz	r3, 8009e16 <_isatty_r+0x1a>
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	bd38      	pop	{r3, r4, r5, pc}
 8009e18:	20006b68 	.word	0x20006b68

08009e1c <_init>:
 8009e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1e:	bf00      	nop
 8009e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e22:	bc08      	pop	{r3}
 8009e24:	469e      	mov	lr, r3
 8009e26:	4770      	bx	lr

08009e28 <_fini>:
 8009e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2a:	bf00      	nop
 8009e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e2e:	bc08      	pop	{r3}
 8009e30:	469e      	mov	lr, r3
 8009e32:	4770      	bx	lr
