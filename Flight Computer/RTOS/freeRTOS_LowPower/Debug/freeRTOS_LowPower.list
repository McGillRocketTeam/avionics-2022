
freeRTOS_LowPower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c58  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08007e28  08007e28  00017e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fe8  08007fe8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007fe8  08007fe8  00017fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ff0  08007ff0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ff0  08007ff0  00017ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ff4  08007ff4  00017ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007ff8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f7c  20000074  0800806c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ff0  0800806c  00024ff0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024bf1  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004587  00000000  00000000  00044c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a80  00000000  00000000  00049220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018e8  00000000  00000000  0004aca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000484e  00000000  00000000  0004c588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e299  00000000  00000000  00050dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2db5  00000000  00000000  0006f06f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00151e24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075bc  00000000  00000000  00151e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007e10 	.word	0x08007e10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007e10 	.word	0x08007e10

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	b08f      	sub	sp, #60	; 0x3c
 80005bc:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fdc9 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f83d 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f927 	bl	8000818 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ca:	f000 f8cd 	bl	8000768 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ce:	f000 f8f5 	bl	80007bc <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 80005d2:	f000 f8a3 	bl	800071c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  MRT_SetupRTOS(huart3,1);
 80005d6:	4e13      	ldr	r6, [pc, #76]	; (8000624 <main+0x6c>)
 80005d8:	2301      	movs	r3, #1
 80005da:	930d      	str	r3, [sp, #52]	; 0x34
 80005dc:	466d      	mov	r5, sp
 80005de:	f106 0410 	add.w	r4, r6, #16
 80005e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005ee:	6823      	ldr	r3, [r4, #0]
 80005f0:	602b      	str	r3, [r5, #0]
 80005f2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80005f6:	f000 fbfd 	bl	8000df4 <MRT_SetupRTOS>
  //MRT_CustomRTC(int values[]); //TODO or simply configure in .ioc

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005fa:	f004 f8a1 	bl	8004740 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(StartMainTask, NULL, &mainTask_attributes);
 80005fe:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <main+0x70>)
 8000600:	2100      	movs	r1, #0
 8000602:	480a      	ldr	r0, [pc, #40]	; (800062c <main+0x74>)
 8000604:	f004 f8e6 	bl	80047d4 <osThreadNew>
 8000608:	4603      	mov	r3, r0
 800060a:	4a09      	ldr	r2, [pc, #36]	; (8000630 <main+0x78>)
 800060c:	6013      	str	r3, [r2, #0]

  /* creation of blinkyTask */
  blinkyTaskHandle = osThreadNew(StartBlinkyTask, NULL, &blinkyTask_attributes);
 800060e:	4a09      	ldr	r2, [pc, #36]	; (8000634 <main+0x7c>)
 8000610:	2100      	movs	r1, #0
 8000612:	4809      	ldr	r0, [pc, #36]	; (8000638 <main+0x80>)
 8000614:	f004 f8de 	bl	80047d4 <osThreadNew>
 8000618:	4603      	mov	r3, r0
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <main+0x84>)
 800061c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800061e:	f004 f8b3 	bl	8004788 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000622:	e7fe      	b.n	8000622 <main+0x6a>
 8000624:	20004a74 	.word	0x20004a74
 8000628:	08007ef4 	.word	0x08007ef4
 800062c:	08000975 	.word	0x08000975
 8000630:	20004a70 	.word	0x20004a70
 8000634:	08007f18 	.word	0x08007f18
 8000638:	080009a5 	.word	0x080009a5
 800063c:	20004f08 	.word	0x20004f08

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b094      	sub	sp, #80	; 0x50
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 031c 	add.w	r3, r7, #28
 800064a:	2234      	movs	r2, #52	; 0x34
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f006 ff4e 	bl	80074f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 0308 	add.w	r3, r7, #8
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b2a      	ldr	r3, [pc, #168]	; (8000714 <SystemClock_Config+0xd4>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a29      	ldr	r2, [pc, #164]	; (8000714 <SystemClock_Config+0xd4>)
 800066e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
 8000674:	4b27      	ldr	r3, [pc, #156]	; (8000714 <SystemClock_Config+0xd4>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000680:	2300      	movs	r3, #0
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <SystemClock_Config+0xd8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a23      	ldr	r2, [pc, #140]	; (8000718 <SystemClock_Config+0xd8>)
 800068a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b21      	ldr	r3, [pc, #132]	; (8000718 <SystemClock_Config+0xd8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800069c:	2305      	movs	r3, #5
 800069e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006a6:	2301      	movs	r3, #1
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006b4:	2304      	movs	r3, #4
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b8:	23a8      	movs	r3, #168	; 0xa8
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c0:	2307      	movs	r3, #7
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 ffff 	bl	80026d0 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006d8:	f000 f98c 	bl	80009f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	2105      	movs	r1, #5
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 f9c0 	bl	8001a80 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000706:	f000 f975 	bl	80009f4 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_RTC_Init+0x44>)
 8000722:	4a10      	ldr	r2, [pc, #64]	; (8000764 <MX_RTC_Init+0x48>)
 8000724:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_RTC_Init+0x44>)
 8000728:	2200      	movs	r2, #0
 800072a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_RTC_Init+0x44>)
 800072e:	227f      	movs	r2, #127	; 0x7f
 8000730:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_RTC_Init+0x44>)
 8000734:	22ff      	movs	r2, #255	; 0xff
 8000736:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_RTC_Init+0x44>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_RTC_Init+0x44>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_RTC_Init+0x44>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_RTC_Init+0x44>)
 800074c:	f002 fa5e 	bl	8002c0c <HAL_RTC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000756:	f000 f94d 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20004ee8 	.word	0x20004ee8
 8000764:	40002800 	.word	0x40002800

08000768 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <MX_USART3_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000772:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 8000774:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000778:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART3_UART_Init+0x4c>)
 80007a0:	f003 f99a 	bl	8003ad8 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f923 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20004a74 	.word	0x20004a74
 80007b8:	40004800 	.word	0x40004800

080007bc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80007c0:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ca:	2206      	movs	r2, #6
 80007cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d0:	2202      	movs	r2, #2
 80007d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007dc:	2202      	movs	r2, #2
 80007de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000800:	f000 ffb7 	bl	8001772 <HAL_PCD_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800080a:	f000 f8f3 	bl	80009f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20004ae0 	.word	0x20004ae0

08000818 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
 8000832:	4b4c      	ldr	r3, [pc, #304]	; (8000964 <MX_GPIO_Init+0x14c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a4b      	ldr	r2, [pc, #300]	; (8000964 <MX_GPIO_Init+0x14c>)
 8000838:	f043 0304 	orr.w	r3, r3, #4
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b49      	ldr	r3, [pc, #292]	; (8000964 <MX_GPIO_Init+0x14c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	61bb      	str	r3, [r7, #24]
 8000848:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
 800084e:	4b45      	ldr	r3, [pc, #276]	; (8000964 <MX_GPIO_Init+0x14c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a44      	ldr	r2, [pc, #272]	; (8000964 <MX_GPIO_Init+0x14c>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b42      	ldr	r3, [pc, #264]	; (8000964 <MX_GPIO_Init+0x14c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	4b3e      	ldr	r3, [pc, #248]	; (8000964 <MX_GPIO_Init+0x14c>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a3d      	ldr	r2, [pc, #244]	; (8000964 <MX_GPIO_Init+0x14c>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b3b      	ldr	r3, [pc, #236]	; (8000964 <MX_GPIO_Init+0x14c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	4b37      	ldr	r3, [pc, #220]	; (8000964 <MX_GPIO_Init+0x14c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a36      	ldr	r2, [pc, #216]	; (8000964 <MX_GPIO_Init+0x14c>)
 800088c:	f043 0308 	orr.w	r3, r3, #8
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b34      	ldr	r3, [pc, #208]	; (8000964 <MX_GPIO_Init+0x14c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0308 	and.w	r3, r3, #8
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	4b30      	ldr	r3, [pc, #192]	; (8000964 <MX_GPIO_Init+0x14c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a2f      	ldr	r2, [pc, #188]	; (8000964 <MX_GPIO_Init+0x14c>)
 80008a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <MX_GPIO_Init+0x14c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	4b29      	ldr	r3, [pc, #164]	; (8000964 <MX_GPIO_Init+0x14c>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a28      	ldr	r2, [pc, #160]	; (8000964 <MX_GPIO_Init+0x14c>)
 80008c4:	f043 0301 	orr.w	r3, r3, #1
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b26      	ldr	r3, [pc, #152]	; (8000964 <MX_GPIO_Init+0x14c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f244 0181 	movw	r1, #16513	; 0x4081
 80008dc:	4822      	ldr	r0, [pc, #136]	; (8000968 <MX_GPIO_Init+0x150>)
 80008de:	f000 ff15 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2140      	movs	r1, #64	; 0x40
 80008e6:	4821      	ldr	r0, [pc, #132]	; (800096c <MX_GPIO_Init+0x154>)
 80008e8:	f000 ff10 	bl	800170c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	481b      	ldr	r0, [pc, #108]	; (8000970 <MX_GPIO_Init+0x158>)
 8000904:	f000 fd6e 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000908:	f244 0381 	movw	r3, #16513	; 0x4081
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	4811      	ldr	r0, [pc, #68]	; (8000968 <MX_GPIO_Init+0x150>)
 8000922:	f000 fd5f 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000926:	2340      	movs	r3, #64	; 0x40
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	480b      	ldr	r0, [pc, #44]	; (800096c <MX_GPIO_Init+0x154>)
 800093e:	f000 fd51 	bl	80013e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000942:	2380      	movs	r3, #128	; 0x80
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000946:	2300      	movs	r3, #0
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_GPIO_Init+0x154>)
 8000956:	f000 fd45 	bl	80013e4 <HAL_GPIO_Init>

}
 800095a:	bf00      	nop
 800095c:	3730      	adds	r7, #48	; 0x30
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800
 8000968:	40020400 	.word	0x40020400
 800096c:	40021800 	.word	0x40021800
 8000970:	40020800 	.word	0x40020800

08000974 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	while(flagA!=1) osDelay(10);
 800097c:	e002      	b.n	8000984 <StartMainTask+0x10>
 800097e:	200a      	movs	r0, #10
 8000980:	f003 fff2 	bl	8004968 <osDelay>
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <StartMainTask+0x2c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d1f8      	bne.n	800097e <StartMainTask+0xa>

	MRT_StandByMode(10);
 800098c:	200a      	movs	r0, #10
 800098e:	f000 fb09 	bl	8000fa4 <MRT_StandByMode>


	//In case it leaves the infinite loop
	osThreadTerminate(NULL);
 8000992:	2000      	movs	r0, #0
 8000994:	f003 ffbb 	bl	800490e <osThreadTerminate>

  /* USER CODE END 5 */
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000094 	.word	0x20000094

080009a4 <StartBlinkyTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkyTask */
void StartBlinkyTask(void *argument)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkyTask */

	//Add thread id to the list
	threadID[1]=osThreadGetId();
 80009ac:	f003 ffa4 	bl	80048f8 <osThreadGetId>
 80009b0:	4603      	mov	r3, r0
 80009b2:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <StartBlinkyTask+0x24>)
 80009b4:	6053      	str	r3, [r2, #4]


  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 80009b6:	2101      	movs	r1, #1
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <StartBlinkyTask+0x28>)
 80009ba:	f000 fec0 	bl	800173e <HAL_GPIO_TogglePin>
	osDelay(300);
 80009be:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009c2:	f003 ffd1 	bl	8004968 <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 80009c6:	e7f6      	b.n	80009b6 <StartBlinkyTask+0x12>
 80009c8:	20004ab8 	.word	0x20004ab8
 80009cc:	40020400 	.word	0x40020400

080009d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d101      	bne.n	80009e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009e2:	f000 fbd9 	bl	8001198 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40001000 	.word	0x40001000

080009f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f8:	b672      	cpsid	i
}
 80009fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009fc:	e7fe      	b.n	80009fc <Error_Handler+0x8>
	...

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_MspInit+0x54>)
 8000a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a0e:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <HAL_MspInit+0x54>)
 8000a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a14:	6453      	str	r3, [r2, #68]	; 0x44
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <HAL_MspInit+0x54>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <HAL_MspInit+0x54>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <HAL_MspInit+0x54>)
 8000a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a30:	6413      	str	r3, [r2, #64]	; 0x40
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <HAL_MspInit+0x54>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3a:	603b      	str	r3, [r7, #0]
 8000a3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	210f      	movs	r1, #15
 8000a42:	f06f 0001 	mvn.w	r0, #1
 8000a46:	f000 fca3 	bl	8001390 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800

08000a58 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b09a      	sub	sp, #104	; 0x68
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	225c      	movs	r2, #92	; 0x5c
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f006 fd41 	bl	80074f0 <memset>
  if(hrtc->Instance==RTC)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a0c      	ldr	r2, [pc, #48]	; (8000aa4 <HAL_RTC_MspInit+0x4c>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d111      	bne.n	8000a9c <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a78:	2320      	movs	r3, #32
 8000a7a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a80:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 f946 	bl	8001d18 <HAL_RCCEx_PeriphCLKConfig>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000a92:	f7ff ffaf 	bl	80009f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <HAL_RTC_MspInit+0x50>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a9c:	bf00      	nop
 8000a9e:	3768      	adds	r7, #104	; 0x68
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40002800 	.word	0x40002800
 8000aa8:	42470e3c 	.word	0x42470e3c

08000aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	; 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a19      	ldr	r2, [pc, #100]	; (8000b30 <HAL_UART_MspInit+0x84>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d12c      	bne.n	8000b28 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <HAL_UART_MspInit+0x88>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a17      	ldr	r2, [pc, #92]	; (8000b34 <HAL_UART_MspInit+0x88>)
 8000ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <HAL_UART_MspInit+0x88>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <HAL_UART_MspInit+0x88>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <HAL_UART_MspInit+0x88>)
 8000af4:	f043 0308 	orr.w	r3, r3, #8
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <HAL_UART_MspInit+0x88>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0308 	and.w	r3, r3, #8
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b18:	2307      	movs	r3, #7
 8000b1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4805      	ldr	r0, [pc, #20]	; (8000b38 <HAL_UART_MspInit+0x8c>)
 8000b24:	f000 fc5e 	bl	80013e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	; 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40004800 	.word	0x40004800
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020c00 	.word	0x40020c00

08000b3c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b0a0      	sub	sp, #128	; 0x80
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	225c      	movs	r2, #92	; 0x5c
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f006 fcc7 	bl	80074f0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b6a:	d14e      	bne.n	8000c0a <HAL_PCD_MspInit+0xce>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b70:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000b72:	2300      	movs	r3, #0
 8000b74:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 f8cc 	bl	8001d18 <HAL_RCCEx_PeriphCLKConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000b86:	f7ff ff35 	bl	80009f4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <HAL_PCD_MspInit+0xd8>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a20      	ldr	r2, [pc, #128]	; (8000c14 <HAL_PCD_MspInit+0xd8>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <HAL_PCD_MspInit+0xd8>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ba6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000baa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bac:	2302      	movs	r3, #2
 8000bae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bb8:	230a      	movs	r3, #10
 8000bba:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4815      	ldr	r0, [pc, #84]	; (8000c18 <HAL_PCD_MspInit+0xdc>)
 8000bc4:	f000 fc0e 	bl	80013e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480e      	ldr	r0, [pc, #56]	; (8000c18 <HAL_PCD_MspInit+0xdc>)
 8000bde:	f000 fc01 	bl	80013e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_PCD_MspInit+0xd8>)
 8000be4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be6:	4a0b      	ldr	r2, [pc, #44]	; (8000c14 <HAL_PCD_MspInit+0xd8>)
 8000be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bec:	6353      	str	r3, [r2, #52]	; 0x34
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HAL_PCD_MspInit+0xd8>)
 8000bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf6:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <HAL_PCD_MspInit+0xd8>)
 8000bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_PCD_MspInit+0xd8>)
 8000c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3780      	adds	r7, #128	; 0x80
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40020000 	.word	0x40020000

08000c1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08c      	sub	sp, #48	; 0x30
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	2036      	movs	r0, #54	; 0x36
 8000c32:	f000 fbad 	bl	8001390 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c36:	2036      	movs	r0, #54	; 0x36
 8000c38:	f000 fbc6 	bl	80013c8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <HAL_InitTick+0xa4>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	4a1e      	ldr	r2, [pc, #120]	; (8000cc0 <HAL_InitTick+0xa4>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <HAL_InitTick+0xa4>)
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c58:	f107 0210 	add.w	r2, r7, #16
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4611      	mov	r1, r2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 f826 	bl	8001cb4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c68:	f000 fffc 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c74:	4a13      	ldr	r2, [pc, #76]	; (8000cc4 <HAL_InitTick+0xa8>)
 8000c76:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7a:	0c9b      	lsrs	r3, r3, #18
 8000c7c:	3b01      	subs	r3, #1
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <HAL_InitTick+0xac>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <HAL_InitTick+0xb0>)
 8000c84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <HAL_InitTick+0xac>)
 8000c88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c8c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <HAL_InitTick+0xac>)
 8000c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c92:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_InitTick+0xac>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <HAL_InitTick+0xac>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ca0:	4809      	ldr	r0, [pc, #36]	; (8000cc8 <HAL_InitTick+0xac>)
 8000ca2:	f002 fc6b 	bl	800357c <HAL_TIM_Base_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d104      	bne.n	8000cb6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000cac:	4806      	ldr	r0, [pc, #24]	; (8000cc8 <HAL_InitTick+0xac>)
 8000cae:	f002 fcbf 	bl	8003630 <HAL_TIM_Base_Start_IT>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	e000      	b.n	8000cb8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3730      	adds	r7, #48	; 0x30
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	431bde83 	.word	0x431bde83
 8000cc8:	20004f0c 	.word	0x20004f0c
 8000ccc:	40001000 	.word	0x40001000

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <TIM6_DAC_IRQHandler+0x10>)
 8000d02:	f002 fd05 	bl	8003710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20004f0c 	.word	0x20004f0c

08000d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d18:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <_sbrk+0x5c>)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <_sbrk+0x60>)
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <_sbrk+0x64>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <_sbrk+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d207      	bcs.n	8000d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d40:	f006 fb9c 	bl	800747c <__errno>
 8000d44:	4603      	mov	r3, r0
 8000d46:	220c      	movs	r2, #12
 8000d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	e009      	b.n	8000d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <_sbrk+0x64>)
 8000d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20020000 	.word	0x20020000
 8000d70:	00000400 	.word	0x00000400
 8000d74:	20000090 	.word	0x20000090
 8000d78:	20004ff0 	.word	0x20004ff0

08000d7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <SystemInit+0x20>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <SystemInit+0x20>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000da6:	490e      	ldr	r1, [pc, #56]	; (8000de0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000da8:	4a0e      	ldr	r2, [pc, #56]	; (8000de4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dac:	e002      	b.n	8000db4 <LoopCopyDataInit>

08000dae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db2:	3304      	adds	r3, #4

08000db4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000db6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db8:	d3f9      	bcc.n	8000dae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dba:	4a0b      	ldr	r2, [pc, #44]	; (8000de8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dbc:	4c0b      	ldr	r4, [pc, #44]	; (8000dec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc0:	e001      	b.n	8000dc6 <LoopFillZerobss>

08000dc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc4:	3204      	adds	r2, #4

08000dc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc8:	d3fb      	bcc.n	8000dc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dca:	f7ff ffd7 	bl	8000d7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dce:	f006 fb5b 	bl	8007488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dd2:	f7ff fbf1 	bl	80005b8 <main>
  bx  lr    
 8000dd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000de4:	08007ff8 	.word	0x08007ff8
  ldr r2, =_sbss
 8000de8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dec:	20004ff0 	.word	0x20004ff0

08000df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC_IRQHandler>
	...

08000df4 <MRT_SetupRTOS>:
uint8_t flagB = 0;

struct MRT_RTOS rtos;
RTC_HandleTypeDef* hrtc;

void MRT_SetupRTOS(UART_HandleTypeDef uart, uint8_t defAlarm){
 8000df4:	b084      	sub	sp, #16
 8000df6:	b580      	push	{r7, lr}
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	f107 0c08 	add.w	ip, r7, #8
 8000dfe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	rtos.huart = uart;
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <MRT_SetupRTOS+0x44>)
 8000e04:	4618      	mov	r0, r3
 8000e06:	f107 0308 	add.w	r3, r7, #8
 8000e0a:	2244      	movs	r2, #68	; 0x44
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f006 fb61 	bl	80074d4 <memcpy>
	rtos.hrtc = hrtc;
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <MRT_SetupRTOS+0x48>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <MRT_SetupRTOS+0x44>)
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
	MRT_WUProcedure();
 8000e1a:	f000 f811 	bl	8000e40 <MRT_WUProcedure>
	if (defAlarm==1) MRT_DefaultRTC();
 8000e1e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d101      	bne.n	8000e2a <MRT_SetupRTOS+0x36>
 8000e26:	f000 f8fd 	bl	8001024 <MRT_DefaultRTC>
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e32:	b004      	add	sp, #16
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	20004f54 	.word	0x20004f54
 8000e3c:	20004ee8 	.word	0x20004ee8

08000e40 <MRT_WUProcedure>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
}


void MRT_WUProcedure(void){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <MRT_WUProcedure+0x58>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d11b      	bne.n	8000e8a <MRT_WUProcedure+0x4a>
	{
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8000e52:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <MRT_WUProcedure+0x58>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a10      	ldr	r2, [pc, #64]	; (8000e98 <MRT_WUProcedure+0x58>)
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MRT_WUProcedure+0x5c>)
 8000e60:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff f9d4 	bl	8000210 <strlen>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	480b      	ldr	r0, [pc, #44]	; (8000ea0 <MRT_WUProcedure+0x60>)
 8000e74:	f002 fe7d 	bl	8003b72 <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8000e78:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e7c:	f000 fdd4 	bl	8001a28 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <MRT_WUProcedure+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f002 fb21 	bl	80034cc <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 8000e8a:	f000 f80d 	bl	8000ea8 <MRT_ClearFlags>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40007000 	.word	0x40007000
 8000e9c:	08007e58 	.word	0x08007e58
 8000ea0:	20004f54 	.word	0x20004f54
 8000ea4:	20004ee8 	.word	0x20004ee8

08000ea8 <MRT_ClearFlags>:

void MRT_ClearFlags(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000eac:	4b37      	ldr	r3, [pc, #220]	; (8000f8c <MRT_ClearFlags+0xe4>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	22ca      	movs	r2, #202	; 0xca
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24
 8000eb6:	4b35      	ldr	r3, [pc, #212]	; (8000f8c <MRT_ClearFlags+0xe4>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2253      	movs	r2, #83	; 0x53
 8000ebe:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET){
 8000ec0:	e011      	b.n	8000ee6 <MRT_ClearFlags+0x3e>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec6:	2217      	movs	r2, #23
 8000ec8:	4931      	ldr	r1, [pc, #196]	; (8000f90 <MRT_ClearFlags+0xe8>)
 8000eca:	4832      	ldr	r0, [pc, #200]	; (8000f94 <MRT_ClearFlags+0xec>)
 8000ecc:	f002 fe51 	bl	8003b72 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8000ed0:	4b2e      	ldr	r3, [pc, #184]	; (8000f8c <MRT_ClearFlags+0xe4>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b2c      	ldr	r3, [pc, #176]	; (8000f8c <MRT_ClearFlags+0xe4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8000ee4:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET){
 8000ee6:	4b29      	ldr	r3, [pc, #164]	; (8000f8c <MRT_ClearFlags+0xe4>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1e5      	bne.n	8000ec2 <MRT_ClearFlags+0x1a>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000ef6:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <MRT_ClearFlags+0xe4>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	22ff      	movs	r2, #255	; 0xff
 8000efe:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8000f00:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <MRT_ClearFlags+0xf0>)
 8000f02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f06:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000f08:	4b20      	ldr	r3, [pc, #128]	; (8000f8c <MRT_ClearFlags+0xe4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	22ca      	movs	r2, #202	; 0xca
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
 8000f12:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MRT_ClearFlags+0xe4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2253      	movs	r2, #83	; 0x53
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET){
 8000f1c:	e011      	b.n	8000f42 <MRT_ClearFlags+0x9a>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	2217      	movs	r2, #23
 8000f24:	491d      	ldr	r1, [pc, #116]	; (8000f9c <MRT_ClearFlags+0xf4>)
 8000f26:	481b      	ldr	r0, [pc, #108]	; (8000f94 <MRT_ClearFlags+0xec>)
 8000f28:	f002 fe23 	bl	8003b72 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MRT_ClearFlags+0xe4>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MRT_ClearFlags+0xe4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f462 7220 	orn	r2, r2, #640	; 0x280
 8000f40:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET){
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MRT_ClearFlags+0xe4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1e5      	bne.n	8000f1e <MRT_ClearFlags+0x76>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MRT_ClearFlags+0xe4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	22ff      	movs	r2, #255	; 0xff
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MRT_ClearFlags+0xf0>)
 8000f5e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f62:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000f64:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <MRT_ClearFlags+0xf8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a0d      	ldr	r2, [pc, #52]	; (8000fa0 <MRT_ClearFlags+0xf8>)
 8000f6a:	f043 0304 	orr.w	r3, r3, #4
 8000f6e:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MRT_ClearFlags+0xe4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <MRT_ClearFlags+0xe4>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000f84:	60da      	str	r2, [r3, #12]
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20004ee8 	.word	0x20004ee8
 8000f90:	08007e78 	.word	0x08007e78
 8000f94:	20004f54 	.word	0x20004f54
 8000f98:	40013c00 	.word	0x40013c00
 8000f9c:	08007e90 	.word	0x08007e90
 8000fa0:	40007000 	.word	0x40007000

08000fa4 <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode( uint32_t seconds){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b0a4      	sub	sp, #144	; 0x90
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8000fac:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000fb0:	f000 fd28 	bl	8001a04 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_ClearFlags();
 8000fb4:	f7ff ff78 	bl	8000ea8 <MRT_ClearFlags>

	//Setup RTC wake up timer
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTCW\r\n", 17, HAL_MAX_DELAY);
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbc:	2211      	movs	r2, #17
 8000fbe:	4915      	ldr	r1, [pc, #84]	; (8001014 <MRT_StandByMode+0x70>)
 8000fc0:	4815      	ldr	r0, [pc, #84]	; (8001018 <MRT_StandByMode+0x74>)
 8000fc2:	f002 fdd6 	bl	8003b72 <HAL_UART_Transmit>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds\r\n",seconds);
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	4913      	ldr	r1, [pc, #76]	; (800101c <MRT_StandByMode+0x78>)
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f006 fb6a 	bl	80076a8 <siprintf>
	HAL_UART_Transmit(&(rtos.huart), msg,strlen(msg),HAL_MAX_DELAY);
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff f919 	bl	8000210 <strlen>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	b29a      	uxth	r2, r3
 8000fe2:	f107 0108 	add.w	r1, r7, #8
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	480b      	ldr	r0, [pc, #44]	; (8001018 <MRT_StandByMode+0x74>)
 8000fec:	f002 fdc1 	bl	8003b72 <HAL_UART_Transmit>

	if (HAL_RTCEx_SetWakeUpTimer_IT(hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <MRT_StandByMode+0x7c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f002 f9a7 	bl	800334c <HAL_RTCEx_SetWakeUpTimer_IT>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MRT_StandByMode+0x64>
	{
	  Error_Handler();
 8001004:	f7ff fcf6 	bl	80009f4 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8001008:	f000 fd22 	bl	8001a50 <HAL_PWR_EnterSTANDBYMode>
}
 800100c:	bf00      	nop
 800100e:	3790      	adds	r7, #144	; 0x90
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	08007ea8 	.word	0x08007ea8
 8001018:	20004f54 	.word	0x20004f54
 800101c:	08007ebc 	.word	0x08007ebc
 8001020:	20004ee8 	.word	0x20004ee8

08001024 <MRT_DefaultRTC>:


void MRT_DefaultRTC(void){
 8001024:	b580      	push	{r7, lr}
 8001026:	b090      	sub	sp, #64	; 0x40
 8001028:	af00      	add	r7, sp, #0

	/*Can be setup using the ioc files*/

	  RTC_TimeTypeDef sTime = {0};
 800102a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 800103a:	2300      	movs	r3, #0
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
	  RTC_AlarmTypeDef sAlarm = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2228      	movs	r2, #40	; 0x28
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f006 fa53 	bl	80074f0 <memset>



	  /** Initialize RTC Only
	  */
	  hrtc->Instance = RTC;
 800104a:	4b40      	ldr	r3, [pc, #256]	; (800114c <MRT_DefaultRTC+0x128>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a40      	ldr	r2, [pc, #256]	; (8001150 <MRT_DefaultRTC+0x12c>)
 8001050:	601a      	str	r2, [r3, #0]
	  hrtc->Init.HourFormat = RTC_HOURFORMAT_24;
 8001052:	4b3e      	ldr	r3, [pc, #248]	; (800114c <MRT_DefaultRTC+0x128>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2200      	movs	r2, #0
 8001058:	605a      	str	r2, [r3, #4]
	  hrtc->Init.AsynchPrediv = 127;
 800105a:	4b3c      	ldr	r3, [pc, #240]	; (800114c <MRT_DefaultRTC+0x128>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	227f      	movs	r2, #127	; 0x7f
 8001060:	609a      	str	r2, [r3, #8]
	  hrtc->Init.SynchPrediv = 255;
 8001062:	4b3a      	ldr	r3, [pc, #232]	; (800114c <MRT_DefaultRTC+0x128>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	22ff      	movs	r2, #255	; 0xff
 8001068:	60da      	str	r2, [r3, #12]
	  hrtc->Init.OutPut = RTC_OUTPUT_DISABLE;
 800106a:	4b38      	ldr	r3, [pc, #224]	; (800114c <MRT_DefaultRTC+0x128>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2200      	movs	r2, #0
 8001070:	611a      	str	r2, [r3, #16]
	  hrtc->Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001072:	4b36      	ldr	r3, [pc, #216]	; (800114c <MRT_DefaultRTC+0x128>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
	  hrtc->Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800107a:	4b34      	ldr	r3, [pc, #208]	; (800114c <MRT_DefaultRTC+0x128>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
	  if (HAL_RTC_Init(hrtc) != HAL_OK)
 8001082:	4b32      	ldr	r3, [pc, #200]	; (800114c <MRT_DefaultRTC+0x128>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f001 fdc0 	bl	8002c0c <HAL_RTC_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MRT_DefaultRTC+0x72>
	  {
	    Error_Handler();
 8001092:	f7ff fcaf 	bl	80009f4 <Error_Handler>
	  }


	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x0;
 8001096:	2300      	movs	r3, #0
 8001098:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	  sTime.Minutes = 0x0;
 800109c:	2300      	movs	r3, #0
 800109e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	  sTime.Seconds = 0x15;
 80010a2:	2315      	movs	r3, #21
 80010a4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	63bb      	str	r3, [r7, #56]	; 0x38
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if (HAL_RTC_SetTime(hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010b0:	4b26      	ldr	r3, [pc, #152]	; (800114c <MRT_DefaultRTC+0x128>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80010b8:	2201      	movs	r2, #1
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 fe37 	bl	8002d2e <HAL_RTC_SetTime>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MRT_DefaultRTC+0xa6>
	  {
	    Error_Handler();
 80010c6:	f7ff fc95 	bl	80009f4 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010ca:	2301      	movs	r3, #1
 80010cc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	  sDate.Month = RTC_MONTH_JANUARY;
 80010d0:	2301      	movs	r3, #1
 80010d2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	  sDate.Date = 0x1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  sDate.Year = 0x0;
 80010dc:	2300      	movs	r3, #0
 80010de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	  if (HAL_RTC_SetDate(hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MRT_DefaultRTC+0x128>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80010ea:	2201      	movs	r2, #1
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fedb 	bl	8002ea8 <HAL_RTC_SetDate>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MRT_DefaultRTC+0xd8>
	  {
	    Error_Handler();
 80010f8:	f7ff fc7c 	bl	80009f4 <Error_Handler>
	  }


	  /** Enable the Alarm A*/
	  sAlarm.AlarmTime.Hours = 0x0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	703b      	strb	r3, [r7, #0]
	  sAlarm.AlarmTime.Minutes = 0x0;
 8001100:	2300      	movs	r3, #0
 8001102:	707b      	strb	r3, [r7, #1]
	  sAlarm.AlarmTime.Seconds = 0x20;
 8001104:	2320      	movs	r3, #32
 8001106:	70bb      	strb	r3, [r7, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	613b      	str	r3, [r7, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001118:	2300      	movs	r3, #0
 800111a:	61bb      	str	r3, [r7, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800111c:	2300      	movs	r3, #0
 800111e:	61fb      	str	r3, [r7, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8001120:	2301      	movs	r3, #1
 8001122:	f887 3020 	strb.w	r3, [r7, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8001126:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800112c:	4b07      	ldr	r3, [pc, #28]	; (800114c <MRT_DefaultRTC+0x128>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4639      	mov	r1, r7
 8001132:	2201      	movs	r2, #1
 8001134:	4618      	mov	r0, r3
 8001136:	f001 ff5f 	bl	8002ff8 <HAL_RTC_SetAlarm_IT>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MRT_DefaultRTC+0x120>
	  {
	    Error_Handler();
 8001140:	f7ff fc58 	bl	80009f4 <Error_Handler>
	  }
}
 8001144:	bf00      	nop
 8001146:	3740      	adds	r7, #64	; 0x40
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20004ee8 	.word	0x20004ee8
 8001150:	40002800 	.word	0x40002800

08001154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <HAL_Init+0x40>)
 800115e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001162:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_Init+0x40>)
 800116a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800116e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	; (8001194 <HAL_Init+0x40>)
 8001176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 f8fc 	bl	800137a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001182:	200f      	movs	r0, #15
 8001184:	f7ff fd4a 	bl	8000c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff fc3a 	bl	8000a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40023c00 	.word	0x40023c00

08001198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_IncTick+0x20>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b06      	ldr	r3, [pc, #24]	; (80011bc <HAL_IncTick+0x24>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a04      	ldr	r2, [pc, #16]	; (80011bc <HAL_IncTick+0x24>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000008 	.word	0x20000008
 80011bc:	20004f9c 	.word	0x20004f9c

080011c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <HAL_GetTick+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20004f9c 	.word	0x20004f9c

080011d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff ffee 	bl	80011c0 <HAL_GetTick>
 80011e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f0:	d005      	beq.n	80011fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <HAL_Delay+0x44>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011fe:	bf00      	nop
 8001200:	f7ff ffde 	bl	80011c0 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	429a      	cmp	r2, r3
 800120e:	d8f7      	bhi.n	8001200 <HAL_Delay+0x28>
  {
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000008 	.word	0x20000008

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001248:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800124c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001250:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001252:	4a04      	ldr	r2, [pc, #16]	; (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	60d3      	str	r3, [r2, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	; (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	2b00      	cmp	r3, #0
 8001294:	db0b      	blt.n	80012ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f003 021f 	and.w	r2, r3, #31
 800129c:	4907      	ldr	r1, [pc, #28]	; (80012bc <__NVIC_EnableIRQ+0x38>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	2001      	movs	r0, #1
 80012a6:	fa00 f202 	lsl.w	r2, r0, r2
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000e100 	.word	0xe000e100

080012c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db0a      	blt.n	80012ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	; (800130c <__NVIC_SetPriority+0x4c>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e8:	e00a      	b.n	8001300 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4908      	ldr	r1, [pc, #32]	; (8001310 <__NVIC_SetPriority+0x50>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	3b04      	subs	r3, #4
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	761a      	strb	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	; 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
         );
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	; 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ff4c 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a2:	f7ff ff61 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	68b9      	ldr	r1, [r7, #8]
 80013ac:	6978      	ldr	r0, [r7, #20]
 80013ae:	f7ff ffb1 	bl	8001314 <NVIC_EncodePriority>
 80013b2:	4602      	mov	r2, r0
 80013b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b8:	4611      	mov	r1, r2
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff80 	bl	80012c0 <__NVIC_SetPriority>
}
 80013c0:	bf00      	nop
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ff54 	bl	8001284 <__NVIC_EnableIRQ>
}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b089      	sub	sp, #36	; 0x24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	e165      	b.n	80016cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001400:	2201      	movs	r2, #1
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	429a      	cmp	r2, r3
 800141a:	f040 8154 	bne.w	80016c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	2b01      	cmp	r3, #1
 8001428:	d005      	beq.n	8001436 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001432:	2b02      	cmp	r3, #2
 8001434:	d130      	bne.n	8001498 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	2203      	movs	r2, #3
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800146c:	2201      	movs	r2, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	091b      	lsrs	r3, r3, #4
 8001482:	f003 0201 	and.w	r2, r3, #1
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d017      	beq.n	80014d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d123      	bne.n	8001528 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	08da      	lsrs	r2, r3, #3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3208      	adds	r2, #8
 80014e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	220f      	movs	r2, #15
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	691a      	ldr	r2, [r3, #16]
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	08da      	lsrs	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3208      	adds	r2, #8
 8001522:	69b9      	ldr	r1, [r7, #24]
 8001524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	2203      	movs	r2, #3
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0203 	and.w	r2, r3, #3
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4313      	orrs	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 80ae 	beq.w	80016c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b5d      	ldr	r3, [pc, #372]	; (80016e4 <HAL_GPIO_Init+0x300>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a5c      	ldr	r2, [pc, #368]	; (80016e4 <HAL_GPIO_Init+0x300>)
 8001574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b5a      	ldr	r3, [pc, #360]	; (80016e4 <HAL_GPIO_Init+0x300>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001586:	4a58      	ldr	r2, [pc, #352]	; (80016e8 <HAL_GPIO_Init+0x304>)
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	3302      	adds	r3, #2
 800158e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	220f      	movs	r2, #15
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4f      	ldr	r2, [pc, #316]	; (80016ec <HAL_GPIO_Init+0x308>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d025      	beq.n	80015fe <HAL_GPIO_Init+0x21a>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4e      	ldr	r2, [pc, #312]	; (80016f0 <HAL_GPIO_Init+0x30c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d01f      	beq.n	80015fa <HAL_GPIO_Init+0x216>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a4d      	ldr	r2, [pc, #308]	; (80016f4 <HAL_GPIO_Init+0x310>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d019      	beq.n	80015f6 <HAL_GPIO_Init+0x212>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4a4c      	ldr	r2, [pc, #304]	; (80016f8 <HAL_GPIO_Init+0x314>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d013      	beq.n	80015f2 <HAL_GPIO_Init+0x20e>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a4b      	ldr	r2, [pc, #300]	; (80016fc <HAL_GPIO_Init+0x318>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d00d      	beq.n	80015ee <HAL_GPIO_Init+0x20a>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a4a      	ldr	r2, [pc, #296]	; (8001700 <HAL_GPIO_Init+0x31c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d007      	beq.n	80015ea <HAL_GPIO_Init+0x206>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a49      	ldr	r2, [pc, #292]	; (8001704 <HAL_GPIO_Init+0x320>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d101      	bne.n	80015e6 <HAL_GPIO_Init+0x202>
 80015e2:	2306      	movs	r3, #6
 80015e4:	e00c      	b.n	8001600 <HAL_GPIO_Init+0x21c>
 80015e6:	2307      	movs	r3, #7
 80015e8:	e00a      	b.n	8001600 <HAL_GPIO_Init+0x21c>
 80015ea:	2305      	movs	r3, #5
 80015ec:	e008      	b.n	8001600 <HAL_GPIO_Init+0x21c>
 80015ee:	2304      	movs	r3, #4
 80015f0:	e006      	b.n	8001600 <HAL_GPIO_Init+0x21c>
 80015f2:	2303      	movs	r3, #3
 80015f4:	e004      	b.n	8001600 <HAL_GPIO_Init+0x21c>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e002      	b.n	8001600 <HAL_GPIO_Init+0x21c>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_GPIO_Init+0x21c>
 80015fe:	2300      	movs	r3, #0
 8001600:	69fa      	ldr	r2, [r7, #28]
 8001602:	f002 0203 	and.w	r2, r2, #3
 8001606:	0092      	lsls	r2, r2, #2
 8001608:	4093      	lsls	r3, r2
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001610:	4935      	ldr	r1, [pc, #212]	; (80016e8 <HAL_GPIO_Init+0x304>)
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	3302      	adds	r3, #2
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800161e:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <HAL_GPIO_Init+0x324>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001642:	4a31      	ldr	r2, [pc, #196]	; (8001708 <HAL_GPIO_Init+0x324>)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <HAL_GPIO_Init+0x324>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800166c:	4a26      	ldr	r2, [pc, #152]	; (8001708 <HAL_GPIO_Init+0x324>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001672:	4b25      	ldr	r3, [pc, #148]	; (8001708 <HAL_GPIO_Init+0x324>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001696:	4a1c      	ldr	r2, [pc, #112]	; (8001708 <HAL_GPIO_Init+0x324>)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800169c:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <HAL_GPIO_Init+0x324>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016c0:	4a11      	ldr	r2, [pc, #68]	; (8001708 <HAL_GPIO_Init+0x324>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3301      	adds	r3, #1
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	2b0f      	cmp	r3, #15
 80016d0:	f67f ae96 	bls.w	8001400 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40013800 	.word	0x40013800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40020800 	.word	0x40020800
 80016f8:	40020c00 	.word	0x40020c00
 80016fc:	40021000 	.word	0x40021000
 8001700:	40021400 	.word	0x40021400
 8001704:	40021800 	.word	0x40021800
 8001708:	40013c00 	.word	0x40013c00

0800170c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	807b      	strh	r3, [r7, #2]
 8001718:	4613      	mov	r3, r2
 800171a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800171c:	787b      	ldrb	r3, [r7, #1]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d003      	beq.n	800172a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001722:	887a      	ldrh	r2, [r7, #2]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001728:	e003      	b.n	8001732 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800172a:	887b      	ldrh	r3, [r7, #2]
 800172c:	041a      	lsls	r2, r3, #16
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	619a      	str	r2, [r3, #24]
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800173e:	b480      	push	{r7}
 8001740:	b085      	sub	sp, #20
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
 8001746:	460b      	mov	r3, r1
 8001748:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001750:	887a      	ldrh	r2, [r7, #2]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	4013      	ands	r3, r2
 8001756:	041a      	lsls	r2, r3, #16
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	43d9      	mvns	r1, r3
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	400b      	ands	r3, r1
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	619a      	str	r2, [r3, #24]
}
 8001766:	bf00      	nop
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001772:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001774:	b08f      	sub	sp, #60	; 0x3c
 8001776:	af0a      	add	r7, sp, #40	; 0x28
 8001778:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e116      	b.n	80019b2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d106      	bne.n	80017a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff f9cc 	bl	8000b3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2203      	movs	r2, #3
 80017a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f002 fcff 	bl	80041c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	603b      	str	r3, [r7, #0]
 80017ce:	687e      	ldr	r6, [r7, #4]
 80017d0:	466d      	mov	r5, sp
 80017d2:	f106 0410 	add.w	r4, r6, #16
 80017d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80017e6:	1d33      	adds	r3, r6, #4
 80017e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017ea:	6838      	ldr	r0, [r7, #0]
 80017ec:	f002 fc8a 	bl	8004104 <USB_CoreInit>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d005      	beq.n	8001802 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2202      	movs	r2, #2
 80017fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e0d7      	b.n	80019b2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f002 fced 	bl	80041e8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800180e:	2300      	movs	r3, #0
 8001810:	73fb      	strb	r3, [r7, #15]
 8001812:	e04a      	b.n	80018aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	333d      	adds	r3, #61	; 0x3d
 8001824:	2201      	movs	r2, #1
 8001826:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001828:	7bfa      	ldrb	r2, [r7, #15]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	333c      	adds	r3, #60	; 0x3c
 8001838:	7bfa      	ldrb	r2, [r7, #15]
 800183a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800183c:	7bfa      	ldrb	r2, [r7, #15]
 800183e:	7bfb      	ldrb	r3, [r7, #15]
 8001840:	b298      	uxth	r0, r3
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	1a9b      	subs	r3, r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	3342      	adds	r3, #66	; 0x42
 8001850:	4602      	mov	r2, r0
 8001852:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001854:	7bfa      	ldrb	r2, [r7, #15]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	1a9b      	subs	r3, r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	333f      	adds	r3, #63	; 0x3f
 8001864:	2200      	movs	r2, #0
 8001866:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001868:	7bfa      	ldrb	r2, [r7, #15]
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	4613      	mov	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	1a9b      	subs	r3, r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	3344      	adds	r3, #68	; 0x44
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800187c:	7bfa      	ldrb	r2, [r7, #15]
 800187e:	6879      	ldr	r1, [r7, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	1a9b      	subs	r3, r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	440b      	add	r3, r1
 800188a:	3348      	adds	r3, #72	; 0x48
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001890:	7bfa      	ldrb	r2, [r7, #15]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	3350      	adds	r3, #80	; 0x50
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	3301      	adds	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
 80018aa:	7bfa      	ldrb	r2, [r7, #15]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d3af      	bcc.n	8001814 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	e044      	b.n	8001944 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018ba:	7bfa      	ldrb	r2, [r7, #15]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	4613      	mov	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018d0:	7bfa      	ldrb	r2, [r7, #15]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80018e2:	7bfa      	ldrb	r2, [r7, #15]
 80018e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018e6:	7bfa      	ldrb	r2, [r7, #15]
 80018e8:	6879      	ldr	r1, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	1a9b      	subs	r3, r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018fc:	7bfa      	ldrb	r2, [r7, #15]
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	4613      	mov	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001912:	7bfa      	ldrb	r2, [r7, #15]
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	1a9b      	subs	r3, r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001928:	7bfa      	ldrb	r2, [r7, #15]
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	1a9b      	subs	r3, r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	3301      	adds	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	7bfa      	ldrb	r2, [r7, #15]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	429a      	cmp	r2, r3
 800194c:	d3b5      	bcc.n	80018ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	687e      	ldr	r6, [r7, #4]
 8001956:	466d      	mov	r5, sp
 8001958:	f106 0410 	add.w	r4, r6, #16
 800195c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800195e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001960:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001962:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001964:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001968:	e885 0003 	stmia.w	r5, {r0, r1}
 800196c:	1d33      	adds	r3, r6, #4
 800196e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001970:	6838      	ldr	r0, [r7, #0]
 8001972:	f002 fc85 	bl	8004280 <USB_DevInit>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2202      	movs	r2, #2
 8001980:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e014      	b.n	80019b2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	2b01      	cmp	r3, #1
 800199e:	d102      	bne.n	80019a6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f80a 	bl	80019ba <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 fe23 	bl	80045f6 <USB_DevDisconnect>

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019ba <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	f043 0303 	orr.w	r3, r3, #3
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3714      	adds	r7, #20
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_PWR_EnableWakeUpPin+0x20>)
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4904      	ldr	r1, [pc, #16]	; (8001a24 <HAL_PWR_EnableWakeUpPin+0x20>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40007000 	.word	0x40007000

08001a28 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_PWR_DisableWakeUpPin+0x24>)
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	4904      	ldr	r1, [pc, #16]	; (8001a4c <HAL_PWR_DisableWakeUpPin+0x24>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40007000 	.word	0x40007000

08001a50 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001a5a:	f043 0302 	orr.w	r3, r3, #2
 8001a5e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001a66:	f043 0304 	orr.w	r3, r3, #4
 8001a6a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001a6c:	bf30      	wfi
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	40007000 	.word	0x40007000
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e0cc      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a94:	4b68      	ldr	r3, [pc, #416]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 030f 	and.w	r3, r3, #15
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d90c      	bls.n	8001abc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	4b65      	ldr	r3, [pc, #404]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b63      	ldr	r3, [pc, #396]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0b8      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d020      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad4:	4b59      	ldr	r3, [pc, #356]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4a58      	ldr	r2, [pc, #352]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ade:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aec:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4a52      	ldr	r2, [pc, #328]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001af2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001af6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af8:	4b50      	ldr	r3, [pc, #320]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	494d      	ldr	r1, [pc, #308]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d044      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d119      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e07f      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d003      	beq.n	8001b3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3e:	4b3f      	ldr	r3, [pc, #252]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d109      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e06f      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e067      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b5e:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f023 0203 	bic.w	r2, r3, #3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4934      	ldr	r1, [pc, #208]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b70:	f7ff fb26 	bl	80011c0 <HAL_GetTick>
 8001b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b76:	e00a      	b.n	8001b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b78:	f7ff fb22 	bl	80011c0 <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e04f      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 020c 	and.w	r2, r3, #12
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d1eb      	bne.n	8001b78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba0:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d20c      	bcs.n	8001bc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bae:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	b2d2      	uxtb	r2, r2
 8001bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e032      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	4916      	ldr	r1, [pc, #88]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d009      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	490e      	ldr	r1, [pc, #56]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c06:	f000 fbb1 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	490a      	ldr	r1, [pc, #40]	; (8001c40 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	5ccb      	ldrb	r3, [r1, r3]
 8001c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1e:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <HAL_RCC_ClockConfig+0x1c4>)
 8001c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_RCC_ClockConfig+0x1c8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fff8 	bl	8000c1c <HAL_InitTick>

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023c00 	.word	0x40023c00
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	08007f3c 	.word	0x08007f3c
 8001c44:	20000000 	.word	0x20000000
 8001c48:	20000004 	.word	0x20000004

08001c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c50:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000000 	.word	0x20000000

08001c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c68:	f7ff fff0 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	0a9b      	lsrs	r3, r3, #10
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	4903      	ldr	r1, [pc, #12]	; (8001c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40023800 	.word	0x40023800
 8001c88:	08007f4c 	.word	0x08007f4c

08001c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c90:	f7ff ffdc 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	0b5b      	lsrs	r3, r3, #13
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	4903      	ldr	r1, [pc, #12]	; (8001cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ca2:	5ccb      	ldrb	r3, [r1, r3]
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	08007f4c 	.word	0x08007f4c

08001cb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_RCC_GetClockConfig+0x5c>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 0203 	and.w	r2, r3, #3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <HAL_RCC_GetClockConfig+0x5c>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <HAL_RCC_GetClockConfig+0x5c>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_RCC_GetClockConfig+0x5c>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	08db      	lsrs	r3, r3, #3
 8001cee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cf6:	4b07      	ldr	r3, [pc, #28]	; (8001d14 <HAL_RCC_GetClockConfig+0x60>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 020f 	and.w	r2, r3, #15
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	601a      	str	r2, [r3, #0]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40023c00 	.word	0x40023c00

08001d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08c      	sub	sp, #48	; 0x30
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d010      	beq.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001d50:	4b6f      	ldr	r3, [pc, #444]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d56:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d5e:	496c      	ldr	r1, [pc, #432]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d010      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001d7e:	4b64      	ldr	r3, [pc, #400]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d84:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8c:	4960      	ldr	r1, [pc, #384]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d017      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dac:	4b58      	ldr	r3, [pc, #352]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001db2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4955      	ldr	r1, [pc, #340]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d017      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001de8:	4b49      	ldr	r3, [pc, #292]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df6:	4946      	ldr	r1, [pc, #280]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e06:	d101      	bne.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001e14:	2301      	movs	r3, #1
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 808a 	beq.w	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	4b39      	ldr	r3, [pc, #228]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	4a38      	ldr	r2, [pc, #224]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e34:	6413      	str	r3, [r2, #64]	; 0x40
 8001e36:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001e42:	4b34      	ldr	r3, [pc, #208]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a33      	ldr	r2, [pc, #204]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e4c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e4e:	f7ff f9b7 	bl	80011c0 <HAL_GetTick>
 8001e52:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e56:	f7ff f9b3 	bl	80011c0 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e278      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e68:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e74:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e7e:	6a3b      	ldr	r3, [r7, #32]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d02f      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e8c:	6a3a      	ldr	r2, [r7, #32]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d028      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e92:	4b1f      	ldr	r3, [pc, #124]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e9a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ea2:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001ea8:	4a19      	ldr	r2, [pc, #100]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001eae:	4b18      	ldr	r3, [pc, #96]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d114      	bne.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001eba:	f7ff f981 	bl	80011c0 <HAL_GetTick>
 8001ebe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ec2:	f7ff f97d 	bl	80011c0 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e240      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed8:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0ee      	beq.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001ef0:	d114      	bne.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f06:	4902      	ldr	r1, [pc, #8]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	608b      	str	r3, [r1, #8]
 8001f0c:	e00c      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40007000 	.word	0x40007000
 8001f18:	42470e40 	.word	0x42470e40
 8001f1c:	4b4a      	ldr	r3, [pc, #296]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4a49      	ldr	r2, [pc, #292]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f26:	6093      	str	r3, [r2, #8]
 8001f28:	4b47      	ldr	r3, [pc, #284]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f34:	4944      	ldr	r1, [pc, #272]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d004      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001f4c:	4b3f      	ldr	r3, [pc, #252]	; (800204c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001f4e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00a      	beq.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001f5c:	4b3a      	ldr	r3, [pc, #232]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	4937      	ldr	r1, [pc, #220]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00a      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f7e:	4b32      	ldr	r3, [pc, #200]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f84:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8c:	492e      	ldr	r1, [pc, #184]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d011      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fa0:	4b29      	ldr	r3, [pc, #164]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fae:	4926      	ldr	r1, [pc, #152]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00a      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	491a      	ldr	r1, [pc, #104]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d011      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002000:	4911      	ldr	r1, [pc, #68]	; (8002048 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800200c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002010:	d101      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002012:	2301      	movs	r3, #1
 8002014:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002018:	2b01      	cmp	r3, #1
 800201a:	d005      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002024:	f040 80ff 	bne.w	8002226 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800202e:	f7ff f8c7 	bl	80011c0 <HAL_GetTick>
 8002032:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002034:	e00e      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002036:	f7ff f8c3 	bl	80011c0 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d907      	bls.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e188      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002048:	40023800 	.word	0x40023800
 800204c:	424711e0 	.word	0x424711e0
 8002050:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002054:	4b7e      	ldr	r3, [pc, #504]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1ea      	bne.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002070:	2b00      	cmp	r3, #0
 8002072:	d009      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800207c:	2b00      	cmp	r3, #0
 800207e:	d028      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002084:	2b00      	cmp	r3, #0
 8002086:	d124      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002088:	4b71      	ldr	r3, [pc, #452]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800208a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800208e:	0c1b      	lsrs	r3, r3, #16
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	3301      	adds	r3, #1
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800209a:	4b6d      	ldr	r3, [pc, #436]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800209c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020a0:	0e1b      	lsrs	r3, r3, #24
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	019b      	lsls	r3, r3, #6
 80020b2:	431a      	orrs	r2, r3
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	085b      	lsrs	r3, r3, #1
 80020b8:	3b01      	subs	r3, #1
 80020ba:	041b      	lsls	r3, r3, #16
 80020bc:	431a      	orrs	r2, r3
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	061b      	lsls	r3, r3, #24
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	071b      	lsls	r3, r3, #28
 80020ca:	4961      	ldr	r1, [pc, #388]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0304 	and.w	r3, r3, #4
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d004      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020e6:	d00a      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d035      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020fc:	d130      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80020fe:	4b54      	ldr	r3, [pc, #336]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002104:	0c1b      	lsrs	r3, r3, #16
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	3301      	adds	r3, #1
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002110:	4b4f      	ldr	r3, [pc, #316]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002116:	0f1b      	lsrs	r3, r3, #28
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	019b      	lsls	r3, r3, #6
 8002128:	431a      	orrs	r2, r3
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	085b      	lsrs	r3, r3, #1
 800212e:	3b01      	subs	r3, #1
 8002130:	041b      	lsls	r3, r3, #16
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	061b      	lsls	r3, r3, #24
 800213a:	431a      	orrs	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	071b      	lsls	r3, r3, #28
 8002140:	4943      	ldr	r1, [pc, #268]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002148:	4b41      	ldr	r3, [pc, #260]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800214a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800214e:	f023 021f 	bic.w	r2, r3, #31
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002156:	3b01      	subs	r3, #1
 8002158:	493d      	ldr	r1, [pc, #244]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002168:	2b00      	cmp	r3, #0
 800216a:	d029      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002174:	d124      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002176:	4b36      	ldr	r3, [pc, #216]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800217c:	0c1b      	lsrs	r3, r3, #16
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	3301      	adds	r3, #1
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002188:	4b31      	ldr	r3, [pc, #196]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800218a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800218e:	0f1b      	lsrs	r3, r3, #28
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	019b      	lsls	r3, r3, #6
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	085b      	lsrs	r3, r3, #1
 80021a8:	3b01      	subs	r3, #1
 80021aa:	041b      	lsls	r3, r3, #16
 80021ac:	431a      	orrs	r2, r3
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	061b      	lsls	r3, r3, #24
 80021b2:	431a      	orrs	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	071b      	lsls	r3, r3, #28
 80021b8:	4925      	ldr	r1, [pc, #148]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d016      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	019b      	lsls	r3, r3, #6
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	3b01      	subs	r3, #1
 80021e0:	041b      	lsls	r3, r3, #16
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	061b      	lsls	r3, r3, #24
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	071b      	lsls	r3, r3, #28
 80021f2:	4917      	ldr	r1, [pc, #92]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80021fa:	4b16      	ldr	r3, [pc, #88]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002200:	f7fe ffde 	bl	80011c0 <HAL_GetTick>
 8002204:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002206:	e008      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002208:	f7fe ffda 	bl	80011c0 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e09f      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002228:	2b01      	cmp	r3, #1
 800222a:	f040 8095 	bne.w	8002358 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800222e:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002234:	f7fe ffc4 	bl	80011c0 <HAL_GetTick>
 8002238:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800223a:	e00f      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800223c:	f7fe ffc0 	bl	80011c0 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d908      	bls.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e085      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800
 8002254:	42470068 	.word	0x42470068
 8002258:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800225c:	4b41      	ldr	r3, [pc, #260]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002268:	d0e8      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	2b00      	cmp	r3, #0
 800227c:	d009      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002286:	2b00      	cmp	r3, #0
 8002288:	d02b      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228e:	2b00      	cmp	r3, #0
 8002290:	d127      	bne.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002292:	4b34      	ldr	r3, [pc, #208]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002298:	0c1b      	lsrs	r3, r3, #16
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	3301      	adds	r3, #1
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699a      	ldr	r2, [r3, #24]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	019b      	lsls	r3, r3, #6
 80022ae:	431a      	orrs	r2, r3
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	085b      	lsrs	r3, r3, #1
 80022b4:	3b01      	subs	r3, #1
 80022b6:	041b      	lsls	r3, r3, #16
 80022b8:	431a      	orrs	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	061b      	lsls	r3, r3, #24
 80022c0:	4928      	ldr	r1, [pc, #160]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80022c8:	4b26      	ldr	r3, [pc, #152]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ce:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d6:	3b01      	subs	r3, #1
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	4922      	ldr	r1, [pc, #136]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d01d      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x612>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022f6:	d118      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022f8:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fe:	0e1b      	lsrs	r3, r3, #24
 8002300:	f003 030f 	and.w	r3, r3, #15
 8002304:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699a      	ldr	r2, [r3, #24]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	019b      	lsls	r3, r3, #6
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	085b      	lsrs	r3, r3, #1
 8002318:	3b01      	subs	r3, #1
 800231a:	041b      	lsls	r3, r3, #16
 800231c:	431a      	orrs	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	061b      	lsls	r3, r3, #24
 8002322:	4910      	ldr	r1, [pc, #64]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800232a:	4b0f      	ldr	r3, [pc, #60]	; (8002368 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800232c:	2201      	movs	r2, #1
 800232e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002330:	f7fe ff46 	bl	80011c0 <HAL_GetTick>
 8002334:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002336:	e008      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002338:	f7fe ff42 	bl	80011c0 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e007      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800234a:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002352:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002356:	d1ef      	bne.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3730      	adds	r7, #48	; 0x30
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40023800 	.word	0x40023800
 8002368:	42470070 	.word	0x42470070

0800236c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800236c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002370:	b088      	sub	sp, #32
 8002372:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002388:	4bce      	ldr	r3, [pc, #824]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x358>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 030c 	and.w	r3, r3, #12
 8002390:	2b0c      	cmp	r3, #12
 8002392:	f200 818d 	bhi.w	80026b0 <HAL_RCC_GetSysClockFreq+0x344>
 8002396:	a201      	add	r2, pc, #4	; (adr r2, 800239c <HAL_RCC_GetSysClockFreq+0x30>)
 8002398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239c:	080023d1 	.word	0x080023d1
 80023a0:	080026b1 	.word	0x080026b1
 80023a4:	080026b1 	.word	0x080026b1
 80023a8:	080026b1 	.word	0x080026b1
 80023ac:	080023d7 	.word	0x080023d7
 80023b0:	080026b1 	.word	0x080026b1
 80023b4:	080026b1 	.word	0x080026b1
 80023b8:	080026b1 	.word	0x080026b1
 80023bc:	080023dd 	.word	0x080023dd
 80023c0:	080026b1 	.word	0x080026b1
 80023c4:	080026b1 	.word	0x080026b1
 80023c8:	080026b1 	.word	0x080026b1
 80023cc:	08002551 	.word	0x08002551
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023d0:	4bbd      	ldr	r3, [pc, #756]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80023d2:	61bb      	str	r3, [r7, #24]
       break;
 80023d4:	e16f      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023d6:	4bbd      	ldr	r3, [pc, #756]	; (80026cc <HAL_RCC_GetSysClockFreq+0x360>)
 80023d8:	61bb      	str	r3, [r7, #24]
      break;
 80023da:	e16c      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023dc:	4bb9      	ldr	r3, [pc, #740]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023e4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023e6:	4bb7      	ldr	r3, [pc, #732]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d053      	beq.n	800249a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f2:	4bb4      	ldr	r3, [pc, #720]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x358>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	099b      	lsrs	r3, r3, #6
 80023f8:	461a      	mov	r2, r3
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002402:	f04f 0100 	mov.w	r1, #0
 8002406:	ea02 0400 	and.w	r4, r2, r0
 800240a:	603c      	str	r4, [r7, #0]
 800240c:	400b      	ands	r3, r1
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002414:	4620      	mov	r0, r4
 8002416:	4629      	mov	r1, r5
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	014b      	lsls	r3, r1, #5
 8002422:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002426:	0142      	lsls	r2, r0, #5
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	4623      	mov	r3, r4
 800242e:	1ac0      	subs	r0, r0, r3
 8002430:	462b      	mov	r3, r5
 8002432:	eb61 0103 	sbc.w	r1, r1, r3
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	018b      	lsls	r3, r1, #6
 8002440:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002444:	0182      	lsls	r2, r0, #6
 8002446:	1a12      	subs	r2, r2, r0
 8002448:	eb63 0301 	sbc.w	r3, r3, r1
 800244c:	f04f 0000 	mov.w	r0, #0
 8002450:	f04f 0100 	mov.w	r1, #0
 8002454:	00d9      	lsls	r1, r3, #3
 8002456:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800245a:	00d0      	lsls	r0, r2, #3
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4621      	mov	r1, r4
 8002462:	1852      	adds	r2, r2, r1
 8002464:	4629      	mov	r1, r5
 8002466:	eb43 0101 	adc.w	r1, r3, r1
 800246a:	460b      	mov	r3, r1
 800246c:	f04f 0000 	mov.w	r0, #0
 8002470:	f04f 0100 	mov.w	r1, #0
 8002474:	0259      	lsls	r1, r3, #9
 8002476:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800247a:	0250      	lsls	r0, r2, #9
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	461a      	mov	r2, r3
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	f7fd ff18 	bl	80002c0 <__aeabi_uldivmod>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4613      	mov	r3, r2
 8002496:	61fb      	str	r3, [r7, #28]
 8002498:	e04c      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800249a:	4b8a      	ldr	r3, [pc, #552]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x358>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	099b      	lsrs	r3, r3, #6
 80024a0:	461a      	mov	r2, r3
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024aa:	f04f 0100 	mov.w	r1, #0
 80024ae:	ea02 0a00 	and.w	sl, r2, r0
 80024b2:	ea03 0b01 	and.w	fp, r3, r1
 80024b6:	4650      	mov	r0, sl
 80024b8:	4659      	mov	r1, fp
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	014b      	lsls	r3, r1, #5
 80024c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024c8:	0142      	lsls	r2, r0, #5
 80024ca:	4610      	mov	r0, r2
 80024cc:	4619      	mov	r1, r3
 80024ce:	ebb0 000a 	subs.w	r0, r0, sl
 80024d2:	eb61 010b 	sbc.w	r1, r1, fp
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	018b      	lsls	r3, r1, #6
 80024e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024e4:	0182      	lsls	r2, r0, #6
 80024e6:	1a12      	subs	r2, r2, r0
 80024e8:	eb63 0301 	sbc.w	r3, r3, r1
 80024ec:	f04f 0000 	mov.w	r0, #0
 80024f0:	f04f 0100 	mov.w	r1, #0
 80024f4:	00d9      	lsls	r1, r3, #3
 80024f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024fa:	00d0      	lsls	r0, r2, #3
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	eb12 020a 	adds.w	r2, r2, sl
 8002504:	eb43 030b 	adc.w	r3, r3, fp
 8002508:	f04f 0000 	mov.w	r0, #0
 800250c:	f04f 0100 	mov.w	r1, #0
 8002510:	0299      	lsls	r1, r3, #10
 8002512:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002516:	0290      	lsls	r0, r2, #10
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	461a      	mov	r2, r3
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	f7fd feca 	bl	80002c0 <__aeabi_uldivmod>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4613      	mov	r3, r2
 8002532:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002534:	4b63      	ldr	r3, [pc, #396]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	0c1b      	lsrs	r3, r3, #16
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	3301      	adds	r3, #1
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	fbb2 f3f3 	udiv	r3, r2, r3
 800254c:	61bb      	str	r3, [r7, #24]
      break;
 800254e:	e0b2      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002550:	4b5c      	ldr	r3, [pc, #368]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002558:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800255a:	4b5a      	ldr	r3, [pc, #360]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x358>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d04d      	beq.n	8002602 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002566:	4b57      	ldr	r3, [pc, #348]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	099b      	lsrs	r3, r3, #6
 800256c:	461a      	mov	r2, r3
 800256e:	f04f 0300 	mov.w	r3, #0
 8002572:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002576:	f04f 0100 	mov.w	r1, #0
 800257a:	ea02 0800 	and.w	r8, r2, r0
 800257e:	ea03 0901 	and.w	r9, r3, r1
 8002582:	4640      	mov	r0, r8
 8002584:	4649      	mov	r1, r9
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	014b      	lsls	r3, r1, #5
 8002590:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002594:	0142      	lsls	r2, r0, #5
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	ebb0 0008 	subs.w	r0, r0, r8
 800259e:	eb61 0109 	sbc.w	r1, r1, r9
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	018b      	lsls	r3, r1, #6
 80025ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025b0:	0182      	lsls	r2, r0, #6
 80025b2:	1a12      	subs	r2, r2, r0
 80025b4:	eb63 0301 	sbc.w	r3, r3, r1
 80025b8:	f04f 0000 	mov.w	r0, #0
 80025bc:	f04f 0100 	mov.w	r1, #0
 80025c0:	00d9      	lsls	r1, r3, #3
 80025c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025c6:	00d0      	lsls	r0, r2, #3
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	eb12 0208 	adds.w	r2, r2, r8
 80025d0:	eb43 0309 	adc.w	r3, r3, r9
 80025d4:	f04f 0000 	mov.w	r0, #0
 80025d8:	f04f 0100 	mov.w	r1, #0
 80025dc:	0259      	lsls	r1, r3, #9
 80025de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80025e2:	0250      	lsls	r0, r2, #9
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	461a      	mov	r2, r3
 80025f0:	f04f 0300 	mov.w	r3, #0
 80025f4:	f7fd fe64 	bl	80002c0 <__aeabi_uldivmod>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4613      	mov	r3, r2
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	e04a      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002602:	4b30      	ldr	r3, [pc, #192]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x358>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	099b      	lsrs	r3, r3, #6
 8002608:	461a      	mov	r2, r3
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002612:	f04f 0100 	mov.w	r1, #0
 8002616:	ea02 0400 	and.w	r4, r2, r0
 800261a:	ea03 0501 	and.w	r5, r3, r1
 800261e:	4620      	mov	r0, r4
 8002620:	4629      	mov	r1, r5
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	014b      	lsls	r3, r1, #5
 800262c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002630:	0142      	lsls	r2, r0, #5
 8002632:	4610      	mov	r0, r2
 8002634:	4619      	mov	r1, r3
 8002636:	1b00      	subs	r0, r0, r4
 8002638:	eb61 0105 	sbc.w	r1, r1, r5
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	018b      	lsls	r3, r1, #6
 8002646:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800264a:	0182      	lsls	r2, r0, #6
 800264c:	1a12      	subs	r2, r2, r0
 800264e:	eb63 0301 	sbc.w	r3, r3, r1
 8002652:	f04f 0000 	mov.w	r0, #0
 8002656:	f04f 0100 	mov.w	r1, #0
 800265a:	00d9      	lsls	r1, r3, #3
 800265c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002660:	00d0      	lsls	r0, r2, #3
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	1912      	adds	r2, r2, r4
 8002668:	eb45 0303 	adc.w	r3, r5, r3
 800266c:	f04f 0000 	mov.w	r0, #0
 8002670:	f04f 0100 	mov.w	r1, #0
 8002674:	0299      	lsls	r1, r3, #10
 8002676:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800267a:	0290      	lsls	r0, r2, #10
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	461a      	mov	r2, r3
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	f7fd fe18 	bl	80002c0 <__aeabi_uldivmod>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4613      	mov	r3, r2
 8002696:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002698:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x358>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	0f1b      	lsrs	r3, r3, #28
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80026a4:	69fa      	ldr	r2, [r7, #28]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	61bb      	str	r3, [r7, #24]
      break;
 80026ae:	e002      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80026b2:	61bb      	str	r3, [r7, #24]
      break;
 80026b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026b6:	69bb      	ldr	r3, [r7, #24]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3720      	adds	r7, #32
 80026bc:	46bd      	mov	sp, r7
 80026be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	00f42400 	.word	0x00f42400
 80026cc:	007a1200 	.word	0x007a1200

080026d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e28d      	b.n	8002bfe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 8083 	beq.w	80027f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80026f0:	4b94      	ldr	r3, [pc, #592]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 030c 	and.w	r3, r3, #12
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d019      	beq.n	8002730 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80026fc:	4b91      	ldr	r3, [pc, #580]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002704:	2b08      	cmp	r3, #8
 8002706:	d106      	bne.n	8002716 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002708:	4b8e      	ldr	r3, [pc, #568]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002714:	d00c      	beq.n	8002730 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002716:	4b8b      	ldr	r3, [pc, #556]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800271e:	2b0c      	cmp	r3, #12
 8002720:	d112      	bne.n	8002748 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002722:	4b88      	ldr	r3, [pc, #544]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800272e:	d10b      	bne.n	8002748 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002730:	4b84      	ldr	r3, [pc, #528]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d05b      	beq.n	80027f4 <HAL_RCC_OscConfig+0x124>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d157      	bne.n	80027f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e25a      	b.n	8002bfe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002750:	d106      	bne.n	8002760 <HAL_RCC_OscConfig+0x90>
 8002752:	4b7c      	ldr	r3, [pc, #496]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a7b      	ldr	r2, [pc, #492]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 8002758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e01d      	b.n	800279c <HAL_RCC_OscConfig+0xcc>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002768:	d10c      	bne.n	8002784 <HAL_RCC_OscConfig+0xb4>
 800276a:	4b76      	ldr	r3, [pc, #472]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a75      	ldr	r2, [pc, #468]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 8002770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	4b73      	ldr	r3, [pc, #460]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a72      	ldr	r2, [pc, #456]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 800277c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	e00b      	b.n	800279c <HAL_RCC_OscConfig+0xcc>
 8002784:	4b6f      	ldr	r3, [pc, #444]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a6e      	ldr	r2, [pc, #440]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 800278a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b6c      	ldr	r3, [pc, #432]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a6b      	ldr	r2, [pc, #428]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 8002796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800279a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d013      	beq.n	80027cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe fd0c 	bl	80011c0 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ac:	f7fe fd08 	bl	80011c0 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e21f      	b.n	8002bfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	4b61      	ldr	r3, [pc, #388]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0xdc>
 80027ca:	e014      	b.n	80027f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027cc:	f7fe fcf8 	bl	80011c0 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d4:	f7fe fcf4 	bl	80011c0 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	; 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e20b      	b.n	8002bfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e6:	4b57      	ldr	r3, [pc, #348]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0x104>
 80027f2:	e000      	b.n	80027f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d06f      	beq.n	80028e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002802:	4b50      	ldr	r3, [pc, #320]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b00      	cmp	r3, #0
 800280c:	d017      	beq.n	800283e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800280e:	4b4d      	ldr	r3, [pc, #308]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002816:	2b08      	cmp	r3, #8
 8002818:	d105      	bne.n	8002826 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800281a:	4b4a      	ldr	r3, [pc, #296]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00b      	beq.n	800283e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002826:	4b47      	ldr	r3, [pc, #284]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800282e:	2b0c      	cmp	r3, #12
 8002830:	d11c      	bne.n	800286c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002832:	4b44      	ldr	r3, [pc, #272]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d116      	bne.n	800286c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800283e:	4b41      	ldr	r3, [pc, #260]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_RCC_OscConfig+0x186>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d001      	beq.n	8002856 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e1d3      	b.n	8002bfe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002856:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4937      	ldr	r1, [pc, #220]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286a:	e03a      	b.n	80028e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d020      	beq.n	80028b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002874:	4b34      	ldr	r3, [pc, #208]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287a:	f7fe fca1 	bl	80011c0 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002882:	f7fe fc9d 	bl	80011c0 <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e1b4      	b.n	8002bfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002894:	4b2b      	ldr	r3, [pc, #172]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a0:	4b28      	ldr	r3, [pc, #160]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4925      	ldr	r1, [pc, #148]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]
 80028b4:	e015      	b.n	80028e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028b6:	4b24      	ldr	r3, [pc, #144]	; (8002948 <HAL_RCC_OscConfig+0x278>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028bc:	f7fe fc80 	bl	80011c0 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028c4:	f7fe fc7c 	bl	80011c0 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e193      	b.n	8002bfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028d6:	4b1b      	ldr	r3, [pc, #108]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d036      	beq.n	800295c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d016      	beq.n	8002924 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <HAL_RCC_OscConfig+0x27c>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fc:	f7fe fc60 	bl	80011c0 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002904:	f7fe fc5c 	bl	80011c0 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e173      	b.n	8002bfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_RCC_OscConfig+0x274>)
 8002918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x234>
 8002922:	e01b      	b.n	800295c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <HAL_RCC_OscConfig+0x27c>)
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292a:	f7fe fc49 	bl	80011c0 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002930:	e00e      	b.n	8002950 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002932:	f7fe fc45 	bl	80011c0 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d907      	bls.n	8002950 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e15c      	b.n	8002bfe <HAL_RCC_OscConfig+0x52e>
 8002944:	40023800 	.word	0x40023800
 8002948:	42470000 	.word	0x42470000
 800294c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002950:	4b8a      	ldr	r3, [pc, #552]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 8002952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1ea      	bne.n	8002932 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 8097 	beq.w	8002a98 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800296a:	2300      	movs	r3, #0
 800296c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296e:	4b83      	ldr	r3, [pc, #524]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10f      	bne.n	800299a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	4b7f      	ldr	r3, [pc, #508]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a7e      	ldr	r2, [pc, #504]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 8002984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
 800298a:	4b7c      	ldr	r3, [pc, #496]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002992:	60bb      	str	r3, [r7, #8]
 8002994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002996:	2301      	movs	r3, #1
 8002998:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299a:	4b79      	ldr	r3, [pc, #484]	; (8002b80 <HAL_RCC_OscConfig+0x4b0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d118      	bne.n	80029d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a6:	4b76      	ldr	r3, [pc, #472]	; (8002b80 <HAL_RCC_OscConfig+0x4b0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a75      	ldr	r2, [pc, #468]	; (8002b80 <HAL_RCC_OscConfig+0x4b0>)
 80029ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029b2:	f7fe fc05 	bl	80011c0 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ba:	f7fe fc01 	bl	80011c0 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e118      	b.n	8002bfe <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029cc:	4b6c      	ldr	r3, [pc, #432]	; (8002b80 <HAL_RCC_OscConfig+0x4b0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0f0      	beq.n	80029ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d106      	bne.n	80029ee <HAL_RCC_OscConfig+0x31e>
 80029e0:	4b66      	ldr	r3, [pc, #408]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	4a65      	ldr	r2, [pc, #404]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 80029e6:	f043 0301 	orr.w	r3, r3, #1
 80029ea:	6713      	str	r3, [r2, #112]	; 0x70
 80029ec:	e01c      	b.n	8002a28 <HAL_RCC_OscConfig+0x358>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b05      	cmp	r3, #5
 80029f4:	d10c      	bne.n	8002a10 <HAL_RCC_OscConfig+0x340>
 80029f6:	4b61      	ldr	r3, [pc, #388]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 80029f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fa:	4a60      	ldr	r2, [pc, #384]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 80029fc:	f043 0304 	orr.w	r3, r3, #4
 8002a00:	6713      	str	r3, [r2, #112]	; 0x70
 8002a02:	4b5e      	ldr	r3, [pc, #376]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	4a5d      	ldr	r2, [pc, #372]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0e:	e00b      	b.n	8002a28 <HAL_RCC_OscConfig+0x358>
 8002a10:	4b5a      	ldr	r3, [pc, #360]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	4a59      	ldr	r2, [pc, #356]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 8002a16:	f023 0301 	bic.w	r3, r3, #1
 8002a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a1c:	4b57      	ldr	r3, [pc, #348]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a20:	4a56      	ldr	r2, [pc, #344]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 8002a22:	f023 0304 	bic.w	r3, r3, #4
 8002a26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d015      	beq.n	8002a5c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a30:	f7fe fbc6 	bl	80011c0 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a38:	f7fe fbc2 	bl	80011c0 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e0d7      	b.n	8002bfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a4e:	4b4b      	ldr	r3, [pc, #300]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 8002a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0ee      	beq.n	8002a38 <HAL_RCC_OscConfig+0x368>
 8002a5a:	e014      	b.n	8002a86 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5c:	f7fe fbb0 	bl	80011c0 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a64:	f7fe fbac 	bl	80011c0 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e0c1      	b.n	8002bfe <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7a:	4b40      	ldr	r3, [pc, #256]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1ee      	bne.n	8002a64 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a86:	7dfb      	ldrb	r3, [r7, #23]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d105      	bne.n	8002a98 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a8c:	4b3b      	ldr	r3, [pc, #236]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	4a3a      	ldr	r2, [pc, #232]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 8002a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 80ad 	beq.w	8002bfc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002aa2:	4b36      	ldr	r3, [pc, #216]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d060      	beq.n	8002b70 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d145      	bne.n	8002b42 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ab6:	4b33      	ldr	r3, [pc, #204]	; (8002b84 <HAL_RCC_OscConfig+0x4b4>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abc:	f7fe fb80 	bl	80011c0 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac4:	f7fe fb7c 	bl	80011c0 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e093      	b.n	8002bfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ad6:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69da      	ldr	r2, [r3, #28]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af0:	019b      	lsls	r3, r3, #6
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	085b      	lsrs	r3, r3, #1
 8002afa:	3b01      	subs	r3, #1
 8002afc:	041b      	lsls	r3, r3, #16
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b04:	061b      	lsls	r3, r3, #24
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	071b      	lsls	r3, r3, #28
 8002b0e:	491b      	ldr	r1, [pc, #108]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b14:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <HAL_RCC_OscConfig+0x4b4>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7fe fb51 	bl	80011c0 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b22:	f7fe fb4d 	bl	80011c0 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e064      	b.n	8002bfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b34:	4b11      	ldr	r3, [pc, #68]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x452>
 8002b40:	e05c      	b.n	8002bfc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <HAL_RCC_OscConfig+0x4b4>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b48:	f7fe fb3a 	bl	80011c0 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b50:	f7fe fb36 	bl	80011c0 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e04d      	b.n	8002bfe <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b62:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <HAL_RCC_OscConfig+0x4ac>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x480>
 8002b6e:	e045      	b.n	8002bfc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d107      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e040      	b.n	8002bfe <HAL_RCC_OscConfig+0x52e>
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40007000 	.word	0x40007000
 8002b84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b88:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <HAL_RCC_OscConfig+0x538>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d030      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d129      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d122      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bb8:	4013      	ands	r3, r2
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d119      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	085b      	lsrs	r3, r3, #1
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d10f      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d107      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40023800 	.word	0x40023800

08002c0c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e083      	b.n	8002d26 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	7f5b      	ldrb	r3, [r3, #29]
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d105      	bne.n	8002c34 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7fd ff12 	bl	8000a58 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	22ca      	movs	r2, #202	; 0xca
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2253      	movs	r2, #83	; 0x53
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fb34 	bl	80032b8 <RTC_EnterInitMode>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	22ff      	movs	r2, #255	; 0xff
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2204      	movs	r2, #4
 8002c62:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e05e      	b.n	8002d26 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6812      	ldr	r2, [r2, #0]
 8002c72:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c7a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6899      	ldr	r1, [r3, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	68d2      	ldr	r2, [r2, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6919      	ldr	r1, [r3, #16]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	041a      	lsls	r2, r3, #16
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cc6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10e      	bne.n	8002cf4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fac6 	bl	8003268 <HAL_RTC_WaitForSynchro>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d008      	beq.n	8002cf4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	22ff      	movs	r2, #255	; 0xff
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2204      	movs	r2, #4
 8002cee:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e018      	b.n	8002d26 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d02:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	22ff      	movs	r2, #255	; 0xff
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002d24:	2300      	movs	r3, #0
  }
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d2e:	b590      	push	{r4, r7, lr}
 8002d30:	b087      	sub	sp, #28
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	7f1b      	ldrb	r3, [r3, #28]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_RTC_SetTime+0x1c>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e0aa      	b.n	8002ea0 <HAL_RTC_SetTime+0x172>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2202      	movs	r2, #2
 8002d54:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d126      	bne.n	8002daa <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d102      	bne.n	8002d70 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 facb 	bl	8003310 <RTC_ByteToBcd2>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	785b      	ldrb	r3, [r3, #1]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fac4 	bl	8003310 <RTC_ByteToBcd2>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002d8c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	789b      	ldrb	r3, [r3, #2]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fabc 	bl	8003310 <RTC_ByteToBcd2>
 8002d98:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002d9a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	78db      	ldrb	r3, [r3, #3]
 8002da2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	e018      	b.n	8002ddc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	785b      	ldrb	r3, [r3, #1]
 8002dc8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002dca:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002dd0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	78db      	ldrb	r3, [r3, #3]
 8002dd6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	22ca      	movs	r2, #202	; 0xca
 8002de2:	625a      	str	r2, [r3, #36]	; 0x24
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2253      	movs	r2, #83	; 0x53
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f000 fa63 	bl	80032b8 <RTC_EnterInitMode>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00b      	beq.n	8002e10 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	22ff      	movs	r2, #255	; 0xff
 8002dfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2204      	movs	r2, #4
 8002e04:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e047      	b.n	8002ea0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002e1a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e1e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e2e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6899      	ldr	r1, [r3, #8]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e56:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 0320 	and.w	r3, r3, #32
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d111      	bne.n	8002e8a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 f9fe 	bl	8003268 <HAL_RTC_WaitForSynchro>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00b      	beq.n	8002e8a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	22ff      	movs	r2, #255	; 0xff
 8002e78:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e00a      	b.n	8002ea0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	22ff      	movs	r2, #255	; 0xff
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2201      	movs	r2, #1
 8002e96:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
  }
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	371c      	adds	r7, #28
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd90      	pop	{r4, r7, pc}

08002ea8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002ea8:	b590      	push	{r4, r7, lr}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	7f1b      	ldrb	r3, [r3, #28]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_RTC_SetDate+0x1c>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e094      	b.n	8002fee <HAL_RTC_SetDate+0x146>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2202      	movs	r2, #2
 8002ece:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10e      	bne.n	8002ef4 <HAL_RTC_SetDate+0x4c>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	785b      	ldrb	r3, [r3, #1]
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d008      	beq.n	8002ef4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	785b      	ldrb	r3, [r3, #1]
 8002ee6:	f023 0310 	bic.w	r3, r3, #16
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	330a      	adds	r3, #10
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d11c      	bne.n	8002f34 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	78db      	ldrb	r3, [r3, #3]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fa06 	bl	8003310 <RTC_ByteToBcd2>
 8002f04:	4603      	mov	r3, r0
 8002f06:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	785b      	ldrb	r3, [r3, #1]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 f9ff 	bl	8003310 <RTC_ByteToBcd2>
 8002f12:	4603      	mov	r3, r0
 8002f14:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002f16:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	789b      	ldrb	r3, [r3, #2]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 f9f7 	bl	8003310 <RTC_ByteToBcd2>
 8002f22:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002f24:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	e00e      	b.n	8002f52 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	78db      	ldrb	r3, [r3, #3]
 8002f38:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	785b      	ldrb	r3, [r3, #1]
 8002f3e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002f40:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002f42:	68ba      	ldr	r2, [r7, #8]
 8002f44:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002f46:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	22ca      	movs	r2, #202	; 0xca
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2253      	movs	r2, #83	; 0x53
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f9a8 	bl	80032b8 <RTC_EnterInitMode>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00b      	beq.n	8002f86 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	22ff      	movs	r2, #255	; 0xff
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2204      	movs	r2, #4
 8002f7a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e033      	b.n	8002fee <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002f90:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002f94:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fa4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d111      	bne.n	8002fd8 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f957 	bl	8003268 <HAL_RTC_WaitForSynchro>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00b      	beq.n	8002fd8 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	22ff      	movs	r2, #255	; 0xff
 8002fc6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2204      	movs	r2, #4
 8002fcc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e00a      	b.n	8002fee <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	22ff      	movs	r2, #255	; 0xff
 8002fde:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002fec:	2300      	movs	r3, #0
  }
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd90      	pop	{r4, r7, pc}
	...

08002ff8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002ff8:	b590      	push	{r4, r7, lr}
 8002ffa:	b089      	sub	sp, #36	; 0x24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	2300      	movs	r3, #0
 800300a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 800300c:	4b93      	ldr	r3, [pc, #588]	; (800325c <HAL_RTC_SetAlarm_IT+0x264>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a93      	ldr	r2, [pc, #588]	; (8003260 <HAL_RTC_SetAlarm_IT+0x268>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	0adb      	lsrs	r3, r3, #11
 8003018:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800301c:	fb02 f303 	mul.w	r3, r2, r3
 8003020:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	7f1b      	ldrb	r3, [r3, #28]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_RTC_SetAlarm_IT+0x36>
 800302a:	2302      	movs	r3, #2
 800302c:	e111      	b.n	8003252 <HAL_RTC_SetAlarm_IT+0x25a>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2201      	movs	r2, #1
 8003032:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2202      	movs	r2, #2
 8003038:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d137      	bne.n	80030b0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304a:	2b00      	cmp	r3, #0
 800304c:	d102      	bne.n	8003054 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2200      	movs	r2, #0
 8003052:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f000 f959 	bl	8003310 <RTC_ByteToBcd2>
 800305e:	4603      	mov	r3, r0
 8003060:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	785b      	ldrb	r3, [r3, #1]
 8003066:	4618      	mov	r0, r3
 8003068:	f000 f952 	bl	8003310 <RTC_ByteToBcd2>
 800306c:	4603      	mov	r3, r0
 800306e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003070:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	789b      	ldrb	r3, [r3, #2]
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f94a 	bl	8003310 <RTC_ByteToBcd2>
 800307c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800307e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	78db      	ldrb	r3, [r3, #3]
 8003086:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003088:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003092:	4618      	mov	r0, r3
 8003094:	f000 f93c 	bl	8003310 <RTC_ByteToBcd2>
 8003098:	4603      	mov	r3, r0
 800309a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800309c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80030a4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	e023      	b.n	80030f8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d102      	bne.n	80030c4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2200      	movs	r2, #0
 80030c2:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	785b      	ldrb	r3, [r3, #1]
 80030ce:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80030d0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80030d6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	78db      	ldrb	r3, [r3, #3]
 80030dc:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80030de:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030e6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80030e8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80030ee:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	4313      	orrs	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	22ca      	movs	r2, #202	; 0xca
 800310a:	625a      	str	r2, [r3, #36]	; 0x24
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2253      	movs	r2, #83	; 0x53
 8003112:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800311c:	d141      	bne.n	80031a2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800312c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800313e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	1e5a      	subs	r2, r3, #1
 8003144:	617a      	str	r2, [r7, #20]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10b      	bne.n	8003162 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	22ff      	movs	r2, #255	; 0xff
 8003150:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2203      	movs	r2, #3
 8003156:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e077      	b.n	8003252 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0e7      	beq.n	8003140 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800318e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	e040      	b.n	8003224 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689a      	ldr	r2, [r3, #8]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031b0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f462 7220 	orn	r2, r2, #640	; 0x280
 80031c2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	1e5a      	subs	r2, r3, #1
 80031c8:	617a      	str	r2, [r7, #20]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10b      	bne.n	80031e6 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	22ff      	movs	r2, #255	; 0xff
 80031d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2203      	movs	r2, #3
 80031da:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e035      	b.n	8003252 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0e7      	beq.n	80031c4 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003212:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003222:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003224:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0e      	ldr	r2, [pc, #56]	; (8003264 <HAL_RTC_SetAlarm_IT+0x26c>)
 800322a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800322e:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8003230:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	4a0b      	ldr	r2, [pc, #44]	; (8003264 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323a:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	22ff      	movs	r2, #255	; 0xff
 8003242:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3724      	adds	r7, #36	; 0x24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd90      	pop	{r4, r7, pc}
 800325a:	bf00      	nop
 800325c:	20000000 	.word	0x20000000
 8003260:	10624dd3 	.word	0x10624dd3
 8003264:	40013c00 	.word	0x40013c00

08003268 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003282:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003284:	f7fd ff9c 	bl	80011c0 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800328a:	e009      	b.n	80032a0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800328c:	f7fd ff98 	bl	80011c0 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800329a:	d901      	bls.n	80032a0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e007      	b.n	80032b0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0ee      	beq.n	800328c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d119      	bne.n	8003306 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f04f 32ff 	mov.w	r2, #4294967295
 80032da:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032dc:	f7fd ff70 	bl	80011c0 <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80032e2:	e009      	b.n	80032f8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80032e4:	f7fd ff6c 	bl	80011c0 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032f2:	d901      	bls.n	80032f8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e007      	b.n	8003308 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0ee      	beq.n	80032e4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800331e:	e005      	b.n	800332c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3301      	adds	r3, #1
 8003324:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003326:	79fb      	ldrb	r3, [r7, #7]
 8003328:	3b0a      	subs	r3, #10
 800332a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800332c:	79fb      	ldrb	r3, [r7, #7]
 800332e:	2b09      	cmp	r3, #9
 8003330:	d8f6      	bhi.n	8003320 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	b2da      	uxtb	r2, r3
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	4313      	orrs	r3, r2
 800333e:	b2db      	uxtb	r3, r3
}
 8003340:	4618      	mov	r0, r3
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	7f1b      	ldrb	r3, [r3, #28]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8003360:	2302      	movs	r3, #2
 8003362:	e0a6      	b.n	80034b2 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2202      	movs	r2, #2
 800336e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	22ca      	movs	r2, #202	; 0xca
 8003376:	625a      	str	r2, [r3, #36]	; 0x24
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2253      	movs	r2, #83	; 0x53
 800337e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800338a:	2b00      	cmp	r3, #0
 800338c:	d022      	beq.n	80033d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800338e:	4b4c      	ldr	r3, [pc, #304]	; (80034c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a4c      	ldr	r2, [pc, #304]	; (80034c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	0adb      	lsrs	r3, r3, #11
 800339a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	1e5a      	subs	r2, r3, #1
 80033a8:	617a      	str	r2, [r7, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10b      	bne.n	80033c6 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	22ff      	movs	r2, #255	; 0xff
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2203      	movs	r2, #3
 80033ba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e075      	b.n	80034b2 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0304 	and.w	r3, r3, #4
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1e7      	bne.n	80033a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e2:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 80033e4:	4b36      	ldr	r3, [pc, #216]	; (80034c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a36      	ldr	r2, [pc, #216]	; (80034c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	0adb      	lsrs	r3, r3, #11
 80033f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033f4:	fb02 f303 	mul.w	r3, r2, r3
 80033f8:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	1e5a      	subs	r2, r3, #1
 80033fe:	617a      	str	r2, [r7, #20]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10b      	bne.n	800341c <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	22ff      	movs	r2, #255	; 0xff
 800340a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2203      	movs	r2, #3
 8003410:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e04a      	b.n	80034b2 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b00      	cmp	r3, #0
 8003428:	d0e7      	beq.n	80033fa <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0207 	bic.w	r2, r2, #7
 8003440:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6899      	ldr	r1, [r3, #8]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	430a      	orrs	r2, r1
 8003450:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003452:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a1c      	ldr	r2, [pc, #112]	; (80034c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003458:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800345c:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800345e:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	4a19      	ldr	r2, [pc, #100]	; (80034c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003464:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003468:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800347a:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800348a:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800349a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	22ff      	movs	r2, #255	; 0xff
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	371c      	adds	r7, #28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20000000 	.word	0x20000000
 80034c4:	10624dd3 	.word	0x10624dd3
 80034c8:	40013c00 	.word	0x40013c00

080034cc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	7f1b      	ldrb	r3, [r3, #28]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e047      	b.n	8003574 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	22ca      	movs	r2, #202	; 0xca
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2253      	movs	r2, #83	; 0x53
 80034fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800350e:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800351e:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003520:	f7fd fe4e 	bl	80011c0 <HAL_GetTick>
 8003524:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003526:	e013      	b.n	8003550 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003528:	f7fd fe4a 	bl	80011c0 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003536:	d90b      	bls.n	8003550 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	22ff      	movs	r2, #255	; 0xff
 800353e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2203      	movs	r2, #3
 8003544:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e011      	b.n	8003574 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f003 0304 	and.w	r3, r3, #4
 800355a:	2b00      	cmp	r3, #0
 800355c:	d0e4      	beq.n	8003528 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	22ff      	movs	r2, #255	; 0xff
 8003564:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003572:	2300      	movs	r3, #0
}
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e041      	b.n	8003612 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f839 	bl	800361a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3304      	adds	r3, #4
 80035b8:	4619      	mov	r1, r3
 80035ba:	4610      	mov	r0, r2
 80035bc:	f000 f9d8 	bl	8003970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800361a:	b480      	push	{r7}
 800361c:	b083      	sub	sp, #12
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b01      	cmp	r3, #1
 8003642:	d001      	beq.n	8003648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e04e      	b.n	80036e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2202      	movs	r2, #2
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0201 	orr.w	r2, r2, #1
 800365e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a23      	ldr	r2, [pc, #140]	; (80036f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d022      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x80>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003672:	d01d      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x80>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a1f      	ldr	r2, [pc, #124]	; (80036f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d018      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x80>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a1e      	ldr	r2, [pc, #120]	; (80036fc <HAL_TIM_Base_Start_IT+0xcc>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d013      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x80>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <HAL_TIM_Base_Start_IT+0xd0>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00e      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x80>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <HAL_TIM_Base_Start_IT+0xd4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d009      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x80>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a19      	ldr	r2, [pc, #100]	; (8003708 <HAL_TIM_Base_Start_IT+0xd8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d004      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x80>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a18      	ldr	r2, [pc, #96]	; (800370c <HAL_TIM_Base_Start_IT+0xdc>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d111      	bne.n	80036d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b06      	cmp	r3, #6
 80036c0:	d010      	beq.n	80036e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f042 0201 	orr.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d2:	e007      	b.n	80036e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	40010000 	.word	0x40010000
 80036f8:	40000400 	.word	0x40000400
 80036fc:	40000800 	.word	0x40000800
 8003700:	40000c00 	.word	0x40000c00
 8003704:	40010400 	.word	0x40010400
 8003708:	40014000 	.word	0x40014000
 800370c:	40001800 	.word	0x40001800

08003710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b02      	cmp	r3, #2
 8003724:	d122      	bne.n	800376c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b02      	cmp	r3, #2
 8003732:	d11b      	bne.n	800376c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f06f 0202 	mvn.w	r2, #2
 800373c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d003      	beq.n	800375a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f8ee 	bl	8003934 <HAL_TIM_IC_CaptureCallback>
 8003758:	e005      	b.n	8003766 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f8e0 	bl	8003920 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 f8f1 	bl	8003948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f003 0304 	and.w	r3, r3, #4
 8003776:	2b04      	cmp	r3, #4
 8003778:	d122      	bne.n	80037c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b04      	cmp	r3, #4
 8003786:	d11b      	bne.n	80037c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f06f 0204 	mvn.w	r2, #4
 8003790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2202      	movs	r2, #2
 8003796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f8c4 	bl	8003934 <HAL_TIM_IC_CaptureCallback>
 80037ac:	e005      	b.n	80037ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f8b6 	bl	8003920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f8c7 	bl	8003948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d122      	bne.n	8003814 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d11b      	bne.n	8003814 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f06f 0208 	mvn.w	r2, #8
 80037e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2204      	movs	r2, #4
 80037ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f89a 	bl	8003934 <HAL_TIM_IC_CaptureCallback>
 8003800:	e005      	b.n	800380e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f88c 	bl	8003920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f89d 	bl	8003948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	2b10      	cmp	r3, #16
 8003820:	d122      	bne.n	8003868 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b10      	cmp	r3, #16
 800382e:	d11b      	bne.n	8003868 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f06f 0210 	mvn.w	r2, #16
 8003838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2208      	movs	r2, #8
 800383e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 f870 	bl	8003934 <HAL_TIM_IC_CaptureCallback>
 8003854:	e005      	b.n	8003862 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f862 	bl	8003920 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f873 	bl	8003948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b01      	cmp	r3, #1
 8003874:	d10e      	bne.n	8003894 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b01      	cmp	r3, #1
 8003882:	d107      	bne.n	8003894 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0201 	mvn.w	r2, #1
 800388c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fd f89e 	bl	80009d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389e:	2b80      	cmp	r3, #128	; 0x80
 80038a0:	d10e      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ac:	2b80      	cmp	r3, #128	; 0x80
 80038ae:	d107      	bne.n	80038c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f902 	bl	8003ac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ca:	2b40      	cmp	r3, #64	; 0x40
 80038cc:	d10e      	bne.n	80038ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d8:	2b40      	cmp	r3, #64	; 0x40
 80038da:	d107      	bne.n	80038ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f838 	bl	800395c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b20      	cmp	r3, #32
 80038f8:	d10e      	bne.n	8003918 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b20      	cmp	r3, #32
 8003906:	d107      	bne.n	8003918 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0220 	mvn.w	r2, #32
 8003910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f8cc 	bl	8003ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003918:	bf00      	nop
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a40      	ldr	r2, [pc, #256]	; (8003a84 <TIM_Base_SetConfig+0x114>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d013      	beq.n	80039b0 <TIM_Base_SetConfig+0x40>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800398e:	d00f      	beq.n	80039b0 <TIM_Base_SetConfig+0x40>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a3d      	ldr	r2, [pc, #244]	; (8003a88 <TIM_Base_SetConfig+0x118>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00b      	beq.n	80039b0 <TIM_Base_SetConfig+0x40>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a3c      	ldr	r2, [pc, #240]	; (8003a8c <TIM_Base_SetConfig+0x11c>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d007      	beq.n	80039b0 <TIM_Base_SetConfig+0x40>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a3b      	ldr	r2, [pc, #236]	; (8003a90 <TIM_Base_SetConfig+0x120>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d003      	beq.n	80039b0 <TIM_Base_SetConfig+0x40>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a3a      	ldr	r2, [pc, #232]	; (8003a94 <TIM_Base_SetConfig+0x124>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d108      	bne.n	80039c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a2f      	ldr	r2, [pc, #188]	; (8003a84 <TIM_Base_SetConfig+0x114>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d02b      	beq.n	8003a22 <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d0:	d027      	beq.n	8003a22 <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2c      	ldr	r2, [pc, #176]	; (8003a88 <TIM_Base_SetConfig+0x118>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d023      	beq.n	8003a22 <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a2b      	ldr	r2, [pc, #172]	; (8003a8c <TIM_Base_SetConfig+0x11c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01f      	beq.n	8003a22 <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a2a      	ldr	r2, [pc, #168]	; (8003a90 <TIM_Base_SetConfig+0x120>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d01b      	beq.n	8003a22 <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a29      	ldr	r2, [pc, #164]	; (8003a94 <TIM_Base_SetConfig+0x124>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d017      	beq.n	8003a22 <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a28      	ldr	r2, [pc, #160]	; (8003a98 <TIM_Base_SetConfig+0x128>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d013      	beq.n	8003a22 <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a27      	ldr	r2, [pc, #156]	; (8003a9c <TIM_Base_SetConfig+0x12c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d00f      	beq.n	8003a22 <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a26      	ldr	r2, [pc, #152]	; (8003aa0 <TIM_Base_SetConfig+0x130>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00b      	beq.n	8003a22 <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a25      	ldr	r2, [pc, #148]	; (8003aa4 <TIM_Base_SetConfig+0x134>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <TIM_Base_SetConfig+0xb2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a24      	ldr	r2, [pc, #144]	; (8003aa8 <TIM_Base_SetConfig+0x138>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d003      	beq.n	8003a22 <TIM_Base_SetConfig+0xb2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a23      	ldr	r2, [pc, #140]	; (8003aac <TIM_Base_SetConfig+0x13c>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d108      	bne.n	8003a34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	695b      	ldr	r3, [r3, #20]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <TIM_Base_SetConfig+0x114>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d003      	beq.n	8003a68 <TIM_Base_SetConfig+0xf8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a0c      	ldr	r2, [pc, #48]	; (8003a94 <TIM_Base_SetConfig+0x124>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d103      	bne.n	8003a70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	615a      	str	r2, [r3, #20]
}
 8003a76:	bf00      	nop
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40010000 	.word	0x40010000
 8003a88:	40000400 	.word	0x40000400
 8003a8c:	40000800 	.word	0x40000800
 8003a90:	40000c00 	.word	0x40000c00
 8003a94:	40010400 	.word	0x40010400
 8003a98:	40014000 	.word	0x40014000
 8003a9c:	40014400 	.word	0x40014400
 8003aa0:	40014800 	.word	0x40014800
 8003aa4:	40001800 	.word	0x40001800
 8003aa8:	40001c00 	.word	0x40001c00
 8003aac:	40002000 	.word	0x40002000

08003ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e03f      	b.n	8003b6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fc ffd4 	bl	8000aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2224      	movs	r2, #36	; 0x24
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f929 	bl	8003d74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695a      	ldr	r2, [r3, #20]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b08a      	sub	sp, #40	; 0x28
 8003b76:	af02      	add	r7, sp, #8
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	603b      	str	r3, [r7, #0]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	d17c      	bne.n	8003c8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_UART_Transmit+0x2c>
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e075      	b.n	8003c8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_UART_Transmit+0x3e>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e06e      	b.n	8003c8e <HAL_UART_Transmit+0x11c>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2221      	movs	r2, #33	; 0x21
 8003bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003bc6:	f7fd fafb 	bl	80011c0 <HAL_GetTick>
 8003bca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	88fa      	ldrh	r2, [r7, #6]
 8003bd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	88fa      	ldrh	r2, [r7, #6]
 8003bd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be0:	d108      	bne.n	8003bf4 <HAL_UART_Transmit+0x82>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d104      	bne.n	8003bf4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	61bb      	str	r3, [r7, #24]
 8003bf2:	e003      	b.n	8003bfc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c04:	e02a      	b.n	8003c5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2180      	movs	r1, #128	; 0x80
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f840 	bl	8003c96 <UART_WaitOnFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e036      	b.n	8003c8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10b      	bne.n	8003c3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	3302      	adds	r3, #2
 8003c3a:	61bb      	str	r3, [r7, #24]
 8003c3c:	e007      	b.n	8003c4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	781a      	ldrb	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	3b01      	subs	r3, #1
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1cf      	bne.n	8003c06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2140      	movs	r1, #64	; 0x40
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 f810 	bl	8003c96 <UART_WaitOnFlagUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e006      	b.n	8003c8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	e000      	b.n	8003c8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c8c:	2302      	movs	r3, #2
  }
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3720      	adds	r7, #32
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b090      	sub	sp, #64	; 0x40
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	603b      	str	r3, [r7, #0]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca6:	e050      	b.n	8003d4a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cae:	d04c      	beq.n	8003d4a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cb6:	f7fd fa83 	bl	80011c0 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d241      	bcs.n	8003d4a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	330c      	adds	r3, #12
 8003ccc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	330c      	adds	r3, #12
 8003ce4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ce6:	637a      	str	r2, [r7, #52]	; 0x34
 8003ce8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e5      	bne.n	8003cc6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3314      	adds	r3, #20
 8003d00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	613b      	str	r3, [r7, #16]
   return(result);
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f023 0301 	bic.w	r3, r3, #1
 8003d10:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3314      	adds	r3, #20
 8003d18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d1a:	623a      	str	r2, [r7, #32]
 8003d1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	69f9      	ldr	r1, [r7, #28]
 8003d20:	6a3a      	ldr	r2, [r7, #32]
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e5      	bne.n	8003cfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2220      	movs	r2, #32
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e00f      	b.n	8003d6a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4013      	ands	r3, r2
 8003d54:	68ba      	ldr	r2, [r7, #8]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	bf0c      	ite	eq
 8003d5a:	2301      	moveq	r3, #1
 8003d5c:	2300      	movne	r3, #0
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	461a      	mov	r2, r3
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d09f      	beq.n	8003ca8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3740      	adds	r7, #64	; 0x40
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d78:	b09f      	sub	sp, #124	; 0x7c
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8a:	68d9      	ldr	r1, [r3, #12]
 8003d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	ea40 0301 	orr.w	r3, r0, r1
 8003d94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	431a      	orrs	r2, r3
 8003da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003db8:	f021 010c 	bic.w	r1, r1, #12
 8003dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dc2:	430b      	orrs	r3, r1
 8003dc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd2:	6999      	ldr	r1, [r3, #24]
 8003dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	ea40 0301 	orr.w	r3, r0, r1
 8003ddc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4bc5      	ldr	r3, [pc, #788]	; (80040f8 <UART_SetConfig+0x384>)
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d004      	beq.n	8003df2 <UART_SetConfig+0x7e>
 8003de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	4bc3      	ldr	r3, [pc, #780]	; (80040fc <UART_SetConfig+0x388>)
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d103      	bne.n	8003dfa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003df2:	f7fd ff4b 	bl	8001c8c <HAL_RCC_GetPCLK2Freq>
 8003df6:	6778      	str	r0, [r7, #116]	; 0x74
 8003df8:	e002      	b.n	8003e00 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dfa:	f7fd ff33 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 8003dfe:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e02:	69db      	ldr	r3, [r3, #28]
 8003e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e08:	f040 80b6 	bne.w	8003f78 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e0e:	461c      	mov	r4, r3
 8003e10:	f04f 0500 	mov.w	r5, #0
 8003e14:	4622      	mov	r2, r4
 8003e16:	462b      	mov	r3, r5
 8003e18:	1891      	adds	r1, r2, r2
 8003e1a:	6439      	str	r1, [r7, #64]	; 0x40
 8003e1c:	415b      	adcs	r3, r3
 8003e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e20:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e24:	1912      	adds	r2, r2, r4
 8003e26:	eb45 0303 	adc.w	r3, r5, r3
 8003e2a:	f04f 0000 	mov.w	r0, #0
 8003e2e:	f04f 0100 	mov.w	r1, #0
 8003e32:	00d9      	lsls	r1, r3, #3
 8003e34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e38:	00d0      	lsls	r0, r2, #3
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	1911      	adds	r1, r2, r4
 8003e40:	6639      	str	r1, [r7, #96]	; 0x60
 8003e42:	416b      	adcs	r3, r5
 8003e44:	667b      	str	r3, [r7, #100]	; 0x64
 8003e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	1891      	adds	r1, r2, r2
 8003e52:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e54:	415b      	adcs	r3, r3
 8003e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e5c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003e60:	f7fc fa2e 	bl	80002c0 <__aeabi_uldivmod>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4ba5      	ldr	r3, [pc, #660]	; (8004100 <UART_SetConfig+0x38c>)
 8003e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	011e      	lsls	r6, r3, #4
 8003e72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e74:	461c      	mov	r4, r3
 8003e76:	f04f 0500 	mov.w	r5, #0
 8003e7a:	4622      	mov	r2, r4
 8003e7c:	462b      	mov	r3, r5
 8003e7e:	1891      	adds	r1, r2, r2
 8003e80:	6339      	str	r1, [r7, #48]	; 0x30
 8003e82:	415b      	adcs	r3, r3
 8003e84:	637b      	str	r3, [r7, #52]	; 0x34
 8003e86:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003e8a:	1912      	adds	r2, r2, r4
 8003e8c:	eb45 0303 	adc.w	r3, r5, r3
 8003e90:	f04f 0000 	mov.w	r0, #0
 8003e94:	f04f 0100 	mov.w	r1, #0
 8003e98:	00d9      	lsls	r1, r3, #3
 8003e9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e9e:	00d0      	lsls	r0, r2, #3
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	1911      	adds	r1, r2, r4
 8003ea6:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ea8:	416b      	adcs	r3, r5
 8003eaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	1891      	adds	r1, r2, r2
 8003eb8:	62b9      	str	r1, [r7, #40]	; 0x28
 8003eba:	415b      	adcs	r3, r3
 8003ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ebe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ec2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ec6:	f7fc f9fb 	bl	80002c0 <__aeabi_uldivmod>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4b8c      	ldr	r3, [pc, #560]	; (8004100 <UART_SetConfig+0x38c>)
 8003ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed4:	095b      	lsrs	r3, r3, #5
 8003ed6:	2164      	movs	r1, #100	; 0x64
 8003ed8:	fb01 f303 	mul.w	r3, r1, r3
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	3332      	adds	r3, #50	; 0x32
 8003ee2:	4a87      	ldr	r2, [pc, #540]	; (8004100 <UART_SetConfig+0x38c>)
 8003ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee8:	095b      	lsrs	r3, r3, #5
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ef0:	441e      	add	r6, r3
 8003ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f04f 0100 	mov.w	r1, #0
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	1894      	adds	r4, r2, r2
 8003f00:	623c      	str	r4, [r7, #32]
 8003f02:	415b      	adcs	r3, r3
 8003f04:	627b      	str	r3, [r7, #36]	; 0x24
 8003f06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f0a:	1812      	adds	r2, r2, r0
 8003f0c:	eb41 0303 	adc.w	r3, r1, r3
 8003f10:	f04f 0400 	mov.w	r4, #0
 8003f14:	f04f 0500 	mov.w	r5, #0
 8003f18:	00dd      	lsls	r5, r3, #3
 8003f1a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f1e:	00d4      	lsls	r4, r2, #3
 8003f20:	4622      	mov	r2, r4
 8003f22:	462b      	mov	r3, r5
 8003f24:	1814      	adds	r4, r2, r0
 8003f26:	653c      	str	r4, [r7, #80]	; 0x50
 8003f28:	414b      	adcs	r3, r1
 8003f2a:	657b      	str	r3, [r7, #84]	; 0x54
 8003f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	461a      	mov	r2, r3
 8003f32:	f04f 0300 	mov.w	r3, #0
 8003f36:	1891      	adds	r1, r2, r2
 8003f38:	61b9      	str	r1, [r7, #24]
 8003f3a:	415b      	adcs	r3, r3
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f42:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003f46:	f7fc f9bb 	bl	80002c0 <__aeabi_uldivmod>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4b6c      	ldr	r3, [pc, #432]	; (8004100 <UART_SetConfig+0x38c>)
 8003f50:	fba3 1302 	umull	r1, r3, r3, r2
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	2164      	movs	r1, #100	; 0x64
 8003f58:	fb01 f303 	mul.w	r3, r1, r3
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	3332      	adds	r3, #50	; 0x32
 8003f62:	4a67      	ldr	r2, [pc, #412]	; (8004100 <UART_SetConfig+0x38c>)
 8003f64:	fba2 2303 	umull	r2, r3, r2, r3
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	f003 0207 	and.w	r2, r3, #7
 8003f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4432      	add	r2, r6
 8003f74:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f76:	e0b9      	b.n	80040ec <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f7a:	461c      	mov	r4, r3
 8003f7c:	f04f 0500 	mov.w	r5, #0
 8003f80:	4622      	mov	r2, r4
 8003f82:	462b      	mov	r3, r5
 8003f84:	1891      	adds	r1, r2, r2
 8003f86:	6139      	str	r1, [r7, #16]
 8003f88:	415b      	adcs	r3, r3
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f90:	1912      	adds	r2, r2, r4
 8003f92:	eb45 0303 	adc.w	r3, r5, r3
 8003f96:	f04f 0000 	mov.w	r0, #0
 8003f9a:	f04f 0100 	mov.w	r1, #0
 8003f9e:	00d9      	lsls	r1, r3, #3
 8003fa0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fa4:	00d0      	lsls	r0, r2, #3
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	eb12 0804 	adds.w	r8, r2, r4
 8003fae:	eb43 0905 	adc.w	r9, r3, r5
 8003fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f04f 0100 	mov.w	r1, #0
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	008b      	lsls	r3, r1, #2
 8003fc6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fca:	0082      	lsls	r2, r0, #2
 8003fcc:	4640      	mov	r0, r8
 8003fce:	4649      	mov	r1, r9
 8003fd0:	f7fc f976 	bl	80002c0 <__aeabi_uldivmod>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4b49      	ldr	r3, [pc, #292]	; (8004100 <UART_SetConfig+0x38c>)
 8003fda:	fba3 2302 	umull	r2, r3, r3, r2
 8003fde:	095b      	lsrs	r3, r3, #5
 8003fe0:	011e      	lsls	r6, r3, #4
 8003fe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f04f 0100 	mov.w	r1, #0
 8003fea:	4602      	mov	r2, r0
 8003fec:	460b      	mov	r3, r1
 8003fee:	1894      	adds	r4, r2, r2
 8003ff0:	60bc      	str	r4, [r7, #8]
 8003ff2:	415b      	adcs	r3, r3
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ffa:	1812      	adds	r2, r2, r0
 8003ffc:	eb41 0303 	adc.w	r3, r1, r3
 8004000:	f04f 0400 	mov.w	r4, #0
 8004004:	f04f 0500 	mov.w	r5, #0
 8004008:	00dd      	lsls	r5, r3, #3
 800400a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800400e:	00d4      	lsls	r4, r2, #3
 8004010:	4622      	mov	r2, r4
 8004012:	462b      	mov	r3, r5
 8004014:	1814      	adds	r4, r2, r0
 8004016:	64bc      	str	r4, [r7, #72]	; 0x48
 8004018:	414b      	adcs	r3, r1
 800401a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800401c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	4618      	mov	r0, r3
 8004022:	f04f 0100 	mov.w	r1, #0
 8004026:	f04f 0200 	mov.w	r2, #0
 800402a:	f04f 0300 	mov.w	r3, #0
 800402e:	008b      	lsls	r3, r1, #2
 8004030:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004034:	0082      	lsls	r2, r0, #2
 8004036:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800403a:	f7fc f941 	bl	80002c0 <__aeabi_uldivmod>
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	4b2f      	ldr	r3, [pc, #188]	; (8004100 <UART_SetConfig+0x38c>)
 8004044:	fba3 1302 	umull	r1, r3, r3, r2
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	2164      	movs	r1, #100	; 0x64
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	3332      	adds	r3, #50	; 0x32
 8004056:	4a2a      	ldr	r2, [pc, #168]	; (8004100 <UART_SetConfig+0x38c>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004062:	441e      	add	r6, r3
 8004064:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004066:	4618      	mov	r0, r3
 8004068:	f04f 0100 	mov.w	r1, #0
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	1894      	adds	r4, r2, r2
 8004072:	603c      	str	r4, [r7, #0]
 8004074:	415b      	adcs	r3, r3
 8004076:	607b      	str	r3, [r7, #4]
 8004078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800407c:	1812      	adds	r2, r2, r0
 800407e:	eb41 0303 	adc.w	r3, r1, r3
 8004082:	f04f 0400 	mov.w	r4, #0
 8004086:	f04f 0500 	mov.w	r5, #0
 800408a:	00dd      	lsls	r5, r3, #3
 800408c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004090:	00d4      	lsls	r4, r2, #3
 8004092:	4622      	mov	r2, r4
 8004094:	462b      	mov	r3, r5
 8004096:	eb12 0a00 	adds.w	sl, r2, r0
 800409a:	eb43 0b01 	adc.w	fp, r3, r1
 800409e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f04f 0100 	mov.w	r1, #0
 80040a8:	f04f 0200 	mov.w	r2, #0
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	008b      	lsls	r3, r1, #2
 80040b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040b6:	0082      	lsls	r2, r0, #2
 80040b8:	4650      	mov	r0, sl
 80040ba:	4659      	mov	r1, fp
 80040bc:	f7fc f900 	bl	80002c0 <__aeabi_uldivmod>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4b0e      	ldr	r3, [pc, #56]	; (8004100 <UART_SetConfig+0x38c>)
 80040c6:	fba3 1302 	umull	r1, r3, r3, r2
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	2164      	movs	r1, #100	; 0x64
 80040ce:	fb01 f303 	mul.w	r3, r1, r3
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	011b      	lsls	r3, r3, #4
 80040d6:	3332      	adds	r3, #50	; 0x32
 80040d8:	4a09      	ldr	r2, [pc, #36]	; (8004100 <UART_SetConfig+0x38c>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	f003 020f 	and.w	r2, r3, #15
 80040e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4432      	add	r2, r6
 80040ea:	609a      	str	r2, [r3, #8]
}
 80040ec:	bf00      	nop
 80040ee:	377c      	adds	r7, #124	; 0x7c
 80040f0:	46bd      	mov	sp, r7
 80040f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f6:	bf00      	nop
 80040f8:	40011000 	.word	0x40011000
 80040fc:	40011400 	.word	0x40011400
 8004100:	51eb851f 	.word	0x51eb851f

08004104 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004104:	b084      	sub	sp, #16
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
 800410e:	f107 001c 	add.w	r0, r7, #28
 8004112:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	2b01      	cmp	r3, #1
 800411a:	d122      	bne.n	8004162 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004130:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004144:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004146:	2b01      	cmp	r3, #1
 8004148:	d105      	bne.n	8004156 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fa7c 	bl	8004654 <USB_CoreReset>
 800415c:	4603      	mov	r3, r0
 800415e:	73fb      	strb	r3, [r7, #15]
 8004160:	e01a      	b.n	8004198 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fa70 	bl	8004654 <USB_CoreReset>
 8004174:	4603      	mov	r3, r0
 8004176:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	639a      	str	r2, [r3, #56]	; 0x38
 800418a:	e005      	b.n	8004198 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419a:	2b01      	cmp	r3, #1
 800419c:	d10b      	bne.n	80041b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f043 0206 	orr.w	r2, r3, #6
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f043 0220 	orr.w	r2, r3, #32
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041c2:	b004      	add	sp, #16
 80041c4:	4770      	bx	lr

080041c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b083      	sub	sp, #12
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f023 0201 	bic.w	r2, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	460b      	mov	r3, r1
 80041f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004204:	78fb      	ldrb	r3, [r7, #3]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d115      	bne.n	8004236 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004216:	2001      	movs	r0, #1
 8004218:	f7fc ffde 	bl	80011d8 <HAL_Delay>
      ms++;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	3301      	adds	r3, #1
 8004220:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fa08 	bl	8004638 <USB_GetMode>
 8004228:	4603      	mov	r3, r0
 800422a:	2b01      	cmp	r3, #1
 800422c:	d01e      	beq.n	800426c <USB_SetCurrentMode+0x84>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b31      	cmp	r3, #49	; 0x31
 8004232:	d9f0      	bls.n	8004216 <USB_SetCurrentMode+0x2e>
 8004234:	e01a      	b.n	800426c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d115      	bne.n	8004268 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004248:	2001      	movs	r0, #1
 800424a:	f7fc ffc5 	bl	80011d8 <HAL_Delay>
      ms++;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3301      	adds	r3, #1
 8004252:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f9ef 	bl	8004638 <USB_GetMode>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <USB_SetCurrentMode+0x84>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b31      	cmp	r3, #49	; 0x31
 8004264:	d9f0      	bls.n	8004248 <USB_SetCurrentMode+0x60>
 8004266:	e001      	b.n	800426c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e005      	b.n	8004278 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b32      	cmp	r3, #50	; 0x32
 8004270:	d101      	bne.n	8004276 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004280:	b084      	sub	sp, #16
 8004282:	b580      	push	{r7, lr}
 8004284:	b086      	sub	sp, #24
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800428e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800429a:	2300      	movs	r3, #0
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	e009      	b.n	80042b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	3340      	adds	r3, #64	; 0x40
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4413      	add	r3, r2
 80042aa:	2200      	movs	r2, #0
 80042ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	3301      	adds	r3, #1
 80042b2:	613b      	str	r3, [r7, #16]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	2b0e      	cmp	r3, #14
 80042b8:	d9f2      	bls.n	80042a0 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80042ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d11c      	bne.n	80042fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ce:	f043 0302 	orr.w	r3, r3, #2
 80042d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	e005      	b.n	8004306 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800430c:	461a      	mov	r2, r3
 800430e:	2300      	movs	r3, #0
 8004310:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004318:	4619      	mov	r1, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004320:	461a      	mov	r2, r3
 8004322:	680b      	ldr	r3, [r1, #0]
 8004324:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004328:	2b01      	cmp	r3, #1
 800432a:	d10c      	bne.n	8004346 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432e:	2b00      	cmp	r3, #0
 8004330:	d104      	bne.n	800433c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004332:	2100      	movs	r1, #0
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f945 	bl	80045c4 <USB_SetDevSpeed>
 800433a:	e008      	b.n	800434e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800433c:	2101      	movs	r1, #1
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f940 	bl	80045c4 <USB_SetDevSpeed>
 8004344:	e003      	b.n	800434e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004346:	2103      	movs	r1, #3
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f93b 	bl	80045c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800434e:	2110      	movs	r1, #16
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f8f3 	bl	800453c <USB_FlushTxFifo>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f90f 	bl	8004584 <USB_FlushRxFifo>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004376:	461a      	mov	r2, r3
 8004378:	2300      	movs	r3, #0
 800437a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004382:	461a      	mov	r2, r3
 8004384:	2300      	movs	r3, #0
 8004386:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438e:	461a      	mov	r2, r3
 8004390:	2300      	movs	r3, #0
 8004392:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004394:	2300      	movs	r3, #0
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	e043      	b.n	8004422 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043b0:	d118      	bne.n	80043e4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10a      	bne.n	80043ce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c4:	461a      	mov	r2, r3
 80043c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	e013      	b.n	80043f6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043da:	461a      	mov	r2, r3
 80043dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e008      	b.n	80043f6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f0:	461a      	mov	r2, r3
 80043f2:	2300      	movs	r3, #0
 80043f4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	015a      	lsls	r2, r3, #5
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4413      	add	r3, r2
 80043fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004402:	461a      	mov	r2, r3
 8004404:	2300      	movs	r3, #0
 8004406:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	015a      	lsls	r2, r3, #5
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4413      	add	r3, r2
 8004410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004414:	461a      	mov	r2, r3
 8004416:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800441a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	3301      	adds	r3, #1
 8004420:	613b      	str	r3, [r7, #16]
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	429a      	cmp	r2, r3
 8004428:	d3b7      	bcc.n	800439a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800442a:	2300      	movs	r3, #0
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	e043      	b.n	80044b8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004442:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004446:	d118      	bne.n	800447a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10a      	bne.n	8004464 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445a:	461a      	mov	r2, r3
 800445c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	e013      	b.n	800448c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004470:	461a      	mov	r2, r3
 8004472:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	e008      	b.n	800448c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004486:	461a      	mov	r2, r3
 8004488:	2300      	movs	r3, #0
 800448a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004498:	461a      	mov	r2, r3
 800449a:	2300      	movs	r3, #0
 800449c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044aa:	461a      	mov	r2, r3
 80044ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	3301      	adds	r3, #1
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d3b7      	bcc.n	8004430 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044d2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80044e0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d105      	bne.n	80044f4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	f043 0210 	orr.w	r2, r3, #16
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	699a      	ldr	r2, [r3, #24]
 80044f8:	4b0f      	ldr	r3, [pc, #60]	; (8004538 <USB_DevInit+0x2b8>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	f043 0208 	orr.w	r2, r3, #8
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004514:	2b01      	cmp	r3, #1
 8004516:	d107      	bne.n	8004528 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004520:	f043 0304 	orr.w	r3, r3, #4
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004528:	7dfb      	ldrb	r3, [r7, #23]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004534:	b004      	add	sp, #16
 8004536:	4770      	bx	lr
 8004538:	803c3800 	.word	0x803c3800

0800453c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	019b      	lsls	r3, r3, #6
 800454e:	f043 0220 	orr.w	r2, r3, #32
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	3301      	adds	r3, #1
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	4a08      	ldr	r2, [pc, #32]	; (8004580 <USB_FlushTxFifo+0x44>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d901      	bls.n	8004566 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e006      	b.n	8004574 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0320 	and.w	r3, r3, #32
 800456e:	2b20      	cmp	r3, #32
 8004570:	d0f1      	beq.n	8004556 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	00030d40 	.word	0x00030d40

08004584 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2210      	movs	r2, #16
 8004594:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3301      	adds	r3, #1
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	4a08      	ldr	r2, [pc, #32]	; (80045c0 <USB_FlushRxFifo+0x3c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d901      	bls.n	80045a6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e006      	b.n	80045b4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0310 	and.w	r3, r3, #16
 80045ae:	2b10      	cmp	r3, #16
 80045b0:	d0f1      	beq.n	8004596 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	00030d40 	.word	0x00030d40

080045c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	68f9      	ldr	r1, [r7, #12]
 80045e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045e4:	4313      	orrs	r3, r2
 80045e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b085      	sub	sp, #20
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004610:	f023 0303 	bic.w	r3, r3, #3
 8004614:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004624:	f043 0302 	orr.w	r3, r3, #2
 8004628:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	f003 0301 	and.w	r3, r3, #1
}
 8004648:	4618      	mov	r0, r3
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	3301      	adds	r3, #1
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <USB_CoreReset+0x60>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d901      	bls.n	8004670 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e01a      	b.n	80046a6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691b      	ldr	r3, [r3, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	daf3      	bge.n	8004660 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	f043 0201 	orr.w	r2, r3, #1
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3301      	adds	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	4a09      	ldr	r2, [pc, #36]	; (80046b4 <USB_CoreReset+0x60>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d901      	bls.n	8004698 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e006      	b.n	80046a6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f003 0301 	and.w	r3, r3, #1
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d0f1      	beq.n	8004688 <USB_CoreReset+0x34>

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	00030d40 	.word	0x00030d40

080046b8 <__NVIC_SetPriority>:
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	6039      	str	r1, [r7, #0]
 80046c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	db0a      	blt.n	80046e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	490c      	ldr	r1, [pc, #48]	; (8004704 <__NVIC_SetPriority+0x4c>)
 80046d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d6:	0112      	lsls	r2, r2, #4
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	440b      	add	r3, r1
 80046dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80046e0:	e00a      	b.n	80046f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	4908      	ldr	r1, [pc, #32]	; (8004708 <__NVIC_SetPriority+0x50>)
 80046e8:	79fb      	ldrb	r3, [r7, #7]
 80046ea:	f003 030f 	and.w	r3, r3, #15
 80046ee:	3b04      	subs	r3, #4
 80046f0:	0112      	lsls	r2, r2, #4
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	440b      	add	r3, r1
 80046f6:	761a      	strb	r2, [r3, #24]
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	e000e100 	.word	0xe000e100
 8004708:	e000ed00 	.word	0xe000ed00

0800470c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004710:	4b05      	ldr	r3, [pc, #20]	; (8004728 <SysTick_Handler+0x1c>)
 8004712:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004714:	f001 fe48 	bl	80063a8 <xTaskGetSchedulerState>
 8004718:	4603      	mov	r3, r0
 800471a:	2b01      	cmp	r3, #1
 800471c:	d001      	beq.n	8004722 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800471e:	f002 fc33 	bl	8006f88 <xPortSysTickHandler>
  }
}
 8004722:	bf00      	nop
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	e000e010 	.word	0xe000e010

0800472c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004730:	2100      	movs	r1, #0
 8004732:	f06f 0004 	mvn.w	r0, #4
 8004736:	f7ff ffbf 	bl	80046b8 <__NVIC_SetPriority>
#endif
}
 800473a:	bf00      	nop
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004746:	f3ef 8305 	mrs	r3, IPSR
 800474a:	603b      	str	r3, [r7, #0]
  return(result);
 800474c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004752:	f06f 0305 	mvn.w	r3, #5
 8004756:	607b      	str	r3, [r7, #4]
 8004758:	e00c      	b.n	8004774 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800475a:	4b0a      	ldr	r3, [pc, #40]	; (8004784 <osKernelInitialize+0x44>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d105      	bne.n	800476e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004762:	4b08      	ldr	r3, [pc, #32]	; (8004784 <osKernelInitialize+0x44>)
 8004764:	2201      	movs	r2, #1
 8004766:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004768:	2300      	movs	r3, #0
 800476a:	607b      	str	r3, [r7, #4]
 800476c:	e002      	b.n	8004774 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800476e:	f04f 33ff 	mov.w	r3, #4294967295
 8004772:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004774:	687b      	ldr	r3, [r7, #4]
}
 8004776:	4618      	mov	r0, r3
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
 8004782:	bf00      	nop
 8004784:	20000098 	.word	0x20000098

08004788 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800478e:	f3ef 8305 	mrs	r3, IPSR
 8004792:	603b      	str	r3, [r7, #0]
  return(result);
 8004794:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800479a:	f06f 0305 	mvn.w	r3, #5
 800479e:	607b      	str	r3, [r7, #4]
 80047a0:	e010      	b.n	80047c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80047a2:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <osKernelStart+0x48>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d109      	bne.n	80047be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80047aa:	f7ff ffbf 	bl	800472c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80047ae:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <osKernelStart+0x48>)
 80047b0:	2202      	movs	r2, #2
 80047b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80047b4:	f001 f98c 	bl	8005ad0 <vTaskStartScheduler>
      stat = osOK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	607b      	str	r3, [r7, #4]
 80047bc:	e002      	b.n	80047c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80047be:	f04f 33ff 	mov.w	r3, #4294967295
 80047c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80047c4:	687b      	ldr	r3, [r7, #4]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000098 	.word	0x20000098

080047d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b08e      	sub	sp, #56	; 0x38
 80047d8:	af04      	add	r7, sp, #16
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047e4:	f3ef 8305 	mrs	r3, IPSR
 80047e8:	617b      	str	r3, [r7, #20]
  return(result);
 80047ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d17e      	bne.n	80048ee <osThreadNew+0x11a>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d07b      	beq.n	80048ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80047f6:	2380      	movs	r3, #128	; 0x80
 80047f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80047fa:	2318      	movs	r3, #24
 80047fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80047fe:	2300      	movs	r3, #0
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004802:	f04f 33ff 	mov.w	r3, #4294967295
 8004806:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d045      	beq.n	800489a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <osThreadNew+0x48>
        name = attr->name;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d008      	beq.n	8004842 <osThreadNew+0x6e>
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	2b38      	cmp	r3, #56	; 0x38
 8004834:	d805      	bhi.n	8004842 <osThreadNew+0x6e>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <osThreadNew+0x72>
        return (NULL);
 8004842:	2300      	movs	r3, #0
 8004844:	e054      	b.n	80048f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00e      	beq.n	800487c <osThreadNew+0xa8>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	2bbb      	cmp	r3, #187	; 0xbb
 8004864:	d90a      	bls.n	800487c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800486a:	2b00      	cmp	r3, #0
 800486c:	d006      	beq.n	800487c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <osThreadNew+0xa8>
        mem = 1;
 8004876:	2301      	movs	r3, #1
 8004878:	61bb      	str	r3, [r7, #24]
 800487a:	e010      	b.n	800489e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10c      	bne.n	800489e <osThreadNew+0xca>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d108      	bne.n	800489e <osThreadNew+0xca>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	691b      	ldr	r3, [r3, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d104      	bne.n	800489e <osThreadNew+0xca>
          mem = 0;
 8004894:	2300      	movs	r3, #0
 8004896:	61bb      	str	r3, [r7, #24]
 8004898:	e001      	b.n	800489e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800489a:	2300      	movs	r3, #0
 800489c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800489e:	69bb      	ldr	r3, [r7, #24]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d110      	bne.n	80048c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80048ac:	9202      	str	r2, [sp, #8]
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	6a3a      	ldr	r2, [r7, #32]
 80048b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 fe44 	bl	8005548 <xTaskCreateStatic>
 80048c0:	4603      	mov	r3, r0
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	e013      	b.n	80048ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d110      	bne.n	80048ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	f107 0310 	add.w	r3, r7, #16
 80048d4:	9301      	str	r3, [sp, #4]
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	9300      	str	r3, [sp, #0]
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f000 fe8f 	bl	8005602 <xTaskCreate>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d001      	beq.n	80048ee <osThreadNew+0x11a>
            hTask = NULL;
 80048ea:	2300      	movs	r3, #0
 80048ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80048ee:	693b      	ldr	r3, [r7, #16]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3728      	adds	r7, #40	; 0x28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80048fe:	f001 fd43 	bl	8006388 <xTaskGetCurrentTaskHandle>
 8004902:	6078      	str	r0, [r7, #4]

  return (id);
 8004904:	687b      	ldr	r3, [r7, #4]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800490e:	b580      	push	{r7, lr}
 8004910:	b086      	sub	sp, #24
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800491a:	f3ef 8305 	mrs	r3, IPSR
 800491e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004920:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <osThreadTerminate+0x20>
    stat = osErrorISR;
 8004926:	f06f 0305 	mvn.w	r3, #5
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	e017      	b.n	800495e <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d103      	bne.n	800493c <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8004934:	f06f 0303 	mvn.w	r3, #3
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	e010      	b.n	800495e <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800493c:	6938      	ldr	r0, [r7, #16]
 800493e:	f001 f861 	bl	8005a04 <eTaskGetState>
 8004942:	4603      	mov	r3, r0
 8004944:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	2b04      	cmp	r3, #4
 800494a:	d005      	beq.n	8004958 <osThreadTerminate+0x4a>
      stat = osOK;
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8004950:	6938      	ldr	r0, [r7, #16]
 8004952:	f000 ffb1 	bl	80058b8 <vTaskDelete>
 8004956:	e002      	b.n	800495e <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8004958:	f06f 0302 	mvn.w	r3, #2
 800495c:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800495e:	697b      	ldr	r3, [r7, #20]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3718      	adds	r7, #24
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}

08004968 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004970:	f3ef 8305 	mrs	r3, IPSR
 8004974:	60bb      	str	r3, [r7, #8]
  return(result);
 8004976:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <osDelay+0x1c>
    stat = osErrorISR;
 800497c:	f06f 0305 	mvn.w	r3, #5
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	e007      	b.n	8004994 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <osDelay+0x2c>
      vTaskDelay(ticks);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f001 f804 	bl	800599c <vTaskDelay>
    }
  }

  return (stat);
 8004994:	68fb      	ldr	r3, [r7, #12]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4a07      	ldr	r2, [pc, #28]	; (80049cc <vApplicationGetIdleTaskMemory+0x2c>)
 80049b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	4a06      	ldr	r2, [pc, #24]	; (80049d0 <vApplicationGetIdleTaskMemory+0x30>)
 80049b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2280      	movs	r2, #128	; 0x80
 80049bc:	601a      	str	r2, [r3, #0]
}
 80049be:	bf00      	nop
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	2000009c 	.word	0x2000009c
 80049d0:	20000158 	.word	0x20000158

080049d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4a07      	ldr	r2, [pc, #28]	; (8004a00 <vApplicationGetTimerTaskMemory+0x2c>)
 80049e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	4a06      	ldr	r2, [pc, #24]	; (8004a04 <vApplicationGetTimerTaskMemory+0x30>)
 80049ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049f2:	601a      	str	r2, [r3, #0]
}
 80049f4:	bf00      	nop
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	20000358 	.word	0x20000358
 8004a04:	20000414 	.word	0x20000414

08004a08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f103 0208 	add.w	r2, r3, #8
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f103 0208 	add.w	r2, r3, #8
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f103 0208 	add.w	r2, r3, #8
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a62:	b480      	push	{r7}
 8004a64:	b085      	sub	sp, #20
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	683a      	ldr	r2, [r7, #0]
 8004a8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	1c5a      	adds	r2, r3, #1
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	601a      	str	r2, [r3, #0]
}
 8004a9e:	bf00      	nop
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b085      	sub	sp, #20
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac0:	d103      	bne.n	8004aca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	e00c      	b.n	8004ae4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3308      	adds	r3, #8
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	e002      	b.n	8004ad8 <vListInsert+0x2e>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d2f6      	bcs.n	8004ad2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	683a      	ldr	r2, [r7, #0]
 8004af2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	601a      	str	r2, [r3, #0]
}
 8004b10:	bf00      	nop
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6892      	ldr	r2, [r2, #8]
 8004b32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6852      	ldr	r2, [r2, #4]
 8004b3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d103      	bne.n	8004b50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	1e5a      	subs	r2, r3, #1
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10a      	bne.n	8004b9a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b96:	bf00      	nop
 8004b98:	e7fe      	b.n	8004b98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004b9a:	f002 f963 	bl	8006e64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba6:	68f9      	ldr	r1, [r7, #12]
 8004ba8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004baa:	fb01 f303 	mul.w	r3, r1, r3
 8004bae:	441a      	add	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	68f9      	ldr	r1, [r7, #12]
 8004bce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bd0:	fb01 f303 	mul.w	r3, r1, r3
 8004bd4:	441a      	add	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	22ff      	movs	r2, #255	; 0xff
 8004bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	22ff      	movs	r2, #255	; 0xff
 8004be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d114      	bne.n	8004c1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d01a      	beq.n	8004c2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3310      	adds	r3, #16
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f001 fa01 	bl	8006004 <xTaskRemoveFromEventList>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d012      	beq.n	8004c2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c08:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <xQueueGenericReset+0xcc>)
 8004c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	e009      	b.n	8004c2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3310      	adds	r3, #16
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff fef2 	bl	8004a08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3324      	adds	r3, #36	; 0x24
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff feed 	bl	8004a08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c2e:	f002 f949 	bl	8006ec4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c32:	2301      	movs	r3, #1
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	e000ed04 	.word	0xe000ed04

08004c40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b08e      	sub	sp, #56	; 0x38
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10a      	bne.n	8004c6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c66:	bf00      	nop
 8004c68:	e7fe      	b.n	8004c68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10a      	bne.n	8004c86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c82:	bf00      	nop
 8004c84:	e7fe      	b.n	8004c84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <xQueueGenericCreateStatic+0x52>
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <xQueueGenericCreateStatic+0x56>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <xQueueGenericCreateStatic+0x58>
 8004c96:	2300      	movs	r3, #0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10a      	bne.n	8004cb2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	623b      	str	r3, [r7, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	e7fe      	b.n	8004cb0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d102      	bne.n	8004cbe <xQueueGenericCreateStatic+0x7e>
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <xQueueGenericCreateStatic+0x82>
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e000      	b.n	8004cc4 <xQueueGenericCreateStatic+0x84>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10a      	bne.n	8004cde <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	61fb      	str	r3, [r7, #28]
}
 8004cda:	bf00      	nop
 8004cdc:	e7fe      	b.n	8004cdc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004cde:	2350      	movs	r3, #80	; 0x50
 8004ce0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2b50      	cmp	r3, #80	; 0x50
 8004ce6:	d00a      	beq.n	8004cfe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	61bb      	str	r3, [r7, #24]
}
 8004cfa:	bf00      	nop
 8004cfc:	e7fe      	b.n	8004cfc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004cfe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00d      	beq.n	8004d26 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 f805 	bl	8004d30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3730      	adds	r7, #48	; 0x30
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d103      	bne.n	8004d4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	601a      	str	r2, [r3, #0]
 8004d4a:	e002      	b.n	8004d52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d5e:	2101      	movs	r1, #1
 8004d60:	69b8      	ldr	r0, [r7, #24]
 8004d62:	f7ff ff05 	bl	8004b70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	78fa      	ldrb	r2, [r7, #3]
 8004d6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004d6e:	bf00      	nop
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08e      	sub	sp, #56	; 0x38
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d86:	2300      	movs	r3, #0
 8004d88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10a      	bne.n	8004daa <xQueueGenericSend+0x32>
	__asm volatile
 8004d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d98:	f383 8811 	msr	BASEPRI, r3
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004da6:	bf00      	nop
 8004da8:	e7fe      	b.n	8004da8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d103      	bne.n	8004db8 <xQueueGenericSend+0x40>
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <xQueueGenericSend+0x44>
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <xQueueGenericSend+0x46>
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10a      	bne.n	8004dd8 <xQueueGenericSend+0x60>
	__asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004dd4:	bf00      	nop
 8004dd6:	e7fe      	b.n	8004dd6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d103      	bne.n	8004de6 <xQueueGenericSend+0x6e>
 8004dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d101      	bne.n	8004dea <xQueueGenericSend+0x72>
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <xQueueGenericSend+0x74>
 8004dea:	2300      	movs	r3, #0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10a      	bne.n	8004e06 <xQueueGenericSend+0x8e>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	623b      	str	r3, [r7, #32]
}
 8004e02:	bf00      	nop
 8004e04:	e7fe      	b.n	8004e04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e06:	f001 facf 	bl	80063a8 <xTaskGetSchedulerState>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d102      	bne.n	8004e16 <xQueueGenericSend+0x9e>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <xQueueGenericSend+0xa2>
 8004e16:	2301      	movs	r3, #1
 8004e18:	e000      	b.n	8004e1c <xQueueGenericSend+0xa4>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10a      	bne.n	8004e36 <xQueueGenericSend+0xbe>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	61fb      	str	r3, [r7, #28]
}
 8004e32:	bf00      	nop
 8004e34:	e7fe      	b.n	8004e34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e36:	f002 f815 	bl	8006e64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d302      	bcc.n	8004e4c <xQueueGenericSend+0xd4>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d129      	bne.n	8004ea0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	68b9      	ldr	r1, [r7, #8]
 8004e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e52:	f000 fa0b 	bl	800526c <prvCopyDataToQueue>
 8004e56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d010      	beq.n	8004e82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e62:	3324      	adds	r3, #36	; 0x24
 8004e64:	4618      	mov	r0, r3
 8004e66:	f001 f8cd 	bl	8006004 <xTaskRemoveFromEventList>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d013      	beq.n	8004e98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e70:	4b3f      	ldr	r3, [pc, #252]	; (8004f70 <xQueueGenericSend+0x1f8>)
 8004e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	e00a      	b.n	8004e98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d007      	beq.n	8004e98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e88:	4b39      	ldr	r3, [pc, #228]	; (8004f70 <xQueueGenericSend+0x1f8>)
 8004e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e98:	f002 f814 	bl	8006ec4 <vPortExitCritical>
				return pdPASS;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e063      	b.n	8004f68 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d103      	bne.n	8004eae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ea6:	f002 f80d 	bl	8006ec4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e05c      	b.n	8004f68 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d106      	bne.n	8004ec2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004eb4:	f107 0314 	add.w	r3, r7, #20
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f001 f907 	bl	80060cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ec2:	f001 ffff 	bl	8006ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ec6:	f000 fe73 	bl	8005bb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004eca:	f001 ffcb 	bl	8006e64 <vPortEnterCritical>
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ed4:	b25b      	sxtb	r3, r3
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eda:	d103      	bne.n	8004ee4 <xQueueGenericSend+0x16c>
 8004edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eea:	b25b      	sxtb	r3, r3
 8004eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef0:	d103      	bne.n	8004efa <xQueueGenericSend+0x182>
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004efa:	f001 ffe3 	bl	8006ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004efe:	1d3a      	adds	r2, r7, #4
 8004f00:	f107 0314 	add.w	r3, r7, #20
 8004f04:	4611      	mov	r1, r2
 8004f06:	4618      	mov	r0, r3
 8004f08:	f001 f8f6 	bl	80060f8 <xTaskCheckForTimeOut>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d124      	bne.n	8004f5c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f14:	f000 faa2 	bl	800545c <prvIsQueueFull>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d018      	beq.n	8004f50 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f20:	3310      	adds	r3, #16
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	4611      	mov	r1, r2
 8004f26:	4618      	mov	r0, r3
 8004f28:	f001 f81c 	bl	8005f64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f2e:	f000 fa2d 	bl	800538c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f32:	f000 fe4b 	bl	8005bcc <xTaskResumeAll>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f47f af7c 	bne.w	8004e36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004f3e:	4b0c      	ldr	r3, [pc, #48]	; (8004f70 <xQueueGenericSend+0x1f8>)
 8004f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	e772      	b.n	8004e36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f52:	f000 fa1b 	bl	800538c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f56:	f000 fe39 	bl	8005bcc <xTaskResumeAll>
 8004f5a:	e76c      	b.n	8004e36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f5e:	f000 fa15 	bl	800538c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f62:	f000 fe33 	bl	8005bcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f66:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3738      	adds	r7, #56	; 0x38
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	e000ed04 	.word	0xe000ed04

08004f74 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b090      	sub	sp, #64	; 0x40
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
 8004f80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d103      	bne.n	8004fb0 <xQueueGenericSendFromISR+0x3c>
 8004fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <xQueueGenericSendFromISR+0x40>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <xQueueGenericSendFromISR+0x42>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10a      	bne.n	8004fd0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004fcc:	bf00      	nop
 8004fce:	e7fe      	b.n	8004fce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d103      	bne.n	8004fde <xQueueGenericSendFromISR+0x6a>
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d101      	bne.n	8004fe2 <xQueueGenericSendFromISR+0x6e>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e000      	b.n	8004fe4 <xQueueGenericSendFromISR+0x70>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10a      	bne.n	8004ffe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fec:	f383 8811 	msr	BASEPRI, r3
 8004ff0:	f3bf 8f6f 	isb	sy
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	623b      	str	r3, [r7, #32]
}
 8004ffa:	bf00      	nop
 8004ffc:	e7fe      	b.n	8004ffc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ffe:	f002 f813 	bl	8007028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005002:	f3ef 8211 	mrs	r2, BASEPRI
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	61fa      	str	r2, [r7, #28]
 8005018:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800501a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800501c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800501e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005020:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005026:	429a      	cmp	r2, r3
 8005028:	d302      	bcc.n	8005030 <xQueueGenericSendFromISR+0xbc>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b02      	cmp	r3, #2
 800502e:	d12f      	bne.n	8005090 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005046:	f000 f911 	bl	800526c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800504a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800504e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005052:	d112      	bne.n	800507a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	2b00      	cmp	r3, #0
 800505a:	d016      	beq.n	800508a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800505c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505e:	3324      	adds	r3, #36	; 0x24
 8005060:	4618      	mov	r0, r3
 8005062:	f000 ffcf 	bl	8006004 <xTaskRemoveFromEventList>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00e      	beq.n	800508a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00b      	beq.n	800508a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	e007      	b.n	800508a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800507a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800507e:	3301      	adds	r3, #1
 8005080:	b2db      	uxtb	r3, r3
 8005082:	b25a      	sxtb	r2, r3
 8005084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800508a:	2301      	movs	r3, #1
 800508c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800508e:	e001      	b.n	8005094 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005090:	2300      	movs	r3, #0
 8005092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005096:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800509e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3740      	adds	r7, #64	; 0x40
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
	...

080050ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08c      	sub	sp, #48	; 0x30
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80050b8:	2300      	movs	r3, #0
 80050ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80050c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10a      	bne.n	80050dc <xQueueReceive+0x30>
	__asm volatile
 80050c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	623b      	str	r3, [r7, #32]
}
 80050d8:	bf00      	nop
 80050da:	e7fe      	b.n	80050da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d103      	bne.n	80050ea <xQueueReceive+0x3e>
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <xQueueReceive+0x42>
 80050ea:	2301      	movs	r3, #1
 80050ec:	e000      	b.n	80050f0 <xQueueReceive+0x44>
 80050ee:	2300      	movs	r3, #0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10a      	bne.n	800510a <xQueueReceive+0x5e>
	__asm volatile
 80050f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	61fb      	str	r3, [r7, #28]
}
 8005106:	bf00      	nop
 8005108:	e7fe      	b.n	8005108 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800510a:	f001 f94d 	bl	80063a8 <xTaskGetSchedulerState>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d102      	bne.n	800511a <xQueueReceive+0x6e>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <xQueueReceive+0x72>
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <xQueueReceive+0x74>
 800511e:	2300      	movs	r3, #0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <xQueueReceive+0x8e>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	61bb      	str	r3, [r7, #24]
}
 8005136:	bf00      	nop
 8005138:	e7fe      	b.n	8005138 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800513a:	f001 fe93 	bl	8006e64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005142:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	2b00      	cmp	r3, #0
 8005148:	d01f      	beq.n	800518a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800514a:	68b9      	ldr	r1, [r7, #8]
 800514c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800514e:	f000 f8f7 	bl	8005340 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	1e5a      	subs	r2, r3, #1
 8005156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005158:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00f      	beq.n	8005182 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005164:	3310      	adds	r3, #16
 8005166:	4618      	mov	r0, r3
 8005168:	f000 ff4c 	bl	8006004 <xTaskRemoveFromEventList>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d007      	beq.n	8005182 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005172:	4b3d      	ldr	r3, [pc, #244]	; (8005268 <xQueueReceive+0x1bc>)
 8005174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005178:	601a      	str	r2, [r3, #0]
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005182:	f001 fe9f 	bl	8006ec4 <vPortExitCritical>
				return pdPASS;
 8005186:	2301      	movs	r3, #1
 8005188:	e069      	b.n	800525e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d103      	bne.n	8005198 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005190:	f001 fe98 	bl	8006ec4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005194:	2300      	movs	r3, #0
 8005196:	e062      	b.n	800525e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800519e:	f107 0310 	add.w	r3, r7, #16
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 ff92 	bl	80060cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051a8:	2301      	movs	r3, #1
 80051aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051ac:	f001 fe8a 	bl	8006ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051b0:	f000 fcfe 	bl	8005bb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051b4:	f001 fe56 	bl	8006e64 <vPortEnterCritical>
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051be:	b25b      	sxtb	r3, r3
 80051c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c4:	d103      	bne.n	80051ce <xQueueReceive+0x122>
 80051c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051d4:	b25b      	sxtb	r3, r3
 80051d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051da:	d103      	bne.n	80051e4 <xQueueReceive+0x138>
 80051dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051e4:	f001 fe6e 	bl	8006ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80051e8:	1d3a      	adds	r2, r7, #4
 80051ea:	f107 0310 	add.w	r3, r7, #16
 80051ee:	4611      	mov	r1, r2
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 ff81 	bl	80060f8 <xTaskCheckForTimeOut>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d123      	bne.n	8005244 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051fe:	f000 f917 	bl	8005430 <prvIsQueueEmpty>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d017      	beq.n	8005238 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520a:	3324      	adds	r3, #36	; 0x24
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	4611      	mov	r1, r2
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fea7 	bl	8005f64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005218:	f000 f8b8 	bl	800538c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800521c:	f000 fcd6 	bl	8005bcc <xTaskResumeAll>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d189      	bne.n	800513a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005226:	4b10      	ldr	r3, [pc, #64]	; (8005268 <xQueueReceive+0x1bc>)
 8005228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	e780      	b.n	800513a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800523a:	f000 f8a7 	bl	800538c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800523e:	f000 fcc5 	bl	8005bcc <xTaskResumeAll>
 8005242:	e77a      	b.n	800513a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005246:	f000 f8a1 	bl	800538c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800524a:	f000 fcbf 	bl	8005bcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800524e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005250:	f000 f8ee 	bl	8005430 <prvIsQueueEmpty>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	f43f af6f 	beq.w	800513a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800525c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800525e:	4618      	mov	r0, r3
 8005260:	3730      	adds	r7, #48	; 0x30
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005278:	2300      	movs	r3, #0
 800527a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10d      	bne.n	80052a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d14d      	bne.n	800532e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	4618      	mov	r0, r3
 8005298:	f001 f8a4 	bl	80063e4 <xTaskPriorityDisinherit>
 800529c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	609a      	str	r2, [r3, #8]
 80052a4:	e043      	b.n	800532e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d119      	bne.n	80052e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6858      	ldr	r0, [r3, #4]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b4:	461a      	mov	r2, r3
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	f002 f90c 	bl	80074d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c4:	441a      	add	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d32b      	bcc.n	800532e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	605a      	str	r2, [r3, #4]
 80052de:	e026      	b.n	800532e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	68d8      	ldr	r0, [r3, #12]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e8:	461a      	mov	r2, r3
 80052ea:	68b9      	ldr	r1, [r7, #8]
 80052ec:	f002 f8f2 	bl	80074d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f8:	425b      	negs	r3, r3
 80052fa:	441a      	add	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	68da      	ldr	r2, [r3, #12]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d207      	bcs.n	800531c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	689a      	ldr	r2, [r3, #8]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	425b      	negs	r3, r3
 8005316:	441a      	add	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b02      	cmp	r3, #2
 8005320:	d105      	bne.n	800532e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	3b01      	subs	r3, #1
 800532c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005336:	697b      	ldr	r3, [r7, #20]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	2b00      	cmp	r3, #0
 8005350:	d018      	beq.n	8005384 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	441a      	add	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	429a      	cmp	r2, r3
 800536a:	d303      	bcc.n	8005374 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68d9      	ldr	r1, [r3, #12]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537c:	461a      	mov	r2, r3
 800537e:	6838      	ldr	r0, [r7, #0]
 8005380:	f002 f8a8 	bl	80074d4 <memcpy>
	}
}
 8005384:	bf00      	nop
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005394:	f001 fd66 	bl	8006e64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800539e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053a0:	e011      	b.n	80053c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d012      	beq.n	80053d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3324      	adds	r3, #36	; 0x24
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 fe28 	bl	8006004 <xTaskRemoveFromEventList>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d001      	beq.n	80053be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80053ba:	f000 feff 	bl	80061bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80053be:	7bfb      	ldrb	r3, [r7, #15]
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	dce9      	bgt.n	80053a2 <prvUnlockQueue+0x16>
 80053ce:	e000      	b.n	80053d2 <prvUnlockQueue+0x46>
					break;
 80053d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	22ff      	movs	r2, #255	; 0xff
 80053d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80053da:	f001 fd73 	bl	8006ec4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80053de:	f001 fd41 	bl	8006e64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80053ea:	e011      	b.n	8005410 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d012      	beq.n	800541a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3310      	adds	r3, #16
 80053f8:	4618      	mov	r0, r3
 80053fa:	f000 fe03 	bl	8006004 <xTaskRemoveFromEventList>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005404:	f000 feda 	bl	80061bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005408:	7bbb      	ldrb	r3, [r7, #14]
 800540a:	3b01      	subs	r3, #1
 800540c:	b2db      	uxtb	r3, r3
 800540e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005410:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005414:	2b00      	cmp	r3, #0
 8005416:	dce9      	bgt.n	80053ec <prvUnlockQueue+0x60>
 8005418:	e000      	b.n	800541c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800541a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	22ff      	movs	r2, #255	; 0xff
 8005420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005424:	f001 fd4e 	bl	8006ec4 <vPortExitCritical>
}
 8005428:	bf00      	nop
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005438:	f001 fd14 	bl	8006e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	2b00      	cmp	r3, #0
 8005442:	d102      	bne.n	800544a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005444:	2301      	movs	r3, #1
 8005446:	60fb      	str	r3, [r7, #12]
 8005448:	e001      	b.n	800544e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800544e:	f001 fd39 	bl	8006ec4 <vPortExitCritical>

	return xReturn;
 8005452:	68fb      	ldr	r3, [r7, #12]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005464:	f001 fcfe 	bl	8006e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005470:	429a      	cmp	r2, r3
 8005472:	d102      	bne.n	800547a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005474:	2301      	movs	r3, #1
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	e001      	b.n	800547e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800547a:	2300      	movs	r3, #0
 800547c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800547e:	f001 fd21 	bl	8006ec4 <vPortExitCritical>

	return xReturn;
 8005482:	68fb      	ldr	r3, [r7, #12]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	e014      	b.n	80054c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800549c:	4a0f      	ldr	r2, [pc, #60]	; (80054dc <vQueueAddToRegistry+0x50>)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10b      	bne.n	80054c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80054a8:	490c      	ldr	r1, [pc, #48]	; (80054dc <vQueueAddToRegistry+0x50>)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80054b2:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <vQueueAddToRegistry+0x50>)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	4413      	add	r3, r2
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80054be:	e006      	b.n	80054ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3301      	adds	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b07      	cmp	r3, #7
 80054ca:	d9e7      	bls.n	800549c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80054cc:	bf00      	nop
 80054ce:	bf00      	nop
 80054d0:	3714      	adds	r7, #20
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	20004fa0 	.word	0x20004fa0

080054e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80054f0:	f001 fcb8 	bl	8006e64 <vPortEnterCritical>
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054fa:	b25b      	sxtb	r3, r3
 80054fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005500:	d103      	bne.n	800550a <vQueueWaitForMessageRestricted+0x2a>
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005510:	b25b      	sxtb	r3, r3
 8005512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005516:	d103      	bne.n	8005520 <vQueueWaitForMessageRestricted+0x40>
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005520:	f001 fcd0 	bl	8006ec4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005528:	2b00      	cmp	r3, #0
 800552a:	d106      	bne.n	800553a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	3324      	adds	r3, #36	; 0x24
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	4618      	mov	r0, r3
 8005536:	f000 fd39 	bl	8005fac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800553a:	6978      	ldr	r0, [r7, #20]
 800553c:	f7ff ff26 	bl	800538c <prvUnlockQueue>
	}
 8005540:	bf00      	nop
 8005542:	3718      	adds	r7, #24
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08e      	sub	sp, #56	; 0x38
 800554c:	af04      	add	r7, sp, #16
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
 8005554:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <xTaskCreateStatic+0x2a>
	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	623b      	str	r3, [r7, #32]
}
 800556e:	bf00      	nop
 8005570:	e7fe      	b.n	8005570 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <xTaskCreateStatic+0x46>
	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	61fb      	str	r3, [r7, #28]
}
 800558a:	bf00      	nop
 800558c:	e7fe      	b.n	800558c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800558e:	23bc      	movs	r3, #188	; 0xbc
 8005590:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	2bbc      	cmp	r3, #188	; 0xbc
 8005596:	d00a      	beq.n	80055ae <xTaskCreateStatic+0x66>
	__asm volatile
 8005598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559c:	f383 8811 	msr	BASEPRI, r3
 80055a0:	f3bf 8f6f 	isb	sy
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	61bb      	str	r3, [r7, #24]
}
 80055aa:	bf00      	nop
 80055ac:	e7fe      	b.n	80055ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80055ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80055b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d01e      	beq.n	80055f4 <xTaskCreateStatic+0xac>
 80055b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d01b      	beq.n	80055f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80055bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	2202      	movs	r2, #2
 80055ca:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80055ce:	2300      	movs	r3, #0
 80055d0:	9303      	str	r3, [sp, #12]
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	9302      	str	r3, [sp, #8]
 80055d6:	f107 0314 	add.w	r3, r7, #20
 80055da:	9301      	str	r3, [sp, #4]
 80055dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	68b9      	ldr	r1, [r7, #8]
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 f850 	bl	800568c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055ee:	f000 f8f3 	bl	80057d8 <prvAddNewTaskToReadyList>
 80055f2:	e001      	b.n	80055f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80055f8:	697b      	ldr	r3, [r7, #20]
	}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3728      	adds	r7, #40	; 0x28
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005602:	b580      	push	{r7, lr}
 8005604:	b08c      	sub	sp, #48	; 0x30
 8005606:	af04      	add	r7, sp, #16
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	603b      	str	r3, [r7, #0]
 800560e:	4613      	mov	r3, r2
 8005610:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005612:	88fb      	ldrh	r3, [r7, #6]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4618      	mov	r0, r3
 8005618:	f001 fd46 	bl	80070a8 <pvPortMalloc>
 800561c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00e      	beq.n	8005642 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005624:	20bc      	movs	r0, #188	; 0xbc
 8005626:	f001 fd3f 	bl	80070a8 <pvPortMalloc>
 800562a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	631a      	str	r2, [r3, #48]	; 0x30
 8005638:	e005      	b.n	8005646 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800563a:	6978      	ldr	r0, [r7, #20]
 800563c:	f001 fe00 	bl	8007240 <vPortFree>
 8005640:	e001      	b.n	8005646 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005642:	2300      	movs	r3, #0
 8005644:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d017      	beq.n	800567c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005654:	88fa      	ldrh	r2, [r7, #6]
 8005656:	2300      	movs	r3, #0
 8005658:	9303      	str	r3, [sp, #12]
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	9302      	str	r3, [sp, #8]
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	9301      	str	r3, [sp, #4]
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68b9      	ldr	r1, [r7, #8]
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 f80e 	bl	800568c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005670:	69f8      	ldr	r0, [r7, #28]
 8005672:	f000 f8b1 	bl	80057d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005676:	2301      	movs	r3, #1
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	e002      	b.n	8005682 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800567c:	f04f 33ff 	mov.w	r3, #4294967295
 8005680:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005682:	69bb      	ldr	r3, [r7, #24]
	}
 8005684:	4618      	mov	r0, r3
 8005686:	3720      	adds	r7, #32
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	461a      	mov	r2, r3
 80056a4:	21a5      	movs	r1, #165	; 0xa5
 80056a6:	f001 ff23 	bl	80074f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80056b4:	3b01      	subs	r3, #1
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	f023 0307 	bic.w	r3, r3, #7
 80056c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	f003 0307 	and.w	r3, r3, #7
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	617b      	str	r3, [r7, #20]
}
 80056e0:	bf00      	nop
 80056e2:	e7fe      	b.n	80056e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d01f      	beq.n	800572a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056ea:	2300      	movs	r3, #0
 80056ec:	61fb      	str	r3, [r7, #28]
 80056ee:	e012      	b.n	8005716 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	4413      	add	r3, r2
 80056f6:	7819      	ldrb	r1, [r3, #0]
 80056f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	4413      	add	r3, r2
 80056fe:	3334      	adds	r3, #52	; 0x34
 8005700:	460a      	mov	r2, r1
 8005702:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	4413      	add	r3, r2
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d006      	beq.n	800571e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	3301      	adds	r3, #1
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	2b0f      	cmp	r3, #15
 800571a:	d9e9      	bls.n	80056f0 <prvInitialiseNewTask+0x64>
 800571c:	e000      	b.n	8005720 <prvInitialiseNewTask+0x94>
			{
				break;
 800571e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005728:	e003      	b.n	8005732 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	2b37      	cmp	r3, #55	; 0x37
 8005736:	d901      	bls.n	800573c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005738:	2337      	movs	r3, #55	; 0x37
 800573a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005740:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005746:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	2200      	movs	r2, #0
 800574c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	3304      	adds	r3, #4
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff f978 	bl	8004a48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575a:	3318      	adds	r3, #24
 800575c:	4618      	mov	r0, r3
 800575e:	f7ff f973 	bl	8004a48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005766:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005770:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005776:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577a:	2200      	movs	r2, #0
 800577c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005782:	2200      	movs	r2, #0
 8005784:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578a:	3354      	adds	r3, #84	; 0x54
 800578c:	2260      	movs	r2, #96	; 0x60
 800578e:	2100      	movs	r1, #0
 8005790:	4618      	mov	r0, r3
 8005792:	f001 fead 	bl	80074f0 <memset>
 8005796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005798:	4a0c      	ldr	r2, [pc, #48]	; (80057cc <prvInitialiseNewTask+0x140>)
 800579a:	659a      	str	r2, [r3, #88]	; 0x58
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	4a0c      	ldr	r2, [pc, #48]	; (80057d0 <prvInitialiseNewTask+0x144>)
 80057a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	4a0b      	ldr	r2, [pc, #44]	; (80057d4 <prvInitialiseNewTask+0x148>)
 80057a6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	68f9      	ldr	r1, [r7, #12]
 80057ac:	69b8      	ldr	r0, [r7, #24]
 80057ae:	f001 fa29 	bl	8006c04 <pxPortInitialiseStack>
 80057b2:	4602      	mov	r2, r0
 80057b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80057b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80057be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057c4:	bf00      	nop
 80057c6:	3720      	adds	r7, #32
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	08007f74 	.word	0x08007f74
 80057d0:	08007f94 	.word	0x08007f94
 80057d4:	08007f54 	.word	0x08007f54

080057d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80057e0:	f001 fb40 	bl	8006e64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80057e4:	4b2d      	ldr	r3, [pc, #180]	; (800589c <prvAddNewTaskToReadyList+0xc4>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3301      	adds	r3, #1
 80057ea:	4a2c      	ldr	r2, [pc, #176]	; (800589c <prvAddNewTaskToReadyList+0xc4>)
 80057ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80057ee:	4b2c      	ldr	r3, [pc, #176]	; (80058a0 <prvAddNewTaskToReadyList+0xc8>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d109      	bne.n	800580a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80057f6:	4a2a      	ldr	r2, [pc, #168]	; (80058a0 <prvAddNewTaskToReadyList+0xc8>)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80057fc:	4b27      	ldr	r3, [pc, #156]	; (800589c <prvAddNewTaskToReadyList+0xc4>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d110      	bne.n	8005826 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005804:	f000 fcfe 	bl	8006204 <prvInitialiseTaskLists>
 8005808:	e00d      	b.n	8005826 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800580a:	4b26      	ldr	r3, [pc, #152]	; (80058a4 <prvAddNewTaskToReadyList+0xcc>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d109      	bne.n	8005826 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005812:	4b23      	ldr	r3, [pc, #140]	; (80058a0 <prvAddNewTaskToReadyList+0xc8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	429a      	cmp	r2, r3
 800581e:	d802      	bhi.n	8005826 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005820:	4a1f      	ldr	r2, [pc, #124]	; (80058a0 <prvAddNewTaskToReadyList+0xc8>)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005826:	4b20      	ldr	r3, [pc, #128]	; (80058a8 <prvAddNewTaskToReadyList+0xd0>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3301      	adds	r3, #1
 800582c:	4a1e      	ldr	r2, [pc, #120]	; (80058a8 <prvAddNewTaskToReadyList+0xd0>)
 800582e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005830:	4b1d      	ldr	r3, [pc, #116]	; (80058a8 <prvAddNewTaskToReadyList+0xd0>)
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583c:	4b1b      	ldr	r3, [pc, #108]	; (80058ac <prvAddNewTaskToReadyList+0xd4>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d903      	bls.n	800584c <prvAddNewTaskToReadyList+0x74>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	4a18      	ldr	r2, [pc, #96]	; (80058ac <prvAddNewTaskToReadyList+0xd4>)
 800584a:	6013      	str	r3, [r2, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4a15      	ldr	r2, [pc, #84]	; (80058b0 <prvAddNewTaskToReadyList+0xd8>)
 800585a:	441a      	add	r2, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3304      	adds	r3, #4
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f7ff f8fd 	bl	8004a62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005868:	f001 fb2c 	bl	8006ec4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800586c:	4b0d      	ldr	r3, [pc, #52]	; (80058a4 <prvAddNewTaskToReadyList+0xcc>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00e      	beq.n	8005892 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005874:	4b0a      	ldr	r3, [pc, #40]	; (80058a0 <prvAddNewTaskToReadyList+0xc8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587e:	429a      	cmp	r2, r3
 8005880:	d207      	bcs.n	8005892 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005882:	4b0c      	ldr	r3, [pc, #48]	; (80058b4 <prvAddNewTaskToReadyList+0xdc>)
 8005884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005892:	bf00      	nop
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	20000ce8 	.word	0x20000ce8
 80058a0:	20000814 	.word	0x20000814
 80058a4:	20000cf4 	.word	0x20000cf4
 80058a8:	20000d04 	.word	0x20000d04
 80058ac:	20000cf0 	.word	0x20000cf0
 80058b0:	20000818 	.word	0x20000818
 80058b4:	e000ed04 	.word	0xe000ed04

080058b8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80058c0:	f001 fad0 	bl	8006e64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d102      	bne.n	80058d0 <vTaskDelete+0x18>
 80058ca:	4b2c      	ldr	r3, [pc, #176]	; (800597c <vTaskDelete+0xc4>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	e000      	b.n	80058d2 <vTaskDelete+0x1a>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4618      	mov	r0, r3
 80058da:	f7ff f91f 	bl	8004b1c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d004      	beq.n	80058f0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3318      	adds	r3, #24
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff f916 	bl	8004b1c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80058f0:	4b23      	ldr	r3, [pc, #140]	; (8005980 <vTaskDelete+0xc8>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3301      	adds	r3, #1
 80058f6:	4a22      	ldr	r2, [pc, #136]	; (8005980 <vTaskDelete+0xc8>)
 80058f8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80058fa:	4b20      	ldr	r3, [pc, #128]	; (800597c <vTaskDelete+0xc4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	429a      	cmp	r2, r3
 8005902:	d10b      	bne.n	800591c <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3304      	adds	r3, #4
 8005908:	4619      	mov	r1, r3
 800590a:	481e      	ldr	r0, [pc, #120]	; (8005984 <vTaskDelete+0xcc>)
 800590c:	f7ff f8a9 	bl	8004a62 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005910:	4b1d      	ldr	r3, [pc, #116]	; (8005988 <vTaskDelete+0xd0>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3301      	adds	r3, #1
 8005916:	4a1c      	ldr	r2, [pc, #112]	; (8005988 <vTaskDelete+0xd0>)
 8005918:	6013      	str	r3, [r2, #0]
 800591a:	e009      	b.n	8005930 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800591c:	4b1b      	ldr	r3, [pc, #108]	; (800598c <vTaskDelete+0xd4>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	3b01      	subs	r3, #1
 8005922:	4a1a      	ldr	r2, [pc, #104]	; (800598c <vTaskDelete+0xd4>)
 8005924:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 fcda 	bl	80062e0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800592c:	f000 fd0c 	bl	8006348 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8005930:	f001 fac8 	bl	8006ec4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005934:	4b16      	ldr	r3, [pc, #88]	; (8005990 <vTaskDelete+0xd8>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d01b      	beq.n	8005974 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800593c:	4b0f      	ldr	r3, [pc, #60]	; (800597c <vTaskDelete+0xc4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	429a      	cmp	r2, r3
 8005944:	d116      	bne.n	8005974 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005946:	4b13      	ldr	r3, [pc, #76]	; (8005994 <vTaskDelete+0xdc>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <vTaskDelete+0xac>
	__asm volatile
 800594e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005952:	f383 8811 	msr	BASEPRI, r3
 8005956:	f3bf 8f6f 	isb	sy
 800595a:	f3bf 8f4f 	dsb	sy
 800595e:	60bb      	str	r3, [r7, #8]
}
 8005960:	bf00      	nop
 8005962:	e7fe      	b.n	8005962 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8005964:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <vTaskDelete+0xe0>)
 8005966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005974:	bf00      	nop
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20000814 	.word	0x20000814
 8005980:	20000d04 	.word	0x20000d04
 8005984:	20000cbc 	.word	0x20000cbc
 8005988:	20000cd0 	.word	0x20000cd0
 800598c:	20000ce8 	.word	0x20000ce8
 8005990:	20000cf4 	.word	0x20000cf4
 8005994:	20000d10 	.word	0x20000d10
 8005998:	e000ed04 	.word	0xe000ed04

0800599c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059a4:	2300      	movs	r3, #0
 80059a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d017      	beq.n	80059de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80059ae:	4b13      	ldr	r3, [pc, #76]	; (80059fc <vTaskDelay+0x60>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00a      	beq.n	80059cc <vTaskDelay+0x30>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	60bb      	str	r3, [r7, #8]
}
 80059c8:	bf00      	nop
 80059ca:	e7fe      	b.n	80059ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80059cc:	f000 f8f0 	bl	8005bb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80059d0:	2100      	movs	r1, #0
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fd74 	bl	80064c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059d8:	f000 f8f8 	bl	8005bcc <xTaskResumeAll>
 80059dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d107      	bne.n	80059f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80059e4:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <vTaskDelay+0x64>)
 80059e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059f4:	bf00      	nop
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	20000d10 	.word	0x20000d10
 8005a00:	e000ed04 	.word	0xe000ed04

08005a04 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10a      	bne.n	8005a2c <eTaskGetState+0x28>
	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	60bb      	str	r3, [r7, #8]
}
 8005a28:	bf00      	nop
 8005a2a:	e7fe      	b.n	8005a2a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8005a2c:	4b23      	ldr	r3, [pc, #140]	; (8005abc <eTaskGetState+0xb8>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d102      	bne.n	8005a3c <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8005a36:	2300      	movs	r3, #0
 8005a38:	77fb      	strb	r3, [r7, #31]
 8005a3a:	e03a      	b.n	8005ab2 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8005a3c:	f001 fa12 	bl	8006e64 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8005a46:	4b1e      	ldr	r3, [pc, #120]	; (8005ac0 <eTaskGetState+0xbc>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8005a4c:	4b1d      	ldr	r3, [pc, #116]	; (8005ac4 <eTaskGetState+0xc0>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8005a52:	f001 fa37 	bl	8006ec4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8005a56:	697a      	ldr	r2, [r7, #20]
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d003      	beq.n	8005a66 <eTaskGetState+0x62>
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d102      	bne.n	8005a6c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8005a66:	2302      	movs	r3, #2
 8005a68:	77fb      	strb	r3, [r7, #31]
 8005a6a:	e022      	b.n	8005ab2 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	4a16      	ldr	r2, [pc, #88]	; (8005ac8 <eTaskGetState+0xc4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d112      	bne.n	8005a9a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10b      	bne.n	8005a94 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d102      	bne.n	8005a8e <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8005a88:	2302      	movs	r3, #2
 8005a8a:	77fb      	strb	r3, [r7, #31]
 8005a8c:	e011      	b.n	8005ab2 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	77fb      	strb	r3, [r7, #31]
 8005a92:	e00e      	b.n	8005ab2 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8005a94:	2302      	movs	r3, #2
 8005a96:	77fb      	strb	r3, [r7, #31]
 8005a98:	e00b      	b.n	8005ab2 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	4a0b      	ldr	r2, [pc, #44]	; (8005acc <eTaskGetState+0xc8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d002      	beq.n	8005aa8 <eTaskGetState+0xa4>
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d102      	bne.n	8005aae <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8005aa8:	2304      	movs	r3, #4
 8005aaa:	77fb      	strb	r3, [r7, #31]
 8005aac:	e001      	b.n	8005ab2 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8005ab2:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3720      	adds	r7, #32
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20000814 	.word	0x20000814
 8005ac0:	20000ca0 	.word	0x20000ca0
 8005ac4:	20000ca4 	.word	0x20000ca4
 8005ac8:	20000cd4 	.word	0x20000cd4
 8005acc:	20000cbc 	.word	0x20000cbc

08005ad0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08a      	sub	sp, #40	; 0x28
 8005ad4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ade:	463a      	mov	r2, r7
 8005ae0:	1d39      	adds	r1, r7, #4
 8005ae2:	f107 0308 	add.w	r3, r7, #8
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fe ff5a 	bl	80049a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	9202      	str	r2, [sp, #8]
 8005af4:	9301      	str	r3, [sp, #4]
 8005af6:	2300      	movs	r3, #0
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	2300      	movs	r3, #0
 8005afc:	460a      	mov	r2, r1
 8005afe:	4924      	ldr	r1, [pc, #144]	; (8005b90 <vTaskStartScheduler+0xc0>)
 8005b00:	4824      	ldr	r0, [pc, #144]	; (8005b94 <vTaskStartScheduler+0xc4>)
 8005b02:	f7ff fd21 	bl	8005548 <xTaskCreateStatic>
 8005b06:	4603      	mov	r3, r0
 8005b08:	4a23      	ldr	r2, [pc, #140]	; (8005b98 <vTaskStartScheduler+0xc8>)
 8005b0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b0c:	4b22      	ldr	r3, [pc, #136]	; (8005b98 <vTaskStartScheduler+0xc8>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b14:	2301      	movs	r3, #1
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	e001      	b.n	8005b1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d102      	bne.n	8005b2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b24:	f000 fd20 	bl	8006568 <xTimerCreateTimerTask>
 8005b28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d11b      	bne.n	8005b68 <vTaskStartScheduler+0x98>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	613b      	str	r3, [r7, #16]
}
 8005b42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b44:	4b15      	ldr	r3, [pc, #84]	; (8005b9c <vTaskStartScheduler+0xcc>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3354      	adds	r3, #84	; 0x54
 8005b4a:	4a15      	ldr	r2, [pc, #84]	; (8005ba0 <vTaskStartScheduler+0xd0>)
 8005b4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b4e:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <vTaskStartScheduler+0xd4>)
 8005b50:	f04f 32ff 	mov.w	r2, #4294967295
 8005b54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b56:	4b14      	ldr	r3, [pc, #80]	; (8005ba8 <vTaskStartScheduler+0xd8>)
 8005b58:	2201      	movs	r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b5c:	4b13      	ldr	r3, [pc, #76]	; (8005bac <vTaskStartScheduler+0xdc>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b62:	f001 f8dd 	bl	8006d20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b66:	e00e      	b.n	8005b86 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6e:	d10a      	bne.n	8005b86 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	60fb      	str	r3, [r7, #12]
}
 8005b82:	bf00      	nop
 8005b84:	e7fe      	b.n	8005b84 <vTaskStartScheduler+0xb4>
}
 8005b86:	bf00      	nop
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	08007edc 	.word	0x08007edc
 8005b94:	080061d5 	.word	0x080061d5
 8005b98:	20000d0c 	.word	0x20000d0c
 8005b9c:	20000814 	.word	0x20000814
 8005ba0:	20000010 	.word	0x20000010
 8005ba4:	20000d08 	.word	0x20000d08
 8005ba8:	20000cf4 	.word	0x20000cf4
 8005bac:	20000cec 	.word	0x20000cec

08005bb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005bb4:	4b04      	ldr	r3, [pc, #16]	; (8005bc8 <vTaskSuspendAll+0x18>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	4a03      	ldr	r2, [pc, #12]	; (8005bc8 <vTaskSuspendAll+0x18>)
 8005bbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005bbe:	bf00      	nop
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	20000d10 	.word	0x20000d10

08005bcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005bda:	4b42      	ldr	r3, [pc, #264]	; (8005ce4 <xTaskResumeAll+0x118>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10a      	bne.n	8005bf8 <xTaskResumeAll+0x2c>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	603b      	str	r3, [r7, #0]
}
 8005bf4:	bf00      	nop
 8005bf6:	e7fe      	b.n	8005bf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bf8:	f001 f934 	bl	8006e64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bfc:	4b39      	ldr	r3, [pc, #228]	; (8005ce4 <xTaskResumeAll+0x118>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	4a38      	ldr	r2, [pc, #224]	; (8005ce4 <xTaskResumeAll+0x118>)
 8005c04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c06:	4b37      	ldr	r3, [pc, #220]	; (8005ce4 <xTaskResumeAll+0x118>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d162      	bne.n	8005cd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c0e:	4b36      	ldr	r3, [pc, #216]	; (8005ce8 <xTaskResumeAll+0x11c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d05e      	beq.n	8005cd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c16:	e02f      	b.n	8005c78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c18:	4b34      	ldr	r3, [pc, #208]	; (8005cec <xTaskResumeAll+0x120>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3318      	adds	r3, #24
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fe ff79 	bl	8004b1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fe ff74 	bl	8004b1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c38:	4b2d      	ldr	r3, [pc, #180]	; (8005cf0 <xTaskResumeAll+0x124>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d903      	bls.n	8005c48 <xTaskResumeAll+0x7c>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	4a2a      	ldr	r2, [pc, #168]	; (8005cf0 <xTaskResumeAll+0x124>)
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4a27      	ldr	r2, [pc, #156]	; (8005cf4 <xTaskResumeAll+0x128>)
 8005c56:	441a      	add	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4610      	mov	r0, r2
 8005c60:	f7fe feff 	bl	8004a62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c68:	4b23      	ldr	r3, [pc, #140]	; (8005cf8 <xTaskResumeAll+0x12c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d302      	bcc.n	8005c78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005c72:	4b22      	ldr	r3, [pc, #136]	; (8005cfc <xTaskResumeAll+0x130>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c78:	4b1c      	ldr	r3, [pc, #112]	; (8005cec <xTaskResumeAll+0x120>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1cb      	bne.n	8005c18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c86:	f000 fb5f 	bl	8006348 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c8a:	4b1d      	ldr	r3, [pc, #116]	; (8005d00 <xTaskResumeAll+0x134>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d010      	beq.n	8005cb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c96:	f000 f847 	bl	8005d28 <xTaskIncrementTick>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005ca0:	4b16      	ldr	r3, [pc, #88]	; (8005cfc <xTaskResumeAll+0x130>)
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1f1      	bne.n	8005c96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005cb2:	4b13      	ldr	r3, [pc, #76]	; (8005d00 <xTaskResumeAll+0x134>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005cb8:	4b10      	ldr	r3, [pc, #64]	; (8005cfc <xTaskResumeAll+0x130>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d009      	beq.n	8005cd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005cc4:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <xTaskResumeAll+0x138>)
 8005cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cd4:	f001 f8f6 	bl	8006ec4 <vPortExitCritical>

	return xAlreadyYielded;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000d10 	.word	0x20000d10
 8005ce8:	20000ce8 	.word	0x20000ce8
 8005cec:	20000ca8 	.word	0x20000ca8
 8005cf0:	20000cf0 	.word	0x20000cf0
 8005cf4:	20000818 	.word	0x20000818
 8005cf8:	20000814 	.word	0x20000814
 8005cfc:	20000cfc 	.word	0x20000cfc
 8005d00:	20000cf8 	.word	0x20000cf8
 8005d04:	e000ed04 	.word	0xe000ed04

08005d08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d0e:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <xTaskGetTickCount+0x1c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d14:	687b      	ldr	r3, [r7, #4]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	20000cec 	.word	0x20000cec

08005d28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d32:	4b4f      	ldr	r3, [pc, #316]	; (8005e70 <xTaskIncrementTick+0x148>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f040 808f 	bne.w	8005e5a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d3c:	4b4d      	ldr	r3, [pc, #308]	; (8005e74 <xTaskIncrementTick+0x14c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3301      	adds	r3, #1
 8005d42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d44:	4a4b      	ldr	r2, [pc, #300]	; (8005e74 <xTaskIncrementTick+0x14c>)
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d120      	bne.n	8005d92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d50:	4b49      	ldr	r3, [pc, #292]	; (8005e78 <xTaskIncrementTick+0x150>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <xTaskIncrementTick+0x48>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	603b      	str	r3, [r7, #0]
}
 8005d6c:	bf00      	nop
 8005d6e:	e7fe      	b.n	8005d6e <xTaskIncrementTick+0x46>
 8005d70:	4b41      	ldr	r3, [pc, #260]	; (8005e78 <xTaskIncrementTick+0x150>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	4b41      	ldr	r3, [pc, #260]	; (8005e7c <xTaskIncrementTick+0x154>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a3f      	ldr	r2, [pc, #252]	; (8005e78 <xTaskIncrementTick+0x150>)
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	4a3f      	ldr	r2, [pc, #252]	; (8005e7c <xTaskIncrementTick+0x154>)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6013      	str	r3, [r2, #0]
 8005d84:	4b3e      	ldr	r3, [pc, #248]	; (8005e80 <xTaskIncrementTick+0x158>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	4a3d      	ldr	r2, [pc, #244]	; (8005e80 <xTaskIncrementTick+0x158>)
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	f000 fadb 	bl	8006348 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d92:	4b3c      	ldr	r3, [pc, #240]	; (8005e84 <xTaskIncrementTick+0x15c>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d349      	bcc.n	8005e30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d9c:	4b36      	ldr	r3, [pc, #216]	; (8005e78 <xTaskIncrementTick+0x150>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d104      	bne.n	8005db0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005da6:	4b37      	ldr	r3, [pc, #220]	; (8005e84 <xTaskIncrementTick+0x15c>)
 8005da8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dac:	601a      	str	r2, [r3, #0]
					break;
 8005dae:	e03f      	b.n	8005e30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db0:	4b31      	ldr	r3, [pc, #196]	; (8005e78 <xTaskIncrementTick+0x150>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d203      	bcs.n	8005dd0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005dc8:	4a2e      	ldr	r2, [pc, #184]	; (8005e84 <xTaskIncrementTick+0x15c>)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005dce:	e02f      	b.n	8005e30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fe fea1 	bl	8004b1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d004      	beq.n	8005dec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	3318      	adds	r3, #24
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fe fe98 	bl	8004b1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df0:	4b25      	ldr	r3, [pc, #148]	; (8005e88 <xTaskIncrementTick+0x160>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d903      	bls.n	8005e00 <xTaskIncrementTick+0xd8>
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfc:	4a22      	ldr	r2, [pc, #136]	; (8005e88 <xTaskIncrementTick+0x160>)
 8005dfe:	6013      	str	r3, [r2, #0]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4a1f      	ldr	r2, [pc, #124]	; (8005e8c <xTaskIncrementTick+0x164>)
 8005e0e:	441a      	add	r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	3304      	adds	r3, #4
 8005e14:	4619      	mov	r1, r3
 8005e16:	4610      	mov	r0, r2
 8005e18:	f7fe fe23 	bl	8004a62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e20:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <xTaskIncrementTick+0x168>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d3b8      	bcc.n	8005d9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e2e:	e7b5      	b.n	8005d9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e30:	4b17      	ldr	r3, [pc, #92]	; (8005e90 <xTaskIncrementTick+0x168>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e36:	4915      	ldr	r1, [pc, #84]	; (8005e8c <xTaskIncrementTick+0x164>)
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	440b      	add	r3, r1
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d901      	bls.n	8005e4c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e4c:	4b11      	ldr	r3, [pc, #68]	; (8005e94 <xTaskIncrementTick+0x16c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d007      	beq.n	8005e64 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005e54:	2301      	movs	r3, #1
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	e004      	b.n	8005e64 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e5a:	4b0f      	ldr	r3, [pc, #60]	; (8005e98 <xTaskIncrementTick+0x170>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	4a0d      	ldr	r2, [pc, #52]	; (8005e98 <xTaskIncrementTick+0x170>)
 8005e62:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e64:	697b      	ldr	r3, [r7, #20]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000d10 	.word	0x20000d10
 8005e74:	20000cec 	.word	0x20000cec
 8005e78:	20000ca0 	.word	0x20000ca0
 8005e7c:	20000ca4 	.word	0x20000ca4
 8005e80:	20000d00 	.word	0x20000d00
 8005e84:	20000d08 	.word	0x20000d08
 8005e88:	20000cf0 	.word	0x20000cf0
 8005e8c:	20000818 	.word	0x20000818
 8005e90:	20000814 	.word	0x20000814
 8005e94:	20000cfc 	.word	0x20000cfc
 8005e98:	20000cf8 	.word	0x20000cf8

08005e9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ea2:	4b2a      	ldr	r3, [pc, #168]	; (8005f4c <vTaskSwitchContext+0xb0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005eaa:	4b29      	ldr	r3, [pc, #164]	; (8005f50 <vTaskSwitchContext+0xb4>)
 8005eac:	2201      	movs	r2, #1
 8005eae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005eb0:	e046      	b.n	8005f40 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005eb2:	4b27      	ldr	r3, [pc, #156]	; (8005f50 <vTaskSwitchContext+0xb4>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eb8:	4b26      	ldr	r3, [pc, #152]	; (8005f54 <vTaskSwitchContext+0xb8>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	e010      	b.n	8005ee2 <vTaskSwitchContext+0x46>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10a      	bne.n	8005edc <vTaskSwitchContext+0x40>
	__asm volatile
 8005ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	607b      	str	r3, [r7, #4]
}
 8005ed8:	bf00      	nop
 8005eda:	e7fe      	b.n	8005eda <vTaskSwitchContext+0x3e>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	491d      	ldr	r1, [pc, #116]	; (8005f58 <vTaskSwitchContext+0xbc>)
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	440b      	add	r3, r1
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0e4      	beq.n	8005ec0 <vTaskSwitchContext+0x24>
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4a15      	ldr	r2, [pc, #84]	; (8005f58 <vTaskSwitchContext+0xbc>)
 8005f02:	4413      	add	r3, r2
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	605a      	str	r2, [r3, #4]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	3308      	adds	r3, #8
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d104      	bne.n	8005f26 <vTaskSwitchContext+0x8a>
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	605a      	str	r2, [r3, #4]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	4a0b      	ldr	r2, [pc, #44]	; (8005f5c <vTaskSwitchContext+0xc0>)
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	4a08      	ldr	r2, [pc, #32]	; (8005f54 <vTaskSwitchContext+0xb8>)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f36:	4b09      	ldr	r3, [pc, #36]	; (8005f5c <vTaskSwitchContext+0xc0>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3354      	adds	r3, #84	; 0x54
 8005f3c:	4a08      	ldr	r2, [pc, #32]	; (8005f60 <vTaskSwitchContext+0xc4>)
 8005f3e:	6013      	str	r3, [r2, #0]
}
 8005f40:	bf00      	nop
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	20000d10 	.word	0x20000d10
 8005f50:	20000cfc 	.word	0x20000cfc
 8005f54:	20000cf0 	.word	0x20000cf0
 8005f58:	20000818 	.word	0x20000818
 8005f5c:	20000814 	.word	0x20000814
 8005f60:	20000010 	.word	0x20000010

08005f64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	60fb      	str	r3, [r7, #12]
}
 8005f86:	bf00      	nop
 8005f88:	e7fe      	b.n	8005f88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f8a:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <vTaskPlaceOnEventList+0x44>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3318      	adds	r3, #24
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fe fd89 	bl	8004aaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f98:	2101      	movs	r1, #1
 8005f9a:	6838      	ldr	r0, [r7, #0]
 8005f9c:	f000 fa90 	bl	80064c0 <prvAddCurrentTaskToDelayedList>
}
 8005fa0:	bf00      	nop
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	20000814 	.word	0x20000814

08005fac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10a      	bne.n	8005fd4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	617b      	str	r3, [r7, #20]
}
 8005fd0:	bf00      	nop
 8005fd2:	e7fe      	b.n	8005fd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fd4:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <vTaskPlaceOnEventListRestricted+0x54>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3318      	adds	r3, #24
 8005fda:	4619      	mov	r1, r3
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f7fe fd40 	bl	8004a62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	68b8      	ldr	r0, [r7, #8]
 8005ff2:	f000 fa65 	bl	80064c0 <prvAddCurrentTaskToDelayedList>
	}
 8005ff6:	bf00      	nop
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000814 	.word	0x20000814

08006004 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10a      	bne.n	8006030 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	60fb      	str	r3, [r7, #12]
}
 800602c:	bf00      	nop
 800602e:	e7fe      	b.n	800602e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	3318      	adds	r3, #24
 8006034:	4618      	mov	r0, r3
 8006036:	f7fe fd71 	bl	8004b1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800603a:	4b1e      	ldr	r3, [pc, #120]	; (80060b4 <xTaskRemoveFromEventList+0xb0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d11d      	bne.n	800607e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	3304      	adds	r3, #4
 8006046:	4618      	mov	r0, r3
 8006048:	f7fe fd68 	bl	8004b1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006050:	4b19      	ldr	r3, [pc, #100]	; (80060b8 <xTaskRemoveFromEventList+0xb4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	429a      	cmp	r2, r3
 8006056:	d903      	bls.n	8006060 <xTaskRemoveFromEventList+0x5c>
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	4a16      	ldr	r2, [pc, #88]	; (80060b8 <xTaskRemoveFromEventList+0xb4>)
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4a13      	ldr	r2, [pc, #76]	; (80060bc <xTaskRemoveFromEventList+0xb8>)
 800606e:	441a      	add	r2, r3
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	3304      	adds	r3, #4
 8006074:	4619      	mov	r1, r3
 8006076:	4610      	mov	r0, r2
 8006078:	f7fe fcf3 	bl	8004a62 <vListInsertEnd>
 800607c:	e005      	b.n	800608a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	3318      	adds	r3, #24
 8006082:	4619      	mov	r1, r3
 8006084:	480e      	ldr	r0, [pc, #56]	; (80060c0 <xTaskRemoveFromEventList+0xbc>)
 8006086:	f7fe fcec 	bl	8004a62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608e:	4b0d      	ldr	r3, [pc, #52]	; (80060c4 <xTaskRemoveFromEventList+0xc0>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	429a      	cmp	r2, r3
 8006096:	d905      	bls.n	80060a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006098:	2301      	movs	r3, #1
 800609a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800609c:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <xTaskRemoveFromEventList+0xc4>)
 800609e:	2201      	movs	r2, #1
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	e001      	b.n	80060a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80060a4:	2300      	movs	r3, #0
 80060a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80060a8:	697b      	ldr	r3, [r7, #20]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20000d10 	.word	0x20000d10
 80060b8:	20000cf0 	.word	0x20000cf0
 80060bc:	20000818 	.word	0x20000818
 80060c0:	20000ca8 	.word	0x20000ca8
 80060c4:	20000814 	.word	0x20000814
 80060c8:	20000cfc 	.word	0x20000cfc

080060cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060d4:	4b06      	ldr	r3, [pc, #24]	; (80060f0 <vTaskInternalSetTimeOutState+0x24>)
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80060dc:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <vTaskInternalSetTimeOutState+0x28>)
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	605a      	str	r2, [r3, #4]
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	20000d00 	.word	0x20000d00
 80060f4:	20000cec 	.word	0x20000cec

080060f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	613b      	str	r3, [r7, #16]
}
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	60fb      	str	r3, [r7, #12]
}
 8006136:	bf00      	nop
 8006138:	e7fe      	b.n	8006138 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800613a:	f000 fe93 	bl	8006e64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800613e:	4b1d      	ldr	r3, [pc, #116]	; (80061b4 <xTaskCheckForTimeOut+0xbc>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d102      	bne.n	800615e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006158:	2300      	movs	r3, #0
 800615a:	61fb      	str	r3, [r7, #28]
 800615c:	e023      	b.n	80061a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <xTaskCheckForTimeOut+0xc0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	d007      	beq.n	800617a <xTaskCheckForTimeOut+0x82>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	429a      	cmp	r2, r3
 8006172:	d302      	bcc.n	800617a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006174:	2301      	movs	r3, #1
 8006176:	61fb      	str	r3, [r7, #28]
 8006178:	e015      	b.n	80061a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	429a      	cmp	r2, r3
 8006182:	d20b      	bcs.n	800619c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	1ad2      	subs	r2, r2, r3
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7ff ff9b 	bl	80060cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006196:	2300      	movs	r3, #0
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	e004      	b.n	80061a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80061a2:	2301      	movs	r3, #1
 80061a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80061a6:	f000 fe8d 	bl	8006ec4 <vPortExitCritical>

	return xReturn;
 80061aa:	69fb      	ldr	r3, [r7, #28]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3720      	adds	r7, #32
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	20000cec 	.word	0x20000cec
 80061b8:	20000d00 	.word	0x20000d00

080061bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80061c0:	4b03      	ldr	r3, [pc, #12]	; (80061d0 <vTaskMissedYield+0x14>)
 80061c2:	2201      	movs	r2, #1
 80061c4:	601a      	str	r2, [r3, #0]
}
 80061c6:	bf00      	nop
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	20000cfc 	.word	0x20000cfc

080061d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80061dc:	f000 f852 	bl	8006284 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061e0:	4b06      	ldr	r3, [pc, #24]	; (80061fc <prvIdleTask+0x28>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d9f9      	bls.n	80061dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80061e8:	4b05      	ldr	r3, [pc, #20]	; (8006200 <prvIdleTask+0x2c>)
 80061ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80061f8:	e7f0      	b.n	80061dc <prvIdleTask+0x8>
 80061fa:	bf00      	nop
 80061fc:	20000818 	.word	0x20000818
 8006200:	e000ed04 	.word	0xe000ed04

08006204 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800620a:	2300      	movs	r3, #0
 800620c:	607b      	str	r3, [r7, #4]
 800620e:	e00c      	b.n	800622a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	4613      	mov	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4a12      	ldr	r2, [pc, #72]	; (8006264 <prvInitialiseTaskLists+0x60>)
 800621c:	4413      	add	r3, r2
 800621e:	4618      	mov	r0, r3
 8006220:	f7fe fbf2 	bl	8004a08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3301      	adds	r3, #1
 8006228:	607b      	str	r3, [r7, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b37      	cmp	r3, #55	; 0x37
 800622e:	d9ef      	bls.n	8006210 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006230:	480d      	ldr	r0, [pc, #52]	; (8006268 <prvInitialiseTaskLists+0x64>)
 8006232:	f7fe fbe9 	bl	8004a08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006236:	480d      	ldr	r0, [pc, #52]	; (800626c <prvInitialiseTaskLists+0x68>)
 8006238:	f7fe fbe6 	bl	8004a08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800623c:	480c      	ldr	r0, [pc, #48]	; (8006270 <prvInitialiseTaskLists+0x6c>)
 800623e:	f7fe fbe3 	bl	8004a08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006242:	480c      	ldr	r0, [pc, #48]	; (8006274 <prvInitialiseTaskLists+0x70>)
 8006244:	f7fe fbe0 	bl	8004a08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006248:	480b      	ldr	r0, [pc, #44]	; (8006278 <prvInitialiseTaskLists+0x74>)
 800624a:	f7fe fbdd 	bl	8004a08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800624e:	4b0b      	ldr	r3, [pc, #44]	; (800627c <prvInitialiseTaskLists+0x78>)
 8006250:	4a05      	ldr	r2, [pc, #20]	; (8006268 <prvInitialiseTaskLists+0x64>)
 8006252:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006254:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <prvInitialiseTaskLists+0x7c>)
 8006256:	4a05      	ldr	r2, [pc, #20]	; (800626c <prvInitialiseTaskLists+0x68>)
 8006258:	601a      	str	r2, [r3, #0]
}
 800625a:	bf00      	nop
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20000818 	.word	0x20000818
 8006268:	20000c78 	.word	0x20000c78
 800626c:	20000c8c 	.word	0x20000c8c
 8006270:	20000ca8 	.word	0x20000ca8
 8006274:	20000cbc 	.word	0x20000cbc
 8006278:	20000cd4 	.word	0x20000cd4
 800627c:	20000ca0 	.word	0x20000ca0
 8006280:	20000ca4 	.word	0x20000ca4

08006284 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800628a:	e019      	b.n	80062c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800628c:	f000 fdea 	bl	8006e64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006290:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <prvCheckTasksWaitingTermination+0x50>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3304      	adds	r3, #4
 800629c:	4618      	mov	r0, r3
 800629e:	f7fe fc3d 	bl	8004b1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062a2:	4b0d      	ldr	r3, [pc, #52]	; (80062d8 <prvCheckTasksWaitingTermination+0x54>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	4a0b      	ldr	r2, [pc, #44]	; (80062d8 <prvCheckTasksWaitingTermination+0x54>)
 80062aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062ac:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <prvCheckTasksWaitingTermination+0x58>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3b01      	subs	r3, #1
 80062b2:	4a0a      	ldr	r2, [pc, #40]	; (80062dc <prvCheckTasksWaitingTermination+0x58>)
 80062b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80062b6:	f000 fe05 	bl	8006ec4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f810 	bl	80062e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062c0:	4b06      	ldr	r3, [pc, #24]	; (80062dc <prvCheckTasksWaitingTermination+0x58>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e1      	bne.n	800628c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80062c8:	bf00      	nop
 80062ca:	bf00      	nop
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20000cbc 	.word	0x20000cbc
 80062d8:	20000ce8 	.word	0x20000ce8
 80062dc:	20000cd0 	.word	0x20000cd0

080062e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3354      	adds	r3, #84	; 0x54
 80062ec:	4618      	mov	r0, r3
 80062ee:	f001 f96f 	bl	80075d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d108      	bne.n	800630e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	4618      	mov	r0, r3
 8006302:	f000 ff9d 	bl	8007240 <vPortFree>
				vPortFree( pxTCB );
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 ff9a 	bl	8007240 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800630c:	e018      	b.n	8006340 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006314:	2b01      	cmp	r3, #1
 8006316:	d103      	bne.n	8006320 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 ff91 	bl	8007240 <vPortFree>
	}
 800631e:	e00f      	b.n	8006340 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006326:	2b02      	cmp	r3, #2
 8006328:	d00a      	beq.n	8006340 <prvDeleteTCB+0x60>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	60fb      	str	r3, [r7, #12]
}
 800633c:	bf00      	nop
 800633e:	e7fe      	b.n	800633e <prvDeleteTCB+0x5e>
	}
 8006340:	bf00      	nop
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800634e:	4b0c      	ldr	r3, [pc, #48]	; (8006380 <prvResetNextTaskUnblockTime+0x38>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d104      	bne.n	8006362 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006358:	4b0a      	ldr	r3, [pc, #40]	; (8006384 <prvResetNextTaskUnblockTime+0x3c>)
 800635a:	f04f 32ff 	mov.w	r2, #4294967295
 800635e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006360:	e008      	b.n	8006374 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006362:	4b07      	ldr	r3, [pc, #28]	; (8006380 <prvResetNextTaskUnblockTime+0x38>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	4a04      	ldr	r2, [pc, #16]	; (8006384 <prvResetNextTaskUnblockTime+0x3c>)
 8006372:	6013      	str	r3, [r2, #0]
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	20000ca0 	.word	0x20000ca0
 8006384:	20000d08 	.word	0x20000d08

08006388 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800638e:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <xTaskGetCurrentTaskHandle+0x1c>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006394:	687b      	ldr	r3, [r7, #4]
	}
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	20000814 	.word	0x20000814

080063a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063ae:	4b0b      	ldr	r3, [pc, #44]	; (80063dc <xTaskGetSchedulerState+0x34>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d102      	bne.n	80063bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80063b6:	2301      	movs	r3, #1
 80063b8:	607b      	str	r3, [r7, #4]
 80063ba:	e008      	b.n	80063ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063bc:	4b08      	ldr	r3, [pc, #32]	; (80063e0 <xTaskGetSchedulerState+0x38>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d102      	bne.n	80063ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063c4:	2302      	movs	r3, #2
 80063c6:	607b      	str	r3, [r7, #4]
 80063c8:	e001      	b.n	80063ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80063ca:	2300      	movs	r3, #0
 80063cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80063ce:	687b      	ldr	r3, [r7, #4]
	}
 80063d0:	4618      	mov	r0, r3
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	20000cf4 	.word	0x20000cf4
 80063e0:	20000d10 	.word	0x20000d10

080063e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b086      	sub	sp, #24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80063f0:	2300      	movs	r3, #0
 80063f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d056      	beq.n	80064a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80063fa:	4b2e      	ldr	r3, [pc, #184]	; (80064b4 <xTaskPriorityDisinherit+0xd0>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	429a      	cmp	r2, r3
 8006402:	d00a      	beq.n	800641a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	60fb      	str	r3, [r7, #12]
}
 8006416:	bf00      	nop
 8006418:	e7fe      	b.n	8006418 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10a      	bne.n	8006438 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	60bb      	str	r3, [r7, #8]
}
 8006434:	bf00      	nop
 8006436:	e7fe      	b.n	8006436 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800643c:	1e5a      	subs	r2, r3, #1
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800644a:	429a      	cmp	r2, r3
 800644c:	d02c      	beq.n	80064a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006452:	2b00      	cmp	r3, #0
 8006454:	d128      	bne.n	80064a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	3304      	adds	r3, #4
 800645a:	4618      	mov	r0, r3
 800645c:	f7fe fb5e 	bl	8004b1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006478:	4b0f      	ldr	r3, [pc, #60]	; (80064b8 <xTaskPriorityDisinherit+0xd4>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d903      	bls.n	8006488 <xTaskPriorityDisinherit+0xa4>
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	4a0c      	ldr	r2, [pc, #48]	; (80064b8 <xTaskPriorityDisinherit+0xd4>)
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4a09      	ldr	r2, [pc, #36]	; (80064bc <xTaskPriorityDisinherit+0xd8>)
 8006496:	441a      	add	r2, r3
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	3304      	adds	r3, #4
 800649c:	4619      	mov	r1, r3
 800649e:	4610      	mov	r0, r2
 80064a0:	f7fe fadf 	bl	8004a62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064a4:	2301      	movs	r3, #1
 80064a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064a8:	697b      	ldr	r3, [r7, #20]
	}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3718      	adds	r7, #24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	20000814 	.word	0x20000814
 80064b8:	20000cf0 	.word	0x20000cf0
 80064bc:	20000818 	.word	0x20000818

080064c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064ca:	4b21      	ldr	r3, [pc, #132]	; (8006550 <prvAddCurrentTaskToDelayedList+0x90>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064d0:	4b20      	ldr	r3, [pc, #128]	; (8006554 <prvAddCurrentTaskToDelayedList+0x94>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe fb20 	bl	8004b1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e2:	d10a      	bne.n	80064fa <prvAddCurrentTaskToDelayedList+0x3a>
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d007      	beq.n	80064fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80064ea:	4b1a      	ldr	r3, [pc, #104]	; (8006554 <prvAddCurrentTaskToDelayedList+0x94>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3304      	adds	r3, #4
 80064f0:	4619      	mov	r1, r3
 80064f2:	4819      	ldr	r0, [pc, #100]	; (8006558 <prvAddCurrentTaskToDelayedList+0x98>)
 80064f4:	f7fe fab5 	bl	8004a62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80064f8:	e026      	b.n	8006548 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4413      	add	r3, r2
 8006500:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006502:	4b14      	ldr	r3, [pc, #80]	; (8006554 <prvAddCurrentTaskToDelayedList+0x94>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	429a      	cmp	r2, r3
 8006510:	d209      	bcs.n	8006526 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006512:	4b12      	ldr	r3, [pc, #72]	; (800655c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	4b0f      	ldr	r3, [pc, #60]	; (8006554 <prvAddCurrentTaskToDelayedList+0x94>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3304      	adds	r3, #4
 800651c:	4619      	mov	r1, r3
 800651e:	4610      	mov	r0, r2
 8006520:	f7fe fac3 	bl	8004aaa <vListInsert>
}
 8006524:	e010      	b.n	8006548 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006526:	4b0e      	ldr	r3, [pc, #56]	; (8006560 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	4b0a      	ldr	r3, [pc, #40]	; (8006554 <prvAddCurrentTaskToDelayedList+0x94>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3304      	adds	r3, #4
 8006530:	4619      	mov	r1, r3
 8006532:	4610      	mov	r0, r2
 8006534:	f7fe fab9 	bl	8004aaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006538:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <prvAddCurrentTaskToDelayedList+0xa4>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68ba      	ldr	r2, [r7, #8]
 800653e:	429a      	cmp	r2, r3
 8006540:	d202      	bcs.n	8006548 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006542:	4a08      	ldr	r2, [pc, #32]	; (8006564 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	6013      	str	r3, [r2, #0]
}
 8006548:	bf00      	nop
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	20000cec 	.word	0x20000cec
 8006554:	20000814 	.word	0x20000814
 8006558:	20000cd4 	.word	0x20000cd4
 800655c:	20000ca4 	.word	0x20000ca4
 8006560:	20000ca0 	.word	0x20000ca0
 8006564:	20000d08 	.word	0x20000d08

08006568 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b08a      	sub	sp, #40	; 0x28
 800656c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800656e:	2300      	movs	r3, #0
 8006570:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006572:	f000 fb07 	bl	8006b84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006576:	4b1c      	ldr	r3, [pc, #112]	; (80065e8 <xTimerCreateTimerTask+0x80>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d021      	beq.n	80065c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800657e:	2300      	movs	r3, #0
 8006580:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006582:	2300      	movs	r3, #0
 8006584:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006586:	1d3a      	adds	r2, r7, #4
 8006588:	f107 0108 	add.w	r1, r7, #8
 800658c:	f107 030c 	add.w	r3, r7, #12
 8006590:	4618      	mov	r0, r3
 8006592:	f7fe fa1f 	bl	80049d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	9202      	str	r2, [sp, #8]
 800659e:	9301      	str	r3, [sp, #4]
 80065a0:	2302      	movs	r3, #2
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	2300      	movs	r3, #0
 80065a6:	460a      	mov	r2, r1
 80065a8:	4910      	ldr	r1, [pc, #64]	; (80065ec <xTimerCreateTimerTask+0x84>)
 80065aa:	4811      	ldr	r0, [pc, #68]	; (80065f0 <xTimerCreateTimerTask+0x88>)
 80065ac:	f7fe ffcc 	bl	8005548 <xTaskCreateStatic>
 80065b0:	4603      	mov	r3, r0
 80065b2:	4a10      	ldr	r2, [pc, #64]	; (80065f4 <xTimerCreateTimerTask+0x8c>)
 80065b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80065b6:	4b0f      	ldr	r3, [pc, #60]	; (80065f4 <xTimerCreateTimerTask+0x8c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80065be:	2301      	movs	r3, #1
 80065c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10a      	bne.n	80065de <xTimerCreateTimerTask+0x76>
	__asm volatile
 80065c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065cc:	f383 8811 	msr	BASEPRI, r3
 80065d0:	f3bf 8f6f 	isb	sy
 80065d4:	f3bf 8f4f 	dsb	sy
 80065d8:	613b      	str	r3, [r7, #16]
}
 80065da:	bf00      	nop
 80065dc:	e7fe      	b.n	80065dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80065de:	697b      	ldr	r3, [r7, #20]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	20000d44 	.word	0x20000d44
 80065ec:	08007ee4 	.word	0x08007ee4
 80065f0:	0800672d 	.word	0x0800672d
 80065f4:	20000d48 	.word	0x20000d48

080065f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08a      	sub	sp, #40	; 0x28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006606:	2300      	movs	r3, #0
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10a      	bne.n	8006626 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	623b      	str	r3, [r7, #32]
}
 8006622:	bf00      	nop
 8006624:	e7fe      	b.n	8006624 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006626:	4b1a      	ldr	r3, [pc, #104]	; (8006690 <xTimerGenericCommand+0x98>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d02a      	beq.n	8006684 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	2b05      	cmp	r3, #5
 800663e:	dc18      	bgt.n	8006672 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006640:	f7ff feb2 	bl	80063a8 <xTaskGetSchedulerState>
 8006644:	4603      	mov	r3, r0
 8006646:	2b02      	cmp	r3, #2
 8006648:	d109      	bne.n	800665e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800664a:	4b11      	ldr	r3, [pc, #68]	; (8006690 <xTimerGenericCommand+0x98>)
 800664c:	6818      	ldr	r0, [r3, #0]
 800664e:	f107 0110 	add.w	r1, r7, #16
 8006652:	2300      	movs	r3, #0
 8006654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006656:	f7fe fb8f 	bl	8004d78 <xQueueGenericSend>
 800665a:	6278      	str	r0, [r7, #36]	; 0x24
 800665c:	e012      	b.n	8006684 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800665e:	4b0c      	ldr	r3, [pc, #48]	; (8006690 <xTimerGenericCommand+0x98>)
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	f107 0110 	add.w	r1, r7, #16
 8006666:	2300      	movs	r3, #0
 8006668:	2200      	movs	r2, #0
 800666a:	f7fe fb85 	bl	8004d78 <xQueueGenericSend>
 800666e:	6278      	str	r0, [r7, #36]	; 0x24
 8006670:	e008      	b.n	8006684 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006672:	4b07      	ldr	r3, [pc, #28]	; (8006690 <xTimerGenericCommand+0x98>)
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	f107 0110 	add.w	r1, r7, #16
 800667a:	2300      	movs	r3, #0
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	f7fe fc79 	bl	8004f74 <xQueueGenericSendFromISR>
 8006682:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006686:	4618      	mov	r0, r3
 8006688:	3728      	adds	r7, #40	; 0x28
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000d44 	.word	0x20000d44

08006694 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af02      	add	r7, sp, #8
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800669e:	4b22      	ldr	r3, [pc, #136]	; (8006728 <prvProcessExpiredTimer+0x94>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	3304      	adds	r3, #4
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fe fa35 	bl	8004b1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066b8:	f003 0304 	and.w	r3, r3, #4
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d022      	beq.n	8006706 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	699a      	ldr	r2, [r3, #24]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	18d1      	adds	r1, r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	6978      	ldr	r0, [r7, #20]
 80066ce:	f000 f8d1 	bl	8006874 <prvInsertTimerInActiveList>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d01f      	beq.n	8006718 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066d8:	2300      	movs	r3, #0
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	2300      	movs	r3, #0
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	2100      	movs	r1, #0
 80066e2:	6978      	ldr	r0, [r7, #20]
 80066e4:	f7ff ff88 	bl	80065f8 <xTimerGenericCommand>
 80066e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d113      	bne.n	8006718 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80066f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f4:	f383 8811 	msr	BASEPRI, r3
 80066f8:	f3bf 8f6f 	isb	sy
 80066fc:	f3bf 8f4f 	dsb	sy
 8006700:	60fb      	str	r3, [r7, #12]
}
 8006702:	bf00      	nop
 8006704:	e7fe      	b.n	8006704 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800670c:	f023 0301 	bic.w	r3, r3, #1
 8006710:	b2da      	uxtb	r2, r3
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	6978      	ldr	r0, [r7, #20]
 800671e:	4798      	blx	r3
}
 8006720:	bf00      	nop
 8006722:	3718      	adds	r7, #24
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	20000d3c 	.word	0x20000d3c

0800672c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006734:	f107 0308 	add.w	r3, r7, #8
 8006738:	4618      	mov	r0, r3
 800673a:	f000 f857 	bl	80067ec <prvGetNextExpireTime>
 800673e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4619      	mov	r1, r3
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 f803 	bl	8006750 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800674a:	f000 f8d5 	bl	80068f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800674e:	e7f1      	b.n	8006734 <prvTimerTask+0x8>

08006750 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800675a:	f7ff fa29 	bl	8005bb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800675e:	f107 0308 	add.w	r3, r7, #8
 8006762:	4618      	mov	r0, r3
 8006764:	f000 f866 	bl	8006834 <prvSampleTimeNow>
 8006768:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d130      	bne.n	80067d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10a      	bne.n	800678c <prvProcessTimerOrBlockTask+0x3c>
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	429a      	cmp	r2, r3
 800677c:	d806      	bhi.n	800678c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800677e:	f7ff fa25 	bl	8005bcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006782:	68f9      	ldr	r1, [r7, #12]
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7ff ff85 	bl	8006694 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800678a:	e024      	b.n	80067d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d008      	beq.n	80067a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006792:	4b13      	ldr	r3, [pc, #76]	; (80067e0 <prvProcessTimerOrBlockTask+0x90>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <prvProcessTimerOrBlockTask+0x50>
 800679c:	2301      	movs	r3, #1
 800679e:	e000      	b.n	80067a2 <prvProcessTimerOrBlockTask+0x52>
 80067a0:	2300      	movs	r3, #0
 80067a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80067a4:	4b0f      	ldr	r3, [pc, #60]	; (80067e4 <prvProcessTimerOrBlockTask+0x94>)
 80067a6:	6818      	ldr	r0, [r3, #0]
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	4619      	mov	r1, r3
 80067b2:	f7fe fe95 	bl	80054e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80067b6:	f7ff fa09 	bl	8005bcc <xTaskResumeAll>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d10a      	bne.n	80067d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80067c0:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <prvProcessTimerOrBlockTask+0x98>)
 80067c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	f3bf 8f4f 	dsb	sy
 80067cc:	f3bf 8f6f 	isb	sy
}
 80067d0:	e001      	b.n	80067d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80067d2:	f7ff f9fb 	bl	8005bcc <xTaskResumeAll>
}
 80067d6:	bf00      	nop
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000d40 	.word	0x20000d40
 80067e4:	20000d44 	.word	0x20000d44
 80067e8:	e000ed04 	.word	0xe000ed04

080067ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80067f4:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <prvGetNextExpireTime+0x44>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <prvGetNextExpireTime+0x16>
 80067fe:	2201      	movs	r2, #1
 8006800:	e000      	b.n	8006804 <prvGetNextExpireTime+0x18>
 8006802:	2200      	movs	r2, #0
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d105      	bne.n	800681c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006810:	4b07      	ldr	r3, [pc, #28]	; (8006830 <prvGetNextExpireTime+0x44>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	e001      	b.n	8006820 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006820:	68fb      	ldr	r3, [r7, #12]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	20000d3c 	.word	0x20000d3c

08006834 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800683c:	f7ff fa64 	bl	8005d08 <xTaskGetTickCount>
 8006840:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006842:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <prvSampleTimeNow+0x3c>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	429a      	cmp	r2, r3
 800684a:	d205      	bcs.n	8006858 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800684c:	f000 f936 	bl	8006abc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	e002      	b.n	800685e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800685e:	4a04      	ldr	r2, [pc, #16]	; (8006870 <prvSampleTimeNow+0x3c>)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006864:	68fb      	ldr	r3, [r7, #12]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3710      	adds	r7, #16
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20000d4c 	.word	0x20000d4c

08006874 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006882:	2300      	movs	r3, #0
 8006884:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	429a      	cmp	r2, r3
 8006898:	d812      	bhi.n	80068c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	1ad2      	subs	r2, r2, r3
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d302      	bcc.n	80068ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80068a8:	2301      	movs	r3, #1
 80068aa:	617b      	str	r3, [r7, #20]
 80068ac:	e01b      	b.n	80068e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80068ae:	4b10      	ldr	r3, [pc, #64]	; (80068f0 <prvInsertTimerInActiveList+0x7c>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3304      	adds	r3, #4
 80068b6:	4619      	mov	r1, r3
 80068b8:	4610      	mov	r0, r2
 80068ba:	f7fe f8f6 	bl	8004aaa <vListInsert>
 80068be:	e012      	b.n	80068e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d206      	bcs.n	80068d6 <prvInsertTimerInActiveList+0x62>
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d302      	bcc.n	80068d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80068d0:	2301      	movs	r3, #1
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	e007      	b.n	80068e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068d6:	4b07      	ldr	r3, [pc, #28]	; (80068f4 <prvInsertTimerInActiveList+0x80>)
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3304      	adds	r3, #4
 80068de:	4619      	mov	r1, r3
 80068e0:	4610      	mov	r0, r2
 80068e2:	f7fe f8e2 	bl	8004aaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80068e6:	697b      	ldr	r3, [r7, #20]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	20000d40 	.word	0x20000d40
 80068f4:	20000d3c 	.word	0x20000d3c

080068f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08e      	sub	sp, #56	; 0x38
 80068fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068fe:	e0ca      	b.n	8006a96 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2b00      	cmp	r3, #0
 8006904:	da18      	bge.n	8006938 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006906:	1d3b      	adds	r3, r7, #4
 8006908:	3304      	adds	r3, #4
 800690a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800690c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	61fb      	str	r3, [r7, #28]
}
 8006924:	bf00      	nop
 8006926:	e7fe      	b.n	8006926 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800692e:	6850      	ldr	r0, [r2, #4]
 8006930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006932:	6892      	ldr	r2, [r2, #8]
 8006934:	4611      	mov	r1, r2
 8006936:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	f2c0 80aa 	blt.w	8006a94 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d004      	beq.n	8006956 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800694c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694e:	3304      	adds	r3, #4
 8006950:	4618      	mov	r0, r3
 8006952:	f7fe f8e3 	bl	8004b1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006956:	463b      	mov	r3, r7
 8006958:	4618      	mov	r0, r3
 800695a:	f7ff ff6b 	bl	8006834 <prvSampleTimeNow>
 800695e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b09      	cmp	r3, #9
 8006964:	f200 8097 	bhi.w	8006a96 <prvProcessReceivedCommands+0x19e>
 8006968:	a201      	add	r2, pc, #4	; (adr r2, 8006970 <prvProcessReceivedCommands+0x78>)
 800696a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800696e:	bf00      	nop
 8006970:	08006999 	.word	0x08006999
 8006974:	08006999 	.word	0x08006999
 8006978:	08006999 	.word	0x08006999
 800697c:	08006a0d 	.word	0x08006a0d
 8006980:	08006a21 	.word	0x08006a21
 8006984:	08006a6b 	.word	0x08006a6b
 8006988:	08006999 	.word	0x08006999
 800698c:	08006999 	.word	0x08006999
 8006990:	08006a0d 	.word	0x08006a0d
 8006994:	08006a21 	.word	0x08006a21
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800699e:	f043 0301 	orr.w	r3, r3, #1
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	18d1      	adds	r1, r2, r3
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069b8:	f7ff ff5c 	bl	8006874 <prvInsertTimerInActiveList>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d069      	beq.n	8006a96 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069d0:	f003 0304 	and.w	r3, r3, #4
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d05e      	beq.n	8006a96 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	441a      	add	r2, r3
 80069e0:	2300      	movs	r3, #0
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	2300      	movs	r3, #0
 80069e6:	2100      	movs	r1, #0
 80069e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ea:	f7ff fe05 	bl	80065f8 <xTimerGenericCommand>
 80069ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d14f      	bne.n	8006a96 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	61bb      	str	r3, [r7, #24]
}
 8006a08:	bf00      	nop
 8006a0a:	e7fe      	b.n	8006a0a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a12:	f023 0301 	bic.w	r3, r3, #1
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006a1e:	e03a      	b.n	8006a96 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a26:	f043 0301 	orr.w	r3, r3, #1
 8006a2a:	b2da      	uxtb	r2, r3
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a36:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3a:	699b      	ldr	r3, [r3, #24]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	617b      	str	r3, [r7, #20]
}
 8006a52:	bf00      	nop
 8006a54:	e7fe      	b.n	8006a54 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a58:	699a      	ldr	r2, [r3, #24]
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	18d1      	adds	r1, r2, r3
 8006a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a64:	f7ff ff06 	bl	8006874 <prvInsertTimerInActiveList>
					break;
 8006a68:	e015      	b.n	8006a96 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d103      	bne.n	8006a80 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a7a:	f000 fbe1 	bl	8007240 <vPortFree>
 8006a7e:	e00a      	b.n	8006a96 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a86:	f023 0301 	bic.w	r3, r3, #1
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006a92:	e000      	b.n	8006a96 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006a94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006a96:	4b08      	ldr	r3, [pc, #32]	; (8006ab8 <prvProcessReceivedCommands+0x1c0>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	1d39      	adds	r1, r7, #4
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7fe fb04 	bl	80050ac <xQueueReceive>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f47f af2a 	bne.w	8006900 <prvProcessReceivedCommands+0x8>
	}
}
 8006aac:	bf00      	nop
 8006aae:	bf00      	nop
 8006ab0:	3730      	adds	r7, #48	; 0x30
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20000d44 	.word	0x20000d44

08006abc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b088      	sub	sp, #32
 8006ac0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006ac2:	e048      	b.n	8006b56 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ac4:	4b2d      	ldr	r3, [pc, #180]	; (8006b7c <prvSwitchTimerLists+0xc0>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ace:	4b2b      	ldr	r3, [pc, #172]	; (8006b7c <prvSwitchTimerLists+0xc0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	3304      	adds	r3, #4
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7fe f81d 	bl	8004b1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006af0:	f003 0304 	and.w	r3, r3, #4
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d02e      	beq.n	8006b56 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	4413      	add	r3, r2
 8006b00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d90e      	bls.n	8006b28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b16:	4b19      	ldr	r3, [pc, #100]	; (8006b7c <prvSwitchTimerLists+0xc0>)
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	3304      	adds	r3, #4
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4610      	mov	r0, r2
 8006b22:	f7fd ffc2 	bl	8004aaa <vListInsert>
 8006b26:	e016      	b.n	8006b56 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b28:	2300      	movs	r3, #0
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	2100      	movs	r1, #0
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f7ff fd60 	bl	80065f8 <xTimerGenericCommand>
 8006b38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10a      	bne.n	8006b56 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	603b      	str	r3, [r7, #0]
}
 8006b52:	bf00      	nop
 8006b54:	e7fe      	b.n	8006b54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b56:	4b09      	ldr	r3, [pc, #36]	; (8006b7c <prvSwitchTimerLists+0xc0>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1b1      	bne.n	8006ac4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006b60:	4b06      	ldr	r3, [pc, #24]	; (8006b7c <prvSwitchTimerLists+0xc0>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006b66:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <prvSwitchTimerLists+0xc4>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a04      	ldr	r2, [pc, #16]	; (8006b7c <prvSwitchTimerLists+0xc0>)
 8006b6c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006b6e:	4a04      	ldr	r2, [pc, #16]	; (8006b80 <prvSwitchTimerLists+0xc4>)
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	6013      	str	r3, [r2, #0]
}
 8006b74:	bf00      	nop
 8006b76:	3718      	adds	r7, #24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	20000d3c 	.word	0x20000d3c
 8006b80:	20000d40 	.word	0x20000d40

08006b84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006b8a:	f000 f96b 	bl	8006e64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006b8e:	4b15      	ldr	r3, [pc, #84]	; (8006be4 <prvCheckForValidListAndQueue+0x60>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d120      	bne.n	8006bd8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006b96:	4814      	ldr	r0, [pc, #80]	; (8006be8 <prvCheckForValidListAndQueue+0x64>)
 8006b98:	f7fd ff36 	bl	8004a08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b9c:	4813      	ldr	r0, [pc, #76]	; (8006bec <prvCheckForValidListAndQueue+0x68>)
 8006b9e:	f7fd ff33 	bl	8004a08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ba2:	4b13      	ldr	r3, [pc, #76]	; (8006bf0 <prvCheckForValidListAndQueue+0x6c>)
 8006ba4:	4a10      	ldr	r2, [pc, #64]	; (8006be8 <prvCheckForValidListAndQueue+0x64>)
 8006ba6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ba8:	4b12      	ldr	r3, [pc, #72]	; (8006bf4 <prvCheckForValidListAndQueue+0x70>)
 8006baa:	4a10      	ldr	r2, [pc, #64]	; (8006bec <prvCheckForValidListAndQueue+0x68>)
 8006bac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006bae:	2300      	movs	r3, #0
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	4b11      	ldr	r3, [pc, #68]	; (8006bf8 <prvCheckForValidListAndQueue+0x74>)
 8006bb4:	4a11      	ldr	r2, [pc, #68]	; (8006bfc <prvCheckForValidListAndQueue+0x78>)
 8006bb6:	2110      	movs	r1, #16
 8006bb8:	200a      	movs	r0, #10
 8006bba:	f7fe f841 	bl	8004c40 <xQueueGenericCreateStatic>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	4a08      	ldr	r2, [pc, #32]	; (8006be4 <prvCheckForValidListAndQueue+0x60>)
 8006bc2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006bc4:	4b07      	ldr	r3, [pc, #28]	; (8006be4 <prvCheckForValidListAndQueue+0x60>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d005      	beq.n	8006bd8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006bcc:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <prvCheckForValidListAndQueue+0x60>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	490b      	ldr	r1, [pc, #44]	; (8006c00 <prvCheckForValidListAndQueue+0x7c>)
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fe fc5a 	bl	800548c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bd8:	f000 f974 	bl	8006ec4 <vPortExitCritical>
}
 8006bdc:	bf00      	nop
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20000d44 	.word	0x20000d44
 8006be8:	20000d14 	.word	0x20000d14
 8006bec:	20000d28 	.word	0x20000d28
 8006bf0:	20000d3c 	.word	0x20000d3c
 8006bf4:	20000d40 	.word	0x20000d40
 8006bf8:	20000df0 	.word	0x20000df0
 8006bfc:	20000d50 	.word	0x20000d50
 8006c00:	08007eec 	.word	0x08007eec

08006c04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c04:	b480      	push	{r7}
 8006c06:	b085      	sub	sp, #20
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	3b04      	subs	r3, #4
 8006c14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006c1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	3b04      	subs	r3, #4
 8006c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	f023 0201 	bic.w	r2, r3, #1
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3b04      	subs	r3, #4
 8006c32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006c34:	4a0c      	ldr	r2, [pc, #48]	; (8006c68 <pxPortInitialiseStack+0x64>)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	3b14      	subs	r3, #20
 8006c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3b04      	subs	r3, #4
 8006c4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f06f 0202 	mvn.w	r2, #2
 8006c52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3b20      	subs	r3, #32
 8006c58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr
 8006c68:	08006c6d 	.word	0x08006c6d

08006c6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b085      	sub	sp, #20
 8006c70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006c72:	2300      	movs	r3, #0
 8006c74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006c76:	4b12      	ldr	r3, [pc, #72]	; (8006cc0 <prvTaskExitError+0x54>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7e:	d00a      	beq.n	8006c96 <prvTaskExitError+0x2a>
	__asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	60fb      	str	r3, [r7, #12]
}
 8006c92:	bf00      	nop
 8006c94:	e7fe      	b.n	8006c94 <prvTaskExitError+0x28>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	60bb      	str	r3, [r7, #8]
}
 8006ca8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006caa:	bf00      	nop
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d0fc      	beq.n	8006cac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006cb2:	bf00      	nop
 8006cb4:	bf00      	nop
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	2000000c 	.word	0x2000000c
	...

08006cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006cd0:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <pxCurrentTCBConst2>)
 8006cd2:	6819      	ldr	r1, [r3, #0]
 8006cd4:	6808      	ldr	r0, [r1, #0]
 8006cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cda:	f380 8809 	msr	PSP, r0
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f04f 0000 	mov.w	r0, #0
 8006ce6:	f380 8811 	msr	BASEPRI, r0
 8006cea:	4770      	bx	lr
 8006cec:	f3af 8000 	nop.w

08006cf0 <pxCurrentTCBConst2>:
 8006cf0:	20000814 	.word	0x20000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop

08006cf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006cf8:	4808      	ldr	r0, [pc, #32]	; (8006d1c <prvPortStartFirstTask+0x24>)
 8006cfa:	6800      	ldr	r0, [r0, #0]
 8006cfc:	6800      	ldr	r0, [r0, #0]
 8006cfe:	f380 8808 	msr	MSP, r0
 8006d02:	f04f 0000 	mov.w	r0, #0
 8006d06:	f380 8814 	msr	CONTROL, r0
 8006d0a:	b662      	cpsie	i
 8006d0c:	b661      	cpsie	f
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	df00      	svc	0
 8006d18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d1a:	bf00      	nop
 8006d1c:	e000ed08 	.word	0xe000ed08

08006d20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d26:	4b46      	ldr	r3, [pc, #280]	; (8006e40 <xPortStartScheduler+0x120>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a46      	ldr	r2, [pc, #280]	; (8006e44 <xPortStartScheduler+0x124>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d10a      	bne.n	8006d46 <xPortStartScheduler+0x26>
	__asm volatile
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	613b      	str	r3, [r7, #16]
}
 8006d42:	bf00      	nop
 8006d44:	e7fe      	b.n	8006d44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d46:	4b3e      	ldr	r3, [pc, #248]	; (8006e40 <xPortStartScheduler+0x120>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a3f      	ldr	r2, [pc, #252]	; (8006e48 <xPortStartScheduler+0x128>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d10a      	bne.n	8006d66 <xPortStartScheduler+0x46>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	60fb      	str	r3, [r7, #12]
}
 8006d62:	bf00      	nop
 8006d64:	e7fe      	b.n	8006d64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006d66:	4b39      	ldr	r3, [pc, #228]	; (8006e4c <xPortStartScheduler+0x12c>)
 8006d68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	22ff      	movs	r2, #255	; 0xff
 8006d76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006d80:	78fb      	ldrb	r3, [r7, #3]
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d88:	b2da      	uxtb	r2, r3
 8006d8a:	4b31      	ldr	r3, [pc, #196]	; (8006e50 <xPortStartScheduler+0x130>)
 8006d8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006d8e:	4b31      	ldr	r3, [pc, #196]	; (8006e54 <xPortStartScheduler+0x134>)
 8006d90:	2207      	movs	r2, #7
 8006d92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d94:	e009      	b.n	8006daa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006d96:	4b2f      	ldr	r3, [pc, #188]	; (8006e54 <xPortStartScheduler+0x134>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	4a2d      	ldr	r2, [pc, #180]	; (8006e54 <xPortStartScheduler+0x134>)
 8006d9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006da0:	78fb      	ldrb	r3, [r7, #3]
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006daa:	78fb      	ldrb	r3, [r7, #3]
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db2:	2b80      	cmp	r3, #128	; 0x80
 8006db4:	d0ef      	beq.n	8006d96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006db6:	4b27      	ldr	r3, [pc, #156]	; (8006e54 <xPortStartScheduler+0x134>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f1c3 0307 	rsb	r3, r3, #7
 8006dbe:	2b04      	cmp	r3, #4
 8006dc0:	d00a      	beq.n	8006dd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	60bb      	str	r3, [r7, #8]
}
 8006dd4:	bf00      	nop
 8006dd6:	e7fe      	b.n	8006dd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006dd8:	4b1e      	ldr	r3, [pc, #120]	; (8006e54 <xPortStartScheduler+0x134>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	021b      	lsls	r3, r3, #8
 8006dde:	4a1d      	ldr	r2, [pc, #116]	; (8006e54 <xPortStartScheduler+0x134>)
 8006de0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006de2:	4b1c      	ldr	r3, [pc, #112]	; (8006e54 <xPortStartScheduler+0x134>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006dea:	4a1a      	ldr	r2, [pc, #104]	; (8006e54 <xPortStartScheduler+0x134>)
 8006dec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006df6:	4b18      	ldr	r3, [pc, #96]	; (8006e58 <xPortStartScheduler+0x138>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a17      	ldr	r2, [pc, #92]	; (8006e58 <xPortStartScheduler+0x138>)
 8006dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e02:	4b15      	ldr	r3, [pc, #84]	; (8006e58 <xPortStartScheduler+0x138>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a14      	ldr	r2, [pc, #80]	; (8006e58 <xPortStartScheduler+0x138>)
 8006e08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006e0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e0e:	f000 f8dd 	bl	8006fcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e12:	4b12      	ldr	r3, [pc, #72]	; (8006e5c <xPortStartScheduler+0x13c>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e18:	f000 f8fc 	bl	8007014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e1c:	4b10      	ldr	r3, [pc, #64]	; (8006e60 <xPortStartScheduler+0x140>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a0f      	ldr	r2, [pc, #60]	; (8006e60 <xPortStartScheduler+0x140>)
 8006e22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006e26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e28:	f7ff ff66 	bl	8006cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006e2c:	f7ff f836 	bl	8005e9c <vTaskSwitchContext>
	prvTaskExitError();
 8006e30:	f7ff ff1c 	bl	8006c6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	e000ed00 	.word	0xe000ed00
 8006e44:	410fc271 	.word	0x410fc271
 8006e48:	410fc270 	.word	0x410fc270
 8006e4c:	e000e400 	.word	0xe000e400
 8006e50:	20000e40 	.word	0x20000e40
 8006e54:	20000e44 	.word	0x20000e44
 8006e58:	e000ed20 	.word	0xe000ed20
 8006e5c:	2000000c 	.word	0x2000000c
 8006e60:	e000ef34 	.word	0xe000ef34

08006e64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
	__asm volatile
 8006e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	607b      	str	r3, [r7, #4]
}
 8006e7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006e7e:	4b0f      	ldr	r3, [pc, #60]	; (8006ebc <vPortEnterCritical+0x58>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3301      	adds	r3, #1
 8006e84:	4a0d      	ldr	r2, [pc, #52]	; (8006ebc <vPortEnterCritical+0x58>)
 8006e86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006e88:	4b0c      	ldr	r3, [pc, #48]	; (8006ebc <vPortEnterCritical+0x58>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d10f      	bne.n	8006eb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e90:	4b0b      	ldr	r3, [pc, #44]	; (8006ec0 <vPortEnterCritical+0x5c>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	603b      	str	r3, [r7, #0]
}
 8006eac:	bf00      	nop
 8006eae:	e7fe      	b.n	8006eae <vPortEnterCritical+0x4a>
	}
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	2000000c 	.word	0x2000000c
 8006ec0:	e000ed04 	.word	0xe000ed04

08006ec4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006eca:	4b12      	ldr	r3, [pc, #72]	; (8006f14 <vPortExitCritical+0x50>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10a      	bne.n	8006ee8 <vPortExitCritical+0x24>
	__asm volatile
 8006ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	607b      	str	r3, [r7, #4]
}
 8006ee4:	bf00      	nop
 8006ee6:	e7fe      	b.n	8006ee6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ee8:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <vPortExitCritical+0x50>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3b01      	subs	r3, #1
 8006eee:	4a09      	ldr	r2, [pc, #36]	; (8006f14 <vPortExitCritical+0x50>)
 8006ef0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ef2:	4b08      	ldr	r3, [pc, #32]	; (8006f14 <vPortExitCritical+0x50>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d105      	bne.n	8006f06 <vPortExitCritical+0x42>
 8006efa:	2300      	movs	r3, #0
 8006efc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	f383 8811 	msr	BASEPRI, r3
}
 8006f04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	2000000c 	.word	0x2000000c
	...

08006f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f20:	f3ef 8009 	mrs	r0, PSP
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	4b15      	ldr	r3, [pc, #84]	; (8006f80 <pxCurrentTCBConst>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	f01e 0f10 	tst.w	lr, #16
 8006f30:	bf08      	it	eq
 8006f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3a:	6010      	str	r0, [r2, #0]
 8006f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006f44:	f380 8811 	msr	BASEPRI, r0
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f7fe ffa4 	bl	8005e9c <vTaskSwitchContext>
 8006f54:	f04f 0000 	mov.w	r0, #0
 8006f58:	f380 8811 	msr	BASEPRI, r0
 8006f5c:	bc09      	pop	{r0, r3}
 8006f5e:	6819      	ldr	r1, [r3, #0]
 8006f60:	6808      	ldr	r0, [r1, #0]
 8006f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f66:	f01e 0f10 	tst.w	lr, #16
 8006f6a:	bf08      	it	eq
 8006f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f70:	f380 8809 	msr	PSP, r0
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	f3af 8000 	nop.w

08006f80 <pxCurrentTCBConst>:
 8006f80:	20000814 	.word	0x20000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006f84:	bf00      	nop
 8006f86:	bf00      	nop

08006f88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	607b      	str	r3, [r7, #4]
}
 8006fa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006fa2:	f7fe fec1 	bl	8005d28 <xTaskIncrementTick>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fac:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <xPortSysTickHandler+0x40>)
 8006fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	f383 8811 	msr	BASEPRI, r3
}
 8006fbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006fc0:	bf00      	nop
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	e000ed04 	.word	0xe000ed04

08006fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006fcc:	b480      	push	{r7}
 8006fce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006fd0:	4b0b      	ldr	r3, [pc, #44]	; (8007000 <vPortSetupTimerInterrupt+0x34>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006fd6:	4b0b      	ldr	r3, [pc, #44]	; (8007004 <vPortSetupTimerInterrupt+0x38>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006fdc:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <vPortSetupTimerInterrupt+0x3c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a0a      	ldr	r2, [pc, #40]	; (800700c <vPortSetupTimerInterrupt+0x40>)
 8006fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe6:	099b      	lsrs	r3, r3, #6
 8006fe8:	4a09      	ldr	r2, [pc, #36]	; (8007010 <vPortSetupTimerInterrupt+0x44>)
 8006fea:	3b01      	subs	r3, #1
 8006fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006fee:	4b04      	ldr	r3, [pc, #16]	; (8007000 <vPortSetupTimerInterrupt+0x34>)
 8006ff0:	2207      	movs	r2, #7
 8006ff2:	601a      	str	r2, [r3, #0]
}
 8006ff4:	bf00      	nop
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	e000e010 	.word	0xe000e010
 8007004:	e000e018 	.word	0xe000e018
 8007008:	20000000 	.word	0x20000000
 800700c:	10624dd3 	.word	0x10624dd3
 8007010:	e000e014 	.word	0xe000e014

08007014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007014:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007024 <vPortEnableVFP+0x10>
 8007018:	6801      	ldr	r1, [r0, #0]
 800701a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800701e:	6001      	str	r1, [r0, #0]
 8007020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007022:	bf00      	nop
 8007024:	e000ed88 	.word	0xe000ed88

08007028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800702e:	f3ef 8305 	mrs	r3, IPSR
 8007032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2b0f      	cmp	r3, #15
 8007038:	d914      	bls.n	8007064 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800703a:	4a17      	ldr	r2, [pc, #92]	; (8007098 <vPortValidateInterruptPriority+0x70>)
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4413      	add	r3, r2
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007044:	4b15      	ldr	r3, [pc, #84]	; (800709c <vPortValidateInterruptPriority+0x74>)
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	7afa      	ldrb	r2, [r7, #11]
 800704a:	429a      	cmp	r2, r3
 800704c:	d20a      	bcs.n	8007064 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	607b      	str	r3, [r7, #4]
}
 8007060:	bf00      	nop
 8007062:	e7fe      	b.n	8007062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007064:	4b0e      	ldr	r3, [pc, #56]	; (80070a0 <vPortValidateInterruptPriority+0x78>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800706c:	4b0d      	ldr	r3, [pc, #52]	; (80070a4 <vPortValidateInterruptPriority+0x7c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	429a      	cmp	r2, r3
 8007072:	d90a      	bls.n	800708a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007078:	f383 8811 	msr	BASEPRI, r3
 800707c:	f3bf 8f6f 	isb	sy
 8007080:	f3bf 8f4f 	dsb	sy
 8007084:	603b      	str	r3, [r7, #0]
}
 8007086:	bf00      	nop
 8007088:	e7fe      	b.n	8007088 <vPortValidateInterruptPriority+0x60>
	}
 800708a:	bf00      	nop
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	e000e3f0 	.word	0xe000e3f0
 800709c:	20000e40 	.word	0x20000e40
 80070a0:	e000ed0c 	.word	0xe000ed0c
 80070a4:	20000e44 	.word	0x20000e44

080070a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08a      	sub	sp, #40	; 0x28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070b0:	2300      	movs	r3, #0
 80070b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80070b4:	f7fe fd7c 	bl	8005bb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80070b8:	4b5b      	ldr	r3, [pc, #364]	; (8007228 <pvPortMalloc+0x180>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80070c0:	f000 f920 	bl	8007304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070c4:	4b59      	ldr	r3, [pc, #356]	; (800722c <pvPortMalloc+0x184>)
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4013      	ands	r3, r2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f040 8093 	bne.w	80071f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d01d      	beq.n	8007114 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80070d8:	2208      	movs	r2, #8
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4413      	add	r3, r2
 80070de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f003 0307 	and.w	r3, r3, #7
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d014      	beq.n	8007114 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f023 0307 	bic.w	r3, r3, #7
 80070f0:	3308      	adds	r3, #8
 80070f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f003 0307 	and.w	r3, r3, #7
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d00a      	beq.n	8007114 <pvPortMalloc+0x6c>
	__asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	617b      	str	r3, [r7, #20]
}
 8007110:	bf00      	nop
 8007112:	e7fe      	b.n	8007112 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d06e      	beq.n	80071f8 <pvPortMalloc+0x150>
 800711a:	4b45      	ldr	r3, [pc, #276]	; (8007230 <pvPortMalloc+0x188>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	429a      	cmp	r2, r3
 8007122:	d869      	bhi.n	80071f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007124:	4b43      	ldr	r3, [pc, #268]	; (8007234 <pvPortMalloc+0x18c>)
 8007126:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007128:	4b42      	ldr	r3, [pc, #264]	; (8007234 <pvPortMalloc+0x18c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800712e:	e004      	b.n	800713a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007132:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	429a      	cmp	r2, r3
 8007142:	d903      	bls.n	800714c <pvPortMalloc+0xa4>
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1f1      	bne.n	8007130 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800714c:	4b36      	ldr	r3, [pc, #216]	; (8007228 <pvPortMalloc+0x180>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007152:	429a      	cmp	r2, r3
 8007154:	d050      	beq.n	80071f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2208      	movs	r2, #8
 800715c:	4413      	add	r3, r2
 800715e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	6a3b      	ldr	r3, [r7, #32]
 8007166:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	685a      	ldr	r2, [r3, #4]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	1ad2      	subs	r2, r2, r3
 8007170:	2308      	movs	r3, #8
 8007172:	005b      	lsls	r3, r3, #1
 8007174:	429a      	cmp	r2, r3
 8007176:	d91f      	bls.n	80071b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4413      	add	r3, r2
 800717e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00a      	beq.n	80071a0 <pvPortMalloc+0xf8>
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	613b      	str	r3, [r7, #16]
}
 800719c:	bf00      	nop
 800719e:	e7fe      	b.n	800719e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	1ad2      	subs	r2, r2, r3
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071b2:	69b8      	ldr	r0, [r7, #24]
 80071b4:	f000 f908 	bl	80073c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071b8:	4b1d      	ldr	r3, [pc, #116]	; (8007230 <pvPortMalloc+0x188>)
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	4a1b      	ldr	r2, [pc, #108]	; (8007230 <pvPortMalloc+0x188>)
 80071c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071c6:	4b1a      	ldr	r3, [pc, #104]	; (8007230 <pvPortMalloc+0x188>)
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	4b1b      	ldr	r3, [pc, #108]	; (8007238 <pvPortMalloc+0x190>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d203      	bcs.n	80071da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071d2:	4b17      	ldr	r3, [pc, #92]	; (8007230 <pvPortMalloc+0x188>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a18      	ldr	r2, [pc, #96]	; (8007238 <pvPortMalloc+0x190>)
 80071d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	4b13      	ldr	r3, [pc, #76]	; (800722c <pvPortMalloc+0x184>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	431a      	orrs	r2, r3
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80071e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80071ee:	4b13      	ldr	r3, [pc, #76]	; (800723c <pvPortMalloc+0x194>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3301      	adds	r3, #1
 80071f4:	4a11      	ldr	r2, [pc, #68]	; (800723c <pvPortMalloc+0x194>)
 80071f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80071f8:	f7fe fce8 	bl	8005bcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	f003 0307 	and.w	r3, r3, #7
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <pvPortMalloc+0x174>
	__asm volatile
 8007206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720a:	f383 8811 	msr	BASEPRI, r3
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	f3bf 8f4f 	dsb	sy
 8007216:	60fb      	str	r3, [r7, #12]
}
 8007218:	bf00      	nop
 800721a:	e7fe      	b.n	800721a <pvPortMalloc+0x172>
	return pvReturn;
 800721c:	69fb      	ldr	r3, [r7, #28]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3728      	adds	r7, #40	; 0x28
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	20004a50 	.word	0x20004a50
 800722c:	20004a64 	.word	0x20004a64
 8007230:	20004a54 	.word	0x20004a54
 8007234:	20004a48 	.word	0x20004a48
 8007238:	20004a58 	.word	0x20004a58
 800723c:	20004a5c 	.word	0x20004a5c

08007240 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d04d      	beq.n	80072ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007252:	2308      	movs	r3, #8
 8007254:	425b      	negs	r3, r3
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	4413      	add	r3, r2
 800725a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	4b24      	ldr	r3, [pc, #144]	; (80072f8 <vPortFree+0xb8>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4013      	ands	r3, r2
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10a      	bne.n	8007284 <vPortFree+0x44>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	60fb      	str	r3, [r7, #12]
}
 8007280:	bf00      	nop
 8007282:	e7fe      	b.n	8007282 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00a      	beq.n	80072a2 <vPortFree+0x62>
	__asm volatile
 800728c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	60bb      	str	r3, [r7, #8]
}
 800729e:	bf00      	nop
 80072a0:	e7fe      	b.n	80072a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	685a      	ldr	r2, [r3, #4]
 80072a6:	4b14      	ldr	r3, [pc, #80]	; (80072f8 <vPortFree+0xb8>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4013      	ands	r3, r2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d01e      	beq.n	80072ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d11a      	bne.n	80072ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	4b0e      	ldr	r3, [pc, #56]	; (80072f8 <vPortFree+0xb8>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	43db      	mvns	r3, r3
 80072c2:	401a      	ands	r2, r3
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072c8:	f7fe fc72 	bl	8005bb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <vPortFree+0xbc>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4413      	add	r3, r2
 80072d6:	4a09      	ldr	r2, [pc, #36]	; (80072fc <vPortFree+0xbc>)
 80072d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072da:	6938      	ldr	r0, [r7, #16]
 80072dc:	f000 f874 	bl	80073c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80072e0:	4b07      	ldr	r3, [pc, #28]	; (8007300 <vPortFree+0xc0>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3301      	adds	r3, #1
 80072e6:	4a06      	ldr	r2, [pc, #24]	; (8007300 <vPortFree+0xc0>)
 80072e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80072ea:	f7fe fc6f 	bl	8005bcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80072ee:	bf00      	nop
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	20004a64 	.word	0x20004a64
 80072fc:	20004a54 	.word	0x20004a54
 8007300:	20004a60 	.word	0x20004a60

08007304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800730a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800730e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007310:	4b27      	ldr	r3, [pc, #156]	; (80073b0 <prvHeapInit+0xac>)
 8007312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f003 0307 	and.w	r3, r3, #7
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00c      	beq.n	8007338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3307      	adds	r3, #7
 8007322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0307 	bic.w	r3, r3, #7
 800732a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	4a1f      	ldr	r2, [pc, #124]	; (80073b0 <prvHeapInit+0xac>)
 8007334:	4413      	add	r3, r2
 8007336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800733c:	4a1d      	ldr	r2, [pc, #116]	; (80073b4 <prvHeapInit+0xb0>)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007342:	4b1c      	ldr	r3, [pc, #112]	; (80073b4 <prvHeapInit+0xb0>)
 8007344:	2200      	movs	r2, #0
 8007346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	4413      	add	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007350:	2208      	movs	r2, #8
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	1a9b      	subs	r3, r3, r2
 8007356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f023 0307 	bic.w	r3, r3, #7
 800735e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4a15      	ldr	r2, [pc, #84]	; (80073b8 <prvHeapInit+0xb4>)
 8007364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007366:	4b14      	ldr	r3, [pc, #80]	; (80073b8 <prvHeapInit+0xb4>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2200      	movs	r2, #0
 800736c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800736e:	4b12      	ldr	r3, [pc, #72]	; (80073b8 <prvHeapInit+0xb4>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2200      	movs	r2, #0
 8007374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	1ad2      	subs	r2, r2, r3
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007384:	4b0c      	ldr	r3, [pc, #48]	; (80073b8 <prvHeapInit+0xb4>)
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	4a0a      	ldr	r2, [pc, #40]	; (80073bc <prvHeapInit+0xb8>)
 8007392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	4a09      	ldr	r2, [pc, #36]	; (80073c0 <prvHeapInit+0xbc>)
 800739a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800739c:	4b09      	ldr	r3, [pc, #36]	; (80073c4 <prvHeapInit+0xc0>)
 800739e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80073a2:	601a      	str	r2, [r3, #0]
}
 80073a4:	bf00      	nop
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	20000e48 	.word	0x20000e48
 80073b4:	20004a48 	.word	0x20004a48
 80073b8:	20004a50 	.word	0x20004a50
 80073bc:	20004a58 	.word	0x20004a58
 80073c0:	20004a54 	.word	0x20004a54
 80073c4:	20004a64 	.word	0x20004a64

080073c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073d0:	4b28      	ldr	r3, [pc, #160]	; (8007474 <prvInsertBlockIntoFreeList+0xac>)
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	e002      	b.n	80073dc <prvInsertBlockIntoFreeList+0x14>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	60fb      	str	r3, [r7, #12]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d8f7      	bhi.n	80073d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	4413      	add	r3, r2
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d108      	bne.n	800740a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	441a      	add	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	441a      	add	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	429a      	cmp	r2, r3
 800741c:	d118      	bne.n	8007450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	4b15      	ldr	r3, [pc, #84]	; (8007478 <prvInsertBlockIntoFreeList+0xb0>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	429a      	cmp	r2, r3
 8007428:	d00d      	beq.n	8007446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685a      	ldr	r2, [r3, #4]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	441a      	add	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	601a      	str	r2, [r3, #0]
 8007444:	e008      	b.n	8007458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007446:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <prvInsertBlockIntoFreeList+0xb0>)
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	e003      	b.n	8007458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	429a      	cmp	r2, r3
 800745e:	d002      	beq.n	8007466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007466:	bf00      	nop
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	20004a48 	.word	0x20004a48
 8007478:	20004a50 	.word	0x20004a50

0800747c <__errno>:
 800747c:	4b01      	ldr	r3, [pc, #4]	; (8007484 <__errno+0x8>)
 800747e:	6818      	ldr	r0, [r3, #0]
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	20000010 	.word	0x20000010

08007488 <__libc_init_array>:
 8007488:	b570      	push	{r4, r5, r6, lr}
 800748a:	4d0d      	ldr	r5, [pc, #52]	; (80074c0 <__libc_init_array+0x38>)
 800748c:	4c0d      	ldr	r4, [pc, #52]	; (80074c4 <__libc_init_array+0x3c>)
 800748e:	1b64      	subs	r4, r4, r5
 8007490:	10a4      	asrs	r4, r4, #2
 8007492:	2600      	movs	r6, #0
 8007494:	42a6      	cmp	r6, r4
 8007496:	d109      	bne.n	80074ac <__libc_init_array+0x24>
 8007498:	4d0b      	ldr	r5, [pc, #44]	; (80074c8 <__libc_init_array+0x40>)
 800749a:	4c0c      	ldr	r4, [pc, #48]	; (80074cc <__libc_init_array+0x44>)
 800749c:	f000 fcb8 	bl	8007e10 <_init>
 80074a0:	1b64      	subs	r4, r4, r5
 80074a2:	10a4      	asrs	r4, r4, #2
 80074a4:	2600      	movs	r6, #0
 80074a6:	42a6      	cmp	r6, r4
 80074a8:	d105      	bne.n	80074b6 <__libc_init_array+0x2e>
 80074aa:	bd70      	pop	{r4, r5, r6, pc}
 80074ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80074b0:	4798      	blx	r3
 80074b2:	3601      	adds	r6, #1
 80074b4:	e7ee      	b.n	8007494 <__libc_init_array+0xc>
 80074b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80074ba:	4798      	blx	r3
 80074bc:	3601      	adds	r6, #1
 80074be:	e7f2      	b.n	80074a6 <__libc_init_array+0x1e>
 80074c0:	08007ff0 	.word	0x08007ff0
 80074c4:	08007ff0 	.word	0x08007ff0
 80074c8:	08007ff0 	.word	0x08007ff0
 80074cc:	08007ff4 	.word	0x08007ff4

080074d0 <__retarget_lock_acquire_recursive>:
 80074d0:	4770      	bx	lr

080074d2 <__retarget_lock_release_recursive>:
 80074d2:	4770      	bx	lr

080074d4 <memcpy>:
 80074d4:	440a      	add	r2, r1
 80074d6:	4291      	cmp	r1, r2
 80074d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80074dc:	d100      	bne.n	80074e0 <memcpy+0xc>
 80074de:	4770      	bx	lr
 80074e0:	b510      	push	{r4, lr}
 80074e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074ea:	4291      	cmp	r1, r2
 80074ec:	d1f9      	bne.n	80074e2 <memcpy+0xe>
 80074ee:	bd10      	pop	{r4, pc}

080074f0 <memset>:
 80074f0:	4402      	add	r2, r0
 80074f2:	4603      	mov	r3, r0
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d100      	bne.n	80074fa <memset+0xa>
 80074f8:	4770      	bx	lr
 80074fa:	f803 1b01 	strb.w	r1, [r3], #1
 80074fe:	e7f9      	b.n	80074f4 <memset+0x4>

08007500 <_malloc_r>:
 8007500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007502:	1ccd      	adds	r5, r1, #3
 8007504:	f025 0503 	bic.w	r5, r5, #3
 8007508:	3508      	adds	r5, #8
 800750a:	2d0c      	cmp	r5, #12
 800750c:	bf38      	it	cc
 800750e:	250c      	movcc	r5, #12
 8007510:	2d00      	cmp	r5, #0
 8007512:	4606      	mov	r6, r0
 8007514:	db01      	blt.n	800751a <_malloc_r+0x1a>
 8007516:	42a9      	cmp	r1, r5
 8007518:	d903      	bls.n	8007522 <_malloc_r+0x22>
 800751a:	230c      	movs	r3, #12
 800751c:	6033      	str	r3, [r6, #0]
 800751e:	2000      	movs	r0, #0
 8007520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007522:	f000 f8e1 	bl	80076e8 <__malloc_lock>
 8007526:	4921      	ldr	r1, [pc, #132]	; (80075ac <_malloc_r+0xac>)
 8007528:	680a      	ldr	r2, [r1, #0]
 800752a:	4614      	mov	r4, r2
 800752c:	b99c      	cbnz	r4, 8007556 <_malloc_r+0x56>
 800752e:	4f20      	ldr	r7, [pc, #128]	; (80075b0 <_malloc_r+0xb0>)
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	b923      	cbnz	r3, 800753e <_malloc_r+0x3e>
 8007534:	4621      	mov	r1, r4
 8007536:	4630      	mov	r0, r6
 8007538:	f000 f8a6 	bl	8007688 <_sbrk_r>
 800753c:	6038      	str	r0, [r7, #0]
 800753e:	4629      	mov	r1, r5
 8007540:	4630      	mov	r0, r6
 8007542:	f000 f8a1 	bl	8007688 <_sbrk_r>
 8007546:	1c43      	adds	r3, r0, #1
 8007548:	d123      	bne.n	8007592 <_malloc_r+0x92>
 800754a:	230c      	movs	r3, #12
 800754c:	6033      	str	r3, [r6, #0]
 800754e:	4630      	mov	r0, r6
 8007550:	f000 f8d0 	bl	80076f4 <__malloc_unlock>
 8007554:	e7e3      	b.n	800751e <_malloc_r+0x1e>
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	1b5b      	subs	r3, r3, r5
 800755a:	d417      	bmi.n	800758c <_malloc_r+0x8c>
 800755c:	2b0b      	cmp	r3, #11
 800755e:	d903      	bls.n	8007568 <_malloc_r+0x68>
 8007560:	6023      	str	r3, [r4, #0]
 8007562:	441c      	add	r4, r3
 8007564:	6025      	str	r5, [r4, #0]
 8007566:	e004      	b.n	8007572 <_malloc_r+0x72>
 8007568:	6863      	ldr	r3, [r4, #4]
 800756a:	42a2      	cmp	r2, r4
 800756c:	bf0c      	ite	eq
 800756e:	600b      	streq	r3, [r1, #0]
 8007570:	6053      	strne	r3, [r2, #4]
 8007572:	4630      	mov	r0, r6
 8007574:	f000 f8be 	bl	80076f4 <__malloc_unlock>
 8007578:	f104 000b 	add.w	r0, r4, #11
 800757c:	1d23      	adds	r3, r4, #4
 800757e:	f020 0007 	bic.w	r0, r0, #7
 8007582:	1ac2      	subs	r2, r0, r3
 8007584:	d0cc      	beq.n	8007520 <_malloc_r+0x20>
 8007586:	1a1b      	subs	r3, r3, r0
 8007588:	50a3      	str	r3, [r4, r2]
 800758a:	e7c9      	b.n	8007520 <_malloc_r+0x20>
 800758c:	4622      	mov	r2, r4
 800758e:	6864      	ldr	r4, [r4, #4]
 8007590:	e7cc      	b.n	800752c <_malloc_r+0x2c>
 8007592:	1cc4      	adds	r4, r0, #3
 8007594:	f024 0403 	bic.w	r4, r4, #3
 8007598:	42a0      	cmp	r0, r4
 800759a:	d0e3      	beq.n	8007564 <_malloc_r+0x64>
 800759c:	1a21      	subs	r1, r4, r0
 800759e:	4630      	mov	r0, r6
 80075a0:	f000 f872 	bl	8007688 <_sbrk_r>
 80075a4:	3001      	adds	r0, #1
 80075a6:	d1dd      	bne.n	8007564 <_malloc_r+0x64>
 80075a8:	e7cf      	b.n	800754a <_malloc_r+0x4a>
 80075aa:	bf00      	nop
 80075ac:	20004a68 	.word	0x20004a68
 80075b0:	20004a6c 	.word	0x20004a6c

080075b4 <cleanup_glue>:
 80075b4:	b538      	push	{r3, r4, r5, lr}
 80075b6:	460c      	mov	r4, r1
 80075b8:	6809      	ldr	r1, [r1, #0]
 80075ba:	4605      	mov	r5, r0
 80075bc:	b109      	cbz	r1, 80075c2 <cleanup_glue+0xe>
 80075be:	f7ff fff9 	bl	80075b4 <cleanup_glue>
 80075c2:	4621      	mov	r1, r4
 80075c4:	4628      	mov	r0, r5
 80075c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075ca:	f000 b899 	b.w	8007700 <_free_r>
	...

080075d0 <_reclaim_reent>:
 80075d0:	4b2c      	ldr	r3, [pc, #176]	; (8007684 <_reclaim_reent+0xb4>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4283      	cmp	r3, r0
 80075d6:	b570      	push	{r4, r5, r6, lr}
 80075d8:	4604      	mov	r4, r0
 80075da:	d051      	beq.n	8007680 <_reclaim_reent+0xb0>
 80075dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80075de:	b143      	cbz	r3, 80075f2 <_reclaim_reent+0x22>
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d14a      	bne.n	800767c <_reclaim_reent+0xac>
 80075e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80075e8:	6819      	ldr	r1, [r3, #0]
 80075ea:	b111      	cbz	r1, 80075f2 <_reclaim_reent+0x22>
 80075ec:	4620      	mov	r0, r4
 80075ee:	f000 f887 	bl	8007700 <_free_r>
 80075f2:	6961      	ldr	r1, [r4, #20]
 80075f4:	b111      	cbz	r1, 80075fc <_reclaim_reent+0x2c>
 80075f6:	4620      	mov	r0, r4
 80075f8:	f000 f882 	bl	8007700 <_free_r>
 80075fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80075fe:	b111      	cbz	r1, 8007606 <_reclaim_reent+0x36>
 8007600:	4620      	mov	r0, r4
 8007602:	f000 f87d 	bl	8007700 <_free_r>
 8007606:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007608:	b111      	cbz	r1, 8007610 <_reclaim_reent+0x40>
 800760a:	4620      	mov	r0, r4
 800760c:	f000 f878 	bl	8007700 <_free_r>
 8007610:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007612:	b111      	cbz	r1, 800761a <_reclaim_reent+0x4a>
 8007614:	4620      	mov	r0, r4
 8007616:	f000 f873 	bl	8007700 <_free_r>
 800761a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800761c:	b111      	cbz	r1, 8007624 <_reclaim_reent+0x54>
 800761e:	4620      	mov	r0, r4
 8007620:	f000 f86e 	bl	8007700 <_free_r>
 8007624:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007626:	b111      	cbz	r1, 800762e <_reclaim_reent+0x5e>
 8007628:	4620      	mov	r0, r4
 800762a:	f000 f869 	bl	8007700 <_free_r>
 800762e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007630:	b111      	cbz	r1, 8007638 <_reclaim_reent+0x68>
 8007632:	4620      	mov	r0, r4
 8007634:	f000 f864 	bl	8007700 <_free_r>
 8007638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800763a:	b111      	cbz	r1, 8007642 <_reclaim_reent+0x72>
 800763c:	4620      	mov	r0, r4
 800763e:	f000 f85f 	bl	8007700 <_free_r>
 8007642:	69a3      	ldr	r3, [r4, #24]
 8007644:	b1e3      	cbz	r3, 8007680 <_reclaim_reent+0xb0>
 8007646:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007648:	4620      	mov	r0, r4
 800764a:	4798      	blx	r3
 800764c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800764e:	b1b9      	cbz	r1, 8007680 <_reclaim_reent+0xb0>
 8007650:	4620      	mov	r0, r4
 8007652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007656:	f7ff bfad 	b.w	80075b4 <cleanup_glue>
 800765a:	5949      	ldr	r1, [r1, r5]
 800765c:	b941      	cbnz	r1, 8007670 <_reclaim_reent+0xa0>
 800765e:	3504      	adds	r5, #4
 8007660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007662:	2d80      	cmp	r5, #128	; 0x80
 8007664:	68d9      	ldr	r1, [r3, #12]
 8007666:	d1f8      	bne.n	800765a <_reclaim_reent+0x8a>
 8007668:	4620      	mov	r0, r4
 800766a:	f000 f849 	bl	8007700 <_free_r>
 800766e:	e7ba      	b.n	80075e6 <_reclaim_reent+0x16>
 8007670:	680e      	ldr	r6, [r1, #0]
 8007672:	4620      	mov	r0, r4
 8007674:	f000 f844 	bl	8007700 <_free_r>
 8007678:	4631      	mov	r1, r6
 800767a:	e7ef      	b.n	800765c <_reclaim_reent+0x8c>
 800767c:	2500      	movs	r5, #0
 800767e:	e7ef      	b.n	8007660 <_reclaim_reent+0x90>
 8007680:	bd70      	pop	{r4, r5, r6, pc}
 8007682:	bf00      	nop
 8007684:	20000010 	.word	0x20000010

08007688 <_sbrk_r>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	4d06      	ldr	r5, [pc, #24]	; (80076a4 <_sbrk_r+0x1c>)
 800768c:	2300      	movs	r3, #0
 800768e:	4604      	mov	r4, r0
 8007690:	4608      	mov	r0, r1
 8007692:	602b      	str	r3, [r5, #0]
 8007694:	f7f9 fb3c 	bl	8000d10 <_sbrk>
 8007698:	1c43      	adds	r3, r0, #1
 800769a:	d102      	bne.n	80076a2 <_sbrk_r+0x1a>
 800769c:	682b      	ldr	r3, [r5, #0]
 800769e:	b103      	cbz	r3, 80076a2 <_sbrk_r+0x1a>
 80076a0:	6023      	str	r3, [r4, #0]
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
 80076a4:	20004fec 	.word	0x20004fec

080076a8 <siprintf>:
 80076a8:	b40e      	push	{r1, r2, r3}
 80076aa:	b500      	push	{lr}
 80076ac:	b09c      	sub	sp, #112	; 0x70
 80076ae:	ab1d      	add	r3, sp, #116	; 0x74
 80076b0:	9002      	str	r0, [sp, #8]
 80076b2:	9006      	str	r0, [sp, #24]
 80076b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076b8:	4809      	ldr	r0, [pc, #36]	; (80076e0 <siprintf+0x38>)
 80076ba:	9107      	str	r1, [sp, #28]
 80076bc:	9104      	str	r1, [sp, #16]
 80076be:	4909      	ldr	r1, [pc, #36]	; (80076e4 <siprintf+0x3c>)
 80076c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80076c4:	9105      	str	r1, [sp, #20]
 80076c6:	6800      	ldr	r0, [r0, #0]
 80076c8:	9301      	str	r3, [sp, #4]
 80076ca:	a902      	add	r1, sp, #8
 80076cc:	f000 f8c4 	bl	8007858 <_svfiprintf_r>
 80076d0:	9b02      	ldr	r3, [sp, #8]
 80076d2:	2200      	movs	r2, #0
 80076d4:	701a      	strb	r2, [r3, #0]
 80076d6:	b01c      	add	sp, #112	; 0x70
 80076d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80076dc:	b003      	add	sp, #12
 80076de:	4770      	bx	lr
 80076e0:	20000010 	.word	0x20000010
 80076e4:	ffff0208 	.word	0xffff0208

080076e8 <__malloc_lock>:
 80076e8:	4801      	ldr	r0, [pc, #4]	; (80076f0 <__malloc_lock+0x8>)
 80076ea:	f7ff bef1 	b.w	80074d0 <__retarget_lock_acquire_recursive>
 80076ee:	bf00      	nop
 80076f0:	20004fe4 	.word	0x20004fe4

080076f4 <__malloc_unlock>:
 80076f4:	4801      	ldr	r0, [pc, #4]	; (80076fc <__malloc_unlock+0x8>)
 80076f6:	f7ff beec 	b.w	80074d2 <__retarget_lock_release_recursive>
 80076fa:	bf00      	nop
 80076fc:	20004fe4 	.word	0x20004fe4

08007700 <_free_r>:
 8007700:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007702:	2900      	cmp	r1, #0
 8007704:	d048      	beq.n	8007798 <_free_r+0x98>
 8007706:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800770a:	9001      	str	r0, [sp, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	f1a1 0404 	sub.w	r4, r1, #4
 8007712:	bfb8      	it	lt
 8007714:	18e4      	addlt	r4, r4, r3
 8007716:	f7ff ffe7 	bl	80076e8 <__malloc_lock>
 800771a:	4a20      	ldr	r2, [pc, #128]	; (800779c <_free_r+0x9c>)
 800771c:	9801      	ldr	r0, [sp, #4]
 800771e:	6813      	ldr	r3, [r2, #0]
 8007720:	4615      	mov	r5, r2
 8007722:	b933      	cbnz	r3, 8007732 <_free_r+0x32>
 8007724:	6063      	str	r3, [r4, #4]
 8007726:	6014      	str	r4, [r2, #0]
 8007728:	b003      	add	sp, #12
 800772a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800772e:	f7ff bfe1 	b.w	80076f4 <__malloc_unlock>
 8007732:	42a3      	cmp	r3, r4
 8007734:	d90b      	bls.n	800774e <_free_r+0x4e>
 8007736:	6821      	ldr	r1, [r4, #0]
 8007738:	1862      	adds	r2, r4, r1
 800773a:	4293      	cmp	r3, r2
 800773c:	bf04      	itt	eq
 800773e:	681a      	ldreq	r2, [r3, #0]
 8007740:	685b      	ldreq	r3, [r3, #4]
 8007742:	6063      	str	r3, [r4, #4]
 8007744:	bf04      	itt	eq
 8007746:	1852      	addeq	r2, r2, r1
 8007748:	6022      	streq	r2, [r4, #0]
 800774a:	602c      	str	r4, [r5, #0]
 800774c:	e7ec      	b.n	8007728 <_free_r+0x28>
 800774e:	461a      	mov	r2, r3
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	b10b      	cbz	r3, 8007758 <_free_r+0x58>
 8007754:	42a3      	cmp	r3, r4
 8007756:	d9fa      	bls.n	800774e <_free_r+0x4e>
 8007758:	6811      	ldr	r1, [r2, #0]
 800775a:	1855      	adds	r5, r2, r1
 800775c:	42a5      	cmp	r5, r4
 800775e:	d10b      	bne.n	8007778 <_free_r+0x78>
 8007760:	6824      	ldr	r4, [r4, #0]
 8007762:	4421      	add	r1, r4
 8007764:	1854      	adds	r4, r2, r1
 8007766:	42a3      	cmp	r3, r4
 8007768:	6011      	str	r1, [r2, #0]
 800776a:	d1dd      	bne.n	8007728 <_free_r+0x28>
 800776c:	681c      	ldr	r4, [r3, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	6053      	str	r3, [r2, #4]
 8007772:	4421      	add	r1, r4
 8007774:	6011      	str	r1, [r2, #0]
 8007776:	e7d7      	b.n	8007728 <_free_r+0x28>
 8007778:	d902      	bls.n	8007780 <_free_r+0x80>
 800777a:	230c      	movs	r3, #12
 800777c:	6003      	str	r3, [r0, #0]
 800777e:	e7d3      	b.n	8007728 <_free_r+0x28>
 8007780:	6825      	ldr	r5, [r4, #0]
 8007782:	1961      	adds	r1, r4, r5
 8007784:	428b      	cmp	r3, r1
 8007786:	bf04      	itt	eq
 8007788:	6819      	ldreq	r1, [r3, #0]
 800778a:	685b      	ldreq	r3, [r3, #4]
 800778c:	6063      	str	r3, [r4, #4]
 800778e:	bf04      	itt	eq
 8007790:	1949      	addeq	r1, r1, r5
 8007792:	6021      	streq	r1, [r4, #0]
 8007794:	6054      	str	r4, [r2, #4]
 8007796:	e7c7      	b.n	8007728 <_free_r+0x28>
 8007798:	b003      	add	sp, #12
 800779a:	bd30      	pop	{r4, r5, pc}
 800779c:	20004a68 	.word	0x20004a68

080077a0 <__ssputs_r>:
 80077a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077a4:	688e      	ldr	r6, [r1, #8]
 80077a6:	429e      	cmp	r6, r3
 80077a8:	4682      	mov	sl, r0
 80077aa:	460c      	mov	r4, r1
 80077ac:	4690      	mov	r8, r2
 80077ae:	461f      	mov	r7, r3
 80077b0:	d838      	bhi.n	8007824 <__ssputs_r+0x84>
 80077b2:	898a      	ldrh	r2, [r1, #12]
 80077b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077b8:	d032      	beq.n	8007820 <__ssputs_r+0x80>
 80077ba:	6825      	ldr	r5, [r4, #0]
 80077bc:	6909      	ldr	r1, [r1, #16]
 80077be:	eba5 0901 	sub.w	r9, r5, r1
 80077c2:	6965      	ldr	r5, [r4, #20]
 80077c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077cc:	3301      	adds	r3, #1
 80077ce:	444b      	add	r3, r9
 80077d0:	106d      	asrs	r5, r5, #1
 80077d2:	429d      	cmp	r5, r3
 80077d4:	bf38      	it	cc
 80077d6:	461d      	movcc	r5, r3
 80077d8:	0553      	lsls	r3, r2, #21
 80077da:	d531      	bpl.n	8007840 <__ssputs_r+0xa0>
 80077dc:	4629      	mov	r1, r5
 80077de:	f7ff fe8f 	bl	8007500 <_malloc_r>
 80077e2:	4606      	mov	r6, r0
 80077e4:	b950      	cbnz	r0, 80077fc <__ssputs_r+0x5c>
 80077e6:	230c      	movs	r3, #12
 80077e8:	f8ca 3000 	str.w	r3, [sl]
 80077ec:	89a3      	ldrh	r3, [r4, #12]
 80077ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077f2:	81a3      	strh	r3, [r4, #12]
 80077f4:	f04f 30ff 	mov.w	r0, #4294967295
 80077f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077fc:	6921      	ldr	r1, [r4, #16]
 80077fe:	464a      	mov	r2, r9
 8007800:	f7ff fe68 	bl	80074d4 <memcpy>
 8007804:	89a3      	ldrh	r3, [r4, #12]
 8007806:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800780a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800780e:	81a3      	strh	r3, [r4, #12]
 8007810:	6126      	str	r6, [r4, #16]
 8007812:	6165      	str	r5, [r4, #20]
 8007814:	444e      	add	r6, r9
 8007816:	eba5 0509 	sub.w	r5, r5, r9
 800781a:	6026      	str	r6, [r4, #0]
 800781c:	60a5      	str	r5, [r4, #8]
 800781e:	463e      	mov	r6, r7
 8007820:	42be      	cmp	r6, r7
 8007822:	d900      	bls.n	8007826 <__ssputs_r+0x86>
 8007824:	463e      	mov	r6, r7
 8007826:	4632      	mov	r2, r6
 8007828:	6820      	ldr	r0, [r4, #0]
 800782a:	4641      	mov	r1, r8
 800782c:	f000 faa8 	bl	8007d80 <memmove>
 8007830:	68a3      	ldr	r3, [r4, #8]
 8007832:	6822      	ldr	r2, [r4, #0]
 8007834:	1b9b      	subs	r3, r3, r6
 8007836:	4432      	add	r2, r6
 8007838:	60a3      	str	r3, [r4, #8]
 800783a:	6022      	str	r2, [r4, #0]
 800783c:	2000      	movs	r0, #0
 800783e:	e7db      	b.n	80077f8 <__ssputs_r+0x58>
 8007840:	462a      	mov	r2, r5
 8007842:	f000 fab7 	bl	8007db4 <_realloc_r>
 8007846:	4606      	mov	r6, r0
 8007848:	2800      	cmp	r0, #0
 800784a:	d1e1      	bne.n	8007810 <__ssputs_r+0x70>
 800784c:	6921      	ldr	r1, [r4, #16]
 800784e:	4650      	mov	r0, sl
 8007850:	f7ff ff56 	bl	8007700 <_free_r>
 8007854:	e7c7      	b.n	80077e6 <__ssputs_r+0x46>
	...

08007858 <_svfiprintf_r>:
 8007858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785c:	4698      	mov	r8, r3
 800785e:	898b      	ldrh	r3, [r1, #12]
 8007860:	061b      	lsls	r3, r3, #24
 8007862:	b09d      	sub	sp, #116	; 0x74
 8007864:	4607      	mov	r7, r0
 8007866:	460d      	mov	r5, r1
 8007868:	4614      	mov	r4, r2
 800786a:	d50e      	bpl.n	800788a <_svfiprintf_r+0x32>
 800786c:	690b      	ldr	r3, [r1, #16]
 800786e:	b963      	cbnz	r3, 800788a <_svfiprintf_r+0x32>
 8007870:	2140      	movs	r1, #64	; 0x40
 8007872:	f7ff fe45 	bl	8007500 <_malloc_r>
 8007876:	6028      	str	r0, [r5, #0]
 8007878:	6128      	str	r0, [r5, #16]
 800787a:	b920      	cbnz	r0, 8007886 <_svfiprintf_r+0x2e>
 800787c:	230c      	movs	r3, #12
 800787e:	603b      	str	r3, [r7, #0]
 8007880:	f04f 30ff 	mov.w	r0, #4294967295
 8007884:	e0d1      	b.n	8007a2a <_svfiprintf_r+0x1d2>
 8007886:	2340      	movs	r3, #64	; 0x40
 8007888:	616b      	str	r3, [r5, #20]
 800788a:	2300      	movs	r3, #0
 800788c:	9309      	str	r3, [sp, #36]	; 0x24
 800788e:	2320      	movs	r3, #32
 8007890:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007894:	f8cd 800c 	str.w	r8, [sp, #12]
 8007898:	2330      	movs	r3, #48	; 0x30
 800789a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a44 <_svfiprintf_r+0x1ec>
 800789e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078a2:	f04f 0901 	mov.w	r9, #1
 80078a6:	4623      	mov	r3, r4
 80078a8:	469a      	mov	sl, r3
 80078aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078ae:	b10a      	cbz	r2, 80078b4 <_svfiprintf_r+0x5c>
 80078b0:	2a25      	cmp	r2, #37	; 0x25
 80078b2:	d1f9      	bne.n	80078a8 <_svfiprintf_r+0x50>
 80078b4:	ebba 0b04 	subs.w	fp, sl, r4
 80078b8:	d00b      	beq.n	80078d2 <_svfiprintf_r+0x7a>
 80078ba:	465b      	mov	r3, fp
 80078bc:	4622      	mov	r2, r4
 80078be:	4629      	mov	r1, r5
 80078c0:	4638      	mov	r0, r7
 80078c2:	f7ff ff6d 	bl	80077a0 <__ssputs_r>
 80078c6:	3001      	adds	r0, #1
 80078c8:	f000 80aa 	beq.w	8007a20 <_svfiprintf_r+0x1c8>
 80078cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80078ce:	445a      	add	r2, fp
 80078d0:	9209      	str	r2, [sp, #36]	; 0x24
 80078d2:	f89a 3000 	ldrb.w	r3, [sl]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 80a2 	beq.w	8007a20 <_svfiprintf_r+0x1c8>
 80078dc:	2300      	movs	r3, #0
 80078de:	f04f 32ff 	mov.w	r2, #4294967295
 80078e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078e6:	f10a 0a01 	add.w	sl, sl, #1
 80078ea:	9304      	str	r3, [sp, #16]
 80078ec:	9307      	str	r3, [sp, #28]
 80078ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078f2:	931a      	str	r3, [sp, #104]	; 0x68
 80078f4:	4654      	mov	r4, sl
 80078f6:	2205      	movs	r2, #5
 80078f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078fc:	4851      	ldr	r0, [pc, #324]	; (8007a44 <_svfiprintf_r+0x1ec>)
 80078fe:	f7f8 fc8f 	bl	8000220 <memchr>
 8007902:	9a04      	ldr	r2, [sp, #16]
 8007904:	b9d8      	cbnz	r0, 800793e <_svfiprintf_r+0xe6>
 8007906:	06d0      	lsls	r0, r2, #27
 8007908:	bf44      	itt	mi
 800790a:	2320      	movmi	r3, #32
 800790c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007910:	0711      	lsls	r1, r2, #28
 8007912:	bf44      	itt	mi
 8007914:	232b      	movmi	r3, #43	; 0x2b
 8007916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800791a:	f89a 3000 	ldrb.w	r3, [sl]
 800791e:	2b2a      	cmp	r3, #42	; 0x2a
 8007920:	d015      	beq.n	800794e <_svfiprintf_r+0xf6>
 8007922:	9a07      	ldr	r2, [sp, #28]
 8007924:	4654      	mov	r4, sl
 8007926:	2000      	movs	r0, #0
 8007928:	f04f 0c0a 	mov.w	ip, #10
 800792c:	4621      	mov	r1, r4
 800792e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007932:	3b30      	subs	r3, #48	; 0x30
 8007934:	2b09      	cmp	r3, #9
 8007936:	d94e      	bls.n	80079d6 <_svfiprintf_r+0x17e>
 8007938:	b1b0      	cbz	r0, 8007968 <_svfiprintf_r+0x110>
 800793a:	9207      	str	r2, [sp, #28]
 800793c:	e014      	b.n	8007968 <_svfiprintf_r+0x110>
 800793e:	eba0 0308 	sub.w	r3, r0, r8
 8007942:	fa09 f303 	lsl.w	r3, r9, r3
 8007946:	4313      	orrs	r3, r2
 8007948:	9304      	str	r3, [sp, #16]
 800794a:	46a2      	mov	sl, r4
 800794c:	e7d2      	b.n	80078f4 <_svfiprintf_r+0x9c>
 800794e:	9b03      	ldr	r3, [sp, #12]
 8007950:	1d19      	adds	r1, r3, #4
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	9103      	str	r1, [sp, #12]
 8007956:	2b00      	cmp	r3, #0
 8007958:	bfbb      	ittet	lt
 800795a:	425b      	neglt	r3, r3
 800795c:	f042 0202 	orrlt.w	r2, r2, #2
 8007960:	9307      	strge	r3, [sp, #28]
 8007962:	9307      	strlt	r3, [sp, #28]
 8007964:	bfb8      	it	lt
 8007966:	9204      	strlt	r2, [sp, #16]
 8007968:	7823      	ldrb	r3, [r4, #0]
 800796a:	2b2e      	cmp	r3, #46	; 0x2e
 800796c:	d10c      	bne.n	8007988 <_svfiprintf_r+0x130>
 800796e:	7863      	ldrb	r3, [r4, #1]
 8007970:	2b2a      	cmp	r3, #42	; 0x2a
 8007972:	d135      	bne.n	80079e0 <_svfiprintf_r+0x188>
 8007974:	9b03      	ldr	r3, [sp, #12]
 8007976:	1d1a      	adds	r2, r3, #4
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	9203      	str	r2, [sp, #12]
 800797c:	2b00      	cmp	r3, #0
 800797e:	bfb8      	it	lt
 8007980:	f04f 33ff 	movlt.w	r3, #4294967295
 8007984:	3402      	adds	r4, #2
 8007986:	9305      	str	r3, [sp, #20]
 8007988:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a54 <_svfiprintf_r+0x1fc>
 800798c:	7821      	ldrb	r1, [r4, #0]
 800798e:	2203      	movs	r2, #3
 8007990:	4650      	mov	r0, sl
 8007992:	f7f8 fc45 	bl	8000220 <memchr>
 8007996:	b140      	cbz	r0, 80079aa <_svfiprintf_r+0x152>
 8007998:	2340      	movs	r3, #64	; 0x40
 800799a:	eba0 000a 	sub.w	r0, r0, sl
 800799e:	fa03 f000 	lsl.w	r0, r3, r0
 80079a2:	9b04      	ldr	r3, [sp, #16]
 80079a4:	4303      	orrs	r3, r0
 80079a6:	3401      	adds	r4, #1
 80079a8:	9304      	str	r3, [sp, #16]
 80079aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ae:	4826      	ldr	r0, [pc, #152]	; (8007a48 <_svfiprintf_r+0x1f0>)
 80079b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079b4:	2206      	movs	r2, #6
 80079b6:	f7f8 fc33 	bl	8000220 <memchr>
 80079ba:	2800      	cmp	r0, #0
 80079bc:	d038      	beq.n	8007a30 <_svfiprintf_r+0x1d8>
 80079be:	4b23      	ldr	r3, [pc, #140]	; (8007a4c <_svfiprintf_r+0x1f4>)
 80079c0:	bb1b      	cbnz	r3, 8007a0a <_svfiprintf_r+0x1b2>
 80079c2:	9b03      	ldr	r3, [sp, #12]
 80079c4:	3307      	adds	r3, #7
 80079c6:	f023 0307 	bic.w	r3, r3, #7
 80079ca:	3308      	adds	r3, #8
 80079cc:	9303      	str	r3, [sp, #12]
 80079ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d0:	4433      	add	r3, r6
 80079d2:	9309      	str	r3, [sp, #36]	; 0x24
 80079d4:	e767      	b.n	80078a6 <_svfiprintf_r+0x4e>
 80079d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80079da:	460c      	mov	r4, r1
 80079dc:	2001      	movs	r0, #1
 80079de:	e7a5      	b.n	800792c <_svfiprintf_r+0xd4>
 80079e0:	2300      	movs	r3, #0
 80079e2:	3401      	adds	r4, #1
 80079e4:	9305      	str	r3, [sp, #20]
 80079e6:	4619      	mov	r1, r3
 80079e8:	f04f 0c0a 	mov.w	ip, #10
 80079ec:	4620      	mov	r0, r4
 80079ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079f2:	3a30      	subs	r2, #48	; 0x30
 80079f4:	2a09      	cmp	r2, #9
 80079f6:	d903      	bls.n	8007a00 <_svfiprintf_r+0x1a8>
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d0c5      	beq.n	8007988 <_svfiprintf_r+0x130>
 80079fc:	9105      	str	r1, [sp, #20]
 80079fe:	e7c3      	b.n	8007988 <_svfiprintf_r+0x130>
 8007a00:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a04:	4604      	mov	r4, r0
 8007a06:	2301      	movs	r3, #1
 8007a08:	e7f0      	b.n	80079ec <_svfiprintf_r+0x194>
 8007a0a:	ab03      	add	r3, sp, #12
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	462a      	mov	r2, r5
 8007a10:	4b0f      	ldr	r3, [pc, #60]	; (8007a50 <_svfiprintf_r+0x1f8>)
 8007a12:	a904      	add	r1, sp, #16
 8007a14:	4638      	mov	r0, r7
 8007a16:	f3af 8000 	nop.w
 8007a1a:	1c42      	adds	r2, r0, #1
 8007a1c:	4606      	mov	r6, r0
 8007a1e:	d1d6      	bne.n	80079ce <_svfiprintf_r+0x176>
 8007a20:	89ab      	ldrh	r3, [r5, #12]
 8007a22:	065b      	lsls	r3, r3, #25
 8007a24:	f53f af2c 	bmi.w	8007880 <_svfiprintf_r+0x28>
 8007a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a2a:	b01d      	add	sp, #116	; 0x74
 8007a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a30:	ab03      	add	r3, sp, #12
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	462a      	mov	r2, r5
 8007a36:	4b06      	ldr	r3, [pc, #24]	; (8007a50 <_svfiprintf_r+0x1f8>)
 8007a38:	a904      	add	r1, sp, #16
 8007a3a:	4638      	mov	r0, r7
 8007a3c:	f000 f87a 	bl	8007b34 <_printf_i>
 8007a40:	e7eb      	b.n	8007a1a <_svfiprintf_r+0x1c2>
 8007a42:	bf00      	nop
 8007a44:	08007fb4 	.word	0x08007fb4
 8007a48:	08007fbe 	.word	0x08007fbe
 8007a4c:	00000000 	.word	0x00000000
 8007a50:	080077a1 	.word	0x080077a1
 8007a54:	08007fba 	.word	0x08007fba

08007a58 <_printf_common>:
 8007a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a5c:	4616      	mov	r6, r2
 8007a5e:	4699      	mov	r9, r3
 8007a60:	688a      	ldr	r2, [r1, #8]
 8007a62:	690b      	ldr	r3, [r1, #16]
 8007a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	bfb8      	it	lt
 8007a6c:	4613      	movlt	r3, r2
 8007a6e:	6033      	str	r3, [r6, #0]
 8007a70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007a74:	4607      	mov	r7, r0
 8007a76:	460c      	mov	r4, r1
 8007a78:	b10a      	cbz	r2, 8007a7e <_printf_common+0x26>
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	6033      	str	r3, [r6, #0]
 8007a7e:	6823      	ldr	r3, [r4, #0]
 8007a80:	0699      	lsls	r1, r3, #26
 8007a82:	bf42      	ittt	mi
 8007a84:	6833      	ldrmi	r3, [r6, #0]
 8007a86:	3302      	addmi	r3, #2
 8007a88:	6033      	strmi	r3, [r6, #0]
 8007a8a:	6825      	ldr	r5, [r4, #0]
 8007a8c:	f015 0506 	ands.w	r5, r5, #6
 8007a90:	d106      	bne.n	8007aa0 <_printf_common+0x48>
 8007a92:	f104 0a19 	add.w	sl, r4, #25
 8007a96:	68e3      	ldr	r3, [r4, #12]
 8007a98:	6832      	ldr	r2, [r6, #0]
 8007a9a:	1a9b      	subs	r3, r3, r2
 8007a9c:	42ab      	cmp	r3, r5
 8007a9e:	dc26      	bgt.n	8007aee <_printf_common+0x96>
 8007aa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007aa4:	1e13      	subs	r3, r2, #0
 8007aa6:	6822      	ldr	r2, [r4, #0]
 8007aa8:	bf18      	it	ne
 8007aaa:	2301      	movne	r3, #1
 8007aac:	0692      	lsls	r2, r2, #26
 8007aae:	d42b      	bmi.n	8007b08 <_printf_common+0xb0>
 8007ab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ab4:	4649      	mov	r1, r9
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	47c0      	blx	r8
 8007aba:	3001      	adds	r0, #1
 8007abc:	d01e      	beq.n	8007afc <_printf_common+0xa4>
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	68e5      	ldr	r5, [r4, #12]
 8007ac2:	6832      	ldr	r2, [r6, #0]
 8007ac4:	f003 0306 	and.w	r3, r3, #6
 8007ac8:	2b04      	cmp	r3, #4
 8007aca:	bf08      	it	eq
 8007acc:	1aad      	subeq	r5, r5, r2
 8007ace:	68a3      	ldr	r3, [r4, #8]
 8007ad0:	6922      	ldr	r2, [r4, #16]
 8007ad2:	bf0c      	ite	eq
 8007ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ad8:	2500      	movne	r5, #0
 8007ada:	4293      	cmp	r3, r2
 8007adc:	bfc4      	itt	gt
 8007ade:	1a9b      	subgt	r3, r3, r2
 8007ae0:	18ed      	addgt	r5, r5, r3
 8007ae2:	2600      	movs	r6, #0
 8007ae4:	341a      	adds	r4, #26
 8007ae6:	42b5      	cmp	r5, r6
 8007ae8:	d11a      	bne.n	8007b20 <_printf_common+0xc8>
 8007aea:	2000      	movs	r0, #0
 8007aec:	e008      	b.n	8007b00 <_printf_common+0xa8>
 8007aee:	2301      	movs	r3, #1
 8007af0:	4652      	mov	r2, sl
 8007af2:	4649      	mov	r1, r9
 8007af4:	4638      	mov	r0, r7
 8007af6:	47c0      	blx	r8
 8007af8:	3001      	adds	r0, #1
 8007afa:	d103      	bne.n	8007b04 <_printf_common+0xac>
 8007afc:	f04f 30ff 	mov.w	r0, #4294967295
 8007b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b04:	3501      	adds	r5, #1
 8007b06:	e7c6      	b.n	8007a96 <_printf_common+0x3e>
 8007b08:	18e1      	adds	r1, r4, r3
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	2030      	movs	r0, #48	; 0x30
 8007b0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007b12:	4422      	add	r2, r4
 8007b14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007b18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007b1c:	3302      	adds	r3, #2
 8007b1e:	e7c7      	b.n	8007ab0 <_printf_common+0x58>
 8007b20:	2301      	movs	r3, #1
 8007b22:	4622      	mov	r2, r4
 8007b24:	4649      	mov	r1, r9
 8007b26:	4638      	mov	r0, r7
 8007b28:	47c0      	blx	r8
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	d0e6      	beq.n	8007afc <_printf_common+0xa4>
 8007b2e:	3601      	adds	r6, #1
 8007b30:	e7d9      	b.n	8007ae6 <_printf_common+0x8e>
	...

08007b34 <_printf_i>:
 8007b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b38:	460c      	mov	r4, r1
 8007b3a:	4691      	mov	r9, r2
 8007b3c:	7e27      	ldrb	r7, [r4, #24]
 8007b3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b40:	2f78      	cmp	r7, #120	; 0x78
 8007b42:	4680      	mov	r8, r0
 8007b44:	469a      	mov	sl, r3
 8007b46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b4a:	d807      	bhi.n	8007b5c <_printf_i+0x28>
 8007b4c:	2f62      	cmp	r7, #98	; 0x62
 8007b4e:	d80a      	bhi.n	8007b66 <_printf_i+0x32>
 8007b50:	2f00      	cmp	r7, #0
 8007b52:	f000 80d8 	beq.w	8007d06 <_printf_i+0x1d2>
 8007b56:	2f58      	cmp	r7, #88	; 0x58
 8007b58:	f000 80a3 	beq.w	8007ca2 <_printf_i+0x16e>
 8007b5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007b64:	e03a      	b.n	8007bdc <_printf_i+0xa8>
 8007b66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007b6a:	2b15      	cmp	r3, #21
 8007b6c:	d8f6      	bhi.n	8007b5c <_printf_i+0x28>
 8007b6e:	a001      	add	r0, pc, #4	; (adr r0, 8007b74 <_printf_i+0x40>)
 8007b70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007b74:	08007bcd 	.word	0x08007bcd
 8007b78:	08007be1 	.word	0x08007be1
 8007b7c:	08007b5d 	.word	0x08007b5d
 8007b80:	08007b5d 	.word	0x08007b5d
 8007b84:	08007b5d 	.word	0x08007b5d
 8007b88:	08007b5d 	.word	0x08007b5d
 8007b8c:	08007be1 	.word	0x08007be1
 8007b90:	08007b5d 	.word	0x08007b5d
 8007b94:	08007b5d 	.word	0x08007b5d
 8007b98:	08007b5d 	.word	0x08007b5d
 8007b9c:	08007b5d 	.word	0x08007b5d
 8007ba0:	08007ced 	.word	0x08007ced
 8007ba4:	08007c11 	.word	0x08007c11
 8007ba8:	08007ccf 	.word	0x08007ccf
 8007bac:	08007b5d 	.word	0x08007b5d
 8007bb0:	08007b5d 	.word	0x08007b5d
 8007bb4:	08007d0f 	.word	0x08007d0f
 8007bb8:	08007b5d 	.word	0x08007b5d
 8007bbc:	08007c11 	.word	0x08007c11
 8007bc0:	08007b5d 	.word	0x08007b5d
 8007bc4:	08007b5d 	.word	0x08007b5d
 8007bc8:	08007cd7 	.word	0x08007cd7
 8007bcc:	680b      	ldr	r3, [r1, #0]
 8007bce:	1d1a      	adds	r2, r3, #4
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	600a      	str	r2, [r1, #0]
 8007bd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e0a3      	b.n	8007d28 <_printf_i+0x1f4>
 8007be0:	6825      	ldr	r5, [r4, #0]
 8007be2:	6808      	ldr	r0, [r1, #0]
 8007be4:	062e      	lsls	r6, r5, #24
 8007be6:	f100 0304 	add.w	r3, r0, #4
 8007bea:	d50a      	bpl.n	8007c02 <_printf_i+0xce>
 8007bec:	6805      	ldr	r5, [r0, #0]
 8007bee:	600b      	str	r3, [r1, #0]
 8007bf0:	2d00      	cmp	r5, #0
 8007bf2:	da03      	bge.n	8007bfc <_printf_i+0xc8>
 8007bf4:	232d      	movs	r3, #45	; 0x2d
 8007bf6:	426d      	negs	r5, r5
 8007bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bfc:	485e      	ldr	r0, [pc, #376]	; (8007d78 <_printf_i+0x244>)
 8007bfe:	230a      	movs	r3, #10
 8007c00:	e019      	b.n	8007c36 <_printf_i+0x102>
 8007c02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007c06:	6805      	ldr	r5, [r0, #0]
 8007c08:	600b      	str	r3, [r1, #0]
 8007c0a:	bf18      	it	ne
 8007c0c:	b22d      	sxthne	r5, r5
 8007c0e:	e7ef      	b.n	8007bf0 <_printf_i+0xbc>
 8007c10:	680b      	ldr	r3, [r1, #0]
 8007c12:	6825      	ldr	r5, [r4, #0]
 8007c14:	1d18      	adds	r0, r3, #4
 8007c16:	6008      	str	r0, [r1, #0]
 8007c18:	0628      	lsls	r0, r5, #24
 8007c1a:	d501      	bpl.n	8007c20 <_printf_i+0xec>
 8007c1c:	681d      	ldr	r5, [r3, #0]
 8007c1e:	e002      	b.n	8007c26 <_printf_i+0xf2>
 8007c20:	0669      	lsls	r1, r5, #25
 8007c22:	d5fb      	bpl.n	8007c1c <_printf_i+0xe8>
 8007c24:	881d      	ldrh	r5, [r3, #0]
 8007c26:	4854      	ldr	r0, [pc, #336]	; (8007d78 <_printf_i+0x244>)
 8007c28:	2f6f      	cmp	r7, #111	; 0x6f
 8007c2a:	bf0c      	ite	eq
 8007c2c:	2308      	moveq	r3, #8
 8007c2e:	230a      	movne	r3, #10
 8007c30:	2100      	movs	r1, #0
 8007c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007c36:	6866      	ldr	r6, [r4, #4]
 8007c38:	60a6      	str	r6, [r4, #8]
 8007c3a:	2e00      	cmp	r6, #0
 8007c3c:	bfa2      	ittt	ge
 8007c3e:	6821      	ldrge	r1, [r4, #0]
 8007c40:	f021 0104 	bicge.w	r1, r1, #4
 8007c44:	6021      	strge	r1, [r4, #0]
 8007c46:	b90d      	cbnz	r5, 8007c4c <_printf_i+0x118>
 8007c48:	2e00      	cmp	r6, #0
 8007c4a:	d04d      	beq.n	8007ce8 <_printf_i+0x1b4>
 8007c4c:	4616      	mov	r6, r2
 8007c4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c52:	fb03 5711 	mls	r7, r3, r1, r5
 8007c56:	5dc7      	ldrb	r7, [r0, r7]
 8007c58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c5c:	462f      	mov	r7, r5
 8007c5e:	42bb      	cmp	r3, r7
 8007c60:	460d      	mov	r5, r1
 8007c62:	d9f4      	bls.n	8007c4e <_printf_i+0x11a>
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	d10b      	bne.n	8007c80 <_printf_i+0x14c>
 8007c68:	6823      	ldr	r3, [r4, #0]
 8007c6a:	07df      	lsls	r7, r3, #31
 8007c6c:	d508      	bpl.n	8007c80 <_printf_i+0x14c>
 8007c6e:	6923      	ldr	r3, [r4, #16]
 8007c70:	6861      	ldr	r1, [r4, #4]
 8007c72:	4299      	cmp	r1, r3
 8007c74:	bfde      	ittt	le
 8007c76:	2330      	movle	r3, #48	; 0x30
 8007c78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c80:	1b92      	subs	r2, r2, r6
 8007c82:	6122      	str	r2, [r4, #16]
 8007c84:	f8cd a000 	str.w	sl, [sp]
 8007c88:	464b      	mov	r3, r9
 8007c8a:	aa03      	add	r2, sp, #12
 8007c8c:	4621      	mov	r1, r4
 8007c8e:	4640      	mov	r0, r8
 8007c90:	f7ff fee2 	bl	8007a58 <_printf_common>
 8007c94:	3001      	adds	r0, #1
 8007c96:	d14c      	bne.n	8007d32 <_printf_i+0x1fe>
 8007c98:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9c:	b004      	add	sp, #16
 8007c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca2:	4835      	ldr	r0, [pc, #212]	; (8007d78 <_printf_i+0x244>)
 8007ca4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ca8:	6823      	ldr	r3, [r4, #0]
 8007caa:	680e      	ldr	r6, [r1, #0]
 8007cac:	061f      	lsls	r7, r3, #24
 8007cae:	f856 5b04 	ldr.w	r5, [r6], #4
 8007cb2:	600e      	str	r6, [r1, #0]
 8007cb4:	d514      	bpl.n	8007ce0 <_printf_i+0x1ac>
 8007cb6:	07d9      	lsls	r1, r3, #31
 8007cb8:	bf44      	itt	mi
 8007cba:	f043 0320 	orrmi.w	r3, r3, #32
 8007cbe:	6023      	strmi	r3, [r4, #0]
 8007cc0:	b91d      	cbnz	r5, 8007cca <_printf_i+0x196>
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	f023 0320 	bic.w	r3, r3, #32
 8007cc8:	6023      	str	r3, [r4, #0]
 8007cca:	2310      	movs	r3, #16
 8007ccc:	e7b0      	b.n	8007c30 <_printf_i+0xfc>
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	f043 0320 	orr.w	r3, r3, #32
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	2378      	movs	r3, #120	; 0x78
 8007cd8:	4828      	ldr	r0, [pc, #160]	; (8007d7c <_printf_i+0x248>)
 8007cda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007cde:	e7e3      	b.n	8007ca8 <_printf_i+0x174>
 8007ce0:	065e      	lsls	r6, r3, #25
 8007ce2:	bf48      	it	mi
 8007ce4:	b2ad      	uxthmi	r5, r5
 8007ce6:	e7e6      	b.n	8007cb6 <_printf_i+0x182>
 8007ce8:	4616      	mov	r6, r2
 8007cea:	e7bb      	b.n	8007c64 <_printf_i+0x130>
 8007cec:	680b      	ldr	r3, [r1, #0]
 8007cee:	6826      	ldr	r6, [r4, #0]
 8007cf0:	6960      	ldr	r0, [r4, #20]
 8007cf2:	1d1d      	adds	r5, r3, #4
 8007cf4:	600d      	str	r5, [r1, #0]
 8007cf6:	0635      	lsls	r5, r6, #24
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	d501      	bpl.n	8007d00 <_printf_i+0x1cc>
 8007cfc:	6018      	str	r0, [r3, #0]
 8007cfe:	e002      	b.n	8007d06 <_printf_i+0x1d2>
 8007d00:	0671      	lsls	r1, r6, #25
 8007d02:	d5fb      	bpl.n	8007cfc <_printf_i+0x1c8>
 8007d04:	8018      	strh	r0, [r3, #0]
 8007d06:	2300      	movs	r3, #0
 8007d08:	6123      	str	r3, [r4, #16]
 8007d0a:	4616      	mov	r6, r2
 8007d0c:	e7ba      	b.n	8007c84 <_printf_i+0x150>
 8007d0e:	680b      	ldr	r3, [r1, #0]
 8007d10:	1d1a      	adds	r2, r3, #4
 8007d12:	600a      	str	r2, [r1, #0]
 8007d14:	681e      	ldr	r6, [r3, #0]
 8007d16:	6862      	ldr	r2, [r4, #4]
 8007d18:	2100      	movs	r1, #0
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	f7f8 fa80 	bl	8000220 <memchr>
 8007d20:	b108      	cbz	r0, 8007d26 <_printf_i+0x1f2>
 8007d22:	1b80      	subs	r0, r0, r6
 8007d24:	6060      	str	r0, [r4, #4]
 8007d26:	6863      	ldr	r3, [r4, #4]
 8007d28:	6123      	str	r3, [r4, #16]
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d30:	e7a8      	b.n	8007c84 <_printf_i+0x150>
 8007d32:	6923      	ldr	r3, [r4, #16]
 8007d34:	4632      	mov	r2, r6
 8007d36:	4649      	mov	r1, r9
 8007d38:	4640      	mov	r0, r8
 8007d3a:	47d0      	blx	sl
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	d0ab      	beq.n	8007c98 <_printf_i+0x164>
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	079b      	lsls	r3, r3, #30
 8007d44:	d413      	bmi.n	8007d6e <_printf_i+0x23a>
 8007d46:	68e0      	ldr	r0, [r4, #12]
 8007d48:	9b03      	ldr	r3, [sp, #12]
 8007d4a:	4298      	cmp	r0, r3
 8007d4c:	bfb8      	it	lt
 8007d4e:	4618      	movlt	r0, r3
 8007d50:	e7a4      	b.n	8007c9c <_printf_i+0x168>
 8007d52:	2301      	movs	r3, #1
 8007d54:	4632      	mov	r2, r6
 8007d56:	4649      	mov	r1, r9
 8007d58:	4640      	mov	r0, r8
 8007d5a:	47d0      	blx	sl
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	d09b      	beq.n	8007c98 <_printf_i+0x164>
 8007d60:	3501      	adds	r5, #1
 8007d62:	68e3      	ldr	r3, [r4, #12]
 8007d64:	9903      	ldr	r1, [sp, #12]
 8007d66:	1a5b      	subs	r3, r3, r1
 8007d68:	42ab      	cmp	r3, r5
 8007d6a:	dcf2      	bgt.n	8007d52 <_printf_i+0x21e>
 8007d6c:	e7eb      	b.n	8007d46 <_printf_i+0x212>
 8007d6e:	2500      	movs	r5, #0
 8007d70:	f104 0619 	add.w	r6, r4, #25
 8007d74:	e7f5      	b.n	8007d62 <_printf_i+0x22e>
 8007d76:	bf00      	nop
 8007d78:	08007fc5 	.word	0x08007fc5
 8007d7c:	08007fd6 	.word	0x08007fd6

08007d80 <memmove>:
 8007d80:	4288      	cmp	r0, r1
 8007d82:	b510      	push	{r4, lr}
 8007d84:	eb01 0402 	add.w	r4, r1, r2
 8007d88:	d902      	bls.n	8007d90 <memmove+0x10>
 8007d8a:	4284      	cmp	r4, r0
 8007d8c:	4623      	mov	r3, r4
 8007d8e:	d807      	bhi.n	8007da0 <memmove+0x20>
 8007d90:	1e43      	subs	r3, r0, #1
 8007d92:	42a1      	cmp	r1, r4
 8007d94:	d008      	beq.n	8007da8 <memmove+0x28>
 8007d96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d9e:	e7f8      	b.n	8007d92 <memmove+0x12>
 8007da0:	4402      	add	r2, r0
 8007da2:	4601      	mov	r1, r0
 8007da4:	428a      	cmp	r2, r1
 8007da6:	d100      	bne.n	8007daa <memmove+0x2a>
 8007da8:	bd10      	pop	{r4, pc}
 8007daa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007dae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007db2:	e7f7      	b.n	8007da4 <memmove+0x24>

08007db4 <_realloc_r>:
 8007db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db6:	4607      	mov	r7, r0
 8007db8:	4614      	mov	r4, r2
 8007dba:	460e      	mov	r6, r1
 8007dbc:	b921      	cbnz	r1, 8007dc8 <_realloc_r+0x14>
 8007dbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	f7ff bb9c 	b.w	8007500 <_malloc_r>
 8007dc8:	b922      	cbnz	r2, 8007dd4 <_realloc_r+0x20>
 8007dca:	f7ff fc99 	bl	8007700 <_free_r>
 8007dce:	4625      	mov	r5, r4
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dd4:	f000 f814 	bl	8007e00 <_malloc_usable_size_r>
 8007dd8:	42a0      	cmp	r0, r4
 8007dda:	d20f      	bcs.n	8007dfc <_realloc_r+0x48>
 8007ddc:	4621      	mov	r1, r4
 8007dde:	4638      	mov	r0, r7
 8007de0:	f7ff fb8e 	bl	8007500 <_malloc_r>
 8007de4:	4605      	mov	r5, r0
 8007de6:	2800      	cmp	r0, #0
 8007de8:	d0f2      	beq.n	8007dd0 <_realloc_r+0x1c>
 8007dea:	4631      	mov	r1, r6
 8007dec:	4622      	mov	r2, r4
 8007dee:	f7ff fb71 	bl	80074d4 <memcpy>
 8007df2:	4631      	mov	r1, r6
 8007df4:	4638      	mov	r0, r7
 8007df6:	f7ff fc83 	bl	8007700 <_free_r>
 8007dfa:	e7e9      	b.n	8007dd0 <_realloc_r+0x1c>
 8007dfc:	4635      	mov	r5, r6
 8007dfe:	e7e7      	b.n	8007dd0 <_realloc_r+0x1c>

08007e00 <_malloc_usable_size_r>:
 8007e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e04:	1f18      	subs	r0, r3, #4
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	bfbc      	itt	lt
 8007e0a:	580b      	ldrlt	r3, [r1, r0]
 8007e0c:	18c0      	addlt	r0, r0, r3
 8007e0e:	4770      	bx	lr

08007e10 <_init>:
 8007e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e12:	bf00      	nop
 8007e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e16:	bc08      	pop	{r3}
 8007e18:	469e      	mov	lr, r3
 8007e1a:	4770      	bx	lr

08007e1c <_fini>:
 8007e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1e:	bf00      	nop
 8007e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e22:	bc08      	pop	{r3}
 8007e24:	469e      	mov	lr, r3
 8007e26:	4770      	bx	lr
