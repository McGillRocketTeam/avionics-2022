
freeRTOS_LowPower.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007908  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08007ad8  08007ad8  00017ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c84  08007c84  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007c84  08007c84  00017c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c8c  08007c8c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c8c  08007c8c  00017c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c90  08007c90  00017c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f34  20000074  08007d08  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004fa8  08007d08  00024fa8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000231b8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004129  00000000  00000000  0004325c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001998  00000000  00000000  00047388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001820  00000000  00000000  00048d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004207  00000000  00000000  0004a540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cd85  00000000  00000000  0004e747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2a50  00000000  00000000  0006b4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014df1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000725c  00000000  00000000  0014df70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007ac0 	.word	0x08007ac0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007ac0 	.word	0x08007ac0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005bc:	f000 fcdc 	bl	8000f78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c0:	f000 f82a 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c4:	f000 f97a 	bl	80008bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005c8:	f000 f920 	bl	800080c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005cc:	f000 f948 	bl	8000860 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 80005d0:	f000 f890 	bl	80006f4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005d4:	f003 ff80 	bl	80044d8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of mainTask */
  mainTaskHandle = osThreadNew(StartMainTask, NULL, &mainTask_attributes);
 80005d8:	4a09      	ldr	r2, [pc, #36]	; (8000600 <main+0x48>)
 80005da:	2100      	movs	r1, #0
 80005dc:	4809      	ldr	r0, [pc, #36]	; (8000604 <main+0x4c>)
 80005de:	f003 ffc5 	bl	800456c <osThreadNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a08      	ldr	r2, [pc, #32]	; (8000608 <main+0x50>)
 80005e6:	6013      	str	r3, [r2, #0]

  /* creation of blinkyTask */
  blinkyTaskHandle = osThreadNew(StartBlinkyTask, NULL, &blinkyTask_attributes);
 80005e8:	4a08      	ldr	r2, [pc, #32]	; (800060c <main+0x54>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	4808      	ldr	r0, [pc, #32]	; (8000610 <main+0x58>)
 80005ee:	f003 ffbd 	bl	800456c <osThreadNew>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <main+0x5c>)
 80005f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005f8:	f003 ff92 	bl	8004520 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x44>
 80005fe:	bf00      	nop
 8000600:	08007b90 	.word	0x08007b90
 8000604:	08000a49 	.word	0x08000a49
 8000608:	20004a70 	.word	0x20004a70
 800060c:	08007bb4 	.word	0x08007bb4
 8000610:	08000b05 	.word	0x08000b05
 8000614:	20004f08 	.word	0x20004f08

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	; 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2234      	movs	r2, #52	; 0x34
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f006 fdba 	bl	80071a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b2a      	ldr	r3, [pc, #168]	; (80006ec <SystemClock_Config+0xd4>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	4a29      	ldr	r2, [pc, #164]	; (80006ec <SystemClock_Config+0xd4>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	; 0x40
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <SystemClock_Config+0xd4>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000658:	2300      	movs	r3, #0
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <SystemClock_Config+0xd8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a23      	ldr	r2, [pc, #140]	; (80006f0 <SystemClock_Config+0xd8>)
 8000662:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <SystemClock_Config+0xd8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000674:	2305      	movs	r3, #5
 8000676:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000678:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800067c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800067e:	2301      	movs	r3, #1
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000686:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000690:	23a8      	movs	r3, #168	; 0xa8
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000694:	2302      	movs	r3, #2
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000698:	2307      	movs	r3, #7
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 031c 	add.w	r3, r7, #28
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 fee7 	bl	8002478 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006b0:	f000 fa50 	bl	8000b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2105      	movs	r1, #5
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f8a8 	bl	8001828 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006de:	f000 fa39 	bl	8000b54 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	; 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b090      	sub	sp, #64	; 0x40
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80006fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800070a:	2300      	movs	r3, #0
 800070c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2228      	movs	r2, #40	; 0x28
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f006 fd43 	bl	80071a0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800071a:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <MX_RTC_Init+0x110>)
 800071c:	4a3a      	ldr	r2, [pc, #232]	; (8000808 <MX_RTC_Init+0x114>)
 800071e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000720:	4b38      	ldr	r3, [pc, #224]	; (8000804 <MX_RTC_Init+0x110>)
 8000722:	2200      	movs	r2, #0
 8000724:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000726:	4b37      	ldr	r3, [pc, #220]	; (8000804 <MX_RTC_Init+0x110>)
 8000728:	227f      	movs	r2, #127	; 0x7f
 800072a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800072c:	4b35      	ldr	r3, [pc, #212]	; (8000804 <MX_RTC_Init+0x110>)
 800072e:	22ff      	movs	r2, #255	; 0xff
 8000730:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000732:	4b34      	ldr	r3, [pc, #208]	; (8000804 <MX_RTC_Init+0x110>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000738:	4b32      	ldr	r3, [pc, #200]	; (8000804 <MX_RTC_Init+0x110>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800073e:	4b31      	ldr	r3, [pc, #196]	; (8000804 <MX_RTC_Init+0x110>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000744:	482f      	ldr	r0, [pc, #188]	; (8000804 <MX_RTC_Init+0x110>)
 8000746:	f002 f935 	bl	80029b4 <HAL_RTC_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000750:	f000 fa00 	bl	8000b54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000754:	2300      	movs	r3, #0
 8000756:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800075a:	2300      	movs	r3, #0
 800075c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000760:	2300      	movs	r3, #0
 8000762:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000766:	2300      	movs	r3, #0
 8000768:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800076a:	2300      	movs	r3, #0
 800076c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800076e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000772:	2201      	movs	r2, #1
 8000774:	4619      	mov	r1, r3
 8000776:	4823      	ldr	r0, [pc, #140]	; (8000804 <MX_RTC_Init+0x110>)
 8000778:	f002 f9ad 	bl	8002ad6 <HAL_RTC_SetTime>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000782:	f000 f9e7 	bl	8000b54 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000786:	2301      	movs	r3, #1
 8000788:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800078c:	2301      	movs	r3, #1
 800078e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8000792:	2301      	movs	r3, #1
 8000794:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000798:	2300      	movs	r3, #0
 800079a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800079e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007a2:	2201      	movs	r2, #1
 80007a4:	4619      	mov	r1, r3
 80007a6:	4817      	ldr	r0, [pc, #92]	; (8000804 <MX_RTC_Init+0x110>)
 80007a8:	f002 fa52 	bl	8002c50 <HAL_RTC_SetDate>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80007b2:	f000 f9cf 	bl	8000b54 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x7;
 80007be:	2307      	movs	r3, #7
 80007c0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80007da:	2301      	movs	r3, #1
 80007dc:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80007e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	2201      	movs	r2, #1
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_RTC_Init+0x110>)
 80007ee:	f002 fad7 	bl	8002da0 <HAL_RTC_SetAlarm_IT>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80007f8:	f000 f9ac 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	3740      	adds	r7, #64	; 0x40
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20004ee8 	.word	0x20004ee8
 8000808:	40002800 	.word	0x40002800

0800080c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	; (800085c <MX_USART3_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000816:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000818:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800081c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_USART3_UART_Init+0x4c>)
 8000844:	f003 f814 	bl	8003870 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f981 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20004a74 	.word	0x20004a74
 800085c:	40004800 	.word	0x40004800

08000860 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000864:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000866:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800086a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2206      	movs	r2, #6
 8000870:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000872:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	2202      	movs	r2, #2
 8000876:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000880:	2202      	movs	r2, #2
 8000882:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000886:	2201      	movs	r2, #1
 8000888:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000898:	2201      	movs	r2, #1
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a4:	f000 fe77 	bl	8001596 <HAL_PCD_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008ae:	f000 f951 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20004ae0 	.word	0x20004ae0

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	4b4c      	ldr	r3, [pc, #304]	; (8000a08 <MX_GPIO_Init+0x14c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a4b      	ldr	r2, [pc, #300]	; (8000a08 <MX_GPIO_Init+0x14c>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b49      	ldr	r3, [pc, #292]	; (8000a08 <MX_GPIO_Init+0x14c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	4b45      	ldr	r3, [pc, #276]	; (8000a08 <MX_GPIO_Init+0x14c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a44      	ldr	r2, [pc, #272]	; (8000a08 <MX_GPIO_Init+0x14c>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b42      	ldr	r3, [pc, #264]	; (8000a08 <MX_GPIO_Init+0x14c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b3e      	ldr	r3, [pc, #248]	; (8000a08 <MX_GPIO_Init+0x14c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a3d      	ldr	r2, [pc, #244]	; (8000a08 <MX_GPIO_Init+0x14c>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b3b      	ldr	r3, [pc, #236]	; (8000a08 <MX_GPIO_Init+0x14c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b37      	ldr	r3, [pc, #220]	; (8000a08 <MX_GPIO_Init+0x14c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a36      	ldr	r2, [pc, #216]	; (8000a08 <MX_GPIO_Init+0x14c>)
 8000930:	f043 0308 	orr.w	r3, r3, #8
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b34      	ldr	r3, [pc, #208]	; (8000a08 <MX_GPIO_Init+0x14c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0308 	and.w	r3, r3, #8
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b30      	ldr	r3, [pc, #192]	; (8000a08 <MX_GPIO_Init+0x14c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a2f      	ldr	r2, [pc, #188]	; (8000a08 <MX_GPIO_Init+0x14c>)
 800094c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b2d      	ldr	r3, [pc, #180]	; (8000a08 <MX_GPIO_Init+0x14c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <MX_GPIO_Init+0x14c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a28      	ldr	r2, [pc, #160]	; (8000a08 <MX_GPIO_Init+0x14c>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <MX_GPIO_Init+0x14c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000980:	4822      	ldr	r0, [pc, #136]	; (8000a0c <MX_GPIO_Init+0x150>)
 8000982:	f000 fdd5 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2140      	movs	r1, #64	; 0x40
 800098a:	4821      	ldr	r0, [pc, #132]	; (8000a10 <MX_GPIO_Init+0x154>)
 800098c:	f000 fdd0 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000990:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000996:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	481b      	ldr	r0, [pc, #108]	; (8000a14 <MX_GPIO_Init+0x158>)
 80009a8:	f000 fc2e 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009ac:	f244 0381 	movw	r3, #16513	; 0x4081
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4811      	ldr	r0, [pc, #68]	; (8000a0c <MX_GPIO_Init+0x150>)
 80009c6:	f000 fc1f 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009ca:	2340      	movs	r3, #64	; 0x40
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	480b      	ldr	r0, [pc, #44]	; (8000a10 <MX_GPIO_Init+0x154>)
 80009e2:	f000 fc11 	bl	8001208 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_GPIO_Init+0x154>)
 80009fa:	f000 fc05 	bl	8001208 <HAL_GPIO_Init>

}
 80009fe:	bf00      	nop
 8000a00:	3730      	adds	r7, #48	; 0x30
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020400 	.word	0x40020400
 8000a10:	40021800 	.word	0x40021800
 8000a14:	40020800 	.word	0x40020800

08000a18 <HAL_RTC_AlarmAEventCallback>:





void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 8000a20:	f04f 33ff 	mov.w	r3, #4294967295
 8000a24:	2208      	movs	r2, #8
 8000a26:	4905      	ldr	r1, [pc, #20]	; (8000a3c <HAL_RTC_AlarmAEventCallback+0x24>)
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <HAL_RTC_AlarmAEventCallback+0x28>)
 8000a2a:	f002 ff6e 	bl	800390a <HAL_UART_Transmit>
	flagA = 1;
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	701a      	strb	r2, [r3, #0]
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	08007af0 	.word	0x08007af0
 8000a40:	20004a74 	.word	0x20004a74
 8000a44:	20000090 	.word	0x20000090

08000a48 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
void StartMainTask(void *argument)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	//Add thread id to the list
	threadID[0]=osThreadGetId();
 8000a50:	f003 fe1e 	bl	8004690 <osThreadGetId>
 8000a54:	4603      	mov	r3, r0
 8000a56:	4a24      	ldr	r2, [pc, #144]	; (8000ae8 <StartMainTask+0xa0>)
 8000a58:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
	char msg[10];
	  /* Infinite loop */
	  for(;;)
	  {
		sprintf(msg,"FlagA: %i\r\n",flagA);
 8000a5a:	4b24      	ldr	r3, [pc, #144]	; (8000aec <StartMainTask+0xa4>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	461a      	mov	r2, r3
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	4922      	ldr	r1, [pc, #136]	; (8000af0 <StartMainTask+0xa8>)
 8000a66:	4618      	mov	r0, r3
 8000a68:	f006 fc76 	bl	8007358 <siprintf>
		HAL_UART_Transmit(&huart3,msg, strlen(msg), HAL_MAX_DELAY);
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fbcd 	bl	8000210 <strlen>
 8000a76:	4603      	mov	r3, r0
 8000a78:	b29a      	uxth	r2, r3
 8000a7a:	f107 010c 	add.w	r1, r7, #12
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	481c      	ldr	r0, [pc, #112]	; (8000af4 <StartMainTask+0xac>)
 8000a84:	f002 ff41 	bl	800390a <HAL_UART_Transmit>

		if (flagA==1){
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <StartMainTask+0xa4>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d125      	bne.n	8000adc <StartMainTask+0x94>
			HAL_UART_Transmit(&huart3,"FlagA==1\r\n", 10, HAL_MAX_DELAY);
 8000a90:	f04f 33ff 	mov.w	r3, #4294967295
 8000a94:	220a      	movs	r2, #10
 8000a96:	4918      	ldr	r1, [pc, #96]	; (8000af8 <StartMainTask+0xb0>)
 8000a98:	4816      	ldr	r0, [pc, #88]	; (8000af4 <StartMainTask+0xac>)
 8000a9a:	f002 ff36 	bl	800390a <HAL_UART_Transmit>
			flagA=0;
 8000a9e:	4b13      	ldr	r3, [pc, #76]	; (8000aec <StartMainTask+0xa4>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]



			//Setup RTC wake up timer
			HAL_UART_Transmit(&huart3,"Setting up RTCW\r\n", 17, HAL_MAX_DELAY);
 8000aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa8:	2211      	movs	r2, #17
 8000aaa:	4914      	ldr	r1, [pc, #80]	; (8000afc <StartMainTask+0xb4>)
 8000aac:	4811      	ldr	r0, [pc, #68]	; (8000af4 <StartMainTask+0xac>)
 8000aae:	f002 ff2c 	bl	800390a <HAL_UART_Transmit>
			//Counter value =
			//if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x4E20, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
			//if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x2806, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
			//if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x500C, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
			if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4812      	ldr	r0, [pc, #72]	; (8000b00 <StartMainTask+0xb8>)
 8000ab8:	f002 fb62 	bl	8003180 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <StartMainTask+0x7e>
			{
				Error_Handler();
 8000ac2:	f000 f847 	bl	8000b54 <Error_Handler>
			}


			osThreadSuspend(threadID[1]);
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <StartMainTask+0xa0>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f003 fdeb 	bl	80046a6 <osThreadSuspend>
			osThreadSuspend(osThreadGetId());
 8000ad0:	f003 fdde 	bl	8004690 <osThreadGetId>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f003 fde5 	bl	80046a6 <osThreadSuspend>
			//vTaskSuspend(blinkyTaskHandle);
			//vTaskSuspend(NULL);
		}
	    osDelay(1000);
 8000adc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ae0:	f003 fe02 	bl	80046e8 <osDelay>
	  {
 8000ae4:	e7b9      	b.n	8000a5a <StartMainTask+0x12>
 8000ae6:	bf00      	nop
 8000ae8:	20004ab8 	.word	0x20004ab8
 8000aec:	20000090 	.word	0x20000090
 8000af0:	08007b4c 	.word	0x08007b4c
 8000af4:	20004a74 	.word	0x20004a74
 8000af8:	08007b58 	.word	0x08007b58
 8000afc:	08007b64 	.word	0x08007b64
 8000b00:	20004ee8 	.word	0x20004ee8

08000b04 <StartBlinkyTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkyTask */
void StartBlinkyTask(void *argument)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkyTask */

	//Add thread id to the list
	threadID[1]=osThreadGetId();
 8000b0c:	f003 fdc0 	bl	8004690 <osThreadGetId>
 8000b10:	4603      	mov	r3, r0
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <StartBlinkyTask+0x24>)
 8000b14:	6053      	str	r3, [r2, #4]


  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8000b16:	2101      	movs	r1, #1
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <StartBlinkyTask+0x28>)
 8000b1a:	f000 fd22 	bl	8001562 <HAL_GPIO_TogglePin>
	osDelay(300);
 8000b1e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b22:	f003 fde1 	bl	80046e8 <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8000b26:	e7f6      	b.n	8000b16 <StartBlinkyTask+0x12>
 8000b28:	20004ab8 	.word	0x20004ab8
 8000b2c:	40020400 	.word	0x40020400

08000b30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d101      	bne.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b42:	f000 fa3b 	bl	8000fbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40001000 	.word	0x40001000

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <Error_Handler+0x8>
	...

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	210f      	movs	r1, #15
 8000ba2:	f06f 0001 	mvn.w	r0, #1
 8000ba6:	f000 fb05 	bl	80011b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b09a      	sub	sp, #104	; 0x68
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bc0:	f107 030c 	add.w	r3, r7, #12
 8000bc4:	225c      	movs	r2, #92	; 0x5c
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f006 fae9 	bl	80071a0 <memset>
  if(hrtc->Instance==RTC)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a10      	ldr	r2, [pc, #64]	; (8000c14 <HAL_RTC_MspInit+0x5c>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d119      	bne.n	8000c0c <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bd8:	2320      	movs	r3, #32
 8000bda:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000be0:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	4618      	mov	r0, r3
 8000be8:	f000 ff6a 	bl	8001ac0 <HAL_RCCEx_PeriphCLKConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000bf2:	f7ff ffaf 	bl	8000b54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_RTC_MspInit+0x60>)
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2105      	movs	r1, #5
 8000c00:	2029      	movs	r0, #41	; 0x29
 8000c02:	f000 fad7 	bl	80011b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000c06:	2029      	movs	r0, #41	; 0x29
 8000c08:	f000 faf0 	bl	80011ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c0c:	bf00      	nop
 8000c0e:	3768      	adds	r7, #104	; 0x68
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40002800 	.word	0x40002800
 8000c18:	42470e3c 	.word	0x42470e3c

08000c1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	; 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <HAL_UART_MspInit+0x84>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d12c      	bne.n	8000c98 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <HAL_UART_MspInit+0x88>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a17      	ldr	r2, [pc, #92]	; (8000ca4 <HAL_UART_MspInit+0x88>)
 8000c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_UART_MspInit+0x88>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <HAL_UART_MspInit+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a10      	ldr	r2, [pc, #64]	; (8000ca4 <HAL_UART_MspInit+0x88>)
 8000c64:	f043 0308 	orr.w	r3, r3, #8
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <HAL_UART_MspInit+0x88>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0308 	and.w	r3, r3, #8
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c88:	2307      	movs	r3, #7
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <HAL_UART_MspInit+0x8c>)
 8000c94:	f000 fab8 	bl	8001208 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c98:	bf00      	nop
 8000c9a:	3728      	adds	r7, #40	; 0x28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40004800 	.word	0x40004800
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020c00 	.word	0x40020c00

08000cac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b0a0      	sub	sp, #128	; 0x80
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	225c      	movs	r2, #92	; 0x5c
 8000cca:	2100      	movs	r1, #0
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f006 fa67 	bl	80071a0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cda:	d14e      	bne.n	8000d7a <HAL_PCD_MspInit+0xce>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000cdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ce0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 fee8 	bl	8001ac0 <HAL_RCCEx_PeriphCLKConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000cf6:	f7ff ff2d 	bl	8000b54 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <HAL_PCD_MspInit+0xd8>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a20      	ldr	r2, [pc, #128]	; (8000d84 <HAL_PCD_MspInit+0xd8>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	; (8000d84 <HAL_PCD_MspInit+0xd8>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d16:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d28:	230a      	movs	r3, #10
 8000d2a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d30:	4619      	mov	r1, r3
 8000d32:	4815      	ldr	r0, [pc, #84]	; (8000d88 <HAL_PCD_MspInit+0xdc>)
 8000d34:	f000 fa68 	bl	8001208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480e      	ldr	r0, [pc, #56]	; (8000d88 <HAL_PCD_MspInit+0xdc>)
 8000d4e:	f000 fa5b 	bl	8001208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d52:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <HAL_PCD_MspInit+0xd8>)
 8000d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d56:	4a0b      	ldr	r2, [pc, #44]	; (8000d84 <HAL_PCD_MspInit+0xd8>)
 8000d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d5c:	6353      	str	r3, [r2, #52]	; 0x34
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <HAL_PCD_MspInit+0xd8>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <HAL_PCD_MspInit+0xd8>)
 8000d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <HAL_PCD_MspInit+0xd8>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3780      	adds	r7, #128	; 0x80
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000

08000d8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08c      	sub	sp, #48	; 0x30
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	2036      	movs	r0, #54	; 0x36
 8000da2:	f000 fa07 	bl	80011b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000da6:	2036      	movs	r0, #54	; 0x36
 8000da8:	f000 fa20 	bl	80011ec <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <HAL_InitTick+0xa4>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	4a1e      	ldr	r2, [pc, #120]	; (8000e30 <HAL_InitTick+0xa4>)
 8000db6:	f043 0310 	orr.w	r3, r3, #16
 8000dba:	6413      	str	r3, [r2, #64]	; 0x40
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <HAL_InitTick+0xa4>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	f003 0310 	and.w	r3, r3, #16
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dc8:	f107 0210 	add.w	r2, r7, #16
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 fe42 	bl	8001a5c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000dd8:	f000 fe18 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de4:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <HAL_InitTick+0xa8>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	0c9b      	lsrs	r3, r3, #18
 8000dec:	3b01      	subs	r3, #1
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_InitTick+0xac>)
 8000df2:	4a12      	ldr	r2, [pc, #72]	; (8000e3c <HAL_InitTick+0xb0>)
 8000df4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <HAL_InitTick+0xac>)
 8000df8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dfc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <HAL_InitTick+0xac>)
 8000e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e02:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e04:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_InitTick+0xac>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HAL_InitTick+0xac>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e10:	4809      	ldr	r0, [pc, #36]	; (8000e38 <HAL_InitTick+0xac>)
 8000e12:	f002 fa7f 	bl	8003314 <HAL_TIM_Base_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d104      	bne.n	8000e26 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e1c:	4806      	ldr	r0, [pc, #24]	; (8000e38 <HAL_InitTick+0xac>)
 8000e1e:	f002 fad3 	bl	80033c8 <HAL_TIM_Base_Start_IT>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3730      	adds	r7, #48	; 0x30
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40023800 	.word	0x40023800
 8000e34:	431bde83 	.word	0x431bde83
 8000e38:	20004f0c 	.word	0x20004f0c
 8000e3c:	40001000 	.word	0x40001000

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <NMI_Handler+0x4>

08000e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4a:	e7fe      	b.n	8000e4a <HardFault_Handler+0x4>

08000e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <MemManage_Handler+0x4>

08000e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <RTC_Alarm_IRQHandler+0x10>)
 8000e72:	f002 f8cd 	bl	8003010 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20004ee8 	.word	0x20004ee8

08000e80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <TIM6_DAC_IRQHandler+0x10>)
 8000e86:	f002 fb0f 	bl	80034a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20004f0c 	.word	0x20004f0c

08000e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e9c:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <_sbrk+0x5c>)
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <_sbrk+0x60>)
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <_sbrk+0x64>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <_sbrk+0x64>)
 8000eb2:	4a12      	ldr	r2, [pc, #72]	; (8000efc <_sbrk+0x68>)
 8000eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eb6:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d207      	bcs.n	8000ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ec4:	f006 f932 	bl	800712c <__errno>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	220c      	movs	r2, #12
 8000ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	e009      	b.n	8000ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eda:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <_sbrk+0x64>)
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <_sbrk+0x64>)
 8000ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20020000 	.word	0x20020000
 8000ef4:	00000400 	.word	0x00000400
 8000ef8:	20000094 	.word	0x20000094
 8000efc:	20004fa8 	.word	0x20004fa8

08000f00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <SystemInit+0x20>)
 8000f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <SystemInit+0x20>)
 8000f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f28:	480d      	ldr	r0, [pc, #52]	; (8000f60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f2a:	490e      	ldr	r1, [pc, #56]	; (8000f64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f2c:	4a0e      	ldr	r2, [pc, #56]	; (8000f68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f40:	4c0b      	ldr	r4, [pc, #44]	; (8000f70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f4e:	f7ff ffd7 	bl	8000f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f52:	f006 f8f1 	bl	8007138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f56:	f7ff fb2f 	bl	80005b8 <main>
  bx  lr    
 8000f5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f68:	08007c94 	.word	0x08007c94
  ldr r2, =_sbss
 8000f6c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f70:	20004fa8 	.word	0x20004fa8

08000f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC_IRQHandler>
	...

08000f78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_Init+0x40>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <HAL_Init+0x40>)
 8000f82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_Init+0x40>)
 8000f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <HAL_Init+0x40>)
 8000f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	f000 f8fc 	bl	800119e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fa6:	200f      	movs	r0, #15
 8000fa8:	f7ff fef0 	bl	8000d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fac:	f7ff fdd8 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023c00 	.word	0x40023c00

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20004f54 	.word	0x20004f54

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20004f54 	.word	0x20004f54

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff ffee 	bl	8000fe4 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_Delay+0x44>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffde 	bl	8000fe4 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d8f7      	bhi.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008

08001044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105a:	68ba      	ldr	r2, [r7, #8]
 800105c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001060:	4013      	ands	r3, r2
 8001062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800106c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001076:	4a04      	ldr	r2, [pc, #16]	; (8001088 <__NVIC_SetPriorityGrouping+0x44>)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	60d3      	str	r3, [r2, #12]
}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001090:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	f003 0307 	and.w	r3, r3, #7
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	db0b      	blt.n	80010d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f003 021f 	and.w	r2, r3, #31
 80010c0:	4907      	ldr	r1, [pc, #28]	; (80010e0 <__NVIC_EnableIRQ+0x38>)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	095b      	lsrs	r3, r3, #5
 80010c8:	2001      	movs	r0, #1
 80010ca:	fa00 f202 	lsl.w	r2, r0, r2
 80010ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000e100 	.word	0xe000e100

080010e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	db0a      	blt.n	800110e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	b2da      	uxtb	r2, r3
 80010fc:	490c      	ldr	r1, [pc, #48]	; (8001130 <__NVIC_SetPriority+0x4c>)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	440b      	add	r3, r1
 8001108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800110c:	e00a      	b.n	8001124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	b2da      	uxtb	r2, r3
 8001112:	4908      	ldr	r1, [pc, #32]	; (8001134 <__NVIC_SetPriority+0x50>)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	3b04      	subs	r3, #4
 800111c:	0112      	lsls	r2, r2, #4
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	440b      	add	r3, r1
 8001122:	761a      	strb	r2, [r3, #24]
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001138:	b480      	push	{r7}
 800113a:	b089      	sub	sp, #36	; 0x24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f1c3 0307 	rsb	r3, r3, #7
 8001152:	2b04      	cmp	r3, #4
 8001154:	bf28      	it	cs
 8001156:	2304      	movcs	r3, #4
 8001158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3304      	adds	r3, #4
 800115e:	2b06      	cmp	r3, #6
 8001160:	d902      	bls.n	8001168 <NVIC_EncodePriority+0x30>
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3b03      	subs	r3, #3
 8001166:	e000      	b.n	800116a <NVIC_EncodePriority+0x32>
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800116c:	f04f 32ff 	mov.w	r2, #4294967295
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43da      	mvns	r2, r3
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	401a      	ands	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001180:	f04f 31ff 	mov.w	r1, #4294967295
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa01 f303 	lsl.w	r3, r1, r3
 800118a:	43d9      	mvns	r1, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	4313      	orrs	r3, r2
         );
}
 8001192:	4618      	mov	r0, r3
 8001194:	3724      	adds	r7, #36	; 0x24
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ff4c 	bl	8001044 <__NVIC_SetPriorityGrouping>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
 80011c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c6:	f7ff ff61 	bl	800108c <__NVIC_GetPriorityGrouping>
 80011ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	68b9      	ldr	r1, [r7, #8]
 80011d0:	6978      	ldr	r0, [r7, #20]
 80011d2:	f7ff ffb1 	bl	8001138 <NVIC_EncodePriority>
 80011d6:	4602      	mov	r2, r0
 80011d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011dc:	4611      	mov	r1, r2
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff ff80 	bl	80010e4 <__NVIC_SetPriority>
}
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff54 	bl	80010a8 <__NVIC_EnableIRQ>
}
 8001200:	bf00      	nop
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	e165      	b.n	80014f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001224:	2201      	movs	r2, #1
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	429a      	cmp	r2, r3
 800123e:	f040 8154 	bne.w	80014ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	2b01      	cmp	r3, #1
 800124c:	d005      	beq.n	800125a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001256:	2b02      	cmp	r3, #2
 8001258:	d130      	bne.n	80012bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	2203      	movs	r2, #3
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	68da      	ldr	r2, [r3, #12]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001290:	2201      	movs	r2, #1
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	f003 0201 	and.w	r2, r3, #1
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d017      	beq.n	80012f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d123      	bne.n	800134c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	08da      	lsrs	r2, r3, #3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3208      	adds	r2, #8
 800130c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	220f      	movs	r2, #15
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4313      	orrs	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	08da      	lsrs	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3208      	adds	r2, #8
 8001346:	69b9      	ldr	r1, [r7, #24]
 8001348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0203 	and.w	r2, r3, #3
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80ae 	beq.w	80014ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b5d      	ldr	r3, [pc, #372]	; (8001508 <HAL_GPIO_Init+0x300>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001396:	4a5c      	ldr	r2, [pc, #368]	; (8001508 <HAL_GPIO_Init+0x300>)
 8001398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800139c:	6453      	str	r3, [r2, #68]	; 0x44
 800139e:	4b5a      	ldr	r3, [pc, #360]	; (8001508 <HAL_GPIO_Init+0x300>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013aa:	4a58      	ldr	r2, [pc, #352]	; (800150c <HAL_GPIO_Init+0x304>)
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	089b      	lsrs	r3, r3, #2
 80013b0:	3302      	adds	r3, #2
 80013b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	220f      	movs	r2, #15
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4f      	ldr	r2, [pc, #316]	; (8001510 <HAL_GPIO_Init+0x308>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d025      	beq.n	8001422 <HAL_GPIO_Init+0x21a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4e      	ldr	r2, [pc, #312]	; (8001514 <HAL_GPIO_Init+0x30c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d01f      	beq.n	800141e <HAL_GPIO_Init+0x216>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4d      	ldr	r2, [pc, #308]	; (8001518 <HAL_GPIO_Init+0x310>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d019      	beq.n	800141a <HAL_GPIO_Init+0x212>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4c      	ldr	r2, [pc, #304]	; (800151c <HAL_GPIO_Init+0x314>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d013      	beq.n	8001416 <HAL_GPIO_Init+0x20e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4b      	ldr	r2, [pc, #300]	; (8001520 <HAL_GPIO_Init+0x318>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d00d      	beq.n	8001412 <HAL_GPIO_Init+0x20a>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a4a      	ldr	r2, [pc, #296]	; (8001524 <HAL_GPIO_Init+0x31c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d007      	beq.n	800140e <HAL_GPIO_Init+0x206>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a49      	ldr	r2, [pc, #292]	; (8001528 <HAL_GPIO_Init+0x320>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d101      	bne.n	800140a <HAL_GPIO_Init+0x202>
 8001406:	2306      	movs	r3, #6
 8001408:	e00c      	b.n	8001424 <HAL_GPIO_Init+0x21c>
 800140a:	2307      	movs	r3, #7
 800140c:	e00a      	b.n	8001424 <HAL_GPIO_Init+0x21c>
 800140e:	2305      	movs	r3, #5
 8001410:	e008      	b.n	8001424 <HAL_GPIO_Init+0x21c>
 8001412:	2304      	movs	r3, #4
 8001414:	e006      	b.n	8001424 <HAL_GPIO_Init+0x21c>
 8001416:	2303      	movs	r3, #3
 8001418:	e004      	b.n	8001424 <HAL_GPIO_Init+0x21c>
 800141a:	2302      	movs	r3, #2
 800141c:	e002      	b.n	8001424 <HAL_GPIO_Init+0x21c>
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <HAL_GPIO_Init+0x21c>
 8001422:	2300      	movs	r3, #0
 8001424:	69fa      	ldr	r2, [r7, #28]
 8001426:	f002 0203 	and.w	r2, r2, #3
 800142a:	0092      	lsls	r2, r2, #2
 800142c:	4093      	lsls	r3, r2
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001434:	4935      	ldr	r1, [pc, #212]	; (800150c <HAL_GPIO_Init+0x304>)
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	089b      	lsrs	r3, r3, #2
 800143a:	3302      	adds	r3, #2
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001442:	4b3a      	ldr	r3, [pc, #232]	; (800152c <HAL_GPIO_Init+0x324>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001466:	4a31      	ldr	r2, [pc, #196]	; (800152c <HAL_GPIO_Init+0x324>)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800146c:	4b2f      	ldr	r3, [pc, #188]	; (800152c <HAL_GPIO_Init+0x324>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001490:	4a26      	ldr	r2, [pc, #152]	; (800152c <HAL_GPIO_Init+0x324>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001496:	4b25      	ldr	r3, [pc, #148]	; (800152c <HAL_GPIO_Init+0x324>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ba:	4a1c      	ldr	r2, [pc, #112]	; (800152c <HAL_GPIO_Init+0x324>)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014c0:	4b1a      	ldr	r3, [pc, #104]	; (800152c <HAL_GPIO_Init+0x324>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014e4:	4a11      	ldr	r2, [pc, #68]	; (800152c <HAL_GPIO_Init+0x324>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3301      	adds	r3, #1
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	f67f ae96 	bls.w	8001224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3724      	adds	r7, #36	; 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40013800 	.word	0x40013800
 8001510:	40020000 	.word	0x40020000
 8001514:	40020400 	.word	0x40020400
 8001518:	40020800 	.word	0x40020800
 800151c:	40020c00 	.word	0x40020c00
 8001520:	40021000 	.word	0x40021000
 8001524:	40021400 	.word	0x40021400
 8001528:	40021800 	.word	0x40021800
 800152c:	40013c00 	.word	0x40013c00

08001530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
 800153c:	4613      	mov	r3, r2
 800153e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001540:	787b      	ldrb	r3, [r7, #1]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800154c:	e003      	b.n	8001556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800154e:	887b      	ldrh	r3, [r7, #2]
 8001550:	041a      	lsls	r2, r3, #16
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	619a      	str	r2, [r3, #24]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001562:	b480      	push	{r7}
 8001564:	b085      	sub	sp, #20
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	460b      	mov	r3, r1
 800156c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001574:	887a      	ldrh	r2, [r7, #2]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4013      	ands	r3, r2
 800157a:	041a      	lsls	r2, r3, #16
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	43d9      	mvns	r1, r3
 8001580:	887b      	ldrh	r3, [r7, #2]
 8001582:	400b      	ands	r3, r1
 8001584:	431a      	orrs	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	619a      	str	r2, [r3, #24]
}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001596:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001598:	b08f      	sub	sp, #60	; 0x3c
 800159a:	af0a      	add	r7, sp, #40	; 0x28
 800159c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e116      	b.n	80017d6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d106      	bne.n	80015c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff fb72 	bl	8000cac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2203      	movs	r2, #3
 80015cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 fcb9 	bl	8003f5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	687e      	ldr	r6, [r7, #4]
 80015f4:	466d      	mov	r5, sp
 80015f6:	f106 0410 	add.w	r4, r6, #16
 80015fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001602:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001606:	e885 0003 	stmia.w	r5, {r0, r1}
 800160a:	1d33      	adds	r3, r6, #4
 800160c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800160e:	6838      	ldr	r0, [r7, #0]
 8001610:	f002 fc44 	bl	8003e9c <USB_CoreInit>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d005      	beq.n	8001626 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2202      	movs	r2, #2
 800161e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e0d7      	b.n	80017d6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f002 fca7 	bl	8003f80 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001632:	2300      	movs	r3, #0
 8001634:	73fb      	strb	r3, [r7, #15]
 8001636:	e04a      	b.n	80016ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001638:	7bfa      	ldrb	r2, [r7, #15]
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	333d      	adds	r3, #61	; 0x3d
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800164c:	7bfa      	ldrb	r2, [r7, #15]
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	333c      	adds	r3, #60	; 0x3c
 800165c:	7bfa      	ldrb	r2, [r7, #15]
 800165e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	b298      	uxth	r0, r3
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	1a9b      	subs	r3, r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	440b      	add	r3, r1
 8001672:	3342      	adds	r3, #66	; 0x42
 8001674:	4602      	mov	r2, r0
 8001676:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001678:	7bfa      	ldrb	r2, [r7, #15]
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	1a9b      	subs	r3, r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	333f      	adds	r3, #63	; 0x3f
 8001688:	2200      	movs	r2, #0
 800168a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	1a9b      	subs	r3, r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	3344      	adds	r3, #68	; 0x44
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	4613      	mov	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	1a9b      	subs	r3, r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	3348      	adds	r3, #72	; 0x48
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016b4:	7bfa      	ldrb	r2, [r7, #15]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	1a9b      	subs	r3, r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	3350      	adds	r3, #80	; 0x50
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	3301      	adds	r3, #1
 80016cc:	73fb      	strb	r3, [r7, #15]
 80016ce:	7bfa      	ldrb	r2, [r7, #15]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d3af      	bcc.n	8001638 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d8:	2300      	movs	r3, #0
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	e044      	b.n	8001768 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	1a9b      	subs	r3, r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016f4:	7bfa      	ldrb	r2, [r7, #15]
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	1a9b      	subs	r3, r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001706:	7bfa      	ldrb	r2, [r7, #15]
 8001708:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800170a:	7bfa      	ldrb	r2, [r7, #15]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	1a9b      	subs	r3, r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001720:	7bfa      	ldrb	r2, [r7, #15]
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	4613      	mov	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	440b      	add	r3, r1
 800172e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001736:	7bfa      	ldrb	r2, [r7, #15]
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	1a9b      	subs	r3, r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800174c:	7bfa      	ldrb	r2, [r7, #15]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	1a9b      	subs	r3, r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	3301      	adds	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
 8001768:	7bfa      	ldrb	r2, [r7, #15]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	429a      	cmp	r2, r3
 8001770:	d3b5      	bcc.n	80016de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	687e      	ldr	r6, [r7, #4]
 800177a:	466d      	mov	r5, sp
 800177c:	f106 0410 	add.w	r4, r6, #16
 8001780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001788:	e894 0003 	ldmia.w	r4, {r0, r1}
 800178c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001790:	1d33      	adds	r3, r6, #4
 8001792:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001794:	6838      	ldr	r0, [r7, #0]
 8001796:	f002 fc3f 	bl	8004018 <USB_DevInit>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2202      	movs	r2, #2
 80017a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e014      	b.n	80017d6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d102      	bne.n	80017ca <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f80a 	bl	80017de <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f002 fddd 	bl	800438e <USB_DevDisconnect>

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017de <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80017de:	b480      	push	{r7}
 80017e0:	b085      	sub	sp, #20
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800180c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001810:	f043 0303 	orr.w	r3, r3, #3
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0cc      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800183c:	4b68      	ldr	r3, [pc, #416]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 030f 	and.w	r3, r3, #15
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d90c      	bls.n	8001864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b65      	ldr	r3, [pc, #404]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b63      	ldr	r3, [pc, #396]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0b8      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d020      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d005      	beq.n	8001888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800187c:	4b59      	ldr	r3, [pc, #356]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4a58      	ldr	r2, [pc, #352]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001894:	4b53      	ldr	r3, [pc, #332]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4a52      	ldr	r2, [pc, #328]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800189e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a0:	4b50      	ldr	r3, [pc, #320]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	494d      	ldr	r1, [pc, #308]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d044      	beq.n	8001948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d107      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c6:	4b47      	ldr	r3, [pc, #284]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d119      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e07f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d003      	beq.n	80018e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e6:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e06f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f6:	4b3b      	ldr	r3, [pc, #236]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e067      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001906:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f023 0203 	bic.w	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4934      	ldr	r1, [pc, #208]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	4313      	orrs	r3, r2
 8001916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001918:	f7ff fb64 	bl	8000fe4 <HAL_GetTick>
 800191c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191e:	e00a      	b.n	8001936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001920:	f7ff fb60 	bl	8000fe4 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	; 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e04f      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001936:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f003 020c 	and.w	r2, r3, #12
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	429a      	cmp	r2, r3
 8001946:	d1eb      	bne.n	8001920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001948:	4b25      	ldr	r3, [pc, #148]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 030f 	and.w	r3, r3, #15
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d20c      	bcs.n	8001970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195e:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	429a      	cmp	r2, r3
 800196a:	d001      	beq.n	8001970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e032      	b.n	80019d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d008      	beq.n	800198e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	4916      	ldr	r1, [pc, #88]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	4313      	orrs	r3, r2
 800198c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d009      	beq.n	80019ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	490e      	ldr	r1, [pc, #56]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ae:	f000 fbb1 	bl	8002114 <HAL_RCC_GetSysClockFreq>
 80019b2:	4602      	mov	r2, r0
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	f003 030f 	and.w	r3, r3, #15
 80019be:	490a      	ldr	r1, [pc, #40]	; (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	5ccb      	ldrb	r3, [r1, r3]
 80019c2:	fa22 f303 	lsr.w	r3, r2, r3
 80019c6:	4a09      	ldr	r2, [pc, #36]	; (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80019c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff f9dc 	bl	8000d8c <HAL_InitTick>

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023c00 	.word	0x40023c00
 80019e4:	40023800 	.word	0x40023800
 80019e8:	08007bd8 	.word	0x08007bd8
 80019ec:	20000000 	.word	0x20000000
 80019f0:	20000004 	.word	0x20000004

080019f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019f8:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	20000000 	.word	0x20000000

08001a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a10:	f7ff fff0 	bl	80019f4 <HAL_RCC_GetHCLKFreq>
 8001a14:	4602      	mov	r2, r0
 8001a16:	4b05      	ldr	r3, [pc, #20]	; (8001a2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	0a9b      	lsrs	r3, r3, #10
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	4903      	ldr	r1, [pc, #12]	; (8001a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a22:	5ccb      	ldrb	r3, [r1, r3]
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	08007be8 	.word	0x08007be8

08001a34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a38:	f7ff ffdc 	bl	80019f4 <HAL_RCC_GetHCLKFreq>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	0b5b      	lsrs	r3, r3, #13
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	4903      	ldr	r1, [pc, #12]	; (8001a58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a4a:	5ccb      	ldrb	r3, [r1, r3]
 8001a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40023800 	.word	0x40023800
 8001a58:	08007be8 	.word	0x08007be8

08001a5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	220f      	movs	r2, #15
 8001a6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 0203 	and.w	r2, r3, #3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_RCC_GetClockConfig+0x5c>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	08db      	lsrs	r3, r3, #3
 8001a96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <HAL_RCC_GetClockConfig+0x60>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 020f 	and.w	r2, r3, #15
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	601a      	str	r2, [r3, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40023c00 	.word	0x40023c00

08001ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08c      	sub	sp, #48	; 0x30
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001adc:	2300      	movs	r3, #0
 8001ade:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d010      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001af8:	4b6f      	ldr	r3, [pc, #444]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001afa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001afe:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b06:	496c      	ldr	r1, [pc, #432]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001b16:	2301      	movs	r3, #1
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d010      	beq.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001b26:	4b64      	ldr	r3, [pc, #400]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b2c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b34:	4960      	ldr	r1, [pc, #384]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d101      	bne.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001b44:	2301      	movs	r3, #1
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d017      	beq.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b54:	4b58      	ldr	r3, [pc, #352]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4955      	ldr	r1, [pc, #340]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b72:	d101      	bne.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001b74:	2301      	movs	r3, #1
 8001b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001b80:	2301      	movs	r3, #1
 8001b82:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d017      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b90:	4b49      	ldr	r3, [pc, #292]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9e:	4946      	ldr	r1, [pc, #280]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0320 	and.w	r3, r3, #32
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 808a 	beq.w	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	4b39      	ldr	r3, [pc, #228]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	4a38      	ldr	r2, [pc, #224]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bde:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001bea:	4b34      	ldr	r3, [pc, #208]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a33      	ldr	r2, [pc, #204]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bf6:	f7ff f9f5 	bl	8000fe4 <HAL_GetTick>
 8001bfa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001bfe:	f7ff f9f1 	bl	8000fe4 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e278      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001c10:	4b2a      	ldr	r3, [pc, #168]	; (8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c1c:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c24:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d02f      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c34:	6a3a      	ldr	r2, [r7, #32]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d028      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c3a:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c42:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c44:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001c50:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c52:	6a3b      	ldr	r3, [r7, #32]
 8001c54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c56:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d114      	bne.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001c62:	f7ff f9bf 	bl	8000fe4 <HAL_GetTick>
 8001c66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c68:	e00a      	b.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c6a:	f7ff f9bb 	bl	8000fe4 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e240      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c80:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0ee      	beq.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c98:	d114      	bne.n	8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cae:	4902      	ldr	r1, [pc, #8]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	608b      	str	r3, [r1, #8]
 8001cb4:	e00c      	b.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	42470e40 	.word	0x42470e40
 8001cc4:	4b4a      	ldr	r3, [pc, #296]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	4a49      	ldr	r2, [pc, #292]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001cce:	6093      	str	r3, [r2, #8]
 8001cd0:	4b47      	ldr	r3, [pc, #284]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cdc:	4944      	ldr	r1, [pc, #272]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d004      	beq.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001cf4:	4b3f      	ldr	r3, [pc, #252]	; (8001df4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001cf6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00a      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001d04:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	4937      	ldr	r1, [pc, #220]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00a      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d26:	4b32      	ldr	r3, [pc, #200]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d2c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d34:	492e      	ldr	r1, [pc, #184]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d011      	beq.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d48:	4b29      	ldr	r3, [pc, #164]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d4e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d56:	4926      	ldr	r1, [pc, #152]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d66:	d101      	bne.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00a      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001d78:	4b1d      	ldr	r3, [pc, #116]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	491a      	ldr	r1, [pc, #104]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d011      	beq.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da8:	4911      	ldr	r1, [pc, #68]	; (8001df0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001db8:	d101      	bne.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dcc:	f040 80ff 	bne.w	8001fce <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dd6:	f7ff f905 	bl	8000fe4 <HAL_GetTick>
 8001dda:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ddc:	e00e      	b.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001dde:	f7ff f901 	bl	8000fe4 <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d907      	bls.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e188      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001df0:	40023800 	.word	0x40023800
 8001df4:	424711e0 	.word	0x424711e0
 8001df8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001dfc:	4b7e      	ldr	r3, [pc, #504]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1ea      	bne.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d009      	beq.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d028      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d124      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e30:	4b71      	ldr	r3, [pc, #452]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001e42:	4b6d      	ldr	r3, [pc, #436]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e48:	0e1b      	lsrs	r3, r3, #24
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	019b      	lsls	r3, r3, #6
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	085b      	lsrs	r3, r3, #1
 8001e60:	3b01      	subs	r3, #1
 8001e62:	041b      	lsls	r3, r3, #16
 8001e64:	431a      	orrs	r2, r3
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	061b      	lsls	r3, r3, #24
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	071b      	lsls	r3, r3, #28
 8001e72:	4961      	ldr	r1, [pc, #388]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d004      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e8e:	d00a      	beq.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d035      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ea4:	d130      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001ea6:	4b54      	ldr	r3, [pc, #336]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eac:	0c1b      	lsrs	r3, r3, #16
 8001eae:	f003 0303 	and.w	r3, r3, #3
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001eb8:	4b4f      	ldr	r3, [pc, #316]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ebe:	0f1b      	lsrs	r3, r3, #28
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	019b      	lsls	r3, r3, #6
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	085b      	lsrs	r3, r3, #1
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	041b      	lsls	r3, r3, #16
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	061b      	lsls	r3, r3, #24
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	071b      	lsls	r3, r3, #28
 8001ee8:	4943      	ldr	r1, [pc, #268]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001ef0:	4b41      	ldr	r3, [pc, #260]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ef2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ef6:	f023 021f 	bic.w	r2, r3, #31
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efe:	3b01      	subs	r3, #1
 8001f00:	493d      	ldr	r1, [pc, #244]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d029      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f1c:	d124      	bne.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001f1e:	4b36      	ldr	r3, [pc, #216]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f24:	0c1b      	lsrs	r3, r3, #16
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f30:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f36:	0f1b      	lsrs	r3, r3, #28
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	019b      	lsls	r3, r3, #6
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	085b      	lsrs	r3, r3, #1
 8001f50:	3b01      	subs	r3, #1
 8001f52:	041b      	lsls	r3, r3, #16
 8001f54:	431a      	orrs	r2, r3
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	061b      	lsls	r3, r3, #24
 8001f5a:	431a      	orrs	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	071b      	lsls	r3, r3, #28
 8001f60:	4925      	ldr	r1, [pc, #148]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d016      	beq.n	8001fa2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	019b      	lsls	r3, r3, #6
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	085b      	lsrs	r3, r3, #1
 8001f86:	3b01      	subs	r3, #1
 8001f88:	041b      	lsls	r3, r3, #16
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	061b      	lsls	r3, r3, #24
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	071b      	lsls	r3, r3, #28
 8001f9a:	4917      	ldr	r1, [pc, #92]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001fa2:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fa8:	f7ff f81c 	bl	8000fe4 <HAL_GetTick>
 8001fac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001fb0:	f7ff f818 	bl	8000fe4 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e09f      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	f040 8095 	bne.w	8002100 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fdc:	f7ff f802 	bl	8000fe4 <HAL_GetTick>
 8001fe0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fe2:	e00f      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001fe4:	f7fe fffe 	bl	8000fe4 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d908      	bls.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e085      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	42470068 	.word	0x42470068
 8002000:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002004:	4b41      	ldr	r3, [pc, #260]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800200c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002010:	d0e8      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0304 	and.w	r3, r3, #4
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800202e:	2b00      	cmp	r3, #0
 8002030:	d02b      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002036:	2b00      	cmp	r3, #0
 8002038:	d127      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800203a:	4b34      	ldr	r3, [pc, #208]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800203c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002040:	0c1b      	lsrs	r3, r3, #16
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	3301      	adds	r3, #1
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	699a      	ldr	r2, [r3, #24]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	019b      	lsls	r3, r3, #6
 8002056:	431a      	orrs	r2, r3
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	085b      	lsrs	r3, r3, #1
 800205c:	3b01      	subs	r3, #1
 800205e:	041b      	lsls	r3, r3, #16
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	061b      	lsls	r3, r3, #24
 8002068:	4928      	ldr	r1, [pc, #160]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002070:	4b26      	ldr	r3, [pc, #152]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002076:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	3b01      	subs	r3, #1
 8002080:	021b      	lsls	r3, r3, #8
 8002082:	4922      	ldr	r1, [pc, #136]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002084:	4313      	orrs	r3, r2
 8002086:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002092:	2b00      	cmp	r3, #0
 8002094:	d01d      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800209e:	d118      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80020a0:	4b1a      	ldr	r3, [pc, #104]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a6:	0e1b      	lsrs	r3, r3, #24
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699a      	ldr	r2, [r3, #24]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	019b      	lsls	r3, r3, #6
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	085b      	lsrs	r3, r3, #1
 80020c0:	3b01      	subs	r3, #1
 80020c2:	041b      	lsls	r3, r3, #16
 80020c4:	431a      	orrs	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	061b      	lsls	r3, r3, #24
 80020ca:	4910      	ldr	r1, [pc, #64]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80020d2:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80020d8:	f7fe ff84 	bl	8000fe4 <HAL_GetTick>
 80020dc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80020e0:	f7fe ff80 	bl	8000fe4 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e007      	b.n	8002102 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020fe:	d1ef      	bne.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3730      	adds	r7, #48	; 0x30
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40023800 	.word	0x40023800
 8002110:	42470070 	.word	0x42470070

08002114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002118:	b088      	sub	sp, #32
 800211a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800212c:	2300      	movs	r3, #0
 800212e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002130:	4bce      	ldr	r3, [pc, #824]	; (800246c <HAL_RCC_GetSysClockFreq+0x358>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b0c      	cmp	r3, #12
 800213a:	f200 818d 	bhi.w	8002458 <HAL_RCC_GetSysClockFreq+0x344>
 800213e:	a201      	add	r2, pc, #4	; (adr r2, 8002144 <HAL_RCC_GetSysClockFreq+0x30>)
 8002140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002144:	08002179 	.word	0x08002179
 8002148:	08002459 	.word	0x08002459
 800214c:	08002459 	.word	0x08002459
 8002150:	08002459 	.word	0x08002459
 8002154:	0800217f 	.word	0x0800217f
 8002158:	08002459 	.word	0x08002459
 800215c:	08002459 	.word	0x08002459
 8002160:	08002459 	.word	0x08002459
 8002164:	08002185 	.word	0x08002185
 8002168:	08002459 	.word	0x08002459
 800216c:	08002459 	.word	0x08002459
 8002170:	08002459 	.word	0x08002459
 8002174:	080022f9 	.word	0x080022f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002178:	4bbd      	ldr	r3, [pc, #756]	; (8002470 <HAL_RCC_GetSysClockFreq+0x35c>)
 800217a:	61bb      	str	r3, [r7, #24]
       break;
 800217c:	e16f      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800217e:	4bbd      	ldr	r3, [pc, #756]	; (8002474 <HAL_RCC_GetSysClockFreq+0x360>)
 8002180:	61bb      	str	r3, [r7, #24]
      break;
 8002182:	e16c      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002184:	4bb9      	ldr	r3, [pc, #740]	; (800246c <HAL_RCC_GetSysClockFreq+0x358>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800218c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800218e:	4bb7      	ldr	r3, [pc, #732]	; (800246c <HAL_RCC_GetSysClockFreq+0x358>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d053      	beq.n	8002242 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800219a:	4bb4      	ldr	r3, [pc, #720]	; (800246c <HAL_RCC_GetSysClockFreq+0x358>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	099b      	lsrs	r3, r3, #6
 80021a0:	461a      	mov	r2, r3
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021aa:	f04f 0100 	mov.w	r1, #0
 80021ae:	ea02 0400 	and.w	r4, r2, r0
 80021b2:	603c      	str	r4, [r7, #0]
 80021b4:	400b      	ands	r3, r1
 80021b6:	607b      	str	r3, [r7, #4]
 80021b8:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021bc:	4620      	mov	r0, r4
 80021be:	4629      	mov	r1, r5
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	014b      	lsls	r3, r1, #5
 80021ca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021ce:	0142      	lsls	r2, r0, #5
 80021d0:	4610      	mov	r0, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	4623      	mov	r3, r4
 80021d6:	1ac0      	subs	r0, r0, r3
 80021d8:	462b      	mov	r3, r5
 80021da:	eb61 0103 	sbc.w	r1, r1, r3
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	018b      	lsls	r3, r1, #6
 80021e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021ec:	0182      	lsls	r2, r0, #6
 80021ee:	1a12      	subs	r2, r2, r0
 80021f0:	eb63 0301 	sbc.w	r3, r3, r1
 80021f4:	f04f 0000 	mov.w	r0, #0
 80021f8:	f04f 0100 	mov.w	r1, #0
 80021fc:	00d9      	lsls	r1, r3, #3
 80021fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002202:	00d0      	lsls	r0, r2, #3
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4621      	mov	r1, r4
 800220a:	1852      	adds	r2, r2, r1
 800220c:	4629      	mov	r1, r5
 800220e:	eb43 0101 	adc.w	r1, r3, r1
 8002212:	460b      	mov	r3, r1
 8002214:	f04f 0000 	mov.w	r0, #0
 8002218:	f04f 0100 	mov.w	r1, #0
 800221c:	0259      	lsls	r1, r3, #9
 800221e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002222:	0250      	lsls	r0, r2, #9
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	461a      	mov	r2, r3
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	f7fe f844 	bl	80002c0 <__aeabi_uldivmod>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4613      	mov	r3, r2
 800223e:	61fb      	str	r3, [r7, #28]
 8002240:	e04c      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002242:	4b8a      	ldr	r3, [pc, #552]	; (800246c <HAL_RCC_GetSysClockFreq+0x358>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	099b      	lsrs	r3, r3, #6
 8002248:	461a      	mov	r2, r3
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002252:	f04f 0100 	mov.w	r1, #0
 8002256:	ea02 0a00 	and.w	sl, r2, r0
 800225a:	ea03 0b01 	and.w	fp, r3, r1
 800225e:	4650      	mov	r0, sl
 8002260:	4659      	mov	r1, fp
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	014b      	lsls	r3, r1, #5
 800226c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002270:	0142      	lsls	r2, r0, #5
 8002272:	4610      	mov	r0, r2
 8002274:	4619      	mov	r1, r3
 8002276:	ebb0 000a 	subs.w	r0, r0, sl
 800227a:	eb61 010b 	sbc.w	r1, r1, fp
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	018b      	lsls	r3, r1, #6
 8002288:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800228c:	0182      	lsls	r2, r0, #6
 800228e:	1a12      	subs	r2, r2, r0
 8002290:	eb63 0301 	sbc.w	r3, r3, r1
 8002294:	f04f 0000 	mov.w	r0, #0
 8002298:	f04f 0100 	mov.w	r1, #0
 800229c:	00d9      	lsls	r1, r3, #3
 800229e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022a2:	00d0      	lsls	r0, r2, #3
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	eb12 020a 	adds.w	r2, r2, sl
 80022ac:	eb43 030b 	adc.w	r3, r3, fp
 80022b0:	f04f 0000 	mov.w	r0, #0
 80022b4:	f04f 0100 	mov.w	r1, #0
 80022b8:	0299      	lsls	r1, r3, #10
 80022ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80022be:	0290      	lsls	r0, r2, #10
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	461a      	mov	r2, r3
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	f7fd fff6 	bl	80002c0 <__aeabi_uldivmod>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	4613      	mov	r3, r2
 80022da:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022dc:	4b63      	ldr	r3, [pc, #396]	; (800246c <HAL_RCC_GetSysClockFreq+0x358>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	0c1b      	lsrs	r3, r3, #16
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	3301      	adds	r3, #1
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80022ec:	69fa      	ldr	r2, [r7, #28]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f4:	61bb      	str	r3, [r7, #24]
      break;
 80022f6:	e0b2      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022f8:	4b5c      	ldr	r3, [pc, #368]	; (800246c <HAL_RCC_GetSysClockFreq+0x358>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002300:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002302:	4b5a      	ldr	r3, [pc, #360]	; (800246c <HAL_RCC_GetSysClockFreq+0x358>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d04d      	beq.n	80023aa <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800230e:	4b57      	ldr	r3, [pc, #348]	; (800246c <HAL_RCC_GetSysClockFreq+0x358>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	099b      	lsrs	r3, r3, #6
 8002314:	461a      	mov	r2, r3
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800231e:	f04f 0100 	mov.w	r1, #0
 8002322:	ea02 0800 	and.w	r8, r2, r0
 8002326:	ea03 0901 	and.w	r9, r3, r1
 800232a:	4640      	mov	r0, r8
 800232c:	4649      	mov	r1, r9
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	014b      	lsls	r3, r1, #5
 8002338:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800233c:	0142      	lsls	r2, r0, #5
 800233e:	4610      	mov	r0, r2
 8002340:	4619      	mov	r1, r3
 8002342:	ebb0 0008 	subs.w	r0, r0, r8
 8002346:	eb61 0109 	sbc.w	r1, r1, r9
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	018b      	lsls	r3, r1, #6
 8002354:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002358:	0182      	lsls	r2, r0, #6
 800235a:	1a12      	subs	r2, r2, r0
 800235c:	eb63 0301 	sbc.w	r3, r3, r1
 8002360:	f04f 0000 	mov.w	r0, #0
 8002364:	f04f 0100 	mov.w	r1, #0
 8002368:	00d9      	lsls	r1, r3, #3
 800236a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800236e:	00d0      	lsls	r0, r2, #3
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	eb12 0208 	adds.w	r2, r2, r8
 8002378:	eb43 0309 	adc.w	r3, r3, r9
 800237c:	f04f 0000 	mov.w	r0, #0
 8002380:	f04f 0100 	mov.w	r1, #0
 8002384:	0259      	lsls	r1, r3, #9
 8002386:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800238a:	0250      	lsls	r0, r2, #9
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4610      	mov	r0, r2
 8002392:	4619      	mov	r1, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	461a      	mov	r2, r3
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	f7fd ff90 	bl	80002c0 <__aeabi_uldivmod>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4613      	mov	r3, r2
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	e04a      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023aa:	4b30      	ldr	r3, [pc, #192]	; (800246c <HAL_RCC_GetSysClockFreq+0x358>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	099b      	lsrs	r3, r3, #6
 80023b0:	461a      	mov	r2, r3
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023ba:	f04f 0100 	mov.w	r1, #0
 80023be:	ea02 0400 	and.w	r4, r2, r0
 80023c2:	ea03 0501 	and.w	r5, r3, r1
 80023c6:	4620      	mov	r0, r4
 80023c8:	4629      	mov	r1, r5
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	014b      	lsls	r3, r1, #5
 80023d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023d8:	0142      	lsls	r2, r0, #5
 80023da:	4610      	mov	r0, r2
 80023dc:	4619      	mov	r1, r3
 80023de:	1b00      	subs	r0, r0, r4
 80023e0:	eb61 0105 	sbc.w	r1, r1, r5
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	018b      	lsls	r3, r1, #6
 80023ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023f2:	0182      	lsls	r2, r0, #6
 80023f4:	1a12      	subs	r2, r2, r0
 80023f6:	eb63 0301 	sbc.w	r3, r3, r1
 80023fa:	f04f 0000 	mov.w	r0, #0
 80023fe:	f04f 0100 	mov.w	r1, #0
 8002402:	00d9      	lsls	r1, r3, #3
 8002404:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002408:	00d0      	lsls	r0, r2, #3
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	1912      	adds	r2, r2, r4
 8002410:	eb45 0303 	adc.w	r3, r5, r3
 8002414:	f04f 0000 	mov.w	r0, #0
 8002418:	f04f 0100 	mov.w	r1, #0
 800241c:	0299      	lsls	r1, r3, #10
 800241e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002422:	0290      	lsls	r0, r2, #10
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4610      	mov	r0, r2
 800242a:	4619      	mov	r1, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	461a      	mov	r2, r3
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	f7fd ff44 	bl	80002c0 <__aeabi_uldivmod>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4613      	mov	r3, r2
 800243e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <HAL_RCC_GetSysClockFreq+0x358>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	0f1b      	lsrs	r3, r3, #28
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	fbb2 f3f3 	udiv	r3, r2, r3
 8002454:	61bb      	str	r3, [r7, #24]
      break;
 8002456:	e002      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_RCC_GetSysClockFreq+0x35c>)
 800245a:	61bb      	str	r3, [r7, #24]
      break;
 800245c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800245e:	69bb      	ldr	r3, [r7, #24]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3720      	adds	r7, #32
 8002464:	46bd      	mov	sp, r7
 8002466:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800
 8002470:	00f42400 	.word	0x00f42400
 8002474:	007a1200 	.word	0x007a1200

08002478 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e28d      	b.n	80029a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 8083 	beq.w	800259e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002498:	4b94      	ldr	r3, [pc, #592]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d019      	beq.n	80024d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024a4:	4b91      	ldr	r3, [pc, #580]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d106      	bne.n	80024be <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024b0:	4b8e      	ldr	r3, [pc, #568]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024bc:	d00c      	beq.n	80024d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024be:	4b8b      	ldr	r3, [pc, #556]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024c6:	2b0c      	cmp	r3, #12
 80024c8:	d112      	bne.n	80024f0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ca:	4b88      	ldr	r3, [pc, #544]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d6:	d10b      	bne.n	80024f0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	4b84      	ldr	r3, [pc, #528]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d05b      	beq.n	800259c <HAL_RCC_OscConfig+0x124>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d157      	bne.n	800259c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e25a      	b.n	80029a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f8:	d106      	bne.n	8002508 <HAL_RCC_OscConfig+0x90>
 80024fa:	4b7c      	ldr	r3, [pc, #496]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a7b      	ldr	r2, [pc, #492]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e01d      	b.n	8002544 <HAL_RCC_OscConfig+0xcc>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0xb4>
 8002512:	4b76      	ldr	r3, [pc, #472]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a75      	ldr	r2, [pc, #468]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b73      	ldr	r3, [pc, #460]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a72      	ldr	r2, [pc, #456]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0xcc>
 800252c:	4b6f      	ldr	r3, [pc, #444]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a6e      	ldr	r2, [pc, #440]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 8002532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b6c      	ldr	r3, [pc, #432]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a6b      	ldr	r2, [pc, #428]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 800253e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254c:	f7fe fd4a 	bl	8000fe4 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002554:	f7fe fd46 	bl	8000fe4 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	; 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e21f      	b.n	80029a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	4b61      	ldr	r3, [pc, #388]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0xdc>
 8002572:	e014      	b.n	800259e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7fe fd36 	bl	8000fe4 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800257c:	f7fe fd32 	bl	8000fe4 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	; 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e20b      	b.n	80029a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	4b57      	ldr	r3, [pc, #348]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x104>
 800259a:	e000      	b.n	800259e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d06f      	beq.n	800268a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025aa:	4b50      	ldr	r3, [pc, #320]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d017      	beq.n	80025e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025b6:	4b4d      	ldr	r3, [pc, #308]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d105      	bne.n	80025ce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025c2:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00b      	beq.n	80025e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ce:	4b47      	ldr	r3, [pc, #284]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025d6:	2b0c      	cmp	r3, #12
 80025d8:	d11c      	bne.n	8002614 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025da:	4b44      	ldr	r3, [pc, #272]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d116      	bne.n	8002614 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e6:	4b41      	ldr	r3, [pc, #260]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <HAL_RCC_OscConfig+0x186>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d001      	beq.n	80025fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e1d3      	b.n	80029a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fe:	4b3b      	ldr	r3, [pc, #236]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4937      	ldr	r1, [pc, #220]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002612:	e03a      	b.n	800268a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d020      	beq.n	800265e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800261c:	4b34      	ldr	r3, [pc, #208]	; (80026f0 <HAL_RCC_OscConfig+0x278>)
 800261e:	2201      	movs	r2, #1
 8002620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002622:	f7fe fcdf 	bl	8000fe4 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800262a:	f7fe fcdb 	bl	8000fe4 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e1b4      	b.n	80029a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263c:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002648:	4b28      	ldr	r3, [pc, #160]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4925      	ldr	r1, [pc, #148]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 8002658:	4313      	orrs	r3, r2
 800265a:	600b      	str	r3, [r1, #0]
 800265c:	e015      	b.n	800268a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265e:	4b24      	ldr	r3, [pc, #144]	; (80026f0 <HAL_RCC_OscConfig+0x278>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002664:	f7fe fcbe 	bl	8000fe4 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800266c:	f7fe fcba 	bl	8000fe4 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e193      	b.n	80029a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267e:	4b1b      	ldr	r3, [pc, #108]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d036      	beq.n	8002704 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d016      	beq.n	80026cc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269e:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <HAL_RCC_OscConfig+0x27c>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a4:	f7fe fc9e 	bl	8000fe4 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ac:	f7fe fc9a 	bl	8000fe4 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e173      	b.n	80029a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_OscConfig+0x274>)
 80026c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x234>
 80026ca:	e01b      	b.n	8002704 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <HAL_RCC_OscConfig+0x27c>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d2:	f7fe fc87 	bl	8000fe4 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d8:	e00e      	b.n	80026f8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026da:	f7fe fc83 	bl	8000fe4 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d907      	bls.n	80026f8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e15c      	b.n	80029a6 <HAL_RCC_OscConfig+0x52e>
 80026ec:	40023800 	.word	0x40023800
 80026f0:	42470000 	.word	0x42470000
 80026f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f8:	4b8a      	ldr	r3, [pc, #552]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 80026fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1ea      	bne.n	80026da <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	f000 8097 	beq.w	8002840 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002712:	2300      	movs	r3, #0
 8002714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002716:	4b83      	ldr	r3, [pc, #524]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10f      	bne.n	8002742 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	4b7f      	ldr	r3, [pc, #508]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	4a7e      	ldr	r2, [pc, #504]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 800272c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
 8002732:	4b7c      	ldr	r3, [pc, #496]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273e:	2301      	movs	r3, #1
 8002740:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002742:	4b79      	ldr	r3, [pc, #484]	; (8002928 <HAL_RCC_OscConfig+0x4b0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274a:	2b00      	cmp	r3, #0
 800274c:	d118      	bne.n	8002780 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800274e:	4b76      	ldr	r3, [pc, #472]	; (8002928 <HAL_RCC_OscConfig+0x4b0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a75      	ldr	r2, [pc, #468]	; (8002928 <HAL_RCC_OscConfig+0x4b0>)
 8002754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800275a:	f7fe fc43 	bl	8000fe4 <HAL_GetTick>
 800275e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002762:	f7fe fc3f 	bl	8000fe4 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e118      	b.n	80029a6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002774:	4b6c      	ldr	r3, [pc, #432]	; (8002928 <HAL_RCC_OscConfig+0x4b0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0f0      	beq.n	8002762 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d106      	bne.n	8002796 <HAL_RCC_OscConfig+0x31e>
 8002788:	4b66      	ldr	r3, [pc, #408]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	4a65      	ldr	r2, [pc, #404]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6713      	str	r3, [r2, #112]	; 0x70
 8002794:	e01c      	b.n	80027d0 <HAL_RCC_OscConfig+0x358>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b05      	cmp	r3, #5
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x340>
 800279e:	4b61      	ldr	r3, [pc, #388]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	4a60      	ldr	r2, [pc, #384]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 80027a4:	f043 0304 	orr.w	r3, r3, #4
 80027a8:	6713      	str	r3, [r2, #112]	; 0x70
 80027aa:	4b5e      	ldr	r3, [pc, #376]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	4a5d      	ldr	r2, [pc, #372]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6713      	str	r3, [r2, #112]	; 0x70
 80027b6:	e00b      	b.n	80027d0 <HAL_RCC_OscConfig+0x358>
 80027b8:	4b5a      	ldr	r3, [pc, #360]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	4a59      	ldr	r2, [pc, #356]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	6713      	str	r3, [r2, #112]	; 0x70
 80027c4:	4b57      	ldr	r3, [pc, #348]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	4a56      	ldr	r2, [pc, #344]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 80027ca:	f023 0304 	bic.w	r3, r3, #4
 80027ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d015      	beq.n	8002804 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d8:	f7fe fc04 	bl	8000fe4 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e0:	f7fe fc00 	bl	8000fe4 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e0d7      	b.n	80029a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f6:	4b4b      	ldr	r3, [pc, #300]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0ee      	beq.n	80027e0 <HAL_RCC_OscConfig+0x368>
 8002802:	e014      	b.n	800282e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7fe fbee 	bl	8000fe4 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280a:	e00a      	b.n	8002822 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280c:	f7fe fbea 	bl	8000fe4 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	; 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e0c1      	b.n	80029a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002822:	4b40      	ldr	r3, [pc, #256]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1ee      	bne.n	800280c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800282e:	7dfb      	ldrb	r3, [r7, #23]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d105      	bne.n	8002840 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002834:	4b3b      	ldr	r3, [pc, #236]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	4a3a      	ldr	r2, [pc, #232]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 800283a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80ad 	beq.w	80029a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800284a:	4b36      	ldr	r3, [pc, #216]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b08      	cmp	r3, #8
 8002854:	d060      	beq.n	8002918 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d145      	bne.n	80028ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	4b33      	ldr	r3, [pc, #204]	; (800292c <HAL_RCC_OscConfig+0x4b4>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe fbbe 	bl	8000fe4 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe fbba 	bl	8000fe4 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e093      	b.n	80029a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	4b29      	ldr	r3, [pc, #164]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69da      	ldr	r2, [r3, #28]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	019b      	lsls	r3, r3, #6
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a0:	085b      	lsrs	r3, r3, #1
 80028a2:	3b01      	subs	r3, #1
 80028a4:	041b      	lsls	r3, r3, #16
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	061b      	lsls	r3, r3, #24
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	071b      	lsls	r3, r3, #28
 80028b6:	491b      	ldr	r1, [pc, #108]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028bc:	4b1b      	ldr	r3, [pc, #108]	; (800292c <HAL_RCC_OscConfig+0x4b4>)
 80028be:	2201      	movs	r2, #1
 80028c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c2:	f7fe fb8f 	bl	8000fe4 <HAL_GetTick>
 80028c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c8:	e008      	b.n	80028dc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ca:	f7fe fb8b 	bl	8000fe4 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e064      	b.n	80029a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0f0      	beq.n	80028ca <HAL_RCC_OscConfig+0x452>
 80028e8:	e05c      	b.n	80029a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_RCC_OscConfig+0x4b4>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe fb78 	bl	8000fe4 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f8:	f7fe fb74 	bl	8000fe4 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e04d      	b.n	80029a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290a:	4b06      	ldr	r3, [pc, #24]	; (8002924 <HAL_RCC_OscConfig+0x4ac>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f0      	bne.n	80028f8 <HAL_RCC_OscConfig+0x480>
 8002916:	e045      	b.n	80029a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d107      	bne.n	8002930 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e040      	b.n	80029a6 <HAL_RCC_OscConfig+0x52e>
 8002924:	40023800 	.word	0x40023800
 8002928:	40007000 	.word	0x40007000
 800292c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002930:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <HAL_RCC_OscConfig+0x538>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d030      	beq.n	80029a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002948:	429a      	cmp	r2, r3
 800294a:	d129      	bne.n	80029a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002956:	429a      	cmp	r2, r3
 8002958:	d122      	bne.n	80029a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002960:	4013      	ands	r3, r2
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002966:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002968:	4293      	cmp	r3, r2
 800296a:	d119      	bne.n	80029a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002976:	085b      	lsrs	r3, r3, #1
 8002978:	3b01      	subs	r3, #1
 800297a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d10f      	bne.n	80029a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d107      	bne.n	80029a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e000      	b.n	80029a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40023800 	.word	0x40023800

080029b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e083      	b.n	8002ace <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7f5b      	ldrb	r3, [r3, #29]
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d105      	bne.n	80029dc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7fe f8ee 	bl	8000bb8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2202      	movs	r2, #2
 80029e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	22ca      	movs	r2, #202	; 0xca
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2253      	movs	r2, #83	; 0x53
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 fb7a 	bl	80030ec <RTC_EnterInitMode>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	22ff      	movs	r2, #255	; 0xff
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2204      	movs	r2, #4
 8002a0a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e05e      	b.n	8002ace <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002a1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a22:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6899      	ldr	r1, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68d2      	ldr	r2, [r2, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6919      	ldr	r1, [r3, #16]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	041a      	lsls	r2, r3, #16
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a6e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10e      	bne.n	8002a9c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 fb0c 	bl	800309c <HAL_RTC_WaitForSynchro>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d008      	beq.n	8002a9c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	22ff      	movs	r2, #255	; 0xff
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2204      	movs	r2, #4
 8002a96:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e018      	b.n	8002ace <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699a      	ldr	r2, [r3, #24]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	22ff      	movs	r2, #255	; 0xff
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002acc:	2300      	movs	r3, #0
  }
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ad6:	b590      	push	{r4, r7, lr}
 8002ad8:	b087      	sub	sp, #28
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	7f1b      	ldrb	r3, [r3, #28]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_RTC_SetTime+0x1c>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e0aa      	b.n	8002c48 <HAL_RTC_SetTime+0x172>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2202      	movs	r2, #2
 8002afc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d126      	bne.n	8002b52 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d102      	bne.n	8002b18 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2200      	movs	r2, #0
 8002b16:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f000 fb11 	bl	8003144 <RTC_ByteToBcd2>
 8002b22:	4603      	mov	r3, r0
 8002b24:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	785b      	ldrb	r3, [r3, #1]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 fb0a 	bl	8003144 <RTC_ByteToBcd2>
 8002b30:	4603      	mov	r3, r0
 8002b32:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b34:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	789b      	ldrb	r3, [r3, #2]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fb02 	bl	8003144 <RTC_ByteToBcd2>
 8002b40:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002b42:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	78db      	ldrb	r3, [r3, #3]
 8002b4a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	e018      	b.n	8002b84 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d102      	bne.n	8002b66 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2200      	movs	r2, #0
 8002b64:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	785b      	ldrb	r3, [r3, #1]
 8002b70:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b72:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002b74:	68ba      	ldr	r2, [r7, #8]
 8002b76:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002b78:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	78db      	ldrb	r3, [r3, #3]
 8002b7e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	22ca      	movs	r2, #202	; 0xca
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2253      	movs	r2, #83	; 0x53
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 faa9 	bl	80030ec <RTC_EnterInitMode>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00b      	beq.n	8002bb8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	22ff      	movs	r2, #255	; 0xff
 8002ba6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2204      	movs	r2, #4
 8002bac:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e047      	b.n	8002c48 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002bc2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002bc6:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bd6:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6899      	ldr	r1, [r3, #8]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bfe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0320 	and.w	r3, r3, #32
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d111      	bne.n	8002c32 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fa44 	bl	800309c <HAL_RTC_WaitForSynchro>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00b      	beq.n	8002c32 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	22ff      	movs	r2, #255	; 0xff
 8002c20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2204      	movs	r2, #4
 8002c26:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e00a      	b.n	8002c48 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	22ff      	movs	r2, #255	; 0xff
 8002c38:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002c46:	2300      	movs	r3, #0
  }
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	371c      	adds	r7, #28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd90      	pop	{r4, r7, pc}

08002c50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b087      	sub	sp, #28
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	7f1b      	ldrb	r3, [r3, #28]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_RTC_SetDate+0x1c>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e094      	b.n	8002d96 <HAL_RTC_SetDate+0x146>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2202      	movs	r2, #2
 8002c76:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10e      	bne.n	8002c9c <HAL_RTC_SetDate+0x4c>
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	785b      	ldrb	r3, [r3, #1]
 8002c82:	f003 0310 	and.w	r3, r3, #16
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d008      	beq.n	8002c9c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	785b      	ldrb	r3, [r3, #1]
 8002c8e:	f023 0310 	bic.w	r3, r3, #16
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	330a      	adds	r3, #10
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d11c      	bne.n	8002cdc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	78db      	ldrb	r3, [r3, #3]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 fa4c 	bl	8003144 <RTC_ByteToBcd2>
 8002cac:	4603      	mov	r3, r0
 8002cae:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	785b      	ldrb	r3, [r3, #1]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 fa45 	bl	8003144 <RTC_ByteToBcd2>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002cbe:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	789b      	ldrb	r3, [r3, #2]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 fa3d 	bl	8003144 <RTC_ByteToBcd2>
 8002cca:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002ccc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	e00e      	b.n	8002cfa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	78db      	ldrb	r3, [r3, #3]
 8002ce0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	785b      	ldrb	r3, [r3, #1]
 8002ce6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002ce8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002cee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	22ca      	movs	r2, #202	; 0xca
 8002d00:	625a      	str	r2, [r3, #36]	; 0x24
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2253      	movs	r2, #83	; 0x53
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 f9ee 	bl	80030ec <RTC_EnterInitMode>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00b      	beq.n	8002d2e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	22ff      	movs	r2, #255	; 0xff
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2204      	movs	r2, #4
 8002d22:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e033      	b.n	8002d96 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002d38:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002d3c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68da      	ldr	r2, [r3, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d4c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0320 	and.w	r3, r3, #32
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d111      	bne.n	8002d80 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f99d 	bl	800309c <HAL_RTC_WaitForSynchro>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00b      	beq.n	8002d80 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	22ff      	movs	r2, #255	; 0xff
 8002d6e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2204      	movs	r2, #4
 8002d74:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e00a      	b.n	8002d96 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	22ff      	movs	r2, #255	; 0xff
 8002d86:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002d94:	2300      	movs	r3, #0
  }
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd90      	pop	{r4, r7, pc}
	...

08002da0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002da0:	b590      	push	{r4, r7, lr}
 8002da2:	b089      	sub	sp, #36	; 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	2300      	movs	r3, #0
 8002db2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8002db4:	4b93      	ldr	r3, [pc, #588]	; (8003004 <HAL_RTC_SetAlarm_IT+0x264>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a93      	ldr	r2, [pc, #588]	; (8003008 <HAL_RTC_SetAlarm_IT+0x268>)
 8002dba:	fba2 2303 	umull	r2, r3, r2, r3
 8002dbe:	0adb      	lsrs	r3, r3, #11
 8002dc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dc4:	fb02 f303 	mul.w	r3, r2, r3
 8002dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	7f1b      	ldrb	r3, [r3, #28]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RTC_SetAlarm_IT+0x36>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e111      	b.n	8002ffa <HAL_RTC_SetAlarm_IT+0x25a>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2202      	movs	r2, #2
 8002de0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d137      	bne.n	8002e58 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d102      	bne.n	8002dfc <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 f99f 	bl	8003144 <RTC_ByteToBcd2>
 8002e06:	4603      	mov	r3, r0
 8002e08:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	785b      	ldrb	r3, [r3, #1]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 f998 	bl	8003144 <RTC_ByteToBcd2>
 8002e14:	4603      	mov	r3, r0
 8002e16:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002e18:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	789b      	ldrb	r3, [r3, #2]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 f990 	bl	8003144 <RTC_ByteToBcd2>
 8002e24:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002e26:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	78db      	ldrb	r3, [r3, #3]
 8002e2e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002e30:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f982 	bl	8003144 <RTC_ByteToBcd2>
 8002e40:	4603      	mov	r3, r0
 8002e42:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002e44:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002e4c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61fb      	str	r3, [r7, #28]
 8002e56:	e023      	b.n	8002ea0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d102      	bne.n	8002e6c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	785b      	ldrb	r3, [r3, #1]
 8002e76:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002e78:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002e7e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	78db      	ldrb	r3, [r3, #3]
 8002e84:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002e86:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e8e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002e90:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002e96:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	22ca      	movs	r2, #202	; 0xca
 8002eb2:	625a      	str	r2, [r3, #36]	; 0x24
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2253      	movs	r2, #83	; 0x53
 8002eba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec4:	d141      	bne.n	8002f4a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002ee6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	1e5a      	subs	r2, r3, #1
 8002eec:	617a      	str	r2, [r7, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10b      	bne.n	8002f0a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	22ff      	movs	r2, #255	; 0xff
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2203      	movs	r2, #3
 8002efe:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e077      	b.n	8002ffa <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d0e7      	beq.n	8002ee8 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f36:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f46:	609a      	str	r2, [r3, #8]
 8002f48:	e040      	b.n	8002fcc <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f58:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002f6a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	1e5a      	subs	r2, r3, #1
 8002f70:	617a      	str	r2, [r7, #20]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10b      	bne.n	8002f8e <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	22ff      	movs	r2, #255	; 0xff
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2203      	movs	r2, #3
 8002f82:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e035      	b.n	8002ffa <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0e7      	beq.n	8002f6c <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	69fa      	ldr	r2, [r7, #28]
 8002fa2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fba:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fca:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002fcc:	4b0f      	ldr	r3, [pc, #60]	; (800300c <HAL_RTC_SetAlarm_IT+0x26c>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a0e      	ldr	r2, [pc, #56]	; (800300c <HAL_RTC_SetAlarm_IT+0x26c>)
 8002fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd6:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <HAL_RTC_SetAlarm_IT+0x26c>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4a0b      	ldr	r2, [pc, #44]	; (800300c <HAL_RTC_SetAlarm_IT+0x26c>)
 8002fde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe2:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	22ff      	movs	r2, #255	; 0xff
 8002fea:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3724      	adds	r7, #36	; 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd90      	pop	{r4, r7, pc}
 8003002:	bf00      	nop
 8003004:	20000000 	.word	0x20000000
 8003008:	10624dd3 	.word	0x10624dd3
 800300c:	40013c00 	.word	0x40013c00

08003010 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d012      	beq.n	800304c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00b      	beq.n	800304c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7fd fcef 	bl	8000a18 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	b2da      	uxtb	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800304a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d012      	beq.n	8003080 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00b      	beq.n	8003080 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f949 	bl	8003300 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	b2da      	uxtb	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800307e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003080:	4b05      	ldr	r3, [pc, #20]	; (8003098 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003082:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003086:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	775a      	strb	r2, [r3, #29]
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40013c00 	.word	0x40013c00

0800309c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030b6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030b8:	f7fd ff94 	bl	8000fe4 <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80030be:	e009      	b.n	80030d4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80030c0:	f7fd ff90 	bl	8000fe4 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030ce:	d901      	bls.n	80030d4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e007      	b.n	80030e4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0ee      	beq.n	80030c0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d119      	bne.n	800313a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f04f 32ff 	mov.w	r2, #4294967295
 800310e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003110:	f7fd ff68 	bl	8000fe4 <HAL_GetTick>
 8003114:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003116:	e009      	b.n	800312c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003118:	f7fd ff64 	bl	8000fe4 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003126:	d901      	bls.n	800312c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e007      	b.n	800313c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0ee      	beq.n	8003118 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003152:	e005      	b.n	8003160 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	3301      	adds	r3, #1
 8003158:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	3b0a      	subs	r3, #10
 800315e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	2b09      	cmp	r3, #9
 8003164:	d8f6      	bhi.n	8003154 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	b2da      	uxtb	r2, r3
 800316e:	79fb      	ldrb	r3, [r7, #7]
 8003170:	4313      	orrs	r3, r2
 8003172:	b2db      	uxtb	r3, r3
}
 8003174:	4618      	mov	r0, r3
 8003176:	3714      	adds	r7, #20
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	7f1b      	ldrb	r3, [r3, #28]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d101      	bne.n	8003198 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8003194:	2302      	movs	r3, #2
 8003196:	e0a6      	b.n	80032e6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2202      	movs	r2, #2
 80031a2:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	22ca      	movs	r2, #202	; 0xca
 80031aa:	625a      	str	r2, [r3, #36]	; 0x24
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2253      	movs	r2, #83	; 0x53
 80031b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d022      	beq.n	8003208 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 80031c2:	4b4c      	ldr	r3, [pc, #304]	; (80032f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a4c      	ldr	r2, [pc, #304]	; (80032f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80031c8:	fba2 2303 	umull	r2, r3, r2, r3
 80031cc:	0adb      	lsrs	r3, r3, #11
 80031ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	1e5a      	subs	r2, r3, #1
 80031dc:	617a      	str	r2, [r7, #20]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10b      	bne.n	80031fa <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	22ff      	movs	r2, #255	; 0xff
 80031e8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2203      	movs	r2, #3
 80031ee:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e075      	b.n	80032e6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e7      	bne.n	80031d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689a      	ldr	r2, [r3, #8]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003216:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8003218:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a36      	ldr	r2, [pc, #216]	; (80032f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800321e:	fba2 2303 	umull	r2, r3, r2, r3
 8003222:	0adb      	lsrs	r3, r3, #11
 8003224:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003228:	fb02 f303 	mul.w	r3, r2, r3
 800322c:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	1e5a      	subs	r2, r3, #1
 8003232:	617a      	str	r2, [r7, #20]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10b      	bne.n	8003250 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	22ff      	movs	r2, #255	; 0xff
 800323e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2203      	movs	r2, #3
 8003244:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e04a      	b.n	80032e6 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0e7      	beq.n	800322e <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0207 	bic.w	r2, r2, #7
 8003274:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6899      	ldr	r1, [r3, #8]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	430a      	orrs	r2, r1
 8003284:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003286:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1c      	ldr	r2, [pc, #112]	; (80032fc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800328c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003290:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8003292:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	4a19      	ldr	r2, [pc, #100]	; (80032fc <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003298:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800329c:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80032ae:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032be:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032ce:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	22ff      	movs	r2, #255	; 0xff
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	20000000 	.word	0x20000000
 80032f8:	10624dd3 	.word	0x10624dd3
 80032fc:	40013c00 	.word	0x40013c00

08003300 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e041      	b.n	80033aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f839 	bl	80033b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3304      	adds	r3, #4
 8003350:	4619      	mov	r1, r3
 8003352:	4610      	mov	r0, r2
 8003354:	f000 f9d8 	bl	8003708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b083      	sub	sp, #12
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
	...

080033c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d001      	beq.n	80033e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e04e      	b.n	800347e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a23      	ldr	r2, [pc, #140]	; (800348c <HAL_TIM_Base_Start_IT+0xc4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d022      	beq.n	8003448 <HAL_TIM_Base_Start_IT+0x80>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800340a:	d01d      	beq.n	8003448 <HAL_TIM_Base_Start_IT+0x80>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1f      	ldr	r2, [pc, #124]	; (8003490 <HAL_TIM_Base_Start_IT+0xc8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d018      	beq.n	8003448 <HAL_TIM_Base_Start_IT+0x80>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1e      	ldr	r2, [pc, #120]	; (8003494 <HAL_TIM_Base_Start_IT+0xcc>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d013      	beq.n	8003448 <HAL_TIM_Base_Start_IT+0x80>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1c      	ldr	r2, [pc, #112]	; (8003498 <HAL_TIM_Base_Start_IT+0xd0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00e      	beq.n	8003448 <HAL_TIM_Base_Start_IT+0x80>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1b      	ldr	r2, [pc, #108]	; (800349c <HAL_TIM_Base_Start_IT+0xd4>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d009      	beq.n	8003448 <HAL_TIM_Base_Start_IT+0x80>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a19      	ldr	r2, [pc, #100]	; (80034a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d004      	beq.n	8003448 <HAL_TIM_Base_Start_IT+0x80>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a18      	ldr	r2, [pc, #96]	; (80034a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d111      	bne.n	800346c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2b06      	cmp	r3, #6
 8003458:	d010      	beq.n	800347c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0201 	orr.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346a:	e007      	b.n	800347c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40010000 	.word	0x40010000
 8003490:	40000400 	.word	0x40000400
 8003494:	40000800 	.word	0x40000800
 8003498:	40000c00 	.word	0x40000c00
 800349c:	40010400 	.word	0x40010400
 80034a0:	40014000 	.word	0x40014000
 80034a4:	40001800 	.word	0x40001800

080034a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d122      	bne.n	8003504 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d11b      	bne.n	8003504 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f06f 0202 	mvn.w	r2, #2
 80034d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f003 0303 	and.w	r3, r3, #3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f8ee 	bl	80036cc <HAL_TIM_IC_CaptureCallback>
 80034f0:	e005      	b.n	80034fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f8e0 	bl	80036b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f8f1 	bl	80036e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b04      	cmp	r3, #4
 8003510:	d122      	bne.n	8003558 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b04      	cmp	r3, #4
 800351e:	d11b      	bne.n	8003558 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0204 	mvn.w	r2, #4
 8003528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2202      	movs	r2, #2
 800352e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f8c4 	bl	80036cc <HAL_TIM_IC_CaptureCallback>
 8003544:	e005      	b.n	8003552 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f8b6 	bl	80036b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f8c7 	bl	80036e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b08      	cmp	r3, #8
 8003564:	d122      	bne.n	80035ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b08      	cmp	r3, #8
 8003572:	d11b      	bne.n	80035ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0208 	mvn.w	r2, #8
 800357c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2204      	movs	r2, #4
 8003582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	f003 0303 	and.w	r3, r3, #3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d003      	beq.n	800359a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f89a 	bl	80036cc <HAL_TIM_IC_CaptureCallback>
 8003598:	e005      	b.n	80035a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f88c 	bl	80036b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f89d 	bl	80036e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f003 0310 	and.w	r3, r3, #16
 80035b6:	2b10      	cmp	r3, #16
 80035b8:	d122      	bne.n	8003600 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	2b10      	cmp	r3, #16
 80035c6:	d11b      	bne.n	8003600 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0210 	mvn.w	r2, #16
 80035d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2208      	movs	r2, #8
 80035d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f870 	bl	80036cc <HAL_TIM_IC_CaptureCallback>
 80035ec:	e005      	b.n	80035fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f862 	bl	80036b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f873 	bl	80036e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b01      	cmp	r3, #1
 800360c:	d10e      	bne.n	800362c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b01      	cmp	r3, #1
 800361a:	d107      	bne.n	800362c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f06f 0201 	mvn.w	r2, #1
 8003624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7fd fa82 	bl	8000b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003636:	2b80      	cmp	r3, #128	; 0x80
 8003638:	d10e      	bne.n	8003658 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003644:	2b80      	cmp	r3, #128	; 0x80
 8003646:	d107      	bne.n	8003658 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f902 	bl	800385c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003662:	2b40      	cmp	r3, #64	; 0x40
 8003664:	d10e      	bne.n	8003684 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003670:	2b40      	cmp	r3, #64	; 0x40
 8003672:	d107      	bne.n	8003684 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800367c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f838 	bl	80036f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b20      	cmp	r3, #32
 8003690:	d10e      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b20      	cmp	r3, #32
 800369e:	d107      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0220 	mvn.w	r2, #32
 80036a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f8cc 	bl	8003848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a40      	ldr	r2, [pc, #256]	; (800381c <TIM_Base_SetConfig+0x114>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d013      	beq.n	8003748 <TIM_Base_SetConfig+0x40>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003726:	d00f      	beq.n	8003748 <TIM_Base_SetConfig+0x40>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a3d      	ldr	r2, [pc, #244]	; (8003820 <TIM_Base_SetConfig+0x118>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00b      	beq.n	8003748 <TIM_Base_SetConfig+0x40>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a3c      	ldr	r2, [pc, #240]	; (8003824 <TIM_Base_SetConfig+0x11c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d007      	beq.n	8003748 <TIM_Base_SetConfig+0x40>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a3b      	ldr	r2, [pc, #236]	; (8003828 <TIM_Base_SetConfig+0x120>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d003      	beq.n	8003748 <TIM_Base_SetConfig+0x40>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a3a      	ldr	r2, [pc, #232]	; (800382c <TIM_Base_SetConfig+0x124>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d108      	bne.n	800375a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a2f      	ldr	r2, [pc, #188]	; (800381c <TIM_Base_SetConfig+0x114>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d02b      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003768:	d027      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a2c      	ldr	r2, [pc, #176]	; (8003820 <TIM_Base_SetConfig+0x118>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d023      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a2b      	ldr	r2, [pc, #172]	; (8003824 <TIM_Base_SetConfig+0x11c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d01f      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a2a      	ldr	r2, [pc, #168]	; (8003828 <TIM_Base_SetConfig+0x120>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d01b      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a29      	ldr	r2, [pc, #164]	; (800382c <TIM_Base_SetConfig+0x124>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d017      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a28      	ldr	r2, [pc, #160]	; (8003830 <TIM_Base_SetConfig+0x128>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d013      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a27      	ldr	r2, [pc, #156]	; (8003834 <TIM_Base_SetConfig+0x12c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d00f      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a26      	ldr	r2, [pc, #152]	; (8003838 <TIM_Base_SetConfig+0x130>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00b      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a25      	ldr	r2, [pc, #148]	; (800383c <TIM_Base_SetConfig+0x134>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d007      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a24      	ldr	r2, [pc, #144]	; (8003840 <TIM_Base_SetConfig+0x138>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d003      	beq.n	80037ba <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a23      	ldr	r2, [pc, #140]	; (8003844 <TIM_Base_SetConfig+0x13c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d108      	bne.n	80037cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a0a      	ldr	r2, [pc, #40]	; (800381c <TIM_Base_SetConfig+0x114>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d003      	beq.n	8003800 <TIM_Base_SetConfig+0xf8>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a0c      	ldr	r2, [pc, #48]	; (800382c <TIM_Base_SetConfig+0x124>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d103      	bne.n	8003808 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	615a      	str	r2, [r3, #20]
}
 800380e:	bf00      	nop
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40010000 	.word	0x40010000
 8003820:	40000400 	.word	0x40000400
 8003824:	40000800 	.word	0x40000800
 8003828:	40000c00 	.word	0x40000c00
 800382c:	40010400 	.word	0x40010400
 8003830:	40014000 	.word	0x40014000
 8003834:	40014400 	.word	0x40014400
 8003838:	40014800 	.word	0x40014800
 800383c:	40001800 	.word	0x40001800
 8003840:	40001c00 	.word	0x40001c00
 8003844:	40002000 	.word	0x40002000

08003848 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e03f      	b.n	8003902 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fd f9c0 	bl	8000c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2224      	movs	r2, #36	; 0x24
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f929 	bl	8003b0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695a      	ldr	r2, [r3, #20]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3708      	adds	r7, #8
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800390a:	b580      	push	{r7, lr}
 800390c:	b08a      	sub	sp, #40	; 0x28
 800390e:	af02      	add	r7, sp, #8
 8003910:	60f8      	str	r0, [r7, #12]
 8003912:	60b9      	str	r1, [r7, #8]
 8003914:	603b      	str	r3, [r7, #0]
 8003916:	4613      	mov	r3, r2
 8003918:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b20      	cmp	r3, #32
 8003928:	d17c      	bne.n	8003a24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <HAL_UART_Transmit+0x2c>
 8003930:	88fb      	ldrh	r3, [r7, #6]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e075      	b.n	8003a26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_UART_Transmit+0x3e>
 8003944:	2302      	movs	r3, #2
 8003946:	e06e      	b.n	8003a26 <HAL_UART_Transmit+0x11c>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2221      	movs	r2, #33	; 0x21
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800395e:	f7fd fb41 	bl	8000fe4 <HAL_GetTick>
 8003962:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	88fa      	ldrh	r2, [r7, #6]
 8003968:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	88fa      	ldrh	r2, [r7, #6]
 800396e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003978:	d108      	bne.n	800398c <HAL_UART_Transmit+0x82>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d104      	bne.n	800398c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003982:	2300      	movs	r3, #0
 8003984:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	e003      	b.n	8003994 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003990:	2300      	movs	r3, #0
 8003992:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800399c:	e02a      	b.n	80039f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2200      	movs	r2, #0
 80039a6:	2180      	movs	r1, #128	; 0x80
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f840 	bl	8003a2e <UART_WaitOnFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e036      	b.n	8003a26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10b      	bne.n	80039d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	461a      	mov	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	3302      	adds	r3, #2
 80039d2:	61bb      	str	r3, [r7, #24]
 80039d4:	e007      	b.n	80039e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	781a      	ldrb	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	3301      	adds	r3, #1
 80039e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1cf      	bne.n	800399e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2200      	movs	r2, #0
 8003a06:	2140      	movs	r1, #64	; 0x40
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f810 	bl	8003a2e <UART_WaitOnFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e006      	b.n	8003a26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	e000      	b.n	8003a26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a24:	2302      	movs	r3, #2
  }
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3720      	adds	r7, #32
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b090      	sub	sp, #64	; 0x40
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	603b      	str	r3, [r7, #0]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a3e:	e050      	b.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d04c      	beq.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d007      	beq.n	8003a5e <UART_WaitOnFlagUntilTimeout+0x30>
 8003a4e:	f7fd fac9 	bl	8000fe4 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d241      	bcs.n	8003ae2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	330c      	adds	r3, #12
 8003a64:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a68:	e853 3f00 	ldrex	r3, [r3]
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	330c      	adds	r3, #12
 8003a7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a7e:	637a      	str	r2, [r7, #52]	; 0x34
 8003a80:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a86:	e841 2300 	strex	r3, r2, [r1]
 8003a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1e5      	bne.n	8003a5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3314      	adds	r3, #20
 8003a98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	e853 3f00 	ldrex	r3, [r3]
 8003aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	3314      	adds	r3, #20
 8003ab0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ab2:	623a      	str	r2, [r7, #32]
 8003ab4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab6:	69f9      	ldr	r1, [r7, #28]
 8003ab8:	6a3a      	ldr	r2, [r7, #32]
 8003aba:	e841 2300 	strex	r3, r2, [r1]
 8003abe:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1e5      	bne.n	8003a92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2220      	movs	r2, #32
 8003ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e00f      	b.n	8003b02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4013      	ands	r3, r2
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	bf0c      	ite	eq
 8003af2:	2301      	moveq	r3, #1
 8003af4:	2300      	movne	r3, #0
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	461a      	mov	r2, r3
 8003afa:	79fb      	ldrb	r3, [r7, #7]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d09f      	beq.n	8003a40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3740      	adds	r7, #64	; 0x40
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b10:	b09f      	sub	sp, #124	; 0x7c
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b22:	68d9      	ldr	r1, [r3, #12]
 8003b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	ea40 0301 	orr.w	r3, r0, r1
 8003b2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b50:	f021 010c 	bic.w	r1, r1, #12
 8003b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695b      	ldr	r3, [r3, #20]
 8003b64:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6a:	6999      	ldr	r1, [r3, #24]
 8003b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	ea40 0301 	orr.w	r3, r0, r1
 8003b74:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	4bc5      	ldr	r3, [pc, #788]	; (8003e90 <UART_SetConfig+0x384>)
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d004      	beq.n	8003b8a <UART_SetConfig+0x7e>
 8003b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	4bc3      	ldr	r3, [pc, #780]	; (8003e94 <UART_SetConfig+0x388>)
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d103      	bne.n	8003b92 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b8a:	f7fd ff53 	bl	8001a34 <HAL_RCC_GetPCLK2Freq>
 8003b8e:	6778      	str	r0, [r7, #116]	; 0x74
 8003b90:	e002      	b.n	8003b98 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b92:	f7fd ff3b 	bl	8001a0c <HAL_RCC_GetPCLK1Freq>
 8003b96:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ba0:	f040 80b6 	bne.w	8003d10 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba6:	461c      	mov	r4, r3
 8003ba8:	f04f 0500 	mov.w	r5, #0
 8003bac:	4622      	mov	r2, r4
 8003bae:	462b      	mov	r3, r5
 8003bb0:	1891      	adds	r1, r2, r2
 8003bb2:	6439      	str	r1, [r7, #64]	; 0x40
 8003bb4:	415b      	adcs	r3, r3
 8003bb6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bb8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bbc:	1912      	adds	r2, r2, r4
 8003bbe:	eb45 0303 	adc.w	r3, r5, r3
 8003bc2:	f04f 0000 	mov.w	r0, #0
 8003bc6:	f04f 0100 	mov.w	r1, #0
 8003bca:	00d9      	lsls	r1, r3, #3
 8003bcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bd0:	00d0      	lsls	r0, r2, #3
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	1911      	adds	r1, r2, r4
 8003bd8:	6639      	str	r1, [r7, #96]	; 0x60
 8003bda:	416b      	adcs	r3, r5
 8003bdc:	667b      	str	r3, [r7, #100]	; 0x64
 8003bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	461a      	mov	r2, r3
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	1891      	adds	r1, r2, r2
 8003bea:	63b9      	str	r1, [r7, #56]	; 0x38
 8003bec:	415b      	adcs	r3, r3
 8003bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003bf4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003bf8:	f7fc fb62 	bl	80002c0 <__aeabi_uldivmod>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4ba5      	ldr	r3, [pc, #660]	; (8003e98 <UART_SetConfig+0x38c>)
 8003c02:	fba3 2302 	umull	r2, r3, r3, r2
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	011e      	lsls	r6, r3, #4
 8003c0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c0c:	461c      	mov	r4, r3
 8003c0e:	f04f 0500 	mov.w	r5, #0
 8003c12:	4622      	mov	r2, r4
 8003c14:	462b      	mov	r3, r5
 8003c16:	1891      	adds	r1, r2, r2
 8003c18:	6339      	str	r1, [r7, #48]	; 0x30
 8003c1a:	415b      	adcs	r3, r3
 8003c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c22:	1912      	adds	r2, r2, r4
 8003c24:	eb45 0303 	adc.w	r3, r5, r3
 8003c28:	f04f 0000 	mov.w	r0, #0
 8003c2c:	f04f 0100 	mov.w	r1, #0
 8003c30:	00d9      	lsls	r1, r3, #3
 8003c32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c36:	00d0      	lsls	r0, r2, #3
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	1911      	adds	r1, r2, r4
 8003c3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c40:	416b      	adcs	r3, r5
 8003c42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	1891      	adds	r1, r2, r2
 8003c50:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c52:	415b      	adcs	r3, r3
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003c5e:	f7fc fb2f 	bl	80002c0 <__aeabi_uldivmod>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4b8c      	ldr	r3, [pc, #560]	; (8003e98 <UART_SetConfig+0x38c>)
 8003c68:	fba3 1302 	umull	r1, r3, r3, r2
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	2164      	movs	r1, #100	; 0x64
 8003c70:	fb01 f303 	mul.w	r3, r1, r3
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	3332      	adds	r3, #50	; 0x32
 8003c7a:	4a87      	ldr	r2, [pc, #540]	; (8003e98 <UART_SetConfig+0x38c>)
 8003c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	005b      	lsls	r3, r3, #1
 8003c84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c88:	441e      	add	r6, r3
 8003c8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f04f 0100 	mov.w	r1, #0
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	1894      	adds	r4, r2, r2
 8003c98:	623c      	str	r4, [r7, #32]
 8003c9a:	415b      	adcs	r3, r3
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ca2:	1812      	adds	r2, r2, r0
 8003ca4:	eb41 0303 	adc.w	r3, r1, r3
 8003ca8:	f04f 0400 	mov.w	r4, #0
 8003cac:	f04f 0500 	mov.w	r5, #0
 8003cb0:	00dd      	lsls	r5, r3, #3
 8003cb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cb6:	00d4      	lsls	r4, r2, #3
 8003cb8:	4622      	mov	r2, r4
 8003cba:	462b      	mov	r3, r5
 8003cbc:	1814      	adds	r4, r2, r0
 8003cbe:	653c      	str	r4, [r7, #80]	; 0x50
 8003cc0:	414b      	adcs	r3, r1
 8003cc2:	657b      	str	r3, [r7, #84]	; 0x54
 8003cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	461a      	mov	r2, r3
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	1891      	adds	r1, r2, r2
 8003cd0:	61b9      	str	r1, [r7, #24]
 8003cd2:	415b      	adcs	r3, r3
 8003cd4:	61fb      	str	r3, [r7, #28]
 8003cd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cda:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003cde:	f7fc faef 	bl	80002c0 <__aeabi_uldivmod>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4b6c      	ldr	r3, [pc, #432]	; (8003e98 <UART_SetConfig+0x38c>)
 8003ce8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cec:	095b      	lsrs	r3, r3, #5
 8003cee:	2164      	movs	r1, #100	; 0x64
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	3332      	adds	r3, #50	; 0x32
 8003cfa:	4a67      	ldr	r2, [pc, #412]	; (8003e98 <UART_SetConfig+0x38c>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	f003 0207 	and.w	r2, r3, #7
 8003d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4432      	add	r2, r6
 8003d0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d0e:	e0b9      	b.n	8003e84 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d12:	461c      	mov	r4, r3
 8003d14:	f04f 0500 	mov.w	r5, #0
 8003d18:	4622      	mov	r2, r4
 8003d1a:	462b      	mov	r3, r5
 8003d1c:	1891      	adds	r1, r2, r2
 8003d1e:	6139      	str	r1, [r7, #16]
 8003d20:	415b      	adcs	r3, r3
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d28:	1912      	adds	r2, r2, r4
 8003d2a:	eb45 0303 	adc.w	r3, r5, r3
 8003d2e:	f04f 0000 	mov.w	r0, #0
 8003d32:	f04f 0100 	mov.w	r1, #0
 8003d36:	00d9      	lsls	r1, r3, #3
 8003d38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d3c:	00d0      	lsls	r0, r2, #3
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	eb12 0804 	adds.w	r8, r2, r4
 8003d46:	eb43 0905 	adc.w	r9, r3, r5
 8003d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f04f 0100 	mov.w	r1, #0
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	008b      	lsls	r3, r1, #2
 8003d5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d62:	0082      	lsls	r2, r0, #2
 8003d64:	4640      	mov	r0, r8
 8003d66:	4649      	mov	r1, r9
 8003d68:	f7fc faaa 	bl	80002c0 <__aeabi_uldivmod>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4b49      	ldr	r3, [pc, #292]	; (8003e98 <UART_SetConfig+0x38c>)
 8003d72:	fba3 2302 	umull	r2, r3, r3, r2
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	011e      	lsls	r6, r3, #4
 8003d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f04f 0100 	mov.w	r1, #0
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	1894      	adds	r4, r2, r2
 8003d88:	60bc      	str	r4, [r7, #8]
 8003d8a:	415b      	adcs	r3, r3
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d92:	1812      	adds	r2, r2, r0
 8003d94:	eb41 0303 	adc.w	r3, r1, r3
 8003d98:	f04f 0400 	mov.w	r4, #0
 8003d9c:	f04f 0500 	mov.w	r5, #0
 8003da0:	00dd      	lsls	r5, r3, #3
 8003da2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003da6:	00d4      	lsls	r4, r2, #3
 8003da8:	4622      	mov	r2, r4
 8003daa:	462b      	mov	r3, r5
 8003dac:	1814      	adds	r4, r2, r0
 8003dae:	64bc      	str	r4, [r7, #72]	; 0x48
 8003db0:	414b      	adcs	r3, r1
 8003db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f04f 0100 	mov.w	r1, #0
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	008b      	lsls	r3, r1, #2
 8003dc8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003dcc:	0082      	lsls	r2, r0, #2
 8003dce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003dd2:	f7fc fa75 	bl	80002c0 <__aeabi_uldivmod>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4b2f      	ldr	r3, [pc, #188]	; (8003e98 <UART_SetConfig+0x38c>)
 8003ddc:	fba3 1302 	umull	r1, r3, r3, r2
 8003de0:	095b      	lsrs	r3, r3, #5
 8003de2:	2164      	movs	r1, #100	; 0x64
 8003de4:	fb01 f303 	mul.w	r3, r1, r3
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	3332      	adds	r3, #50	; 0x32
 8003dee:	4a2a      	ldr	r2, [pc, #168]	; (8003e98 <UART_SetConfig+0x38c>)
 8003df0:	fba2 2303 	umull	r2, r3, r2, r3
 8003df4:	095b      	lsrs	r3, r3, #5
 8003df6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dfa:	441e      	add	r6, r3
 8003dfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f04f 0100 	mov.w	r1, #0
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	1894      	adds	r4, r2, r2
 8003e0a:	603c      	str	r4, [r7, #0]
 8003e0c:	415b      	adcs	r3, r3
 8003e0e:	607b      	str	r3, [r7, #4]
 8003e10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e14:	1812      	adds	r2, r2, r0
 8003e16:	eb41 0303 	adc.w	r3, r1, r3
 8003e1a:	f04f 0400 	mov.w	r4, #0
 8003e1e:	f04f 0500 	mov.w	r5, #0
 8003e22:	00dd      	lsls	r5, r3, #3
 8003e24:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e28:	00d4      	lsls	r4, r2, #3
 8003e2a:	4622      	mov	r2, r4
 8003e2c:	462b      	mov	r3, r5
 8003e2e:	eb12 0a00 	adds.w	sl, r2, r0
 8003e32:	eb43 0b01 	adc.w	fp, r3, r1
 8003e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f04f 0100 	mov.w	r1, #0
 8003e40:	f04f 0200 	mov.w	r2, #0
 8003e44:	f04f 0300 	mov.w	r3, #0
 8003e48:	008b      	lsls	r3, r1, #2
 8003e4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e4e:	0082      	lsls	r2, r0, #2
 8003e50:	4650      	mov	r0, sl
 8003e52:	4659      	mov	r1, fp
 8003e54:	f7fc fa34 	bl	80002c0 <__aeabi_uldivmod>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4b0e      	ldr	r3, [pc, #56]	; (8003e98 <UART_SetConfig+0x38c>)
 8003e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	2164      	movs	r1, #100	; 0x64
 8003e66:	fb01 f303 	mul.w	r3, r1, r3
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	3332      	adds	r3, #50	; 0x32
 8003e70:	4a09      	ldr	r2, [pc, #36]	; (8003e98 <UART_SetConfig+0x38c>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	095b      	lsrs	r3, r3, #5
 8003e78:	f003 020f 	and.w	r2, r3, #15
 8003e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4432      	add	r2, r6
 8003e82:	609a      	str	r2, [r3, #8]
}
 8003e84:	bf00      	nop
 8003e86:	377c      	adds	r7, #124	; 0x7c
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e8e:	bf00      	nop
 8003e90:	40011000 	.word	0x40011000
 8003e94:	40011400 	.word	0x40011400
 8003e98:	51eb851f 	.word	0x51eb851f

08003e9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e9c:	b084      	sub	sp, #16
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	f107 001c 	add.w	r0, r7, #28
 8003eaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d122      	bne.n	8003efa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003ec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d105      	bne.n	8003eee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fa7c 	bl	80043ec <USB_CoreReset>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	73fb      	strb	r3, [r7, #15]
 8003ef8:	e01a      	b.n	8003f30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fa70 	bl	80043ec <USB_CoreReset>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	639a      	str	r2, [r3, #56]	; 0x38
 8003f22:	e005      	b.n	8003f30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d10b      	bne.n	8003f4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f043 0206 	orr.w	r2, r3, #6
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f043 0220 	orr.w	r2, r3, #32
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f5a:	b004      	add	sp, #16
 8003f5c:	4770      	bx	lr

08003f5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f023 0201 	bic.w	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d115      	bne.n	8003fce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fae:	2001      	movs	r0, #1
 8003fb0:	f7fd f824 	bl	8000ffc <HAL_Delay>
      ms++;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fa08 	bl	80043d0 <USB_GetMode>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d01e      	beq.n	8004004 <USB_SetCurrentMode+0x84>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2b31      	cmp	r3, #49	; 0x31
 8003fca:	d9f0      	bls.n	8003fae <USB_SetCurrentMode+0x2e>
 8003fcc:	e01a      	b.n	8004004 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d115      	bne.n	8004000 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	f7fd f80b 	bl	8000ffc <HAL_Delay>
      ms++;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f9ef 	bl	80043d0 <USB_GetMode>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <USB_SetCurrentMode+0x84>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2b31      	cmp	r3, #49	; 0x31
 8003ffc:	d9f0      	bls.n	8003fe0 <USB_SetCurrentMode+0x60>
 8003ffe:	e001      	b.n	8004004 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e005      	b.n	8004010 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b32      	cmp	r3, #50	; 0x32
 8004008:	d101      	bne.n	800400e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004018:	b084      	sub	sp, #16
 800401a:	b580      	push	{r7, lr}
 800401c:	b086      	sub	sp, #24
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004026:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800402a:	2300      	movs	r3, #0
 800402c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004032:	2300      	movs	r3, #0
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	e009      	b.n	800404c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	3340      	adds	r3, #64	; 0x40
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	2200      	movs	r2, #0
 8004044:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	3301      	adds	r3, #1
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b0e      	cmp	r3, #14
 8004050:	d9f2      	bls.n	8004038 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004054:	2b00      	cmp	r3, #0
 8004056:	d11c      	bne.n	8004092 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004066:	f043 0302 	orr.w	r3, r3, #2
 800406a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	e005      	b.n	800409e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004096:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040a4:	461a      	mov	r2, r3
 80040a6:	2300      	movs	r3, #0
 80040a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b0:	4619      	mov	r1, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b8:	461a      	mov	r2, r3
 80040ba:	680b      	ldr	r3, [r1, #0]
 80040bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d10c      	bne.n	80040de <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d104      	bne.n	80040d4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040ca:	2100      	movs	r1, #0
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f945 	bl	800435c <USB_SetDevSpeed>
 80040d2:	e008      	b.n	80040e6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040d4:	2101      	movs	r1, #1
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f940 	bl	800435c <USB_SetDevSpeed>
 80040dc:	e003      	b.n	80040e6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80040de:	2103      	movs	r1, #3
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 f93b 	bl	800435c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80040e6:	2110      	movs	r1, #16
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f8f3 	bl	80042d4 <USB_FlushTxFifo>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f90f 	bl	800431c <USB_FlushRxFifo>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800410e:	461a      	mov	r2, r3
 8004110:	2300      	movs	r3, #0
 8004112:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411a:	461a      	mov	r2, r3
 800411c:	2300      	movs	r3, #0
 800411e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004126:	461a      	mov	r2, r3
 8004128:	2300      	movs	r3, #0
 800412a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800412c:	2300      	movs	r3, #0
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	e043      	b.n	80041ba <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004148:	d118      	bne.n	800417c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10a      	bne.n	8004166 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4413      	add	r3, r2
 8004158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415c:	461a      	mov	r2, r3
 800415e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	e013      	b.n	800418e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004172:	461a      	mov	r2, r3
 8004174:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	e008      	b.n	800418e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004188:	461a      	mov	r2, r3
 800418a:	2300      	movs	r3, #0
 800418c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419a:	461a      	mov	r2, r3
 800419c:	2300      	movs	r3, #0
 800419e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ac:	461a      	mov	r2, r3
 80041ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	3301      	adds	r3, #1
 80041b8:	613b      	str	r3, [r7, #16]
 80041ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d3b7      	bcc.n	8004132 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041c2:	2300      	movs	r3, #0
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	e043      	b.n	8004250 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041de:	d118      	bne.n	8004212 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10a      	bne.n	80041fc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	015a      	lsls	r2, r3, #5
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	4413      	add	r3, r2
 80041ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f2:	461a      	mov	r2, r3
 80041f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e013      	b.n	8004224 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004208:	461a      	mov	r2, r3
 800420a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	e008      	b.n	8004224 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421e:	461a      	mov	r2, r3
 8004220:	2300      	movs	r3, #0
 8004222:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004230:	461a      	mov	r2, r3
 8004232:	2300      	movs	r3, #0
 8004234:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004242:	461a      	mov	r2, r3
 8004244:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004248:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	3301      	adds	r3, #1
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	429a      	cmp	r2, r3
 8004256:	d3b7      	bcc.n	80041c8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004266:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800426a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004278:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	2b00      	cmp	r3, #0
 800427e:	d105      	bne.n	800428c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	f043 0210 	orr.w	r2, r3, #16
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699a      	ldr	r2, [r3, #24]
 8004290:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <USB_DevInit+0x2b8>)
 8004292:	4313      	orrs	r3, r2
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f043 0208 	orr.w	r2, r3, #8
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80042aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d107      	bne.n	80042c0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042b8:	f043 0304 	orr.w	r3, r3, #4
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042cc:	b004      	add	sp, #16
 80042ce:	4770      	bx	lr
 80042d0:	803c3800 	.word	0x803c3800

080042d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	019b      	lsls	r3, r3, #6
 80042e6:	f043 0220 	orr.w	r2, r3, #32
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3301      	adds	r3, #1
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	4a08      	ldr	r2, [pc, #32]	; (8004318 <USB_FlushTxFifo+0x44>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d901      	bls.n	80042fe <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e006      	b.n	800430c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0320 	and.w	r3, r3, #32
 8004306:	2b20      	cmp	r3, #32
 8004308:	d0f1      	beq.n	80042ee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	00030d40 	.word	0x00030d40

0800431c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2210      	movs	r2, #16
 800432c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3301      	adds	r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	4a08      	ldr	r2, [pc, #32]	; (8004358 <USB_FlushRxFifo+0x3c>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d901      	bls.n	800433e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e006      	b.n	800434c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f003 0310 	and.w	r3, r3, #16
 8004346:	2b10      	cmp	r3, #16
 8004348:	d0f1      	beq.n	800432e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	00030d40 	.word	0x00030d40

0800435c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	68f9      	ldr	r1, [r7, #12]
 8004378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800437c:	4313      	orrs	r3, r2
 800437e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800438e:	b480      	push	{r7}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043a8:	f023 0303 	bic.w	r3, r3, #3
 80043ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043bc:	f043 0302 	orr.w	r3, r3, #2
 80043c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	f003 0301 	and.w	r3, r3, #1
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3301      	adds	r3, #1
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	4a13      	ldr	r2, [pc, #76]	; (800444c <USB_CoreReset+0x60>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d901      	bls.n	8004408 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e01a      	b.n	800443e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	daf3      	bge.n	80043f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f043 0201 	orr.w	r2, r3, #1
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3301      	adds	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	4a09      	ldr	r2, [pc, #36]	; (800444c <USB_CoreReset+0x60>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d901      	bls.n	8004430 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e006      	b.n	800443e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b01      	cmp	r3, #1
 800443a:	d0f1      	beq.n	8004420 <USB_CoreReset+0x34>

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	00030d40 	.word	0x00030d40

08004450 <__NVIC_SetPriority>:
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	4603      	mov	r3, r0
 8004458:	6039      	str	r1, [r7, #0]
 800445a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800445c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004460:	2b00      	cmp	r3, #0
 8004462:	db0a      	blt.n	800447a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	b2da      	uxtb	r2, r3
 8004468:	490c      	ldr	r1, [pc, #48]	; (800449c <__NVIC_SetPriority+0x4c>)
 800446a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446e:	0112      	lsls	r2, r2, #4
 8004470:	b2d2      	uxtb	r2, r2
 8004472:	440b      	add	r3, r1
 8004474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004478:	e00a      	b.n	8004490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	b2da      	uxtb	r2, r3
 800447e:	4908      	ldr	r1, [pc, #32]	; (80044a0 <__NVIC_SetPriority+0x50>)
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	3b04      	subs	r3, #4
 8004488:	0112      	lsls	r2, r2, #4
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	440b      	add	r3, r1
 800448e:	761a      	strb	r2, [r3, #24]
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	e000e100 	.word	0xe000e100
 80044a0:	e000ed00 	.word	0xe000ed00

080044a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80044a8:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <SysTick_Handler+0x1c>)
 80044aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80044ac:	f001 fdda 	bl	8006064 <xTaskGetSchedulerState>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d001      	beq.n	80044ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80044b6:	f002 fbbf 	bl	8006c38 <xPortSysTickHandler>
  }
}
 80044ba:	bf00      	nop
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	e000e010 	.word	0xe000e010

080044c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80044c8:	2100      	movs	r1, #0
 80044ca:	f06f 0004 	mvn.w	r0, #4
 80044ce:	f7ff ffbf 	bl	8004450 <__NVIC_SetPriority>
#endif
}
 80044d2:	bf00      	nop
 80044d4:	bd80      	pop	{r7, pc}
	...

080044d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044de:	f3ef 8305 	mrs	r3, IPSR
 80044e2:	603b      	str	r3, [r7, #0]
  return(result);
 80044e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80044ea:	f06f 0305 	mvn.w	r3, #5
 80044ee:	607b      	str	r3, [r7, #4]
 80044f0:	e00c      	b.n	800450c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80044f2:	4b0a      	ldr	r3, [pc, #40]	; (800451c <osKernelInitialize+0x44>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d105      	bne.n	8004506 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80044fa:	4b08      	ldr	r3, [pc, #32]	; (800451c <osKernelInitialize+0x44>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004500:	2300      	movs	r3, #0
 8004502:	607b      	str	r3, [r7, #4]
 8004504:	e002      	b.n	800450c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004506:	f04f 33ff 	mov.w	r3, #4294967295
 800450a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800450c:	687b      	ldr	r3, [r7, #4]
}
 800450e:	4618      	mov	r0, r3
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	20000098 	.word	0x20000098

08004520 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004526:	f3ef 8305 	mrs	r3, IPSR
 800452a:	603b      	str	r3, [r7, #0]
  return(result);
 800452c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004532:	f06f 0305 	mvn.w	r3, #5
 8004536:	607b      	str	r3, [r7, #4]
 8004538:	e010      	b.n	800455c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800453a:	4b0b      	ldr	r3, [pc, #44]	; (8004568 <osKernelStart+0x48>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d109      	bne.n	8004556 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004542:	f7ff ffbf 	bl	80044c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004546:	4b08      	ldr	r3, [pc, #32]	; (8004568 <osKernelStart+0x48>)
 8004548:	2202      	movs	r2, #2
 800454a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800454c:	f001 f91e 	bl	800578c <vTaskStartScheduler>
      stat = osOK;
 8004550:	2300      	movs	r3, #0
 8004552:	607b      	str	r3, [r7, #4]
 8004554:	e002      	b.n	800455c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004556:	f04f 33ff 	mov.w	r3, #4294967295
 800455a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800455c:	687b      	ldr	r3, [r7, #4]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000098 	.word	0x20000098

0800456c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800456c:	b580      	push	{r7, lr}
 800456e:	b08e      	sub	sp, #56	; 0x38
 8004570:	af04      	add	r7, sp, #16
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800457c:	f3ef 8305 	mrs	r3, IPSR
 8004580:	617b      	str	r3, [r7, #20]
  return(result);
 8004582:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004584:	2b00      	cmp	r3, #0
 8004586:	d17e      	bne.n	8004686 <osThreadNew+0x11a>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d07b      	beq.n	8004686 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800458e:	2380      	movs	r3, #128	; 0x80
 8004590:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004592:	2318      	movs	r3, #24
 8004594:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800459a:	f04f 33ff 	mov.w	r3, #4294967295
 800459e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d045      	beq.n	8004632 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <osThreadNew+0x48>
        name = attr->name;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d008      	beq.n	80045da <osThreadNew+0x6e>
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	2b38      	cmp	r3, #56	; 0x38
 80045cc:	d805      	bhi.n	80045da <osThreadNew+0x6e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <osThreadNew+0x72>
        return (NULL);
 80045da:	2300      	movs	r3, #0
 80045dc:	e054      	b.n	8004688 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	089b      	lsrs	r3, r3, #2
 80045ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00e      	beq.n	8004614 <osThreadNew+0xa8>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	2bbb      	cmp	r3, #187	; 0xbb
 80045fc:	d90a      	bls.n	8004614 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004602:	2b00      	cmp	r3, #0
 8004604:	d006      	beq.n	8004614 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <osThreadNew+0xa8>
        mem = 1;
 800460e:	2301      	movs	r3, #1
 8004610:	61bb      	str	r3, [r7, #24]
 8004612:	e010      	b.n	8004636 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10c      	bne.n	8004636 <osThreadNew+0xca>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d108      	bne.n	8004636 <osThreadNew+0xca>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d104      	bne.n	8004636 <osThreadNew+0xca>
          mem = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	61bb      	str	r3, [r7, #24]
 8004630:	e001      	b.n	8004636 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004632:	2300      	movs	r3, #0
 8004634:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d110      	bne.n	800465e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004644:	9202      	str	r2, [sp, #8]
 8004646:	9301      	str	r3, [sp, #4]
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	6a3a      	ldr	r2, [r7, #32]
 8004650:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004652:	68f8      	ldr	r0, [r7, #12]
 8004654:	f000 fe38 	bl	80052c8 <xTaskCreateStatic>
 8004658:	4603      	mov	r3, r0
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	e013      	b.n	8004686 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d110      	bne.n	8004686 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	b29a      	uxth	r2, r3
 8004668:	f107 0310 	add.w	r3, r7, #16
 800466c:	9301      	str	r3, [sp, #4]
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 fe83 	bl	8005382 <xTaskCreate>
 800467c:	4603      	mov	r3, r0
 800467e:	2b01      	cmp	r3, #1
 8004680:	d001      	beq.n	8004686 <osThreadNew+0x11a>
            hTask = NULL;
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004686:	693b      	ldr	r3, [r7, #16]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3728      	adds	r7, #40	; 0x28
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8004696:	f001 fcd5 	bl	8006044 <xTaskGetCurrentTaskHandle>
 800469a:	6078      	str	r0, [r7, #4]

  return (id);
 800469c:	687b      	ldr	r3, [r7, #4]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b086      	sub	sp, #24
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046b2:	f3ef 8305 	mrs	r3, IPSR
 80046b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80046b8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80046be:	f06f 0305 	mvn.w	r3, #5
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	e00b      	b.n	80046de <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d103      	bne.n	80046d4 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80046cc:	f06f 0303 	mvn.w	r3, #3
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	e004      	b.n	80046de <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80046d8:	6938      	ldr	r0, [r7, #16]
 80046da:	f000 ffe1 	bl	80056a0 <vTaskSuspend>
  }

  return (stat);
 80046de:	697b      	ldr	r3, [r7, #20]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046f0:	f3ef 8305 	mrs	r3, IPSR
 80046f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80046f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d003      	beq.n	8004704 <osDelay+0x1c>
    stat = osErrorISR;
 80046fc:	f06f 0305 	mvn.w	r3, #5
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	e007      	b.n	8004714 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <osDelay+0x2c>
      vTaskDelay(ticks);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 ff92 	bl	8005638 <vTaskDelay>
    }
  }

  return (stat);
 8004714:	68fb      	ldr	r3, [r7, #12]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4a07      	ldr	r2, [pc, #28]	; (800474c <vApplicationGetIdleTaskMemory+0x2c>)
 8004730:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	4a06      	ldr	r2, [pc, #24]	; (8004750 <vApplicationGetIdleTaskMemory+0x30>)
 8004736:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2280      	movs	r2, #128	; 0x80
 800473c:	601a      	str	r2, [r3, #0]
}
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	2000009c 	.word	0x2000009c
 8004750:	20000158 	.word	0x20000158

08004754 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4a07      	ldr	r2, [pc, #28]	; (8004780 <vApplicationGetTimerTaskMemory+0x2c>)
 8004764:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	4a06      	ldr	r2, [pc, #24]	; (8004784 <vApplicationGetTimerTaskMemory+0x30>)
 800476a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004772:	601a      	str	r2, [r3, #0]
}
 8004774:	bf00      	nop
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr
 8004780:	20000358 	.word	0x20000358
 8004784:	20000414 	.word	0x20000414

08004788 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f103 0208 	add.w	r2, r3, #8
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f04f 32ff 	mov.w	r2, #4294967295
 80047a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f103 0208 	add.w	r2, r3, #8
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f103 0208 	add.w	r2, r3, #8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047e2:	b480      	push	{r7}
 80047e4:	b085      	sub	sp, #20
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	601a      	str	r2, [r3, #0]
}
 800481e:	bf00      	nop
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr

0800482a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800482a:	b480      	push	{r7}
 800482c:	b085      	sub	sp, #20
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	d103      	bne.n	800484a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	e00c      	b.n	8004864 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	3308      	adds	r3, #8
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	e002      	b.n	8004858 <vListInsert+0x2e>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	429a      	cmp	r2, r3
 8004862:	d2f6      	bcs.n	8004852 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	601a      	str	r2, [r3, #0]
}
 8004890:	bf00      	nop
 8004892:	3714      	adds	r7, #20
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6892      	ldr	r2, [r2, #8]
 80048b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6852      	ldr	r2, [r2, #4]
 80048bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d103      	bne.n	80048d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	1e5a      	subs	r2, r3, #1
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10a      	bne.n	800491a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004916:	bf00      	nop
 8004918:	e7fe      	b.n	8004918 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800491a:	f002 f8fb 	bl	8006b14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004926:	68f9      	ldr	r1, [r7, #12]
 8004928:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800492a:	fb01 f303 	mul.w	r3, r1, r3
 800492e:	441a      	add	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494a:	3b01      	subs	r3, #1
 800494c:	68f9      	ldr	r1, [r7, #12]
 800494e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004950:	fb01 f303 	mul.w	r3, r1, r3
 8004954:	441a      	add	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	22ff      	movs	r2, #255	; 0xff
 800495e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	22ff      	movs	r2, #255	; 0xff
 8004966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d114      	bne.n	800499a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d01a      	beq.n	80049ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3310      	adds	r3, #16
 800497c:	4618      	mov	r0, r3
 800497e:	f001 f99f 	bl	8005cc0 <xTaskRemoveFromEventList>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d012      	beq.n	80049ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004988:	4b0c      	ldr	r3, [pc, #48]	; (80049bc <xQueueGenericReset+0xcc>)
 800498a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	e009      	b.n	80049ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	3310      	adds	r3, #16
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff fef2 	bl	8004788 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	3324      	adds	r3, #36	; 0x24
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff feed 	bl	8004788 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049ae:	f002 f8e1 	bl	8006b74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049b2:	2301      	movs	r3, #1
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	e000ed04 	.word	0xe000ed04

080049c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08e      	sub	sp, #56	; 0x38
 80049c4:	af02      	add	r7, sp, #8
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
 80049cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10a      	bne.n	80049ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80049e6:	bf00      	nop
 80049e8:	e7fe      	b.n	80049e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10a      	bne.n	8004a06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a02:	bf00      	nop
 8004a04:	e7fe      	b.n	8004a04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <xQueueGenericCreateStatic+0x52>
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <xQueueGenericCreateStatic+0x56>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <xQueueGenericCreateStatic+0x58>
 8004a16:	2300      	movs	r3, #0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d10a      	bne.n	8004a32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	623b      	str	r3, [r7, #32]
}
 8004a2e:	bf00      	nop
 8004a30:	e7fe      	b.n	8004a30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d102      	bne.n	8004a3e <xQueueGenericCreateStatic+0x7e>
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <xQueueGenericCreateStatic+0x82>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e000      	b.n	8004a44 <xQueueGenericCreateStatic+0x84>
 8004a42:	2300      	movs	r3, #0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10a      	bne.n	8004a5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	61fb      	str	r3, [r7, #28]
}
 8004a5a:	bf00      	nop
 8004a5c:	e7fe      	b.n	8004a5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a5e:	2350      	movs	r3, #80	; 0x50
 8004a60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b50      	cmp	r3, #80	; 0x50
 8004a66:	d00a      	beq.n	8004a7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	61bb      	str	r3, [r7, #24]
}
 8004a7a:	bf00      	nop
 8004a7c:	e7fe      	b.n	8004a7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00d      	beq.n	8004aa6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	68b9      	ldr	r1, [r7, #8]
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f000 f805 	bl	8004ab0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3730      	adds	r7, #48	; 0x30
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
 8004abc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d103      	bne.n	8004acc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	e002      	b.n	8004ad2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ade:	2101      	movs	r1, #1
 8004ae0:	69b8      	ldr	r0, [r7, #24]
 8004ae2:	f7ff ff05 	bl	80048f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	78fa      	ldrb	r2, [r7, #3]
 8004aea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004aee:	bf00      	nop
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08e      	sub	sp, #56	; 0x38
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b06:	2300      	movs	r3, #0
 8004b08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10a      	bne.n	8004b2a <xQueueGenericSend+0x32>
	__asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b26:	bf00      	nop
 8004b28:	e7fe      	b.n	8004b28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d103      	bne.n	8004b38 <xQueueGenericSend+0x40>
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <xQueueGenericSend+0x44>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <xQueueGenericSend+0x46>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10a      	bne.n	8004b58 <xQueueGenericSend+0x60>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b54:	bf00      	nop
 8004b56:	e7fe      	b.n	8004b56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d103      	bne.n	8004b66 <xQueueGenericSend+0x6e>
 8004b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d101      	bne.n	8004b6a <xQueueGenericSend+0x72>
 8004b66:	2301      	movs	r3, #1
 8004b68:	e000      	b.n	8004b6c <xQueueGenericSend+0x74>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10a      	bne.n	8004b86 <xQueueGenericSend+0x8e>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	623b      	str	r3, [r7, #32]
}
 8004b82:	bf00      	nop
 8004b84:	e7fe      	b.n	8004b84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b86:	f001 fa6d 	bl	8006064 <xTaskGetSchedulerState>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d102      	bne.n	8004b96 <xQueueGenericSend+0x9e>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <xQueueGenericSend+0xa2>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <xQueueGenericSend+0xa4>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10a      	bne.n	8004bb6 <xQueueGenericSend+0xbe>
	__asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	61fb      	str	r3, [r7, #28]
}
 8004bb2:	bf00      	nop
 8004bb4:	e7fe      	b.n	8004bb4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bb6:	f001 ffad 	bl	8006b14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d302      	bcc.n	8004bcc <xQueueGenericSend+0xd4>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d129      	bne.n	8004c20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bd2:	f000 fa0b 	bl	8004fec <prvCopyDataToQueue>
 8004bd6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d010      	beq.n	8004c02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be2:	3324      	adds	r3, #36	; 0x24
 8004be4:	4618      	mov	r0, r3
 8004be6:	f001 f86b 	bl	8005cc0 <xTaskRemoveFromEventList>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d013      	beq.n	8004c18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004bf0:	4b3f      	ldr	r3, [pc, #252]	; (8004cf0 <xQueueGenericSend+0x1f8>)
 8004bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	e00a      	b.n	8004c18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d007      	beq.n	8004c18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c08:	4b39      	ldr	r3, [pc, #228]	; (8004cf0 <xQueueGenericSend+0x1f8>)
 8004c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c18:	f001 ffac 	bl	8006b74 <vPortExitCritical>
				return pdPASS;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e063      	b.n	8004ce8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d103      	bne.n	8004c2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c26:	f001 ffa5 	bl	8006b74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e05c      	b.n	8004ce8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d106      	bne.n	8004c42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c34:	f107 0314 	add.w	r3, r7, #20
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f001 f8a5 	bl	8005d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c42:	f001 ff97 	bl	8006b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c46:	f000 fe11 	bl	800586c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c4a:	f001 ff63 	bl	8006b14 <vPortEnterCritical>
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c54:	b25b      	sxtb	r3, r3
 8004c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c5a:	d103      	bne.n	8004c64 <xQueueGenericSend+0x16c>
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c6a:	b25b      	sxtb	r3, r3
 8004c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c70:	d103      	bne.n	8004c7a <xQueueGenericSend+0x182>
 8004c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c7a:	f001 ff7b 	bl	8006b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c7e:	1d3a      	adds	r2, r7, #4
 8004c80:	f107 0314 	add.w	r3, r7, #20
 8004c84:	4611      	mov	r1, r2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f001 f894 	bl	8005db4 <xTaskCheckForTimeOut>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d124      	bne.n	8004cdc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c94:	f000 faa2 	bl	80051dc <prvIsQueueFull>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d018      	beq.n	8004cd0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca0:	3310      	adds	r3, #16
 8004ca2:	687a      	ldr	r2, [r7, #4]
 8004ca4:	4611      	mov	r1, r2
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 ffba 	bl	8005c20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cae:	f000 fa2d 	bl	800510c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004cb2:	f000 fde9 	bl	8005888 <xTaskResumeAll>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f47f af7c 	bne.w	8004bb6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004cbe:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <xQueueGenericSend+0x1f8>)
 8004cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	e772      	b.n	8004bb6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004cd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cd2:	f000 fa1b 	bl	800510c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cd6:	f000 fdd7 	bl	8005888 <xTaskResumeAll>
 8004cda:	e76c      	b.n	8004bb6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cde:	f000 fa15 	bl	800510c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ce2:	f000 fdd1 	bl	8005888 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ce6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3738      	adds	r7, #56	; 0x38
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	e000ed04 	.word	0xe000ed04

08004cf4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b090      	sub	sp, #64	; 0x40
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10a      	bne.n	8004d22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d1e:	bf00      	nop
 8004d20:	e7fe      	b.n	8004d20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d103      	bne.n	8004d30 <xQueueGenericSendFromISR+0x3c>
 8004d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d101      	bne.n	8004d34 <xQueueGenericSendFromISR+0x40>
 8004d30:	2301      	movs	r3, #1
 8004d32:	e000      	b.n	8004d36 <xQueueGenericSendFromISR+0x42>
 8004d34:	2300      	movs	r3, #0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10a      	bne.n	8004d50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d4c:	bf00      	nop
 8004d4e:	e7fe      	b.n	8004d4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d103      	bne.n	8004d5e <xQueueGenericSendFromISR+0x6a>
 8004d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5a:	2b01      	cmp	r3, #1
 8004d5c:	d101      	bne.n	8004d62 <xQueueGenericSendFromISR+0x6e>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e000      	b.n	8004d64 <xQueueGenericSendFromISR+0x70>
 8004d62:	2300      	movs	r3, #0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10a      	bne.n	8004d7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	623b      	str	r3, [r7, #32]
}
 8004d7a:	bf00      	nop
 8004d7c:	e7fe      	b.n	8004d7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d7e:	f001 ffab 	bl	8006cd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d82:	f3ef 8211 	mrs	r2, BASEPRI
 8004d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8a:	f383 8811 	msr	BASEPRI, r3
 8004d8e:	f3bf 8f6f 	isb	sy
 8004d92:	f3bf 8f4f 	dsb	sy
 8004d96:	61fa      	str	r2, [r7, #28]
 8004d98:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d302      	bcc.n	8004db0 <xQueueGenericSendFromISR+0xbc>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d12f      	bne.n	8004e10 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	68b9      	ldr	r1, [r7, #8]
 8004dc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004dc6:	f000 f911 	bl	8004fec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004dca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd2:	d112      	bne.n	8004dfa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d016      	beq.n	8004e0a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dde:	3324      	adds	r3, #36	; 0x24
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 ff6d 	bl	8005cc0 <xTaskRemoveFromEventList>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00e      	beq.n	8004e0a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00b      	beq.n	8004e0a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	e007      	b.n	8004e0a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004dfa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004dfe:	3301      	adds	r3, #1
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	b25a      	sxtb	r2, r3
 8004e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004e0e:	e001      	b.n	8004e14 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e10:	2300      	movs	r3, #0
 8004e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e16:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e1e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3740      	adds	r7, #64	; 0x40
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
	...

08004e2c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08c      	sub	sp, #48	; 0x30
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	60f8      	str	r0, [r7, #12]
 8004e34:	60b9      	str	r1, [r7, #8]
 8004e36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10a      	bne.n	8004e5c <xQueueReceive+0x30>
	__asm volatile
 8004e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	623b      	str	r3, [r7, #32]
}
 8004e58:	bf00      	nop
 8004e5a:	e7fe      	b.n	8004e5a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d103      	bne.n	8004e6a <xQueueReceive+0x3e>
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <xQueueReceive+0x42>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <xQueueReceive+0x44>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10a      	bne.n	8004e8a <xQueueReceive+0x5e>
	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	61fb      	str	r3, [r7, #28]
}
 8004e86:	bf00      	nop
 8004e88:	e7fe      	b.n	8004e88 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e8a:	f001 f8eb 	bl	8006064 <xTaskGetSchedulerState>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d102      	bne.n	8004e9a <xQueueReceive+0x6e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <xQueueReceive+0x72>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e000      	b.n	8004ea0 <xQueueReceive+0x74>
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10a      	bne.n	8004eba <xQueueReceive+0x8e>
	__asm volatile
 8004ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea8:	f383 8811 	msr	BASEPRI, r3
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	f3bf 8f4f 	dsb	sy
 8004eb4:	61bb      	str	r3, [r7, #24]
}
 8004eb6:	bf00      	nop
 8004eb8:	e7fe      	b.n	8004eb8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004eba:	f001 fe2b 	bl	8006b14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d01f      	beq.n	8004f0a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004eca:	68b9      	ldr	r1, [r7, #8]
 8004ecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ece:	f000 f8f7 	bl	80050c0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	1e5a      	subs	r2, r3, #1
 8004ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00f      	beq.n	8004f02 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	3310      	adds	r3, #16
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 feea 	bl	8005cc0 <xTaskRemoveFromEventList>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d007      	beq.n	8004f02 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004ef2:	4b3d      	ldr	r3, [pc, #244]	; (8004fe8 <xQueueReceive+0x1bc>)
 8004ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f02:	f001 fe37 	bl	8006b74 <vPortExitCritical>
				return pdPASS;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e069      	b.n	8004fde <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d103      	bne.n	8004f18 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f10:	f001 fe30 	bl	8006b74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f14:	2300      	movs	r3, #0
 8004f16:	e062      	b.n	8004fde <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d106      	bne.n	8004f2c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f1e:	f107 0310 	add.w	r3, r7, #16
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 ff30 	bl	8005d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f2c:	f001 fe22 	bl	8006b74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f30:	f000 fc9c 	bl	800586c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f34:	f001 fdee 	bl	8006b14 <vPortEnterCritical>
 8004f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f3e:	b25b      	sxtb	r3, r3
 8004f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f44:	d103      	bne.n	8004f4e <xQueueReceive+0x122>
 8004f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f54:	b25b      	sxtb	r3, r3
 8004f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5a:	d103      	bne.n	8004f64 <xQueueReceive+0x138>
 8004f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f64:	f001 fe06 	bl	8006b74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f68:	1d3a      	adds	r2, r7, #4
 8004f6a:	f107 0310 	add.w	r3, r7, #16
 8004f6e:	4611      	mov	r1, r2
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 ff1f 	bl	8005db4 <xTaskCheckForTimeOut>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d123      	bne.n	8004fc4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f7e:	f000 f917 	bl	80051b0 <prvIsQueueEmpty>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d017      	beq.n	8004fb8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	3324      	adds	r3, #36	; 0x24
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	4611      	mov	r1, r2
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fe45 	bl	8005c20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f98:	f000 f8b8 	bl	800510c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f9c:	f000 fc74 	bl	8005888 <xTaskResumeAll>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d189      	bne.n	8004eba <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004fa6:	4b10      	ldr	r3, [pc, #64]	; (8004fe8 <xQueueReceive+0x1bc>)
 8004fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	e780      	b.n	8004eba <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fba:	f000 f8a7 	bl	800510c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fbe:	f000 fc63 	bl	8005888 <xTaskResumeAll>
 8004fc2:	e77a      	b.n	8004eba <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004fc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fc6:	f000 f8a1 	bl	800510c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fca:	f000 fc5d 	bl	8005888 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fd0:	f000 f8ee 	bl	80051b0 <prvIsQueueEmpty>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f43f af6f 	beq.w	8004eba <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004fdc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3730      	adds	r7, #48	; 0x30
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	e000ed04 	.word	0xe000ed04

08004fec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005000:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10d      	bne.n	8005026 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d14d      	bne.n	80050ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	4618      	mov	r0, r3
 8005018:	f001 f842 	bl	80060a0 <xTaskPriorityDisinherit>
 800501c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	609a      	str	r2, [r3, #8]
 8005024:	e043      	b.n	80050ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d119      	bne.n	8005060 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6858      	ldr	r0, [r3, #4]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005034:	461a      	mov	r2, r3
 8005036:	68b9      	ldr	r1, [r7, #8]
 8005038:	f002 f8a4 	bl	8007184 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	441a      	add	r2, r3
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	429a      	cmp	r2, r3
 8005054:	d32b      	bcc.n	80050ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	605a      	str	r2, [r3, #4]
 800505e:	e026      	b.n	80050ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	68d8      	ldr	r0, [r3, #12]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	461a      	mov	r2, r3
 800506a:	68b9      	ldr	r1, [r7, #8]
 800506c:	f002 f88a 	bl	8007184 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	68da      	ldr	r2, [r3, #12]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	425b      	negs	r3, r3
 800507a:	441a      	add	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d207      	bcs.n	800509c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005094:	425b      	negs	r3, r3
 8005096:	441a      	add	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d105      	bne.n	80050ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80050b6:	697b      	ldr	r3, [r7, #20]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d018      	beq.n	8005104 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	441a      	add	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d303      	bcc.n	80050f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68d9      	ldr	r1, [r3, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	461a      	mov	r2, r3
 80050fe:	6838      	ldr	r0, [r7, #0]
 8005100:	f002 f840 	bl	8007184 <memcpy>
	}
}
 8005104:	bf00      	nop
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005114:	f001 fcfe 	bl	8006b14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800511e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005120:	e011      	b.n	8005146 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	2b00      	cmp	r3, #0
 8005128:	d012      	beq.n	8005150 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3324      	adds	r3, #36	; 0x24
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fdc6 	bl	8005cc0 <xTaskRemoveFromEventList>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800513a:	f000 fe9d 	bl	8005e78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	3b01      	subs	r3, #1
 8005142:	b2db      	uxtb	r3, r3
 8005144:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800514a:	2b00      	cmp	r3, #0
 800514c:	dce9      	bgt.n	8005122 <prvUnlockQueue+0x16>
 800514e:	e000      	b.n	8005152 <prvUnlockQueue+0x46>
					break;
 8005150:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	22ff      	movs	r2, #255	; 0xff
 8005156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800515a:	f001 fd0b 	bl	8006b74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800515e:	f001 fcd9 	bl	8006b14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005168:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800516a:	e011      	b.n	8005190 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d012      	beq.n	800519a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3310      	adds	r3, #16
 8005178:	4618      	mov	r0, r3
 800517a:	f000 fda1 	bl	8005cc0 <xTaskRemoveFromEventList>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005184:	f000 fe78 	bl	8005e78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005188:	7bbb      	ldrb	r3, [r7, #14]
 800518a:	3b01      	subs	r3, #1
 800518c:	b2db      	uxtb	r3, r3
 800518e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005194:	2b00      	cmp	r3, #0
 8005196:	dce9      	bgt.n	800516c <prvUnlockQueue+0x60>
 8005198:	e000      	b.n	800519c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800519a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	22ff      	movs	r2, #255	; 0xff
 80051a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80051a4:	f001 fce6 	bl	8006b74 <vPortExitCritical>
}
 80051a8:	bf00      	nop
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051b8:	f001 fcac 	bl	8006b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d102      	bne.n	80051ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80051c4:	2301      	movs	r3, #1
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	e001      	b.n	80051ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051ca:	2300      	movs	r3, #0
 80051cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051ce:	f001 fcd1 	bl	8006b74 <vPortExitCritical>

	return xReturn;
 80051d2:	68fb      	ldr	r3, [r7, #12]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051e4:	f001 fc96 	bl	8006b14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d102      	bne.n	80051fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051f4:	2301      	movs	r3, #1
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	e001      	b.n	80051fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051fe:	f001 fcb9 	bl	8006b74 <vPortExitCritical>

	return xReturn;
 8005202:	68fb      	ldr	r3, [r7, #12]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005216:	2300      	movs	r3, #0
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	e014      	b.n	8005246 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800521c:	4a0f      	ldr	r2, [pc, #60]	; (800525c <vQueueAddToRegistry+0x50>)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10b      	bne.n	8005240 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005228:	490c      	ldr	r1, [pc, #48]	; (800525c <vQueueAddToRegistry+0x50>)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005232:	4a0a      	ldr	r2, [pc, #40]	; (800525c <vQueueAddToRegistry+0x50>)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	4413      	add	r3, r2
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800523e:	e006      	b.n	800524e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3301      	adds	r3, #1
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b07      	cmp	r3, #7
 800524a:	d9e7      	bls.n	800521c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800524c:	bf00      	nop
 800524e:	bf00      	nop
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	20004f58 	.word	0x20004f58

08005260 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005270:	f001 fc50 	bl	8006b14 <vPortEnterCritical>
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800527a:	b25b      	sxtb	r3, r3
 800527c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005280:	d103      	bne.n	800528a <vQueueWaitForMessageRestricted+0x2a>
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005290:	b25b      	sxtb	r3, r3
 8005292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005296:	d103      	bne.n	80052a0 <vQueueWaitForMessageRestricted+0x40>
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052a0:	f001 fc68 	bl	8006b74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d106      	bne.n	80052ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	3324      	adds	r3, #36	; 0x24
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	68b9      	ldr	r1, [r7, #8]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 fcd7 	bl	8005c68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80052ba:	6978      	ldr	r0, [r7, #20]
 80052bc:	f7ff ff26 	bl	800510c <prvUnlockQueue>
	}
 80052c0:	bf00      	nop
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08e      	sub	sp, #56	; 0x38
 80052cc:	af04      	add	r7, sp, #16
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
 80052d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80052d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10a      	bne.n	80052f2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80052dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e0:	f383 8811 	msr	BASEPRI, r3
 80052e4:	f3bf 8f6f 	isb	sy
 80052e8:	f3bf 8f4f 	dsb	sy
 80052ec:	623b      	str	r3, [r7, #32]
}
 80052ee:	bf00      	nop
 80052f0:	e7fe      	b.n	80052f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80052f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10a      	bne.n	800530e <xTaskCreateStatic+0x46>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	61fb      	str	r3, [r7, #28]
}
 800530a:	bf00      	nop
 800530c:	e7fe      	b.n	800530c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800530e:	23bc      	movs	r3, #188	; 0xbc
 8005310:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	2bbc      	cmp	r3, #188	; 0xbc
 8005316:	d00a      	beq.n	800532e <xTaskCreateStatic+0x66>
	__asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	61bb      	str	r3, [r7, #24]
}
 800532a:	bf00      	nop
 800532c:	e7fe      	b.n	800532c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800532e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005332:	2b00      	cmp	r3, #0
 8005334:	d01e      	beq.n	8005374 <xTaskCreateStatic+0xac>
 8005336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01b      	beq.n	8005374 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800533c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005344:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	2202      	movs	r2, #2
 800534a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800534e:	2300      	movs	r3, #0
 8005350:	9303      	str	r3, [sp, #12]
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	9302      	str	r3, [sp, #8]
 8005356:	f107 0314 	add.w	r3, r7, #20
 800535a:	9301      	str	r3, [sp, #4]
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	68b9      	ldr	r1, [r7, #8]
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f000 f850 	bl	800540c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800536c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800536e:	f000 f8f3 	bl	8005558 <prvAddNewTaskToReadyList>
 8005372:	e001      	b.n	8005378 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005374:	2300      	movs	r3, #0
 8005376:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005378:	697b      	ldr	r3, [r7, #20]
	}
 800537a:	4618      	mov	r0, r3
 800537c:	3728      	adds	r7, #40	; 0x28
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005382:	b580      	push	{r7, lr}
 8005384:	b08c      	sub	sp, #48	; 0x30
 8005386:	af04      	add	r7, sp, #16
 8005388:	60f8      	str	r0, [r7, #12]
 800538a:	60b9      	str	r1, [r7, #8]
 800538c:	603b      	str	r3, [r7, #0]
 800538e:	4613      	mov	r3, r2
 8005390:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4618      	mov	r0, r3
 8005398:	f001 fcde 	bl	8006d58 <pvPortMalloc>
 800539c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00e      	beq.n	80053c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053a4:	20bc      	movs	r0, #188	; 0xbc
 80053a6:	f001 fcd7 	bl	8006d58 <pvPortMalloc>
 80053aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
 80053b8:	e005      	b.n	80053c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80053ba:	6978      	ldr	r0, [r7, #20]
 80053bc:	f001 fd98 	bl	8006ef0 <vPortFree>
 80053c0:	e001      	b.n	80053c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d017      	beq.n	80053fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80053d4:	88fa      	ldrh	r2, [r7, #6]
 80053d6:	2300      	movs	r3, #0
 80053d8:	9303      	str	r3, [sp, #12]
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	9302      	str	r3, [sp, #8]
 80053de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e0:	9301      	str	r3, [sp, #4]
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 f80e 	bl	800540c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053f0:	69f8      	ldr	r0, [r7, #28]
 80053f2:	f000 f8b1 	bl	8005558 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80053f6:	2301      	movs	r3, #1
 80053f8:	61bb      	str	r3, [r7, #24]
 80053fa:	e002      	b.n	8005402 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005400:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005402:	69bb      	ldr	r3, [r7, #24]
	}
 8005404:	4618      	mov	r0, r3
 8005406:	3720      	adds	r7, #32
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800541a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	461a      	mov	r2, r3
 8005424:	21a5      	movs	r1, #165	; 0xa5
 8005426:	f001 febb 	bl	80071a0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005434:	3b01      	subs	r3, #1
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	f023 0307 	bic.w	r3, r3, #7
 8005442:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <prvInitialiseNewTask+0x58>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	617b      	str	r3, [r7, #20]
}
 8005460:	bf00      	nop
 8005462:	e7fe      	b.n	8005462 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d01f      	beq.n	80054aa <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800546a:	2300      	movs	r3, #0
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	e012      	b.n	8005496 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	4413      	add	r3, r2
 8005476:	7819      	ldrb	r1, [r3, #0]
 8005478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	4413      	add	r3, r2
 800547e:	3334      	adds	r3, #52	; 0x34
 8005480:	460a      	mov	r2, r1
 8005482:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d006      	beq.n	800549e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	3301      	adds	r3, #1
 8005494:	61fb      	str	r3, [r7, #28]
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	2b0f      	cmp	r3, #15
 800549a:	d9e9      	bls.n	8005470 <prvInitialiseNewTask+0x64>
 800549c:	e000      	b.n	80054a0 <prvInitialiseNewTask+0x94>
			{
				break;
 800549e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054a8:	e003      	b.n	80054b2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b4:	2b37      	cmp	r3, #55	; 0x37
 80054b6:	d901      	bls.n	80054bc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054b8:	2337      	movs	r3, #55	; 0x37
 80054ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80054bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054c6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	2200      	movs	r2, #0
 80054cc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80054ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d0:	3304      	adds	r3, #4
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7ff f978 	bl	80047c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80054d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054da:	3318      	adds	r3, #24
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff f973 	bl	80047c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80054f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005502:	2200      	movs	r2, #0
 8005504:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	3354      	adds	r3, #84	; 0x54
 800550c:	2260      	movs	r2, #96	; 0x60
 800550e:	2100      	movs	r1, #0
 8005510:	4618      	mov	r0, r3
 8005512:	f001 fe45 	bl	80071a0 <memset>
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	4a0c      	ldr	r2, [pc, #48]	; (800554c <prvInitialiseNewTask+0x140>)
 800551a:	659a      	str	r2, [r3, #88]	; 0x58
 800551c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551e:	4a0c      	ldr	r2, [pc, #48]	; (8005550 <prvInitialiseNewTask+0x144>)
 8005520:	65da      	str	r2, [r3, #92]	; 0x5c
 8005522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005524:	4a0b      	ldr	r2, [pc, #44]	; (8005554 <prvInitialiseNewTask+0x148>)
 8005526:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	68f9      	ldr	r1, [r7, #12]
 800552c:	69b8      	ldr	r0, [r7, #24]
 800552e:	f001 f9c7 	bl	80068c0 <pxPortInitialiseStack>
 8005532:	4602      	mov	r2, r0
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005542:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005544:	bf00      	nop
 8005546:	3720      	adds	r7, #32
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	08007c10 	.word	0x08007c10
 8005550:	08007c30 	.word	0x08007c30
 8005554:	08007bf0 	.word	0x08007bf0

08005558 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005560:	f001 fad8 	bl	8006b14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005564:	4b2d      	ldr	r3, [pc, #180]	; (800561c <prvAddNewTaskToReadyList+0xc4>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	3301      	adds	r3, #1
 800556a:	4a2c      	ldr	r2, [pc, #176]	; (800561c <prvAddNewTaskToReadyList+0xc4>)
 800556c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800556e:	4b2c      	ldr	r3, [pc, #176]	; (8005620 <prvAddNewTaskToReadyList+0xc8>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d109      	bne.n	800558a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005576:	4a2a      	ldr	r2, [pc, #168]	; (8005620 <prvAddNewTaskToReadyList+0xc8>)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800557c:	4b27      	ldr	r3, [pc, #156]	; (800561c <prvAddNewTaskToReadyList+0xc4>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d110      	bne.n	80055a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005584:	f000 fc9c 	bl	8005ec0 <prvInitialiseTaskLists>
 8005588:	e00d      	b.n	80055a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800558a:	4b26      	ldr	r3, [pc, #152]	; (8005624 <prvAddNewTaskToReadyList+0xcc>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d109      	bne.n	80055a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005592:	4b23      	ldr	r3, [pc, #140]	; (8005620 <prvAddNewTaskToReadyList+0xc8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559c:	429a      	cmp	r2, r3
 800559e:	d802      	bhi.n	80055a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055a0:	4a1f      	ldr	r2, [pc, #124]	; (8005620 <prvAddNewTaskToReadyList+0xc8>)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055a6:	4b20      	ldr	r3, [pc, #128]	; (8005628 <prvAddNewTaskToReadyList+0xd0>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3301      	adds	r3, #1
 80055ac:	4a1e      	ldr	r2, [pc, #120]	; (8005628 <prvAddNewTaskToReadyList+0xd0>)
 80055ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80055b0:	4b1d      	ldr	r3, [pc, #116]	; (8005628 <prvAddNewTaskToReadyList+0xd0>)
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055bc:	4b1b      	ldr	r3, [pc, #108]	; (800562c <prvAddNewTaskToReadyList+0xd4>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d903      	bls.n	80055cc <prvAddNewTaskToReadyList+0x74>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c8:	4a18      	ldr	r2, [pc, #96]	; (800562c <prvAddNewTaskToReadyList+0xd4>)
 80055ca:	6013      	str	r3, [r2, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d0:	4613      	mov	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4a15      	ldr	r2, [pc, #84]	; (8005630 <prvAddNewTaskToReadyList+0xd8>)
 80055da:	441a      	add	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	3304      	adds	r3, #4
 80055e0:	4619      	mov	r1, r3
 80055e2:	4610      	mov	r0, r2
 80055e4:	f7ff f8fd 	bl	80047e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055e8:	f001 fac4 	bl	8006b74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055ec:	4b0d      	ldr	r3, [pc, #52]	; (8005624 <prvAddNewTaskToReadyList+0xcc>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00e      	beq.n	8005612 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055f4:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <prvAddNewTaskToReadyList+0xc8>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fe:	429a      	cmp	r2, r3
 8005600:	d207      	bcs.n	8005612 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005602:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <prvAddNewTaskToReadyList+0xdc>)
 8005604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005612:	bf00      	nop
 8005614:	3708      	adds	r7, #8
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	20000ce8 	.word	0x20000ce8
 8005620:	20000814 	.word	0x20000814
 8005624:	20000cf4 	.word	0x20000cf4
 8005628:	20000d04 	.word	0x20000d04
 800562c:	20000cf0 	.word	0x20000cf0
 8005630:	20000818 	.word	0x20000818
 8005634:	e000ed04 	.word	0xe000ed04

08005638 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005640:	2300      	movs	r3, #0
 8005642:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d017      	beq.n	800567a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800564a:	4b13      	ldr	r3, [pc, #76]	; (8005698 <vTaskDelay+0x60>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <vTaskDelay+0x30>
	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	60bb      	str	r3, [r7, #8]
}
 8005664:	bf00      	nop
 8005666:	e7fe      	b.n	8005666 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005668:	f000 f900 	bl	800586c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800566c:	2100      	movs	r1, #0
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 fd84 	bl	800617c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005674:	f000 f908 	bl	8005888 <xTaskResumeAll>
 8005678:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d107      	bne.n	8005690 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005680:	4b06      	ldr	r3, [pc, #24]	; (800569c <vTaskDelay+0x64>)
 8005682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005690:	bf00      	nop
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	20000d10 	.word	0x20000d10
 800569c:	e000ed04 	.word	0xe000ed04

080056a0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80056a8:	f001 fa34 	bl	8006b14 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d102      	bne.n	80056b8 <vTaskSuspend+0x18>
 80056b2:	4b30      	ldr	r3, [pc, #192]	; (8005774 <vTaskSuspend+0xd4>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	e000      	b.n	80056ba <vTaskSuspend+0x1a>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	3304      	adds	r3, #4
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff f8eb 	bl	800489c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d004      	beq.n	80056d8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3318      	adds	r3, #24
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff f8e2 	bl	800489c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	3304      	adds	r3, #4
 80056dc:	4619      	mov	r1, r3
 80056de:	4826      	ldr	r0, [pc, #152]	; (8005778 <vTaskSuspend+0xd8>)
 80056e0:	f7ff f87f 	bl	80047e2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d103      	bne.n	80056f8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80056f8:	f001 fa3c 	bl	8006b74 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80056fc:	4b1f      	ldr	r3, [pc, #124]	; (800577c <vTaskSuspend+0xdc>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8005704:	f001 fa06 	bl	8006b14 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8005708:	f000 fc7c 	bl	8006004 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800570c:	f001 fa32 	bl	8006b74 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8005710:	4b18      	ldr	r3, [pc, #96]	; (8005774 <vTaskSuspend+0xd4>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	429a      	cmp	r2, r3
 8005718:	d127      	bne.n	800576a <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800571a:	4b18      	ldr	r3, [pc, #96]	; (800577c <vTaskSuspend+0xdc>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d017      	beq.n	8005752 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8005722:	4b17      	ldr	r3, [pc, #92]	; (8005780 <vTaskSuspend+0xe0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <vTaskSuspend+0xa0>
	__asm volatile
 800572a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572e:	f383 8811 	msr	BASEPRI, r3
 8005732:	f3bf 8f6f 	isb	sy
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	60bb      	str	r3, [r7, #8]
}
 800573c:	bf00      	nop
 800573e:	e7fe      	b.n	800573e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8005740:	4b10      	ldr	r3, [pc, #64]	; (8005784 <vTaskSuspend+0xe4>)
 8005742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005750:	e00b      	b.n	800576a <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005752:	4b09      	ldr	r3, [pc, #36]	; (8005778 <vTaskSuspend+0xd8>)
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	4b0c      	ldr	r3, [pc, #48]	; (8005788 <vTaskSuspend+0xe8>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	429a      	cmp	r2, r3
 800575c:	d103      	bne.n	8005766 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800575e:	4b05      	ldr	r3, [pc, #20]	; (8005774 <vTaskSuspend+0xd4>)
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]
	}
 8005764:	e001      	b.n	800576a <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8005766:	f000 f9f7 	bl	8005b58 <vTaskSwitchContext>
	}
 800576a:	bf00      	nop
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000814 	.word	0x20000814
 8005778:	20000cd4 	.word	0x20000cd4
 800577c:	20000cf4 	.word	0x20000cf4
 8005780:	20000d10 	.word	0x20000d10
 8005784:	e000ed04 	.word	0xe000ed04
 8005788:	20000ce8 	.word	0x20000ce8

0800578c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b08a      	sub	sp, #40	; 0x28
 8005790:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005792:	2300      	movs	r3, #0
 8005794:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005796:	2300      	movs	r3, #0
 8005798:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800579a:	463a      	mov	r2, r7
 800579c:	1d39      	adds	r1, r7, #4
 800579e:	f107 0308 	add.w	r3, r7, #8
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fe ffbc 	bl	8004720 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80057a8:	6839      	ldr	r1, [r7, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	9202      	str	r2, [sp, #8]
 80057b0:	9301      	str	r3, [sp, #4]
 80057b2:	2300      	movs	r3, #0
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	2300      	movs	r3, #0
 80057b8:	460a      	mov	r2, r1
 80057ba:	4924      	ldr	r1, [pc, #144]	; (800584c <vTaskStartScheduler+0xc0>)
 80057bc:	4824      	ldr	r0, [pc, #144]	; (8005850 <vTaskStartScheduler+0xc4>)
 80057be:	f7ff fd83 	bl	80052c8 <xTaskCreateStatic>
 80057c2:	4603      	mov	r3, r0
 80057c4:	4a23      	ldr	r2, [pc, #140]	; (8005854 <vTaskStartScheduler+0xc8>)
 80057c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80057c8:	4b22      	ldr	r3, [pc, #136]	; (8005854 <vTaskStartScheduler+0xc8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80057d0:	2301      	movs	r3, #1
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	e001      	b.n	80057da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d102      	bne.n	80057e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80057e0:	f000 fd20 	bl	8006224 <xTimerCreateTimerTask>
 80057e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d11b      	bne.n	8005824 <vTaskStartScheduler+0x98>
	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	613b      	str	r3, [r7, #16]
}
 80057fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005800:	4b15      	ldr	r3, [pc, #84]	; (8005858 <vTaskStartScheduler+0xcc>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3354      	adds	r3, #84	; 0x54
 8005806:	4a15      	ldr	r2, [pc, #84]	; (800585c <vTaskStartScheduler+0xd0>)
 8005808:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800580a:	4b15      	ldr	r3, [pc, #84]	; (8005860 <vTaskStartScheduler+0xd4>)
 800580c:	f04f 32ff 	mov.w	r2, #4294967295
 8005810:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005812:	4b14      	ldr	r3, [pc, #80]	; (8005864 <vTaskStartScheduler+0xd8>)
 8005814:	2201      	movs	r2, #1
 8005816:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005818:	4b13      	ldr	r3, [pc, #76]	; (8005868 <vTaskStartScheduler+0xdc>)
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800581e:	f001 f8d7 	bl	80069d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005822:	e00e      	b.n	8005842 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582a:	d10a      	bne.n	8005842 <vTaskStartScheduler+0xb6>
	__asm volatile
 800582c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	60fb      	str	r3, [r7, #12]
}
 800583e:	bf00      	nop
 8005840:	e7fe      	b.n	8005840 <vTaskStartScheduler+0xb4>
}
 8005842:	bf00      	nop
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	08007b78 	.word	0x08007b78
 8005850:	08005e91 	.word	0x08005e91
 8005854:	20000d0c 	.word	0x20000d0c
 8005858:	20000814 	.word	0x20000814
 800585c:	20000010 	.word	0x20000010
 8005860:	20000d08 	.word	0x20000d08
 8005864:	20000cf4 	.word	0x20000cf4
 8005868:	20000cec 	.word	0x20000cec

0800586c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005870:	4b04      	ldr	r3, [pc, #16]	; (8005884 <vTaskSuspendAll+0x18>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3301      	adds	r3, #1
 8005876:	4a03      	ldr	r2, [pc, #12]	; (8005884 <vTaskSuspendAll+0x18>)
 8005878:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800587a:	bf00      	nop
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	20000d10 	.word	0x20000d10

08005888 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005892:	2300      	movs	r3, #0
 8005894:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005896:	4b42      	ldr	r3, [pc, #264]	; (80059a0 <xTaskResumeAll+0x118>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10a      	bne.n	80058b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	603b      	str	r3, [r7, #0]
}
 80058b0:	bf00      	nop
 80058b2:	e7fe      	b.n	80058b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80058b4:	f001 f92e 	bl	8006b14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80058b8:	4b39      	ldr	r3, [pc, #228]	; (80059a0 <xTaskResumeAll+0x118>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3b01      	subs	r3, #1
 80058be:	4a38      	ldr	r2, [pc, #224]	; (80059a0 <xTaskResumeAll+0x118>)
 80058c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058c2:	4b37      	ldr	r3, [pc, #220]	; (80059a0 <xTaskResumeAll+0x118>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d162      	bne.n	8005990 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80058ca:	4b36      	ldr	r3, [pc, #216]	; (80059a4 <xTaskResumeAll+0x11c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d05e      	beq.n	8005990 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058d2:	e02f      	b.n	8005934 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058d4:	4b34      	ldr	r3, [pc, #208]	; (80059a8 <xTaskResumeAll+0x120>)
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3318      	adds	r3, #24
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7fe ffdb 	bl	800489c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	3304      	adds	r3, #4
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe ffd6 	bl	800489c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f4:	4b2d      	ldr	r3, [pc, #180]	; (80059ac <xTaskResumeAll+0x124>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d903      	bls.n	8005904 <xTaskResumeAll+0x7c>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005900:	4a2a      	ldr	r2, [pc, #168]	; (80059ac <xTaskResumeAll+0x124>)
 8005902:	6013      	str	r3, [r2, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005908:	4613      	mov	r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4a27      	ldr	r2, [pc, #156]	; (80059b0 <xTaskResumeAll+0x128>)
 8005912:	441a      	add	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	3304      	adds	r3, #4
 8005918:	4619      	mov	r1, r3
 800591a:	4610      	mov	r0, r2
 800591c:	f7fe ff61 	bl	80047e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005924:	4b23      	ldr	r3, [pc, #140]	; (80059b4 <xTaskResumeAll+0x12c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	429a      	cmp	r2, r3
 800592c:	d302      	bcc.n	8005934 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800592e:	4b22      	ldr	r3, [pc, #136]	; (80059b8 <xTaskResumeAll+0x130>)
 8005930:	2201      	movs	r2, #1
 8005932:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005934:	4b1c      	ldr	r3, [pc, #112]	; (80059a8 <xTaskResumeAll+0x120>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1cb      	bne.n	80058d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005942:	f000 fb5f 	bl	8006004 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005946:	4b1d      	ldr	r3, [pc, #116]	; (80059bc <xTaskResumeAll+0x134>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d010      	beq.n	8005974 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005952:	f000 f847 	bl	80059e4 <xTaskIncrementTick>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d002      	beq.n	8005962 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800595c:	4b16      	ldr	r3, [pc, #88]	; (80059b8 <xTaskResumeAll+0x130>)
 800595e:	2201      	movs	r2, #1
 8005960:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3b01      	subs	r3, #1
 8005966:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1f1      	bne.n	8005952 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800596e:	4b13      	ldr	r3, [pc, #76]	; (80059bc <xTaskResumeAll+0x134>)
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005974:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <xTaskResumeAll+0x130>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d009      	beq.n	8005990 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800597c:	2301      	movs	r3, #1
 800597e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005980:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <xTaskResumeAll+0x138>)
 8005982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005986:	601a      	str	r2, [r3, #0]
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005990:	f001 f8f0 	bl	8006b74 <vPortExitCritical>

	return xAlreadyYielded;
 8005994:	68bb      	ldr	r3, [r7, #8]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20000d10 	.word	0x20000d10
 80059a4:	20000ce8 	.word	0x20000ce8
 80059a8:	20000ca8 	.word	0x20000ca8
 80059ac:	20000cf0 	.word	0x20000cf0
 80059b0:	20000818 	.word	0x20000818
 80059b4:	20000814 	.word	0x20000814
 80059b8:	20000cfc 	.word	0x20000cfc
 80059bc:	20000cf8 	.word	0x20000cf8
 80059c0:	e000ed04 	.word	0xe000ed04

080059c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80059ca:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <xTaskGetTickCount+0x1c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80059d0:	687b      	ldr	r3, [r7, #4]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	370c      	adds	r7, #12
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	20000cec 	.word	0x20000cec

080059e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059ea:	2300      	movs	r3, #0
 80059ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059ee:	4b4f      	ldr	r3, [pc, #316]	; (8005b2c <xTaskIncrementTick+0x148>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f040 808f 	bne.w	8005b16 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059f8:	4b4d      	ldr	r3, [pc, #308]	; (8005b30 <xTaskIncrementTick+0x14c>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3301      	adds	r3, #1
 80059fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a00:	4a4b      	ldr	r2, [pc, #300]	; (8005b30 <xTaskIncrementTick+0x14c>)
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d120      	bne.n	8005a4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a0c:	4b49      	ldr	r3, [pc, #292]	; (8005b34 <xTaskIncrementTick+0x150>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <xTaskIncrementTick+0x48>
	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	603b      	str	r3, [r7, #0]
}
 8005a28:	bf00      	nop
 8005a2a:	e7fe      	b.n	8005a2a <xTaskIncrementTick+0x46>
 8005a2c:	4b41      	ldr	r3, [pc, #260]	; (8005b34 <xTaskIncrementTick+0x150>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	60fb      	str	r3, [r7, #12]
 8005a32:	4b41      	ldr	r3, [pc, #260]	; (8005b38 <xTaskIncrementTick+0x154>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a3f      	ldr	r2, [pc, #252]	; (8005b34 <xTaskIncrementTick+0x150>)
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	4a3f      	ldr	r2, [pc, #252]	; (8005b38 <xTaskIncrementTick+0x154>)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6013      	str	r3, [r2, #0]
 8005a40:	4b3e      	ldr	r3, [pc, #248]	; (8005b3c <xTaskIncrementTick+0x158>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3301      	adds	r3, #1
 8005a46:	4a3d      	ldr	r2, [pc, #244]	; (8005b3c <xTaskIncrementTick+0x158>)
 8005a48:	6013      	str	r3, [r2, #0]
 8005a4a:	f000 fadb 	bl	8006004 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a4e:	4b3c      	ldr	r3, [pc, #240]	; (8005b40 <xTaskIncrementTick+0x15c>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d349      	bcc.n	8005aec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a58:	4b36      	ldr	r3, [pc, #216]	; (8005b34 <xTaskIncrementTick+0x150>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d104      	bne.n	8005a6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a62:	4b37      	ldr	r3, [pc, #220]	; (8005b40 <xTaskIncrementTick+0x15c>)
 8005a64:	f04f 32ff 	mov.w	r2, #4294967295
 8005a68:	601a      	str	r2, [r3, #0]
					break;
 8005a6a:	e03f      	b.n	8005aec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a6c:	4b31      	ldr	r3, [pc, #196]	; (8005b34 <xTaskIncrementTick+0x150>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d203      	bcs.n	8005a8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a84:	4a2e      	ldr	r2, [pc, #184]	; (8005b40 <xTaskIncrementTick+0x15c>)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a8a:	e02f      	b.n	8005aec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	3304      	adds	r3, #4
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fe ff03 	bl	800489c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d004      	beq.n	8005aa8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	3318      	adds	r3, #24
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fe fefa 	bl	800489c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aac:	4b25      	ldr	r3, [pc, #148]	; (8005b44 <xTaskIncrementTick+0x160>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d903      	bls.n	8005abc <xTaskIncrementTick+0xd8>
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	4a22      	ldr	r2, [pc, #136]	; (8005b44 <xTaskIncrementTick+0x160>)
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4a1f      	ldr	r2, [pc, #124]	; (8005b48 <xTaskIncrementTick+0x164>)
 8005aca:	441a      	add	r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	3304      	adds	r3, #4
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	f7fe fe85 	bl	80047e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005adc:	4b1b      	ldr	r3, [pc, #108]	; (8005b4c <xTaskIncrementTick+0x168>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d3b8      	bcc.n	8005a58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005aea:	e7b5      	b.n	8005a58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005aec:	4b17      	ldr	r3, [pc, #92]	; (8005b4c <xTaskIncrementTick+0x168>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af2:	4915      	ldr	r1, [pc, #84]	; (8005b48 <xTaskIncrementTick+0x164>)
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d901      	bls.n	8005b08 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005b04:	2301      	movs	r3, #1
 8005b06:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b08:	4b11      	ldr	r3, [pc, #68]	; (8005b50 <xTaskIncrementTick+0x16c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d007      	beq.n	8005b20 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005b10:	2301      	movs	r3, #1
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	e004      	b.n	8005b20 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b16:	4b0f      	ldr	r3, [pc, #60]	; (8005b54 <xTaskIncrementTick+0x170>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	4a0d      	ldr	r2, [pc, #52]	; (8005b54 <xTaskIncrementTick+0x170>)
 8005b1e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b20:	697b      	ldr	r3, [r7, #20]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3718      	adds	r7, #24
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20000d10 	.word	0x20000d10
 8005b30:	20000cec 	.word	0x20000cec
 8005b34:	20000ca0 	.word	0x20000ca0
 8005b38:	20000ca4 	.word	0x20000ca4
 8005b3c:	20000d00 	.word	0x20000d00
 8005b40:	20000d08 	.word	0x20000d08
 8005b44:	20000cf0 	.word	0x20000cf0
 8005b48:	20000818 	.word	0x20000818
 8005b4c:	20000814 	.word	0x20000814
 8005b50:	20000cfc 	.word	0x20000cfc
 8005b54:	20000cf8 	.word	0x20000cf8

08005b58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b5e:	4b2a      	ldr	r3, [pc, #168]	; (8005c08 <vTaskSwitchContext+0xb0>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b66:	4b29      	ldr	r3, [pc, #164]	; (8005c0c <vTaskSwitchContext+0xb4>)
 8005b68:	2201      	movs	r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b6c:	e046      	b.n	8005bfc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005b6e:	4b27      	ldr	r3, [pc, #156]	; (8005c0c <vTaskSwitchContext+0xb4>)
 8005b70:	2200      	movs	r2, #0
 8005b72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b74:	4b26      	ldr	r3, [pc, #152]	; (8005c10 <vTaskSwitchContext+0xb8>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	60fb      	str	r3, [r7, #12]
 8005b7a:	e010      	b.n	8005b9e <vTaskSwitchContext+0x46>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10a      	bne.n	8005b98 <vTaskSwitchContext+0x40>
	__asm volatile
 8005b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	607b      	str	r3, [r7, #4]
}
 8005b94:	bf00      	nop
 8005b96:	e7fe      	b.n	8005b96 <vTaskSwitchContext+0x3e>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	491d      	ldr	r1, [pc, #116]	; (8005c14 <vTaskSwitchContext+0xbc>)
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	440b      	add	r3, r1
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0e4      	beq.n	8005b7c <vTaskSwitchContext+0x24>
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4a15      	ldr	r2, [pc, #84]	; (8005c14 <vTaskSwitchContext+0xbc>)
 8005bbe:	4413      	add	r3, r2
 8005bc0:	60bb      	str	r3, [r7, #8]
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	605a      	str	r2, [r3, #4]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d104      	bne.n	8005be2 <vTaskSwitchContext+0x8a>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	605a      	str	r2, [r3, #4]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	4a0b      	ldr	r2, [pc, #44]	; (8005c18 <vTaskSwitchContext+0xc0>)
 8005bea:	6013      	str	r3, [r2, #0]
 8005bec:	4a08      	ldr	r2, [pc, #32]	; (8005c10 <vTaskSwitchContext+0xb8>)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bf2:	4b09      	ldr	r3, [pc, #36]	; (8005c18 <vTaskSwitchContext+0xc0>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3354      	adds	r3, #84	; 0x54
 8005bf8:	4a08      	ldr	r2, [pc, #32]	; (8005c1c <vTaskSwitchContext+0xc4>)
 8005bfa:	6013      	str	r3, [r2, #0]
}
 8005bfc:	bf00      	nop
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	20000d10 	.word	0x20000d10
 8005c0c:	20000cfc 	.word	0x20000cfc
 8005c10:	20000cf0 	.word	0x20000cf0
 8005c14:	20000818 	.word	0x20000818
 8005c18:	20000814 	.word	0x20000814
 8005c1c:	20000010 	.word	0x20000010

08005c20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10a      	bne.n	8005c46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	60fb      	str	r3, [r7, #12]
}
 8005c42:	bf00      	nop
 8005c44:	e7fe      	b.n	8005c44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c46:	4b07      	ldr	r3, [pc, #28]	; (8005c64 <vTaskPlaceOnEventList+0x44>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3318      	adds	r3, #24
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fe fdeb 	bl	800482a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c54:	2101      	movs	r1, #1
 8005c56:	6838      	ldr	r0, [r7, #0]
 8005c58:	f000 fa90 	bl	800617c <prvAddCurrentTaskToDelayedList>
}
 8005c5c:	bf00      	nop
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	20000814 	.word	0x20000814

08005c68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10a      	bne.n	8005c90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	617b      	str	r3, [r7, #20]
}
 8005c8c:	bf00      	nop
 8005c8e:	e7fe      	b.n	8005c8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c90:	4b0a      	ldr	r3, [pc, #40]	; (8005cbc <vTaskPlaceOnEventListRestricted+0x54>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3318      	adds	r3, #24
 8005c96:	4619      	mov	r1, r3
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f7fe fda2 	bl	80047e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005caa:	6879      	ldr	r1, [r7, #4]
 8005cac:	68b8      	ldr	r0, [r7, #8]
 8005cae:	f000 fa65 	bl	800617c <prvAddCurrentTaskToDelayedList>
	}
 8005cb2:	bf00      	nop
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	20000814 	.word	0x20000814

08005cc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10a      	bne.n	8005cec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cda:	f383 8811 	msr	BASEPRI, r3
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	60fb      	str	r3, [r7, #12]
}
 8005ce8:	bf00      	nop
 8005cea:	e7fe      	b.n	8005cea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	3318      	adds	r3, #24
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7fe fdd3 	bl	800489c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cf6:	4b1e      	ldr	r3, [pc, #120]	; (8005d70 <xTaskRemoveFromEventList+0xb0>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d11d      	bne.n	8005d3a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	3304      	adds	r3, #4
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fe fdca 	bl	800489c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0c:	4b19      	ldr	r3, [pc, #100]	; (8005d74 <xTaskRemoveFromEventList+0xb4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d903      	bls.n	8005d1c <xTaskRemoveFromEventList+0x5c>
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	4a16      	ldr	r2, [pc, #88]	; (8005d74 <xTaskRemoveFromEventList+0xb4>)
 8005d1a:	6013      	str	r3, [r2, #0]
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d20:	4613      	mov	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4a13      	ldr	r2, [pc, #76]	; (8005d78 <xTaskRemoveFromEventList+0xb8>)
 8005d2a:	441a      	add	r2, r3
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	4619      	mov	r1, r3
 8005d32:	4610      	mov	r0, r2
 8005d34:	f7fe fd55 	bl	80047e2 <vListInsertEnd>
 8005d38:	e005      	b.n	8005d46 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	3318      	adds	r3, #24
 8005d3e:	4619      	mov	r1, r3
 8005d40:	480e      	ldr	r0, [pc, #56]	; (8005d7c <xTaskRemoveFromEventList+0xbc>)
 8005d42:	f7fe fd4e 	bl	80047e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4a:	4b0d      	ldr	r3, [pc, #52]	; (8005d80 <xTaskRemoveFromEventList+0xc0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d905      	bls.n	8005d60 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d54:	2301      	movs	r3, #1
 8005d56:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d58:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <xTaskRemoveFromEventList+0xc4>)
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	e001      	b.n	8005d64 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d64:	697b      	ldr	r3, [r7, #20]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000d10 	.word	0x20000d10
 8005d74:	20000cf0 	.word	0x20000cf0
 8005d78:	20000818 	.word	0x20000818
 8005d7c:	20000ca8 	.word	0x20000ca8
 8005d80:	20000814 	.word	0x20000814
 8005d84:	20000cfc 	.word	0x20000cfc

08005d88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d90:	4b06      	ldr	r3, [pc, #24]	; (8005dac <vTaskInternalSetTimeOutState+0x24>)
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <vTaskInternalSetTimeOutState+0x28>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	605a      	str	r2, [r3, #4]
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	20000d00 	.word	0x20000d00
 8005db0:	20000cec 	.word	0x20000cec

08005db4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b088      	sub	sp, #32
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10a      	bne.n	8005dda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	613b      	str	r3, [r7, #16]
}
 8005dd6:	bf00      	nop
 8005dd8:	e7fe      	b.n	8005dd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	60fb      	str	r3, [r7, #12]
}
 8005df2:	bf00      	nop
 8005df4:	e7fe      	b.n	8005df4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005df6:	f000 fe8d 	bl	8006b14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005dfa:	4b1d      	ldr	r3, [pc, #116]	; (8005e70 <xTaskCheckForTimeOut+0xbc>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e12:	d102      	bne.n	8005e1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e14:	2300      	movs	r3, #0
 8005e16:	61fb      	str	r3, [r7, #28]
 8005e18:	e023      	b.n	8005e62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	4b15      	ldr	r3, [pc, #84]	; (8005e74 <xTaskCheckForTimeOut+0xc0>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d007      	beq.n	8005e36 <xTaskCheckForTimeOut+0x82>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d302      	bcc.n	8005e36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e30:	2301      	movs	r3, #1
 8005e32:	61fb      	str	r3, [r7, #28]
 8005e34:	e015      	b.n	8005e62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d20b      	bcs.n	8005e58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	1ad2      	subs	r2, r2, r3
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff ff9b 	bl	8005d88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e52:	2300      	movs	r3, #0
 8005e54:	61fb      	str	r3, [r7, #28]
 8005e56:	e004      	b.n	8005e62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e62:	f000 fe87 	bl	8006b74 <vPortExitCritical>

	return xReturn;
 8005e66:	69fb      	ldr	r3, [r7, #28]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3720      	adds	r7, #32
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	20000cec 	.word	0x20000cec
 8005e74:	20000d00 	.word	0x20000d00

08005e78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e78:	b480      	push	{r7}
 8005e7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e7c:	4b03      	ldr	r3, [pc, #12]	; (8005e8c <vTaskMissedYield+0x14>)
 8005e7e:	2201      	movs	r2, #1
 8005e80:	601a      	str	r2, [r3, #0]
}
 8005e82:	bf00      	nop
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	20000cfc 	.word	0x20000cfc

08005e90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e98:	f000 f852 	bl	8005f40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e9c:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <prvIdleTask+0x28>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d9f9      	bls.n	8005e98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ea4:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <prvIdleTask+0x2c>)
 8005ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005eb4:	e7f0      	b.n	8005e98 <prvIdleTask+0x8>
 8005eb6:	bf00      	nop
 8005eb8:	20000818 	.word	0x20000818
 8005ebc:	e000ed04 	.word	0xe000ed04

08005ec0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	607b      	str	r3, [r7, #4]
 8005eca:	e00c      	b.n	8005ee6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4a12      	ldr	r2, [pc, #72]	; (8005f20 <prvInitialiseTaskLists+0x60>)
 8005ed8:	4413      	add	r3, r2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fe fc54 	bl	8004788 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	607b      	str	r3, [r7, #4]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b37      	cmp	r3, #55	; 0x37
 8005eea:	d9ef      	bls.n	8005ecc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005eec:	480d      	ldr	r0, [pc, #52]	; (8005f24 <prvInitialiseTaskLists+0x64>)
 8005eee:	f7fe fc4b 	bl	8004788 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ef2:	480d      	ldr	r0, [pc, #52]	; (8005f28 <prvInitialiseTaskLists+0x68>)
 8005ef4:	f7fe fc48 	bl	8004788 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ef8:	480c      	ldr	r0, [pc, #48]	; (8005f2c <prvInitialiseTaskLists+0x6c>)
 8005efa:	f7fe fc45 	bl	8004788 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005efe:	480c      	ldr	r0, [pc, #48]	; (8005f30 <prvInitialiseTaskLists+0x70>)
 8005f00:	f7fe fc42 	bl	8004788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f04:	480b      	ldr	r0, [pc, #44]	; (8005f34 <prvInitialiseTaskLists+0x74>)
 8005f06:	f7fe fc3f 	bl	8004788 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f0a:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <prvInitialiseTaskLists+0x78>)
 8005f0c:	4a05      	ldr	r2, [pc, #20]	; (8005f24 <prvInitialiseTaskLists+0x64>)
 8005f0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <prvInitialiseTaskLists+0x7c>)
 8005f12:	4a05      	ldr	r2, [pc, #20]	; (8005f28 <prvInitialiseTaskLists+0x68>)
 8005f14:	601a      	str	r2, [r3, #0]
}
 8005f16:	bf00      	nop
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000818 	.word	0x20000818
 8005f24:	20000c78 	.word	0x20000c78
 8005f28:	20000c8c 	.word	0x20000c8c
 8005f2c:	20000ca8 	.word	0x20000ca8
 8005f30:	20000cbc 	.word	0x20000cbc
 8005f34:	20000cd4 	.word	0x20000cd4
 8005f38:	20000ca0 	.word	0x20000ca0
 8005f3c:	20000ca4 	.word	0x20000ca4

08005f40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f46:	e019      	b.n	8005f7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f48:	f000 fde4 	bl	8006b14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f4c:	4b10      	ldr	r3, [pc, #64]	; (8005f90 <prvCheckTasksWaitingTermination+0x50>)
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3304      	adds	r3, #4
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fe fc9f 	bl	800489c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f5e:	4b0d      	ldr	r3, [pc, #52]	; (8005f94 <prvCheckTasksWaitingTermination+0x54>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	4a0b      	ldr	r2, [pc, #44]	; (8005f94 <prvCheckTasksWaitingTermination+0x54>)
 8005f66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f68:	4b0b      	ldr	r3, [pc, #44]	; (8005f98 <prvCheckTasksWaitingTermination+0x58>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	4a0a      	ldr	r2, [pc, #40]	; (8005f98 <prvCheckTasksWaitingTermination+0x58>)
 8005f70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f72:	f000 fdff 	bl	8006b74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f810 	bl	8005f9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f7c:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <prvCheckTasksWaitingTermination+0x58>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e1      	bne.n	8005f48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000cbc 	.word	0x20000cbc
 8005f94:	20000ce8 	.word	0x20000ce8
 8005f98:	20000cd0 	.word	0x20000cd0

08005f9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	3354      	adds	r3, #84	; 0x54
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f001 f969 	bl	8007280 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d108      	bne.n	8005fca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 ff97 	bl	8006ef0 <vPortFree>
				vPortFree( pxTCB );
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 ff94 	bl	8006ef0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005fc8:	e018      	b.n	8005ffc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d103      	bne.n	8005fdc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 ff8b 	bl	8006ef0 <vPortFree>
	}
 8005fda:	e00f      	b.n	8005ffc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d00a      	beq.n	8005ffc <prvDeleteTCB+0x60>
	__asm volatile
 8005fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	60fb      	str	r3, [r7, #12]
}
 8005ff8:	bf00      	nop
 8005ffa:	e7fe      	b.n	8005ffa <prvDeleteTCB+0x5e>
	}
 8005ffc:	bf00      	nop
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800600a:	4b0c      	ldr	r3, [pc, #48]	; (800603c <prvResetNextTaskUnblockTime+0x38>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d104      	bne.n	800601e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006014:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <prvResetNextTaskUnblockTime+0x3c>)
 8006016:	f04f 32ff 	mov.w	r2, #4294967295
 800601a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800601c:	e008      	b.n	8006030 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800601e:	4b07      	ldr	r3, [pc, #28]	; (800603c <prvResetNextTaskUnblockTime+0x38>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	4a04      	ldr	r2, [pc, #16]	; (8006040 <prvResetNextTaskUnblockTime+0x3c>)
 800602e:	6013      	str	r3, [r2, #0]
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	20000ca0 	.word	0x20000ca0
 8006040:	20000d08 	.word	0x20000d08

08006044 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800604a:	4b05      	ldr	r3, [pc, #20]	; (8006060 <xTaskGetCurrentTaskHandle+0x1c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006050:	687b      	ldr	r3, [r7, #4]
	}
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	20000814 	.word	0x20000814

08006064 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800606a:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <xTaskGetSchedulerState+0x34>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d102      	bne.n	8006078 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006072:	2301      	movs	r3, #1
 8006074:	607b      	str	r3, [r7, #4]
 8006076:	e008      	b.n	800608a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006078:	4b08      	ldr	r3, [pc, #32]	; (800609c <xTaskGetSchedulerState+0x38>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d102      	bne.n	8006086 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006080:	2302      	movs	r3, #2
 8006082:	607b      	str	r3, [r7, #4]
 8006084:	e001      	b.n	800608a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006086:	2300      	movs	r3, #0
 8006088:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800608a:	687b      	ldr	r3, [r7, #4]
	}
 800608c:	4618      	mov	r0, r3
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	20000cf4 	.word	0x20000cf4
 800609c:	20000d10 	.word	0x20000d10

080060a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060ac:	2300      	movs	r3, #0
 80060ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d056      	beq.n	8006164 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060b6:	4b2e      	ldr	r3, [pc, #184]	; (8006170 <xTaskPriorityDisinherit+0xd0>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d00a      	beq.n	80060d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	60fb      	str	r3, [r7, #12]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	60bb      	str	r3, [r7, #8]
}
 80060f0:	bf00      	nop
 80060f2:	e7fe      	b.n	80060f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f8:	1e5a      	subs	r2, r3, #1
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006106:	429a      	cmp	r2, r3
 8006108:	d02c      	beq.n	8006164 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800610e:	2b00      	cmp	r3, #0
 8006110:	d128      	bne.n	8006164 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	3304      	adds	r3, #4
 8006116:	4618      	mov	r0, r3
 8006118:	f7fe fbc0 	bl	800489c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006128:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006134:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <xTaskPriorityDisinherit+0xd4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	429a      	cmp	r2, r3
 800613a:	d903      	bls.n	8006144 <xTaskPriorityDisinherit+0xa4>
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006140:	4a0c      	ldr	r2, [pc, #48]	; (8006174 <xTaskPriorityDisinherit+0xd4>)
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006148:	4613      	mov	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4a09      	ldr	r2, [pc, #36]	; (8006178 <xTaskPriorityDisinherit+0xd8>)
 8006152:	441a      	add	r2, r3
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	3304      	adds	r3, #4
 8006158:	4619      	mov	r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	f7fe fb41 	bl	80047e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006160:	2301      	movs	r3, #1
 8006162:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006164:	697b      	ldr	r3, [r7, #20]
	}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	20000814 	.word	0x20000814
 8006174:	20000cf0 	.word	0x20000cf0
 8006178:	20000818 	.word	0x20000818

0800617c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006186:	4b21      	ldr	r3, [pc, #132]	; (800620c <prvAddCurrentTaskToDelayedList+0x90>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800618c:	4b20      	ldr	r3, [pc, #128]	; (8006210 <prvAddCurrentTaskToDelayedList+0x94>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3304      	adds	r3, #4
 8006192:	4618      	mov	r0, r3
 8006194:	f7fe fb82 	bl	800489c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800619e:	d10a      	bne.n	80061b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d007      	beq.n	80061b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061a6:	4b1a      	ldr	r3, [pc, #104]	; (8006210 <prvAddCurrentTaskToDelayedList+0x94>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3304      	adds	r3, #4
 80061ac:	4619      	mov	r1, r3
 80061ae:	4819      	ldr	r0, [pc, #100]	; (8006214 <prvAddCurrentTaskToDelayedList+0x98>)
 80061b0:	f7fe fb17 	bl	80047e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061b4:	e026      	b.n	8006204 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4413      	add	r3, r2
 80061bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061be:	4b14      	ldr	r3, [pc, #80]	; (8006210 <prvAddCurrentTaskToDelayedList+0x94>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d209      	bcs.n	80061e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061ce:	4b12      	ldr	r3, [pc, #72]	; (8006218 <prvAddCurrentTaskToDelayedList+0x9c>)
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4b0f      	ldr	r3, [pc, #60]	; (8006210 <prvAddCurrentTaskToDelayedList+0x94>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	3304      	adds	r3, #4
 80061d8:	4619      	mov	r1, r3
 80061da:	4610      	mov	r0, r2
 80061dc:	f7fe fb25 	bl	800482a <vListInsert>
}
 80061e0:	e010      	b.n	8006204 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061e2:	4b0e      	ldr	r3, [pc, #56]	; (800621c <prvAddCurrentTaskToDelayedList+0xa0>)
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	4b0a      	ldr	r3, [pc, #40]	; (8006210 <prvAddCurrentTaskToDelayedList+0x94>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4619      	mov	r1, r3
 80061ee:	4610      	mov	r0, r2
 80061f0:	f7fe fb1b 	bl	800482a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061f4:	4b0a      	ldr	r3, [pc, #40]	; (8006220 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d202      	bcs.n	8006204 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80061fe:	4a08      	ldr	r2, [pc, #32]	; (8006220 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	6013      	str	r3, [r2, #0]
}
 8006204:	bf00      	nop
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20000cec 	.word	0x20000cec
 8006210:	20000814 	.word	0x20000814
 8006214:	20000cd4 	.word	0x20000cd4
 8006218:	20000ca4 	.word	0x20000ca4
 800621c:	20000ca0 	.word	0x20000ca0
 8006220:	20000d08 	.word	0x20000d08

08006224 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08a      	sub	sp, #40	; 0x28
 8006228:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800622a:	2300      	movs	r3, #0
 800622c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800622e:	f000 fb07 	bl	8006840 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006232:	4b1c      	ldr	r3, [pc, #112]	; (80062a4 <xTimerCreateTimerTask+0x80>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d021      	beq.n	800627e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800623e:	2300      	movs	r3, #0
 8006240:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006242:	1d3a      	adds	r2, r7, #4
 8006244:	f107 0108 	add.w	r1, r7, #8
 8006248:	f107 030c 	add.w	r3, r7, #12
 800624c:	4618      	mov	r0, r3
 800624e:	f7fe fa81 	bl	8004754 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	9202      	str	r2, [sp, #8]
 800625a:	9301      	str	r3, [sp, #4]
 800625c:	2302      	movs	r3, #2
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	2300      	movs	r3, #0
 8006262:	460a      	mov	r2, r1
 8006264:	4910      	ldr	r1, [pc, #64]	; (80062a8 <xTimerCreateTimerTask+0x84>)
 8006266:	4811      	ldr	r0, [pc, #68]	; (80062ac <xTimerCreateTimerTask+0x88>)
 8006268:	f7ff f82e 	bl	80052c8 <xTaskCreateStatic>
 800626c:	4603      	mov	r3, r0
 800626e:	4a10      	ldr	r2, [pc, #64]	; (80062b0 <xTimerCreateTimerTask+0x8c>)
 8006270:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006272:	4b0f      	ldr	r3, [pc, #60]	; (80062b0 <xTimerCreateTimerTask+0x8c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800627a:	2301      	movs	r3, #1
 800627c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10a      	bne.n	800629a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	613b      	str	r3, [r7, #16]
}
 8006296:	bf00      	nop
 8006298:	e7fe      	b.n	8006298 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800629a:	697b      	ldr	r3, [r7, #20]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20000d44 	.word	0x20000d44
 80062a8:	08007b80 	.word	0x08007b80
 80062ac:	080063e9 	.word	0x080063e9
 80062b0:	20000d48 	.word	0x20000d48

080062b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b08a      	sub	sp, #40	; 0x28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
 80062c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80062c2:	2300      	movs	r3, #0
 80062c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10a      	bne.n	80062e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	623b      	str	r3, [r7, #32]
}
 80062de:	bf00      	nop
 80062e0:	e7fe      	b.n	80062e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80062e2:	4b1a      	ldr	r3, [pc, #104]	; (800634c <xTimerGenericCommand+0x98>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d02a      	beq.n	8006340 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b05      	cmp	r3, #5
 80062fa:	dc18      	bgt.n	800632e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062fc:	f7ff feb2 	bl	8006064 <xTaskGetSchedulerState>
 8006300:	4603      	mov	r3, r0
 8006302:	2b02      	cmp	r3, #2
 8006304:	d109      	bne.n	800631a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006306:	4b11      	ldr	r3, [pc, #68]	; (800634c <xTimerGenericCommand+0x98>)
 8006308:	6818      	ldr	r0, [r3, #0]
 800630a:	f107 0110 	add.w	r1, r7, #16
 800630e:	2300      	movs	r3, #0
 8006310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006312:	f7fe fbf1 	bl	8004af8 <xQueueGenericSend>
 8006316:	6278      	str	r0, [r7, #36]	; 0x24
 8006318:	e012      	b.n	8006340 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800631a:	4b0c      	ldr	r3, [pc, #48]	; (800634c <xTimerGenericCommand+0x98>)
 800631c:	6818      	ldr	r0, [r3, #0]
 800631e:	f107 0110 	add.w	r1, r7, #16
 8006322:	2300      	movs	r3, #0
 8006324:	2200      	movs	r2, #0
 8006326:	f7fe fbe7 	bl	8004af8 <xQueueGenericSend>
 800632a:	6278      	str	r0, [r7, #36]	; 0x24
 800632c:	e008      	b.n	8006340 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800632e:	4b07      	ldr	r3, [pc, #28]	; (800634c <xTimerGenericCommand+0x98>)
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	f107 0110 	add.w	r1, r7, #16
 8006336:	2300      	movs	r3, #0
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	f7fe fcdb 	bl	8004cf4 <xQueueGenericSendFromISR>
 800633e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006342:	4618      	mov	r0, r3
 8006344:	3728      	adds	r7, #40	; 0x28
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20000d44 	.word	0x20000d44

08006350 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af02      	add	r7, sp, #8
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800635a:	4b22      	ldr	r3, [pc, #136]	; (80063e4 <prvProcessExpiredTimer+0x94>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	3304      	adds	r3, #4
 8006368:	4618      	mov	r0, r3
 800636a:	f7fe fa97 	bl	800489c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b00      	cmp	r3, #0
 800637a:	d022      	beq.n	80063c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	699a      	ldr	r2, [r3, #24]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	18d1      	adds	r1, r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	6978      	ldr	r0, [r7, #20]
 800638a:	f000 f8d1 	bl	8006530 <prvInsertTimerInActiveList>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01f      	beq.n	80063d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006394:	2300      	movs	r3, #0
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	2300      	movs	r3, #0
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	2100      	movs	r1, #0
 800639e:	6978      	ldr	r0, [r7, #20]
 80063a0:	f7ff ff88 	bl	80062b4 <xTimerGenericCommand>
 80063a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d113      	bne.n	80063d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80063ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	60fb      	str	r3, [r7, #12]
}
 80063be:	bf00      	nop
 80063c0:	e7fe      	b.n	80063c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063c8:	f023 0301 	bic.w	r3, r3, #1
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	6978      	ldr	r0, [r7, #20]
 80063da:	4798      	blx	r3
}
 80063dc:	bf00      	nop
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	20000d3c 	.word	0x20000d3c

080063e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063f0:	f107 0308 	add.w	r3, r7, #8
 80063f4:	4618      	mov	r0, r3
 80063f6:	f000 f857 	bl	80064a8 <prvGetNextExpireTime>
 80063fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	4619      	mov	r1, r3
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 f803 	bl	800640c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006406:	f000 f8d5 	bl	80065b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800640a:	e7f1      	b.n	80063f0 <prvTimerTask+0x8>

0800640c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006416:	f7ff fa29 	bl	800586c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800641a:	f107 0308 	add.w	r3, r7, #8
 800641e:	4618      	mov	r0, r3
 8006420:	f000 f866 	bl	80064f0 <prvSampleTimeNow>
 8006424:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d130      	bne.n	800648e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10a      	bne.n	8006448 <prvProcessTimerOrBlockTask+0x3c>
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	429a      	cmp	r2, r3
 8006438:	d806      	bhi.n	8006448 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800643a:	f7ff fa25 	bl	8005888 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800643e:	68f9      	ldr	r1, [r7, #12]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7ff ff85 	bl	8006350 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006446:	e024      	b.n	8006492 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d008      	beq.n	8006460 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800644e:	4b13      	ldr	r3, [pc, #76]	; (800649c <prvProcessTimerOrBlockTask+0x90>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <prvProcessTimerOrBlockTask+0x50>
 8006458:	2301      	movs	r3, #1
 800645a:	e000      	b.n	800645e <prvProcessTimerOrBlockTask+0x52>
 800645c:	2300      	movs	r3, #0
 800645e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006460:	4b0f      	ldr	r3, [pc, #60]	; (80064a0 <prvProcessTimerOrBlockTask+0x94>)
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	4619      	mov	r1, r3
 800646e:	f7fe fef7 	bl	8005260 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006472:	f7ff fa09 	bl	8005888 <xTaskResumeAll>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10a      	bne.n	8006492 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800647c:	4b09      	ldr	r3, [pc, #36]	; (80064a4 <prvProcessTimerOrBlockTask+0x98>)
 800647e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	f3bf 8f6f 	isb	sy
}
 800648c:	e001      	b.n	8006492 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800648e:	f7ff f9fb 	bl	8005888 <xTaskResumeAll>
}
 8006492:	bf00      	nop
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	20000d40 	.word	0x20000d40
 80064a0:	20000d44 	.word	0x20000d44
 80064a4:	e000ed04 	.word	0xe000ed04

080064a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80064b0:	4b0e      	ldr	r3, [pc, #56]	; (80064ec <prvGetNextExpireTime+0x44>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <prvGetNextExpireTime+0x16>
 80064ba:	2201      	movs	r2, #1
 80064bc:	e000      	b.n	80064c0 <prvGetNextExpireTime+0x18>
 80064be:	2200      	movs	r2, #0
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d105      	bne.n	80064d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064cc:	4b07      	ldr	r3, [pc, #28]	; (80064ec <prvGetNextExpireTime+0x44>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	60fb      	str	r3, [r7, #12]
 80064d6:	e001      	b.n	80064dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80064dc:	68fb      	ldr	r3, [r7, #12]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	20000d3c 	.word	0x20000d3c

080064f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80064f8:	f7ff fa64 	bl	80059c4 <xTaskGetTickCount>
 80064fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80064fe:	4b0b      	ldr	r3, [pc, #44]	; (800652c <prvSampleTimeNow+0x3c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68fa      	ldr	r2, [r7, #12]
 8006504:	429a      	cmp	r2, r3
 8006506:	d205      	bcs.n	8006514 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006508:	f000 f936 	bl	8006778 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	601a      	str	r2, [r3, #0]
 8006512:	e002      	b.n	800651a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800651a:	4a04      	ldr	r2, [pc, #16]	; (800652c <prvSampleTimeNow+0x3c>)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006520:	68fb      	ldr	r3, [r7, #12]
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20000d4c 	.word	0x20000d4c

08006530 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
 800653c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800653e:	2300      	movs	r3, #0
 8006540:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	68fa      	ldr	r2, [r7, #12]
 800654c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800654e:	68ba      	ldr	r2, [r7, #8]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	429a      	cmp	r2, r3
 8006554:	d812      	bhi.n	800657c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	1ad2      	subs	r2, r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	429a      	cmp	r2, r3
 8006562:	d302      	bcc.n	800656a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006564:	2301      	movs	r3, #1
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	e01b      	b.n	80065a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800656a:	4b10      	ldr	r3, [pc, #64]	; (80065ac <prvInsertTimerInActiveList+0x7c>)
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3304      	adds	r3, #4
 8006572:	4619      	mov	r1, r3
 8006574:	4610      	mov	r0, r2
 8006576:	f7fe f958 	bl	800482a <vListInsert>
 800657a:	e012      	b.n	80065a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	429a      	cmp	r2, r3
 8006582:	d206      	bcs.n	8006592 <prvInsertTimerInActiveList+0x62>
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	429a      	cmp	r2, r3
 800658a:	d302      	bcc.n	8006592 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800658c:	2301      	movs	r3, #1
 800658e:	617b      	str	r3, [r7, #20]
 8006590:	e007      	b.n	80065a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006592:	4b07      	ldr	r3, [pc, #28]	; (80065b0 <prvInsertTimerInActiveList+0x80>)
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	3304      	adds	r3, #4
 800659a:	4619      	mov	r1, r3
 800659c:	4610      	mov	r0, r2
 800659e:	f7fe f944 	bl	800482a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80065a2:	697b      	ldr	r3, [r7, #20]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3718      	adds	r7, #24
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	20000d40 	.word	0x20000d40
 80065b0:	20000d3c 	.word	0x20000d3c

080065b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08e      	sub	sp, #56	; 0x38
 80065b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065ba:	e0ca      	b.n	8006752 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	da18      	bge.n	80065f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80065c2:	1d3b      	adds	r3, r7, #4
 80065c4:	3304      	adds	r3, #4
 80065c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80065c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	61fb      	str	r3, [r7, #28]
}
 80065e0:	bf00      	nop
 80065e2:	e7fe      	b.n	80065e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80065e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065ea:	6850      	ldr	r0, [r2, #4]
 80065ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065ee:	6892      	ldr	r2, [r2, #8]
 80065f0:	4611      	mov	r1, r2
 80065f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f2c0 80aa 	blt.w	8006750 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d004      	beq.n	8006612 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	3304      	adds	r3, #4
 800660c:	4618      	mov	r0, r3
 800660e:	f7fe f945 	bl	800489c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006612:	463b      	mov	r3, r7
 8006614:	4618      	mov	r0, r3
 8006616:	f7ff ff6b 	bl	80064f0 <prvSampleTimeNow>
 800661a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b09      	cmp	r3, #9
 8006620:	f200 8097 	bhi.w	8006752 <prvProcessReceivedCommands+0x19e>
 8006624:	a201      	add	r2, pc, #4	; (adr r2, 800662c <prvProcessReceivedCommands+0x78>)
 8006626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662a:	bf00      	nop
 800662c:	08006655 	.word	0x08006655
 8006630:	08006655 	.word	0x08006655
 8006634:	08006655 	.word	0x08006655
 8006638:	080066c9 	.word	0x080066c9
 800663c:	080066dd 	.word	0x080066dd
 8006640:	08006727 	.word	0x08006727
 8006644:	08006655 	.word	0x08006655
 8006648:	08006655 	.word	0x08006655
 800664c:	080066c9 	.word	0x080066c9
 8006650:	080066dd 	.word	0x080066dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800665a:	f043 0301 	orr.w	r3, r3, #1
 800665e:	b2da      	uxtb	r2, r3
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	18d1      	adds	r1, r2, r3
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006674:	f7ff ff5c 	bl	8006530 <prvInsertTimerInActiveList>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d069      	beq.n	8006752 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800667e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006684:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b00      	cmp	r3, #0
 8006692:	d05e      	beq.n	8006752 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	441a      	add	r2, r3
 800669c:	2300      	movs	r3, #0
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	2300      	movs	r3, #0
 80066a2:	2100      	movs	r1, #0
 80066a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066a6:	f7ff fe05 	bl	80062b4 <xTimerGenericCommand>
 80066aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d14f      	bne.n	8006752 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	61bb      	str	r3, [r7, #24]
}
 80066c4:	bf00      	nop
 80066c6:	e7fe      	b.n	80066c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80066c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066ce:	f023 0301 	bic.w	r3, r3, #1
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80066da:	e03a      	b.n	8006752 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80066dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80066e2:	f043 0301 	orr.w	r3, r3, #1
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80066ee:	68ba      	ldr	r2, [r7, #8]
 80066f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80066f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10a      	bne.n	8006712 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	617b      	str	r3, [r7, #20]
}
 800670e:	bf00      	nop
 8006710:	e7fe      	b.n	8006710 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006714:	699a      	ldr	r2, [r3, #24]
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	18d1      	adds	r1, r2, r3
 800671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800671e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006720:	f7ff ff06 	bl	8006530 <prvInsertTimerInActiveList>
					break;
 8006724:	e015      	b.n	8006752 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b00      	cmp	r3, #0
 8006732:	d103      	bne.n	800673c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006736:	f000 fbdb 	bl	8006ef0 <vPortFree>
 800673a:	e00a      	b.n	8006752 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800673c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006742:	f023 0301 	bic.w	r3, r3, #1
 8006746:	b2da      	uxtb	r2, r3
 8006748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800674e:	e000      	b.n	8006752 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006750:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006752:	4b08      	ldr	r3, [pc, #32]	; (8006774 <prvProcessReceivedCommands+0x1c0>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	1d39      	adds	r1, r7, #4
 8006758:	2200      	movs	r2, #0
 800675a:	4618      	mov	r0, r3
 800675c:	f7fe fb66 	bl	8004e2c <xQueueReceive>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	f47f af2a 	bne.w	80065bc <prvProcessReceivedCommands+0x8>
	}
}
 8006768:	bf00      	nop
 800676a:	bf00      	nop
 800676c:	3730      	adds	r7, #48	; 0x30
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	20000d44 	.word	0x20000d44

08006778 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b088      	sub	sp, #32
 800677c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800677e:	e048      	b.n	8006812 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006780:	4b2d      	ldr	r3, [pc, #180]	; (8006838 <prvSwitchTimerLists+0xc0>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800678a:	4b2b      	ldr	r3, [pc, #172]	; (8006838 <prvSwitchTimerLists+0xc0>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	3304      	adds	r3, #4
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe f87f 	bl	800489c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d02e      	beq.n	8006812 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	4413      	add	r3, r2
 80067bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d90e      	bls.n	80067e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80067d2:	4b19      	ldr	r3, [pc, #100]	; (8006838 <prvSwitchTimerLists+0xc0>)
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3304      	adds	r3, #4
 80067da:	4619      	mov	r1, r3
 80067dc:	4610      	mov	r0, r2
 80067de:	f7fe f824 	bl	800482a <vListInsert>
 80067e2:	e016      	b.n	8006812 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067e4:	2300      	movs	r3, #0
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	2300      	movs	r3, #0
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	2100      	movs	r1, #0
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f7ff fd60 	bl	80062b4 <xTimerGenericCommand>
 80067f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10a      	bne.n	8006812 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80067fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006800:	f383 8811 	msr	BASEPRI, r3
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	603b      	str	r3, [r7, #0]
}
 800680e:	bf00      	nop
 8006810:	e7fe      	b.n	8006810 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006812:	4b09      	ldr	r3, [pc, #36]	; (8006838 <prvSwitchTimerLists+0xc0>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1b1      	bne.n	8006780 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800681c:	4b06      	ldr	r3, [pc, #24]	; (8006838 <prvSwitchTimerLists+0xc0>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006822:	4b06      	ldr	r3, [pc, #24]	; (800683c <prvSwitchTimerLists+0xc4>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a04      	ldr	r2, [pc, #16]	; (8006838 <prvSwitchTimerLists+0xc0>)
 8006828:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800682a:	4a04      	ldr	r2, [pc, #16]	; (800683c <prvSwitchTimerLists+0xc4>)
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	6013      	str	r3, [r2, #0]
}
 8006830:	bf00      	nop
 8006832:	3718      	adds	r7, #24
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	20000d3c 	.word	0x20000d3c
 800683c:	20000d40 	.word	0x20000d40

08006840 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006846:	f000 f965 	bl	8006b14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800684a:	4b15      	ldr	r3, [pc, #84]	; (80068a0 <prvCheckForValidListAndQueue+0x60>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d120      	bne.n	8006894 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006852:	4814      	ldr	r0, [pc, #80]	; (80068a4 <prvCheckForValidListAndQueue+0x64>)
 8006854:	f7fd ff98 	bl	8004788 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006858:	4813      	ldr	r0, [pc, #76]	; (80068a8 <prvCheckForValidListAndQueue+0x68>)
 800685a:	f7fd ff95 	bl	8004788 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800685e:	4b13      	ldr	r3, [pc, #76]	; (80068ac <prvCheckForValidListAndQueue+0x6c>)
 8006860:	4a10      	ldr	r2, [pc, #64]	; (80068a4 <prvCheckForValidListAndQueue+0x64>)
 8006862:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006864:	4b12      	ldr	r3, [pc, #72]	; (80068b0 <prvCheckForValidListAndQueue+0x70>)
 8006866:	4a10      	ldr	r2, [pc, #64]	; (80068a8 <prvCheckForValidListAndQueue+0x68>)
 8006868:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800686a:	2300      	movs	r3, #0
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	4b11      	ldr	r3, [pc, #68]	; (80068b4 <prvCheckForValidListAndQueue+0x74>)
 8006870:	4a11      	ldr	r2, [pc, #68]	; (80068b8 <prvCheckForValidListAndQueue+0x78>)
 8006872:	2110      	movs	r1, #16
 8006874:	200a      	movs	r0, #10
 8006876:	f7fe f8a3 	bl	80049c0 <xQueueGenericCreateStatic>
 800687a:	4603      	mov	r3, r0
 800687c:	4a08      	ldr	r2, [pc, #32]	; (80068a0 <prvCheckForValidListAndQueue+0x60>)
 800687e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006880:	4b07      	ldr	r3, [pc, #28]	; (80068a0 <prvCheckForValidListAndQueue+0x60>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d005      	beq.n	8006894 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006888:	4b05      	ldr	r3, [pc, #20]	; (80068a0 <prvCheckForValidListAndQueue+0x60>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	490b      	ldr	r1, [pc, #44]	; (80068bc <prvCheckForValidListAndQueue+0x7c>)
 800688e:	4618      	mov	r0, r3
 8006890:	f7fe fcbc 	bl	800520c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006894:	f000 f96e 	bl	8006b74 <vPortExitCritical>
}
 8006898:	bf00      	nop
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	20000d44 	.word	0x20000d44
 80068a4:	20000d14 	.word	0x20000d14
 80068a8:	20000d28 	.word	0x20000d28
 80068ac:	20000d3c 	.word	0x20000d3c
 80068b0:	20000d40 	.word	0x20000d40
 80068b4:	20000df0 	.word	0x20000df0
 80068b8:	20000d50 	.word	0x20000d50
 80068bc:	08007b88 	.word	0x08007b88

080068c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	3b04      	subs	r3, #4
 80068d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80068d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3b04      	subs	r3, #4
 80068de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f023 0201 	bic.w	r2, r3, #1
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	3b04      	subs	r3, #4
 80068ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068f0:	4a0c      	ldr	r2, [pc, #48]	; (8006924 <pxPortInitialiseStack+0x64>)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3b14      	subs	r3, #20
 80068fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068fc:	687a      	ldr	r2, [r7, #4]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	3b04      	subs	r3, #4
 8006906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f06f 0202 	mvn.w	r2, #2
 800690e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3b20      	subs	r3, #32
 8006914:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006916:	68fb      	ldr	r3, [r7, #12]
}
 8006918:	4618      	mov	r0, r3
 800691a:	3714      	adds	r7, #20
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	08006929 	.word	0x08006929

08006928 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800692e:	2300      	movs	r3, #0
 8006930:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006932:	4b12      	ldr	r3, [pc, #72]	; (800697c <prvTaskExitError+0x54>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693a:	d00a      	beq.n	8006952 <prvTaskExitError+0x2a>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	60fb      	str	r3, [r7, #12]
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <prvTaskExitError+0x28>
	__asm volatile
 8006952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006956:	f383 8811 	msr	BASEPRI, r3
 800695a:	f3bf 8f6f 	isb	sy
 800695e:	f3bf 8f4f 	dsb	sy
 8006962:	60bb      	str	r3, [r7, #8]
}
 8006964:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006966:	bf00      	nop
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0fc      	beq.n	8006968 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800696e:	bf00      	nop
 8006970:	bf00      	nop
 8006972:	3714      	adds	r7, #20
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	2000000c 	.word	0x2000000c

08006980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006980:	4b07      	ldr	r3, [pc, #28]	; (80069a0 <pxCurrentTCBConst2>)
 8006982:	6819      	ldr	r1, [r3, #0]
 8006984:	6808      	ldr	r0, [r1, #0]
 8006986:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698a:	f380 8809 	msr	PSP, r0
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f04f 0000 	mov.w	r0, #0
 8006996:	f380 8811 	msr	BASEPRI, r0
 800699a:	4770      	bx	lr
 800699c:	f3af 8000 	nop.w

080069a0 <pxCurrentTCBConst2>:
 80069a0:	20000814 	.word	0x20000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069a4:	bf00      	nop
 80069a6:	bf00      	nop

080069a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80069a8:	4808      	ldr	r0, [pc, #32]	; (80069cc <prvPortStartFirstTask+0x24>)
 80069aa:	6800      	ldr	r0, [r0, #0]
 80069ac:	6800      	ldr	r0, [r0, #0]
 80069ae:	f380 8808 	msr	MSP, r0
 80069b2:	f04f 0000 	mov.w	r0, #0
 80069b6:	f380 8814 	msr	CONTROL, r0
 80069ba:	b662      	cpsie	i
 80069bc:	b661      	cpsie	f
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	df00      	svc	0
 80069c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069ca:	bf00      	nop
 80069cc:	e000ed08 	.word	0xe000ed08

080069d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80069d6:	4b46      	ldr	r3, [pc, #280]	; (8006af0 <xPortStartScheduler+0x120>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a46      	ldr	r2, [pc, #280]	; (8006af4 <xPortStartScheduler+0x124>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d10a      	bne.n	80069f6 <xPortStartScheduler+0x26>
	__asm volatile
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	613b      	str	r3, [r7, #16]
}
 80069f2:	bf00      	nop
 80069f4:	e7fe      	b.n	80069f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80069f6:	4b3e      	ldr	r3, [pc, #248]	; (8006af0 <xPortStartScheduler+0x120>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a3f      	ldr	r2, [pc, #252]	; (8006af8 <xPortStartScheduler+0x128>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d10a      	bne.n	8006a16 <xPortStartScheduler+0x46>
	__asm volatile
 8006a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	60fb      	str	r3, [r7, #12]
}
 8006a12:	bf00      	nop
 8006a14:	e7fe      	b.n	8006a14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a16:	4b39      	ldr	r3, [pc, #228]	; (8006afc <xPortStartScheduler+0x12c>)
 8006a18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	22ff      	movs	r2, #255	; 0xff
 8006a26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a30:	78fb      	ldrb	r3, [r7, #3]
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a38:	b2da      	uxtb	r2, r3
 8006a3a:	4b31      	ldr	r3, [pc, #196]	; (8006b00 <xPortStartScheduler+0x130>)
 8006a3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a3e:	4b31      	ldr	r3, [pc, #196]	; (8006b04 <xPortStartScheduler+0x134>)
 8006a40:	2207      	movs	r2, #7
 8006a42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a44:	e009      	b.n	8006a5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006a46:	4b2f      	ldr	r3, [pc, #188]	; (8006b04 <xPortStartScheduler+0x134>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	4a2d      	ldr	r2, [pc, #180]	; (8006b04 <xPortStartScheduler+0x134>)
 8006a4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a50:	78fb      	ldrb	r3, [r7, #3]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a5a:	78fb      	ldrb	r3, [r7, #3]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a62:	2b80      	cmp	r3, #128	; 0x80
 8006a64:	d0ef      	beq.n	8006a46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a66:	4b27      	ldr	r3, [pc, #156]	; (8006b04 <xPortStartScheduler+0x134>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f1c3 0307 	rsb	r3, r3, #7
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	d00a      	beq.n	8006a88 <xPortStartScheduler+0xb8>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	60bb      	str	r3, [r7, #8]
}
 8006a84:	bf00      	nop
 8006a86:	e7fe      	b.n	8006a86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a88:	4b1e      	ldr	r3, [pc, #120]	; (8006b04 <xPortStartScheduler+0x134>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	021b      	lsls	r3, r3, #8
 8006a8e:	4a1d      	ldr	r2, [pc, #116]	; (8006b04 <xPortStartScheduler+0x134>)
 8006a90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a92:	4b1c      	ldr	r3, [pc, #112]	; (8006b04 <xPortStartScheduler+0x134>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a9a:	4a1a      	ldr	r2, [pc, #104]	; (8006b04 <xPortStartScheduler+0x134>)
 8006a9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	b2da      	uxtb	r2, r3
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006aa6:	4b18      	ldr	r3, [pc, #96]	; (8006b08 <xPortStartScheduler+0x138>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a17      	ldr	r2, [pc, #92]	; (8006b08 <xPortStartScheduler+0x138>)
 8006aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ab0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ab2:	4b15      	ldr	r3, [pc, #84]	; (8006b08 <xPortStartScheduler+0x138>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a14      	ldr	r2, [pc, #80]	; (8006b08 <xPortStartScheduler+0x138>)
 8006ab8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006abc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006abe:	f000 f8dd 	bl	8006c7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ac2:	4b12      	ldr	r3, [pc, #72]	; (8006b0c <xPortStartScheduler+0x13c>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ac8:	f000 f8fc 	bl	8006cc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006acc:	4b10      	ldr	r3, [pc, #64]	; (8006b10 <xPortStartScheduler+0x140>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a0f      	ldr	r2, [pc, #60]	; (8006b10 <xPortStartScheduler+0x140>)
 8006ad2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006ad6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ad8:	f7ff ff66 	bl	80069a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006adc:	f7ff f83c 	bl	8005b58 <vTaskSwitchContext>
	prvTaskExitError();
 8006ae0:	f7ff ff22 	bl	8006928 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	e000ed00 	.word	0xe000ed00
 8006af4:	410fc271 	.word	0x410fc271
 8006af8:	410fc270 	.word	0x410fc270
 8006afc:	e000e400 	.word	0xe000e400
 8006b00:	20000e40 	.word	0x20000e40
 8006b04:	20000e44 	.word	0x20000e44
 8006b08:	e000ed20 	.word	0xe000ed20
 8006b0c:	2000000c 	.word	0x2000000c
 8006b10:	e000ef34 	.word	0xe000ef34

08006b14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	607b      	str	r3, [r7, #4]
}
 8006b2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b2e:	4b0f      	ldr	r3, [pc, #60]	; (8006b6c <vPortEnterCritical+0x58>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	3301      	adds	r3, #1
 8006b34:	4a0d      	ldr	r2, [pc, #52]	; (8006b6c <vPortEnterCritical+0x58>)
 8006b36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b38:	4b0c      	ldr	r3, [pc, #48]	; (8006b6c <vPortEnterCritical+0x58>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d10f      	bne.n	8006b60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b40:	4b0b      	ldr	r3, [pc, #44]	; (8006b70 <vPortEnterCritical+0x5c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00a      	beq.n	8006b60 <vPortEnterCritical+0x4c>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	603b      	str	r3, [r7, #0]
}
 8006b5c:	bf00      	nop
 8006b5e:	e7fe      	b.n	8006b5e <vPortEnterCritical+0x4a>
	}
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	2000000c 	.word	0x2000000c
 8006b70:	e000ed04 	.word	0xe000ed04

08006b74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b7a:	4b12      	ldr	r3, [pc, #72]	; (8006bc4 <vPortExitCritical+0x50>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10a      	bne.n	8006b98 <vPortExitCritical+0x24>
	__asm volatile
 8006b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b86:	f383 8811 	msr	BASEPRI, r3
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	607b      	str	r3, [r7, #4]
}
 8006b94:	bf00      	nop
 8006b96:	e7fe      	b.n	8006b96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b98:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <vPortExitCritical+0x50>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	4a09      	ldr	r2, [pc, #36]	; (8006bc4 <vPortExitCritical+0x50>)
 8006ba0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ba2:	4b08      	ldr	r3, [pc, #32]	; (8006bc4 <vPortExitCritical+0x50>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d105      	bne.n	8006bb6 <vPortExitCritical+0x42>
 8006baa:	2300      	movs	r3, #0
 8006bac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	f383 8811 	msr	BASEPRI, r3
}
 8006bb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006bb6:	bf00      	nop
 8006bb8:	370c      	adds	r7, #12
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	2000000c 	.word	0x2000000c
	...

08006bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006bd0:	f3ef 8009 	mrs	r0, PSP
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	4b15      	ldr	r3, [pc, #84]	; (8006c30 <pxCurrentTCBConst>)
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	f01e 0f10 	tst.w	lr, #16
 8006be0:	bf08      	it	eq
 8006be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bea:	6010      	str	r0, [r2, #0]
 8006bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006bf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006bf4:	f380 8811 	msr	BASEPRI, r0
 8006bf8:	f3bf 8f4f 	dsb	sy
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f7fe ffaa 	bl	8005b58 <vTaskSwitchContext>
 8006c04:	f04f 0000 	mov.w	r0, #0
 8006c08:	f380 8811 	msr	BASEPRI, r0
 8006c0c:	bc09      	pop	{r0, r3}
 8006c0e:	6819      	ldr	r1, [r3, #0]
 8006c10:	6808      	ldr	r0, [r1, #0]
 8006c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c16:	f01e 0f10 	tst.w	lr, #16
 8006c1a:	bf08      	it	eq
 8006c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c20:	f380 8809 	msr	PSP, r0
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	f3af 8000 	nop.w

08006c30 <pxCurrentTCBConst>:
 8006c30:	20000814 	.word	0x20000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c34:	bf00      	nop
 8006c36:	bf00      	nop

08006c38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	607b      	str	r3, [r7, #4]
}
 8006c50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c52:	f7fe fec7 	bl	80059e4 <xTaskIncrementTick>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c5c:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <xPortSysTickHandler+0x40>)
 8006c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c62:	601a      	str	r2, [r3, #0]
 8006c64:	2300      	movs	r3, #0
 8006c66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	f383 8811 	msr	BASEPRI, r3
}
 8006c6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c70:	bf00      	nop
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	e000ed04 	.word	0xe000ed04

08006c7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c80:	4b0b      	ldr	r3, [pc, #44]	; (8006cb0 <vPortSetupTimerInterrupt+0x34>)
 8006c82:	2200      	movs	r2, #0
 8006c84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c86:	4b0b      	ldr	r3, [pc, #44]	; (8006cb4 <vPortSetupTimerInterrupt+0x38>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c8c:	4b0a      	ldr	r3, [pc, #40]	; (8006cb8 <vPortSetupTimerInterrupt+0x3c>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a0a      	ldr	r2, [pc, #40]	; (8006cbc <vPortSetupTimerInterrupt+0x40>)
 8006c92:	fba2 2303 	umull	r2, r3, r2, r3
 8006c96:	099b      	lsrs	r3, r3, #6
 8006c98:	4a09      	ldr	r2, [pc, #36]	; (8006cc0 <vPortSetupTimerInterrupt+0x44>)
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c9e:	4b04      	ldr	r3, [pc, #16]	; (8006cb0 <vPortSetupTimerInterrupt+0x34>)
 8006ca0:	2207      	movs	r2, #7
 8006ca2:	601a      	str	r2, [r3, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	e000e010 	.word	0xe000e010
 8006cb4:	e000e018 	.word	0xe000e018
 8006cb8:	20000000 	.word	0x20000000
 8006cbc:	10624dd3 	.word	0x10624dd3
 8006cc0:	e000e014 	.word	0xe000e014

08006cc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006cc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006cd4 <vPortEnableVFP+0x10>
 8006cc8:	6801      	ldr	r1, [r0, #0]
 8006cca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006cce:	6001      	str	r1, [r0, #0]
 8006cd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006cd2:	bf00      	nop
 8006cd4:	e000ed88 	.word	0xe000ed88

08006cd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006cde:	f3ef 8305 	mrs	r3, IPSR
 8006ce2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b0f      	cmp	r3, #15
 8006ce8:	d914      	bls.n	8006d14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006cea:	4a17      	ldr	r2, [pc, #92]	; (8006d48 <vPortValidateInterruptPriority+0x70>)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	4413      	add	r3, r2
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006cf4:	4b15      	ldr	r3, [pc, #84]	; (8006d4c <vPortValidateInterruptPriority+0x74>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	7afa      	ldrb	r2, [r7, #11]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d20a      	bcs.n	8006d14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	607b      	str	r3, [r7, #4]
}
 8006d10:	bf00      	nop
 8006d12:	e7fe      	b.n	8006d12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d14:	4b0e      	ldr	r3, [pc, #56]	; (8006d50 <vPortValidateInterruptPriority+0x78>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006d1c:	4b0d      	ldr	r3, [pc, #52]	; (8006d54 <vPortValidateInterruptPriority+0x7c>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d90a      	bls.n	8006d3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	603b      	str	r3, [r7, #0]
}
 8006d36:	bf00      	nop
 8006d38:	e7fe      	b.n	8006d38 <vPortValidateInterruptPriority+0x60>
	}
 8006d3a:	bf00      	nop
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	e000e3f0 	.word	0xe000e3f0
 8006d4c:	20000e40 	.word	0x20000e40
 8006d50:	e000ed0c 	.word	0xe000ed0c
 8006d54:	20000e44 	.word	0x20000e44

08006d58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b08a      	sub	sp, #40	; 0x28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d60:	2300      	movs	r3, #0
 8006d62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d64:	f7fe fd82 	bl	800586c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d68:	4b5b      	ldr	r3, [pc, #364]	; (8006ed8 <pvPortMalloc+0x180>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d101      	bne.n	8006d74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d70:	f000 f920 	bl	8006fb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d74:	4b59      	ldr	r3, [pc, #356]	; (8006edc <pvPortMalloc+0x184>)
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f040 8093 	bne.w	8006ea8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d01d      	beq.n	8006dc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006d88:	2208      	movs	r2, #8
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f003 0307 	and.w	r3, r3, #7
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d014      	beq.n	8006dc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f023 0307 	bic.w	r3, r3, #7
 8006da0:	3308      	adds	r3, #8
 8006da2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f003 0307 	and.w	r3, r3, #7
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <pvPortMalloc+0x6c>
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	617b      	str	r3, [r7, #20]
}
 8006dc0:	bf00      	nop
 8006dc2:	e7fe      	b.n	8006dc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d06e      	beq.n	8006ea8 <pvPortMalloc+0x150>
 8006dca:	4b45      	ldr	r3, [pc, #276]	; (8006ee0 <pvPortMalloc+0x188>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d869      	bhi.n	8006ea8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006dd4:	4b43      	ldr	r3, [pc, #268]	; (8006ee4 <pvPortMalloc+0x18c>)
 8006dd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006dd8:	4b42      	ldr	r3, [pc, #264]	; (8006ee4 <pvPortMalloc+0x18c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dde:	e004      	b.n	8006dea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d903      	bls.n	8006dfc <pvPortMalloc+0xa4>
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1f1      	bne.n	8006de0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006dfc:	4b36      	ldr	r3, [pc, #216]	; (8006ed8 <pvPortMalloc+0x180>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d050      	beq.n	8006ea8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2208      	movs	r2, #8
 8006e0c:	4413      	add	r3, r2
 8006e0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	685a      	ldr	r2, [r3, #4]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	1ad2      	subs	r2, r2, r3
 8006e20:	2308      	movs	r3, #8
 8006e22:	005b      	lsls	r3, r3, #1
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d91f      	bls.n	8006e68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	f003 0307 	and.w	r3, r3, #7
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <pvPortMalloc+0xf8>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	613b      	str	r3, [r7, #16]
}
 8006e4c:	bf00      	nop
 8006e4e:	e7fe      	b.n	8006e4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	1ad2      	subs	r2, r2, r3
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e62:	69b8      	ldr	r0, [r7, #24]
 8006e64:	f000 f908 	bl	8007078 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e68:	4b1d      	ldr	r3, [pc, #116]	; (8006ee0 <pvPortMalloc+0x188>)
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	4a1b      	ldr	r2, [pc, #108]	; (8006ee0 <pvPortMalloc+0x188>)
 8006e74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e76:	4b1a      	ldr	r3, [pc, #104]	; (8006ee0 <pvPortMalloc+0x188>)
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ee8 <pvPortMalloc+0x190>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d203      	bcs.n	8006e8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e82:	4b17      	ldr	r3, [pc, #92]	; (8006ee0 <pvPortMalloc+0x188>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a18      	ldr	r2, [pc, #96]	; (8006ee8 <pvPortMalloc+0x190>)
 8006e88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	4b13      	ldr	r3, [pc, #76]	; (8006edc <pvPortMalloc+0x184>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	431a      	orrs	r2, r3
 8006e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e9e:	4b13      	ldr	r3, [pc, #76]	; (8006eec <pvPortMalloc+0x194>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	4a11      	ldr	r2, [pc, #68]	; (8006eec <pvPortMalloc+0x194>)
 8006ea6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ea8:	f7fe fcee 	bl	8005888 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	f003 0307 	and.w	r3, r3, #7
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <pvPortMalloc+0x174>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	60fb      	str	r3, [r7, #12]
}
 8006ec8:	bf00      	nop
 8006eca:	e7fe      	b.n	8006eca <pvPortMalloc+0x172>
	return pvReturn;
 8006ecc:	69fb      	ldr	r3, [r7, #28]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3728      	adds	r7, #40	; 0x28
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20004a50 	.word	0x20004a50
 8006edc:	20004a64 	.word	0x20004a64
 8006ee0:	20004a54 	.word	0x20004a54
 8006ee4:	20004a48 	.word	0x20004a48
 8006ee8:	20004a58 	.word	0x20004a58
 8006eec:	20004a5c 	.word	0x20004a5c

08006ef0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d04d      	beq.n	8006f9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f02:	2308      	movs	r3, #8
 8006f04:	425b      	negs	r3, r3
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	4413      	add	r3, r2
 8006f0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	4b24      	ldr	r3, [pc, #144]	; (8006fa8 <vPortFree+0xb8>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4013      	ands	r3, r2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10a      	bne.n	8006f34 <vPortFree+0x44>
	__asm volatile
 8006f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f22:	f383 8811 	msr	BASEPRI, r3
 8006f26:	f3bf 8f6f 	isb	sy
 8006f2a:	f3bf 8f4f 	dsb	sy
 8006f2e:	60fb      	str	r3, [r7, #12]
}
 8006f30:	bf00      	nop
 8006f32:	e7fe      	b.n	8006f32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00a      	beq.n	8006f52 <vPortFree+0x62>
	__asm volatile
 8006f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f40:	f383 8811 	msr	BASEPRI, r3
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	f3bf 8f4f 	dsb	sy
 8006f4c:	60bb      	str	r3, [r7, #8]
}
 8006f4e:	bf00      	nop
 8006f50:	e7fe      	b.n	8006f50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	4b14      	ldr	r3, [pc, #80]	; (8006fa8 <vPortFree+0xb8>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d01e      	beq.n	8006f9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d11a      	bne.n	8006f9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	4b0e      	ldr	r3, [pc, #56]	; (8006fa8 <vPortFree+0xb8>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	43db      	mvns	r3, r3
 8006f72:	401a      	ands	r2, r3
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f78:	f7fe fc78 	bl	800586c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	4b0a      	ldr	r3, [pc, #40]	; (8006fac <vPortFree+0xbc>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4413      	add	r3, r2
 8006f86:	4a09      	ldr	r2, [pc, #36]	; (8006fac <vPortFree+0xbc>)
 8006f88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f8a:	6938      	ldr	r0, [r7, #16]
 8006f8c:	f000 f874 	bl	8007078 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f90:	4b07      	ldr	r3, [pc, #28]	; (8006fb0 <vPortFree+0xc0>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3301      	adds	r3, #1
 8006f96:	4a06      	ldr	r2, [pc, #24]	; (8006fb0 <vPortFree+0xc0>)
 8006f98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f9a:	f7fe fc75 	bl	8005888 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f9e:	bf00      	nop
 8006fa0:	3718      	adds	r7, #24
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20004a64 	.word	0x20004a64
 8006fac:	20004a54 	.word	0x20004a54
 8006fb0:	20004a60 	.word	0x20004a60

08006fb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006fba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006fbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006fc0:	4b27      	ldr	r3, [pc, #156]	; (8007060 <prvHeapInit+0xac>)
 8006fc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f003 0307 	and.w	r3, r3, #7
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00c      	beq.n	8006fe8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3307      	adds	r3, #7
 8006fd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 0307 	bic.w	r3, r3, #7
 8006fda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	4a1f      	ldr	r2, [pc, #124]	; (8007060 <prvHeapInit+0xac>)
 8006fe4:	4413      	add	r3, r2
 8006fe6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fec:	4a1d      	ldr	r2, [pc, #116]	; (8007064 <prvHeapInit+0xb0>)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ff2:	4b1c      	ldr	r3, [pc, #112]	; (8007064 <prvHeapInit+0xb0>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007000:	2208      	movs	r2, #8
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	1a9b      	subs	r3, r3, r2
 8007006:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f023 0307 	bic.w	r3, r3, #7
 800700e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4a15      	ldr	r2, [pc, #84]	; (8007068 <prvHeapInit+0xb4>)
 8007014:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007016:	4b14      	ldr	r3, [pc, #80]	; (8007068 <prvHeapInit+0xb4>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2200      	movs	r2, #0
 800701c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800701e:	4b12      	ldr	r3, [pc, #72]	; (8007068 <prvHeapInit+0xb4>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2200      	movs	r2, #0
 8007024:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	1ad2      	subs	r2, r2, r3
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007034:	4b0c      	ldr	r3, [pc, #48]	; (8007068 <prvHeapInit+0xb4>)
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	4a0a      	ldr	r2, [pc, #40]	; (800706c <prvHeapInit+0xb8>)
 8007042:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	4a09      	ldr	r2, [pc, #36]	; (8007070 <prvHeapInit+0xbc>)
 800704a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800704c:	4b09      	ldr	r3, [pc, #36]	; (8007074 <prvHeapInit+0xc0>)
 800704e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007052:	601a      	str	r2, [r3, #0]
}
 8007054:	bf00      	nop
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	20000e48 	.word	0x20000e48
 8007064:	20004a48 	.word	0x20004a48
 8007068:	20004a50 	.word	0x20004a50
 800706c:	20004a58 	.word	0x20004a58
 8007070:	20004a54 	.word	0x20004a54
 8007074:	20004a64 	.word	0x20004a64

08007078 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007078:	b480      	push	{r7}
 800707a:	b085      	sub	sp, #20
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007080:	4b28      	ldr	r3, [pc, #160]	; (8007124 <prvInsertBlockIntoFreeList+0xac>)
 8007082:	60fb      	str	r3, [r7, #12]
 8007084:	e002      	b.n	800708c <prvInsertBlockIntoFreeList+0x14>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	429a      	cmp	r2, r3
 8007094:	d8f7      	bhi.n	8007086 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	4413      	add	r3, r2
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d108      	bne.n	80070ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	441a      	add	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	441a      	add	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d118      	bne.n	8007100 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	4b15      	ldr	r3, [pc, #84]	; (8007128 <prvInsertBlockIntoFreeList+0xb0>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d00d      	beq.n	80070f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	441a      	add	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	e008      	b.n	8007108 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070f6:	4b0c      	ldr	r3, [pc, #48]	; (8007128 <prvInsertBlockIntoFreeList+0xb0>)
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	e003      	b.n	8007108 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007108:	68fa      	ldr	r2, [r7, #12]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	429a      	cmp	r2, r3
 800710e:	d002      	beq.n	8007116 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007116:	bf00      	nop
 8007118:	3714      	adds	r7, #20
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop
 8007124:	20004a48 	.word	0x20004a48
 8007128:	20004a50 	.word	0x20004a50

0800712c <__errno>:
 800712c:	4b01      	ldr	r3, [pc, #4]	; (8007134 <__errno+0x8>)
 800712e:	6818      	ldr	r0, [r3, #0]
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	20000010 	.word	0x20000010

08007138 <__libc_init_array>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	4d0d      	ldr	r5, [pc, #52]	; (8007170 <__libc_init_array+0x38>)
 800713c:	4c0d      	ldr	r4, [pc, #52]	; (8007174 <__libc_init_array+0x3c>)
 800713e:	1b64      	subs	r4, r4, r5
 8007140:	10a4      	asrs	r4, r4, #2
 8007142:	2600      	movs	r6, #0
 8007144:	42a6      	cmp	r6, r4
 8007146:	d109      	bne.n	800715c <__libc_init_array+0x24>
 8007148:	4d0b      	ldr	r5, [pc, #44]	; (8007178 <__libc_init_array+0x40>)
 800714a:	4c0c      	ldr	r4, [pc, #48]	; (800717c <__libc_init_array+0x44>)
 800714c:	f000 fcb8 	bl	8007ac0 <_init>
 8007150:	1b64      	subs	r4, r4, r5
 8007152:	10a4      	asrs	r4, r4, #2
 8007154:	2600      	movs	r6, #0
 8007156:	42a6      	cmp	r6, r4
 8007158:	d105      	bne.n	8007166 <__libc_init_array+0x2e>
 800715a:	bd70      	pop	{r4, r5, r6, pc}
 800715c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007160:	4798      	blx	r3
 8007162:	3601      	adds	r6, #1
 8007164:	e7ee      	b.n	8007144 <__libc_init_array+0xc>
 8007166:	f855 3b04 	ldr.w	r3, [r5], #4
 800716a:	4798      	blx	r3
 800716c:	3601      	adds	r6, #1
 800716e:	e7f2      	b.n	8007156 <__libc_init_array+0x1e>
 8007170:	08007c8c 	.word	0x08007c8c
 8007174:	08007c8c 	.word	0x08007c8c
 8007178:	08007c8c 	.word	0x08007c8c
 800717c:	08007c90 	.word	0x08007c90

08007180 <__retarget_lock_acquire_recursive>:
 8007180:	4770      	bx	lr

08007182 <__retarget_lock_release_recursive>:
 8007182:	4770      	bx	lr

08007184 <memcpy>:
 8007184:	440a      	add	r2, r1
 8007186:	4291      	cmp	r1, r2
 8007188:	f100 33ff 	add.w	r3, r0, #4294967295
 800718c:	d100      	bne.n	8007190 <memcpy+0xc>
 800718e:	4770      	bx	lr
 8007190:	b510      	push	{r4, lr}
 8007192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007196:	f803 4f01 	strb.w	r4, [r3, #1]!
 800719a:	4291      	cmp	r1, r2
 800719c:	d1f9      	bne.n	8007192 <memcpy+0xe>
 800719e:	bd10      	pop	{r4, pc}

080071a0 <memset>:
 80071a0:	4402      	add	r2, r0
 80071a2:	4603      	mov	r3, r0
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d100      	bne.n	80071aa <memset+0xa>
 80071a8:	4770      	bx	lr
 80071aa:	f803 1b01 	strb.w	r1, [r3], #1
 80071ae:	e7f9      	b.n	80071a4 <memset+0x4>

080071b0 <_malloc_r>:
 80071b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b2:	1ccd      	adds	r5, r1, #3
 80071b4:	f025 0503 	bic.w	r5, r5, #3
 80071b8:	3508      	adds	r5, #8
 80071ba:	2d0c      	cmp	r5, #12
 80071bc:	bf38      	it	cc
 80071be:	250c      	movcc	r5, #12
 80071c0:	2d00      	cmp	r5, #0
 80071c2:	4606      	mov	r6, r0
 80071c4:	db01      	blt.n	80071ca <_malloc_r+0x1a>
 80071c6:	42a9      	cmp	r1, r5
 80071c8:	d903      	bls.n	80071d2 <_malloc_r+0x22>
 80071ca:	230c      	movs	r3, #12
 80071cc:	6033      	str	r3, [r6, #0]
 80071ce:	2000      	movs	r0, #0
 80071d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071d2:	f000 f8e1 	bl	8007398 <__malloc_lock>
 80071d6:	4921      	ldr	r1, [pc, #132]	; (800725c <_malloc_r+0xac>)
 80071d8:	680a      	ldr	r2, [r1, #0]
 80071da:	4614      	mov	r4, r2
 80071dc:	b99c      	cbnz	r4, 8007206 <_malloc_r+0x56>
 80071de:	4f20      	ldr	r7, [pc, #128]	; (8007260 <_malloc_r+0xb0>)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	b923      	cbnz	r3, 80071ee <_malloc_r+0x3e>
 80071e4:	4621      	mov	r1, r4
 80071e6:	4630      	mov	r0, r6
 80071e8:	f000 f8a6 	bl	8007338 <_sbrk_r>
 80071ec:	6038      	str	r0, [r7, #0]
 80071ee:	4629      	mov	r1, r5
 80071f0:	4630      	mov	r0, r6
 80071f2:	f000 f8a1 	bl	8007338 <_sbrk_r>
 80071f6:	1c43      	adds	r3, r0, #1
 80071f8:	d123      	bne.n	8007242 <_malloc_r+0x92>
 80071fa:	230c      	movs	r3, #12
 80071fc:	6033      	str	r3, [r6, #0]
 80071fe:	4630      	mov	r0, r6
 8007200:	f000 f8d0 	bl	80073a4 <__malloc_unlock>
 8007204:	e7e3      	b.n	80071ce <_malloc_r+0x1e>
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	1b5b      	subs	r3, r3, r5
 800720a:	d417      	bmi.n	800723c <_malloc_r+0x8c>
 800720c:	2b0b      	cmp	r3, #11
 800720e:	d903      	bls.n	8007218 <_malloc_r+0x68>
 8007210:	6023      	str	r3, [r4, #0]
 8007212:	441c      	add	r4, r3
 8007214:	6025      	str	r5, [r4, #0]
 8007216:	e004      	b.n	8007222 <_malloc_r+0x72>
 8007218:	6863      	ldr	r3, [r4, #4]
 800721a:	42a2      	cmp	r2, r4
 800721c:	bf0c      	ite	eq
 800721e:	600b      	streq	r3, [r1, #0]
 8007220:	6053      	strne	r3, [r2, #4]
 8007222:	4630      	mov	r0, r6
 8007224:	f000 f8be 	bl	80073a4 <__malloc_unlock>
 8007228:	f104 000b 	add.w	r0, r4, #11
 800722c:	1d23      	adds	r3, r4, #4
 800722e:	f020 0007 	bic.w	r0, r0, #7
 8007232:	1ac2      	subs	r2, r0, r3
 8007234:	d0cc      	beq.n	80071d0 <_malloc_r+0x20>
 8007236:	1a1b      	subs	r3, r3, r0
 8007238:	50a3      	str	r3, [r4, r2]
 800723a:	e7c9      	b.n	80071d0 <_malloc_r+0x20>
 800723c:	4622      	mov	r2, r4
 800723e:	6864      	ldr	r4, [r4, #4]
 8007240:	e7cc      	b.n	80071dc <_malloc_r+0x2c>
 8007242:	1cc4      	adds	r4, r0, #3
 8007244:	f024 0403 	bic.w	r4, r4, #3
 8007248:	42a0      	cmp	r0, r4
 800724a:	d0e3      	beq.n	8007214 <_malloc_r+0x64>
 800724c:	1a21      	subs	r1, r4, r0
 800724e:	4630      	mov	r0, r6
 8007250:	f000 f872 	bl	8007338 <_sbrk_r>
 8007254:	3001      	adds	r0, #1
 8007256:	d1dd      	bne.n	8007214 <_malloc_r+0x64>
 8007258:	e7cf      	b.n	80071fa <_malloc_r+0x4a>
 800725a:	bf00      	nop
 800725c:	20004a68 	.word	0x20004a68
 8007260:	20004a6c 	.word	0x20004a6c

08007264 <cleanup_glue>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	460c      	mov	r4, r1
 8007268:	6809      	ldr	r1, [r1, #0]
 800726a:	4605      	mov	r5, r0
 800726c:	b109      	cbz	r1, 8007272 <cleanup_glue+0xe>
 800726e:	f7ff fff9 	bl	8007264 <cleanup_glue>
 8007272:	4621      	mov	r1, r4
 8007274:	4628      	mov	r0, r5
 8007276:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800727a:	f000 b899 	b.w	80073b0 <_free_r>
	...

08007280 <_reclaim_reent>:
 8007280:	4b2c      	ldr	r3, [pc, #176]	; (8007334 <_reclaim_reent+0xb4>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4283      	cmp	r3, r0
 8007286:	b570      	push	{r4, r5, r6, lr}
 8007288:	4604      	mov	r4, r0
 800728a:	d051      	beq.n	8007330 <_reclaim_reent+0xb0>
 800728c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800728e:	b143      	cbz	r3, 80072a2 <_reclaim_reent+0x22>
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d14a      	bne.n	800732c <_reclaim_reent+0xac>
 8007296:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007298:	6819      	ldr	r1, [r3, #0]
 800729a:	b111      	cbz	r1, 80072a2 <_reclaim_reent+0x22>
 800729c:	4620      	mov	r0, r4
 800729e:	f000 f887 	bl	80073b0 <_free_r>
 80072a2:	6961      	ldr	r1, [r4, #20]
 80072a4:	b111      	cbz	r1, 80072ac <_reclaim_reent+0x2c>
 80072a6:	4620      	mov	r0, r4
 80072a8:	f000 f882 	bl	80073b0 <_free_r>
 80072ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80072ae:	b111      	cbz	r1, 80072b6 <_reclaim_reent+0x36>
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 f87d 	bl	80073b0 <_free_r>
 80072b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80072b8:	b111      	cbz	r1, 80072c0 <_reclaim_reent+0x40>
 80072ba:	4620      	mov	r0, r4
 80072bc:	f000 f878 	bl	80073b0 <_free_r>
 80072c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80072c2:	b111      	cbz	r1, 80072ca <_reclaim_reent+0x4a>
 80072c4:	4620      	mov	r0, r4
 80072c6:	f000 f873 	bl	80073b0 <_free_r>
 80072ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80072cc:	b111      	cbz	r1, 80072d4 <_reclaim_reent+0x54>
 80072ce:	4620      	mov	r0, r4
 80072d0:	f000 f86e 	bl	80073b0 <_free_r>
 80072d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80072d6:	b111      	cbz	r1, 80072de <_reclaim_reent+0x5e>
 80072d8:	4620      	mov	r0, r4
 80072da:	f000 f869 	bl	80073b0 <_free_r>
 80072de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80072e0:	b111      	cbz	r1, 80072e8 <_reclaim_reent+0x68>
 80072e2:	4620      	mov	r0, r4
 80072e4:	f000 f864 	bl	80073b0 <_free_r>
 80072e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072ea:	b111      	cbz	r1, 80072f2 <_reclaim_reent+0x72>
 80072ec:	4620      	mov	r0, r4
 80072ee:	f000 f85f 	bl	80073b0 <_free_r>
 80072f2:	69a3      	ldr	r3, [r4, #24]
 80072f4:	b1e3      	cbz	r3, 8007330 <_reclaim_reent+0xb0>
 80072f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80072f8:	4620      	mov	r0, r4
 80072fa:	4798      	blx	r3
 80072fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80072fe:	b1b9      	cbz	r1, 8007330 <_reclaim_reent+0xb0>
 8007300:	4620      	mov	r0, r4
 8007302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007306:	f7ff bfad 	b.w	8007264 <cleanup_glue>
 800730a:	5949      	ldr	r1, [r1, r5]
 800730c:	b941      	cbnz	r1, 8007320 <_reclaim_reent+0xa0>
 800730e:	3504      	adds	r5, #4
 8007310:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007312:	2d80      	cmp	r5, #128	; 0x80
 8007314:	68d9      	ldr	r1, [r3, #12]
 8007316:	d1f8      	bne.n	800730a <_reclaim_reent+0x8a>
 8007318:	4620      	mov	r0, r4
 800731a:	f000 f849 	bl	80073b0 <_free_r>
 800731e:	e7ba      	b.n	8007296 <_reclaim_reent+0x16>
 8007320:	680e      	ldr	r6, [r1, #0]
 8007322:	4620      	mov	r0, r4
 8007324:	f000 f844 	bl	80073b0 <_free_r>
 8007328:	4631      	mov	r1, r6
 800732a:	e7ef      	b.n	800730c <_reclaim_reent+0x8c>
 800732c:	2500      	movs	r5, #0
 800732e:	e7ef      	b.n	8007310 <_reclaim_reent+0x90>
 8007330:	bd70      	pop	{r4, r5, r6, pc}
 8007332:	bf00      	nop
 8007334:	20000010 	.word	0x20000010

08007338 <_sbrk_r>:
 8007338:	b538      	push	{r3, r4, r5, lr}
 800733a:	4d06      	ldr	r5, [pc, #24]	; (8007354 <_sbrk_r+0x1c>)
 800733c:	2300      	movs	r3, #0
 800733e:	4604      	mov	r4, r0
 8007340:	4608      	mov	r0, r1
 8007342:	602b      	str	r3, [r5, #0]
 8007344:	f7f9 fda6 	bl	8000e94 <_sbrk>
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	d102      	bne.n	8007352 <_sbrk_r+0x1a>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	b103      	cbz	r3, 8007352 <_sbrk_r+0x1a>
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	bd38      	pop	{r3, r4, r5, pc}
 8007354:	20004fa4 	.word	0x20004fa4

08007358 <siprintf>:
 8007358:	b40e      	push	{r1, r2, r3}
 800735a:	b500      	push	{lr}
 800735c:	b09c      	sub	sp, #112	; 0x70
 800735e:	ab1d      	add	r3, sp, #116	; 0x74
 8007360:	9002      	str	r0, [sp, #8]
 8007362:	9006      	str	r0, [sp, #24]
 8007364:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007368:	4809      	ldr	r0, [pc, #36]	; (8007390 <siprintf+0x38>)
 800736a:	9107      	str	r1, [sp, #28]
 800736c:	9104      	str	r1, [sp, #16]
 800736e:	4909      	ldr	r1, [pc, #36]	; (8007394 <siprintf+0x3c>)
 8007370:	f853 2b04 	ldr.w	r2, [r3], #4
 8007374:	9105      	str	r1, [sp, #20]
 8007376:	6800      	ldr	r0, [r0, #0]
 8007378:	9301      	str	r3, [sp, #4]
 800737a:	a902      	add	r1, sp, #8
 800737c:	f000 f8c4 	bl	8007508 <_svfiprintf_r>
 8007380:	9b02      	ldr	r3, [sp, #8]
 8007382:	2200      	movs	r2, #0
 8007384:	701a      	strb	r2, [r3, #0]
 8007386:	b01c      	add	sp, #112	; 0x70
 8007388:	f85d eb04 	ldr.w	lr, [sp], #4
 800738c:	b003      	add	sp, #12
 800738e:	4770      	bx	lr
 8007390:	20000010 	.word	0x20000010
 8007394:	ffff0208 	.word	0xffff0208

08007398 <__malloc_lock>:
 8007398:	4801      	ldr	r0, [pc, #4]	; (80073a0 <__malloc_lock+0x8>)
 800739a:	f7ff bef1 	b.w	8007180 <__retarget_lock_acquire_recursive>
 800739e:	bf00      	nop
 80073a0:	20004f9c 	.word	0x20004f9c

080073a4 <__malloc_unlock>:
 80073a4:	4801      	ldr	r0, [pc, #4]	; (80073ac <__malloc_unlock+0x8>)
 80073a6:	f7ff beec 	b.w	8007182 <__retarget_lock_release_recursive>
 80073aa:	bf00      	nop
 80073ac:	20004f9c 	.word	0x20004f9c

080073b0 <_free_r>:
 80073b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073b2:	2900      	cmp	r1, #0
 80073b4:	d048      	beq.n	8007448 <_free_r+0x98>
 80073b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073ba:	9001      	str	r0, [sp, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f1a1 0404 	sub.w	r4, r1, #4
 80073c2:	bfb8      	it	lt
 80073c4:	18e4      	addlt	r4, r4, r3
 80073c6:	f7ff ffe7 	bl	8007398 <__malloc_lock>
 80073ca:	4a20      	ldr	r2, [pc, #128]	; (800744c <_free_r+0x9c>)
 80073cc:	9801      	ldr	r0, [sp, #4]
 80073ce:	6813      	ldr	r3, [r2, #0]
 80073d0:	4615      	mov	r5, r2
 80073d2:	b933      	cbnz	r3, 80073e2 <_free_r+0x32>
 80073d4:	6063      	str	r3, [r4, #4]
 80073d6:	6014      	str	r4, [r2, #0]
 80073d8:	b003      	add	sp, #12
 80073da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073de:	f7ff bfe1 	b.w	80073a4 <__malloc_unlock>
 80073e2:	42a3      	cmp	r3, r4
 80073e4:	d90b      	bls.n	80073fe <_free_r+0x4e>
 80073e6:	6821      	ldr	r1, [r4, #0]
 80073e8:	1862      	adds	r2, r4, r1
 80073ea:	4293      	cmp	r3, r2
 80073ec:	bf04      	itt	eq
 80073ee:	681a      	ldreq	r2, [r3, #0]
 80073f0:	685b      	ldreq	r3, [r3, #4]
 80073f2:	6063      	str	r3, [r4, #4]
 80073f4:	bf04      	itt	eq
 80073f6:	1852      	addeq	r2, r2, r1
 80073f8:	6022      	streq	r2, [r4, #0]
 80073fa:	602c      	str	r4, [r5, #0]
 80073fc:	e7ec      	b.n	80073d8 <_free_r+0x28>
 80073fe:	461a      	mov	r2, r3
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	b10b      	cbz	r3, 8007408 <_free_r+0x58>
 8007404:	42a3      	cmp	r3, r4
 8007406:	d9fa      	bls.n	80073fe <_free_r+0x4e>
 8007408:	6811      	ldr	r1, [r2, #0]
 800740a:	1855      	adds	r5, r2, r1
 800740c:	42a5      	cmp	r5, r4
 800740e:	d10b      	bne.n	8007428 <_free_r+0x78>
 8007410:	6824      	ldr	r4, [r4, #0]
 8007412:	4421      	add	r1, r4
 8007414:	1854      	adds	r4, r2, r1
 8007416:	42a3      	cmp	r3, r4
 8007418:	6011      	str	r1, [r2, #0]
 800741a:	d1dd      	bne.n	80073d8 <_free_r+0x28>
 800741c:	681c      	ldr	r4, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	6053      	str	r3, [r2, #4]
 8007422:	4421      	add	r1, r4
 8007424:	6011      	str	r1, [r2, #0]
 8007426:	e7d7      	b.n	80073d8 <_free_r+0x28>
 8007428:	d902      	bls.n	8007430 <_free_r+0x80>
 800742a:	230c      	movs	r3, #12
 800742c:	6003      	str	r3, [r0, #0]
 800742e:	e7d3      	b.n	80073d8 <_free_r+0x28>
 8007430:	6825      	ldr	r5, [r4, #0]
 8007432:	1961      	adds	r1, r4, r5
 8007434:	428b      	cmp	r3, r1
 8007436:	bf04      	itt	eq
 8007438:	6819      	ldreq	r1, [r3, #0]
 800743a:	685b      	ldreq	r3, [r3, #4]
 800743c:	6063      	str	r3, [r4, #4]
 800743e:	bf04      	itt	eq
 8007440:	1949      	addeq	r1, r1, r5
 8007442:	6021      	streq	r1, [r4, #0]
 8007444:	6054      	str	r4, [r2, #4]
 8007446:	e7c7      	b.n	80073d8 <_free_r+0x28>
 8007448:	b003      	add	sp, #12
 800744a:	bd30      	pop	{r4, r5, pc}
 800744c:	20004a68 	.word	0x20004a68

08007450 <__ssputs_r>:
 8007450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007454:	688e      	ldr	r6, [r1, #8]
 8007456:	429e      	cmp	r6, r3
 8007458:	4682      	mov	sl, r0
 800745a:	460c      	mov	r4, r1
 800745c:	4690      	mov	r8, r2
 800745e:	461f      	mov	r7, r3
 8007460:	d838      	bhi.n	80074d4 <__ssputs_r+0x84>
 8007462:	898a      	ldrh	r2, [r1, #12]
 8007464:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007468:	d032      	beq.n	80074d0 <__ssputs_r+0x80>
 800746a:	6825      	ldr	r5, [r4, #0]
 800746c:	6909      	ldr	r1, [r1, #16]
 800746e:	eba5 0901 	sub.w	r9, r5, r1
 8007472:	6965      	ldr	r5, [r4, #20]
 8007474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007478:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800747c:	3301      	adds	r3, #1
 800747e:	444b      	add	r3, r9
 8007480:	106d      	asrs	r5, r5, #1
 8007482:	429d      	cmp	r5, r3
 8007484:	bf38      	it	cc
 8007486:	461d      	movcc	r5, r3
 8007488:	0553      	lsls	r3, r2, #21
 800748a:	d531      	bpl.n	80074f0 <__ssputs_r+0xa0>
 800748c:	4629      	mov	r1, r5
 800748e:	f7ff fe8f 	bl	80071b0 <_malloc_r>
 8007492:	4606      	mov	r6, r0
 8007494:	b950      	cbnz	r0, 80074ac <__ssputs_r+0x5c>
 8007496:	230c      	movs	r3, #12
 8007498:	f8ca 3000 	str.w	r3, [sl]
 800749c:	89a3      	ldrh	r3, [r4, #12]
 800749e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074a2:	81a3      	strh	r3, [r4, #12]
 80074a4:	f04f 30ff 	mov.w	r0, #4294967295
 80074a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ac:	6921      	ldr	r1, [r4, #16]
 80074ae:	464a      	mov	r2, r9
 80074b0:	f7ff fe68 	bl	8007184 <memcpy>
 80074b4:	89a3      	ldrh	r3, [r4, #12]
 80074b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074be:	81a3      	strh	r3, [r4, #12]
 80074c0:	6126      	str	r6, [r4, #16]
 80074c2:	6165      	str	r5, [r4, #20]
 80074c4:	444e      	add	r6, r9
 80074c6:	eba5 0509 	sub.w	r5, r5, r9
 80074ca:	6026      	str	r6, [r4, #0]
 80074cc:	60a5      	str	r5, [r4, #8]
 80074ce:	463e      	mov	r6, r7
 80074d0:	42be      	cmp	r6, r7
 80074d2:	d900      	bls.n	80074d6 <__ssputs_r+0x86>
 80074d4:	463e      	mov	r6, r7
 80074d6:	4632      	mov	r2, r6
 80074d8:	6820      	ldr	r0, [r4, #0]
 80074da:	4641      	mov	r1, r8
 80074dc:	f000 faa8 	bl	8007a30 <memmove>
 80074e0:	68a3      	ldr	r3, [r4, #8]
 80074e2:	6822      	ldr	r2, [r4, #0]
 80074e4:	1b9b      	subs	r3, r3, r6
 80074e6:	4432      	add	r2, r6
 80074e8:	60a3      	str	r3, [r4, #8]
 80074ea:	6022      	str	r2, [r4, #0]
 80074ec:	2000      	movs	r0, #0
 80074ee:	e7db      	b.n	80074a8 <__ssputs_r+0x58>
 80074f0:	462a      	mov	r2, r5
 80074f2:	f000 fab7 	bl	8007a64 <_realloc_r>
 80074f6:	4606      	mov	r6, r0
 80074f8:	2800      	cmp	r0, #0
 80074fa:	d1e1      	bne.n	80074c0 <__ssputs_r+0x70>
 80074fc:	6921      	ldr	r1, [r4, #16]
 80074fe:	4650      	mov	r0, sl
 8007500:	f7ff ff56 	bl	80073b0 <_free_r>
 8007504:	e7c7      	b.n	8007496 <__ssputs_r+0x46>
	...

08007508 <_svfiprintf_r>:
 8007508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800750c:	4698      	mov	r8, r3
 800750e:	898b      	ldrh	r3, [r1, #12]
 8007510:	061b      	lsls	r3, r3, #24
 8007512:	b09d      	sub	sp, #116	; 0x74
 8007514:	4607      	mov	r7, r0
 8007516:	460d      	mov	r5, r1
 8007518:	4614      	mov	r4, r2
 800751a:	d50e      	bpl.n	800753a <_svfiprintf_r+0x32>
 800751c:	690b      	ldr	r3, [r1, #16]
 800751e:	b963      	cbnz	r3, 800753a <_svfiprintf_r+0x32>
 8007520:	2140      	movs	r1, #64	; 0x40
 8007522:	f7ff fe45 	bl	80071b0 <_malloc_r>
 8007526:	6028      	str	r0, [r5, #0]
 8007528:	6128      	str	r0, [r5, #16]
 800752a:	b920      	cbnz	r0, 8007536 <_svfiprintf_r+0x2e>
 800752c:	230c      	movs	r3, #12
 800752e:	603b      	str	r3, [r7, #0]
 8007530:	f04f 30ff 	mov.w	r0, #4294967295
 8007534:	e0d1      	b.n	80076da <_svfiprintf_r+0x1d2>
 8007536:	2340      	movs	r3, #64	; 0x40
 8007538:	616b      	str	r3, [r5, #20]
 800753a:	2300      	movs	r3, #0
 800753c:	9309      	str	r3, [sp, #36]	; 0x24
 800753e:	2320      	movs	r3, #32
 8007540:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007544:	f8cd 800c 	str.w	r8, [sp, #12]
 8007548:	2330      	movs	r3, #48	; 0x30
 800754a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80076f4 <_svfiprintf_r+0x1ec>
 800754e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007552:	f04f 0901 	mov.w	r9, #1
 8007556:	4623      	mov	r3, r4
 8007558:	469a      	mov	sl, r3
 800755a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800755e:	b10a      	cbz	r2, 8007564 <_svfiprintf_r+0x5c>
 8007560:	2a25      	cmp	r2, #37	; 0x25
 8007562:	d1f9      	bne.n	8007558 <_svfiprintf_r+0x50>
 8007564:	ebba 0b04 	subs.w	fp, sl, r4
 8007568:	d00b      	beq.n	8007582 <_svfiprintf_r+0x7a>
 800756a:	465b      	mov	r3, fp
 800756c:	4622      	mov	r2, r4
 800756e:	4629      	mov	r1, r5
 8007570:	4638      	mov	r0, r7
 8007572:	f7ff ff6d 	bl	8007450 <__ssputs_r>
 8007576:	3001      	adds	r0, #1
 8007578:	f000 80aa 	beq.w	80076d0 <_svfiprintf_r+0x1c8>
 800757c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800757e:	445a      	add	r2, fp
 8007580:	9209      	str	r2, [sp, #36]	; 0x24
 8007582:	f89a 3000 	ldrb.w	r3, [sl]
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 80a2 	beq.w	80076d0 <_svfiprintf_r+0x1c8>
 800758c:	2300      	movs	r3, #0
 800758e:	f04f 32ff 	mov.w	r2, #4294967295
 8007592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007596:	f10a 0a01 	add.w	sl, sl, #1
 800759a:	9304      	str	r3, [sp, #16]
 800759c:	9307      	str	r3, [sp, #28]
 800759e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075a2:	931a      	str	r3, [sp, #104]	; 0x68
 80075a4:	4654      	mov	r4, sl
 80075a6:	2205      	movs	r2, #5
 80075a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ac:	4851      	ldr	r0, [pc, #324]	; (80076f4 <_svfiprintf_r+0x1ec>)
 80075ae:	f7f8 fe37 	bl	8000220 <memchr>
 80075b2:	9a04      	ldr	r2, [sp, #16]
 80075b4:	b9d8      	cbnz	r0, 80075ee <_svfiprintf_r+0xe6>
 80075b6:	06d0      	lsls	r0, r2, #27
 80075b8:	bf44      	itt	mi
 80075ba:	2320      	movmi	r3, #32
 80075bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075c0:	0711      	lsls	r1, r2, #28
 80075c2:	bf44      	itt	mi
 80075c4:	232b      	movmi	r3, #43	; 0x2b
 80075c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075ca:	f89a 3000 	ldrb.w	r3, [sl]
 80075ce:	2b2a      	cmp	r3, #42	; 0x2a
 80075d0:	d015      	beq.n	80075fe <_svfiprintf_r+0xf6>
 80075d2:	9a07      	ldr	r2, [sp, #28]
 80075d4:	4654      	mov	r4, sl
 80075d6:	2000      	movs	r0, #0
 80075d8:	f04f 0c0a 	mov.w	ip, #10
 80075dc:	4621      	mov	r1, r4
 80075de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075e2:	3b30      	subs	r3, #48	; 0x30
 80075e4:	2b09      	cmp	r3, #9
 80075e6:	d94e      	bls.n	8007686 <_svfiprintf_r+0x17e>
 80075e8:	b1b0      	cbz	r0, 8007618 <_svfiprintf_r+0x110>
 80075ea:	9207      	str	r2, [sp, #28]
 80075ec:	e014      	b.n	8007618 <_svfiprintf_r+0x110>
 80075ee:	eba0 0308 	sub.w	r3, r0, r8
 80075f2:	fa09 f303 	lsl.w	r3, r9, r3
 80075f6:	4313      	orrs	r3, r2
 80075f8:	9304      	str	r3, [sp, #16]
 80075fa:	46a2      	mov	sl, r4
 80075fc:	e7d2      	b.n	80075a4 <_svfiprintf_r+0x9c>
 80075fe:	9b03      	ldr	r3, [sp, #12]
 8007600:	1d19      	adds	r1, r3, #4
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	9103      	str	r1, [sp, #12]
 8007606:	2b00      	cmp	r3, #0
 8007608:	bfbb      	ittet	lt
 800760a:	425b      	neglt	r3, r3
 800760c:	f042 0202 	orrlt.w	r2, r2, #2
 8007610:	9307      	strge	r3, [sp, #28]
 8007612:	9307      	strlt	r3, [sp, #28]
 8007614:	bfb8      	it	lt
 8007616:	9204      	strlt	r2, [sp, #16]
 8007618:	7823      	ldrb	r3, [r4, #0]
 800761a:	2b2e      	cmp	r3, #46	; 0x2e
 800761c:	d10c      	bne.n	8007638 <_svfiprintf_r+0x130>
 800761e:	7863      	ldrb	r3, [r4, #1]
 8007620:	2b2a      	cmp	r3, #42	; 0x2a
 8007622:	d135      	bne.n	8007690 <_svfiprintf_r+0x188>
 8007624:	9b03      	ldr	r3, [sp, #12]
 8007626:	1d1a      	adds	r2, r3, #4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	9203      	str	r2, [sp, #12]
 800762c:	2b00      	cmp	r3, #0
 800762e:	bfb8      	it	lt
 8007630:	f04f 33ff 	movlt.w	r3, #4294967295
 8007634:	3402      	adds	r4, #2
 8007636:	9305      	str	r3, [sp, #20]
 8007638:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007704 <_svfiprintf_r+0x1fc>
 800763c:	7821      	ldrb	r1, [r4, #0]
 800763e:	2203      	movs	r2, #3
 8007640:	4650      	mov	r0, sl
 8007642:	f7f8 fded 	bl	8000220 <memchr>
 8007646:	b140      	cbz	r0, 800765a <_svfiprintf_r+0x152>
 8007648:	2340      	movs	r3, #64	; 0x40
 800764a:	eba0 000a 	sub.w	r0, r0, sl
 800764e:	fa03 f000 	lsl.w	r0, r3, r0
 8007652:	9b04      	ldr	r3, [sp, #16]
 8007654:	4303      	orrs	r3, r0
 8007656:	3401      	adds	r4, #1
 8007658:	9304      	str	r3, [sp, #16]
 800765a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800765e:	4826      	ldr	r0, [pc, #152]	; (80076f8 <_svfiprintf_r+0x1f0>)
 8007660:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007664:	2206      	movs	r2, #6
 8007666:	f7f8 fddb 	bl	8000220 <memchr>
 800766a:	2800      	cmp	r0, #0
 800766c:	d038      	beq.n	80076e0 <_svfiprintf_r+0x1d8>
 800766e:	4b23      	ldr	r3, [pc, #140]	; (80076fc <_svfiprintf_r+0x1f4>)
 8007670:	bb1b      	cbnz	r3, 80076ba <_svfiprintf_r+0x1b2>
 8007672:	9b03      	ldr	r3, [sp, #12]
 8007674:	3307      	adds	r3, #7
 8007676:	f023 0307 	bic.w	r3, r3, #7
 800767a:	3308      	adds	r3, #8
 800767c:	9303      	str	r3, [sp, #12]
 800767e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007680:	4433      	add	r3, r6
 8007682:	9309      	str	r3, [sp, #36]	; 0x24
 8007684:	e767      	b.n	8007556 <_svfiprintf_r+0x4e>
 8007686:	fb0c 3202 	mla	r2, ip, r2, r3
 800768a:	460c      	mov	r4, r1
 800768c:	2001      	movs	r0, #1
 800768e:	e7a5      	b.n	80075dc <_svfiprintf_r+0xd4>
 8007690:	2300      	movs	r3, #0
 8007692:	3401      	adds	r4, #1
 8007694:	9305      	str	r3, [sp, #20]
 8007696:	4619      	mov	r1, r3
 8007698:	f04f 0c0a 	mov.w	ip, #10
 800769c:	4620      	mov	r0, r4
 800769e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076a2:	3a30      	subs	r2, #48	; 0x30
 80076a4:	2a09      	cmp	r2, #9
 80076a6:	d903      	bls.n	80076b0 <_svfiprintf_r+0x1a8>
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d0c5      	beq.n	8007638 <_svfiprintf_r+0x130>
 80076ac:	9105      	str	r1, [sp, #20]
 80076ae:	e7c3      	b.n	8007638 <_svfiprintf_r+0x130>
 80076b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80076b4:	4604      	mov	r4, r0
 80076b6:	2301      	movs	r3, #1
 80076b8:	e7f0      	b.n	800769c <_svfiprintf_r+0x194>
 80076ba:	ab03      	add	r3, sp, #12
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	462a      	mov	r2, r5
 80076c0:	4b0f      	ldr	r3, [pc, #60]	; (8007700 <_svfiprintf_r+0x1f8>)
 80076c2:	a904      	add	r1, sp, #16
 80076c4:	4638      	mov	r0, r7
 80076c6:	f3af 8000 	nop.w
 80076ca:	1c42      	adds	r2, r0, #1
 80076cc:	4606      	mov	r6, r0
 80076ce:	d1d6      	bne.n	800767e <_svfiprintf_r+0x176>
 80076d0:	89ab      	ldrh	r3, [r5, #12]
 80076d2:	065b      	lsls	r3, r3, #25
 80076d4:	f53f af2c 	bmi.w	8007530 <_svfiprintf_r+0x28>
 80076d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076da:	b01d      	add	sp, #116	; 0x74
 80076dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e0:	ab03      	add	r3, sp, #12
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	462a      	mov	r2, r5
 80076e6:	4b06      	ldr	r3, [pc, #24]	; (8007700 <_svfiprintf_r+0x1f8>)
 80076e8:	a904      	add	r1, sp, #16
 80076ea:	4638      	mov	r0, r7
 80076ec:	f000 f87a 	bl	80077e4 <_printf_i>
 80076f0:	e7eb      	b.n	80076ca <_svfiprintf_r+0x1c2>
 80076f2:	bf00      	nop
 80076f4:	08007c50 	.word	0x08007c50
 80076f8:	08007c5a 	.word	0x08007c5a
 80076fc:	00000000 	.word	0x00000000
 8007700:	08007451 	.word	0x08007451
 8007704:	08007c56 	.word	0x08007c56

08007708 <_printf_common>:
 8007708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800770c:	4616      	mov	r6, r2
 800770e:	4699      	mov	r9, r3
 8007710:	688a      	ldr	r2, [r1, #8]
 8007712:	690b      	ldr	r3, [r1, #16]
 8007714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007718:	4293      	cmp	r3, r2
 800771a:	bfb8      	it	lt
 800771c:	4613      	movlt	r3, r2
 800771e:	6033      	str	r3, [r6, #0]
 8007720:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007724:	4607      	mov	r7, r0
 8007726:	460c      	mov	r4, r1
 8007728:	b10a      	cbz	r2, 800772e <_printf_common+0x26>
 800772a:	3301      	adds	r3, #1
 800772c:	6033      	str	r3, [r6, #0]
 800772e:	6823      	ldr	r3, [r4, #0]
 8007730:	0699      	lsls	r1, r3, #26
 8007732:	bf42      	ittt	mi
 8007734:	6833      	ldrmi	r3, [r6, #0]
 8007736:	3302      	addmi	r3, #2
 8007738:	6033      	strmi	r3, [r6, #0]
 800773a:	6825      	ldr	r5, [r4, #0]
 800773c:	f015 0506 	ands.w	r5, r5, #6
 8007740:	d106      	bne.n	8007750 <_printf_common+0x48>
 8007742:	f104 0a19 	add.w	sl, r4, #25
 8007746:	68e3      	ldr	r3, [r4, #12]
 8007748:	6832      	ldr	r2, [r6, #0]
 800774a:	1a9b      	subs	r3, r3, r2
 800774c:	42ab      	cmp	r3, r5
 800774e:	dc26      	bgt.n	800779e <_printf_common+0x96>
 8007750:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007754:	1e13      	subs	r3, r2, #0
 8007756:	6822      	ldr	r2, [r4, #0]
 8007758:	bf18      	it	ne
 800775a:	2301      	movne	r3, #1
 800775c:	0692      	lsls	r2, r2, #26
 800775e:	d42b      	bmi.n	80077b8 <_printf_common+0xb0>
 8007760:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007764:	4649      	mov	r1, r9
 8007766:	4638      	mov	r0, r7
 8007768:	47c0      	blx	r8
 800776a:	3001      	adds	r0, #1
 800776c:	d01e      	beq.n	80077ac <_printf_common+0xa4>
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	68e5      	ldr	r5, [r4, #12]
 8007772:	6832      	ldr	r2, [r6, #0]
 8007774:	f003 0306 	and.w	r3, r3, #6
 8007778:	2b04      	cmp	r3, #4
 800777a:	bf08      	it	eq
 800777c:	1aad      	subeq	r5, r5, r2
 800777e:	68a3      	ldr	r3, [r4, #8]
 8007780:	6922      	ldr	r2, [r4, #16]
 8007782:	bf0c      	ite	eq
 8007784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007788:	2500      	movne	r5, #0
 800778a:	4293      	cmp	r3, r2
 800778c:	bfc4      	itt	gt
 800778e:	1a9b      	subgt	r3, r3, r2
 8007790:	18ed      	addgt	r5, r5, r3
 8007792:	2600      	movs	r6, #0
 8007794:	341a      	adds	r4, #26
 8007796:	42b5      	cmp	r5, r6
 8007798:	d11a      	bne.n	80077d0 <_printf_common+0xc8>
 800779a:	2000      	movs	r0, #0
 800779c:	e008      	b.n	80077b0 <_printf_common+0xa8>
 800779e:	2301      	movs	r3, #1
 80077a0:	4652      	mov	r2, sl
 80077a2:	4649      	mov	r1, r9
 80077a4:	4638      	mov	r0, r7
 80077a6:	47c0      	blx	r8
 80077a8:	3001      	adds	r0, #1
 80077aa:	d103      	bne.n	80077b4 <_printf_common+0xac>
 80077ac:	f04f 30ff 	mov.w	r0, #4294967295
 80077b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b4:	3501      	adds	r5, #1
 80077b6:	e7c6      	b.n	8007746 <_printf_common+0x3e>
 80077b8:	18e1      	adds	r1, r4, r3
 80077ba:	1c5a      	adds	r2, r3, #1
 80077bc:	2030      	movs	r0, #48	; 0x30
 80077be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077c2:	4422      	add	r2, r4
 80077c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077cc:	3302      	adds	r3, #2
 80077ce:	e7c7      	b.n	8007760 <_printf_common+0x58>
 80077d0:	2301      	movs	r3, #1
 80077d2:	4622      	mov	r2, r4
 80077d4:	4649      	mov	r1, r9
 80077d6:	4638      	mov	r0, r7
 80077d8:	47c0      	blx	r8
 80077da:	3001      	adds	r0, #1
 80077dc:	d0e6      	beq.n	80077ac <_printf_common+0xa4>
 80077de:	3601      	adds	r6, #1
 80077e0:	e7d9      	b.n	8007796 <_printf_common+0x8e>
	...

080077e4 <_printf_i>:
 80077e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077e8:	460c      	mov	r4, r1
 80077ea:	4691      	mov	r9, r2
 80077ec:	7e27      	ldrb	r7, [r4, #24]
 80077ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80077f0:	2f78      	cmp	r7, #120	; 0x78
 80077f2:	4680      	mov	r8, r0
 80077f4:	469a      	mov	sl, r3
 80077f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077fa:	d807      	bhi.n	800780c <_printf_i+0x28>
 80077fc:	2f62      	cmp	r7, #98	; 0x62
 80077fe:	d80a      	bhi.n	8007816 <_printf_i+0x32>
 8007800:	2f00      	cmp	r7, #0
 8007802:	f000 80d8 	beq.w	80079b6 <_printf_i+0x1d2>
 8007806:	2f58      	cmp	r7, #88	; 0x58
 8007808:	f000 80a3 	beq.w	8007952 <_printf_i+0x16e>
 800780c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007810:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007814:	e03a      	b.n	800788c <_printf_i+0xa8>
 8007816:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800781a:	2b15      	cmp	r3, #21
 800781c:	d8f6      	bhi.n	800780c <_printf_i+0x28>
 800781e:	a001      	add	r0, pc, #4	; (adr r0, 8007824 <_printf_i+0x40>)
 8007820:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007824:	0800787d 	.word	0x0800787d
 8007828:	08007891 	.word	0x08007891
 800782c:	0800780d 	.word	0x0800780d
 8007830:	0800780d 	.word	0x0800780d
 8007834:	0800780d 	.word	0x0800780d
 8007838:	0800780d 	.word	0x0800780d
 800783c:	08007891 	.word	0x08007891
 8007840:	0800780d 	.word	0x0800780d
 8007844:	0800780d 	.word	0x0800780d
 8007848:	0800780d 	.word	0x0800780d
 800784c:	0800780d 	.word	0x0800780d
 8007850:	0800799d 	.word	0x0800799d
 8007854:	080078c1 	.word	0x080078c1
 8007858:	0800797f 	.word	0x0800797f
 800785c:	0800780d 	.word	0x0800780d
 8007860:	0800780d 	.word	0x0800780d
 8007864:	080079bf 	.word	0x080079bf
 8007868:	0800780d 	.word	0x0800780d
 800786c:	080078c1 	.word	0x080078c1
 8007870:	0800780d 	.word	0x0800780d
 8007874:	0800780d 	.word	0x0800780d
 8007878:	08007987 	.word	0x08007987
 800787c:	680b      	ldr	r3, [r1, #0]
 800787e:	1d1a      	adds	r2, r3, #4
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	600a      	str	r2, [r1, #0]
 8007884:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800788c:	2301      	movs	r3, #1
 800788e:	e0a3      	b.n	80079d8 <_printf_i+0x1f4>
 8007890:	6825      	ldr	r5, [r4, #0]
 8007892:	6808      	ldr	r0, [r1, #0]
 8007894:	062e      	lsls	r6, r5, #24
 8007896:	f100 0304 	add.w	r3, r0, #4
 800789a:	d50a      	bpl.n	80078b2 <_printf_i+0xce>
 800789c:	6805      	ldr	r5, [r0, #0]
 800789e:	600b      	str	r3, [r1, #0]
 80078a0:	2d00      	cmp	r5, #0
 80078a2:	da03      	bge.n	80078ac <_printf_i+0xc8>
 80078a4:	232d      	movs	r3, #45	; 0x2d
 80078a6:	426d      	negs	r5, r5
 80078a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078ac:	485e      	ldr	r0, [pc, #376]	; (8007a28 <_printf_i+0x244>)
 80078ae:	230a      	movs	r3, #10
 80078b0:	e019      	b.n	80078e6 <_printf_i+0x102>
 80078b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80078b6:	6805      	ldr	r5, [r0, #0]
 80078b8:	600b      	str	r3, [r1, #0]
 80078ba:	bf18      	it	ne
 80078bc:	b22d      	sxthne	r5, r5
 80078be:	e7ef      	b.n	80078a0 <_printf_i+0xbc>
 80078c0:	680b      	ldr	r3, [r1, #0]
 80078c2:	6825      	ldr	r5, [r4, #0]
 80078c4:	1d18      	adds	r0, r3, #4
 80078c6:	6008      	str	r0, [r1, #0]
 80078c8:	0628      	lsls	r0, r5, #24
 80078ca:	d501      	bpl.n	80078d0 <_printf_i+0xec>
 80078cc:	681d      	ldr	r5, [r3, #0]
 80078ce:	e002      	b.n	80078d6 <_printf_i+0xf2>
 80078d0:	0669      	lsls	r1, r5, #25
 80078d2:	d5fb      	bpl.n	80078cc <_printf_i+0xe8>
 80078d4:	881d      	ldrh	r5, [r3, #0]
 80078d6:	4854      	ldr	r0, [pc, #336]	; (8007a28 <_printf_i+0x244>)
 80078d8:	2f6f      	cmp	r7, #111	; 0x6f
 80078da:	bf0c      	ite	eq
 80078dc:	2308      	moveq	r3, #8
 80078de:	230a      	movne	r3, #10
 80078e0:	2100      	movs	r1, #0
 80078e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078e6:	6866      	ldr	r6, [r4, #4]
 80078e8:	60a6      	str	r6, [r4, #8]
 80078ea:	2e00      	cmp	r6, #0
 80078ec:	bfa2      	ittt	ge
 80078ee:	6821      	ldrge	r1, [r4, #0]
 80078f0:	f021 0104 	bicge.w	r1, r1, #4
 80078f4:	6021      	strge	r1, [r4, #0]
 80078f6:	b90d      	cbnz	r5, 80078fc <_printf_i+0x118>
 80078f8:	2e00      	cmp	r6, #0
 80078fa:	d04d      	beq.n	8007998 <_printf_i+0x1b4>
 80078fc:	4616      	mov	r6, r2
 80078fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007902:	fb03 5711 	mls	r7, r3, r1, r5
 8007906:	5dc7      	ldrb	r7, [r0, r7]
 8007908:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800790c:	462f      	mov	r7, r5
 800790e:	42bb      	cmp	r3, r7
 8007910:	460d      	mov	r5, r1
 8007912:	d9f4      	bls.n	80078fe <_printf_i+0x11a>
 8007914:	2b08      	cmp	r3, #8
 8007916:	d10b      	bne.n	8007930 <_printf_i+0x14c>
 8007918:	6823      	ldr	r3, [r4, #0]
 800791a:	07df      	lsls	r7, r3, #31
 800791c:	d508      	bpl.n	8007930 <_printf_i+0x14c>
 800791e:	6923      	ldr	r3, [r4, #16]
 8007920:	6861      	ldr	r1, [r4, #4]
 8007922:	4299      	cmp	r1, r3
 8007924:	bfde      	ittt	le
 8007926:	2330      	movle	r3, #48	; 0x30
 8007928:	f806 3c01 	strble.w	r3, [r6, #-1]
 800792c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007930:	1b92      	subs	r2, r2, r6
 8007932:	6122      	str	r2, [r4, #16]
 8007934:	f8cd a000 	str.w	sl, [sp]
 8007938:	464b      	mov	r3, r9
 800793a:	aa03      	add	r2, sp, #12
 800793c:	4621      	mov	r1, r4
 800793e:	4640      	mov	r0, r8
 8007940:	f7ff fee2 	bl	8007708 <_printf_common>
 8007944:	3001      	adds	r0, #1
 8007946:	d14c      	bne.n	80079e2 <_printf_i+0x1fe>
 8007948:	f04f 30ff 	mov.w	r0, #4294967295
 800794c:	b004      	add	sp, #16
 800794e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007952:	4835      	ldr	r0, [pc, #212]	; (8007a28 <_printf_i+0x244>)
 8007954:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007958:	6823      	ldr	r3, [r4, #0]
 800795a:	680e      	ldr	r6, [r1, #0]
 800795c:	061f      	lsls	r7, r3, #24
 800795e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007962:	600e      	str	r6, [r1, #0]
 8007964:	d514      	bpl.n	8007990 <_printf_i+0x1ac>
 8007966:	07d9      	lsls	r1, r3, #31
 8007968:	bf44      	itt	mi
 800796a:	f043 0320 	orrmi.w	r3, r3, #32
 800796e:	6023      	strmi	r3, [r4, #0]
 8007970:	b91d      	cbnz	r5, 800797a <_printf_i+0x196>
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	f023 0320 	bic.w	r3, r3, #32
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	2310      	movs	r3, #16
 800797c:	e7b0      	b.n	80078e0 <_printf_i+0xfc>
 800797e:	6823      	ldr	r3, [r4, #0]
 8007980:	f043 0320 	orr.w	r3, r3, #32
 8007984:	6023      	str	r3, [r4, #0]
 8007986:	2378      	movs	r3, #120	; 0x78
 8007988:	4828      	ldr	r0, [pc, #160]	; (8007a2c <_printf_i+0x248>)
 800798a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800798e:	e7e3      	b.n	8007958 <_printf_i+0x174>
 8007990:	065e      	lsls	r6, r3, #25
 8007992:	bf48      	it	mi
 8007994:	b2ad      	uxthmi	r5, r5
 8007996:	e7e6      	b.n	8007966 <_printf_i+0x182>
 8007998:	4616      	mov	r6, r2
 800799a:	e7bb      	b.n	8007914 <_printf_i+0x130>
 800799c:	680b      	ldr	r3, [r1, #0]
 800799e:	6826      	ldr	r6, [r4, #0]
 80079a0:	6960      	ldr	r0, [r4, #20]
 80079a2:	1d1d      	adds	r5, r3, #4
 80079a4:	600d      	str	r5, [r1, #0]
 80079a6:	0635      	lsls	r5, r6, #24
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	d501      	bpl.n	80079b0 <_printf_i+0x1cc>
 80079ac:	6018      	str	r0, [r3, #0]
 80079ae:	e002      	b.n	80079b6 <_printf_i+0x1d2>
 80079b0:	0671      	lsls	r1, r6, #25
 80079b2:	d5fb      	bpl.n	80079ac <_printf_i+0x1c8>
 80079b4:	8018      	strh	r0, [r3, #0]
 80079b6:	2300      	movs	r3, #0
 80079b8:	6123      	str	r3, [r4, #16]
 80079ba:	4616      	mov	r6, r2
 80079bc:	e7ba      	b.n	8007934 <_printf_i+0x150>
 80079be:	680b      	ldr	r3, [r1, #0]
 80079c0:	1d1a      	adds	r2, r3, #4
 80079c2:	600a      	str	r2, [r1, #0]
 80079c4:	681e      	ldr	r6, [r3, #0]
 80079c6:	6862      	ldr	r2, [r4, #4]
 80079c8:	2100      	movs	r1, #0
 80079ca:	4630      	mov	r0, r6
 80079cc:	f7f8 fc28 	bl	8000220 <memchr>
 80079d0:	b108      	cbz	r0, 80079d6 <_printf_i+0x1f2>
 80079d2:	1b80      	subs	r0, r0, r6
 80079d4:	6060      	str	r0, [r4, #4]
 80079d6:	6863      	ldr	r3, [r4, #4]
 80079d8:	6123      	str	r3, [r4, #16]
 80079da:	2300      	movs	r3, #0
 80079dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079e0:	e7a8      	b.n	8007934 <_printf_i+0x150>
 80079e2:	6923      	ldr	r3, [r4, #16]
 80079e4:	4632      	mov	r2, r6
 80079e6:	4649      	mov	r1, r9
 80079e8:	4640      	mov	r0, r8
 80079ea:	47d0      	blx	sl
 80079ec:	3001      	adds	r0, #1
 80079ee:	d0ab      	beq.n	8007948 <_printf_i+0x164>
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	079b      	lsls	r3, r3, #30
 80079f4:	d413      	bmi.n	8007a1e <_printf_i+0x23a>
 80079f6:	68e0      	ldr	r0, [r4, #12]
 80079f8:	9b03      	ldr	r3, [sp, #12]
 80079fa:	4298      	cmp	r0, r3
 80079fc:	bfb8      	it	lt
 80079fe:	4618      	movlt	r0, r3
 8007a00:	e7a4      	b.n	800794c <_printf_i+0x168>
 8007a02:	2301      	movs	r3, #1
 8007a04:	4632      	mov	r2, r6
 8007a06:	4649      	mov	r1, r9
 8007a08:	4640      	mov	r0, r8
 8007a0a:	47d0      	blx	sl
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	d09b      	beq.n	8007948 <_printf_i+0x164>
 8007a10:	3501      	adds	r5, #1
 8007a12:	68e3      	ldr	r3, [r4, #12]
 8007a14:	9903      	ldr	r1, [sp, #12]
 8007a16:	1a5b      	subs	r3, r3, r1
 8007a18:	42ab      	cmp	r3, r5
 8007a1a:	dcf2      	bgt.n	8007a02 <_printf_i+0x21e>
 8007a1c:	e7eb      	b.n	80079f6 <_printf_i+0x212>
 8007a1e:	2500      	movs	r5, #0
 8007a20:	f104 0619 	add.w	r6, r4, #25
 8007a24:	e7f5      	b.n	8007a12 <_printf_i+0x22e>
 8007a26:	bf00      	nop
 8007a28:	08007c61 	.word	0x08007c61
 8007a2c:	08007c72 	.word	0x08007c72

08007a30 <memmove>:
 8007a30:	4288      	cmp	r0, r1
 8007a32:	b510      	push	{r4, lr}
 8007a34:	eb01 0402 	add.w	r4, r1, r2
 8007a38:	d902      	bls.n	8007a40 <memmove+0x10>
 8007a3a:	4284      	cmp	r4, r0
 8007a3c:	4623      	mov	r3, r4
 8007a3e:	d807      	bhi.n	8007a50 <memmove+0x20>
 8007a40:	1e43      	subs	r3, r0, #1
 8007a42:	42a1      	cmp	r1, r4
 8007a44:	d008      	beq.n	8007a58 <memmove+0x28>
 8007a46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a4e:	e7f8      	b.n	8007a42 <memmove+0x12>
 8007a50:	4402      	add	r2, r0
 8007a52:	4601      	mov	r1, r0
 8007a54:	428a      	cmp	r2, r1
 8007a56:	d100      	bne.n	8007a5a <memmove+0x2a>
 8007a58:	bd10      	pop	{r4, pc}
 8007a5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a62:	e7f7      	b.n	8007a54 <memmove+0x24>

08007a64 <_realloc_r>:
 8007a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a66:	4607      	mov	r7, r0
 8007a68:	4614      	mov	r4, r2
 8007a6a:	460e      	mov	r6, r1
 8007a6c:	b921      	cbnz	r1, 8007a78 <_realloc_r+0x14>
 8007a6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007a72:	4611      	mov	r1, r2
 8007a74:	f7ff bb9c 	b.w	80071b0 <_malloc_r>
 8007a78:	b922      	cbnz	r2, 8007a84 <_realloc_r+0x20>
 8007a7a:	f7ff fc99 	bl	80073b0 <_free_r>
 8007a7e:	4625      	mov	r5, r4
 8007a80:	4628      	mov	r0, r5
 8007a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a84:	f000 f814 	bl	8007ab0 <_malloc_usable_size_r>
 8007a88:	42a0      	cmp	r0, r4
 8007a8a:	d20f      	bcs.n	8007aac <_realloc_r+0x48>
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	4638      	mov	r0, r7
 8007a90:	f7ff fb8e 	bl	80071b0 <_malloc_r>
 8007a94:	4605      	mov	r5, r0
 8007a96:	2800      	cmp	r0, #0
 8007a98:	d0f2      	beq.n	8007a80 <_realloc_r+0x1c>
 8007a9a:	4631      	mov	r1, r6
 8007a9c:	4622      	mov	r2, r4
 8007a9e:	f7ff fb71 	bl	8007184 <memcpy>
 8007aa2:	4631      	mov	r1, r6
 8007aa4:	4638      	mov	r0, r7
 8007aa6:	f7ff fc83 	bl	80073b0 <_free_r>
 8007aaa:	e7e9      	b.n	8007a80 <_realloc_r+0x1c>
 8007aac:	4635      	mov	r5, r6
 8007aae:	e7e7      	b.n	8007a80 <_realloc_r+0x1c>

08007ab0 <_malloc_usable_size_r>:
 8007ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ab4:	1f18      	subs	r0, r3, #4
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	bfbc      	itt	lt
 8007aba:	580b      	ldrlt	r3, [r1, r0]
 8007abc:	18c0      	addlt	r0, r0, r3
 8007abe:	4770      	bx	lr

08007ac0 <_init>:
 8007ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac2:	bf00      	nop
 8007ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac6:	bc08      	pop	{r3}
 8007ac8:	469e      	mov	lr, r3
 8007aca:	4770      	bx	lr

08007acc <_fini>:
 8007acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ace:	bf00      	nop
 8007ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad2:	bc08      	pop	{r3}
 8007ad4:	469e      	mov	lr, r3
 8007ad6:	4770      	bx	lr
