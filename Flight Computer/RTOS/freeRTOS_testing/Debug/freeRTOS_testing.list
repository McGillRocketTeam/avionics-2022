
freeRTOS_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08008270  08008270  00018270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008490  08008490  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008490  08008490  00018490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008498  08008498  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008498  08008498  00018498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800849c  0800849c  0001849c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080084a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f44  20000074  08008514  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004fb8  08008514  00024fb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000247c3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044ea  00000000  00000000  00044867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a98  00000000  00000000  00048d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001900  00000000  00000000  0004a7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000258e5  00000000  00000000  0004c0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e2ef  00000000  00000000  000719d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2ff3  00000000  00000000  0008fcc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172cb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007624  00000000  00000000  00172d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008258 	.word	0x08008258

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08008258 	.word	0x08008258

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <PreSleepProcessing>:

/* USER CODE END FunctionPrototypes */

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t ulExpectedIdleTime)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr

080005cc <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t ulExpectedIdleTime)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fdde 	bl	80011a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f842 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f000 f994 	bl	8000918 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005f0:	f000 f93a 	bl	8000868 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f4:	f000 f962 	bl	80008bc <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 80005f8:	f000 f8aa 	bl	8000750 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005fc:	f004 f92a 	bl	8004854 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinkyTask */
  blinkyTaskHandle = osThreadNew(startBlinkyTask, NULL, &blinkyTask_attributes);
 8000600:	4a10      	ldr	r2, [pc, #64]	; (8000644 <main+0x64>)
 8000602:	2100      	movs	r1, #0
 8000604:	4810      	ldr	r0, [pc, #64]	; (8000648 <main+0x68>)
 8000606:	f004 f96f 	bl	80048e8 <osThreadNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a0f      	ldr	r2, [pc, #60]	; (800064c <main+0x6c>)
 800060e:	6013      	str	r3, [r2, #0]

  /* creation of printState */
  printStateHandle = osThreadNew(startPrintState, NULL, &printState_attributes);
 8000610:	4a0f      	ldr	r2, [pc, #60]	; (8000650 <main+0x70>)
 8000612:	2100      	movs	r1, #0
 8000614:	480f      	ldr	r0, [pc, #60]	; (8000654 <main+0x74>)
 8000616:	f004 f967 	bl	80048e8 <osThreadNew>
 800061a:	4603      	mov	r3, r0
 800061c:	4a0e      	ldr	r2, [pc, #56]	; (8000658 <main+0x78>)
 800061e:	6013      	str	r3, [r2, #0]

  /* creation of alarmPolling */
  alarmPollingHandle = osThreadNew(startAlarmPolling, NULL, &alarmPolling_attributes);
 8000620:	4a0e      	ldr	r2, [pc, #56]	; (800065c <main+0x7c>)
 8000622:	2100      	movs	r1, #0
 8000624:	480e      	ldr	r0, [pc, #56]	; (8000660 <main+0x80>)
 8000626:	f004 f95f 	bl	80048e8 <osThreadNew>
 800062a:	4603      	mov	r3, r0
 800062c:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <main+0x84>)
 800062e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000630:	f004 f934 	bl	800489c <osKernelStart>
	   * Nothing is going to get executed
	   * at this point since the freeRTOS
	   * takes control when osKernelStart is called
	   */

	  HAL_UART_Transmit(&huart3,(uint8_t*)"Main while loop\r\n", 17, HAL_MAX_DELAY);
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	2211      	movs	r2, #17
 800063a:	490b      	ldr	r1, [pc, #44]	; (8000668 <main+0x88>)
 800063c:	480b      	ldr	r0, [pc, #44]	; (800066c <main+0x8c>)
 800063e:	f003 fb22 	bl	8003c86 <HAL_UART_Transmit>
 8000642:	e7f7      	b.n	8000634 <main+0x54>
 8000644:	08008378 	.word	0x08008378
 8000648:	08000ac5 	.word	0x08000ac5
 800064c:	20004f18 	.word	0x20004f18
 8000650:	0800839c 	.word	0x0800839c
 8000654:	08000af1 	.word	0x08000af1
 8000658:	20004ef0 	.word	0x20004ef0
 800065c:	080083c0 	.word	0x080083c0
 8000660:	08000c7d 	.word	0x08000c7d
 8000664:	20004ef4 	.word	0x20004ef4
 8000668:	08008298 	.word	0x08008298
 800066c:	20004a7c 	.word	0x20004a7c

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	; 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	2234      	movs	r2, #52	; 0x34
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f007 f95a 	bl	8007938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <SystemClock_Config+0xd8>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	4a2a      	ldr	r2, [pc, #168]	; (8000748 <SystemClock_Config+0xd8>)
 800069e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a2:	6413      	str	r3, [r2, #64]	; 0x40
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <SystemClock_Config+0xd8>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b0:	2300      	movs	r3, #0
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	4b25      	ldr	r3, [pc, #148]	; (800074c <SystemClock_Config+0xdc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006bc:	4a23      	ldr	r2, [pc, #140]	; (800074c <SystemClock_Config+0xdc>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c2:	6013      	str	r3, [r2, #0]
 80006c4:	4b21      	ldr	r3, [pc, #132]	; (800074c <SystemClock_Config+0xdc>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80006d0:	2305      	movs	r3, #5
 80006d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006da:	2301      	movs	r3, #1
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e8:	2304      	movs	r3, #4
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006ec:	2360      	movs	r3, #96	; 0x60
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80006f0:	2306      	movs	r3, #6
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4618      	mov	r0, r3
 8000702:	f001 fffb 	bl	80026fc <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800070c:	f000 fb26 	bl	8000d5c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000720:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000726:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000728:	f107 0308 	add.w	r3, r7, #8
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f001 f9bc 	bl	8001aac <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800073a:	f000 fb0f 	bl	8000d5c <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	; 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b090      	sub	sp, #64	; 0x40
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000756:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000766:	2300      	movs	r3, #0
 8000768:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2228      	movs	r2, #40	; 0x28
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f007 f8e1 	bl	8007938 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000776:	4b3a      	ldr	r3, [pc, #232]	; (8000860 <MX_RTC_Init+0x110>)
 8000778:	4a3a      	ldr	r2, [pc, #232]	; (8000864 <MX_RTC_Init+0x114>)
 800077a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800077c:	4b38      	ldr	r3, [pc, #224]	; (8000860 <MX_RTC_Init+0x110>)
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000782:	4b37      	ldr	r3, [pc, #220]	; (8000860 <MX_RTC_Init+0x110>)
 8000784:	227f      	movs	r2, #127	; 0x7f
 8000786:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000788:	4b35      	ldr	r3, [pc, #212]	; (8000860 <MX_RTC_Init+0x110>)
 800078a:	22ff      	movs	r2, #255	; 0xff
 800078c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800078e:	4b34      	ldr	r3, [pc, #208]	; (8000860 <MX_RTC_Init+0x110>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000794:	4b32      	ldr	r3, [pc, #200]	; (8000860 <MX_RTC_Init+0x110>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800079a:	4b31      	ldr	r3, [pc, #196]	; (8000860 <MX_RTC_Init+0x110>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007a0:	482f      	ldr	r0, [pc, #188]	; (8000860 <MX_RTC_Init+0x110>)
 80007a2:	f002 fa49 	bl	8002c38 <HAL_RTC_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80007ac:	f000 fad6 	bl	8000d5c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x15;
 80007bc:	2315      	movs	r3, #21
 80007be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007c6:	2300      	movs	r3, #0
 80007c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ce:	2201      	movs	r2, #1
 80007d0:	4619      	mov	r1, r3
 80007d2:	4823      	ldr	r0, [pc, #140]	; (8000860 <MX_RTC_Init+0x110>)
 80007d4:	f002 fac1 	bl	8002d5a <HAL_RTC_SetTime>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80007de:	f000 fabd 	bl	8000d5c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007e2:	2301      	movs	r3, #1
 80007e4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80007e8:	2301      	movs	r3, #1
 80007ea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80007ee:	2301      	movs	r3, #1
 80007f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007fe:	2201      	movs	r2, #1
 8000800:	4619      	mov	r1, r3
 8000802:	4817      	ldr	r0, [pc, #92]	; (8000860 <MX_RTC_Init+0x110>)
 8000804:	f002 fb66 	bl	8002ed4 <HAL_RTC_SetDate>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800080e:	f000 faa5 	bl	8000d5c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000812:	2300      	movs	r3, #0
 8000814:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000816:	2300      	movs	r3, #0
 8000818:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x20;
 800081a:	2320      	movs	r3, #32
 800081c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000836:	2301      	movs	r3, #1
 8000838:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800083c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000842:	463b      	mov	r3, r7
 8000844:	2201      	movs	r2, #1
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_RTC_Init+0x110>)
 800084a:	f002 fbeb 	bl	8003024 <HAL_RTC_SetAlarm_IT>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000854:	f000 fa82 	bl	8000d5c <Error_Handler>
  */
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	3740      	adds	r7, #64	; 0x40
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20004ef8 	.word	0x20004ef8
 8000864:	40002800 	.word	0x40002800

08000868 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 800086e:	4a12      	ldr	r2, [pc, #72]	; (80008b8 <MX_USART3_UART_Init+0x50>)
 8000870:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 8000874:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000878:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_USART3_UART_Init+0x4c>)
 80008a0:	f003 f9a4 	bl	8003bec <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008aa:	f000 fa57 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20004a7c 	.word	0x20004a7c
 80008b8:	40004800 	.word	0x40004800

080008bc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ca:	2206      	movs	r2, #6
 80008cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d0:	2202      	movs	r2, #2
 80008d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008dc:	2202      	movs	r2, #2
 80008de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000900:	f000 ff5f 	bl	80017c2 <HAL_PCD_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800090a:	f000 fa27 	bl	8000d5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20004ae8 	.word	0x20004ae8

08000918 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08c      	sub	sp, #48	; 0x30
 800091c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	2200      	movs	r2, #0
 8000924:	601a      	str	r2, [r3, #0]
 8000926:	605a      	str	r2, [r3, #4]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	60da      	str	r2, [r3, #12]
 800092c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	61bb      	str	r3, [r7, #24]
 8000932:	4b4c      	ldr	r3, [pc, #304]	; (8000a64 <MX_GPIO_Init+0x14c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a4b      	ldr	r2, [pc, #300]	; (8000a64 <MX_GPIO_Init+0x14c>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b49      	ldr	r3, [pc, #292]	; (8000a64 <MX_GPIO_Init+0x14c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	61bb      	str	r3, [r7, #24]
 8000948:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
 800094e:	4b45      	ldr	r3, [pc, #276]	; (8000a64 <MX_GPIO_Init+0x14c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a44      	ldr	r2, [pc, #272]	; (8000a64 <MX_GPIO_Init+0x14c>)
 8000954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b42      	ldr	r3, [pc, #264]	; (8000a64 <MX_GPIO_Init+0x14c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b3e      	ldr	r3, [pc, #248]	; (8000a64 <MX_GPIO_Init+0x14c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a3d      	ldr	r2, [pc, #244]	; (8000a64 <MX_GPIO_Init+0x14c>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b3b      	ldr	r3, [pc, #236]	; (8000a64 <MX_GPIO_Init+0x14c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b37      	ldr	r3, [pc, #220]	; (8000a64 <MX_GPIO_Init+0x14c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a36      	ldr	r2, [pc, #216]	; (8000a64 <MX_GPIO_Init+0x14c>)
 800098c:	f043 0308 	orr.w	r3, r3, #8
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b34      	ldr	r3, [pc, #208]	; (8000a64 <MX_GPIO_Init+0x14c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	4b30      	ldr	r3, [pc, #192]	; (8000a64 <MX_GPIO_Init+0x14c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a2f      	ldr	r2, [pc, #188]	; (8000a64 <MX_GPIO_Init+0x14c>)
 80009a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <MX_GPIO_Init+0x14c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <MX_GPIO_Init+0x14c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a28      	ldr	r2, [pc, #160]	; (8000a64 <MX_GPIO_Init+0x14c>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <MX_GPIO_Init+0x14c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f244 0181 	movw	r1, #16513	; 0x4081
 80009dc:	4822      	ldr	r0, [pc, #136]	; (8000a68 <MX_GPIO_Init+0x150>)
 80009de:	f000 febd 	bl	800175c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2140      	movs	r1, #64	; 0x40
 80009e6:	4821      	ldr	r0, [pc, #132]	; (8000a6c <MX_GPIO_Init+0x154>)
 80009e8:	f000 feb8 	bl	800175c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	481b      	ldr	r0, [pc, #108]	; (8000a70 <MX_GPIO_Init+0x158>)
 8000a04:	f000 fd16 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a08:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_GPIO_Init+0x150>)
 8000a22:	f000 fd07 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a26:	2340      	movs	r3, #64	; 0x40
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 031c 	add.w	r3, r7, #28
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480b      	ldr	r0, [pc, #44]	; (8000a6c <MX_GPIO_Init+0x154>)
 8000a3e:	f000 fcf9 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a42:	2380      	movs	r3, #128	; 0x80
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_GPIO_Init+0x154>)
 8000a56:	f000 fced 	bl	8001434 <HAL_GPIO_Init>

}
 8000a5a:	bf00      	nop
 8000a5c:	3730      	adds	r7, #48	; 0x30
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020400 	.word	0x40020400
 8000a6c:	40021800 	.word	0x40021800
 8000a70:	40020800 	.word	0x40020800

08000a74 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 8000a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a80:	2208      	movs	r2, #8
 8000a82:	4907      	ldr	r1, [pc, #28]	; (8000aa0 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8000a84:	4807      	ldr	r0, [pc, #28]	; (8000aa4 <HAL_RTC_AlarmAEventCallback+0x30>)
 8000a86:	f003 f8fe 	bl	8003c86 <HAL_UART_Transmit>
	flagA = 1;
 8000a8a:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <HAL_RTC_AlarmAEventCallback+0x34>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
	hook=1;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_RTC_AlarmAEventCallback+0x38>)
 8000a92:	2201      	movs	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	080082ac 	.word	0x080082ac
 8000aa4:	20004a7c 	.word	0x20004a7c
 8000aa8:	20000090 	.word	0x20000090
 8000aac:	20000092 	.word	0x20000092

08000ab0 <HAL_RTCEx_WakeUpTimerEventCallback>:
void HAL_RTC_AlarmBEventCallback(RTC_HandleTypeDef *hrtc){
	HAL_UART_Transmit(&huart3,(uint8_t*)"AlarmB\r\n", 8, HAL_MAX_DELAY);
	flagB = 1;
}

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <startBlinkyTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startBlinkyTask */
void startBlinkyTask(void *argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	//Add thread id to the list
	threadID[1]=osThreadGetId();
 8000acc:	f003 ff9e 	bl	8004a0c <osThreadGetId>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <startBlinkyTask+0x24>)
 8000ad4:	6053      	str	r3, [r2, #4]


  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	4804      	ldr	r0, [pc, #16]	; (8000aec <startBlinkyTask+0x28>)
 8000ada:	f000 fe58 	bl	800178e <HAL_GPIO_TogglePin>
    osDelay(300);
 8000ade:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000ae2:	f003 ffcb 	bl	8004a7c <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8000ae6:	e7f6      	b.n	8000ad6 <startBlinkyTask+0x12>
 8000ae8:	20004ac0 	.word	0x20004ac0
 8000aec:	40020400 	.word	0x40020400

08000af0 <startPrintState>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startPrintState */
void startPrintState(void *argument)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startPrintState */

	//Add thread id to the list
	threadID[2]=osThreadGetId();
 8000af8:	f003 ff88 	bl	8004a0c <osThreadGetId>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a55      	ldr	r2, [pc, #340]	; (8000c54 <startPrintState+0x164>)
 8000b00:	6093      	str	r3, [r2, #8]


	//If WU flag set, wake up procedure
	  if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8000b02:	4b55      	ldr	r3, [pc, #340]	; (8000c58 <startPrintState+0x168>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d119      	bne.n	8000b42 <startPrintState+0x52>
	  {
		  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8000b0e:	4b52      	ldr	r3, [pc, #328]	; (8000c58 <startPrintState+0x168>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a51      	ldr	r2, [pc, #324]	; (8000c58 <startPrintState+0x168>)
 8000b14:	f043 0308 	orr.w	r3, r3, #8
 8000b18:	6013      	str	r3, [r2, #0]

		  /** display  the string **/
		  char *str = "Wakeup from the STANDBY MODE\r\n";
 8000b1a:	4b50      	ldr	r3, [pc, #320]	; (8000c5c <startPrintState+0x16c>)
 8000b1c:	60fb      	str	r3, [r7, #12]
		  HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f7ff fb76 	bl	8000210 <strlen>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2c:	68f9      	ldr	r1, [r7, #12]
 8000b2e:	484c      	ldr	r0, [pc, #304]	; (8000c60 <startPrintState+0x170>)
 8000b30:	f003 f8a9 	bl	8003c86 <HAL_UART_Transmit>

		  /** Disable the WWAKEUP PIN **/
		  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8000b34:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b38:	f000 ff8c 	bl	8001a54 <HAL_PWR_DisableWakeUpPin>

		  /** Deactivate the RTC wakeup  **/
		  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000b3c:	4849      	ldr	r0, [pc, #292]	; (8000c64 <startPrintState+0x174>)
 8000b3e:	f002 fd21 	bl	8003584 <HAL_RTCEx_DeactivateWakeUpTimer>
	  }


	  osDelay(3000);
 8000b42:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b46:	f003 ff99 	bl	8004a7c <osDelay>

while(hook!=1){osDelay(10);}
 8000b4a:	e002      	b.n	8000b52 <startPrintState+0x62>
 8000b4c:	200a      	movs	r0, #10
 8000b4e:	f003 ff95 	bl	8004a7c <osDelay>
 8000b52:	4b45      	ldr	r3, [pc, #276]	; (8000c68 <startPrintState+0x178>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d1f8      	bne.n	8000b4c <startPrintState+0x5c>

	hook=0;
 8000b5a:	4b43      	ldr	r3, [pc, #268]	; (8000c68 <startPrintState+0x178>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]

	//Must be after alarm A was activated and before going to sleep

	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8000b60:	4b40      	ldr	r3, [pc, #256]	; (8000c64 <startPrintState+0x174>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	22ca      	movs	r2, #202	; 0xca
 8000b66:	625a      	str	r2, [r3, #36]	; 0x24
 8000b68:	4b3e      	ldr	r3, [pc, #248]	; (8000c64 <startPrintState+0x174>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2253      	movs	r2, #83	; 0x53
 8000b6e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8000b70:	e008      	b.n	8000b84 <startPrintState+0x94>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000b72:	4b3c      	ldr	r3, [pc, #240]	; (8000c64 <startPrintState+0x174>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	4b3a      	ldr	r3, [pc, #232]	; (8000c64 <startPrintState+0x174>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8000b82:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8000b84:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <startPrintState+0x174>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1ef      	bne.n	8000b72 <startPrintState+0x82>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8000b92:	4b34      	ldr	r3, [pc, #208]	; (8000c64 <startPrintState+0x174>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	22ff      	movs	r2, #255	; 0xff
 8000b98:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8000b9a:	4b34      	ldr	r3, [pc, #208]	; (8000c6c <startPrintState+0x17c>)
 8000b9c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ba0:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8000ba2:	4b30      	ldr	r3, [pc, #192]	; (8000c64 <startPrintState+0x174>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	22ca      	movs	r2, #202	; 0xca
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
 8000baa:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <startPrintState+0x174>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2253      	movs	r2, #83	; 0x53
 8000bb0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8000bb2:	e008      	b.n	8000bc6 <startPrintState+0xd6>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8000bb4:	4b2b      	ldr	r3, [pc, #172]	; (8000c64 <startPrintState+0x174>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	68db      	ldr	r3, [r3, #12]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <startPrintState+0x174>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f462 7220 	orn	r2, r2, #640	; 0x280
 8000bc4:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8000bc6:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <startPrintState+0x174>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1ef      	bne.n	8000bb4 <startPrintState+0xc4>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8000bd4:	4b23      	ldr	r3, [pc, #140]	; (8000c64 <startPrintState+0x174>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	22ff      	movs	r2, #255	; 0xff
 8000bda:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8000bdc:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <startPrintState+0x17c>)
 8000bde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000be2:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <startPrintState+0x168>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a1b      	ldr	r2, [pc, #108]	; (8000c58 <startPrintState+0x168>)
 8000bea:	f043 0304 	orr.w	r3, r3, #4
 8000bee:	6013      	str	r3, [r2, #0]
	/* clear the RTC Wake UP (WU) flag */
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <startPrintState+0x174>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <startPrintState+0x174>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000c00:	60da      	str	r2, [r3, #12]
	RTC_WAKEUPCLOCK_RTCCLK_DIV = RTCCLK_Div16 = 16
	Wake-up Time Base = 16 /(32KHz) = 0.0005 seconds
	==> WakeUpCounter = ~5s/0.0005s = 20000 = 0x2710
	*/
	//Setup RTC wake up timer
	HAL_UART_Transmit(&huart3,"Setting up RTCW\r\n", 17, HAL_MAX_DELAY);
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
 8000c06:	2211      	movs	r2, #17
 8000c08:	4919      	ldr	r1, [pc, #100]	; (8000c70 <startPrintState+0x180>)
 8000c0a:	4815      	ldr	r0, [pc, #84]	; (8000c60 <startPrintState+0x170>)
 8000c0c:	f003 f83b 	bl	8003c86 <HAL_UART_Transmit>
	{
	  Error_Handler();
	}
	*/

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 46800, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000c10:	2204      	movs	r2, #4
 8000c12:	f24b 61d0 	movw	r1, #46800	; 0xb6d0
 8000c16:	4813      	ldr	r0, [pc, #76]	; (8000c64 <startPrintState+0x174>)
 8000c18:	f002 fbf4 	bl	8003404 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <startPrintState+0x136>
	{
	  Error_Handler();
 8000c22:	f000 f89b 	bl	8000d5c <Error_Handler>
	}

	HAL_UART_Transmit(&huart3,(uint8_t*)"RTCS\r\n", 6, HAL_MAX_DELAY);
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	2206      	movs	r2, #6
 8000c2c:	4911      	ldr	r1, [pc, #68]	; (8000c74 <startPrintState+0x184>)
 8000c2e:	480c      	ldr	r0, [pc, #48]	; (8000c60 <startPrintState+0x170>)
 8000c30:	f003 f829 	bl	8003c86 <HAL_UART_Transmit>

	HAL_PWR_EnterSTANDBYMode();
 8000c34:	f000 ff22 	bl	8001a7c <HAL_PWR_EnterSTANDBYMode>

	print("Something went wrong")
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3c:	2214      	movs	r2, #20
 8000c3e:	490e      	ldr	r1, [pc, #56]	; (8000c78 <startPrintState+0x188>)
 8000c40:	4807      	ldr	r0, [pc, #28]	; (8000c60 <startPrintState+0x170>)
 8000c42:	f003 f820 	bl	8003c86 <HAL_UART_Transmit>

  //In case it leaves the infinite loop
   osThreadTerminate(NULL);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f003 feeb 	bl	8004a22 <osThreadTerminate>

  /* USER CODE END startPrintState */
}
 8000c4c:	bf00      	nop
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20004ac0 	.word	0x20004ac0
 8000c58:	40007000 	.word	0x40007000
 8000c5c:	080082c4 	.word	0x080082c4
 8000c60:	20004a7c 	.word	0x20004a7c
 8000c64:	20004ef8 	.word	0x20004ef8
 8000c68:	20000092 	.word	0x20000092
 8000c6c:	40013c00 	.word	0x40013c00
 8000c70:	080082e4 	.word	0x080082e4
 8000c74:	080082f8 	.word	0x080082f8
 8000c78:	08008300 	.word	0x08008300

08000c7c <startAlarmPolling>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAlarmPolling */
void startAlarmPolling(void *argument)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startAlarmPolling */

	//Add thread id to the list
	threadID[0]=osThreadGetId();
 8000c84:	f003 fec2 	bl	8004a0c <osThreadGetId>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4a22      	ldr	r2, [pc, #136]	; (8000d14 <startAlarmPolling+0x98>)
 8000c8c:	6013      	str	r3, [r2, #0]

	print("start alarm polling\r\n");
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	2215      	movs	r2, #21
 8000c94:	4920      	ldr	r1, [pc, #128]	; (8000d18 <startAlarmPolling+0x9c>)
 8000c96:	4821      	ldr	r0, [pc, #132]	; (8000d1c <startAlarmPolling+0xa0>)
 8000c98:	f002 fff5 	bl	8003c86 <HAL_UART_Transmit>

	char msg[10];
  /* Infinite loop */
  for(;;)
  {
	sprintf(msg,"FlagA: %i, FlagB: %i\r\n",flagA,flagB);
 8000c9c:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <startAlarmPolling+0xa4>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <startAlarmPolling+0xa8>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	f107 000c 	add.w	r0, r7, #12
 8000caa:	491f      	ldr	r1, [pc, #124]	; (8000d28 <startAlarmPolling+0xac>)
 8000cac:	f006 ff20 	bl	8007af0 <siprintf>
	HAL_UART_Transmit(&huart3,(uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff faab 	bl	8000210 <strlen>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	f107 010c 	add.w	r1, r7, #12
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	4815      	ldr	r0, [pc, #84]	; (8000d1c <startAlarmPolling+0xa0>)
 8000cc8:	f002 ffdd 	bl	8003c86 <HAL_UART_Transmit>

	if (flagA==1){
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <startAlarmPolling+0xa4>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d10c      	bne.n	8000cee <startAlarmPolling+0x72>
		HAL_UART_Transmit(&huart3,(uint8_t*)"FlagA==1\r\n", 10, HAL_MAX_DELAY);
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd8:	220a      	movs	r2, #10
 8000cda:	4914      	ldr	r1, [pc, #80]	; (8000d2c <startAlarmPolling+0xb0>)
 8000cdc:	480f      	ldr	r0, [pc, #60]	; (8000d1c <startAlarmPolling+0xa0>)
 8000cde:	f002 ffd2 	bl	8003c86 <HAL_UART_Transmit>
		flagA=0;
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <startAlarmPolling+0xa4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
		hook=1;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <startAlarmPolling+0xb4>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	701a      	strb	r2, [r3, #0]
	}

	if (flagB==1){
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <startAlarmPolling+0xa8>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d109      	bne.n	8000d0a <startAlarmPolling+0x8e>
		HAL_UART_Transmit(&huart3,(uint8_t*)"FlagB==1\r\n", 10, HAL_MAX_DELAY);
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	220a      	movs	r2, #10
 8000cfc:	490d      	ldr	r1, [pc, #52]	; (8000d34 <startAlarmPolling+0xb8>)
 8000cfe:	4807      	ldr	r0, [pc, #28]	; (8000d1c <startAlarmPolling+0xa0>)
 8000d00:	f002 ffc1 	bl	8003c86 <HAL_UART_Transmit>
		flagB=0;
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <startAlarmPolling+0xa8>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
	}
    osDelay(1000);
 8000d0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d0e:	f003 feb5 	bl	8004a7c <osDelay>
  {
 8000d12:	e7c3      	b.n	8000c9c <startAlarmPolling+0x20>
 8000d14:	20004ac0 	.word	0x20004ac0
 8000d18:	08008318 	.word	0x08008318
 8000d1c:	20004a7c 	.word	0x20004a7c
 8000d20:	20000090 	.word	0x20000090
 8000d24:	20000091 	.word	0x20000091
 8000d28:	08008330 	.word	0x08008330
 8000d2c:	08008348 	.word	0x08008348
 8000d30:	20000092 	.word	0x20000092
 8000d34:	08008354 	.word	0x08008354

08000d38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d101      	bne.n	8000d4e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d4a:	f000 fa4d 	bl	80011e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40001000 	.word	0x40001000

08000d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d60:	b672      	cpsid	i
}
 8000d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <Error_Handler+0x8>
	...

08000d68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_MspInit+0x54>)
 8000d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d76:	4a11      	ldr	r2, [pc, #68]	; (8000dbc <HAL_MspInit+0x54>)
 8000d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <HAL_MspInit+0x54>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	603b      	str	r3, [r7, #0]
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_MspInit+0x54>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a0a      	ldr	r2, [pc, #40]	; (8000dbc <HAL_MspInit+0x54>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_MspInit+0x54>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	210f      	movs	r1, #15
 8000daa:	f06f 0001 	mvn.w	r0, #1
 8000dae:	f000 fb17 	bl	80013e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40023800 	.word	0x40023800

08000dc0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b09a      	sub	sp, #104	; 0x68
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	225c      	movs	r2, #92	; 0x5c
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f006 fdb1 	bl	8007938 <memset>
  if(hrtc->Instance==RTC)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <HAL_RTC_MspInit+0x6c>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d121      	bne.n	8000e24 <HAL_RTC_MspInit+0x64>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000de0:	2320      	movs	r3, #32
 8000de2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000de8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 ffa8 	bl	8001d44 <HAL_RCCEx_PeriphCLKConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000dfa:	f7ff ffaf 	bl	8000d5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <HAL_RTC_MspInit+0x70>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 5, 0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2105      	movs	r1, #5
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 fae9 	bl	80013e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000e0e:	2003      	movs	r0, #3
 8000e10:	f000 fb02 	bl	8001418 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2105      	movs	r1, #5
 8000e18:	2029      	movs	r0, #41	; 0x29
 8000e1a:	f000 fae1 	bl	80013e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000e1e:	2029      	movs	r0, #41	; 0x29
 8000e20:	f000 fafa 	bl	8001418 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e24:	bf00      	nop
 8000e26:	3768      	adds	r7, #104	; 0x68
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40002800 	.word	0x40002800
 8000e30:	42470e3c 	.word	0x42470e3c

08000e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a19      	ldr	r2, [pc, #100]	; (8000eb8 <HAL_UART_MspInit+0x84>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d12c      	bne.n	8000eb0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	4b18      	ldr	r3, [pc, #96]	; (8000ebc <HAL_UART_MspInit+0x88>)
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	4a17      	ldr	r2, [pc, #92]	; (8000ebc <HAL_UART_MspInit+0x88>)
 8000e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e64:	6413      	str	r3, [r2, #64]	; 0x40
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <HAL_UART_MspInit+0x88>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <HAL_UART_MspInit+0x88>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a10      	ldr	r2, [pc, #64]	; (8000ebc <HAL_UART_MspInit+0x88>)
 8000e7c:	f043 0308 	orr.w	r3, r3, #8
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <HAL_UART_MspInit+0x88>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ea0:	2307      	movs	r3, #7
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <HAL_UART_MspInit+0x8c>)
 8000eac:	f000 fac2 	bl	8001434 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	3728      	adds	r7, #40	; 0x28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40004800 	.word	0x40004800
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020c00 	.word	0x40020c00

08000ec4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b0a0      	sub	sp, #128	; 0x80
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	225c      	movs	r2, #92	; 0x5c
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f006 fd27 	bl	8007938 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ef2:	d14e      	bne.n	8000f92 <HAL_PCD_MspInit+0xce>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ef8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000efa:	2300      	movs	r3, #0
 8000efc:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000efe:	f107 0310 	add.w	r3, r7, #16
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 ff1e 	bl	8001d44 <HAL_RCCEx_PeriphCLKConfig>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000f0e:	f7ff ff25 	bl	8000d5c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <HAL_PCD_MspInit+0xd8>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a20      	ldr	r2, [pc, #128]	; (8000f9c <HAL_PCD_MspInit+0xd8>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <HAL_PCD_MspInit+0xd8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f2e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f32:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f40:	230a      	movs	r3, #10
 8000f42:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4815      	ldr	r0, [pc, #84]	; (8000fa0 <HAL_PCD_MspInit+0xdc>)
 8000f4c:	f000 fa72 	bl	8001434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f54:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f56:	2300      	movs	r3, #0
 8000f58:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000f62:	4619      	mov	r1, r3
 8000f64:	480e      	ldr	r0, [pc, #56]	; (8000fa0 <HAL_PCD_MspInit+0xdc>)
 8000f66:	f000 fa65 	bl	8001434 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <HAL_PCD_MspInit+0xd8>)
 8000f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <HAL_PCD_MspInit+0xd8>)
 8000f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f74:	6353      	str	r3, [r2, #52]	; 0x34
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_PCD_MspInit+0xd8>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_PCD_MspInit+0xd8>)
 8000f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f84:	6453      	str	r3, [r2, #68]	; 0x44
 8000f86:	4b05      	ldr	r3, [pc, #20]	; (8000f9c <HAL_PCD_MspInit+0xd8>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f92:	bf00      	nop
 8000f94:	3780      	adds	r7, #128	; 0x80
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020000 	.word	0x40020000

08000fa4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08c      	sub	sp, #48	; 0x30
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	2036      	movs	r0, #54	; 0x36
 8000fba:	f000 fa11 	bl	80013e0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fbe:	2036      	movs	r0, #54	; 0x36
 8000fc0:	f000 fa2a 	bl	8001418 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <HAL_InitTick+0xa4>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	4a1e      	ldr	r2, [pc, #120]	; (8001048 <HAL_InitTick+0xa4>)
 8000fce:	f043 0310 	orr.w	r3, r3, #16
 8000fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <HAL_InitTick+0xa4>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	f003 0310 	and.w	r3, r3, #16
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fe0:	f107 0210 	add.w	r2, r7, #16
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4611      	mov	r1, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fe78 	bl	8001ce0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ff0:	f000 fe4e 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffc:	4a13      	ldr	r2, [pc, #76]	; (800104c <HAL_InitTick+0xa8>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	0c9b      	lsrs	r3, r3, #18
 8001004:	3b01      	subs	r3, #1
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <HAL_InitTick+0xac>)
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <HAL_InitTick+0xb0>)
 800100c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <HAL_InitTick+0xac>)
 8001010:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001014:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_InitTick+0xac>)
 8001018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_InitTick+0xac>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_InitTick+0xac>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001028:	4809      	ldr	r0, [pc, #36]	; (8001050 <HAL_InitTick+0xac>)
 800102a:	f002 fb31 	bl	8003690 <HAL_TIM_Base_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d104      	bne.n	800103e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001034:	4806      	ldr	r0, [pc, #24]	; (8001050 <HAL_InitTick+0xac>)
 8001036:	f002 fb85 	bl	8003744 <HAL_TIM_Base_Start_IT>
 800103a:	4603      	mov	r3, r0
 800103c:	e000      	b.n	8001040 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	3730      	adds	r7, #48	; 0x30
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40023800 	.word	0x40023800
 800104c:	431bde83 	.word	0x431bde83
 8001050:	20004f1c 	.word	0x20004f1c
 8001054:	40001000 	.word	0x40001000

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800105c:	e7fe      	b.n	800105c <NMI_Handler+0x4>

0800105e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <MemManage_Handler+0x4>

0800106a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <BusFault_Handler+0x4>

08001070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <UsageFault_Handler+0x4>

08001076 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <RTC_WKUP_IRQHandler+0x10>)
 800108a:	f002 fad3 	bl	8003634 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20004ef8 	.word	0x20004ef8

08001098 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <RTC_Alarm_IRQHandler+0x10>)
 800109e:	f002 f8f9 	bl	8003294 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20004ef8 	.word	0x20004ef8

080010ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010b0:	4802      	ldr	r0, [pc, #8]	; (80010bc <TIM6_DAC_IRQHandler+0x10>)
 80010b2:	f002 fbb7 	bl	8003824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20004f1c 	.word	0x20004f1c

080010c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c8:	4a14      	ldr	r2, [pc, #80]	; (800111c <_sbrk+0x5c>)
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <_sbrk+0x60>)
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <_sbrk+0x64>)
 80010de:	4a12      	ldr	r2, [pc, #72]	; (8001128 <_sbrk+0x68>)
 80010e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d207      	bcs.n	8001100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f0:	f006 fbe8 	bl	80078c4 <__errno>
 80010f4:	4603      	mov	r3, r0
 80010f6:	220c      	movs	r2, #12
 80010f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	e009      	b.n	8001114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <_sbrk+0x64>)
 8001110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20020000 	.word	0x20020000
 8001120:	00000400 	.word	0x00000400
 8001124:	20000094 	.word	0x20000094
 8001128:	20004fb8 	.word	0x20004fb8

0800112c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <SystemInit+0x20>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <SystemInit+0x20>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001188 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001156:	490e      	ldr	r1, [pc, #56]	; (8001190 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001158:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800116c:	4c0b      	ldr	r4, [pc, #44]	; (800119c <LoopFillZerobss+0x26>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800117a:	f7ff ffd7 	bl	800112c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117e:	f006 fba7 	bl	80078d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001182:	f7ff fa2d 	bl	80005e0 <main>
  bx  lr    
 8001186:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001188:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001194:	080084a0 	.word	0x080084a0
  ldr r2, =_sbss
 8001198:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800119c:	20004fb8 	.word	0x20004fb8

080011a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC_IRQHandler>
	...

080011a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <HAL_Init+0x40>)
 80011ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <HAL_Init+0x40>)
 80011ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <HAL_Init+0x40>)
 80011c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011cc:	2003      	movs	r0, #3
 80011ce:	f000 f8fc 	bl	80013ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d2:	200f      	movs	r0, #15
 80011d4:	f7ff fee6 	bl	8000fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d8:	f7ff fdc6 	bl	8000d68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023c00 	.word	0x40023c00

080011e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_IncTick+0x20>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x24>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a04      	ldr	r2, [pc, #16]	; (800120c <HAL_IncTick+0x24>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000008 	.word	0x20000008
 800120c:	20004f64 	.word	0x20004f64

08001210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;
 8001214:	4b03      	ldr	r3, [pc, #12]	; (8001224 <HAL_GetTick+0x14>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20004f64 	.word	0x20004f64

08001228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001230:	f7ff ffee 	bl	8001210 <HAL_GetTick>
 8001234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001240:	d005      	beq.n	800124e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <HAL_Delay+0x44>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4413      	add	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800124e:	bf00      	nop
 8001250:	f7ff ffde 	bl	8001210 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	429a      	cmp	r2, r3
 800125e:	d8f7      	bhi.n	8001250 <HAL_Delay+0x28>
  {
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000008 	.word	0x20000008

08001270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800128c:	4013      	ands	r3, r2
 800128e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001298:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a2:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	60d3      	str	r3, [r2, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <__NVIC_GetPriorityGrouping+0x18>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 0307 	and.w	r3, r3, #7
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	db0b      	blt.n	80012fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	f003 021f 	and.w	r2, r3, #31
 80012ec:	4907      	ldr	r1, [pc, #28]	; (800130c <__NVIC_EnableIRQ+0x38>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	2001      	movs	r0, #1
 80012f6:	fa00 f202 	lsl.w	r2, r0, r2
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000e100 	.word	0xe000e100

08001310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	; (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	; (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
         );
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff4c 	bl	8001270 <__NVIC_SetPriorityGrouping>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f2:	f7ff ff61 	bl	80012b8 <__NVIC_GetPriorityGrouping>
 80013f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	68b9      	ldr	r1, [r7, #8]
 80013fc:	6978      	ldr	r0, [r7, #20]
 80013fe:	f7ff ffb1 	bl	8001364 <NVIC_EncodePriority>
 8001402:	4602      	mov	r2, r0
 8001404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ff80 	bl	8001310 <__NVIC_SetPriority>
}
 8001410:	bf00      	nop
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff54 	bl	80012d4 <__NVIC_EnableIRQ>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800144a:	2300      	movs	r3, #0
 800144c:	61fb      	str	r3, [r7, #28]
 800144e:	e165      	b.n	800171c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001450:	2201      	movs	r2, #1
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4013      	ands	r3, r2
 8001462:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001464:	693a      	ldr	r2, [r7, #16]
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	429a      	cmp	r2, r3
 800146a:	f040 8154 	bne.w	8001716 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	2b01      	cmp	r3, #1
 8001478:	d005      	beq.n	8001486 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001482:	2b02      	cmp	r3, #2
 8001484:	d130      	bne.n	80014e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	2203      	movs	r2, #3
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	68da      	ldr	r2, [r3, #12]
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014bc:	2201      	movs	r2, #1
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	f003 0201 	and.w	r2, r3, #1
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d017      	beq.n	8001524 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	2203      	movs	r2, #3
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d123      	bne.n	8001578 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	08da      	lsrs	r2, r3, #3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3208      	adds	r2, #8
 8001538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	220f      	movs	r2, #15
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	08da      	lsrs	r2, r3, #3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3208      	adds	r2, #8
 8001572:	69b9      	ldr	r1, [r7, #24]
 8001574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0203 	and.w	r2, r3, #3
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80ae 	beq.w	8001716 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	4b5d      	ldr	r3, [pc, #372]	; (8001734 <HAL_GPIO_Init+0x300>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a5c      	ldr	r2, [pc, #368]	; (8001734 <HAL_GPIO_Init+0x300>)
 80015c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b5a      	ldr	r3, [pc, #360]	; (8001734 <HAL_GPIO_Init+0x300>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015d6:	4a58      	ldr	r2, [pc, #352]	; (8001738 <HAL_GPIO_Init+0x304>)
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	3302      	adds	r3, #2
 80015de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	220f      	movs	r2, #15
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4013      	ands	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a4f      	ldr	r2, [pc, #316]	; (800173c <HAL_GPIO_Init+0x308>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d025      	beq.n	800164e <HAL_GPIO_Init+0x21a>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a4e      	ldr	r2, [pc, #312]	; (8001740 <HAL_GPIO_Init+0x30c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d01f      	beq.n	800164a <HAL_GPIO_Init+0x216>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4d      	ldr	r2, [pc, #308]	; (8001744 <HAL_GPIO_Init+0x310>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d019      	beq.n	8001646 <HAL_GPIO_Init+0x212>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4c      	ldr	r2, [pc, #304]	; (8001748 <HAL_GPIO_Init+0x314>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d013      	beq.n	8001642 <HAL_GPIO_Init+0x20e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a4b      	ldr	r2, [pc, #300]	; (800174c <HAL_GPIO_Init+0x318>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d00d      	beq.n	800163e <HAL_GPIO_Init+0x20a>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a4a      	ldr	r2, [pc, #296]	; (8001750 <HAL_GPIO_Init+0x31c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d007      	beq.n	800163a <HAL_GPIO_Init+0x206>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a49      	ldr	r2, [pc, #292]	; (8001754 <HAL_GPIO_Init+0x320>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d101      	bne.n	8001636 <HAL_GPIO_Init+0x202>
 8001632:	2306      	movs	r3, #6
 8001634:	e00c      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 8001636:	2307      	movs	r3, #7
 8001638:	e00a      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 800163a:	2305      	movs	r3, #5
 800163c:	e008      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 800163e:	2304      	movs	r3, #4
 8001640:	e006      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 8001642:	2303      	movs	r3, #3
 8001644:	e004      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 8001646:	2302      	movs	r3, #2
 8001648:	e002      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <HAL_GPIO_Init+0x21c>
 800164e:	2300      	movs	r3, #0
 8001650:	69fa      	ldr	r2, [r7, #28]
 8001652:	f002 0203 	and.w	r2, r2, #3
 8001656:	0092      	lsls	r2, r2, #2
 8001658:	4093      	lsls	r3, r2
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001660:	4935      	ldr	r1, [pc, #212]	; (8001738 <HAL_GPIO_Init+0x304>)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	3302      	adds	r3, #2
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800166e:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <HAL_GPIO_Init+0x324>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	43db      	mvns	r3, r3
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	4013      	ands	r3, r2
 800167c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001692:	4a31      	ldr	r2, [pc, #196]	; (8001758 <HAL_GPIO_Init+0x324>)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001698:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <HAL_GPIO_Init+0x324>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016bc:	4a26      	ldr	r2, [pc, #152]	; (8001758 <HAL_GPIO_Init+0x324>)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016c2:	4b25      	ldr	r3, [pc, #148]	; (8001758 <HAL_GPIO_Init+0x324>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4013      	ands	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016e6:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <HAL_GPIO_Init+0x324>)
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <HAL_GPIO_Init+0x324>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001710:	4a11      	ldr	r2, [pc, #68]	; (8001758 <HAL_GPIO_Init+0x324>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3301      	adds	r3, #1
 800171a:	61fb      	str	r3, [r7, #28]
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	2b0f      	cmp	r3, #15
 8001720:	f67f ae96 	bls.w	8001450 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	3724      	adds	r7, #36	; 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40023800 	.word	0x40023800
 8001738:	40013800 	.word	0x40013800
 800173c:	40020000 	.word	0x40020000
 8001740:	40020400 	.word	0x40020400
 8001744:	40020800 	.word	0x40020800
 8001748:	40020c00 	.word	0x40020c00
 800174c:	40021000 	.word	0x40021000
 8001750:	40021400 	.word	0x40021400
 8001754:	40021800 	.word	0x40021800
 8001758:	40013c00 	.word	0x40013c00

0800175c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
 8001768:	4613      	mov	r3, r2
 800176a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800176c:	787b      	ldrb	r3, [r7, #1]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001778:	e003      	b.n	8001782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800177a:	887b      	ldrh	r3, [r7, #2]
 800177c:	041a      	lsls	r2, r3, #16
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	619a      	str	r2, [r3, #24]
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800178e:	b480      	push	{r7}
 8001790:	b085      	sub	sp, #20
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017a0:	887a      	ldrh	r2, [r7, #2]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4013      	ands	r3, r2
 80017a6:	041a      	lsls	r2, r3, #16
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	43d9      	mvns	r1, r3
 80017ac:	887b      	ldrh	r3, [r7, #2]
 80017ae:	400b      	ands	r3, r1
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	619a      	str	r2, [r3, #24]
}
 80017b6:	bf00      	nop
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c4:	b08f      	sub	sp, #60	; 0x3c
 80017c6:	af0a      	add	r7, sp, #40	; 0x28
 80017c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e116      	b.n	8001a02 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d106      	bne.n	80017f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fb68 	bl	8000ec4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2203      	movs	r2, #3
 80017f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f002 fd61 	bl	80042da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	603b      	str	r3, [r7, #0]
 800181e:	687e      	ldr	r6, [r7, #4]
 8001820:	466d      	mov	r5, sp
 8001822:	f106 0410 	add.w	r4, r6, #16
 8001826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800182a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800182c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800182e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001832:	e885 0003 	stmia.w	r5, {r0, r1}
 8001836:	1d33      	adds	r3, r6, #4
 8001838:	cb0e      	ldmia	r3, {r1, r2, r3}
 800183a:	6838      	ldr	r0, [r7, #0]
 800183c:	f002 fcec 	bl	8004218 <USB_CoreInit>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d005      	beq.n	8001852 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2202      	movs	r2, #2
 800184a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0d7      	b.n	8001a02 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f002 fd4f 	bl	80042fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800185e:	2300      	movs	r3, #0
 8001860:	73fb      	strb	r3, [r7, #15]
 8001862:	e04a      	b.n	80018fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001864:	7bfa      	ldrb	r2, [r7, #15]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	1a9b      	subs	r3, r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	333d      	adds	r3, #61	; 0x3d
 8001874:	2201      	movs	r2, #1
 8001876:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001878:	7bfa      	ldrb	r2, [r7, #15]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	1a9b      	subs	r3, r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	333c      	adds	r3, #60	; 0x3c
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800188c:	7bfa      	ldrb	r2, [r7, #15]
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	b298      	uxth	r0, r3
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	3342      	adds	r3, #66	; 0x42
 80018a0:	4602      	mov	r2, r0
 80018a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018a4:	7bfa      	ldrb	r2, [r7, #15]
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	1a9b      	subs	r3, r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	333f      	adds	r3, #63	; 0x3f
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018b8:	7bfa      	ldrb	r2, [r7, #15]
 80018ba:	6879      	ldr	r1, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	1a9b      	subs	r3, r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	3344      	adds	r3, #68	; 0x44
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	6879      	ldr	r1, [r7, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	3348      	adds	r3, #72	; 0x48
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	1a9b      	subs	r3, r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	3350      	adds	r3, #80	; 0x50
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f4:	7bfb      	ldrb	r3, [r7, #15]
 80018f6:	3301      	adds	r3, #1
 80018f8:	73fb      	strb	r3, [r7, #15]
 80018fa:	7bfa      	ldrb	r2, [r7, #15]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	d3af      	bcc.n	8001864 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]
 8001908:	e044      	b.n	8001994 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	1a9b      	subs	r3, r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	440b      	add	r3, r1
 8001918:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001920:	7bfa      	ldrb	r2, [r7, #15]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	1a9b      	subs	r3, r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001936:	7bfa      	ldrb	r2, [r7, #15]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	1a9b      	subs	r3, r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	440b      	add	r3, r1
 8001944:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800194c:	7bfa      	ldrb	r2, [r7, #15]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	1a9b      	subs	r3, r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	440b      	add	r3, r1
 800195a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	1a9b      	subs	r3, r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	440b      	add	r3, r1
 8001970:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	1a9b      	subs	r3, r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	3301      	adds	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
 8001994:	7bfa      	ldrb	r2, [r7, #15]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	429a      	cmp	r2, r3
 800199c:	d3b5      	bcc.n	800190a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	687e      	ldr	r6, [r7, #4]
 80019a6:	466d      	mov	r5, sp
 80019a8:	f106 0410 	add.w	r4, r6, #16
 80019ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80019bc:	1d33      	adds	r3, r6, #4
 80019be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019c0:	6838      	ldr	r0, [r7, #0]
 80019c2:	f002 fce7 	bl	8004394 <USB_DevInit>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2202      	movs	r2, #2
 80019d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e014      	b.n	8001a02 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d102      	bne.n	80019f6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 f80a 	bl	8001a0a <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f002 fe85 	bl	800470a <USB_DevDisconnect>

  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a0a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b085      	sub	sp, #20
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	f043 0303 	orr.w	r3, r3, #3
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_PWR_DisableWakeUpPin+0x24>)
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	4904      	ldr	r1, [pc, #16]	; (8001a78 <HAL_PWR_DisableWakeUpPin+0x24>)
 8001a66:	4013      	ands	r3, r2
 8001a68:	604b      	str	r3, [r1, #4]
}
 8001a6a:	bf00      	nop
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40007000 	.word	0x40007000

08001a7c <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8001a86:	f043 0302 	orr.w	r3, r3, #2
 8001a8a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8001a98:	bf30      	wfi
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	40007000 	.word	0x40007000
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0cc      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac0:	4b68      	ldr	r3, [pc, #416]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 030f 	and.w	r3, r3, #15
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d90c      	bls.n	8001ae8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	4b65      	ldr	r3, [pc, #404]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad6:	4b63      	ldr	r3, [pc, #396]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e0b8      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d020      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b00:	4b59      	ldr	r3, [pc, #356]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4a58      	ldr	r2, [pc, #352]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b18:	4b53      	ldr	r3, [pc, #332]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a52      	ldr	r2, [pc, #328]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b24:	4b50      	ldr	r3, [pc, #320]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	494d      	ldr	r1, [pc, #308]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d044      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	4b47      	ldr	r3, [pc, #284]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d119      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e07f      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d003      	beq.n	8001b6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6a:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d109      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e06f      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7a:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e067      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b8a:	4b37      	ldr	r3, [pc, #220]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f023 0203 	bic.w	r2, r3, #3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4934      	ldr	r1, [pc, #208]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b9c:	f7ff fb38 	bl	8001210 <HAL_GetTick>
 8001ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba2:	e00a      	b.n	8001bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ba4:	f7ff fb34 	bl	8001210 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e04f      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 020c 	and.w	r2, r3, #12
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d1eb      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d20c      	bcs.n	8001bf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be2:	4b20      	ldr	r3, [pc, #128]	; (8001c64 <HAL_RCC_ClockConfig+0x1b8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e032      	b.n	8001c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d008      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4916      	ldr	r1, [pc, #88]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d009      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c1e:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	490e      	ldr	r1, [pc, #56]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c32:	f000 fbb1 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8001c36:	4602      	mov	r2, r0
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	490a      	ldr	r1, [pc, #40]	; (8001c6c <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	5ccb      	ldrb	r3, [r1, r3]
 8001c46:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4a:	4a09      	ldr	r2, [pc, #36]	; (8001c70 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <HAL_RCC_ClockConfig+0x1c8>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff f9a6 	bl	8000fa4 <HAL_InitTick>

  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023c00 	.word	0x40023c00
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	080083e4 	.word	0x080083e4
 8001c70:	20000000 	.word	0x20000000
 8001c74:	20000004 	.word	0x20000004

08001c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	20000000 	.word	0x20000000

08001c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c94:	f7ff fff0 	bl	8001c78 <HAL_RCC_GetHCLKFreq>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	0a9b      	lsrs	r3, r3, #10
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	4903      	ldr	r1, [pc, #12]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ca6:	5ccb      	ldrb	r3, [r1, r3]
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	080083f4 	.word	0x080083f4

08001cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cbc:	f7ff ffdc 	bl	8001c78 <HAL_RCC_GetHCLKFreq>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	0b5b      	lsrs	r3, r3, #13
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	4903      	ldr	r1, [pc, #12]	; (8001cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cce:	5ccb      	ldrb	r3, [r1, r3]
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	080083f4 	.word	0x080083f4

08001ce0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	220f      	movs	r2, #15
 8001cee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0203 	and.w	r2, r3, #3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cfc:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_RCC_GetClockConfig+0x5c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_RCC_GetClockConfig+0x5c>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_RCC_GetClockConfig+0x5c>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	08db      	lsrs	r3, r3, #3
 8001d1a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d22:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <HAL_RCC_GetClockConfig+0x60>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 020f 	and.w	r2, r3, #15
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	601a      	str	r2, [r3, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40023c00 	.word	0x40023c00

08001d44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08c      	sub	sp, #48	; 0x30
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d010      	beq.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001d7c:	4b6f      	ldr	r3, [pc, #444]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d82:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8a:	496c      	ldr	r1, [pc, #432]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d010      	beq.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001daa:	4b64      	ldr	r3, [pc, #400]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001db0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db8:	4960      	ldr	r1, [pc, #384]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d017      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001dd8:	4b58      	ldr	r3, [pc, #352]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4955      	ldr	r1, [pc, #340]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001df6:	d101      	bne.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001e04:	2301      	movs	r3, #1
 8001e06:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d017      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001e14:	4b49      	ldr	r3, [pc, #292]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e22:	4946      	ldr	r1, [pc, #280]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e32:	d101      	bne.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001e34:	2301      	movs	r3, #1
 8001e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001e40:	2301      	movs	r3, #1
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 808a 	beq.w	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	4b39      	ldr	r3, [pc, #228]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a38      	ldr	r2, [pc, #224]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001e6e:	4b34      	ldr	r3, [pc, #208]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a33      	ldr	r2, [pc, #204]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e7a:	f7ff f9c9 	bl	8001210 <HAL_GetTick>
 8001e7e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e82:	f7ff f9c5 	bl	8001210 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e278      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001e94:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ea0:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ea8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d02f      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb8:	6a3a      	ldr	r2, [r7, #32]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d028      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ec6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ec8:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ece:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001ed4:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001eda:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d114      	bne.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001ee6:	f7ff f993 	bl	8001210 <HAL_GetTick>
 8001eea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eec:	e00a      	b.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eee:	f7ff f98f 	bl	8001210 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e240      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f04:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d0ee      	beq.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f1c:	d114      	bne.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f32:	4902      	ldr	r1, [pc, #8]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	608b      	str	r3, [r1, #8]
 8001f38:	e00c      	b.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001f3a:	bf00      	nop
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40007000 	.word	0x40007000
 8001f44:	42470e40 	.word	0x42470e40
 8001f48:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	4a49      	ldr	r2, [pc, #292]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001f52:	6093      	str	r3, [r2, #8]
 8001f54:	4b47      	ldr	r3, [pc, #284]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f60:	4944      	ldr	r1, [pc, #272]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d004      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001f78:	4b3f      	ldr	r3, [pc, #252]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001f7a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00a      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001f88:	4b3a      	ldr	r3, [pc, #232]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	4937      	ldr	r1, [pc, #220]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00a      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001faa:	4b32      	ldr	r3, [pc, #200]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb8:	492e      	ldr	r1, [pc, #184]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d011      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fcc:	4b29      	ldr	r3, [pc, #164]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fda:	4926      	ldr	r1, [pc, #152]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001fec:	2301      	movs	r3, #1
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00a      	beq.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002002:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	491a      	ldr	r1, [pc, #104]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800200c:	4313      	orrs	r3, r2
 800200e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201a:	2b00      	cmp	r3, #0
 800201c:	d011      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002024:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202c:	4911      	ldr	r1, [pc, #68]	; (8002074 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800202e:	4313      	orrs	r3, r2
 8002030:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800203c:	d101      	bne.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800203e:	2301      	movs	r3, #1
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002044:	2b01      	cmp	r3, #1
 8002046:	d005      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002050:	f040 80ff 	bne.w	8002252 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800205a:	f7ff f8d9 	bl	8001210 <HAL_GetTick>
 800205e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002060:	e00e      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002062:	f7ff f8d5 	bl	8001210 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d907      	bls.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e188      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002074:	40023800 	.word	0x40023800
 8002078:	424711e0 	.word	0x424711e0
 800207c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002080:	4b7e      	ldr	r3, [pc, #504]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1ea      	bne.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209c:	2b00      	cmp	r3, #0
 800209e:	d009      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d028      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d124      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80020b4:	4b71      	ldr	r3, [pc, #452]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ba:	0c1b      	lsrs	r3, r3, #16
 80020bc:	f003 0303 	and.w	r3, r3, #3
 80020c0:	3301      	adds	r3, #1
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80020c6:	4b6d      	ldr	r3, [pc, #436]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020cc:	0e1b      	lsrs	r3, r3, #24
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	019b      	lsls	r3, r3, #6
 80020de:	431a      	orrs	r2, r3
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	085b      	lsrs	r3, r3, #1
 80020e4:	3b01      	subs	r3, #1
 80020e6:	041b      	lsls	r3, r3, #16
 80020e8:	431a      	orrs	r2, r3
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	061b      	lsls	r3, r3, #24
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	071b      	lsls	r3, r3, #28
 80020f6:	4961      	ldr	r1, [pc, #388]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	2b00      	cmp	r3, #0
 8002108:	d004      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002112:	d00a      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800211c:	2b00      	cmp	r3, #0
 800211e:	d035      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002124:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002128:	d130      	bne.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800212a:	4b54      	ldr	r3, [pc, #336]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800212c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002130:	0c1b      	lsrs	r3, r3, #16
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	3301      	adds	r3, #1
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800213c:	4b4f      	ldr	r3, [pc, #316]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800213e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002142:	0f1b      	lsrs	r3, r3, #28
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	019b      	lsls	r3, r3, #6
 8002154:	431a      	orrs	r2, r3
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	085b      	lsrs	r3, r3, #1
 800215a:	3b01      	subs	r3, #1
 800215c:	041b      	lsls	r3, r3, #16
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	061b      	lsls	r3, r3, #24
 8002166:	431a      	orrs	r2, r3
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	071b      	lsls	r3, r3, #28
 800216c:	4943      	ldr	r1, [pc, #268]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002174:	4b41      	ldr	r3, [pc, #260]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800217a:	f023 021f 	bic.w	r2, r3, #31
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002182:	3b01      	subs	r3, #1
 8002184:	493d      	ldr	r1, [pc, #244]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002194:	2b00      	cmp	r3, #0
 8002196:	d029      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800219c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021a0:	d124      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80021a2:	4b36      	ldr	r3, [pc, #216]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021a8:	0c1b      	lsrs	r3, r3, #16
 80021aa:	f003 0303 	and.w	r3, r3, #3
 80021ae:	3301      	adds	r3, #1
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021b4:	4b31      	ldr	r3, [pc, #196]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021ba:	0f1b      	lsrs	r3, r3, #28
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	019b      	lsls	r3, r3, #6
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	085b      	lsrs	r3, r3, #1
 80021d4:	3b01      	subs	r3, #1
 80021d6:	041b      	lsls	r3, r3, #16
 80021d8:	431a      	orrs	r2, r3
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	061b      	lsls	r3, r3, #24
 80021de:	431a      	orrs	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	071b      	lsls	r3, r3, #28
 80021e4:	4925      	ldr	r1, [pc, #148]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d016      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	019b      	lsls	r3, r3, #6
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	085b      	lsrs	r3, r3, #1
 800220a:	3b01      	subs	r3, #1
 800220c:	041b      	lsls	r3, r3, #16
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	061b      	lsls	r3, r3, #24
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	071b      	lsls	r3, r3, #28
 800221e:	4917      	ldr	r1, [pc, #92]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002226:	4b16      	ldr	r3, [pc, #88]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002228:	2201      	movs	r2, #1
 800222a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800222c:	f7fe fff0 	bl	8001210 <HAL_GetTick>
 8002230:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002232:	e008      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002234:	f7fe ffec 	bl	8001210 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e09f      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002254:	2b01      	cmp	r3, #1
 8002256:	f040 8095 	bne.w	8002384 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002260:	f7fe ffd6 	bl	8001210 <HAL_GetTick>
 8002264:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002266:	e00f      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002268:	f7fe ffd2 	bl	8001210 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d908      	bls.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e085      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800
 8002280:	42470068 	.word	0x42470068
 8002284:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002288:	4b41      	ldr	r3, [pc, #260]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002290:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002294:	d0e8      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_RCCEx_PeriphCLKConfig+0x566>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d02b      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d127      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80022be:	4b34      	ldr	r3, [pc, #208]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c4:	0c1b      	lsrs	r3, r3, #16
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	3301      	adds	r3, #1
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699a      	ldr	r2, [r3, #24]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	019b      	lsls	r3, r3, #6
 80022da:	431a      	orrs	r2, r3
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	085b      	lsrs	r3, r3, #1
 80022e0:	3b01      	subs	r3, #1
 80022e2:	041b      	lsls	r3, r3, #16
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	061b      	lsls	r3, r3, #24
 80022ec:	4928      	ldr	r1, [pc, #160]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80022f4:	4b26      	ldr	r3, [pc, #152]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022fa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002302:	3b01      	subs	r3, #1
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	4922      	ldr	r1, [pc, #136]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002316:	2b00      	cmp	r3, #0
 8002318:	d01d      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002322:	d118      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002324:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	0e1b      	lsrs	r3, r3, #24
 800232c:	f003 030f 	and.w	r3, r3, #15
 8002330:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699a      	ldr	r2, [r3, #24]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	019b      	lsls	r3, r3, #6
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	085b      	lsrs	r3, r3, #1
 8002344:	3b01      	subs	r3, #1
 8002346:	041b      	lsls	r3, r3, #16
 8002348:	431a      	orrs	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	061b      	lsls	r3, r3, #24
 800234e:	4910      	ldr	r1, [pc, #64]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002356:	4b0f      	ldr	r3, [pc, #60]	; (8002394 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002358:	2201      	movs	r2, #1
 800235a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800235c:	f7fe ff58 	bl	8001210 <HAL_GetTick>
 8002360:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002364:	f7fe ff54 	bl	8001210 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e007      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800237e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002382:	d1ef      	bne.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3730      	adds	r7, #48	; 0x30
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800
 8002394:	42470070 	.word	0x42470070

08002398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800239c:	b088      	sub	sp, #32
 800239e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023b4:	4bce      	ldr	r3, [pc, #824]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x358>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	f200 818d 	bhi.w	80026dc <HAL_RCC_GetSysClockFreq+0x344>
 80023c2:	a201      	add	r2, pc, #4	; (adr r2, 80023c8 <HAL_RCC_GetSysClockFreq+0x30>)
 80023c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c8:	080023fd 	.word	0x080023fd
 80023cc:	080026dd 	.word	0x080026dd
 80023d0:	080026dd 	.word	0x080026dd
 80023d4:	080026dd 	.word	0x080026dd
 80023d8:	08002403 	.word	0x08002403
 80023dc:	080026dd 	.word	0x080026dd
 80023e0:	080026dd 	.word	0x080026dd
 80023e4:	080026dd 	.word	0x080026dd
 80023e8:	08002409 	.word	0x08002409
 80023ec:	080026dd 	.word	0x080026dd
 80023f0:	080026dd 	.word	0x080026dd
 80023f4:	080026dd 	.word	0x080026dd
 80023f8:	0800257d 	.word	0x0800257d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023fc:	4bbd      	ldr	r3, [pc, #756]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80023fe:	61bb      	str	r3, [r7, #24]
       break;
 8002400:	e16f      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002402:	4bbd      	ldr	r3, [pc, #756]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x360>)
 8002404:	61bb      	str	r3, [r7, #24]
      break;
 8002406:	e16c      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002408:	4bb9      	ldr	r3, [pc, #740]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002410:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002412:	4bb7      	ldr	r3, [pc, #732]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d053      	beq.n	80024c6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800241e:	4bb4      	ldr	r3, [pc, #720]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	099b      	lsrs	r3, r3, #6
 8002424:	461a      	mov	r2, r3
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800242e:	f04f 0100 	mov.w	r1, #0
 8002432:	ea02 0400 	and.w	r4, r2, r0
 8002436:	603c      	str	r4, [r7, #0]
 8002438:	400b      	ands	r3, r1
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002440:	4620      	mov	r0, r4
 8002442:	4629      	mov	r1, r5
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	014b      	lsls	r3, r1, #5
 800244e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002452:	0142      	lsls	r2, r0, #5
 8002454:	4610      	mov	r0, r2
 8002456:	4619      	mov	r1, r3
 8002458:	4623      	mov	r3, r4
 800245a:	1ac0      	subs	r0, r0, r3
 800245c:	462b      	mov	r3, r5
 800245e:	eb61 0103 	sbc.w	r1, r1, r3
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	018b      	lsls	r3, r1, #6
 800246c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002470:	0182      	lsls	r2, r0, #6
 8002472:	1a12      	subs	r2, r2, r0
 8002474:	eb63 0301 	sbc.w	r3, r3, r1
 8002478:	f04f 0000 	mov.w	r0, #0
 800247c:	f04f 0100 	mov.w	r1, #0
 8002480:	00d9      	lsls	r1, r3, #3
 8002482:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002486:	00d0      	lsls	r0, r2, #3
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4621      	mov	r1, r4
 800248e:	1852      	adds	r2, r2, r1
 8002490:	4629      	mov	r1, r5
 8002492:	eb43 0101 	adc.w	r1, r3, r1
 8002496:	460b      	mov	r3, r1
 8002498:	f04f 0000 	mov.w	r0, #0
 800249c:	f04f 0100 	mov.w	r1, #0
 80024a0:	0259      	lsls	r1, r3, #9
 80024a2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80024a6:	0250      	lsls	r0, r2, #9
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	461a      	mov	r2, r3
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	f7fd ff02 	bl	80002c0 <__aeabi_uldivmod>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4613      	mov	r3, r2
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	e04c      	b.n	8002560 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c6:	4b8a      	ldr	r3, [pc, #552]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x358>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	099b      	lsrs	r3, r3, #6
 80024cc:	461a      	mov	r2, r3
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024d6:	f04f 0100 	mov.w	r1, #0
 80024da:	ea02 0a00 	and.w	sl, r2, r0
 80024de:	ea03 0b01 	and.w	fp, r3, r1
 80024e2:	4650      	mov	r0, sl
 80024e4:	4659      	mov	r1, fp
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	014b      	lsls	r3, r1, #5
 80024f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024f4:	0142      	lsls	r2, r0, #5
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	ebb0 000a 	subs.w	r0, r0, sl
 80024fe:	eb61 010b 	sbc.w	r1, r1, fp
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	018b      	lsls	r3, r1, #6
 800250c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002510:	0182      	lsls	r2, r0, #6
 8002512:	1a12      	subs	r2, r2, r0
 8002514:	eb63 0301 	sbc.w	r3, r3, r1
 8002518:	f04f 0000 	mov.w	r0, #0
 800251c:	f04f 0100 	mov.w	r1, #0
 8002520:	00d9      	lsls	r1, r3, #3
 8002522:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002526:	00d0      	lsls	r0, r2, #3
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	eb12 020a 	adds.w	r2, r2, sl
 8002530:	eb43 030b 	adc.w	r3, r3, fp
 8002534:	f04f 0000 	mov.w	r0, #0
 8002538:	f04f 0100 	mov.w	r1, #0
 800253c:	0299      	lsls	r1, r3, #10
 800253e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002542:	0290      	lsls	r0, r2, #10
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	461a      	mov	r2, r3
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	f7fd feb4 	bl	80002c0 <__aeabi_uldivmod>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4613      	mov	r3, r2
 800255e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002560:	4b63      	ldr	r3, [pc, #396]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	3301      	adds	r3, #1
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	fbb2 f3f3 	udiv	r3, r2, r3
 8002578:	61bb      	str	r3, [r7, #24]
      break;
 800257a:	e0b2      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800257c:	4b5c      	ldr	r3, [pc, #368]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002584:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002586:	4b5a      	ldr	r3, [pc, #360]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d04d      	beq.n	800262e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002592:	4b57      	ldr	r3, [pc, #348]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	099b      	lsrs	r3, r3, #6
 8002598:	461a      	mov	r2, r3
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025a2:	f04f 0100 	mov.w	r1, #0
 80025a6:	ea02 0800 	and.w	r8, r2, r0
 80025aa:	ea03 0901 	and.w	r9, r3, r1
 80025ae:	4640      	mov	r0, r8
 80025b0:	4649      	mov	r1, r9
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	014b      	lsls	r3, r1, #5
 80025bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80025c0:	0142      	lsls	r2, r0, #5
 80025c2:	4610      	mov	r0, r2
 80025c4:	4619      	mov	r1, r3
 80025c6:	ebb0 0008 	subs.w	r0, r0, r8
 80025ca:	eb61 0109 	sbc.w	r1, r1, r9
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	018b      	lsls	r3, r1, #6
 80025d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80025dc:	0182      	lsls	r2, r0, #6
 80025de:	1a12      	subs	r2, r2, r0
 80025e0:	eb63 0301 	sbc.w	r3, r3, r1
 80025e4:	f04f 0000 	mov.w	r0, #0
 80025e8:	f04f 0100 	mov.w	r1, #0
 80025ec:	00d9      	lsls	r1, r3, #3
 80025ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025f2:	00d0      	lsls	r0, r2, #3
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	eb12 0208 	adds.w	r2, r2, r8
 80025fc:	eb43 0309 	adc.w	r3, r3, r9
 8002600:	f04f 0000 	mov.w	r0, #0
 8002604:	f04f 0100 	mov.w	r1, #0
 8002608:	0259      	lsls	r1, r3, #9
 800260a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800260e:	0250      	lsls	r0, r2, #9
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	461a      	mov	r2, r3
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	f7fd fe4e 	bl	80002c0 <__aeabi_uldivmod>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4613      	mov	r3, r2
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	e04a      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800262e:	4b30      	ldr	r3, [pc, #192]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	099b      	lsrs	r3, r3, #6
 8002634:	461a      	mov	r2, r3
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800263e:	f04f 0100 	mov.w	r1, #0
 8002642:	ea02 0400 	and.w	r4, r2, r0
 8002646:	ea03 0501 	and.w	r5, r3, r1
 800264a:	4620      	mov	r0, r4
 800264c:	4629      	mov	r1, r5
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	014b      	lsls	r3, r1, #5
 8002658:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800265c:	0142      	lsls	r2, r0, #5
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	1b00      	subs	r0, r0, r4
 8002664:	eb61 0105 	sbc.w	r1, r1, r5
 8002668:	f04f 0200 	mov.w	r2, #0
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	018b      	lsls	r3, r1, #6
 8002672:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002676:	0182      	lsls	r2, r0, #6
 8002678:	1a12      	subs	r2, r2, r0
 800267a:	eb63 0301 	sbc.w	r3, r3, r1
 800267e:	f04f 0000 	mov.w	r0, #0
 8002682:	f04f 0100 	mov.w	r1, #0
 8002686:	00d9      	lsls	r1, r3, #3
 8002688:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800268c:	00d0      	lsls	r0, r2, #3
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	1912      	adds	r2, r2, r4
 8002694:	eb45 0303 	adc.w	r3, r5, r3
 8002698:	f04f 0000 	mov.w	r0, #0
 800269c:	f04f 0100 	mov.w	r1, #0
 80026a0:	0299      	lsls	r1, r3, #10
 80026a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80026a6:	0290      	lsls	r0, r2, #10
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4610      	mov	r0, r2
 80026ae:	4619      	mov	r1, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	461a      	mov	r2, r3
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	f7fd fe02 	bl	80002c0 <__aeabi_uldivmod>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4613      	mov	r3, r2
 80026c2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026c4:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x358>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	0f1b      	lsrs	r3, r3, #28
 80026ca:	f003 0307 	and.w	r3, r3, #7
 80026ce:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80026d0:	69fa      	ldr	r2, [r7, #28]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d8:	61bb      	str	r3, [r7, #24]
      break;
 80026da:	e002      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80026de:	61bb      	str	r3, [r7, #24]
      break;
 80026e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026e2:	69bb      	ldr	r3, [r7, #24]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3720      	adds	r7, #32
 80026e8:	46bd      	mov	sp, r7
 80026ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ee:	bf00      	nop
 80026f0:	40023800 	.word	0x40023800
 80026f4:	00f42400 	.word	0x00f42400
 80026f8:	007a1200 	.word	0x007a1200

080026fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e28d      	b.n	8002c2a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8083 	beq.w	8002822 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800271c:	4b94      	ldr	r3, [pc, #592]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 030c 	and.w	r3, r3, #12
 8002724:	2b04      	cmp	r3, #4
 8002726:	d019      	beq.n	800275c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002728:	4b91      	ldr	r3, [pc, #580]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002730:	2b08      	cmp	r3, #8
 8002732:	d106      	bne.n	8002742 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002734:	4b8e      	ldr	r3, [pc, #568]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800273c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002740:	d00c      	beq.n	800275c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002742:	4b8b      	ldr	r3, [pc, #556]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800274a:	2b0c      	cmp	r3, #12
 800274c:	d112      	bne.n	8002774 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800274e:	4b88      	ldr	r3, [pc, #544]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800275a:	d10b      	bne.n	8002774 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800275c:	4b84      	ldr	r3, [pc, #528]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d05b      	beq.n	8002820 <HAL_RCC_OscConfig+0x124>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d157      	bne.n	8002820 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e25a      	b.n	8002c2a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800277c:	d106      	bne.n	800278c <HAL_RCC_OscConfig+0x90>
 800277e:	4b7c      	ldr	r3, [pc, #496]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a7b      	ldr	r2, [pc, #492]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 8002784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e01d      	b.n	80027c8 <HAL_RCC_OscConfig+0xcc>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002794:	d10c      	bne.n	80027b0 <HAL_RCC_OscConfig+0xb4>
 8002796:	4b76      	ldr	r3, [pc, #472]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a75      	ldr	r2, [pc, #468]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 800279c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	4b73      	ldr	r3, [pc, #460]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a72      	ldr	r2, [pc, #456]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 80027a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	e00b      	b.n	80027c8 <HAL_RCC_OscConfig+0xcc>
 80027b0:	4b6f      	ldr	r3, [pc, #444]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a6e      	ldr	r2, [pc, #440]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 80027b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	4b6c      	ldr	r3, [pc, #432]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a6b      	ldr	r2, [pc, #428]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 80027c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d013      	beq.n	80027f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7fe fd1e 	bl	8001210 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe fd1a 	bl	8001210 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e21f      	b.n	8002c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ea:	4b61      	ldr	r3, [pc, #388]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0xdc>
 80027f6:	e014      	b.n	8002822 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe fd0a 	bl	8001210 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe fd06 	bl	8001210 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e20b      	b.n	8002c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002812:	4b57      	ldr	r3, [pc, #348]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x104>
 800281e:	e000      	b.n	8002822 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d06f      	beq.n	800290e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800282e:	4b50      	ldr	r3, [pc, #320]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b00      	cmp	r3, #0
 8002838:	d017      	beq.n	800286a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800283a:	4b4d      	ldr	r3, [pc, #308]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002842:	2b08      	cmp	r3, #8
 8002844:	d105      	bne.n	8002852 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002846:	4b4a      	ldr	r3, [pc, #296]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00b      	beq.n	800286a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002852:	4b47      	ldr	r3, [pc, #284]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d11c      	bne.n	8002898 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800285e:	4b44      	ldr	r3, [pc, #272]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d116      	bne.n	8002898 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286a:	4b41      	ldr	r3, [pc, #260]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <HAL_RCC_OscConfig+0x186>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d001      	beq.n	8002882 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e1d3      	b.n	8002c2a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002882:	4b3b      	ldr	r3, [pc, #236]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4937      	ldr	r1, [pc, #220]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002896:	e03a      	b.n	800290e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d020      	beq.n	80028e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028a0:	4b34      	ldr	r3, [pc, #208]	; (8002974 <HAL_RCC_OscConfig+0x278>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7fe fcb3 	bl	8001210 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ae:	f7fe fcaf 	bl	8001210 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e1b4      	b.n	8002c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c0:	4b2b      	ldr	r3, [pc, #172]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028cc:	4b28      	ldr	r3, [pc, #160]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4925      	ldr	r1, [pc, #148]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	600b      	str	r3, [r1, #0]
 80028e0:	e015      	b.n	800290e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028e2:	4b24      	ldr	r3, [pc, #144]	; (8002974 <HAL_RCC_OscConfig+0x278>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7fe fc92 	bl	8001210 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f0:	f7fe fc8e 	bl	8001210 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e193      	b.n	8002c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002902:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d036      	beq.n	8002988 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d016      	beq.n	8002950 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002922:	4b15      	ldr	r3, [pc, #84]	; (8002978 <HAL_RCC_OscConfig+0x27c>)
 8002924:	2201      	movs	r2, #1
 8002926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002928:	f7fe fc72 	bl	8001210 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002930:	f7fe fc6e 	bl	8001210 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e173      	b.n	8002c2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002942:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCC_OscConfig+0x274>)
 8002944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0x234>
 800294e:	e01b      	b.n	8002988 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002950:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_RCC_OscConfig+0x27c>)
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002956:	f7fe fc5b 	bl	8001210 <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800295c:	e00e      	b.n	800297c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800295e:	f7fe fc57 	bl	8001210 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d907      	bls.n	800297c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e15c      	b.n	8002c2a <HAL_RCC_OscConfig+0x52e>
 8002970:	40023800 	.word	0x40023800
 8002974:	42470000 	.word	0x42470000
 8002978:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297c:	4b8a      	ldr	r3, [pc, #552]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 800297e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1ea      	bne.n	800295e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8097 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002996:	2300      	movs	r3, #0
 8002998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800299a:	4b83      	ldr	r3, [pc, #524]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10f      	bne.n	80029c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	4b7f      	ldr	r3, [pc, #508]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	4a7e      	ldr	r2, [pc, #504]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 80029b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b4:	6413      	str	r3, [r2, #64]	; 0x40
 80029b6:	4b7c      	ldr	r3, [pc, #496]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c2:	2301      	movs	r3, #1
 80029c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c6:	4b79      	ldr	r3, [pc, #484]	; (8002bac <HAL_RCC_OscConfig+0x4b0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d118      	bne.n	8002a04 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029d2:	4b76      	ldr	r3, [pc, #472]	; (8002bac <HAL_RCC_OscConfig+0x4b0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a75      	ldr	r2, [pc, #468]	; (8002bac <HAL_RCC_OscConfig+0x4b0>)
 80029d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029de:	f7fe fc17 	bl	8001210 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e4:	e008      	b.n	80029f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e6:	f7fe fc13 	bl	8001210 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e118      	b.n	8002c2a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f8:	4b6c      	ldr	r3, [pc, #432]	; (8002bac <HAL_RCC_OscConfig+0x4b0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0f0      	beq.n	80029e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d106      	bne.n	8002a1a <HAL_RCC_OscConfig+0x31e>
 8002a0c:	4b66      	ldr	r3, [pc, #408]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a10:	4a65      	ldr	r2, [pc, #404]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	6713      	str	r3, [r2, #112]	; 0x70
 8002a18:	e01c      	b.n	8002a54 <HAL_RCC_OscConfig+0x358>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b05      	cmp	r3, #5
 8002a20:	d10c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x340>
 8002a22:	4b61      	ldr	r3, [pc, #388]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	4a60      	ldr	r2, [pc, #384]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 8002a28:	f043 0304 	orr.w	r3, r3, #4
 8002a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2e:	4b5e      	ldr	r3, [pc, #376]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a32:	4a5d      	ldr	r2, [pc, #372]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3a:	e00b      	b.n	8002a54 <HAL_RCC_OscConfig+0x358>
 8002a3c:	4b5a      	ldr	r3, [pc, #360]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a40:	4a59      	ldr	r2, [pc, #356]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 8002a42:	f023 0301 	bic.w	r3, r3, #1
 8002a46:	6713      	str	r3, [r2, #112]	; 0x70
 8002a48:	4b57      	ldr	r3, [pc, #348]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4c:	4a56      	ldr	r2, [pc, #344]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 8002a4e:	f023 0304 	bic.w	r3, r3, #4
 8002a52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d015      	beq.n	8002a88 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5c:	f7fe fbd8 	bl	8001210 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a62:	e00a      	b.n	8002a7a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a64:	f7fe fbd4 	bl	8001210 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e0d7      	b.n	8002c2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7a:	4b4b      	ldr	r3, [pc, #300]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0ee      	beq.n	8002a64 <HAL_RCC_OscConfig+0x368>
 8002a86:	e014      	b.n	8002ab2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fe fbc2 	bl	8001210 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a8e:	e00a      	b.n	8002aa6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a90:	f7fe fbbe 	bl	8001210 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e0c1      	b.n	8002c2a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa6:	4b40      	ldr	r3, [pc, #256]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1ee      	bne.n	8002a90 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab8:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	4a3a      	ldr	r2, [pc, #232]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 8002abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 80ad 	beq.w	8002c28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ace:	4b36      	ldr	r3, [pc, #216]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b08      	cmp	r3, #8
 8002ad8:	d060      	beq.n	8002b9c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d145      	bne.n	8002b6e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae2:	4b33      	ldr	r3, [pc, #204]	; (8002bb0 <HAL_RCC_OscConfig+0x4b4>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae8:	f7fe fb92 	bl	8001210 <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002af0:	f7fe fb8e 	bl	8001210 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e093      	b.n	8002c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b02:	4b29      	ldr	r3, [pc, #164]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69da      	ldr	r2, [r3, #28]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	019b      	lsls	r3, r3, #6
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b24:	085b      	lsrs	r3, r3, #1
 8002b26:	3b01      	subs	r3, #1
 8002b28:	041b      	lsls	r3, r3, #16
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	061b      	lsls	r3, r3, #24
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	071b      	lsls	r3, r3, #28
 8002b3a:	491b      	ldr	r1, [pc, #108]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b40:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <HAL_RCC_OscConfig+0x4b4>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b46:	f7fe fb63 	bl	8001210 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4e:	f7fe fb5f 	bl	8001210 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e064      	b.n	8002c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b60:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x452>
 8002b6c:	e05c      	b.n	8002c28 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6e:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <HAL_RCC_OscConfig+0x4b4>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b74:	f7fe fb4c 	bl	8001210 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe fb48 	bl	8001210 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e04d      	b.n	8002c2a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8e:	4b06      	ldr	r3, [pc, #24]	; (8002ba8 <HAL_RCC_OscConfig+0x4ac>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x480>
 8002b9a:	e045      	b.n	8002c28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d107      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e040      	b.n	8002c2a <HAL_RCC_OscConfig+0x52e>
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	40007000 	.word	0x40007000
 8002bb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bb4:	4b1f      	ldr	r3, [pc, #124]	; (8002c34 <HAL_RCC_OscConfig+0x538>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d030      	beq.n	8002c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d129      	bne.n	8002c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d122      	bne.n	8002c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002be4:	4013      	ands	r3, r2
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d119      	bne.n	8002c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	085b      	lsrs	r3, r3, #1
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d10f      	bne.n	8002c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d107      	bne.n	8002c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800

08002c38 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e083      	b.n	8002d52 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	7f5b      	ldrb	r3, [r3, #29]
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d105      	bne.n	8002c60 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7fe f8b0 	bl	8000dc0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	22ca      	movs	r2, #202	; 0xca
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2253      	movs	r2, #83	; 0x53
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fb7a 	bl	8003370 <RTC_EnterInitMode>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d008      	beq.n	8002c94 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	22ff      	movs	r2, #255	; 0xff
 8002c88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e05e      	b.n	8002d52 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002ca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ca6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6899      	ldr	r1, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68d2      	ldr	r2, [r2, #12]
 8002cce:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6919      	ldr	r1, [r3, #16]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	041a      	lsls	r2, r3, #16
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cf2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10e      	bne.n	8002d20 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fb0c 	bl	8003320 <HAL_RTC_WaitForSynchro>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d008      	beq.n	8002d20 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	22ff      	movs	r2, #255	; 0xff
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2204      	movs	r2, #4
 8002d1a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e018      	b.n	8002d52 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699a      	ldr	r2, [r3, #24]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	22ff      	movs	r2, #255	; 0xff
 8002d48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002d50:	2300      	movs	r3, #0
  }
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d5a:	b590      	push	{r4, r7, lr}
 8002d5c:	b087      	sub	sp, #28
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	7f1b      	ldrb	r3, [r3, #28]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_RTC_SetTime+0x1c>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e0aa      	b.n	8002ecc <HAL_RTC_SetTime+0x172>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d126      	bne.n	8002dd6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d102      	bne.n	8002d9c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fb11 	bl	80033c8 <RTC_ByteToBcd2>
 8002da6:	4603      	mov	r3, r0
 8002da8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	785b      	ldrb	r3, [r3, #1]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fb0a 	bl	80033c8 <RTC_ByteToBcd2>
 8002db4:	4603      	mov	r3, r0
 8002db6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002db8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	789b      	ldrb	r3, [r3, #2]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fb02 	bl	80033c8 <RTC_ByteToBcd2>
 8002dc4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002dc6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	78db      	ldrb	r3, [r3, #3]
 8002dce:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	e018      	b.n	8002e08 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d102      	bne.n	8002dea <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2200      	movs	r2, #0
 8002de8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	785b      	ldrb	r3, [r3, #1]
 8002df4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002df6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002df8:	68ba      	ldr	r2, [r7, #8]
 8002dfa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002dfc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	78db      	ldrb	r3, [r3, #3]
 8002e02:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	22ca      	movs	r2, #202	; 0xca
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2253      	movs	r2, #83	; 0x53
 8002e16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 faa9 	bl	8003370 <RTC_EnterInitMode>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00b      	beq.n	8002e3c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	22ff      	movs	r2, #255	; 0xff
 8002e2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2204      	movs	r2, #4
 8002e30:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e047      	b.n	8002ecc <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002e46:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002e4a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e5a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6899      	ldr	r1, [r3, #8]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	68da      	ldr	r2, [r3, #12]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e82:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d111      	bne.n	8002eb6 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 fa44 	bl	8003320 <HAL_RTC_WaitForSynchro>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00b      	beq.n	8002eb6 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	22ff      	movs	r2, #255	; 0xff
 8002ea4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e00a      	b.n	8002ecc <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	22ff      	movs	r2, #255	; 0xff
 8002ebc:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8002eca:	2300      	movs	r3, #0
  }
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd90      	pop	{r4, r7, pc}

08002ed4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002ed4:	b590      	push	{r4, r7, lr}
 8002ed6:	b087      	sub	sp, #28
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	7f1b      	ldrb	r3, [r3, #28]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_RTC_SetDate+0x1c>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e094      	b.n	800301a <HAL_RTC_SetDate+0x146>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2202      	movs	r2, #2
 8002efa:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10e      	bne.n	8002f20 <HAL_RTC_SetDate+0x4c>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	785b      	ldrb	r3, [r3, #1]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	785b      	ldrb	r3, [r3, #1]
 8002f12:	f023 0310 	bic.w	r3, r3, #16
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	330a      	adds	r3, #10
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d11c      	bne.n	8002f60 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	78db      	ldrb	r3, [r3, #3]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fa4c 	bl	80033c8 <RTC_ByteToBcd2>
 8002f30:	4603      	mov	r3, r0
 8002f32:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	785b      	ldrb	r3, [r3, #1]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 fa45 	bl	80033c8 <RTC_ByteToBcd2>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002f42:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	789b      	ldrb	r3, [r3, #2]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 fa3d 	bl	80033c8 <RTC_ByteToBcd2>
 8002f4e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002f50:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	617b      	str	r3, [r7, #20]
 8002f5e:	e00e      	b.n	8002f7e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	78db      	ldrb	r3, [r3, #3]
 8002f64:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	785b      	ldrb	r3, [r3, #1]
 8002f6a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002f6c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002f72:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	22ca      	movs	r2, #202	; 0xca
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2253      	movs	r2, #83	; 0x53
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f9ee 	bl	8003370 <RTC_EnterInitMode>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00b      	beq.n	8002fb2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	22ff      	movs	r2, #255	; 0xff
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2200      	movs	r2, #0
 8002fac:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e033      	b.n	800301a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002fbc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002fc0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fd0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0320 	and.w	r3, r3, #32
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d111      	bne.n	8003004 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 f99d 	bl	8003320 <HAL_RTC_WaitForSynchro>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00b      	beq.n	8003004 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	22ff      	movs	r2, #255	; 0xff
 8002ff2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2204      	movs	r2, #4
 8002ff8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e00a      	b.n	800301a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	22ff      	movs	r2, #255	; 0xff
 800300a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2201      	movs	r2, #1
 8003010:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003018:	2300      	movs	r3, #0
  }
}
 800301a:	4618      	mov	r0, r3
 800301c:	371c      	adds	r7, #28
 800301e:	46bd      	mov	sp, r7
 8003020:	bd90      	pop	{r4, r7, pc}
	...

08003024 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b089      	sub	sp, #36	; 0x24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	61fb      	str	r3, [r7, #28]
 8003034:	2300      	movs	r3, #0
 8003036:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8003038:	4b93      	ldr	r3, [pc, #588]	; (8003288 <HAL_RTC_SetAlarm_IT+0x264>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a93      	ldr	r2, [pc, #588]	; (800328c <HAL_RTC_SetAlarm_IT+0x268>)
 800303e:	fba2 2303 	umull	r2, r3, r2, r3
 8003042:	0adb      	lsrs	r3, r3, #11
 8003044:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003048:	fb02 f303 	mul.w	r3, r2, r3
 800304c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	7f1b      	ldrb	r3, [r3, #28]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_RTC_SetAlarm_IT+0x36>
 8003056:	2302      	movs	r3, #2
 8003058:	e111      	b.n	800327e <HAL_RTC_SetAlarm_IT+0x25a>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2202      	movs	r2, #2
 8003064:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d137      	bne.n	80030dc <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2200      	movs	r2, #0
 800307e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f000 f99f 	bl	80033c8 <RTC_ByteToBcd2>
 800308a:	4603      	mov	r3, r0
 800308c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	785b      	ldrb	r3, [r3, #1]
 8003092:	4618      	mov	r0, r3
 8003094:	f000 f998 	bl	80033c8 <RTC_ByteToBcd2>
 8003098:	4603      	mov	r3, r0
 800309a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800309c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	789b      	ldrb	r3, [r3, #2]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f000 f990 	bl	80033c8 <RTC_ByteToBcd2>
 80030a8:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80030aa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	78db      	ldrb	r3, [r3, #3]
 80030b2:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80030b4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f982 	bl	80033c8 <RTC_ByteToBcd2>
 80030c4:	4603      	mov	r3, r0
 80030c6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80030c8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80030d0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	e023      	b.n	8003124 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d102      	bne.n	80030f0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2200      	movs	r2, #0
 80030ee:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	785b      	ldrb	r3, [r3, #1]
 80030fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80030fc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003102:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	78db      	ldrb	r3, [r3, #3]
 8003108:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800310a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003112:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003114:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800311a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003120:	4313      	orrs	r3, r2
 8003122:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	22ca      	movs	r2, #202	; 0xca
 8003136:	625a      	str	r2, [r3, #36]	; 0x24
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2253      	movs	r2, #83	; 0x53
 800313e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003148:	d141      	bne.n	80031ce <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003158:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800316a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	1e5a      	subs	r2, r3, #1
 8003170:	617a      	str	r2, [r7, #20]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10b      	bne.n	800318e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	22ff      	movs	r2, #255	; 0xff
 800317c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2203      	movs	r2, #3
 8003182:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e077      	b.n	800327e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0e7      	beq.n	800316c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	69fa      	ldr	r2, [r7, #28]
 80031a2:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031ba:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	e040      	b.n	8003250 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031dc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f462 7220 	orn	r2, r2, #640	; 0x280
 80031ee:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	1e5a      	subs	r2, r3, #1
 80031f4:	617a      	str	r2, [r7, #20]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10b      	bne.n	8003212 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	22ff      	movs	r2, #255	; 0xff
 8003200:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2203      	movs	r2, #3
 8003206:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e035      	b.n	800327e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 0302 	and.w	r3, r3, #2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0e7      	beq.n	80031f0 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800323e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800324e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a0e      	ldr	r2, [pc, #56]	; (8003290 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800325a:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <HAL_RTC_SetAlarm_IT+0x26c>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	4a0b      	ldr	r2, [pc, #44]	; (8003290 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003266:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	22ff      	movs	r2, #255	; 0xff
 800326e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3724      	adds	r7, #36	; 0x24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd90      	pop	{r4, r7, pc}
 8003286:	bf00      	nop
 8003288:	20000000 	.word	0x20000000
 800328c:	10624dd3 	.word	0x10624dd3
 8003290:	40013c00 	.word	0x40013c00

08003294 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d012      	beq.n	80032d0 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00b      	beq.n	80032d0 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7fd fbdb 	bl	8000a74 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80032ce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d012      	beq.n	8003304 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00b      	beq.n	8003304 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f9c5 	bl	800367c <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003302:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003304:	4b05      	ldr	r3, [pc, #20]	; (800331c <HAL_RTC_AlarmIRQHandler+0x88>)
 8003306:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800330a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	775a      	strb	r2, [r3, #29]
}
 8003312:	bf00      	nop
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40013c00 	.word	0x40013c00

08003320 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800333a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800333c:	f7fd ff68 	bl	8001210 <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003342:	e009      	b.n	8003358 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003344:	f7fd ff64 	bl	8001210 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003352:	d901      	bls.n	8003358 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e007      	b.n	8003368 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0ee      	beq.n	8003344 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d119      	bne.n	80033be <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f04f 32ff 	mov.w	r2, #4294967295
 8003392:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003394:	f7fd ff3c 	bl	8001210 <HAL_GetTick>
 8003398:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800339a:	e009      	b.n	80033b0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800339c:	f7fd ff38 	bl	8001210 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033aa:	d901      	bls.n	80033b0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e007      	b.n	80033c0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0ee      	beq.n	800339c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80033d6:	e005      	b.n	80033e4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	3301      	adds	r3, #1
 80033dc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	3b0a      	subs	r3, #10
 80033e2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	2b09      	cmp	r3, #9
 80033e8:	d8f6      	bhi.n	80033d8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	b2db      	uxtb	r3, r3
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	7f1b      	ldrb	r3, [r3, #28]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d101      	bne.n	800341c <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8003418:	2302      	movs	r3, #2
 800341a:	e0a6      	b.n	800356a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2201      	movs	r2, #1
 8003420:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2202      	movs	r2, #2
 8003426:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	22ca      	movs	r2, #202	; 0xca
 800342e:	625a      	str	r2, [r3, #36]	; 0x24
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2253      	movs	r2, #83	; 0x53
 8003436:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003442:	2b00      	cmp	r3, #0
 8003444:	d022      	beq.n	800348c <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8003446:	4b4c      	ldr	r3, [pc, #304]	; (8003578 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a4c      	ldr	r2, [pc, #304]	; (800357c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800344c:	fba2 2303 	umull	r2, r3, r2, r3
 8003450:	0adb      	lsrs	r3, r3, #11
 8003452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	1e5a      	subs	r2, r3, #1
 8003460:	617a      	str	r2, [r7, #20]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10b      	bne.n	800347e <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	22ff      	movs	r2, #255	; 0xff
 800346c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2203      	movs	r2, #3
 8003472:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e075      	b.n	800356a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e7      	bne.n	800345c <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800349a:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800349c:	4b36      	ldr	r3, [pc, #216]	; (8003578 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a36      	ldr	r2, [pc, #216]	; (800357c <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	0adb      	lsrs	r3, r3, #11
 80034a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034ac:	fb02 f303 	mul.w	r3, r2, r3
 80034b0:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	1e5a      	subs	r2, r3, #1
 80034b6:	617a      	str	r2, [r7, #20]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10b      	bne.n	80034d4 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	22ff      	movs	r2, #255	; 0xff
 80034c2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2203      	movs	r2, #3
 80034c8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e04a      	b.n	800356a <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0e7      	beq.n	80034b2 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689a      	ldr	r2, [r3, #8]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0207 	bic.w	r2, r2, #7
 80034f8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6899      	ldr	r1, [r3, #8]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	430a      	orrs	r2, r1
 8003508:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800350a:	4b1d      	ldr	r3, [pc, #116]	; (8003580 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1c      	ldr	r2, [pc, #112]	; (8003580 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003510:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003514:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 8003516:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	4a19      	ldr	r2, [pc, #100]	; (8003580 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 800351c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003520:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003532:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003542:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003552:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	22ff      	movs	r2, #255	; 0xff
 800355a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2201      	movs	r2, #1
 8003560:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	371c      	adds	r7, #28
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20000000 	.word	0x20000000
 800357c:	10624dd3 	.word	0x10624dd3
 8003580:	40013c00 	.word	0x40013c00

08003584 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	7f1b      	ldrb	r3, [r3, #28]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8003598:	2302      	movs	r3, #2
 800359a:	e047      	b.n	800362c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2202      	movs	r2, #2
 80035a6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	22ca      	movs	r2, #202	; 0xca
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2253      	movs	r2, #83	; 0x53
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c6:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689a      	ldr	r2, [r3, #8]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035d6:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035d8:	f7fd fe1a 	bl	8001210 <HAL_GetTick>
 80035dc:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80035de:	e013      	b.n	8003608 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80035e0:	f7fd fe16 	bl	8001210 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ee:	d90b      	bls.n	8003608 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	22ff      	movs	r2, #255	; 0xff
 80035f6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2203      	movs	r2, #3
 80035fc:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e011      	b.n	800362c <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0e4      	beq.n	80035e0 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	22ff      	movs	r2, #255	; 0xff
 800361c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fd fa30 	bl	8000ab0 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	b2da      	uxtb	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003660:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003662:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 8003664:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003668:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	775a      	strb	r2, [r3, #29]
}
 8003670:	bf00      	nop
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40013c00 	.word	0x40013c00

0800367c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e041      	b.n	8003726 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f839 	bl	800372e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3304      	adds	r3, #4
 80036cc:	4619      	mov	r1, r3
 80036ce:	4610      	mov	r0, r2
 80036d0:	f000 f9d8 	bl	8003a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b01      	cmp	r3, #1
 8003756:	d001      	beq.n	800375c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e04e      	b.n	80037fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a23      	ldr	r2, [pc, #140]	; (8003808 <HAL_TIM_Base_Start_IT+0xc4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d022      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003786:	d01d      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a1f      	ldr	r2, [pc, #124]	; (800380c <HAL_TIM_Base_Start_IT+0xc8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d018      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1e      	ldr	r2, [pc, #120]	; (8003810 <HAL_TIM_Base_Start_IT+0xcc>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d013      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1c      	ldr	r2, [pc, #112]	; (8003814 <HAL_TIM_Base_Start_IT+0xd0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00e      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <HAL_TIM_Base_Start_IT+0xd4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d009      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a19      	ldr	r2, [pc, #100]	; (800381c <HAL_TIM_Base_Start_IT+0xd8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d004      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a18      	ldr	r2, [pc, #96]	; (8003820 <HAL_TIM_Base_Start_IT+0xdc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d111      	bne.n	80037e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b06      	cmp	r3, #6
 80037d4:	d010      	beq.n	80037f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0201 	orr.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e6:	e007      	b.n	80037f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40010000 	.word	0x40010000
 800380c:	40000400 	.word	0x40000400
 8003810:	40000800 	.word	0x40000800
 8003814:	40000c00 	.word	0x40000c00
 8003818:	40010400 	.word	0x40010400
 800381c:	40014000 	.word	0x40014000
 8003820:	40001800 	.word	0x40001800

08003824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b02      	cmp	r3, #2
 8003838:	d122      	bne.n	8003880 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b02      	cmp	r3, #2
 8003846:	d11b      	bne.n	8003880 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f06f 0202 	mvn.w	r2, #2
 8003850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	f003 0303 	and.w	r3, r3, #3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d003      	beq.n	800386e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f8ee 	bl	8003a48 <HAL_TIM_IC_CaptureCallback>
 800386c:	e005      	b.n	800387a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f8e0 	bl	8003a34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f8f1 	bl	8003a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b04      	cmp	r3, #4
 800388c:	d122      	bne.n	80038d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b04      	cmp	r3, #4
 800389a:	d11b      	bne.n	80038d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0204 	mvn.w	r2, #4
 80038a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2202      	movs	r2, #2
 80038aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f8c4 	bl	8003a48 <HAL_TIM_IC_CaptureCallback>
 80038c0:	e005      	b.n	80038ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f8b6 	bl	8003a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f8c7 	bl	8003a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d122      	bne.n	8003928 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b08      	cmp	r3, #8
 80038ee:	d11b      	bne.n	8003928 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0208 	mvn.w	r2, #8
 80038f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2204      	movs	r2, #4
 80038fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d003      	beq.n	8003916 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f89a 	bl	8003a48 <HAL_TIM_IC_CaptureCallback>
 8003914:	e005      	b.n	8003922 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 f88c 	bl	8003a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f89d 	bl	8003a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	2b10      	cmp	r3, #16
 8003934:	d122      	bne.n	800397c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f003 0310 	and.w	r3, r3, #16
 8003940:	2b10      	cmp	r3, #16
 8003942:	d11b      	bne.n	800397c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0210 	mvn.w	r2, #16
 800394c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2208      	movs	r2, #8
 8003952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f870 	bl	8003a48 <HAL_TIM_IC_CaptureCallback>
 8003968:	e005      	b.n	8003976 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f862 	bl	8003a34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f873 	bl	8003a5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b01      	cmp	r3, #1
 8003988:	d10e      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b01      	cmp	r3, #1
 8003996:	d107      	bne.n	80039a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f06f 0201 	mvn.w	r2, #1
 80039a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fd f9c8 	bl	8000d38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b2:	2b80      	cmp	r3, #128	; 0x80
 80039b4:	d10e      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c0:	2b80      	cmp	r3, #128	; 0x80
 80039c2:	d107      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f902 	bl	8003bd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039de:	2b40      	cmp	r3, #64	; 0x40
 80039e0:	d10e      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ec:	2b40      	cmp	r3, #64	; 0x40
 80039ee:	d107      	bne.n	8003a00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f838 	bl	8003a70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	f003 0320 	and.w	r3, r3, #32
 8003a0a:	2b20      	cmp	r3, #32
 8003a0c:	d10e      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	f003 0320 	and.w	r3, r3, #32
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	d107      	bne.n	8003a2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0220 	mvn.w	r2, #32
 8003a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f8cc 	bl	8003bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a2c:	bf00      	nop
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a40      	ldr	r2, [pc, #256]	; (8003b98 <TIM_Base_SetConfig+0x114>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d013      	beq.n	8003ac4 <TIM_Base_SetConfig+0x40>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa2:	d00f      	beq.n	8003ac4 <TIM_Base_SetConfig+0x40>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a3d      	ldr	r2, [pc, #244]	; (8003b9c <TIM_Base_SetConfig+0x118>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d00b      	beq.n	8003ac4 <TIM_Base_SetConfig+0x40>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a3c      	ldr	r2, [pc, #240]	; (8003ba0 <TIM_Base_SetConfig+0x11c>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d007      	beq.n	8003ac4 <TIM_Base_SetConfig+0x40>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a3b      	ldr	r2, [pc, #236]	; (8003ba4 <TIM_Base_SetConfig+0x120>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d003      	beq.n	8003ac4 <TIM_Base_SetConfig+0x40>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a3a      	ldr	r2, [pc, #232]	; (8003ba8 <TIM_Base_SetConfig+0x124>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d108      	bne.n	8003ad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a2f      	ldr	r2, [pc, #188]	; (8003b98 <TIM_Base_SetConfig+0x114>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d02b      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae4:	d027      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a2c      	ldr	r2, [pc, #176]	; (8003b9c <TIM_Base_SetConfig+0x118>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d023      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2b      	ldr	r2, [pc, #172]	; (8003ba0 <TIM_Base_SetConfig+0x11c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d01f      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2a      	ldr	r2, [pc, #168]	; (8003ba4 <TIM_Base_SetConfig+0x120>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d01b      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a29      	ldr	r2, [pc, #164]	; (8003ba8 <TIM_Base_SetConfig+0x124>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d017      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a28      	ldr	r2, [pc, #160]	; (8003bac <TIM_Base_SetConfig+0x128>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a27      	ldr	r2, [pc, #156]	; (8003bb0 <TIM_Base_SetConfig+0x12c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00f      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a26      	ldr	r2, [pc, #152]	; (8003bb4 <TIM_Base_SetConfig+0x130>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00b      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a25      	ldr	r2, [pc, #148]	; (8003bb8 <TIM_Base_SetConfig+0x134>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d007      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a24      	ldr	r2, [pc, #144]	; (8003bbc <TIM_Base_SetConfig+0x138>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d003      	beq.n	8003b36 <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a23      	ldr	r2, [pc, #140]	; (8003bc0 <TIM_Base_SetConfig+0x13c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d108      	bne.n	8003b48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a0a      	ldr	r2, [pc, #40]	; (8003b98 <TIM_Base_SetConfig+0x114>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d003      	beq.n	8003b7c <TIM_Base_SetConfig+0xf8>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a0c      	ldr	r2, [pc, #48]	; (8003ba8 <TIM_Base_SetConfig+0x124>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d103      	bne.n	8003b84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	615a      	str	r2, [r3, #20]
}
 8003b8a:	bf00      	nop
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40000800 	.word	0x40000800
 8003ba4:	40000c00 	.word	0x40000c00
 8003ba8:	40010400 	.word	0x40010400
 8003bac:	40014000 	.word	0x40014000
 8003bb0:	40014400 	.word	0x40014400
 8003bb4:	40014800 	.word	0x40014800
 8003bb8:	40001800 	.word	0x40001800
 8003bbc:	40001c00 	.word	0x40001c00
 8003bc0:	40002000 	.word	0x40002000

08003bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e03f      	b.n	8003c7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd f90e 	bl	8000e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2224      	movs	r2, #36	; 0x24
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68da      	ldr	r2, [r3, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 f929 	bl	8003e88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695a      	ldr	r2, [r3, #20]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68da      	ldr	r2, [r3, #12]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b08a      	sub	sp, #40	; 0x28
 8003c8a:	af02      	add	r7, sp, #8
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	603b      	str	r3, [r7, #0]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d17c      	bne.n	8003da0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <HAL_UART_Transmit+0x2c>
 8003cac:	88fb      	ldrh	r3, [r7, #6]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e075      	b.n	8003da2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_UART_Transmit+0x3e>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e06e      	b.n	8003da2 <HAL_UART_Transmit+0x11c>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2221      	movs	r2, #33	; 0x21
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cda:	f7fd fa99 	bl	8001210 <HAL_GetTick>
 8003cde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	88fa      	ldrh	r2, [r7, #6]
 8003ce4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	88fa      	ldrh	r2, [r7, #6]
 8003cea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf4:	d108      	bne.n	8003d08 <HAL_UART_Transmit+0x82>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d104      	bne.n	8003d08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	61bb      	str	r3, [r7, #24]
 8003d06:	e003      	b.n	8003d10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d18:	e02a      	b.n	8003d70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2200      	movs	r2, #0
 8003d22:	2180      	movs	r1, #128	; 0x80
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f840 	bl	8003daa <UART_WaitOnFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e036      	b.n	8003da2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10b      	bne.n	8003d52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	3302      	adds	r3, #2
 8003d4e:	61bb      	str	r3, [r7, #24]
 8003d50:	e007      	b.n	8003d62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	781a      	ldrb	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d1cf      	bne.n	8003d1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2200      	movs	r2, #0
 8003d82:	2140      	movs	r1, #64	; 0x40
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f810 	bl	8003daa <UART_WaitOnFlagUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e006      	b.n	8003da2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2220      	movs	r2, #32
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e000      	b.n	8003da2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003da0:	2302      	movs	r3, #2
  }
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3720      	adds	r7, #32
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b090      	sub	sp, #64	; 0x40
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	60b9      	str	r1, [r7, #8]
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	4613      	mov	r3, r2
 8003db8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dba:	e050      	b.n	8003e5e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc2:	d04c      	beq.n	8003e5e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d007      	beq.n	8003dda <UART_WaitOnFlagUntilTimeout+0x30>
 8003dca:	f7fd fa21 	bl	8001210 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d241      	bcs.n	8003e5e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	330c      	adds	r3, #12
 8003de0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	330c      	adds	r3, #12
 8003df8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dfa:	637a      	str	r2, [r7, #52]	; 0x34
 8003dfc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e02:	e841 2300 	strex	r3, r2, [r1]
 8003e06:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1e5      	bne.n	8003dda <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3314      	adds	r3, #20
 8003e14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	e853 3f00 	ldrex	r3, [r3]
 8003e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3314      	adds	r3, #20
 8003e2c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e2e:	623a      	str	r2, [r7, #32]
 8003e30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e32:	69f9      	ldr	r1, [r7, #28]
 8003e34:	6a3a      	ldr	r2, [r7, #32]
 8003e36:	e841 2300 	strex	r3, r2, [r1]
 8003e3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1e5      	bne.n	8003e0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e00f      	b.n	8003e7e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4013      	ands	r3, r2
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	bf0c      	ite	eq
 8003e6e:	2301      	moveq	r3, #1
 8003e70:	2300      	movne	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d09f      	beq.n	8003dbc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3740      	adds	r7, #64	; 0x40
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e8c:	b09f      	sub	sp, #124	; 0x7c
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9e:	68d9      	ldr	r1, [r3, #12]
 8003ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	ea40 0301 	orr.w	r3, r0, r1
 8003ea8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ecc:	f021 010c 	bic.w	r1, r1, #12
 8003ed0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ed6:	430b      	orrs	r3, r1
 8003ed8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee6:	6999      	ldr	r1, [r3, #24]
 8003ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	ea40 0301 	orr.w	r3, r0, r1
 8003ef0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4bc5      	ldr	r3, [pc, #788]	; (800420c <UART_SetConfig+0x384>)
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d004      	beq.n	8003f06 <UART_SetConfig+0x7e>
 8003efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	4bc3      	ldr	r3, [pc, #780]	; (8004210 <UART_SetConfig+0x388>)
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d103      	bne.n	8003f0e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f06:	f7fd fed7 	bl	8001cb8 <HAL_RCC_GetPCLK2Freq>
 8003f0a:	6778      	str	r0, [r7, #116]	; 0x74
 8003f0c:	e002      	b.n	8003f14 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f0e:	f7fd febf 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 8003f12:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f16:	69db      	ldr	r3, [r3, #28]
 8003f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f1c:	f040 80b6 	bne.w	800408c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f22:	461c      	mov	r4, r3
 8003f24:	f04f 0500 	mov.w	r5, #0
 8003f28:	4622      	mov	r2, r4
 8003f2a:	462b      	mov	r3, r5
 8003f2c:	1891      	adds	r1, r2, r2
 8003f2e:	6439      	str	r1, [r7, #64]	; 0x40
 8003f30:	415b      	adcs	r3, r3
 8003f32:	647b      	str	r3, [r7, #68]	; 0x44
 8003f34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f38:	1912      	adds	r2, r2, r4
 8003f3a:	eb45 0303 	adc.w	r3, r5, r3
 8003f3e:	f04f 0000 	mov.w	r0, #0
 8003f42:	f04f 0100 	mov.w	r1, #0
 8003f46:	00d9      	lsls	r1, r3, #3
 8003f48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f4c:	00d0      	lsls	r0, r2, #3
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	1911      	adds	r1, r2, r4
 8003f54:	6639      	str	r1, [r7, #96]	; 0x60
 8003f56:	416b      	adcs	r3, r5
 8003f58:	667b      	str	r3, [r7, #100]	; 0x64
 8003f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	1891      	adds	r1, r2, r2
 8003f66:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f68:	415b      	adcs	r3, r3
 8003f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f70:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003f74:	f7fc f9a4 	bl	80002c0 <__aeabi_uldivmod>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4ba5      	ldr	r3, [pc, #660]	; (8004214 <UART_SetConfig+0x38c>)
 8003f7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	011e      	lsls	r6, r3, #4
 8003f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f88:	461c      	mov	r4, r3
 8003f8a:	f04f 0500 	mov.w	r5, #0
 8003f8e:	4622      	mov	r2, r4
 8003f90:	462b      	mov	r3, r5
 8003f92:	1891      	adds	r1, r2, r2
 8003f94:	6339      	str	r1, [r7, #48]	; 0x30
 8003f96:	415b      	adcs	r3, r3
 8003f98:	637b      	str	r3, [r7, #52]	; 0x34
 8003f9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f9e:	1912      	adds	r2, r2, r4
 8003fa0:	eb45 0303 	adc.w	r3, r5, r3
 8003fa4:	f04f 0000 	mov.w	r0, #0
 8003fa8:	f04f 0100 	mov.w	r1, #0
 8003fac:	00d9      	lsls	r1, r3, #3
 8003fae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fb2:	00d0      	lsls	r0, r2, #3
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	1911      	adds	r1, r2, r4
 8003fba:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fbc:	416b      	adcs	r3, r5
 8003fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	f04f 0300 	mov.w	r3, #0
 8003fca:	1891      	adds	r1, r2, r2
 8003fcc:	62b9      	str	r1, [r7, #40]	; 0x28
 8003fce:	415b      	adcs	r3, r3
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fd6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003fda:	f7fc f971 	bl	80002c0 <__aeabi_uldivmod>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4b8c      	ldr	r3, [pc, #560]	; (8004214 <UART_SetConfig+0x38c>)
 8003fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	2164      	movs	r1, #100	; 0x64
 8003fec:	fb01 f303 	mul.w	r3, r1, r3
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	3332      	adds	r3, #50	; 0x32
 8003ff6:	4a87      	ldr	r2, [pc, #540]	; (8004214 <UART_SetConfig+0x38c>)
 8003ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffc:	095b      	lsrs	r3, r3, #5
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004004:	441e      	add	r6, r3
 8004006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004008:	4618      	mov	r0, r3
 800400a:	f04f 0100 	mov.w	r1, #0
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	1894      	adds	r4, r2, r2
 8004014:	623c      	str	r4, [r7, #32]
 8004016:	415b      	adcs	r3, r3
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
 800401a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800401e:	1812      	adds	r2, r2, r0
 8004020:	eb41 0303 	adc.w	r3, r1, r3
 8004024:	f04f 0400 	mov.w	r4, #0
 8004028:	f04f 0500 	mov.w	r5, #0
 800402c:	00dd      	lsls	r5, r3, #3
 800402e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004032:	00d4      	lsls	r4, r2, #3
 8004034:	4622      	mov	r2, r4
 8004036:	462b      	mov	r3, r5
 8004038:	1814      	adds	r4, r2, r0
 800403a:	653c      	str	r4, [r7, #80]	; 0x50
 800403c:	414b      	adcs	r3, r1
 800403e:	657b      	str	r3, [r7, #84]	; 0x54
 8004040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	461a      	mov	r2, r3
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	1891      	adds	r1, r2, r2
 800404c:	61b9      	str	r1, [r7, #24]
 800404e:	415b      	adcs	r3, r3
 8004050:	61fb      	str	r3, [r7, #28]
 8004052:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004056:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800405a:	f7fc f931 	bl	80002c0 <__aeabi_uldivmod>
 800405e:	4602      	mov	r2, r0
 8004060:	460b      	mov	r3, r1
 8004062:	4b6c      	ldr	r3, [pc, #432]	; (8004214 <UART_SetConfig+0x38c>)
 8004064:	fba3 1302 	umull	r1, r3, r3, r2
 8004068:	095b      	lsrs	r3, r3, #5
 800406a:	2164      	movs	r1, #100	; 0x64
 800406c:	fb01 f303 	mul.w	r3, r1, r3
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	3332      	adds	r3, #50	; 0x32
 8004076:	4a67      	ldr	r2, [pc, #412]	; (8004214 <UART_SetConfig+0x38c>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	095b      	lsrs	r3, r3, #5
 800407e:	f003 0207 	and.w	r2, r3, #7
 8004082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4432      	add	r2, r6
 8004088:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800408a:	e0b9      	b.n	8004200 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800408c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800408e:	461c      	mov	r4, r3
 8004090:	f04f 0500 	mov.w	r5, #0
 8004094:	4622      	mov	r2, r4
 8004096:	462b      	mov	r3, r5
 8004098:	1891      	adds	r1, r2, r2
 800409a:	6139      	str	r1, [r7, #16]
 800409c:	415b      	adcs	r3, r3
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040a4:	1912      	adds	r2, r2, r4
 80040a6:	eb45 0303 	adc.w	r3, r5, r3
 80040aa:	f04f 0000 	mov.w	r0, #0
 80040ae:	f04f 0100 	mov.w	r1, #0
 80040b2:	00d9      	lsls	r1, r3, #3
 80040b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040b8:	00d0      	lsls	r0, r2, #3
 80040ba:	4602      	mov	r2, r0
 80040bc:	460b      	mov	r3, r1
 80040be:	eb12 0804 	adds.w	r8, r2, r4
 80040c2:	eb43 0905 	adc.w	r9, r3, r5
 80040c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f04f 0100 	mov.w	r1, #0
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	008b      	lsls	r3, r1, #2
 80040da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040de:	0082      	lsls	r2, r0, #2
 80040e0:	4640      	mov	r0, r8
 80040e2:	4649      	mov	r1, r9
 80040e4:	f7fc f8ec 	bl	80002c0 <__aeabi_uldivmod>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4b49      	ldr	r3, [pc, #292]	; (8004214 <UART_SetConfig+0x38c>)
 80040ee:	fba3 2302 	umull	r2, r3, r3, r2
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	011e      	lsls	r6, r3, #4
 80040f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040f8:	4618      	mov	r0, r3
 80040fa:	f04f 0100 	mov.w	r1, #0
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	1894      	adds	r4, r2, r2
 8004104:	60bc      	str	r4, [r7, #8]
 8004106:	415b      	adcs	r3, r3
 8004108:	60fb      	str	r3, [r7, #12]
 800410a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800410e:	1812      	adds	r2, r2, r0
 8004110:	eb41 0303 	adc.w	r3, r1, r3
 8004114:	f04f 0400 	mov.w	r4, #0
 8004118:	f04f 0500 	mov.w	r5, #0
 800411c:	00dd      	lsls	r5, r3, #3
 800411e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004122:	00d4      	lsls	r4, r2, #3
 8004124:	4622      	mov	r2, r4
 8004126:	462b      	mov	r3, r5
 8004128:	1814      	adds	r4, r2, r0
 800412a:	64bc      	str	r4, [r7, #72]	; 0x48
 800412c:	414b      	adcs	r3, r1
 800412e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4618      	mov	r0, r3
 8004136:	f04f 0100 	mov.w	r1, #0
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	f04f 0300 	mov.w	r3, #0
 8004142:	008b      	lsls	r3, r1, #2
 8004144:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004148:	0082      	lsls	r2, r0, #2
 800414a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800414e:	f7fc f8b7 	bl	80002c0 <__aeabi_uldivmod>
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4b2f      	ldr	r3, [pc, #188]	; (8004214 <UART_SetConfig+0x38c>)
 8004158:	fba3 1302 	umull	r1, r3, r3, r2
 800415c:	095b      	lsrs	r3, r3, #5
 800415e:	2164      	movs	r1, #100	; 0x64
 8004160:	fb01 f303 	mul.w	r3, r1, r3
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	011b      	lsls	r3, r3, #4
 8004168:	3332      	adds	r3, #50	; 0x32
 800416a:	4a2a      	ldr	r2, [pc, #168]	; (8004214 <UART_SetConfig+0x38c>)
 800416c:	fba2 2303 	umull	r2, r3, r2, r3
 8004170:	095b      	lsrs	r3, r3, #5
 8004172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004176:	441e      	add	r6, r3
 8004178:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800417a:	4618      	mov	r0, r3
 800417c:	f04f 0100 	mov.w	r1, #0
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	1894      	adds	r4, r2, r2
 8004186:	603c      	str	r4, [r7, #0]
 8004188:	415b      	adcs	r3, r3
 800418a:	607b      	str	r3, [r7, #4]
 800418c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004190:	1812      	adds	r2, r2, r0
 8004192:	eb41 0303 	adc.w	r3, r1, r3
 8004196:	f04f 0400 	mov.w	r4, #0
 800419a:	f04f 0500 	mov.w	r5, #0
 800419e:	00dd      	lsls	r5, r3, #3
 80041a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80041a4:	00d4      	lsls	r4, r2, #3
 80041a6:	4622      	mov	r2, r4
 80041a8:	462b      	mov	r3, r5
 80041aa:	eb12 0a00 	adds.w	sl, r2, r0
 80041ae:	eb43 0b01 	adc.w	fp, r3, r1
 80041b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f04f 0100 	mov.w	r1, #0
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	008b      	lsls	r3, r1, #2
 80041c6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80041ca:	0082      	lsls	r2, r0, #2
 80041cc:	4650      	mov	r0, sl
 80041ce:	4659      	mov	r1, fp
 80041d0:	f7fc f876 	bl	80002c0 <__aeabi_uldivmod>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <UART_SetConfig+0x38c>)
 80041da:	fba3 1302 	umull	r1, r3, r3, r2
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	2164      	movs	r1, #100	; 0x64
 80041e2:	fb01 f303 	mul.w	r3, r1, r3
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	3332      	adds	r3, #50	; 0x32
 80041ec:	4a09      	ldr	r2, [pc, #36]	; (8004214 <UART_SetConfig+0x38c>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	f003 020f 	and.w	r2, r3, #15
 80041f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4432      	add	r2, r6
 80041fe:	609a      	str	r2, [r3, #8]
}
 8004200:	bf00      	nop
 8004202:	377c      	adds	r7, #124	; 0x7c
 8004204:	46bd      	mov	sp, r7
 8004206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800420a:	bf00      	nop
 800420c:	40011000 	.word	0x40011000
 8004210:	40011400 	.word	0x40011400
 8004214:	51eb851f 	.word	0x51eb851f

08004218 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004218:	b084      	sub	sp, #16
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	f107 001c 	add.w	r0, r7, #28
 8004226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422c:	2b01      	cmp	r3, #1
 800422e:	d122      	bne.n	8004276 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004234:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800425a:	2b01      	cmp	r3, #1
 800425c:	d105      	bne.n	800426a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fa7c 	bl	8004768 <USB_CoreReset>
 8004270:	4603      	mov	r3, r0
 8004272:	73fb      	strb	r3, [r7, #15]
 8004274:	e01a      	b.n	80042ac <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fa70 	bl	8004768 <USB_CoreReset>
 8004288:	4603      	mov	r3, r0
 800428a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800428c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	d106      	bne.n	80042a0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004296:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	639a      	str	r2, [r3, #56]	; 0x38
 800429e:	e005      	b.n	80042ac <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d10b      	bne.n	80042ca <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f043 0206 	orr.w	r2, r3, #6
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f043 0220 	orr.w	r2, r3, #32
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042d6:	b004      	add	sp, #16
 80042d8:	4770      	bx	lr

080042da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f023 0201 	bic.w	r2, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d115      	bne.n	800434a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800432a:	2001      	movs	r0, #1
 800432c:	f7fc ff7c 	bl	8001228 <HAL_Delay>
      ms++;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	3301      	adds	r3, #1
 8004334:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fa08 	bl	800474c <USB_GetMode>
 800433c:	4603      	mov	r3, r0
 800433e:	2b01      	cmp	r3, #1
 8004340:	d01e      	beq.n	8004380 <USB_SetCurrentMode+0x84>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2b31      	cmp	r3, #49	; 0x31
 8004346:	d9f0      	bls.n	800432a <USB_SetCurrentMode+0x2e>
 8004348:	e01a      	b.n	8004380 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d115      	bne.n	800437c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800435c:	2001      	movs	r0, #1
 800435e:	f7fc ff63 	bl	8001228 <HAL_Delay>
      ms++;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3301      	adds	r3, #1
 8004366:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f9ef 	bl	800474c <USB_GetMode>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <USB_SetCurrentMode+0x84>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b31      	cmp	r3, #49	; 0x31
 8004378:	d9f0      	bls.n	800435c <USB_SetCurrentMode+0x60>
 800437a:	e001      	b.n	8004380 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e005      	b.n	800438c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b32      	cmp	r3, #50	; 0x32
 8004384:	d101      	bne.n	800438a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004394:	b084      	sub	sp, #16
 8004396:	b580      	push	{r7, lr}
 8004398:	b086      	sub	sp, #24
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80043a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	e009      	b.n	80043c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	3340      	adds	r3, #64	; 0x40
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	2200      	movs	r2, #0
 80043c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	3301      	adds	r3, #1
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	2b0e      	cmp	r3, #14
 80043cc:	d9f2      	bls.n	80043b4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80043ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d11c      	bne.n	800440e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043e2:	f043 0302 	orr.w	r3, r3, #2
 80043e6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	e005      	b.n	800441a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004420:	461a      	mov	r2, r3
 8004422:	2300      	movs	r3, #0
 8004424:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800442c:	4619      	mov	r1, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004434:	461a      	mov	r2, r3
 8004436:	680b      	ldr	r3, [r1, #0]
 8004438:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443c:	2b01      	cmp	r3, #1
 800443e:	d10c      	bne.n	800445a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d104      	bne.n	8004450 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004446:	2100      	movs	r1, #0
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f945 	bl	80046d8 <USB_SetDevSpeed>
 800444e:	e008      	b.n	8004462 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004450:	2101      	movs	r1, #1
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 f940 	bl	80046d8 <USB_SetDevSpeed>
 8004458:	e003      	b.n	8004462 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800445a:	2103      	movs	r1, #3
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f93b 	bl	80046d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004462:	2110      	movs	r1, #16
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 f8f3 	bl	8004650 <USB_FlushTxFifo>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f90f 	bl	8004698 <USB_FlushRxFifo>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448a:	461a      	mov	r2, r3
 800448c:	2300      	movs	r3, #0
 800448e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004496:	461a      	mov	r2, r3
 8004498:	2300      	movs	r3, #0
 800449a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a2:	461a      	mov	r2, r3
 80044a4:	2300      	movs	r3, #0
 80044a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044a8:	2300      	movs	r3, #0
 80044aa:	613b      	str	r3, [r7, #16]
 80044ac:	e043      	b.n	8004536 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044c4:	d118      	bne.n	80044f8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d8:	461a      	mov	r2, r3
 80044da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	e013      	b.n	800450a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ee:	461a      	mov	r2, r3
 80044f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	e008      	b.n	800450a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004504:	461a      	mov	r2, r3
 8004506:	2300      	movs	r3, #0
 8004508:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004516:	461a      	mov	r2, r3
 8004518:	2300      	movs	r3, #0
 800451a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004528:	461a      	mov	r2, r3
 800452a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800452e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	3301      	adds	r3, #1
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	429a      	cmp	r2, r3
 800453c:	d3b7      	bcc.n	80044ae <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800453e:	2300      	movs	r3, #0
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	e043      	b.n	80045cc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800455a:	d118      	bne.n	800458e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10a      	bne.n	8004578 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456e:	461a      	mov	r2, r3
 8004570:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	e013      	b.n	80045a0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004584:	461a      	mov	r2, r3
 8004586:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800458a:	6013      	str	r3, [r2, #0]
 800458c:	e008      	b.n	80045a0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459a:	461a      	mov	r2, r3
 800459c:	2300      	movs	r3, #0
 800459e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ac:	461a      	mov	r2, r3
 80045ae:	2300      	movs	r3, #0
 80045b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045be:	461a      	mov	r2, r3
 80045c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80045c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	3301      	adds	r3, #1
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d3b7      	bcc.n	8004544 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80045f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d105      	bne.n	8004608 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f043 0210 	orr.w	r2, r3, #16
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699a      	ldr	r2, [r3, #24]
 800460c:	4b0f      	ldr	r3, [pc, #60]	; (800464c <USB_DevInit+0x2b8>)
 800460e:	4313      	orrs	r3, r2
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	f043 0208 	orr.w	r2, r3, #8
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004628:	2b01      	cmp	r3, #1
 800462a:	d107      	bne.n	800463c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004634:	f043 0304 	orr.w	r3, r3, #4
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800463c:	7dfb      	ldrb	r3, [r7, #23]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004648:	b004      	add	sp, #16
 800464a:	4770      	bx	lr
 800464c:	803c3800 	.word	0x803c3800

08004650 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	019b      	lsls	r3, r3, #6
 8004662:	f043 0220 	orr.w	r2, r3, #32
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	3301      	adds	r3, #1
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	4a08      	ldr	r2, [pc, #32]	; (8004694 <USB_FlushTxFifo+0x44>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d901      	bls.n	800467a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e006      	b.n	8004688 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b20      	cmp	r3, #32
 8004684:	d0f1      	beq.n	800466a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	00030d40 	.word	0x00030d40

08004698 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2210      	movs	r2, #16
 80046a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	3301      	adds	r3, #1
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	4a08      	ldr	r2, [pc, #32]	; (80046d4 <USB_FlushRxFifo+0x3c>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d901      	bls.n	80046ba <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e006      	b.n	80046c8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 0310 	and.w	r3, r3, #16
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d0f1      	beq.n	80046aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3714      	adds	r7, #20
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	00030d40 	.word	0x00030d40

080046d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80046d8:	b480      	push	{r7}
 80046da:	b085      	sub	sp, #20
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	68f9      	ldr	r1, [r7, #12]
 80046f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046f8:	4313      	orrs	r3, r2
 80046fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800470a:	b480      	push	{r7}
 800470c:	b085      	sub	sp, #20
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004724:	f023 0303 	bic.w	r3, r3, #3
 8004728:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004738:	f043 0302 	orr.w	r3, r3, #2
 800473c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	f003 0301 	and.w	r3, r3, #1
}
 800475c:	4618      	mov	r0, r3
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	3301      	adds	r3, #1
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	4a13      	ldr	r2, [pc, #76]	; (80047c8 <USB_CoreReset+0x60>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d901      	bls.n	8004784 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e01a      	b.n	80047ba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	daf3      	bge.n	8004774 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	f043 0201 	orr.w	r2, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	3301      	adds	r3, #1
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	4a09      	ldr	r2, [pc, #36]	; (80047c8 <USB_CoreReset+0x60>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d901      	bls.n	80047ac <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e006      	b.n	80047ba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d0f1      	beq.n	800479c <USB_CoreReset+0x34>

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	00030d40 	.word	0x00030d40

080047cc <__NVIC_SetPriority>:
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	4603      	mov	r3, r0
 80047d4:	6039      	str	r1, [r7, #0]
 80047d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	db0a      	blt.n	80047f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	490c      	ldr	r1, [pc, #48]	; (8004818 <__NVIC_SetPriority+0x4c>)
 80047e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ea:	0112      	lsls	r2, r2, #4
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	440b      	add	r3, r1
 80047f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80047f4:	e00a      	b.n	800480c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	4908      	ldr	r1, [pc, #32]	; (800481c <__NVIC_SetPriority+0x50>)
 80047fc:	79fb      	ldrb	r3, [r7, #7]
 80047fe:	f003 030f 	and.w	r3, r3, #15
 8004802:	3b04      	subs	r3, #4
 8004804:	0112      	lsls	r2, r2, #4
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	440b      	add	r3, r1
 800480a:	761a      	strb	r2, [r3, #24]
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	e000e100 	.word	0xe000e100
 800481c:	e000ed00 	.word	0xe000ed00

08004820 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004824:	4b05      	ldr	r3, [pc, #20]	; (800483c <SysTick_Handler+0x1c>)
 8004826:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004828:	f001 ff00 	bl	800662c <xTaskGetSchedulerState>
 800482c:	4603      	mov	r3, r0
 800482e:	2b01      	cmp	r3, #1
 8004830:	d001      	beq.n	8004836 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004832:	f002 fce9 	bl	8007208 <xPortSysTickHandler>
  }
}
 8004836:	bf00      	nop
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	e000e010 	.word	0xe000e010

08004840 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004844:	2100      	movs	r1, #0
 8004846:	f06f 0004 	mvn.w	r0, #4
 800484a:	f7ff ffbf 	bl	80047cc <__NVIC_SetPriority>
#endif
}
 800484e:	bf00      	nop
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800485a:	f3ef 8305 	mrs	r3, IPSR
 800485e:	603b      	str	r3, [r7, #0]
  return(result);
 8004860:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004866:	f06f 0305 	mvn.w	r3, #5
 800486a:	607b      	str	r3, [r7, #4]
 800486c:	e00c      	b.n	8004888 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800486e:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <osKernelInitialize+0x44>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d105      	bne.n	8004882 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004876:	4b08      	ldr	r3, [pc, #32]	; (8004898 <osKernelInitialize+0x44>)
 8004878:	2201      	movs	r2, #1
 800487a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800487c:	2300      	movs	r3, #0
 800487e:	607b      	str	r3, [r7, #4]
 8004880:	e002      	b.n	8004888 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004882:	f04f 33ff 	mov.w	r3, #4294967295
 8004886:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004888:	687b      	ldr	r3, [r7, #4]
}
 800488a:	4618      	mov	r0, r3
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20000098 	.word	0x20000098

0800489c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048a2:	f3ef 8305 	mrs	r3, IPSR
 80048a6:	603b      	str	r3, [r7, #0]
  return(result);
 80048a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80048ae:	f06f 0305 	mvn.w	r3, #5
 80048b2:	607b      	str	r3, [r7, #4]
 80048b4:	e010      	b.n	80048d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80048b6:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <osKernelStart+0x48>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d109      	bne.n	80048d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80048be:	f7ff ffbf 	bl	8004840 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80048c2:	4b08      	ldr	r3, [pc, #32]	; (80048e4 <osKernelStart+0x48>)
 80048c4:	2202      	movs	r2, #2
 80048c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80048c8:	f001 f98c 	bl	8005be4 <vTaskStartScheduler>
      stat = osOK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	607b      	str	r3, [r7, #4]
 80048d0:	e002      	b.n	80048d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80048d2:	f04f 33ff 	mov.w	r3, #4294967295
 80048d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80048d8:	687b      	ldr	r3, [r7, #4]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	20000098 	.word	0x20000098

080048e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b08e      	sub	sp, #56	; 0x38
 80048ec:	af04      	add	r7, sp, #16
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80048f4:	2300      	movs	r3, #0
 80048f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048f8:	f3ef 8305 	mrs	r3, IPSR
 80048fc:	617b      	str	r3, [r7, #20]
  return(result);
 80048fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004900:	2b00      	cmp	r3, #0
 8004902:	d17e      	bne.n	8004a02 <osThreadNew+0x11a>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d07b      	beq.n	8004a02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800490a:	2380      	movs	r3, #128	; 0x80
 800490c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800490e:	2318      	movs	r3, #24
 8004910:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004912:	2300      	movs	r3, #0
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004916:	f04f 33ff 	mov.w	r3, #4294967295
 800491a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d045      	beq.n	80049ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <osThreadNew+0x48>
        name = attr->name;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <osThreadNew+0x6e>
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	2b38      	cmp	r3, #56	; 0x38
 8004948:	d805      	bhi.n	8004956 <osThreadNew+0x6e>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <osThreadNew+0x72>
        return (NULL);
 8004956:	2300      	movs	r3, #0
 8004958:	e054      	b.n	8004a04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	089b      	lsrs	r3, r3, #2
 8004968:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00e      	beq.n	8004990 <osThreadNew+0xa8>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	2bbb      	cmp	r3, #187	; 0xbb
 8004978:	d90a      	bls.n	8004990 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800497e:	2b00      	cmp	r3, #0
 8004980:	d006      	beq.n	8004990 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d002      	beq.n	8004990 <osThreadNew+0xa8>
        mem = 1;
 800498a:	2301      	movs	r3, #1
 800498c:	61bb      	str	r3, [r7, #24]
 800498e:	e010      	b.n	80049b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d10c      	bne.n	80049b2 <osThreadNew+0xca>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d108      	bne.n	80049b2 <osThreadNew+0xca>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d104      	bne.n	80049b2 <osThreadNew+0xca>
          mem = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	61bb      	str	r3, [r7, #24]
 80049ac:	e001      	b.n	80049b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d110      	bne.n	80049da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80049c0:	9202      	str	r2, [sp, #8]
 80049c2:	9301      	str	r3, [sp, #4]
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	6a3a      	ldr	r2, [r7, #32]
 80049cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 fe44 	bl	800565c <xTaskCreateStatic>
 80049d4:	4603      	mov	r3, r0
 80049d6:	613b      	str	r3, [r7, #16]
 80049d8:	e013      	b.n	8004a02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d110      	bne.n	8004a02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	f107 0310 	add.w	r3, r7, #16
 80049e8:	9301      	str	r3, [sp, #4]
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049f2:	68f8      	ldr	r0, [r7, #12]
 80049f4:	f000 fe8f 	bl	8005716 <xTaskCreate>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d001      	beq.n	8004a02 <osThreadNew+0x11a>
            hTask = NULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a02:	693b      	ldr	r3, [r7, #16]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3728      	adds	r7, #40	; 0x28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8004a12:	f001 fdfb 	bl	800660c <xTaskGetCurrentTaskHandle>
 8004a16:	6078      	str	r0, [r7, #4]

  return (id);
 8004a18:	687b      	ldr	r3, [r7, #4]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b086      	sub	sp, #24
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a2e:	f3ef 8305 	mrs	r3, IPSR
 8004a32:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a34:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <osThreadTerminate+0x20>
    stat = osErrorISR;
 8004a3a:	f06f 0305 	mvn.w	r3, #5
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e017      	b.n	8004a72 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d103      	bne.n	8004a50 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8004a48:	f06f 0303 	mvn.w	r3, #3
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	e010      	b.n	8004a72 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8004a50:	6938      	ldr	r0, [r7, #16]
 8004a52:	f001 f861 	bl	8005b18 <eTaskGetState>
 8004a56:	4603      	mov	r3, r0
 8004a58:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d005      	beq.n	8004a6c <osThreadTerminate+0x4a>
      stat = osOK;
 8004a60:	2300      	movs	r3, #0
 8004a62:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8004a64:	6938      	ldr	r0, [r7, #16]
 8004a66:	f000 ffb1 	bl	80059cc <vTaskDelete>
 8004a6a:	e002      	b.n	8004a72 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8004a6c:	f06f 0302 	mvn.w	r3, #2
 8004a70:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8004a72:	697b      	ldr	r3, [r7, #20]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a84:	f3ef 8305 	mrs	r3, IPSR
 8004a88:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <osDelay+0x1c>
    stat = osErrorISR;
 8004a90:	f06f 0305 	mvn.w	r3, #5
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	e007      	b.n	8004aa8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f001 f804 	bl	8005ab0 <vTaskDelay>
    }
  }

  return (stat);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4a07      	ldr	r2, [pc, #28]	; (8004ae0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004ac4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	4a06      	ldr	r2, [pc, #24]	; (8004ae4 <vApplicationGetIdleTaskMemory+0x30>)
 8004aca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2280      	movs	r2, #128	; 0x80
 8004ad0:	601a      	str	r2, [r3, #0]
}
 8004ad2:	bf00      	nop
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	2000009c 	.word	0x2000009c
 8004ae4:	20000158 	.word	0x20000158

08004ae8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4a07      	ldr	r2, [pc, #28]	; (8004b14 <vApplicationGetTimerTaskMemory+0x2c>)
 8004af8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	4a06      	ldr	r2, [pc, #24]	; (8004b18 <vApplicationGetTimerTaskMemory+0x30>)
 8004afe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b06:	601a      	str	r2, [r3, #0]
}
 8004b08:	bf00      	nop
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr
 8004b14:	20000358 	.word	0x20000358
 8004b18:	20000414 	.word	0x20000414

08004b1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f103 0208 	add.w	r2, r3, #8
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f04f 32ff 	mov.w	r2, #4294967295
 8004b34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f103 0208 	add.w	r2, r3, #8
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f103 0208 	add.w	r2, r3, #8
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b6a:	bf00      	nop
 8004b6c:	370c      	adds	r7, #12
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b76:	b480      	push	{r7}
 8004b78:	b085      	sub	sp, #20
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
 8004b7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	1c5a      	adds	r2, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	601a      	str	r2, [r3, #0]
}
 8004bb2:	bf00      	nop
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr

08004bbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b085      	sub	sp, #20
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
 8004bc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd4:	d103      	bne.n	8004bde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	e00c      	b.n	8004bf8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3308      	adds	r3, #8
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	e002      	b.n	8004bec <vListInsert+0x2e>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d2f6      	bcs.n	8004be6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	601a      	str	r2, [r3, #0]
}
 8004c24:	bf00      	nop
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr

08004c30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6892      	ldr	r2, [r2, #8]
 8004c46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6852      	ldr	r2, [r2, #4]
 8004c50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d103      	bne.n	8004c64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	1e5a      	subs	r2, r3, #1
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10a      	bne.n	8004cae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004caa:	bf00      	nop
 8004cac:	e7fe      	b.n	8004cac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004cae:	f002 fa19 	bl	80070e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cba:	68f9      	ldr	r1, [r7, #12]
 8004cbc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cbe:	fb01 f303 	mul.w	r3, r1, r3
 8004cc2:	441a      	add	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	68f9      	ldr	r1, [r7, #12]
 8004ce2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	441a      	add	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	22ff      	movs	r2, #255	; 0xff
 8004cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	22ff      	movs	r2, #255	; 0xff
 8004cfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d114      	bne.n	8004d2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01a      	beq.n	8004d42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3310      	adds	r3, #16
 8004d10:	4618      	mov	r0, r3
 8004d12:	f001 fa61 	bl	80061d8 <xTaskRemoveFromEventList>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d012      	beq.n	8004d42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d1c:	4b0c      	ldr	r3, [pc, #48]	; (8004d50 <xQueueGenericReset+0xcc>)
 8004d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	e009      	b.n	8004d42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3310      	adds	r3, #16
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff fef2 	bl	8004b1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3324      	adds	r3, #36	; 0x24
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7ff feed 	bl	8004b1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d42:	f002 f9ff 	bl	8007144 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d46:	2301      	movs	r3, #1
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	e000ed04 	.word	0xe000ed04

08004d54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08e      	sub	sp, #56	; 0x38
 8004d58:	af02      	add	r7, sp, #8
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d10a      	bne.n	8004d7e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d7a:	bf00      	nop
 8004d7c:	e7fe      	b.n	8004d7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10a      	bne.n	8004d9a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d96:	bf00      	nop
 8004d98:	e7fe      	b.n	8004d98 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d002      	beq.n	8004da6 <xQueueGenericCreateStatic+0x52>
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <xQueueGenericCreateStatic+0x56>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <xQueueGenericCreateStatic+0x58>
 8004daa:	2300      	movs	r3, #0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	623b      	str	r3, [r7, #32]
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d102      	bne.n	8004dd2 <xQueueGenericCreateStatic+0x7e>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <xQueueGenericCreateStatic+0x82>
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <xQueueGenericCreateStatic+0x84>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10a      	bne.n	8004df2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de0:	f383 8811 	msr	BASEPRI, r3
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f3bf 8f4f 	dsb	sy
 8004dec:	61fb      	str	r3, [r7, #28]
}
 8004dee:	bf00      	nop
 8004df0:	e7fe      	b.n	8004df0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004df2:	2350      	movs	r3, #80	; 0x50
 8004df4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2b50      	cmp	r3, #80	; 0x50
 8004dfa:	d00a      	beq.n	8004e12 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	61bb      	str	r3, [r7, #24]
}
 8004e0e:	bf00      	nop
 8004e10:	e7fe      	b.n	8004e10 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e12:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00d      	beq.n	8004e3a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e26:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 f805 	bl	8004e44 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3730      	adds	r7, #48	; 0x30
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
 8004e50:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d103      	bne.n	8004e60 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	e002      	b.n	8004e66 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	68fa      	ldr	r2, [r7, #12]
 8004e6a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e72:	2101      	movs	r1, #1
 8004e74:	69b8      	ldr	r0, [r7, #24]
 8004e76:	f7ff ff05 	bl	8004c84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	78fa      	ldrb	r2, [r7, #3]
 8004e7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e82:	bf00      	nop
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
	...

08004e8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08e      	sub	sp, #56	; 0x38
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
 8004e98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10a      	bne.n	8004ebe <xQueueGenericSend+0x32>
	__asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004eba:	bf00      	nop
 8004ebc:	e7fe      	b.n	8004ebc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d103      	bne.n	8004ecc <xQueueGenericSend+0x40>
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <xQueueGenericSend+0x44>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <xQueueGenericSend+0x46>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10a      	bne.n	8004eec <xQueueGenericSend+0x60>
	__asm volatile
 8004ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eda:	f383 8811 	msr	BASEPRI, r3
 8004ede:	f3bf 8f6f 	isb	sy
 8004ee2:	f3bf 8f4f 	dsb	sy
 8004ee6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004ee8:	bf00      	nop
 8004eea:	e7fe      	b.n	8004eea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d103      	bne.n	8004efa <xQueueGenericSend+0x6e>
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <xQueueGenericSend+0x72>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <xQueueGenericSend+0x74>
 8004efe:	2300      	movs	r3, #0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10a      	bne.n	8004f1a <xQueueGenericSend+0x8e>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	623b      	str	r3, [r7, #32]
}
 8004f16:	bf00      	nop
 8004f18:	e7fe      	b.n	8004f18 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f1a:	f001 fb87 	bl	800662c <xTaskGetSchedulerState>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d102      	bne.n	8004f2a <xQueueGenericSend+0x9e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <xQueueGenericSend+0xa2>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <xQueueGenericSend+0xa4>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10a      	bne.n	8004f4a <xQueueGenericSend+0xbe>
	__asm volatile
 8004f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	61fb      	str	r3, [r7, #28]
}
 8004f46:	bf00      	nop
 8004f48:	e7fe      	b.n	8004f48 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f4a:	f002 f8cb 	bl	80070e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d302      	bcc.n	8004f60 <xQueueGenericSend+0xd4>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d129      	bne.n	8004fb4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f66:	f000 fa0b 	bl	8005380 <prvCopyDataToQueue>
 8004f6a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d010      	beq.n	8004f96 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f76:	3324      	adds	r3, #36	; 0x24
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f001 f92d 	bl	80061d8 <xTaskRemoveFromEventList>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d013      	beq.n	8004fac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f84:	4b3f      	ldr	r3, [pc, #252]	; (8005084 <xQueueGenericSend+0x1f8>)
 8004f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f8a:	601a      	str	r2, [r3, #0]
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	e00a      	b.n	8004fac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d007      	beq.n	8004fac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f9c:	4b39      	ldr	r3, [pc, #228]	; (8005084 <xQueueGenericSend+0x1f8>)
 8004f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004fac:	f002 f8ca 	bl	8007144 <vPortExitCritical>
				return pdPASS;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e063      	b.n	800507c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d103      	bne.n	8004fc2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fba:	f002 f8c3 	bl	8007144 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	e05c      	b.n	800507c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d106      	bne.n	8004fd6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fc8:	f107 0314 	add.w	r3, r7, #20
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f001 f969 	bl	80062a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fd6:	f002 f8b5 	bl	8007144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fda:	f000 fe73 	bl	8005cc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fde:	f002 f881 	bl	80070e4 <vPortEnterCritical>
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fe8:	b25b      	sxtb	r3, r3
 8004fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fee:	d103      	bne.n	8004ff8 <xQueueGenericSend+0x16c>
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ffe:	b25b      	sxtb	r3, r3
 8005000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005004:	d103      	bne.n	800500e <xQueueGenericSend+0x182>
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800500e:	f002 f899 	bl	8007144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005012:	1d3a      	adds	r2, r7, #4
 8005014:	f107 0314 	add.w	r3, r7, #20
 8005018:	4611      	mov	r1, r2
 800501a:	4618      	mov	r0, r3
 800501c:	f001 f958 	bl	80062d0 <xTaskCheckForTimeOut>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d124      	bne.n	8005070 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005026:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005028:	f000 faa2 	bl	8005570 <prvIsQueueFull>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d018      	beq.n	8005064 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	3310      	adds	r3, #16
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	4611      	mov	r1, r2
 800503a:	4618      	mov	r0, r3
 800503c:	f001 f87c 	bl	8006138 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005042:	f000 fa2d 	bl	80054a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005046:	f000 fe83 	bl	8005d50 <xTaskResumeAll>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	f47f af7c 	bne.w	8004f4a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005052:	4b0c      	ldr	r3, [pc, #48]	; (8005084 <xQueueGenericSend+0x1f8>)
 8005054:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	e772      	b.n	8004f4a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005066:	f000 fa1b 	bl	80054a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800506a:	f000 fe71 	bl	8005d50 <xTaskResumeAll>
 800506e:	e76c      	b.n	8004f4a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005072:	f000 fa15 	bl	80054a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005076:	f000 fe6b 	bl	8005d50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800507a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800507c:	4618      	mov	r0, r3
 800507e:	3738      	adds	r7, #56	; 0x38
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	e000ed04 	.word	0xe000ed04

08005088 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b090      	sub	sp, #64	; 0x40
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800509a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10a      	bne.n	80050b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80050a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050b2:	bf00      	nop
 80050b4:	e7fe      	b.n	80050b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d103      	bne.n	80050c4 <xQueueGenericSendFromISR+0x3c>
 80050bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <xQueueGenericSendFromISR+0x40>
 80050c4:	2301      	movs	r3, #1
 80050c6:	e000      	b.n	80050ca <xQueueGenericSendFromISR+0x42>
 80050c8:	2300      	movs	r3, #0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10a      	bne.n	80050e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050e0:	bf00      	nop
 80050e2:	e7fe      	b.n	80050e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d103      	bne.n	80050f2 <xQueueGenericSendFromISR+0x6a>
 80050ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <xQueueGenericSendFromISR+0x6e>
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <xQueueGenericSendFromISR+0x70>
 80050f6:	2300      	movs	r3, #0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	623b      	str	r3, [r7, #32]
}
 800510e:	bf00      	nop
 8005110:	e7fe      	b.n	8005110 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005112:	f002 f9ad 	bl	8007470 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005116:	f3ef 8211 	mrs	r2, BASEPRI
 800511a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511e:	f383 8811 	msr	BASEPRI, r3
 8005122:	f3bf 8f6f 	isb	sy
 8005126:	f3bf 8f4f 	dsb	sy
 800512a:	61fa      	str	r2, [r7, #28]
 800512c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800512e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005130:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513a:	429a      	cmp	r2, r3
 800513c:	d302      	bcc.n	8005144 <xQueueGenericSendFromISR+0xbc>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b02      	cmp	r3, #2
 8005142:	d12f      	bne.n	80051a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800514a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	68b9      	ldr	r1, [r7, #8]
 8005158:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800515a:	f000 f911 	bl	8005380 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800515e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005166:	d112      	bne.n	800518e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	2b00      	cmp	r3, #0
 800516e:	d016      	beq.n	800519e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005172:	3324      	adds	r3, #36	; 0x24
 8005174:	4618      	mov	r0, r3
 8005176:	f001 f82f 	bl	80061d8 <xTaskRemoveFromEventList>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00e      	beq.n	800519e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00b      	beq.n	800519e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	e007      	b.n	800519e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800518e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005192:	3301      	adds	r3, #1
 8005194:	b2db      	uxtb	r3, r3
 8005196:	b25a      	sxtb	r2, r3
 8005198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800519e:	2301      	movs	r3, #1
 80051a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80051a2:	e001      	b.n	80051a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051aa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3740      	adds	r7, #64	; 0x40
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
	...

080051c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08c      	sub	sp, #48	; 0x30
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10a      	bne.n	80051f0 <xQueueReceive+0x30>
	__asm volatile
 80051da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051de:	f383 8811 	msr	BASEPRI, r3
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	f3bf 8f4f 	dsb	sy
 80051ea:	623b      	str	r3, [r7, #32]
}
 80051ec:	bf00      	nop
 80051ee:	e7fe      	b.n	80051ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d103      	bne.n	80051fe <xQueueReceive+0x3e>
 80051f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <xQueueReceive+0x42>
 80051fe:	2301      	movs	r3, #1
 8005200:	e000      	b.n	8005204 <xQueueReceive+0x44>
 8005202:	2300      	movs	r3, #0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10a      	bne.n	800521e <xQueueReceive+0x5e>
	__asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	61fb      	str	r3, [r7, #28]
}
 800521a:	bf00      	nop
 800521c:	e7fe      	b.n	800521c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800521e:	f001 fa05 	bl	800662c <xTaskGetSchedulerState>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <xQueueReceive+0x6e>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <xQueueReceive+0x72>
 800522e:	2301      	movs	r3, #1
 8005230:	e000      	b.n	8005234 <xQueueReceive+0x74>
 8005232:	2300      	movs	r3, #0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10a      	bne.n	800524e <xQueueReceive+0x8e>
	__asm volatile
 8005238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523c:	f383 8811 	msr	BASEPRI, r3
 8005240:	f3bf 8f6f 	isb	sy
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	61bb      	str	r3, [r7, #24]
}
 800524a:	bf00      	nop
 800524c:	e7fe      	b.n	800524c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800524e:	f001 ff49 	bl	80070e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005256:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525a:	2b00      	cmp	r3, #0
 800525c:	d01f      	beq.n	800529e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800525e:	68b9      	ldr	r1, [r7, #8]
 8005260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005262:	f000 f8f7 	bl	8005454 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	1e5a      	subs	r2, r3, #1
 800526a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00f      	beq.n	8005296 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005278:	3310      	adds	r3, #16
 800527a:	4618      	mov	r0, r3
 800527c:	f000 ffac 	bl	80061d8 <xTaskRemoveFromEventList>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d007      	beq.n	8005296 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005286:	4b3d      	ldr	r3, [pc, #244]	; (800537c <xQueueReceive+0x1bc>)
 8005288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005296:	f001 ff55 	bl	8007144 <vPortExitCritical>
				return pdPASS;
 800529a:	2301      	movs	r3, #1
 800529c:	e069      	b.n	8005372 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d103      	bne.n	80052ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052a4:	f001 ff4e 	bl	8007144 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052a8:	2300      	movs	r3, #0
 80052aa:	e062      	b.n	8005372 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d106      	bne.n	80052c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052b2:	f107 0310 	add.w	r3, r7, #16
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fff4 	bl	80062a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052bc:	2301      	movs	r3, #1
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052c0:	f001 ff40 	bl	8007144 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052c4:	f000 fcfe 	bl	8005cc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052c8:	f001 ff0c 	bl	80070e4 <vPortEnterCritical>
 80052cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052d2:	b25b      	sxtb	r3, r3
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d8:	d103      	bne.n	80052e2 <xQueueReceive+0x122>
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052e8:	b25b      	sxtb	r3, r3
 80052ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ee:	d103      	bne.n	80052f8 <xQueueReceive+0x138>
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052f8:	f001 ff24 	bl	8007144 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052fc:	1d3a      	adds	r2, r7, #4
 80052fe:	f107 0310 	add.w	r3, r7, #16
 8005302:	4611      	mov	r1, r2
 8005304:	4618      	mov	r0, r3
 8005306:	f000 ffe3 	bl	80062d0 <xTaskCheckForTimeOut>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d123      	bne.n	8005358 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005312:	f000 f917 	bl	8005544 <prvIsQueueEmpty>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d017      	beq.n	800534c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800531c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531e:	3324      	adds	r3, #36	; 0x24
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	4611      	mov	r1, r2
 8005324:	4618      	mov	r0, r3
 8005326:	f000 ff07 	bl	8006138 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800532a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800532c:	f000 f8b8 	bl	80054a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005330:	f000 fd0e 	bl	8005d50 <xTaskResumeAll>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d189      	bne.n	800524e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800533a:	4b10      	ldr	r3, [pc, #64]	; (800537c <xQueueReceive+0x1bc>)
 800533c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	e780      	b.n	800524e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800534c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800534e:	f000 f8a7 	bl	80054a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005352:	f000 fcfd 	bl	8005d50 <xTaskResumeAll>
 8005356:	e77a      	b.n	800524e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800535a:	f000 f8a1 	bl	80054a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800535e:	f000 fcf7 	bl	8005d50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005364:	f000 f8ee 	bl	8005544 <prvIsQueueEmpty>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	f43f af6f 	beq.w	800524e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005370:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005372:	4618      	mov	r0, r3
 8005374:	3730      	adds	r7, #48	; 0x30
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	e000ed04 	.word	0xe000ed04

08005380 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005394:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10d      	bne.n	80053ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d14d      	bne.n	8005442 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f001 f95c 	bl	8006668 <xTaskPriorityDisinherit>
 80053b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	609a      	str	r2, [r3, #8]
 80053b8:	e043      	b.n	8005442 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d119      	bne.n	80053f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6858      	ldr	r0, [r3, #4]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	461a      	mov	r2, r3
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	f002 faa6 	bl	800791c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	441a      	add	r2, r3
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d32b      	bcc.n	8005442 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	605a      	str	r2, [r3, #4]
 80053f2:	e026      	b.n	8005442 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	68d8      	ldr	r0, [r3, #12]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fc:	461a      	mov	r2, r3
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	f002 fa8c 	bl	800791c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540c:	425b      	negs	r3, r3
 800540e:	441a      	add	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d207      	bcs.n	8005430 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	425b      	negs	r3, r3
 800542a:	441a      	add	r2, r3
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d105      	bne.n	8005442 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	3b01      	subs	r3, #1
 8005440:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1c5a      	adds	r2, r3, #1
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800544a:	697b      	ldr	r3, [r7, #20]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	2b00      	cmp	r3, #0
 8005464:	d018      	beq.n	8005498 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	441a      	add	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68da      	ldr	r2, [r3, #12]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	429a      	cmp	r2, r3
 800547e:	d303      	bcc.n	8005488 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68d9      	ldr	r1, [r3, #12]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005490:	461a      	mov	r2, r3
 8005492:	6838      	ldr	r0, [r7, #0]
 8005494:	f002 fa42 	bl	800791c <memcpy>
	}
}
 8005498:	bf00      	nop
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054a8:	f001 fe1c 	bl	80070e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054b4:	e011      	b.n	80054da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d012      	beq.n	80054e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3324      	adds	r3, #36	; 0x24
 80054c2:	4618      	mov	r0, r3
 80054c4:	f000 fe88 	bl	80061d8 <xTaskRemoveFromEventList>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054ce:	f000 ff61 	bl	8006394 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	3b01      	subs	r3, #1
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	dce9      	bgt.n	80054b6 <prvUnlockQueue+0x16>
 80054e2:	e000      	b.n	80054e6 <prvUnlockQueue+0x46>
					break;
 80054e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	22ff      	movs	r2, #255	; 0xff
 80054ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80054ee:	f001 fe29 	bl	8007144 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80054f2:	f001 fdf7 	bl	80070e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054fe:	e011      	b.n	8005524 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d012      	beq.n	800552e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3310      	adds	r3, #16
 800550c:	4618      	mov	r0, r3
 800550e:	f000 fe63 	bl	80061d8 <xTaskRemoveFromEventList>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005518:	f000 ff3c 	bl	8006394 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800551c:	7bbb      	ldrb	r3, [r7, #14]
 800551e:	3b01      	subs	r3, #1
 8005520:	b2db      	uxtb	r3, r3
 8005522:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005528:	2b00      	cmp	r3, #0
 800552a:	dce9      	bgt.n	8005500 <prvUnlockQueue+0x60>
 800552c:	e000      	b.n	8005530 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800552e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	22ff      	movs	r2, #255	; 0xff
 8005534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005538:	f001 fe04 	bl	8007144 <vPortExitCritical>
}
 800553c:	bf00      	nop
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800554c:	f001 fdca 	bl	80070e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005554:	2b00      	cmp	r3, #0
 8005556:	d102      	bne.n	800555e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005558:	2301      	movs	r3, #1
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	e001      	b.n	8005562 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005562:	f001 fdef 	bl	8007144 <vPortExitCritical>

	return xReturn;
 8005566:	68fb      	ldr	r3, [r7, #12]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005578:	f001 fdb4 	bl	80070e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005584:	429a      	cmp	r2, r3
 8005586:	d102      	bne.n	800558e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005588:	2301      	movs	r3, #1
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	e001      	b.n	8005592 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005592:	f001 fdd7 	bl	8007144 <vPortExitCritical>

	return xReturn;
 8005596:	68fb      	ldr	r3, [r7, #12]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	e014      	b.n	80055da <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80055b0:	4a0f      	ldr	r2, [pc, #60]	; (80055f0 <vQueueAddToRegistry+0x50>)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10b      	bne.n	80055d4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80055bc:	490c      	ldr	r1, [pc, #48]	; (80055f0 <vQueueAddToRegistry+0x50>)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80055c6:	4a0a      	ldr	r2, [pc, #40]	; (80055f0 <vQueueAddToRegistry+0x50>)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	00db      	lsls	r3, r3, #3
 80055cc:	4413      	add	r3, r2
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80055d2:	e006      	b.n	80055e2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	3301      	adds	r3, #1
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2b07      	cmp	r3, #7
 80055de:	d9e7      	bls.n	80055b0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	20004f68 	.word	0x20004f68

080055f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005604:	f001 fd6e 	bl	80070e4 <vPortEnterCritical>
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800560e:	b25b      	sxtb	r3, r3
 8005610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005614:	d103      	bne.n	800561e <vQueueWaitForMessageRestricted+0x2a>
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	2200      	movs	r2, #0
 800561a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005624:	b25b      	sxtb	r3, r3
 8005626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562a:	d103      	bne.n	8005634 <vQueueWaitForMessageRestricted+0x40>
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005634:	f001 fd86 	bl	8007144 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563c:	2b00      	cmp	r3, #0
 800563e:	d106      	bne.n	800564e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	3324      	adds	r3, #36	; 0x24
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	68b9      	ldr	r1, [r7, #8]
 8005648:	4618      	mov	r0, r3
 800564a:	f000 fd99 	bl	8006180 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800564e:	6978      	ldr	r0, [r7, #20]
 8005650:	f7ff ff26 	bl	80054a0 <prvUnlockQueue>
	}
 8005654:	bf00      	nop
 8005656:	3718      	adds	r7, #24
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08e      	sub	sp, #56	; 0x38
 8005660:	af04      	add	r7, sp, #16
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800566a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10a      	bne.n	8005686 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	623b      	str	r3, [r7, #32]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <xTaskCreateStatic+0x46>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	61fb      	str	r3, [r7, #28]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056a2:	23bc      	movs	r3, #188	; 0xbc
 80056a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2bbc      	cmp	r3, #188	; 0xbc
 80056aa:	d00a      	beq.n	80056c2 <xTaskCreateStatic+0x66>
	__asm volatile
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	f383 8811 	msr	BASEPRI, r3
 80056b4:	f3bf 8f6f 	isb	sy
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	61bb      	str	r3, [r7, #24]
}
 80056be:	bf00      	nop
 80056c0:	e7fe      	b.n	80056c0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056c2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d01e      	beq.n	8005708 <xTaskCreateStatic+0xac>
 80056ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01b      	beq.n	8005708 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	2202      	movs	r2, #2
 80056de:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056e2:	2300      	movs	r3, #0
 80056e4:	9303      	str	r3, [sp, #12]
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	9302      	str	r3, [sp, #8]
 80056ea:	f107 0314 	add.w	r3, r7, #20
 80056ee:	9301      	str	r3, [sp, #4]
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 f850 	bl	80057a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005700:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005702:	f000 f8f3 	bl	80058ec <prvAddNewTaskToReadyList>
 8005706:	e001      	b.n	800570c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005708:	2300      	movs	r3, #0
 800570a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800570c:	697b      	ldr	r3, [r7, #20]
	}
 800570e:	4618      	mov	r0, r3
 8005710:	3728      	adds	r7, #40	; 0x28
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005716:	b580      	push	{r7, lr}
 8005718:	b08c      	sub	sp, #48	; 0x30
 800571a:	af04      	add	r7, sp, #16
 800571c:	60f8      	str	r0, [r7, #12]
 800571e:	60b9      	str	r1, [r7, #8]
 8005720:	603b      	str	r3, [r7, #0]
 8005722:	4613      	mov	r3, r2
 8005724:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4618      	mov	r0, r3
 800572c:	f001 fee0 	bl	80074f0 <pvPortMalloc>
 8005730:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00e      	beq.n	8005756 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005738:	20bc      	movs	r0, #188	; 0xbc
 800573a:	f001 fed9 	bl	80074f0 <pvPortMalloc>
 800573e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	697a      	ldr	r2, [r7, #20]
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
 800574c:	e005      	b.n	800575a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800574e:	6978      	ldr	r0, [r7, #20]
 8005750:	f001 ff9a 	bl	8007688 <vPortFree>
 8005754:	e001      	b.n	800575a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005756:	2300      	movs	r3, #0
 8005758:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d017      	beq.n	8005790 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005768:	88fa      	ldrh	r2, [r7, #6]
 800576a:	2300      	movs	r3, #0
 800576c:	9303      	str	r3, [sp, #12]
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	9302      	str	r3, [sp, #8]
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	9301      	str	r3, [sp, #4]
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68b9      	ldr	r1, [r7, #8]
 800577e:	68f8      	ldr	r0, [r7, #12]
 8005780:	f000 f80e 	bl	80057a0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005784:	69f8      	ldr	r0, [r7, #28]
 8005786:	f000 f8b1 	bl	80058ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800578a:	2301      	movs	r3, #1
 800578c:	61bb      	str	r3, [r7, #24]
 800578e:	e002      	b.n	8005796 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005790:	f04f 33ff 	mov.w	r3, #4294967295
 8005794:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005796:	69bb      	ldr	r3, [r7, #24]
	}
 8005798:	4618      	mov	r0, r3
 800579a:	3720      	adds	r7, #32
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b088      	sub	sp, #32
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
 80057ac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	461a      	mov	r2, r3
 80057b8:	21a5      	movs	r1, #165	; 0xa5
 80057ba:	f002 f8bd 	bl	8007938 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057c8:	3b01      	subs	r3, #1
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	f023 0307 	bic.w	r3, r3, #7
 80057d6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	f003 0307 	and.w	r3, r3, #7
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00a      	beq.n	80057f8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	617b      	str	r3, [r7, #20]
}
 80057f4:	bf00      	nop
 80057f6:	e7fe      	b.n	80057f6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d01f      	beq.n	800583e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057fe:	2300      	movs	r3, #0
 8005800:	61fb      	str	r3, [r7, #28]
 8005802:	e012      	b.n	800582a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	4413      	add	r3, r2
 800580a:	7819      	ldrb	r1, [r3, #0]
 800580c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	4413      	add	r3, r2
 8005812:	3334      	adds	r3, #52	; 0x34
 8005814:	460a      	mov	r2, r1
 8005816:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005818:	68ba      	ldr	r2, [r7, #8]
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	4413      	add	r3, r2
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d006      	beq.n	8005832 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	3301      	adds	r3, #1
 8005828:	61fb      	str	r3, [r7, #28]
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	2b0f      	cmp	r3, #15
 800582e:	d9e9      	bls.n	8005804 <prvInitialiseNewTask+0x64>
 8005830:	e000      	b.n	8005834 <prvInitialiseNewTask+0x94>
			{
				break;
 8005832:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800583c:	e003      	b.n	8005846 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005848:	2b37      	cmp	r3, #55	; 0x37
 800584a:	d901      	bls.n	8005850 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800584c:	2337      	movs	r3, #55	; 0x37
 800584e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005854:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800585a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	2200      	movs	r2, #0
 8005860:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005864:	3304      	adds	r3, #4
 8005866:	4618      	mov	r0, r3
 8005868:	f7ff f978 	bl	8004b5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	3318      	adds	r3, #24
 8005870:	4618      	mov	r0, r3
 8005872:	f7ff f973 	bl	8004b5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800587a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800588a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800588c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588e:	2200      	movs	r2, #0
 8005890:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	2200      	movs	r2, #0
 8005898:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	3354      	adds	r3, #84	; 0x54
 80058a0:	2260      	movs	r2, #96	; 0x60
 80058a2:	2100      	movs	r1, #0
 80058a4:	4618      	mov	r0, r3
 80058a6:	f002 f847 	bl	8007938 <memset>
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	4a0c      	ldr	r2, [pc, #48]	; (80058e0 <prvInitialiseNewTask+0x140>)
 80058ae:	659a      	str	r2, [r3, #88]	; 0x58
 80058b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b2:	4a0c      	ldr	r2, [pc, #48]	; (80058e4 <prvInitialiseNewTask+0x144>)
 80058b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	4a0b      	ldr	r2, [pc, #44]	; (80058e8 <prvInitialiseNewTask+0x148>)
 80058ba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	68f9      	ldr	r1, [r7, #12]
 80058c0:	69b8      	ldr	r0, [r7, #24]
 80058c2:	f001 fae1 	bl	8006e88 <pxPortInitialiseStack>
 80058c6:	4602      	mov	r2, r0
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80058cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80058d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058d8:	bf00      	nop
 80058da:	3720      	adds	r7, #32
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	0800841c 	.word	0x0800841c
 80058e4:	0800843c 	.word	0x0800843c
 80058e8:	080083fc 	.word	0x080083fc

080058ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80058f4:	f001 fbf6 	bl	80070e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80058f8:	4b2d      	ldr	r3, [pc, #180]	; (80059b0 <prvAddNewTaskToReadyList+0xc4>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3301      	adds	r3, #1
 80058fe:	4a2c      	ldr	r2, [pc, #176]	; (80059b0 <prvAddNewTaskToReadyList+0xc4>)
 8005900:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005902:	4b2c      	ldr	r3, [pc, #176]	; (80059b4 <prvAddNewTaskToReadyList+0xc8>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d109      	bne.n	800591e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800590a:	4a2a      	ldr	r2, [pc, #168]	; (80059b4 <prvAddNewTaskToReadyList+0xc8>)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005910:	4b27      	ldr	r3, [pc, #156]	; (80059b0 <prvAddNewTaskToReadyList+0xc4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d110      	bne.n	800593a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005918:	f000 fdb6 	bl	8006488 <prvInitialiseTaskLists>
 800591c:	e00d      	b.n	800593a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800591e:	4b26      	ldr	r3, [pc, #152]	; (80059b8 <prvAddNewTaskToReadyList+0xcc>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005926:	4b23      	ldr	r3, [pc, #140]	; (80059b4 <prvAddNewTaskToReadyList+0xc8>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	429a      	cmp	r2, r3
 8005932:	d802      	bhi.n	800593a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005934:	4a1f      	ldr	r2, [pc, #124]	; (80059b4 <prvAddNewTaskToReadyList+0xc8>)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800593a:	4b20      	ldr	r3, [pc, #128]	; (80059bc <prvAddNewTaskToReadyList+0xd0>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3301      	adds	r3, #1
 8005940:	4a1e      	ldr	r2, [pc, #120]	; (80059bc <prvAddNewTaskToReadyList+0xd0>)
 8005942:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005944:	4b1d      	ldr	r3, [pc, #116]	; (80059bc <prvAddNewTaskToReadyList+0xd0>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005950:	4b1b      	ldr	r3, [pc, #108]	; (80059c0 <prvAddNewTaskToReadyList+0xd4>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d903      	bls.n	8005960 <prvAddNewTaskToReadyList+0x74>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595c:	4a18      	ldr	r2, [pc, #96]	; (80059c0 <prvAddNewTaskToReadyList+0xd4>)
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4a15      	ldr	r2, [pc, #84]	; (80059c4 <prvAddNewTaskToReadyList+0xd8>)
 800596e:	441a      	add	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3304      	adds	r3, #4
 8005974:	4619      	mov	r1, r3
 8005976:	4610      	mov	r0, r2
 8005978:	f7ff f8fd 	bl	8004b76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800597c:	f001 fbe2 	bl	8007144 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005980:	4b0d      	ldr	r3, [pc, #52]	; (80059b8 <prvAddNewTaskToReadyList+0xcc>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00e      	beq.n	80059a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005988:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <prvAddNewTaskToReadyList+0xc8>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005992:	429a      	cmp	r2, r3
 8005994:	d207      	bcs.n	80059a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005996:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <prvAddNewTaskToReadyList+0xdc>)
 8005998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	f3bf 8f4f 	dsb	sy
 80059a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059a6:	bf00      	nop
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000ce8 	.word	0x20000ce8
 80059b4:	20000814 	.word	0x20000814
 80059b8:	20000cf4 	.word	0x20000cf4
 80059bc:	20000d04 	.word	0x20000d04
 80059c0:	20000cf0 	.word	0x20000cf0
 80059c4:	20000818 	.word	0x20000818
 80059c8:	e000ed04 	.word	0xe000ed04

080059cc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80059d4:	f001 fb86 	bl	80070e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d102      	bne.n	80059e4 <vTaskDelete+0x18>
 80059de:	4b2c      	ldr	r3, [pc, #176]	; (8005a90 <vTaskDelete+0xc4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	e000      	b.n	80059e6 <vTaskDelete+0x1a>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3304      	adds	r3, #4
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff f91f 	bl	8004c30 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d004      	beq.n	8005a04 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	3318      	adds	r3, #24
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7ff f916 	bl	8004c30 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005a04:	4b23      	ldr	r3, [pc, #140]	; (8005a94 <vTaskDelete+0xc8>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	4a22      	ldr	r2, [pc, #136]	; (8005a94 <vTaskDelete+0xc8>)
 8005a0c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005a0e:	4b20      	ldr	r3, [pc, #128]	; (8005a90 <vTaskDelete+0xc4>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d10b      	bne.n	8005a30 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	481e      	ldr	r0, [pc, #120]	; (8005a98 <vTaskDelete+0xcc>)
 8005a20:	f7ff f8a9 	bl	8004b76 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005a24:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <vTaskDelete+0xd0>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	4a1c      	ldr	r2, [pc, #112]	; (8005a9c <vTaskDelete+0xd0>)
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	e009      	b.n	8005a44 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005a30:	4b1b      	ldr	r3, [pc, #108]	; (8005aa0 <vTaskDelete+0xd4>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	3b01      	subs	r3, #1
 8005a36:	4a1a      	ldr	r2, [pc, #104]	; (8005aa0 <vTaskDelete+0xd4>)
 8005a38:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fd92 	bl	8006564 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005a40:	f000 fdc4 	bl	80065cc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8005a44:	f001 fb7e 	bl	8007144 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005a48:	4b16      	ldr	r3, [pc, #88]	; (8005aa4 <vTaskDelete+0xd8>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01b      	beq.n	8005a88 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8005a50:	4b0f      	ldr	r3, [pc, #60]	; (8005a90 <vTaskDelete+0xc4>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d116      	bne.n	8005a88 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005a5a:	4b13      	ldr	r3, [pc, #76]	; (8005aa8 <vTaskDelete+0xdc>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00a      	beq.n	8005a78 <vTaskDelete+0xac>
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	60bb      	str	r3, [r7, #8]
}
 8005a74:	bf00      	nop
 8005a76:	e7fe      	b.n	8005a76 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8005a78:	4b0c      	ldr	r3, [pc, #48]	; (8005aac <vTaskDelete+0xe0>)
 8005a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a88:	bf00      	nop
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	20000814 	.word	0x20000814
 8005a94:	20000d04 	.word	0x20000d04
 8005a98:	20000cbc 	.word	0x20000cbc
 8005a9c:	20000cd0 	.word	0x20000cd0
 8005aa0:	20000ce8 	.word	0x20000ce8
 8005aa4:	20000cf4 	.word	0x20000cf4
 8005aa8:	20000d10 	.word	0x20000d10
 8005aac:	e000ed04 	.word	0xe000ed04

08005ab0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d017      	beq.n	8005af2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ac2:	4b13      	ldr	r3, [pc, #76]	; (8005b10 <vTaskDelay+0x60>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <vTaskDelay+0x30>
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	60bb      	str	r3, [r7, #8]
}
 8005adc:	bf00      	nop
 8005ade:	e7fe      	b.n	8005ade <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005ae0:	f000 f8f0 	bl	8005cc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fe2c 	bl	8006744 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005aec:	f000 f930 	bl	8005d50 <xTaskResumeAll>
 8005af0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d107      	bne.n	8005b08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005af8:	4b06      	ldr	r3, [pc, #24]	; (8005b14 <vTaskDelay+0x64>)
 8005afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b08:	bf00      	nop
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	20000d10 	.word	0x20000d10
 8005b14:	e000ed04 	.word	0xe000ed04

08005b18 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <eTaskGetState+0x28>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	60bb      	str	r3, [r7, #8]
}
 8005b3c:	bf00      	nop
 8005b3e:	e7fe      	b.n	8005b3e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8005b40:	4b23      	ldr	r3, [pc, #140]	; (8005bd0 <eTaskGetState+0xb8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d102      	bne.n	8005b50 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	77fb      	strb	r3, [r7, #31]
 8005b4e:	e03a      	b.n	8005bc6 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8005b50:	f001 fac8 	bl	80070e4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8005b5a:	4b1e      	ldr	r3, [pc, #120]	; (8005bd4 <eTaskGetState+0xbc>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8005b60:	4b1d      	ldr	r3, [pc, #116]	; (8005bd8 <eTaskGetState+0xc0>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8005b66:	f001 faed 	bl	8007144 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d003      	beq.n	8005b7a <eTaskGetState+0x62>
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d102      	bne.n	8005b80 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	77fb      	strb	r3, [r7, #31]
 8005b7e:	e022      	b.n	8005bc6 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	4a16      	ldr	r2, [pc, #88]	; (8005bdc <eTaskGetState+0xc4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d112      	bne.n	8005bae <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d10b      	bne.n	8005ba8 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d102      	bne.n	8005ba2 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	77fb      	strb	r3, [r7, #31]
 8005ba0:	e011      	b.n	8005bc6 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	77fb      	strb	r3, [r7, #31]
 8005ba6:	e00e      	b.n	8005bc6 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8005ba8:	2302      	movs	r3, #2
 8005baa:	77fb      	strb	r3, [r7, #31]
 8005bac:	e00b      	b.n	8005bc6 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	4a0b      	ldr	r2, [pc, #44]	; (8005be0 <eTaskGetState+0xc8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d002      	beq.n	8005bbc <eTaskGetState+0xa4>
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d102      	bne.n	8005bc2 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8005bbc:	2304      	movs	r3, #4
 8005bbe:	77fb      	strb	r3, [r7, #31]
 8005bc0:	e001      	b.n	8005bc6 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8005bc6:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3720      	adds	r7, #32
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	20000814 	.word	0x20000814
 8005bd4:	20000ca0 	.word	0x20000ca0
 8005bd8:	20000ca4 	.word	0x20000ca4
 8005bdc:	20000cd4 	.word	0x20000cd4
 8005be0:	20000cbc 	.word	0x20000cbc

08005be4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	; 0x28
 8005be8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bf2:	463a      	mov	r2, r7
 8005bf4:	1d39      	adds	r1, r7, #4
 8005bf6:	f107 0308 	add.w	r3, r7, #8
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fe ff5a 	bl	8004ab4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c00:	6839      	ldr	r1, [r7, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	9202      	str	r2, [sp, #8]
 8005c08:	9301      	str	r3, [sp, #4]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	460a      	mov	r2, r1
 8005c12:	4924      	ldr	r1, [pc, #144]	; (8005ca4 <vTaskStartScheduler+0xc0>)
 8005c14:	4824      	ldr	r0, [pc, #144]	; (8005ca8 <vTaskStartScheduler+0xc4>)
 8005c16:	f7ff fd21 	bl	800565c <xTaskCreateStatic>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	4a23      	ldr	r2, [pc, #140]	; (8005cac <vTaskStartScheduler+0xc8>)
 8005c1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c20:	4b22      	ldr	r3, [pc, #136]	; (8005cac <vTaskStartScheduler+0xc8>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	e001      	b.n	8005c32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d102      	bne.n	8005c3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c38:	f000 fdd8 	bl	80067ec <xTimerCreateTimerTask>
 8005c3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d11b      	bne.n	8005c7c <vTaskStartScheduler+0x98>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	613b      	str	r3, [r7, #16]
}
 8005c56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005c58:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <vTaskStartScheduler+0xcc>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3354      	adds	r3, #84	; 0x54
 8005c5e:	4a15      	ldr	r2, [pc, #84]	; (8005cb4 <vTaskStartScheduler+0xd0>)
 8005c60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c62:	4b15      	ldr	r3, [pc, #84]	; (8005cb8 <vTaskStartScheduler+0xd4>)
 8005c64:	f04f 32ff 	mov.w	r2, #4294967295
 8005c68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c6a:	4b14      	ldr	r3, [pc, #80]	; (8005cbc <vTaskStartScheduler+0xd8>)
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c70:	4b13      	ldr	r3, [pc, #76]	; (8005cc0 <vTaskStartScheduler+0xdc>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c76:	f001 f993 	bl	8006fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c7a:	e00e      	b.n	8005c9a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c82:	d10a      	bne.n	8005c9a <vTaskStartScheduler+0xb6>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	60fb      	str	r3, [r7, #12]
}
 8005c96:	bf00      	nop
 8005c98:	e7fe      	b.n	8005c98 <vTaskStartScheduler+0xb4>
}
 8005c9a:	bf00      	nop
 8005c9c:	3718      	adds	r7, #24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	08008360 	.word	0x08008360
 8005ca8:	080063ad 	.word	0x080063ad
 8005cac:	20000d0c 	.word	0x20000d0c
 8005cb0:	20000814 	.word	0x20000814
 8005cb4:	20000010 	.word	0x20000010
 8005cb8:	20000d08 	.word	0x20000d08
 8005cbc:	20000cf4 	.word	0x20000cf4
 8005cc0:	20000cec 	.word	0x20000cec

08005cc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005cc8:	4b04      	ldr	r3, [pc, #16]	; (8005cdc <vTaskSuspendAll+0x18>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3301      	adds	r3, #1
 8005cce:	4a03      	ldr	r2, [pc, #12]	; (8005cdc <vTaskSuspendAll+0x18>)
 8005cd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005cd2:	bf00      	nop
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	20000d10 	.word	0x20000d10

08005ce0 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8005cea:	4b14      	ldr	r3, [pc, #80]	; (8005d3c <prvGetExpectedIdleTime+0x5c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d001      	beq.n	8005cf6 <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8005cf6:	4b12      	ldr	r3, [pc, #72]	; (8005d40 <prvGetExpectedIdleTime+0x60>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8005d00:	2300      	movs	r3, #0
 8005d02:	607b      	str	r3, [r7, #4]
 8005d04:	e012      	b.n	8005d2c <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8005d06:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <prvGetExpectedIdleTime+0x64>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d902      	bls.n	8005d14 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	607b      	str	r3, [r7, #4]
 8005d12:	e00b      	b.n	8005d2c <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d002      	beq.n	8005d20 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	607b      	str	r3, [r7, #4]
 8005d1e:	e005      	b.n	8005d2c <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8005d20:	4b09      	ldr	r3, [pc, #36]	; (8005d48 <prvGetExpectedIdleTime+0x68>)
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	4b09      	ldr	r3, [pc, #36]	; (8005d4c <prvGetExpectedIdleTime+0x6c>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 8005d2c:	687b      	ldr	r3, [r7, #4]
	}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20000cf0 	.word	0x20000cf0
 8005d40:	20000814 	.word	0x20000814
 8005d44:	20000818 	.word	0x20000818
 8005d48:	20000d08 	.word	0x20000d08
 8005d4c:	20000cec 	.word	0x20000cec

08005d50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d5e:	4b42      	ldr	r3, [pc, #264]	; (8005e68 <xTaskResumeAll+0x118>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10a      	bne.n	8005d7c <xTaskResumeAll+0x2c>
	__asm volatile
 8005d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	603b      	str	r3, [r7, #0]
}
 8005d78:	bf00      	nop
 8005d7a:	e7fe      	b.n	8005d7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d7c:	f001 f9b2 	bl	80070e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d80:	4b39      	ldr	r3, [pc, #228]	; (8005e68 <xTaskResumeAll+0x118>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	4a38      	ldr	r2, [pc, #224]	; (8005e68 <xTaskResumeAll+0x118>)
 8005d88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d8a:	4b37      	ldr	r3, [pc, #220]	; (8005e68 <xTaskResumeAll+0x118>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d162      	bne.n	8005e58 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d92:	4b36      	ldr	r3, [pc, #216]	; (8005e6c <xTaskResumeAll+0x11c>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d05e      	beq.n	8005e58 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d9a:	e02f      	b.n	8005dfc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d9c:	4b34      	ldr	r3, [pc, #208]	; (8005e70 <xTaskResumeAll+0x120>)
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3318      	adds	r3, #24
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fe ff41 	bl	8004c30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	3304      	adds	r3, #4
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fe ff3c 	bl	8004c30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbc:	4b2d      	ldr	r3, [pc, #180]	; (8005e74 <xTaskResumeAll+0x124>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d903      	bls.n	8005dcc <xTaskResumeAll+0x7c>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	4a2a      	ldr	r2, [pc, #168]	; (8005e74 <xTaskResumeAll+0x124>)
 8005dca:	6013      	str	r3, [r2, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4a27      	ldr	r2, [pc, #156]	; (8005e78 <xTaskResumeAll+0x128>)
 8005dda:	441a      	add	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3304      	adds	r3, #4
 8005de0:	4619      	mov	r1, r3
 8005de2:	4610      	mov	r0, r2
 8005de4:	f7fe fec7 	bl	8004b76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dec:	4b23      	ldr	r3, [pc, #140]	; (8005e7c <xTaskResumeAll+0x12c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d302      	bcc.n	8005dfc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005df6:	4b22      	ldr	r3, [pc, #136]	; (8005e80 <xTaskResumeAll+0x130>)
 8005df8:	2201      	movs	r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dfc:	4b1c      	ldr	r3, [pc, #112]	; (8005e70 <xTaskResumeAll+0x120>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1cb      	bne.n	8005d9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e0a:	f000 fbdf 	bl	80065cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e0e:	4b1d      	ldr	r3, [pc, #116]	; (8005e84 <xTaskResumeAll+0x134>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d010      	beq.n	8005e3c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e1a:	f000 f86f 	bl	8005efc <xTaskIncrementTick>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d002      	beq.n	8005e2a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005e24:	4b16      	ldr	r3, [pc, #88]	; (8005e80 <xTaskResumeAll+0x130>)
 8005e26:	2201      	movs	r2, #1
 8005e28:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1f1      	bne.n	8005e1a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005e36:	4b13      	ldr	r3, [pc, #76]	; (8005e84 <xTaskResumeAll+0x134>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e3c:	4b10      	ldr	r3, [pc, #64]	; (8005e80 <xTaskResumeAll+0x130>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d009      	beq.n	8005e58 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e44:	2301      	movs	r3, #1
 8005e46:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e48:	4b0f      	ldr	r3, [pc, #60]	; (8005e88 <xTaskResumeAll+0x138>)
 8005e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e58:	f001 f974 	bl	8007144 <vPortExitCritical>

	return xAlreadyYielded;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	20000d10 	.word	0x20000d10
 8005e6c:	20000ce8 	.word	0x20000ce8
 8005e70:	20000ca8 	.word	0x20000ca8
 8005e74:	20000cf0 	.word	0x20000cf0
 8005e78:	20000818 	.word	0x20000818
 8005e7c:	20000814 	.word	0x20000814
 8005e80:	20000cfc 	.word	0x20000cfc
 8005e84:	20000cf8 	.word	0x20000cf8
 8005e88:	e000ed04 	.word	0xe000ed04

08005e8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e92:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <xTaskGetTickCount+0x1c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e98:	687b      	ldr	r3, [r7, #4]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	20000cec 	.word	0x20000cec

08005eac <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8005eb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <vTaskStepTick+0x48>)
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	441a      	add	r2, r3
 8005ebc:	4b0e      	ldr	r3, [pc, #56]	; (8005ef8 <vTaskStepTick+0x4c>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d90a      	bls.n	8005eda <vTaskStepTick+0x2e>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	60fb      	str	r3, [r7, #12]
}
 8005ed6:	bf00      	nop
 8005ed8:	e7fe      	b.n	8005ed8 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 8005eda:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <vTaskStepTick+0x48>)
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	4a04      	ldr	r2, [pc, #16]	; (8005ef4 <vTaskStepTick+0x48>)
 8005ee4:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8005ee6:	bf00      	nop
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	20000cec 	.word	0x20000cec
 8005ef8:	20000d08 	.word	0x20000d08

08005efc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f02:	2300      	movs	r3, #0
 8005f04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f06:	4b4f      	ldr	r3, [pc, #316]	; (8006044 <xTaskIncrementTick+0x148>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f040 808f 	bne.w	800602e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f10:	4b4d      	ldr	r3, [pc, #308]	; (8006048 <xTaskIncrementTick+0x14c>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3301      	adds	r3, #1
 8005f16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f18:	4a4b      	ldr	r2, [pc, #300]	; (8006048 <xTaskIncrementTick+0x14c>)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d120      	bne.n	8005f66 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f24:	4b49      	ldr	r3, [pc, #292]	; (800604c <xTaskIncrementTick+0x150>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <xTaskIncrementTick+0x48>
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	603b      	str	r3, [r7, #0]
}
 8005f40:	bf00      	nop
 8005f42:	e7fe      	b.n	8005f42 <xTaskIncrementTick+0x46>
 8005f44:	4b41      	ldr	r3, [pc, #260]	; (800604c <xTaskIncrementTick+0x150>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	4b41      	ldr	r3, [pc, #260]	; (8006050 <xTaskIncrementTick+0x154>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a3f      	ldr	r2, [pc, #252]	; (800604c <xTaskIncrementTick+0x150>)
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	4a3f      	ldr	r2, [pc, #252]	; (8006050 <xTaskIncrementTick+0x154>)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	4b3e      	ldr	r3, [pc, #248]	; (8006054 <xTaskIncrementTick+0x158>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	4a3d      	ldr	r2, [pc, #244]	; (8006054 <xTaskIncrementTick+0x158>)
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	f000 fb33 	bl	80065cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f66:	4b3c      	ldr	r3, [pc, #240]	; (8006058 <xTaskIncrementTick+0x15c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d349      	bcc.n	8006004 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f70:	4b36      	ldr	r3, [pc, #216]	; (800604c <xTaskIncrementTick+0x150>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d104      	bne.n	8005f84 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f7a:	4b37      	ldr	r3, [pc, #220]	; (8006058 <xTaskIncrementTick+0x15c>)
 8005f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f80:	601a      	str	r2, [r3, #0]
					break;
 8005f82:	e03f      	b.n	8006004 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f84:	4b31      	ldr	r3, [pc, #196]	; (800604c <xTaskIncrementTick+0x150>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d203      	bcs.n	8005fa4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f9c:	4a2e      	ldr	r2, [pc, #184]	; (8006058 <xTaskIncrementTick+0x15c>)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005fa2:	e02f      	b.n	8006004 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fe fe41 	bl	8004c30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d004      	beq.n	8005fc0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	3318      	adds	r3, #24
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fe fe38 	bl	8004c30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc4:	4b25      	ldr	r3, [pc, #148]	; (800605c <xTaskIncrementTick+0x160>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d903      	bls.n	8005fd4 <xTaskIncrementTick+0xd8>
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd0:	4a22      	ldr	r2, [pc, #136]	; (800605c <xTaskIncrementTick+0x160>)
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4a1f      	ldr	r2, [pc, #124]	; (8006060 <xTaskIncrementTick+0x164>)
 8005fe2:	441a      	add	r2, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4610      	mov	r0, r2
 8005fec:	f7fe fdc3 	bl	8004b76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff4:	4b1b      	ldr	r3, [pc, #108]	; (8006064 <xTaskIncrementTick+0x168>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d3b8      	bcc.n	8005f70 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ffe:	2301      	movs	r3, #1
 8006000:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006002:	e7b5      	b.n	8005f70 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006004:	4b17      	ldr	r3, [pc, #92]	; (8006064 <xTaskIncrementTick+0x168>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600a:	4915      	ldr	r1, [pc, #84]	; (8006060 <xTaskIncrementTick+0x164>)
 800600c:	4613      	mov	r3, r2
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	440b      	add	r3, r1
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d901      	bls.n	8006020 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800601c:	2301      	movs	r3, #1
 800601e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006020:	4b11      	ldr	r3, [pc, #68]	; (8006068 <xTaskIncrementTick+0x16c>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d007      	beq.n	8006038 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006028:	2301      	movs	r3, #1
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	e004      	b.n	8006038 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800602e:	4b0f      	ldr	r3, [pc, #60]	; (800606c <xTaskIncrementTick+0x170>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3301      	adds	r3, #1
 8006034:	4a0d      	ldr	r2, [pc, #52]	; (800606c <xTaskIncrementTick+0x170>)
 8006036:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006038:	697b      	ldr	r3, [r7, #20]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3718      	adds	r7, #24
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	20000d10 	.word	0x20000d10
 8006048:	20000cec 	.word	0x20000cec
 800604c:	20000ca0 	.word	0x20000ca0
 8006050:	20000ca4 	.word	0x20000ca4
 8006054:	20000d00 	.word	0x20000d00
 8006058:	20000d08 	.word	0x20000d08
 800605c:	20000cf0 	.word	0x20000cf0
 8006060:	20000818 	.word	0x20000818
 8006064:	20000814 	.word	0x20000814
 8006068:	20000cfc 	.word	0x20000cfc
 800606c:	20000cf8 	.word	0x20000cf8

08006070 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006076:	4b2a      	ldr	r3, [pc, #168]	; (8006120 <vTaskSwitchContext+0xb0>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800607e:	4b29      	ldr	r3, [pc, #164]	; (8006124 <vTaskSwitchContext+0xb4>)
 8006080:	2201      	movs	r2, #1
 8006082:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006084:	e046      	b.n	8006114 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006086:	4b27      	ldr	r3, [pc, #156]	; (8006124 <vTaskSwitchContext+0xb4>)
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800608c:	4b26      	ldr	r3, [pc, #152]	; (8006128 <vTaskSwitchContext+0xb8>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	e010      	b.n	80060b6 <vTaskSwitchContext+0x46>
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10a      	bne.n	80060b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	607b      	str	r3, [r7, #4]
}
 80060ac:	bf00      	nop
 80060ae:	e7fe      	b.n	80060ae <vTaskSwitchContext+0x3e>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	491d      	ldr	r1, [pc, #116]	; (800612c <vTaskSwitchContext+0xbc>)
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0e4      	beq.n	8006094 <vTaskSwitchContext+0x24>
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	4613      	mov	r3, r2
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	4a15      	ldr	r2, [pc, #84]	; (800612c <vTaskSwitchContext+0xbc>)
 80060d6:	4413      	add	r3, r2
 80060d8:	60bb      	str	r3, [r7, #8]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	605a      	str	r2, [r3, #4]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	3308      	adds	r3, #8
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d104      	bne.n	80060fa <vTaskSwitchContext+0x8a>
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	605a      	str	r2, [r3, #4]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	4a0b      	ldr	r2, [pc, #44]	; (8006130 <vTaskSwitchContext+0xc0>)
 8006102:	6013      	str	r3, [r2, #0]
 8006104:	4a08      	ldr	r2, [pc, #32]	; (8006128 <vTaskSwitchContext+0xb8>)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800610a:	4b09      	ldr	r3, [pc, #36]	; (8006130 <vTaskSwitchContext+0xc0>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3354      	adds	r3, #84	; 0x54
 8006110:	4a08      	ldr	r2, [pc, #32]	; (8006134 <vTaskSwitchContext+0xc4>)
 8006112:	6013      	str	r3, [r2, #0]
}
 8006114:	bf00      	nop
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	20000d10 	.word	0x20000d10
 8006124:	20000cfc 	.word	0x20000cfc
 8006128:	20000cf0 	.word	0x20000cf0
 800612c:	20000818 	.word	0x20000818
 8006130:	20000814 	.word	0x20000814
 8006134:	20000010 	.word	0x20000010

08006138 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	60fb      	str	r3, [r7, #12]
}
 800615a:	bf00      	nop
 800615c:	e7fe      	b.n	800615c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800615e:	4b07      	ldr	r3, [pc, #28]	; (800617c <vTaskPlaceOnEventList+0x44>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3318      	adds	r3, #24
 8006164:	4619      	mov	r1, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fe fd29 	bl	8004bbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800616c:	2101      	movs	r1, #1
 800616e:	6838      	ldr	r0, [r7, #0]
 8006170:	f000 fae8 	bl	8006744 <prvAddCurrentTaskToDelayedList>
}
 8006174:	bf00      	nop
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	20000814 	.word	0x20000814

08006180 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10a      	bne.n	80061a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	617b      	str	r3, [r7, #20]
}
 80061a4:	bf00      	nop
 80061a6:	e7fe      	b.n	80061a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061a8:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3318      	adds	r3, #24
 80061ae:	4619      	mov	r1, r3
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f7fe fce0 	bl	8004b76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80061bc:	f04f 33ff 	mov.w	r3, #4294967295
 80061c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80061c2:	6879      	ldr	r1, [r7, #4]
 80061c4:	68b8      	ldr	r0, [r7, #8]
 80061c6:	f000 fabd 	bl	8006744 <prvAddCurrentTaskToDelayedList>
	}
 80061ca:	bf00      	nop
 80061cc:	3718      	adds	r7, #24
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	20000814 	.word	0x20000814

080061d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10a      	bne.n	8006204 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	60fb      	str	r3, [r7, #12]
}
 8006200:	bf00      	nop
 8006202:	e7fe      	b.n	8006202 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	3318      	adds	r3, #24
 8006208:	4618      	mov	r0, r3
 800620a:	f7fe fd11 	bl	8004c30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800620e:	4b1f      	ldr	r3, [pc, #124]	; (800628c <xTaskRemoveFromEventList+0xb4>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d11f      	bne.n	8006256 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	3304      	adds	r3, #4
 800621a:	4618      	mov	r0, r3
 800621c:	f7fe fd08 	bl	8004c30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006224:	4b1a      	ldr	r3, [pc, #104]	; (8006290 <xTaskRemoveFromEventList+0xb8>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	429a      	cmp	r2, r3
 800622a:	d903      	bls.n	8006234 <xTaskRemoveFromEventList+0x5c>
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006230:	4a17      	ldr	r2, [pc, #92]	; (8006290 <xTaskRemoveFromEventList+0xb8>)
 8006232:	6013      	str	r3, [r2, #0]
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006238:	4613      	mov	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4a14      	ldr	r2, [pc, #80]	; (8006294 <xTaskRemoveFromEventList+0xbc>)
 8006242:	441a      	add	r2, r3
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	3304      	adds	r3, #4
 8006248:	4619      	mov	r1, r3
 800624a:	4610      	mov	r0, r2
 800624c:	f7fe fc93 	bl	8004b76 <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8006250:	f000 f9bc 	bl	80065cc <prvResetNextTaskUnblockTime>
 8006254:	e005      	b.n	8006262 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	3318      	adds	r3, #24
 800625a:	4619      	mov	r1, r3
 800625c:	480e      	ldr	r0, [pc, #56]	; (8006298 <xTaskRemoveFromEventList+0xc0>)
 800625e:	f7fe fc8a 	bl	8004b76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006266:	4b0d      	ldr	r3, [pc, #52]	; (800629c <xTaskRemoveFromEventList+0xc4>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626c:	429a      	cmp	r2, r3
 800626e:	d905      	bls.n	800627c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006270:	2301      	movs	r3, #1
 8006272:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006274:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <xTaskRemoveFromEventList+0xc8>)
 8006276:	2201      	movs	r2, #1
 8006278:	601a      	str	r2, [r3, #0]
 800627a:	e001      	b.n	8006280 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800627c:	2300      	movs	r3, #0
 800627e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006280:	697b      	ldr	r3, [r7, #20]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	20000d10 	.word	0x20000d10
 8006290:	20000cf0 	.word	0x20000cf0
 8006294:	20000818 	.word	0x20000818
 8006298:	20000ca8 	.word	0x20000ca8
 800629c:	20000814 	.word	0x20000814
 80062a0:	20000cfc 	.word	0x20000cfc

080062a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80062ac:	4b06      	ldr	r3, [pc, #24]	; (80062c8 <vTaskInternalSetTimeOutState+0x24>)
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80062b4:	4b05      	ldr	r3, [pc, #20]	; (80062cc <vTaskInternalSetTimeOutState+0x28>)
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	605a      	str	r2, [r3, #4]
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	20000d00 	.word	0x20000d00
 80062cc:	20000cec 	.word	0x20000cec

080062d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b088      	sub	sp, #32
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10a      	bne.n	80062f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	613b      	str	r3, [r7, #16]
}
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	60fb      	str	r3, [r7, #12]
}
 800630e:	bf00      	nop
 8006310:	e7fe      	b.n	8006310 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006312:	f000 fee7 	bl	80070e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006316:	4b1d      	ldr	r3, [pc, #116]	; (800638c <xTaskCheckForTimeOut+0xbc>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	1ad3      	subs	r3, r2, r3
 8006324:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632e:	d102      	bne.n	8006336 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006330:	2300      	movs	r3, #0
 8006332:	61fb      	str	r3, [r7, #28]
 8006334:	e023      	b.n	800637e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	4b15      	ldr	r3, [pc, #84]	; (8006390 <xTaskCheckForTimeOut+0xc0>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	429a      	cmp	r2, r3
 8006340:	d007      	beq.n	8006352 <xTaskCheckForTimeOut+0x82>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	429a      	cmp	r2, r3
 800634a:	d302      	bcc.n	8006352 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800634c:	2301      	movs	r3, #1
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	e015      	b.n	800637e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	429a      	cmp	r2, r3
 800635a:	d20b      	bcs.n	8006374 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	1ad2      	subs	r2, r2, r3
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f7ff ff9b 	bl	80062a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800636e:	2300      	movs	r3, #0
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	e004      	b.n	800637e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	2200      	movs	r2, #0
 8006378:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800637a:	2301      	movs	r3, #1
 800637c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800637e:	f000 fee1 	bl	8007144 <vPortExitCritical>

	return xReturn;
 8006382:	69fb      	ldr	r3, [r7, #28]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3720      	adds	r7, #32
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20000cec 	.word	0x20000cec
 8006390:	20000d00 	.word	0x20000d00

08006394 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006398:	4b03      	ldr	r3, [pc, #12]	; (80063a8 <vTaskMissedYield+0x14>)
 800639a:	2201      	movs	r2, #1
 800639c:	601a      	str	r2, [r3, #0]
}
 800639e:	bf00      	nop
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	20000cfc 	.word	0x20000cfc

080063ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80063b4:	f000 f8a8 	bl	8006508 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063b8:	4b18      	ldr	r3, [pc, #96]	; (800641c <prvIdleTask+0x70>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d907      	bls.n	80063d0 <prvIdleTask+0x24>
			{
				taskYIELD();
 80063c0:	4b17      	ldr	r3, [pc, #92]	; (8006420 <prvIdleTask+0x74>)
 80063c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 80063d0:	f7ff fc86 	bl	8005ce0 <prvGetExpectedIdleTime>
 80063d4:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d9eb      	bls.n	80063b4 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 80063dc:	f7ff fc72 	bl	8005cc4 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 80063e0:	4b10      	ldr	r3, [pc, #64]	; (8006424 <prvIdleTask+0x78>)
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	4b10      	ldr	r3, [pc, #64]	; (8006428 <prvIdleTask+0x7c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d20a      	bcs.n	8006402 <prvIdleTask+0x56>
	__asm volatile
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	60bb      	str	r3, [r7, #8]
}
 80063fe:	bf00      	nop
 8006400:	e7fe      	b.n	8006400 <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8006402:	f7ff fc6d 	bl	8005ce0 <prvGetExpectedIdleTime>
 8006406:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d902      	bls.n	8006414 <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800640e:	68f8      	ldr	r0, [r7, #12]
 8006410:	f000 ff1c 	bl	800724c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8006414:	f7ff fc9c 	bl	8005d50 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8006418:	e7cc      	b.n	80063b4 <prvIdleTask+0x8>
 800641a:	bf00      	nop
 800641c:	20000818 	.word	0x20000818
 8006420:	e000ed04 	.word	0xe000ed04
 8006424:	20000d08 	.word	0x20000d08
 8006428:	20000cec 	.word	0x20000cec

0800642c <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 8006432:	2301      	movs	r3, #1
 8006434:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8006436:	2301      	movs	r3, #1
 8006438:	71fb      	strb	r3, [r7, #7]

		/* This function must be called from a critical section. */

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 800643a:	4b0f      	ldr	r3, [pc, #60]	; (8006478 <eTaskConfirmSleepModeStatus+0x4c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8006442:	2300      	movs	r3, #0
 8006444:	71fb      	strb	r3, [r7, #7]
 8006446:	e010      	b.n	800646a <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8006448:	4b0c      	ldr	r3, [pc, #48]	; (800647c <eTaskConfirmSleepModeStatus+0x50>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 8006450:	2300      	movs	r3, #0
 8006452:	71fb      	strb	r3, [r7, #7]
 8006454:	e009      	b.n	800646a <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8006456:	4b0a      	ldr	r3, [pc, #40]	; (8006480 <eTaskConfirmSleepModeStatus+0x54>)
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	4b0a      	ldr	r3, [pc, #40]	; (8006484 <eTaskConfirmSleepModeStatus+0x58>)
 800645c:	6819      	ldr	r1, [r3, #0]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	1acb      	subs	r3, r1, r3
 8006462:	429a      	cmp	r2, r3
 8006464:	d101      	bne.n	800646a <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 8006466:	2302      	movs	r3, #2
 8006468:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 800646a:	79fb      	ldrb	r3, [r7, #7]
	}
 800646c:	4618      	mov	r0, r3
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr
 8006478:	20000ca8 	.word	0x20000ca8
 800647c:	20000cfc 	.word	0x20000cfc
 8006480:	20000cd4 	.word	0x20000cd4
 8006484:	20000ce8 	.word	0x20000ce8

08006488 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800648e:	2300      	movs	r3, #0
 8006490:	607b      	str	r3, [r7, #4]
 8006492:	e00c      	b.n	80064ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	4613      	mov	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4a12      	ldr	r2, [pc, #72]	; (80064e8 <prvInitialiseTaskLists+0x60>)
 80064a0:	4413      	add	r3, r2
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fe fb3a 	bl	8004b1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3301      	adds	r3, #1
 80064ac:	607b      	str	r3, [r7, #4]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b37      	cmp	r3, #55	; 0x37
 80064b2:	d9ef      	bls.n	8006494 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064b4:	480d      	ldr	r0, [pc, #52]	; (80064ec <prvInitialiseTaskLists+0x64>)
 80064b6:	f7fe fb31 	bl	8004b1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064ba:	480d      	ldr	r0, [pc, #52]	; (80064f0 <prvInitialiseTaskLists+0x68>)
 80064bc:	f7fe fb2e 	bl	8004b1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064c0:	480c      	ldr	r0, [pc, #48]	; (80064f4 <prvInitialiseTaskLists+0x6c>)
 80064c2:	f7fe fb2b 	bl	8004b1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064c6:	480c      	ldr	r0, [pc, #48]	; (80064f8 <prvInitialiseTaskLists+0x70>)
 80064c8:	f7fe fb28 	bl	8004b1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064cc:	480b      	ldr	r0, [pc, #44]	; (80064fc <prvInitialiseTaskLists+0x74>)
 80064ce:	f7fe fb25 	bl	8004b1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064d2:	4b0b      	ldr	r3, [pc, #44]	; (8006500 <prvInitialiseTaskLists+0x78>)
 80064d4:	4a05      	ldr	r2, [pc, #20]	; (80064ec <prvInitialiseTaskLists+0x64>)
 80064d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064d8:	4b0a      	ldr	r3, [pc, #40]	; (8006504 <prvInitialiseTaskLists+0x7c>)
 80064da:	4a05      	ldr	r2, [pc, #20]	; (80064f0 <prvInitialiseTaskLists+0x68>)
 80064dc:	601a      	str	r2, [r3, #0]
}
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20000818 	.word	0x20000818
 80064ec:	20000c78 	.word	0x20000c78
 80064f0:	20000c8c 	.word	0x20000c8c
 80064f4:	20000ca8 	.word	0x20000ca8
 80064f8:	20000cbc 	.word	0x20000cbc
 80064fc:	20000cd4 	.word	0x20000cd4
 8006500:	20000ca0 	.word	0x20000ca0
 8006504:	20000ca4 	.word	0x20000ca4

08006508 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800650e:	e019      	b.n	8006544 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006510:	f000 fde8 	bl	80070e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006514:	4b10      	ldr	r3, [pc, #64]	; (8006558 <prvCheckTasksWaitingTermination+0x50>)
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	3304      	adds	r3, #4
 8006520:	4618      	mov	r0, r3
 8006522:	f7fe fb85 	bl	8004c30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006526:	4b0d      	ldr	r3, [pc, #52]	; (800655c <prvCheckTasksWaitingTermination+0x54>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3b01      	subs	r3, #1
 800652c:	4a0b      	ldr	r2, [pc, #44]	; (800655c <prvCheckTasksWaitingTermination+0x54>)
 800652e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006530:	4b0b      	ldr	r3, [pc, #44]	; (8006560 <prvCheckTasksWaitingTermination+0x58>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	3b01      	subs	r3, #1
 8006536:	4a0a      	ldr	r2, [pc, #40]	; (8006560 <prvCheckTasksWaitingTermination+0x58>)
 8006538:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800653a:	f000 fe03 	bl	8007144 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f810 	bl	8006564 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006544:	4b06      	ldr	r3, [pc, #24]	; (8006560 <prvCheckTasksWaitingTermination+0x58>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1e1      	bne.n	8006510 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800654c:	bf00      	nop
 800654e:	bf00      	nop
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20000cbc 	.word	0x20000cbc
 800655c:	20000ce8 	.word	0x20000ce8
 8006560:	20000cd0 	.word	0x20000cd0

08006564 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	3354      	adds	r3, #84	; 0x54
 8006570:	4618      	mov	r0, r3
 8006572:	f001 fa51 	bl	8007a18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800657c:	2b00      	cmp	r3, #0
 800657e:	d108      	bne.n	8006592 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006584:	4618      	mov	r0, r3
 8006586:	f001 f87f 	bl	8007688 <vPortFree>
				vPortFree( pxTCB );
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f001 f87c 	bl	8007688 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006590:	e018      	b.n	80065c4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006598:	2b01      	cmp	r3, #1
 800659a:	d103      	bne.n	80065a4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 f873 	bl	8007688 <vPortFree>
	}
 80065a2:	e00f      	b.n	80065c4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d00a      	beq.n	80065c4 <prvDeleteTCB+0x60>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	60fb      	str	r3, [r7, #12]
}
 80065c0:	bf00      	nop
 80065c2:	e7fe      	b.n	80065c2 <prvDeleteTCB+0x5e>
	}
 80065c4:	bf00      	nop
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065d2:	4b0c      	ldr	r3, [pc, #48]	; (8006604 <prvResetNextTaskUnblockTime+0x38>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d104      	bne.n	80065e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065dc:	4b0a      	ldr	r3, [pc, #40]	; (8006608 <prvResetNextTaskUnblockTime+0x3c>)
 80065de:	f04f 32ff 	mov.w	r2, #4294967295
 80065e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80065e4:	e008      	b.n	80065f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065e6:	4b07      	ldr	r3, [pc, #28]	; (8006604 <prvResetNextTaskUnblockTime+0x38>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	4a04      	ldr	r2, [pc, #16]	; (8006608 <prvResetNextTaskUnblockTime+0x3c>)
 80065f6:	6013      	str	r3, [r2, #0]
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	20000ca0 	.word	0x20000ca0
 8006608:	20000d08 	.word	0x20000d08

0800660c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006612:	4b05      	ldr	r3, [pc, #20]	; (8006628 <xTaskGetCurrentTaskHandle+0x1c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006618:	687b      	ldr	r3, [r7, #4]
	}
 800661a:	4618      	mov	r0, r3
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	20000814 	.word	0x20000814

0800662c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006632:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <xTaskGetSchedulerState+0x34>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d102      	bne.n	8006640 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800663a:	2301      	movs	r3, #1
 800663c:	607b      	str	r3, [r7, #4]
 800663e:	e008      	b.n	8006652 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006640:	4b08      	ldr	r3, [pc, #32]	; (8006664 <xTaskGetSchedulerState+0x38>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d102      	bne.n	800664e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006648:	2302      	movs	r3, #2
 800664a:	607b      	str	r3, [r7, #4]
 800664c:	e001      	b.n	8006652 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800664e:	2300      	movs	r3, #0
 8006650:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006652:	687b      	ldr	r3, [r7, #4]
	}
 8006654:	4618      	mov	r0, r3
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	20000cf4 	.word	0x20000cf4
 8006664:	20000d10 	.word	0x20000d10

08006668 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006674:	2300      	movs	r3, #0
 8006676:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d056      	beq.n	800672c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800667e:	4b2e      	ldr	r3, [pc, #184]	; (8006738 <xTaskPriorityDisinherit+0xd0>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	429a      	cmp	r2, r3
 8006686:	d00a      	beq.n	800669e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	60fb      	str	r3, [r7, #12]
}
 800669a:	bf00      	nop
 800669c:	e7fe      	b.n	800669c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10a      	bne.n	80066bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80066a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	60bb      	str	r3, [r7, #8]
}
 80066b8:	bf00      	nop
 80066ba:	e7fe      	b.n	80066ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c0:	1e5a      	subs	r2, r3, #1
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d02c      	beq.n	800672c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d128      	bne.n	800672c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	3304      	adds	r3, #4
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fe faa6 	bl	8004c30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fc:	4b0f      	ldr	r3, [pc, #60]	; (800673c <xTaskPriorityDisinherit+0xd4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d903      	bls.n	800670c <xTaskPriorityDisinherit+0xa4>
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	4a0c      	ldr	r2, [pc, #48]	; (800673c <xTaskPriorityDisinherit+0xd4>)
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006710:	4613      	mov	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4a09      	ldr	r2, [pc, #36]	; (8006740 <xTaskPriorityDisinherit+0xd8>)
 800671a:	441a      	add	r2, r3
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	3304      	adds	r3, #4
 8006720:	4619      	mov	r1, r3
 8006722:	4610      	mov	r0, r2
 8006724:	f7fe fa27 	bl	8004b76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006728:	2301      	movs	r3, #1
 800672a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800672c:	697b      	ldr	r3, [r7, #20]
	}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20000814 	.word	0x20000814
 800673c:	20000cf0 	.word	0x20000cf0
 8006740:	20000818 	.word	0x20000818

08006744 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800674e:	4b21      	ldr	r3, [pc, #132]	; (80067d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006754:	4b20      	ldr	r3, [pc, #128]	; (80067d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3304      	adds	r3, #4
 800675a:	4618      	mov	r0, r3
 800675c:	f7fe fa68 	bl	8004c30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006766:	d10a      	bne.n	800677e <prvAddCurrentTaskToDelayedList+0x3a>
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d007      	beq.n	800677e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800676e:	4b1a      	ldr	r3, [pc, #104]	; (80067d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3304      	adds	r3, #4
 8006774:	4619      	mov	r1, r3
 8006776:	4819      	ldr	r0, [pc, #100]	; (80067dc <prvAddCurrentTaskToDelayedList+0x98>)
 8006778:	f7fe f9fd 	bl	8004b76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800677c:	e026      	b.n	80067cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4413      	add	r3, r2
 8006784:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006786:	4b14      	ldr	r3, [pc, #80]	; (80067d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	429a      	cmp	r2, r3
 8006794:	d209      	bcs.n	80067aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006796:	4b12      	ldr	r3, [pc, #72]	; (80067e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	4b0f      	ldr	r3, [pc, #60]	; (80067d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3304      	adds	r3, #4
 80067a0:	4619      	mov	r1, r3
 80067a2:	4610      	mov	r0, r2
 80067a4:	f7fe fa0b 	bl	8004bbe <vListInsert>
}
 80067a8:	e010      	b.n	80067cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067aa:	4b0e      	ldr	r3, [pc, #56]	; (80067e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	4b0a      	ldr	r3, [pc, #40]	; (80067d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3304      	adds	r3, #4
 80067b4:	4619      	mov	r1, r3
 80067b6:	4610      	mov	r0, r2
 80067b8:	f7fe fa01 	bl	8004bbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067bc:	4b0a      	ldr	r3, [pc, #40]	; (80067e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d202      	bcs.n	80067cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067c6:	4a08      	ldr	r2, [pc, #32]	; (80067e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	6013      	str	r3, [r2, #0]
}
 80067cc:	bf00      	nop
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20000cec 	.word	0x20000cec
 80067d8:	20000814 	.word	0x20000814
 80067dc:	20000cd4 	.word	0x20000cd4
 80067e0:	20000ca4 	.word	0x20000ca4
 80067e4:	20000ca0 	.word	0x20000ca0
 80067e8:	20000d08 	.word	0x20000d08

080067ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08a      	sub	sp, #40	; 0x28
 80067f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80067f6:	f000 fb07 	bl	8006e08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80067fa:	4b1c      	ldr	r3, [pc, #112]	; (800686c <xTimerCreateTimerTask+0x80>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d021      	beq.n	8006846 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006802:	2300      	movs	r3, #0
 8006804:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006806:	2300      	movs	r3, #0
 8006808:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800680a:	1d3a      	adds	r2, r7, #4
 800680c:	f107 0108 	add.w	r1, r7, #8
 8006810:	f107 030c 	add.w	r3, r7, #12
 8006814:	4618      	mov	r0, r3
 8006816:	f7fe f967 	bl	8004ae8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800681a:	6879      	ldr	r1, [r7, #4]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	9202      	str	r2, [sp, #8]
 8006822:	9301      	str	r3, [sp, #4]
 8006824:	2302      	movs	r3, #2
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	2300      	movs	r3, #0
 800682a:	460a      	mov	r2, r1
 800682c:	4910      	ldr	r1, [pc, #64]	; (8006870 <xTimerCreateTimerTask+0x84>)
 800682e:	4811      	ldr	r0, [pc, #68]	; (8006874 <xTimerCreateTimerTask+0x88>)
 8006830:	f7fe ff14 	bl	800565c <xTaskCreateStatic>
 8006834:	4603      	mov	r3, r0
 8006836:	4a10      	ldr	r2, [pc, #64]	; (8006878 <xTimerCreateTimerTask+0x8c>)
 8006838:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800683a:	4b0f      	ldr	r3, [pc, #60]	; (8006878 <xTimerCreateTimerTask+0x8c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006842:	2301      	movs	r3, #1
 8006844:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10a      	bne.n	8006862 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800684c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	613b      	str	r3, [r7, #16]
}
 800685e:	bf00      	nop
 8006860:	e7fe      	b.n	8006860 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006862:	697b      	ldr	r3, [r7, #20]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20000d44 	.word	0x20000d44
 8006870:	08008368 	.word	0x08008368
 8006874:	080069b1 	.word	0x080069b1
 8006878:	20000d48 	.word	0x20000d48

0800687c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b08a      	sub	sp, #40	; 0x28
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800688a:	2300      	movs	r3, #0
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10a      	bne.n	80068aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	623b      	str	r3, [r7, #32]
}
 80068a6:	bf00      	nop
 80068a8:	e7fe      	b.n	80068a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068aa:	4b1a      	ldr	r3, [pc, #104]	; (8006914 <xTimerGenericCommand+0x98>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d02a      	beq.n	8006908 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2b05      	cmp	r3, #5
 80068c2:	dc18      	bgt.n	80068f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068c4:	f7ff feb2 	bl	800662c <xTaskGetSchedulerState>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d109      	bne.n	80068e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068ce:	4b11      	ldr	r3, [pc, #68]	; (8006914 <xTimerGenericCommand+0x98>)
 80068d0:	6818      	ldr	r0, [r3, #0]
 80068d2:	f107 0110 	add.w	r1, r7, #16
 80068d6:	2300      	movs	r3, #0
 80068d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068da:	f7fe fad7 	bl	8004e8c <xQueueGenericSend>
 80068de:	6278      	str	r0, [r7, #36]	; 0x24
 80068e0:	e012      	b.n	8006908 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068e2:	4b0c      	ldr	r3, [pc, #48]	; (8006914 <xTimerGenericCommand+0x98>)
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	f107 0110 	add.w	r1, r7, #16
 80068ea:	2300      	movs	r3, #0
 80068ec:	2200      	movs	r2, #0
 80068ee:	f7fe facd 	bl	8004e8c <xQueueGenericSend>
 80068f2:	6278      	str	r0, [r7, #36]	; 0x24
 80068f4:	e008      	b.n	8006908 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80068f6:	4b07      	ldr	r3, [pc, #28]	; (8006914 <xTimerGenericCommand+0x98>)
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	f107 0110 	add.w	r1, r7, #16
 80068fe:	2300      	movs	r3, #0
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	f7fe fbc1 	bl	8005088 <xQueueGenericSendFromISR>
 8006906:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800690a:	4618      	mov	r0, r3
 800690c:	3728      	adds	r7, #40	; 0x28
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	20000d44 	.word	0x20000d44

08006918 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af02      	add	r7, sp, #8
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006922:	4b22      	ldr	r3, [pc, #136]	; (80069ac <prvProcessExpiredTimer+0x94>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	3304      	adds	r3, #4
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe f97d 	bl	8004c30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b00      	cmp	r3, #0
 8006942:	d022      	beq.n	800698a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	699a      	ldr	r2, [r3, #24]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	18d1      	adds	r1, r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	6978      	ldr	r0, [r7, #20]
 8006952:	f000 f8d1 	bl	8006af8 <prvInsertTimerInActiveList>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01f      	beq.n	800699c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800695c:	2300      	movs	r3, #0
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	2300      	movs	r3, #0
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	2100      	movs	r1, #0
 8006966:	6978      	ldr	r0, [r7, #20]
 8006968:	f7ff ff88 	bl	800687c <xTimerGenericCommand>
 800696c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d113      	bne.n	800699c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	60fb      	str	r3, [r7, #12]
}
 8006986:	bf00      	nop
 8006988:	e7fe      	b.n	8006988 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006990:	f023 0301 	bic.w	r3, r3, #1
 8006994:	b2da      	uxtb	r2, r3
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	6978      	ldr	r0, [r7, #20]
 80069a2:	4798      	blx	r3
}
 80069a4:	bf00      	nop
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	20000d3c 	.word	0x20000d3c

080069b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069b8:	f107 0308 	add.w	r3, r7, #8
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 f857 	bl	8006a70 <prvGetNextExpireTime>
 80069c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4619      	mov	r1, r3
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 f803 	bl	80069d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069ce:	f000 f8d5 	bl	8006b7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069d2:	e7f1      	b.n	80069b8 <prvTimerTask+0x8>

080069d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069de:	f7ff f971 	bl	8005cc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069e2:	f107 0308 	add.w	r3, r7, #8
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 f866 	bl	8006ab8 <prvSampleTimeNow>
 80069ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d130      	bne.n	8006a56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10a      	bne.n	8006a10 <prvProcessTimerOrBlockTask+0x3c>
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d806      	bhi.n	8006a10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a02:	f7ff f9a5 	bl	8005d50 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a06:	68f9      	ldr	r1, [r7, #12]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff ff85 	bl	8006918 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a0e:	e024      	b.n	8006a5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d008      	beq.n	8006a28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a16:	4b13      	ldr	r3, [pc, #76]	; (8006a64 <prvProcessTimerOrBlockTask+0x90>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <prvProcessTimerOrBlockTask+0x50>
 8006a20:	2301      	movs	r3, #1
 8006a22:	e000      	b.n	8006a26 <prvProcessTimerOrBlockTask+0x52>
 8006a24:	2300      	movs	r3, #0
 8006a26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a28:	4b0f      	ldr	r3, [pc, #60]	; (8006a68 <prvProcessTimerOrBlockTask+0x94>)
 8006a2a:	6818      	ldr	r0, [r3, #0]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	4619      	mov	r1, r3
 8006a36:	f7fe fddd 	bl	80055f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a3a:	f7ff f989 	bl	8005d50 <xTaskResumeAll>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10a      	bne.n	8006a5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a44:	4b09      	ldr	r3, [pc, #36]	; (8006a6c <prvProcessTimerOrBlockTask+0x98>)
 8006a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	f3bf 8f6f 	isb	sy
}
 8006a54:	e001      	b.n	8006a5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a56:	f7ff f97b 	bl	8005d50 <xTaskResumeAll>
}
 8006a5a:	bf00      	nop
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	20000d40 	.word	0x20000d40
 8006a68:	20000d44 	.word	0x20000d44
 8006a6c:	e000ed04 	.word	0xe000ed04

08006a70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a78:	4b0e      	ldr	r3, [pc, #56]	; (8006ab4 <prvGetNextExpireTime+0x44>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <prvGetNextExpireTime+0x16>
 8006a82:	2201      	movs	r2, #1
 8006a84:	e000      	b.n	8006a88 <prvGetNextExpireTime+0x18>
 8006a86:	2200      	movs	r2, #0
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d105      	bne.n	8006aa0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a94:	4b07      	ldr	r3, [pc, #28]	; (8006ab4 <prvGetNextExpireTime+0x44>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	e001      	b.n	8006aa4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	20000d3c 	.word	0x20000d3c

08006ab8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ac0:	f7ff f9e4 	bl	8005e8c <xTaskGetTickCount>
 8006ac4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ac6:	4b0b      	ldr	r3, [pc, #44]	; (8006af4 <prvSampleTimeNow+0x3c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d205      	bcs.n	8006adc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ad0:	f000 f936 	bl	8006d40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	e002      	b.n	8006ae2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006ae2:	4a04      	ldr	r2, [pc, #16]	; (8006af4 <prvSampleTimeNow+0x3c>)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	20000d4c 	.word	0x20000d4c

08006af8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b06:	2300      	movs	r3, #0
 8006b08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d812      	bhi.n	8006b44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	1ad2      	subs	r2, r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d302      	bcc.n	8006b32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	e01b      	b.n	8006b6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b32:	4b10      	ldr	r3, [pc, #64]	; (8006b74 <prvInsertTimerInActiveList+0x7c>)
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	f7fe f83e 	bl	8004bbe <vListInsert>
 8006b42:	e012      	b.n	8006b6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d206      	bcs.n	8006b5a <prvInsertTimerInActiveList+0x62>
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d302      	bcc.n	8006b5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b54:	2301      	movs	r3, #1
 8006b56:	617b      	str	r3, [r7, #20]
 8006b58:	e007      	b.n	8006b6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b5a:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <prvInsertTimerInActiveList+0x80>)
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	3304      	adds	r3, #4
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f7fe f82a 	bl	8004bbe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b6a:	697b      	ldr	r3, [r7, #20]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	20000d40 	.word	0x20000d40
 8006b78:	20000d3c 	.word	0x20000d3c

08006b7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08e      	sub	sp, #56	; 0x38
 8006b80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b82:	e0ca      	b.n	8006d1a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	da18      	bge.n	8006bbc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b8a:	1d3b      	adds	r3, r7, #4
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10a      	bne.n	8006bac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	61fb      	str	r3, [r7, #28]
}
 8006ba8:	bf00      	nop
 8006baa:	e7fe      	b.n	8006baa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bb2:	6850      	ldr	r0, [r2, #4]
 8006bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bb6:	6892      	ldr	r2, [r2, #8]
 8006bb8:	4611      	mov	r1, r2
 8006bba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f2c0 80aa 	blt.w	8006d18 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d004      	beq.n	8006bda <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7fe f82b 	bl	8004c30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bda:	463b      	mov	r3, r7
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7ff ff6b 	bl	8006ab8 <prvSampleTimeNow>
 8006be2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b09      	cmp	r3, #9
 8006be8:	f200 8097 	bhi.w	8006d1a <prvProcessReceivedCommands+0x19e>
 8006bec:	a201      	add	r2, pc, #4	; (adr r2, 8006bf4 <prvProcessReceivedCommands+0x78>)
 8006bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf2:	bf00      	nop
 8006bf4:	08006c1d 	.word	0x08006c1d
 8006bf8:	08006c1d 	.word	0x08006c1d
 8006bfc:	08006c1d 	.word	0x08006c1d
 8006c00:	08006c91 	.word	0x08006c91
 8006c04:	08006ca5 	.word	0x08006ca5
 8006c08:	08006cef 	.word	0x08006cef
 8006c0c:	08006c1d 	.word	0x08006c1d
 8006c10:	08006c1d 	.word	0x08006c1d
 8006c14:	08006c91 	.word	0x08006c91
 8006c18:	08006ca5 	.word	0x08006ca5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c22:	f043 0301 	orr.w	r3, r3, #1
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	18d1      	adds	r1, r2, r3
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c3c:	f7ff ff5c 	bl	8006af8 <prvInsertTimerInActiveList>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d069      	beq.n	8006d1a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d05e      	beq.n	8006d1a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	441a      	add	r2, r3
 8006c64:	2300      	movs	r3, #0
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	2300      	movs	r3, #0
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c6e:	f7ff fe05 	bl	800687c <xTimerGenericCommand>
 8006c72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c74:	6a3b      	ldr	r3, [r7, #32]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d14f      	bne.n	8006d1a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	61bb      	str	r3, [r7, #24]
}
 8006c8c:	bf00      	nop
 8006c8e:	e7fe      	b.n	8006c8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c96:	f023 0301 	bic.w	r3, r3, #1
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006ca2:	e03a      	b.n	8006d1a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006caa:	f043 0301 	orr.w	r3, r3, #1
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10a      	bne.n	8006cda <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	617b      	str	r3, [r7, #20]
}
 8006cd6:	bf00      	nop
 8006cd8:	e7fe      	b.n	8006cd8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	699a      	ldr	r2, [r3, #24]
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	18d1      	adds	r1, r2, r3
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce8:	f7ff ff06 	bl	8006af8 <prvInsertTimerInActiveList>
					break;
 8006cec:	e015      	b.n	8006d1a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d103      	bne.n	8006d04 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cfe:	f000 fcc3 	bl	8007688 <vPortFree>
 8006d02:	e00a      	b.n	8006d1a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d0a:	f023 0301 	bic.w	r3, r3, #1
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d16:	e000      	b.n	8006d1a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006d18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d1a:	4b08      	ldr	r3, [pc, #32]	; (8006d3c <prvProcessReceivedCommands+0x1c0>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	1d39      	adds	r1, r7, #4
 8006d20:	2200      	movs	r2, #0
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe fa4c 	bl	80051c0 <xQueueReceive>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f47f af2a 	bne.w	8006b84 <prvProcessReceivedCommands+0x8>
	}
}
 8006d30:	bf00      	nop
 8006d32:	bf00      	nop
 8006d34:	3730      	adds	r7, #48	; 0x30
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	20000d44 	.word	0x20000d44

08006d40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d46:	e048      	b.n	8006dda <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d48:	4b2d      	ldr	r3, [pc, #180]	; (8006e00 <prvSwitchTimerLists+0xc0>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d52:	4b2b      	ldr	r3, [pc, #172]	; (8006e00 <prvSwitchTimerLists+0xc0>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fd ff65 	bl	8004c30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d02e      	beq.n	8006dda <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	4413      	add	r3, r2
 8006d84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d90e      	bls.n	8006dac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d9a:	4b19      	ldr	r3, [pc, #100]	; (8006e00 <prvSwitchTimerLists+0xc0>)
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3304      	adds	r3, #4
 8006da2:	4619      	mov	r1, r3
 8006da4:	4610      	mov	r0, r2
 8006da6:	f7fd ff0a 	bl	8004bbe <vListInsert>
 8006daa:	e016      	b.n	8006dda <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dac:	2300      	movs	r3, #0
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	2300      	movs	r3, #0
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	2100      	movs	r1, #0
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f7ff fd60 	bl	800687c <xTimerGenericCommand>
 8006dbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10a      	bne.n	8006dda <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	603b      	str	r3, [r7, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dda:	4b09      	ldr	r3, [pc, #36]	; (8006e00 <prvSwitchTimerLists+0xc0>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1b1      	bne.n	8006d48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006de4:	4b06      	ldr	r3, [pc, #24]	; (8006e00 <prvSwitchTimerLists+0xc0>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006dea:	4b06      	ldr	r3, [pc, #24]	; (8006e04 <prvSwitchTimerLists+0xc4>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a04      	ldr	r2, [pc, #16]	; (8006e00 <prvSwitchTimerLists+0xc0>)
 8006df0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006df2:	4a04      	ldr	r2, [pc, #16]	; (8006e04 <prvSwitchTimerLists+0xc4>)
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	6013      	str	r3, [r2, #0]
}
 8006df8:	bf00      	nop
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	20000d3c 	.word	0x20000d3c
 8006e04:	20000d40 	.word	0x20000d40

08006e08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e0e:	f000 f969 	bl	80070e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e12:	4b15      	ldr	r3, [pc, #84]	; (8006e68 <prvCheckForValidListAndQueue+0x60>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d120      	bne.n	8006e5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e1a:	4814      	ldr	r0, [pc, #80]	; (8006e6c <prvCheckForValidListAndQueue+0x64>)
 8006e1c:	f7fd fe7e 	bl	8004b1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e20:	4813      	ldr	r0, [pc, #76]	; (8006e70 <prvCheckForValidListAndQueue+0x68>)
 8006e22:	f7fd fe7b 	bl	8004b1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e26:	4b13      	ldr	r3, [pc, #76]	; (8006e74 <prvCheckForValidListAndQueue+0x6c>)
 8006e28:	4a10      	ldr	r2, [pc, #64]	; (8006e6c <prvCheckForValidListAndQueue+0x64>)
 8006e2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e2c:	4b12      	ldr	r3, [pc, #72]	; (8006e78 <prvCheckForValidListAndQueue+0x70>)
 8006e2e:	4a10      	ldr	r2, [pc, #64]	; (8006e70 <prvCheckForValidListAndQueue+0x68>)
 8006e30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e32:	2300      	movs	r3, #0
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	4b11      	ldr	r3, [pc, #68]	; (8006e7c <prvCheckForValidListAndQueue+0x74>)
 8006e38:	4a11      	ldr	r2, [pc, #68]	; (8006e80 <prvCheckForValidListAndQueue+0x78>)
 8006e3a:	2110      	movs	r1, #16
 8006e3c:	200a      	movs	r0, #10
 8006e3e:	f7fd ff89 	bl	8004d54 <xQueueGenericCreateStatic>
 8006e42:	4603      	mov	r3, r0
 8006e44:	4a08      	ldr	r2, [pc, #32]	; (8006e68 <prvCheckForValidListAndQueue+0x60>)
 8006e46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e48:	4b07      	ldr	r3, [pc, #28]	; (8006e68 <prvCheckForValidListAndQueue+0x60>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d005      	beq.n	8006e5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e50:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <prvCheckForValidListAndQueue+0x60>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	490b      	ldr	r1, [pc, #44]	; (8006e84 <prvCheckForValidListAndQueue+0x7c>)
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fe fba2 	bl	80055a0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e5c:	f000 f972 	bl	8007144 <vPortExitCritical>
}
 8006e60:	bf00      	nop
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	20000d44 	.word	0x20000d44
 8006e6c:	20000d14 	.word	0x20000d14
 8006e70:	20000d28 	.word	0x20000d28
 8006e74:	20000d3c 	.word	0x20000d3c
 8006e78:	20000d40 	.word	0x20000d40
 8006e7c:	20000df0 	.word	0x20000df0
 8006e80:	20000d50 	.word	0x20000d50
 8006e84:	08008370 	.word	0x08008370

08006e88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	3b04      	subs	r3, #4
 8006e98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	3b04      	subs	r3, #4
 8006ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f023 0201 	bic.w	r2, r3, #1
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3b04      	subs	r3, #4
 8006eb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006eb8:	4a0c      	ldr	r2, [pc, #48]	; (8006eec <pxPortInitialiseStack+0x64>)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3b14      	subs	r3, #20
 8006ec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3b04      	subs	r3, #4
 8006ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f06f 0202 	mvn.w	r2, #2
 8006ed6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3b20      	subs	r3, #32
 8006edc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ede:	68fb      	ldr	r3, [r7, #12]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	08006ef1 	.word	0x08006ef1

08006ef0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006efa:	4b12      	ldr	r3, [pc, #72]	; (8006f44 <prvTaskExitError+0x54>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f02:	d00a      	beq.n	8006f1a <prvTaskExitError+0x2a>
	__asm volatile
 8006f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f08:	f383 8811 	msr	BASEPRI, r3
 8006f0c:	f3bf 8f6f 	isb	sy
 8006f10:	f3bf 8f4f 	dsb	sy
 8006f14:	60fb      	str	r3, [r7, #12]
}
 8006f16:	bf00      	nop
 8006f18:	e7fe      	b.n	8006f18 <prvTaskExitError+0x28>
	__asm volatile
 8006f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1e:	f383 8811 	msr	BASEPRI, r3
 8006f22:	f3bf 8f6f 	isb	sy
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	60bb      	str	r3, [r7, #8]
}
 8006f2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f2e:	bf00      	nop
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d0fc      	beq.n	8006f30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f36:	bf00      	nop
 8006f38:	bf00      	nop
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr
 8006f44:	2000000c 	.word	0x2000000c
	...

08006f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f50:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <pxCurrentTCBConst2>)
 8006f52:	6819      	ldr	r1, [r3, #0]
 8006f54:	6808      	ldr	r0, [r1, #0]
 8006f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5a:	f380 8809 	msr	PSP, r0
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f04f 0000 	mov.w	r0, #0
 8006f66:	f380 8811 	msr	BASEPRI, r0
 8006f6a:	4770      	bx	lr
 8006f6c:	f3af 8000 	nop.w

08006f70 <pxCurrentTCBConst2>:
 8006f70:	20000814 	.word	0x20000814
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f74:	bf00      	nop
 8006f76:	bf00      	nop

08006f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f78:	4808      	ldr	r0, [pc, #32]	; (8006f9c <prvPortStartFirstTask+0x24>)
 8006f7a:	6800      	ldr	r0, [r0, #0]
 8006f7c:	6800      	ldr	r0, [r0, #0]
 8006f7e:	f380 8808 	msr	MSP, r0
 8006f82:	f04f 0000 	mov.w	r0, #0
 8006f86:	f380 8814 	msr	CONTROL, r0
 8006f8a:	b662      	cpsie	i
 8006f8c:	b661      	cpsie	f
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	df00      	svc	0
 8006f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f9a:	bf00      	nop
 8006f9c:	e000ed08 	.word	0xe000ed08

08006fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fa6:	4b46      	ldr	r3, [pc, #280]	; (80070c0 <xPortStartScheduler+0x120>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a46      	ldr	r2, [pc, #280]	; (80070c4 <xPortStartScheduler+0x124>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d10a      	bne.n	8006fc6 <xPortStartScheduler+0x26>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	613b      	str	r3, [r7, #16]
}
 8006fc2:	bf00      	nop
 8006fc4:	e7fe      	b.n	8006fc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006fc6:	4b3e      	ldr	r3, [pc, #248]	; (80070c0 <xPortStartScheduler+0x120>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a3f      	ldr	r2, [pc, #252]	; (80070c8 <xPortStartScheduler+0x128>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d10a      	bne.n	8006fe6 <xPortStartScheduler+0x46>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	60fb      	str	r3, [r7, #12]
}
 8006fe2:	bf00      	nop
 8006fe4:	e7fe      	b.n	8006fe4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006fe6:	4b39      	ldr	r3, [pc, #228]	; (80070cc <xPortStartScheduler+0x12c>)
 8006fe8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	22ff      	movs	r2, #255	; 0xff
 8006ff6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007000:	78fb      	ldrb	r3, [r7, #3]
 8007002:	b2db      	uxtb	r3, r3
 8007004:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007008:	b2da      	uxtb	r2, r3
 800700a:	4b31      	ldr	r3, [pc, #196]	; (80070d0 <xPortStartScheduler+0x130>)
 800700c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800700e:	4b31      	ldr	r3, [pc, #196]	; (80070d4 <xPortStartScheduler+0x134>)
 8007010:	2207      	movs	r2, #7
 8007012:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007014:	e009      	b.n	800702a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007016:	4b2f      	ldr	r3, [pc, #188]	; (80070d4 <xPortStartScheduler+0x134>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3b01      	subs	r3, #1
 800701c:	4a2d      	ldr	r2, [pc, #180]	; (80070d4 <xPortStartScheduler+0x134>)
 800701e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007020:	78fb      	ldrb	r3, [r7, #3]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	005b      	lsls	r3, r3, #1
 8007026:	b2db      	uxtb	r3, r3
 8007028:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800702a:	78fb      	ldrb	r3, [r7, #3]
 800702c:	b2db      	uxtb	r3, r3
 800702e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007032:	2b80      	cmp	r3, #128	; 0x80
 8007034:	d0ef      	beq.n	8007016 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007036:	4b27      	ldr	r3, [pc, #156]	; (80070d4 <xPortStartScheduler+0x134>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f1c3 0307 	rsb	r3, r3, #7
 800703e:	2b04      	cmp	r3, #4
 8007040:	d00a      	beq.n	8007058 <xPortStartScheduler+0xb8>
	__asm volatile
 8007042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007046:	f383 8811 	msr	BASEPRI, r3
 800704a:	f3bf 8f6f 	isb	sy
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	60bb      	str	r3, [r7, #8]
}
 8007054:	bf00      	nop
 8007056:	e7fe      	b.n	8007056 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007058:	4b1e      	ldr	r3, [pc, #120]	; (80070d4 <xPortStartScheduler+0x134>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	021b      	lsls	r3, r3, #8
 800705e:	4a1d      	ldr	r2, [pc, #116]	; (80070d4 <xPortStartScheduler+0x134>)
 8007060:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007062:	4b1c      	ldr	r3, [pc, #112]	; (80070d4 <xPortStartScheduler+0x134>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800706a:	4a1a      	ldr	r2, [pc, #104]	; (80070d4 <xPortStartScheduler+0x134>)
 800706c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	b2da      	uxtb	r2, r3
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007076:	4b18      	ldr	r3, [pc, #96]	; (80070d8 <xPortStartScheduler+0x138>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a17      	ldr	r2, [pc, #92]	; (80070d8 <xPortStartScheduler+0x138>)
 800707c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007080:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007082:	4b15      	ldr	r3, [pc, #84]	; (80070d8 <xPortStartScheduler+0x138>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a14      	ldr	r2, [pc, #80]	; (80070d8 <xPortStartScheduler+0x138>)
 8007088:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800708c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800708e:	f000 f9a9 	bl	80073e4 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007092:	4b12      	ldr	r3, [pc, #72]	; (80070dc <xPortStartScheduler+0x13c>)
 8007094:	2200      	movs	r2, #0
 8007096:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007098:	f000 f9e0 	bl	800745c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800709c:	4b10      	ldr	r3, [pc, #64]	; (80070e0 <xPortStartScheduler+0x140>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a0f      	ldr	r2, [pc, #60]	; (80070e0 <xPortStartScheduler+0x140>)
 80070a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80070a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070a8:	f7ff ff66 	bl	8006f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070ac:	f7fe ffe0 	bl	8006070 <vTaskSwitchContext>
	prvTaskExitError();
 80070b0:	f7ff ff1e 	bl	8006ef0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	e000ed00 	.word	0xe000ed00
 80070c4:	410fc271 	.word	0x410fc271
 80070c8:	410fc270 	.word	0x410fc270
 80070cc:	e000e400 	.word	0xe000e400
 80070d0:	20000e4c 	.word	0x20000e4c
 80070d4:	20000e50 	.word	0x20000e50
 80070d8:	e000ed20 	.word	0xe000ed20
 80070dc:	2000000c 	.word	0x2000000c
 80070e0:	e000ef34 	.word	0xe000ef34

080070e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
	__asm volatile
 80070ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ee:	f383 8811 	msr	BASEPRI, r3
 80070f2:	f3bf 8f6f 	isb	sy
 80070f6:	f3bf 8f4f 	dsb	sy
 80070fa:	607b      	str	r3, [r7, #4]
}
 80070fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070fe:	4b0f      	ldr	r3, [pc, #60]	; (800713c <vPortEnterCritical+0x58>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3301      	adds	r3, #1
 8007104:	4a0d      	ldr	r2, [pc, #52]	; (800713c <vPortEnterCritical+0x58>)
 8007106:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007108:	4b0c      	ldr	r3, [pc, #48]	; (800713c <vPortEnterCritical+0x58>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d10f      	bne.n	8007130 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007110:	4b0b      	ldr	r3, [pc, #44]	; (8007140 <vPortEnterCritical+0x5c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <vPortEnterCritical+0x4c>
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	603b      	str	r3, [r7, #0]
}
 800712c:	bf00      	nop
 800712e:	e7fe      	b.n	800712e <vPortEnterCritical+0x4a>
	}
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr
 800713c:	2000000c 	.word	0x2000000c
 8007140:	e000ed04 	.word	0xe000ed04

08007144 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800714a:	4b12      	ldr	r3, [pc, #72]	; (8007194 <vPortExitCritical+0x50>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d10a      	bne.n	8007168 <vPortExitCritical+0x24>
	__asm volatile
 8007152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	607b      	str	r3, [r7, #4]
}
 8007164:	bf00      	nop
 8007166:	e7fe      	b.n	8007166 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007168:	4b0a      	ldr	r3, [pc, #40]	; (8007194 <vPortExitCritical+0x50>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3b01      	subs	r3, #1
 800716e:	4a09      	ldr	r2, [pc, #36]	; (8007194 <vPortExitCritical+0x50>)
 8007170:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007172:	4b08      	ldr	r3, [pc, #32]	; (8007194 <vPortExitCritical+0x50>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d105      	bne.n	8007186 <vPortExitCritical+0x42>
 800717a:	2300      	movs	r3, #0
 800717c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	f383 8811 	msr	BASEPRI, r3
}
 8007184:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007186:	bf00      	nop
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	2000000c 	.word	0x2000000c
	...

080071a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071a0:	f3ef 8009 	mrs	r0, PSP
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	4b15      	ldr	r3, [pc, #84]	; (8007200 <pxCurrentTCBConst>)
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	f01e 0f10 	tst.w	lr, #16
 80071b0:	bf08      	it	eq
 80071b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ba:	6010      	str	r0, [r2, #0]
 80071bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071c4:	f380 8811 	msr	BASEPRI, r0
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f7fe ff4e 	bl	8006070 <vTaskSwitchContext>
 80071d4:	f04f 0000 	mov.w	r0, #0
 80071d8:	f380 8811 	msr	BASEPRI, r0
 80071dc:	bc09      	pop	{r0, r3}
 80071de:	6819      	ldr	r1, [r3, #0]
 80071e0:	6808      	ldr	r0, [r1, #0]
 80071e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e6:	f01e 0f10 	tst.w	lr, #16
 80071ea:	bf08      	it	eq
 80071ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071f0:	f380 8809 	msr	PSP, r0
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	f3af 8000 	nop.w

08007200 <pxCurrentTCBConst>:
 8007200:	20000814 	.word	0x20000814
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop

08007208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	607b      	str	r3, [r7, #4]
}
 8007220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007222:	f7fe fe6b 	bl	8005efc <xTaskIncrementTick>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800722c:	4b06      	ldr	r3, [pc, #24]	; (8007248 <xPortSysTickHandler+0x40>)
 800722e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	2300      	movs	r3, #0
 8007236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	f383 8811 	msr	BASEPRI, r3
}
 800723e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007240:	bf00      	nop
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	e000ed04 	.word	0xe000ed04

0800724c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 800724c:	b580      	push	{r7, lr}
 800724e:	b088      	sub	sp, #32
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8007254:	4b5d      	ldr	r3, [pc, #372]	; (80073cc <vPortSuppressTicksAndSleep+0x180>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	429a      	cmp	r2, r3
 800725c:	d902      	bls.n	8007264 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 800725e:	4b5b      	ldr	r3, [pc, #364]	; (80073cc <vPortSuppressTicksAndSleep+0x180>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8007264:	4b5a      	ldr	r3, [pc, #360]	; (80073d0 <vPortSuppressTicksAndSleep+0x184>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a59      	ldr	r2, [pc, #356]	; (80073d0 <vPortSuppressTicksAndSleep+0x184>)
 800726a:	f023 0301 	bic.w	r3, r3, #1
 800726e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8007270:	4b58      	ldr	r3, [pc, #352]	; (80073d4 <vPortSuppressTicksAndSleep+0x188>)
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	3b01      	subs	r3, #1
 8007278:	4957      	ldr	r1, [pc, #348]	; (80073d8 <vPortSuppressTicksAndSleep+0x18c>)
 800727a:	6809      	ldr	r1, [r1, #0]
 800727c:	fb01 f303 	mul.w	r3, r1, r3
 8007280:	4413      	add	r3, r2
 8007282:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8007284:	4b55      	ldr	r3, [pc, #340]	; (80073dc <vPortSuppressTicksAndSleep+0x190>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	69fa      	ldr	r2, [r7, #28]
 800728a:	429a      	cmp	r2, r3
 800728c:	d904      	bls.n	8007298 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 800728e:	4b53      	ldr	r3, [pc, #332]	; (80073dc <vPortSuppressTicksAndSleep+0x190>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	69fa      	ldr	r2, [r7, #28]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8007298:	b672      	cpsid	i
		__asm volatile( "dsb" );
 800729a:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 800729e:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80072a2:	f7ff f8c3 	bl	800642c <eTaskConfirmSleepModeStatus>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d110      	bne.n	80072ce <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80072ac:	4b49      	ldr	r3, [pc, #292]	; (80073d4 <vPortSuppressTicksAndSleep+0x188>)
 80072ae:	4a4c      	ldr	r2, [pc, #304]	; (80073e0 <vPortSuppressTicksAndSleep+0x194>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80072b4:	4b46      	ldr	r3, [pc, #280]	; (80073d0 <vPortSuppressTicksAndSleep+0x184>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a45      	ldr	r2, [pc, #276]	; (80073d0 <vPortSuppressTicksAndSleep+0x184>)
 80072ba:	f043 0301 	orr.w	r3, r3, #1
 80072be:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80072c0:	4b45      	ldr	r3, [pc, #276]	; (80073d8 <vPortSuppressTicksAndSleep+0x18c>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a46      	ldr	r2, [pc, #280]	; (80073e0 <vPortSuppressTicksAndSleep+0x194>)
 80072c6:	3b01      	subs	r3, #1
 80072c8:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 80072ca:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrupts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 80072cc:	e079      	b.n	80073c2 <vPortSuppressTicksAndSleep+0x176>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 80072ce:	4a44      	ldr	r2, [pc, #272]	; (80073e0 <vPortSuppressTicksAndSleep+0x194>)
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072d4:	4b3f      	ldr	r3, [pc, #252]	; (80073d4 <vPortSuppressTicksAndSleep+0x188>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80072da:	4b3d      	ldr	r3, [pc, #244]	; (80073d0 <vPortSuppressTicksAndSleep+0x184>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a3c      	ldr	r2, [pc, #240]	; (80073d0 <vPortSuppressTicksAndSleep+0x184>)
 80072e0:	f043 0301 	orr.w	r3, r3, #1
 80072e4:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	613b      	str	r3, [r7, #16]
			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 80072ea:	2300      	movs	r3, #0
 80072ec:	613b      	str	r3, [r7, #16]
 80072ee:	6938      	ldr	r0, [r7, #16]
 80072f0:	f7f9 f962 	bl	80005b8 <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d004      	beq.n	8007304 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 80072fa:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 80072fe:	bf30      	wfi
				__asm volatile( "isb" );
 8007300:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7f9 f961 	bl	80005cc <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 800730a:	b662      	cpsie	i
			__asm volatile( "dsb" );
 800730c:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8007310:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8007314:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8007316:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 800731a:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 800731e:	4b2c      	ldr	r3, [pc, #176]	; (80073d0 <vPortSuppressTicksAndSleep+0x184>)
 8007320:	2206      	movs	r2, #6
 8007322:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8007324:	4b2a      	ldr	r3, [pc, #168]	; (80073d0 <vPortSuppressTicksAndSleep+0x184>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d01d      	beq.n	800736c <vPortSuppressTicksAndSleep+0x120>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8007330:	4b29      	ldr	r3, [pc, #164]	; (80073d8 <vPortSuppressTicksAndSleep+0x18c>)
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	4b27      	ldr	r3, [pc, #156]	; (80073d4 <vPortSuppressTicksAndSleep+0x188>)
 8007336:	6819      	ldr	r1, [r3, #0]
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	1acb      	subs	r3, r1, r3
 800733c:	4413      	add	r3, r2
 800733e:	3b01      	subs	r3, #1
 8007340:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8007342:	4b26      	ldr	r3, [pc, #152]	; (80073dc <vPortSuppressTicksAndSleep+0x190>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	429a      	cmp	r2, r3
 800734a:	d304      	bcc.n	8007356 <vPortSuppressTicksAndSleep+0x10a>
 800734c:	4b22      	ldr	r3, [pc, #136]	; (80073d8 <vPortSuppressTicksAndSleep+0x18c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	429a      	cmp	r2, r3
 8007354:	d903      	bls.n	800735e <vPortSuppressTicksAndSleep+0x112>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8007356:	4b20      	ldr	r3, [pc, #128]	; (80073d8 <vPortSuppressTicksAndSleep+0x18c>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	3b01      	subs	r3, #1
 800735c:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 800735e:	4a20      	ldr	r2, [pc, #128]	; (80073e0 <vPortSuppressTicksAndSleep+0x194>)
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3b01      	subs	r3, #1
 8007368:	61bb      	str	r3, [r7, #24]
 800736a:	e018      	b.n	800739e <vPortSuppressTicksAndSleep+0x152>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 800736c:	4b1a      	ldr	r3, [pc, #104]	; (80073d8 <vPortSuppressTicksAndSleep+0x18c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	fb02 f203 	mul.w	r2, r2, r3
 8007376:	4b17      	ldr	r3, [pc, #92]	; (80073d4 <vPortSuppressTicksAndSleep+0x188>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	60fb      	str	r3, [r7, #12]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 800737e:	4b16      	ldr	r3, [pc, #88]	; (80073d8 <vPortSuppressTicksAndSleep+0x18c>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	fbb2 f3f3 	udiv	r3, r2, r3
 8007388:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	3301      	adds	r3, #1
 800738e:	4a12      	ldr	r2, [pc, #72]	; (80073d8 <vPortSuppressTicksAndSleep+0x18c>)
 8007390:	6812      	ldr	r2, [r2, #0]
 8007392:	fb02 f203 	mul.w	r2, r2, r3
 8007396:	4912      	ldr	r1, [pc, #72]	; (80073e0 <vPortSuppressTicksAndSleep+0x194>)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800739e:	4b0d      	ldr	r3, [pc, #52]	; (80073d4 <vPortSuppressTicksAndSleep+0x188>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 80073a4:	4b0a      	ldr	r3, [pc, #40]	; (80073d0 <vPortSuppressTicksAndSleep+0x184>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a09      	ldr	r2, [pc, #36]	; (80073d0 <vPortSuppressTicksAndSleep+0x184>)
 80073aa:	f043 0301 	orr.w	r3, r3, #1
 80073ae:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 80073b0:	69b8      	ldr	r0, [r7, #24]
 80073b2:	f7fe fd7b 	bl	8005eac <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 80073b6:	4b08      	ldr	r3, [pc, #32]	; (80073d8 <vPortSuppressTicksAndSleep+0x18c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a09      	ldr	r2, [pc, #36]	; (80073e0 <vPortSuppressTicksAndSleep+0x194>)
 80073bc:	3b01      	subs	r3, #1
 80073be:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 80073c0:	b662      	cpsie	i
	}
 80073c2:	bf00      	nop
 80073c4:	3720      	adds	r7, #32
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20000e44 	.word	0x20000e44
 80073d0:	e000e010 	.word	0xe000e010
 80073d4:	e000e018 	.word	0xe000e018
 80073d8:	20000e40 	.word	0x20000e40
 80073dc:	20000e48 	.word	0x20000e48
 80073e0:	e000e014 	.word	0xe000e014

080073e4 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 80073e8:	4b14      	ldr	r3, [pc, #80]	; (800743c <vPortSetupTimerInterrupt+0x58>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a14      	ldr	r2, [pc, #80]	; (8007440 <vPortSetupTimerInterrupt+0x5c>)
 80073ee:	fba2 2303 	umull	r2, r3, r2, r3
 80073f2:	099b      	lsrs	r3, r3, #6
 80073f4:	4a13      	ldr	r2, [pc, #76]	; (8007444 <vPortSetupTimerInterrupt+0x60>)
 80073f6:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 80073f8:	4b12      	ldr	r3, [pc, #72]	; (8007444 <vPortSetupTimerInterrupt+0x60>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8007400:	fbb2 f3f3 	udiv	r3, r2, r3
 8007404:	4a10      	ldr	r2, [pc, #64]	; (8007448 <vPortSetupTimerInterrupt+0x64>)
 8007406:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8007408:	4b10      	ldr	r3, [pc, #64]	; (800744c <vPortSetupTimerInterrupt+0x68>)
 800740a:	222d      	movs	r2, #45	; 0x2d
 800740c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800740e:	4b10      	ldr	r3, [pc, #64]	; (8007450 <vPortSetupTimerInterrupt+0x6c>)
 8007410:	2200      	movs	r2, #0
 8007412:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007414:	4b0f      	ldr	r3, [pc, #60]	; (8007454 <vPortSetupTimerInterrupt+0x70>)
 8007416:	2200      	movs	r2, #0
 8007418:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800741a:	4b08      	ldr	r3, [pc, #32]	; (800743c <vPortSetupTimerInterrupt+0x58>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a08      	ldr	r2, [pc, #32]	; (8007440 <vPortSetupTimerInterrupt+0x5c>)
 8007420:	fba2 2303 	umull	r2, r3, r2, r3
 8007424:	099b      	lsrs	r3, r3, #6
 8007426:	4a0c      	ldr	r2, [pc, #48]	; (8007458 <vPortSetupTimerInterrupt+0x74>)
 8007428:	3b01      	subs	r3, #1
 800742a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800742c:	4b08      	ldr	r3, [pc, #32]	; (8007450 <vPortSetupTimerInterrupt+0x6c>)
 800742e:	2207      	movs	r2, #7
 8007430:	601a      	str	r2, [r3, #0]
}
 8007432:	bf00      	nop
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	20000000 	.word	0x20000000
 8007440:	10624dd3 	.word	0x10624dd3
 8007444:	20000e40 	.word	0x20000e40
 8007448:	20000e44 	.word	0x20000e44
 800744c:	20000e48 	.word	0x20000e48
 8007450:	e000e010 	.word	0xe000e010
 8007454:	e000e018 	.word	0xe000e018
 8007458:	e000e014 	.word	0xe000e014

0800745c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800745c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800746c <vPortEnableVFP+0x10>
 8007460:	6801      	ldr	r1, [r0, #0]
 8007462:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007466:	6001      	str	r1, [r0, #0]
 8007468:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800746a:	bf00      	nop
 800746c:	e000ed88 	.word	0xe000ed88

08007470 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007476:	f3ef 8305 	mrs	r3, IPSR
 800747a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b0f      	cmp	r3, #15
 8007480:	d914      	bls.n	80074ac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007482:	4a17      	ldr	r2, [pc, #92]	; (80074e0 <vPortValidateInterruptPriority+0x70>)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4413      	add	r3, r2
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800748c:	4b15      	ldr	r3, [pc, #84]	; (80074e4 <vPortValidateInterruptPriority+0x74>)
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	7afa      	ldrb	r2, [r7, #11]
 8007492:	429a      	cmp	r2, r3
 8007494:	d20a      	bcs.n	80074ac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800749a:	f383 8811 	msr	BASEPRI, r3
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	607b      	str	r3, [r7, #4]
}
 80074a8:	bf00      	nop
 80074aa:	e7fe      	b.n	80074aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80074ac:	4b0e      	ldr	r3, [pc, #56]	; (80074e8 <vPortValidateInterruptPriority+0x78>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80074b4:	4b0d      	ldr	r3, [pc, #52]	; (80074ec <vPortValidateInterruptPriority+0x7c>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d90a      	bls.n	80074d2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	603b      	str	r3, [r7, #0]
}
 80074ce:	bf00      	nop
 80074d0:	e7fe      	b.n	80074d0 <vPortValidateInterruptPriority+0x60>
	}
 80074d2:	bf00      	nop
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	e000e3f0 	.word	0xe000e3f0
 80074e4:	20000e4c 	.word	0x20000e4c
 80074e8:	e000ed0c 	.word	0xe000ed0c
 80074ec:	20000e50 	.word	0x20000e50

080074f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08a      	sub	sp, #40	; 0x28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80074f8:	2300      	movs	r3, #0
 80074fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80074fc:	f7fe fbe2 	bl	8005cc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007500:	4b5b      	ldr	r3, [pc, #364]	; (8007670 <pvPortMalloc+0x180>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d101      	bne.n	800750c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007508:	f000 f920 	bl	800774c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800750c:	4b59      	ldr	r3, [pc, #356]	; (8007674 <pvPortMalloc+0x184>)
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4013      	ands	r3, r2
 8007514:	2b00      	cmp	r3, #0
 8007516:	f040 8093 	bne.w	8007640 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d01d      	beq.n	800755c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007520:	2208      	movs	r2, #8
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4413      	add	r3, r2
 8007526:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f003 0307 	and.w	r3, r3, #7
 800752e:	2b00      	cmp	r3, #0
 8007530:	d014      	beq.n	800755c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f023 0307 	bic.w	r3, r3, #7
 8007538:	3308      	adds	r3, #8
 800753a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f003 0307 	and.w	r3, r3, #7
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <pvPortMalloc+0x6c>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	617b      	str	r3, [r7, #20]
}
 8007558:	bf00      	nop
 800755a:	e7fe      	b.n	800755a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d06e      	beq.n	8007640 <pvPortMalloc+0x150>
 8007562:	4b45      	ldr	r3, [pc, #276]	; (8007678 <pvPortMalloc+0x188>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	429a      	cmp	r2, r3
 800756a:	d869      	bhi.n	8007640 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800756c:	4b43      	ldr	r3, [pc, #268]	; (800767c <pvPortMalloc+0x18c>)
 800756e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007570:	4b42      	ldr	r3, [pc, #264]	; (800767c <pvPortMalloc+0x18c>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007576:	e004      	b.n	8007582 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	429a      	cmp	r2, r3
 800758a:	d903      	bls.n	8007594 <pvPortMalloc+0xa4>
 800758c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1f1      	bne.n	8007578 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007594:	4b36      	ldr	r3, [pc, #216]	; (8007670 <pvPortMalloc+0x180>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800759a:	429a      	cmp	r2, r3
 800759c:	d050      	beq.n	8007640 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800759e:	6a3b      	ldr	r3, [r7, #32]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2208      	movs	r2, #8
 80075a4:	4413      	add	r3, r2
 80075a6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b2:	685a      	ldr	r2, [r3, #4]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	1ad2      	subs	r2, r2, r3
 80075b8:	2308      	movs	r3, #8
 80075ba:	005b      	lsls	r3, r3, #1
 80075bc:	429a      	cmp	r2, r3
 80075be:	d91f      	bls.n	8007600 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4413      	add	r3, r2
 80075c6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	f003 0307 	and.w	r3, r3, #7
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00a      	beq.n	80075e8 <pvPortMalloc+0xf8>
	__asm volatile
 80075d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	613b      	str	r3, [r7, #16]
}
 80075e4:	bf00      	nop
 80075e6:	e7fe      	b.n	80075e6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ea:	685a      	ldr	r2, [r3, #4]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	1ad2      	subs	r2, r2, r3
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075fa:	69b8      	ldr	r0, [r7, #24]
 80075fc:	f000 f908 	bl	8007810 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007600:	4b1d      	ldr	r3, [pc, #116]	; (8007678 <pvPortMalloc+0x188>)
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	4a1b      	ldr	r2, [pc, #108]	; (8007678 <pvPortMalloc+0x188>)
 800760c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800760e:	4b1a      	ldr	r3, [pc, #104]	; (8007678 <pvPortMalloc+0x188>)
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	4b1b      	ldr	r3, [pc, #108]	; (8007680 <pvPortMalloc+0x190>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	429a      	cmp	r2, r3
 8007618:	d203      	bcs.n	8007622 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800761a:	4b17      	ldr	r3, [pc, #92]	; (8007678 <pvPortMalloc+0x188>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a18      	ldr	r2, [pc, #96]	; (8007680 <pvPortMalloc+0x190>)
 8007620:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	4b13      	ldr	r3, [pc, #76]	; (8007674 <pvPortMalloc+0x184>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	431a      	orrs	r2, r3
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007636:	4b13      	ldr	r3, [pc, #76]	; (8007684 <pvPortMalloc+0x194>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	3301      	adds	r3, #1
 800763c:	4a11      	ldr	r2, [pc, #68]	; (8007684 <pvPortMalloc+0x194>)
 800763e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007640:	f7fe fb86 	bl	8005d50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	f003 0307 	and.w	r3, r3, #7
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00a      	beq.n	8007664 <pvPortMalloc+0x174>
	__asm volatile
 800764e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007652:	f383 8811 	msr	BASEPRI, r3
 8007656:	f3bf 8f6f 	isb	sy
 800765a:	f3bf 8f4f 	dsb	sy
 800765e:	60fb      	str	r3, [r7, #12]
}
 8007660:	bf00      	nop
 8007662:	e7fe      	b.n	8007662 <pvPortMalloc+0x172>
	return pvReturn;
 8007664:	69fb      	ldr	r3, [r7, #28]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3728      	adds	r7, #40	; 0x28
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20004a5c 	.word	0x20004a5c
 8007674:	20004a70 	.word	0x20004a70
 8007678:	20004a60 	.word	0x20004a60
 800767c:	20004a54 	.word	0x20004a54
 8007680:	20004a64 	.word	0x20004a64
 8007684:	20004a68 	.word	0x20004a68

08007688 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b086      	sub	sp, #24
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d04d      	beq.n	8007736 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800769a:	2308      	movs	r3, #8
 800769c:	425b      	negs	r3, r3
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	4413      	add	r3, r2
 80076a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	4b24      	ldr	r3, [pc, #144]	; (8007740 <vPortFree+0xb8>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4013      	ands	r3, r2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d10a      	bne.n	80076cc <vPortFree+0x44>
	__asm volatile
 80076b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	60fb      	str	r3, [r7, #12]
}
 80076c8:	bf00      	nop
 80076ca:	e7fe      	b.n	80076ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00a      	beq.n	80076ea <vPortFree+0x62>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	60bb      	str	r3, [r7, #8]
}
 80076e6:	bf00      	nop
 80076e8:	e7fe      	b.n	80076e8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	4b14      	ldr	r3, [pc, #80]	; (8007740 <vPortFree+0xb8>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4013      	ands	r3, r2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d01e      	beq.n	8007736 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d11a      	bne.n	8007736 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	685a      	ldr	r2, [r3, #4]
 8007704:	4b0e      	ldr	r3, [pc, #56]	; (8007740 <vPortFree+0xb8>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	43db      	mvns	r3, r3
 800770a:	401a      	ands	r2, r3
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007710:	f7fe fad8 	bl	8005cc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	4b0a      	ldr	r3, [pc, #40]	; (8007744 <vPortFree+0xbc>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4413      	add	r3, r2
 800771e:	4a09      	ldr	r2, [pc, #36]	; (8007744 <vPortFree+0xbc>)
 8007720:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007722:	6938      	ldr	r0, [r7, #16]
 8007724:	f000 f874 	bl	8007810 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007728:	4b07      	ldr	r3, [pc, #28]	; (8007748 <vPortFree+0xc0>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	3301      	adds	r3, #1
 800772e:	4a06      	ldr	r2, [pc, #24]	; (8007748 <vPortFree+0xc0>)
 8007730:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007732:	f7fe fb0d 	bl	8005d50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007736:	bf00      	nop
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20004a70 	.word	0x20004a70
 8007744:	20004a60 	.word	0x20004a60
 8007748:	20004a6c 	.word	0x20004a6c

0800774c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007752:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007756:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007758:	4b27      	ldr	r3, [pc, #156]	; (80077f8 <prvHeapInit+0xac>)
 800775a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f003 0307 	and.w	r3, r3, #7
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00c      	beq.n	8007780 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3307      	adds	r3, #7
 800776a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f023 0307 	bic.w	r3, r3, #7
 8007772:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	4a1f      	ldr	r2, [pc, #124]	; (80077f8 <prvHeapInit+0xac>)
 800777c:	4413      	add	r3, r2
 800777e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007784:	4a1d      	ldr	r2, [pc, #116]	; (80077fc <prvHeapInit+0xb0>)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800778a:	4b1c      	ldr	r3, [pc, #112]	; (80077fc <prvHeapInit+0xb0>)
 800778c:	2200      	movs	r2, #0
 800778e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	4413      	add	r3, r2
 8007796:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007798:	2208      	movs	r2, #8
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	1a9b      	subs	r3, r3, r2
 800779e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f023 0307 	bic.w	r3, r3, #7
 80077a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4a15      	ldr	r2, [pc, #84]	; (8007800 <prvHeapInit+0xb4>)
 80077ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80077ae:	4b14      	ldr	r3, [pc, #80]	; (8007800 <prvHeapInit+0xb4>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	2200      	movs	r2, #0
 80077b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077b6:	4b12      	ldr	r3, [pc, #72]	; (8007800 <prvHeapInit+0xb4>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2200      	movs	r2, #0
 80077bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	1ad2      	subs	r2, r2, r3
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077cc:	4b0c      	ldr	r3, [pc, #48]	; (8007800 <prvHeapInit+0xb4>)
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	4a0a      	ldr	r2, [pc, #40]	; (8007804 <prvHeapInit+0xb8>)
 80077da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	4a09      	ldr	r2, [pc, #36]	; (8007808 <prvHeapInit+0xbc>)
 80077e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077e4:	4b09      	ldr	r3, [pc, #36]	; (800780c <prvHeapInit+0xc0>)
 80077e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80077ea:	601a      	str	r2, [r3, #0]
}
 80077ec:	bf00      	nop
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	20000e54 	.word	0x20000e54
 80077fc:	20004a54 	.word	0x20004a54
 8007800:	20004a5c 	.word	0x20004a5c
 8007804:	20004a64 	.word	0x20004a64
 8007808:	20004a60 	.word	0x20004a60
 800780c:	20004a70 	.word	0x20004a70

08007810 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007810:	b480      	push	{r7}
 8007812:	b085      	sub	sp, #20
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007818:	4b28      	ldr	r3, [pc, #160]	; (80078bc <prvInsertBlockIntoFreeList+0xac>)
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	e002      	b.n	8007824 <prvInsertBlockIntoFreeList+0x14>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	429a      	cmp	r2, r3
 800782c:	d8f7      	bhi.n	800781e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	4413      	add	r3, r2
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	429a      	cmp	r2, r3
 800783e:	d108      	bne.n	8007852 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	685a      	ldr	r2, [r3, #4]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	441a      	add	r2, r3
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	441a      	add	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	429a      	cmp	r2, r3
 8007864:	d118      	bne.n	8007898 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	4b15      	ldr	r3, [pc, #84]	; (80078c0 <prvInsertBlockIntoFreeList+0xb0>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	429a      	cmp	r2, r3
 8007870:	d00d      	beq.n	800788e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685a      	ldr	r2, [r3, #4]
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	441a      	add	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	601a      	str	r2, [r3, #0]
 800788c:	e008      	b.n	80078a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800788e:	4b0c      	ldr	r3, [pc, #48]	; (80078c0 <prvInsertBlockIntoFreeList+0xb0>)
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	e003      	b.n	80078a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d002      	beq.n	80078ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078ae:	bf00      	nop
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	20004a54 	.word	0x20004a54
 80078c0:	20004a5c 	.word	0x20004a5c

080078c4 <__errno>:
 80078c4:	4b01      	ldr	r3, [pc, #4]	; (80078cc <__errno+0x8>)
 80078c6:	6818      	ldr	r0, [r3, #0]
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	20000010 	.word	0x20000010

080078d0 <__libc_init_array>:
 80078d0:	b570      	push	{r4, r5, r6, lr}
 80078d2:	4d0d      	ldr	r5, [pc, #52]	; (8007908 <__libc_init_array+0x38>)
 80078d4:	4c0d      	ldr	r4, [pc, #52]	; (800790c <__libc_init_array+0x3c>)
 80078d6:	1b64      	subs	r4, r4, r5
 80078d8:	10a4      	asrs	r4, r4, #2
 80078da:	2600      	movs	r6, #0
 80078dc:	42a6      	cmp	r6, r4
 80078de:	d109      	bne.n	80078f4 <__libc_init_array+0x24>
 80078e0:	4d0b      	ldr	r5, [pc, #44]	; (8007910 <__libc_init_array+0x40>)
 80078e2:	4c0c      	ldr	r4, [pc, #48]	; (8007914 <__libc_init_array+0x44>)
 80078e4:	f000 fcb8 	bl	8008258 <_init>
 80078e8:	1b64      	subs	r4, r4, r5
 80078ea:	10a4      	asrs	r4, r4, #2
 80078ec:	2600      	movs	r6, #0
 80078ee:	42a6      	cmp	r6, r4
 80078f0:	d105      	bne.n	80078fe <__libc_init_array+0x2e>
 80078f2:	bd70      	pop	{r4, r5, r6, pc}
 80078f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80078f8:	4798      	blx	r3
 80078fa:	3601      	adds	r6, #1
 80078fc:	e7ee      	b.n	80078dc <__libc_init_array+0xc>
 80078fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007902:	4798      	blx	r3
 8007904:	3601      	adds	r6, #1
 8007906:	e7f2      	b.n	80078ee <__libc_init_array+0x1e>
 8007908:	08008498 	.word	0x08008498
 800790c:	08008498 	.word	0x08008498
 8007910:	08008498 	.word	0x08008498
 8007914:	0800849c 	.word	0x0800849c

08007918 <__retarget_lock_acquire_recursive>:
 8007918:	4770      	bx	lr

0800791a <__retarget_lock_release_recursive>:
 800791a:	4770      	bx	lr

0800791c <memcpy>:
 800791c:	440a      	add	r2, r1
 800791e:	4291      	cmp	r1, r2
 8007920:	f100 33ff 	add.w	r3, r0, #4294967295
 8007924:	d100      	bne.n	8007928 <memcpy+0xc>
 8007926:	4770      	bx	lr
 8007928:	b510      	push	{r4, lr}
 800792a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800792e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007932:	4291      	cmp	r1, r2
 8007934:	d1f9      	bne.n	800792a <memcpy+0xe>
 8007936:	bd10      	pop	{r4, pc}

08007938 <memset>:
 8007938:	4402      	add	r2, r0
 800793a:	4603      	mov	r3, r0
 800793c:	4293      	cmp	r3, r2
 800793e:	d100      	bne.n	8007942 <memset+0xa>
 8007940:	4770      	bx	lr
 8007942:	f803 1b01 	strb.w	r1, [r3], #1
 8007946:	e7f9      	b.n	800793c <memset+0x4>

08007948 <_malloc_r>:
 8007948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794a:	1ccd      	adds	r5, r1, #3
 800794c:	f025 0503 	bic.w	r5, r5, #3
 8007950:	3508      	adds	r5, #8
 8007952:	2d0c      	cmp	r5, #12
 8007954:	bf38      	it	cc
 8007956:	250c      	movcc	r5, #12
 8007958:	2d00      	cmp	r5, #0
 800795a:	4606      	mov	r6, r0
 800795c:	db01      	blt.n	8007962 <_malloc_r+0x1a>
 800795e:	42a9      	cmp	r1, r5
 8007960:	d903      	bls.n	800796a <_malloc_r+0x22>
 8007962:	230c      	movs	r3, #12
 8007964:	6033      	str	r3, [r6, #0]
 8007966:	2000      	movs	r0, #0
 8007968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800796a:	f000 f8e1 	bl	8007b30 <__malloc_lock>
 800796e:	4921      	ldr	r1, [pc, #132]	; (80079f4 <_malloc_r+0xac>)
 8007970:	680a      	ldr	r2, [r1, #0]
 8007972:	4614      	mov	r4, r2
 8007974:	b99c      	cbnz	r4, 800799e <_malloc_r+0x56>
 8007976:	4f20      	ldr	r7, [pc, #128]	; (80079f8 <_malloc_r+0xb0>)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	b923      	cbnz	r3, 8007986 <_malloc_r+0x3e>
 800797c:	4621      	mov	r1, r4
 800797e:	4630      	mov	r0, r6
 8007980:	f000 f8a6 	bl	8007ad0 <_sbrk_r>
 8007984:	6038      	str	r0, [r7, #0]
 8007986:	4629      	mov	r1, r5
 8007988:	4630      	mov	r0, r6
 800798a:	f000 f8a1 	bl	8007ad0 <_sbrk_r>
 800798e:	1c43      	adds	r3, r0, #1
 8007990:	d123      	bne.n	80079da <_malloc_r+0x92>
 8007992:	230c      	movs	r3, #12
 8007994:	6033      	str	r3, [r6, #0]
 8007996:	4630      	mov	r0, r6
 8007998:	f000 f8d0 	bl	8007b3c <__malloc_unlock>
 800799c:	e7e3      	b.n	8007966 <_malloc_r+0x1e>
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	1b5b      	subs	r3, r3, r5
 80079a2:	d417      	bmi.n	80079d4 <_malloc_r+0x8c>
 80079a4:	2b0b      	cmp	r3, #11
 80079a6:	d903      	bls.n	80079b0 <_malloc_r+0x68>
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	441c      	add	r4, r3
 80079ac:	6025      	str	r5, [r4, #0]
 80079ae:	e004      	b.n	80079ba <_malloc_r+0x72>
 80079b0:	6863      	ldr	r3, [r4, #4]
 80079b2:	42a2      	cmp	r2, r4
 80079b4:	bf0c      	ite	eq
 80079b6:	600b      	streq	r3, [r1, #0]
 80079b8:	6053      	strne	r3, [r2, #4]
 80079ba:	4630      	mov	r0, r6
 80079bc:	f000 f8be 	bl	8007b3c <__malloc_unlock>
 80079c0:	f104 000b 	add.w	r0, r4, #11
 80079c4:	1d23      	adds	r3, r4, #4
 80079c6:	f020 0007 	bic.w	r0, r0, #7
 80079ca:	1ac2      	subs	r2, r0, r3
 80079cc:	d0cc      	beq.n	8007968 <_malloc_r+0x20>
 80079ce:	1a1b      	subs	r3, r3, r0
 80079d0:	50a3      	str	r3, [r4, r2]
 80079d2:	e7c9      	b.n	8007968 <_malloc_r+0x20>
 80079d4:	4622      	mov	r2, r4
 80079d6:	6864      	ldr	r4, [r4, #4]
 80079d8:	e7cc      	b.n	8007974 <_malloc_r+0x2c>
 80079da:	1cc4      	adds	r4, r0, #3
 80079dc:	f024 0403 	bic.w	r4, r4, #3
 80079e0:	42a0      	cmp	r0, r4
 80079e2:	d0e3      	beq.n	80079ac <_malloc_r+0x64>
 80079e4:	1a21      	subs	r1, r4, r0
 80079e6:	4630      	mov	r0, r6
 80079e8:	f000 f872 	bl	8007ad0 <_sbrk_r>
 80079ec:	3001      	adds	r0, #1
 80079ee:	d1dd      	bne.n	80079ac <_malloc_r+0x64>
 80079f0:	e7cf      	b.n	8007992 <_malloc_r+0x4a>
 80079f2:	bf00      	nop
 80079f4:	20004a74 	.word	0x20004a74
 80079f8:	20004a78 	.word	0x20004a78

080079fc <cleanup_glue>:
 80079fc:	b538      	push	{r3, r4, r5, lr}
 80079fe:	460c      	mov	r4, r1
 8007a00:	6809      	ldr	r1, [r1, #0]
 8007a02:	4605      	mov	r5, r0
 8007a04:	b109      	cbz	r1, 8007a0a <cleanup_glue+0xe>
 8007a06:	f7ff fff9 	bl	80079fc <cleanup_glue>
 8007a0a:	4621      	mov	r1, r4
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a12:	f000 b899 	b.w	8007b48 <_free_r>
	...

08007a18 <_reclaim_reent>:
 8007a18:	4b2c      	ldr	r3, [pc, #176]	; (8007acc <_reclaim_reent+0xb4>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4283      	cmp	r3, r0
 8007a1e:	b570      	push	{r4, r5, r6, lr}
 8007a20:	4604      	mov	r4, r0
 8007a22:	d051      	beq.n	8007ac8 <_reclaim_reent+0xb0>
 8007a24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007a26:	b143      	cbz	r3, 8007a3a <_reclaim_reent+0x22>
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d14a      	bne.n	8007ac4 <_reclaim_reent+0xac>
 8007a2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a30:	6819      	ldr	r1, [r3, #0]
 8007a32:	b111      	cbz	r1, 8007a3a <_reclaim_reent+0x22>
 8007a34:	4620      	mov	r0, r4
 8007a36:	f000 f887 	bl	8007b48 <_free_r>
 8007a3a:	6961      	ldr	r1, [r4, #20]
 8007a3c:	b111      	cbz	r1, 8007a44 <_reclaim_reent+0x2c>
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f000 f882 	bl	8007b48 <_free_r>
 8007a44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007a46:	b111      	cbz	r1, 8007a4e <_reclaim_reent+0x36>
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f000 f87d 	bl	8007b48 <_free_r>
 8007a4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007a50:	b111      	cbz	r1, 8007a58 <_reclaim_reent+0x40>
 8007a52:	4620      	mov	r0, r4
 8007a54:	f000 f878 	bl	8007b48 <_free_r>
 8007a58:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007a5a:	b111      	cbz	r1, 8007a62 <_reclaim_reent+0x4a>
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f000 f873 	bl	8007b48 <_free_r>
 8007a62:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007a64:	b111      	cbz	r1, 8007a6c <_reclaim_reent+0x54>
 8007a66:	4620      	mov	r0, r4
 8007a68:	f000 f86e 	bl	8007b48 <_free_r>
 8007a6c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007a6e:	b111      	cbz	r1, 8007a76 <_reclaim_reent+0x5e>
 8007a70:	4620      	mov	r0, r4
 8007a72:	f000 f869 	bl	8007b48 <_free_r>
 8007a76:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007a78:	b111      	cbz	r1, 8007a80 <_reclaim_reent+0x68>
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f000 f864 	bl	8007b48 <_free_r>
 8007a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a82:	b111      	cbz	r1, 8007a8a <_reclaim_reent+0x72>
 8007a84:	4620      	mov	r0, r4
 8007a86:	f000 f85f 	bl	8007b48 <_free_r>
 8007a8a:	69a3      	ldr	r3, [r4, #24]
 8007a8c:	b1e3      	cbz	r3, 8007ac8 <_reclaim_reent+0xb0>
 8007a8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007a90:	4620      	mov	r0, r4
 8007a92:	4798      	blx	r3
 8007a94:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007a96:	b1b9      	cbz	r1, 8007ac8 <_reclaim_reent+0xb0>
 8007a98:	4620      	mov	r0, r4
 8007a9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007a9e:	f7ff bfad 	b.w	80079fc <cleanup_glue>
 8007aa2:	5949      	ldr	r1, [r1, r5]
 8007aa4:	b941      	cbnz	r1, 8007ab8 <_reclaim_reent+0xa0>
 8007aa6:	3504      	adds	r5, #4
 8007aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aaa:	2d80      	cmp	r5, #128	; 0x80
 8007aac:	68d9      	ldr	r1, [r3, #12]
 8007aae:	d1f8      	bne.n	8007aa2 <_reclaim_reent+0x8a>
 8007ab0:	4620      	mov	r0, r4
 8007ab2:	f000 f849 	bl	8007b48 <_free_r>
 8007ab6:	e7ba      	b.n	8007a2e <_reclaim_reent+0x16>
 8007ab8:	680e      	ldr	r6, [r1, #0]
 8007aba:	4620      	mov	r0, r4
 8007abc:	f000 f844 	bl	8007b48 <_free_r>
 8007ac0:	4631      	mov	r1, r6
 8007ac2:	e7ef      	b.n	8007aa4 <_reclaim_reent+0x8c>
 8007ac4:	2500      	movs	r5, #0
 8007ac6:	e7ef      	b.n	8007aa8 <_reclaim_reent+0x90>
 8007ac8:	bd70      	pop	{r4, r5, r6, pc}
 8007aca:	bf00      	nop
 8007acc:	20000010 	.word	0x20000010

08007ad0 <_sbrk_r>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	4d06      	ldr	r5, [pc, #24]	; (8007aec <_sbrk_r+0x1c>)
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	4604      	mov	r4, r0
 8007ad8:	4608      	mov	r0, r1
 8007ada:	602b      	str	r3, [r5, #0]
 8007adc:	f7f9 faf0 	bl	80010c0 <_sbrk>
 8007ae0:	1c43      	adds	r3, r0, #1
 8007ae2:	d102      	bne.n	8007aea <_sbrk_r+0x1a>
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	b103      	cbz	r3, 8007aea <_sbrk_r+0x1a>
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	bd38      	pop	{r3, r4, r5, pc}
 8007aec:	20004fb4 	.word	0x20004fb4

08007af0 <siprintf>:
 8007af0:	b40e      	push	{r1, r2, r3}
 8007af2:	b500      	push	{lr}
 8007af4:	b09c      	sub	sp, #112	; 0x70
 8007af6:	ab1d      	add	r3, sp, #116	; 0x74
 8007af8:	9002      	str	r0, [sp, #8]
 8007afa:	9006      	str	r0, [sp, #24]
 8007afc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b00:	4809      	ldr	r0, [pc, #36]	; (8007b28 <siprintf+0x38>)
 8007b02:	9107      	str	r1, [sp, #28]
 8007b04:	9104      	str	r1, [sp, #16]
 8007b06:	4909      	ldr	r1, [pc, #36]	; (8007b2c <siprintf+0x3c>)
 8007b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b0c:	9105      	str	r1, [sp, #20]
 8007b0e:	6800      	ldr	r0, [r0, #0]
 8007b10:	9301      	str	r3, [sp, #4]
 8007b12:	a902      	add	r1, sp, #8
 8007b14:	f000 f8c4 	bl	8007ca0 <_svfiprintf_r>
 8007b18:	9b02      	ldr	r3, [sp, #8]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	701a      	strb	r2, [r3, #0]
 8007b1e:	b01c      	add	sp, #112	; 0x70
 8007b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b24:	b003      	add	sp, #12
 8007b26:	4770      	bx	lr
 8007b28:	20000010 	.word	0x20000010
 8007b2c:	ffff0208 	.word	0xffff0208

08007b30 <__malloc_lock>:
 8007b30:	4801      	ldr	r0, [pc, #4]	; (8007b38 <__malloc_lock+0x8>)
 8007b32:	f7ff bef1 	b.w	8007918 <__retarget_lock_acquire_recursive>
 8007b36:	bf00      	nop
 8007b38:	20004fac 	.word	0x20004fac

08007b3c <__malloc_unlock>:
 8007b3c:	4801      	ldr	r0, [pc, #4]	; (8007b44 <__malloc_unlock+0x8>)
 8007b3e:	f7ff beec 	b.w	800791a <__retarget_lock_release_recursive>
 8007b42:	bf00      	nop
 8007b44:	20004fac 	.word	0x20004fac

08007b48 <_free_r>:
 8007b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b4a:	2900      	cmp	r1, #0
 8007b4c:	d048      	beq.n	8007be0 <_free_r+0x98>
 8007b4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b52:	9001      	str	r0, [sp, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f1a1 0404 	sub.w	r4, r1, #4
 8007b5a:	bfb8      	it	lt
 8007b5c:	18e4      	addlt	r4, r4, r3
 8007b5e:	f7ff ffe7 	bl	8007b30 <__malloc_lock>
 8007b62:	4a20      	ldr	r2, [pc, #128]	; (8007be4 <_free_r+0x9c>)
 8007b64:	9801      	ldr	r0, [sp, #4]
 8007b66:	6813      	ldr	r3, [r2, #0]
 8007b68:	4615      	mov	r5, r2
 8007b6a:	b933      	cbnz	r3, 8007b7a <_free_r+0x32>
 8007b6c:	6063      	str	r3, [r4, #4]
 8007b6e:	6014      	str	r4, [r2, #0]
 8007b70:	b003      	add	sp, #12
 8007b72:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b76:	f7ff bfe1 	b.w	8007b3c <__malloc_unlock>
 8007b7a:	42a3      	cmp	r3, r4
 8007b7c:	d90b      	bls.n	8007b96 <_free_r+0x4e>
 8007b7e:	6821      	ldr	r1, [r4, #0]
 8007b80:	1862      	adds	r2, r4, r1
 8007b82:	4293      	cmp	r3, r2
 8007b84:	bf04      	itt	eq
 8007b86:	681a      	ldreq	r2, [r3, #0]
 8007b88:	685b      	ldreq	r3, [r3, #4]
 8007b8a:	6063      	str	r3, [r4, #4]
 8007b8c:	bf04      	itt	eq
 8007b8e:	1852      	addeq	r2, r2, r1
 8007b90:	6022      	streq	r2, [r4, #0]
 8007b92:	602c      	str	r4, [r5, #0]
 8007b94:	e7ec      	b.n	8007b70 <_free_r+0x28>
 8007b96:	461a      	mov	r2, r3
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	b10b      	cbz	r3, 8007ba0 <_free_r+0x58>
 8007b9c:	42a3      	cmp	r3, r4
 8007b9e:	d9fa      	bls.n	8007b96 <_free_r+0x4e>
 8007ba0:	6811      	ldr	r1, [r2, #0]
 8007ba2:	1855      	adds	r5, r2, r1
 8007ba4:	42a5      	cmp	r5, r4
 8007ba6:	d10b      	bne.n	8007bc0 <_free_r+0x78>
 8007ba8:	6824      	ldr	r4, [r4, #0]
 8007baa:	4421      	add	r1, r4
 8007bac:	1854      	adds	r4, r2, r1
 8007bae:	42a3      	cmp	r3, r4
 8007bb0:	6011      	str	r1, [r2, #0]
 8007bb2:	d1dd      	bne.n	8007b70 <_free_r+0x28>
 8007bb4:	681c      	ldr	r4, [r3, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	6053      	str	r3, [r2, #4]
 8007bba:	4421      	add	r1, r4
 8007bbc:	6011      	str	r1, [r2, #0]
 8007bbe:	e7d7      	b.n	8007b70 <_free_r+0x28>
 8007bc0:	d902      	bls.n	8007bc8 <_free_r+0x80>
 8007bc2:	230c      	movs	r3, #12
 8007bc4:	6003      	str	r3, [r0, #0]
 8007bc6:	e7d3      	b.n	8007b70 <_free_r+0x28>
 8007bc8:	6825      	ldr	r5, [r4, #0]
 8007bca:	1961      	adds	r1, r4, r5
 8007bcc:	428b      	cmp	r3, r1
 8007bce:	bf04      	itt	eq
 8007bd0:	6819      	ldreq	r1, [r3, #0]
 8007bd2:	685b      	ldreq	r3, [r3, #4]
 8007bd4:	6063      	str	r3, [r4, #4]
 8007bd6:	bf04      	itt	eq
 8007bd8:	1949      	addeq	r1, r1, r5
 8007bda:	6021      	streq	r1, [r4, #0]
 8007bdc:	6054      	str	r4, [r2, #4]
 8007bde:	e7c7      	b.n	8007b70 <_free_r+0x28>
 8007be0:	b003      	add	sp, #12
 8007be2:	bd30      	pop	{r4, r5, pc}
 8007be4:	20004a74 	.word	0x20004a74

08007be8 <__ssputs_r>:
 8007be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bec:	688e      	ldr	r6, [r1, #8]
 8007bee:	429e      	cmp	r6, r3
 8007bf0:	4682      	mov	sl, r0
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	4690      	mov	r8, r2
 8007bf6:	461f      	mov	r7, r3
 8007bf8:	d838      	bhi.n	8007c6c <__ssputs_r+0x84>
 8007bfa:	898a      	ldrh	r2, [r1, #12]
 8007bfc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c00:	d032      	beq.n	8007c68 <__ssputs_r+0x80>
 8007c02:	6825      	ldr	r5, [r4, #0]
 8007c04:	6909      	ldr	r1, [r1, #16]
 8007c06:	eba5 0901 	sub.w	r9, r5, r1
 8007c0a:	6965      	ldr	r5, [r4, #20]
 8007c0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c10:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c14:	3301      	adds	r3, #1
 8007c16:	444b      	add	r3, r9
 8007c18:	106d      	asrs	r5, r5, #1
 8007c1a:	429d      	cmp	r5, r3
 8007c1c:	bf38      	it	cc
 8007c1e:	461d      	movcc	r5, r3
 8007c20:	0553      	lsls	r3, r2, #21
 8007c22:	d531      	bpl.n	8007c88 <__ssputs_r+0xa0>
 8007c24:	4629      	mov	r1, r5
 8007c26:	f7ff fe8f 	bl	8007948 <_malloc_r>
 8007c2a:	4606      	mov	r6, r0
 8007c2c:	b950      	cbnz	r0, 8007c44 <__ssputs_r+0x5c>
 8007c2e:	230c      	movs	r3, #12
 8007c30:	f8ca 3000 	str.w	r3, [sl]
 8007c34:	89a3      	ldrh	r3, [r4, #12]
 8007c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c3a:	81a3      	strh	r3, [r4, #12]
 8007c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c44:	6921      	ldr	r1, [r4, #16]
 8007c46:	464a      	mov	r2, r9
 8007c48:	f7ff fe68 	bl	800791c <memcpy>
 8007c4c:	89a3      	ldrh	r3, [r4, #12]
 8007c4e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c56:	81a3      	strh	r3, [r4, #12]
 8007c58:	6126      	str	r6, [r4, #16]
 8007c5a:	6165      	str	r5, [r4, #20]
 8007c5c:	444e      	add	r6, r9
 8007c5e:	eba5 0509 	sub.w	r5, r5, r9
 8007c62:	6026      	str	r6, [r4, #0]
 8007c64:	60a5      	str	r5, [r4, #8]
 8007c66:	463e      	mov	r6, r7
 8007c68:	42be      	cmp	r6, r7
 8007c6a:	d900      	bls.n	8007c6e <__ssputs_r+0x86>
 8007c6c:	463e      	mov	r6, r7
 8007c6e:	4632      	mov	r2, r6
 8007c70:	6820      	ldr	r0, [r4, #0]
 8007c72:	4641      	mov	r1, r8
 8007c74:	f000 faa8 	bl	80081c8 <memmove>
 8007c78:	68a3      	ldr	r3, [r4, #8]
 8007c7a:	6822      	ldr	r2, [r4, #0]
 8007c7c:	1b9b      	subs	r3, r3, r6
 8007c7e:	4432      	add	r2, r6
 8007c80:	60a3      	str	r3, [r4, #8]
 8007c82:	6022      	str	r2, [r4, #0]
 8007c84:	2000      	movs	r0, #0
 8007c86:	e7db      	b.n	8007c40 <__ssputs_r+0x58>
 8007c88:	462a      	mov	r2, r5
 8007c8a:	f000 fab7 	bl	80081fc <_realloc_r>
 8007c8e:	4606      	mov	r6, r0
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d1e1      	bne.n	8007c58 <__ssputs_r+0x70>
 8007c94:	6921      	ldr	r1, [r4, #16]
 8007c96:	4650      	mov	r0, sl
 8007c98:	f7ff ff56 	bl	8007b48 <_free_r>
 8007c9c:	e7c7      	b.n	8007c2e <__ssputs_r+0x46>
	...

08007ca0 <_svfiprintf_r>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	4698      	mov	r8, r3
 8007ca6:	898b      	ldrh	r3, [r1, #12]
 8007ca8:	061b      	lsls	r3, r3, #24
 8007caa:	b09d      	sub	sp, #116	; 0x74
 8007cac:	4607      	mov	r7, r0
 8007cae:	460d      	mov	r5, r1
 8007cb0:	4614      	mov	r4, r2
 8007cb2:	d50e      	bpl.n	8007cd2 <_svfiprintf_r+0x32>
 8007cb4:	690b      	ldr	r3, [r1, #16]
 8007cb6:	b963      	cbnz	r3, 8007cd2 <_svfiprintf_r+0x32>
 8007cb8:	2140      	movs	r1, #64	; 0x40
 8007cba:	f7ff fe45 	bl	8007948 <_malloc_r>
 8007cbe:	6028      	str	r0, [r5, #0]
 8007cc0:	6128      	str	r0, [r5, #16]
 8007cc2:	b920      	cbnz	r0, 8007cce <_svfiprintf_r+0x2e>
 8007cc4:	230c      	movs	r3, #12
 8007cc6:	603b      	str	r3, [r7, #0]
 8007cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ccc:	e0d1      	b.n	8007e72 <_svfiprintf_r+0x1d2>
 8007cce:	2340      	movs	r3, #64	; 0x40
 8007cd0:	616b      	str	r3, [r5, #20]
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd6:	2320      	movs	r3, #32
 8007cd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007cdc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ce0:	2330      	movs	r3, #48	; 0x30
 8007ce2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007e8c <_svfiprintf_r+0x1ec>
 8007ce6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cea:	f04f 0901 	mov.w	r9, #1
 8007cee:	4623      	mov	r3, r4
 8007cf0:	469a      	mov	sl, r3
 8007cf2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cf6:	b10a      	cbz	r2, 8007cfc <_svfiprintf_r+0x5c>
 8007cf8:	2a25      	cmp	r2, #37	; 0x25
 8007cfa:	d1f9      	bne.n	8007cf0 <_svfiprintf_r+0x50>
 8007cfc:	ebba 0b04 	subs.w	fp, sl, r4
 8007d00:	d00b      	beq.n	8007d1a <_svfiprintf_r+0x7a>
 8007d02:	465b      	mov	r3, fp
 8007d04:	4622      	mov	r2, r4
 8007d06:	4629      	mov	r1, r5
 8007d08:	4638      	mov	r0, r7
 8007d0a:	f7ff ff6d 	bl	8007be8 <__ssputs_r>
 8007d0e:	3001      	adds	r0, #1
 8007d10:	f000 80aa 	beq.w	8007e68 <_svfiprintf_r+0x1c8>
 8007d14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d16:	445a      	add	r2, fp
 8007d18:	9209      	str	r2, [sp, #36]	; 0x24
 8007d1a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f000 80a2 	beq.w	8007e68 <_svfiprintf_r+0x1c8>
 8007d24:	2300      	movs	r3, #0
 8007d26:	f04f 32ff 	mov.w	r2, #4294967295
 8007d2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d2e:	f10a 0a01 	add.w	sl, sl, #1
 8007d32:	9304      	str	r3, [sp, #16]
 8007d34:	9307      	str	r3, [sp, #28]
 8007d36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d3a:	931a      	str	r3, [sp, #104]	; 0x68
 8007d3c:	4654      	mov	r4, sl
 8007d3e:	2205      	movs	r2, #5
 8007d40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d44:	4851      	ldr	r0, [pc, #324]	; (8007e8c <_svfiprintf_r+0x1ec>)
 8007d46:	f7f8 fa6b 	bl	8000220 <memchr>
 8007d4a:	9a04      	ldr	r2, [sp, #16]
 8007d4c:	b9d8      	cbnz	r0, 8007d86 <_svfiprintf_r+0xe6>
 8007d4e:	06d0      	lsls	r0, r2, #27
 8007d50:	bf44      	itt	mi
 8007d52:	2320      	movmi	r3, #32
 8007d54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d58:	0711      	lsls	r1, r2, #28
 8007d5a:	bf44      	itt	mi
 8007d5c:	232b      	movmi	r3, #43	; 0x2b
 8007d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d62:	f89a 3000 	ldrb.w	r3, [sl]
 8007d66:	2b2a      	cmp	r3, #42	; 0x2a
 8007d68:	d015      	beq.n	8007d96 <_svfiprintf_r+0xf6>
 8007d6a:	9a07      	ldr	r2, [sp, #28]
 8007d6c:	4654      	mov	r4, sl
 8007d6e:	2000      	movs	r0, #0
 8007d70:	f04f 0c0a 	mov.w	ip, #10
 8007d74:	4621      	mov	r1, r4
 8007d76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d7a:	3b30      	subs	r3, #48	; 0x30
 8007d7c:	2b09      	cmp	r3, #9
 8007d7e:	d94e      	bls.n	8007e1e <_svfiprintf_r+0x17e>
 8007d80:	b1b0      	cbz	r0, 8007db0 <_svfiprintf_r+0x110>
 8007d82:	9207      	str	r2, [sp, #28]
 8007d84:	e014      	b.n	8007db0 <_svfiprintf_r+0x110>
 8007d86:	eba0 0308 	sub.w	r3, r0, r8
 8007d8a:	fa09 f303 	lsl.w	r3, r9, r3
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	9304      	str	r3, [sp, #16]
 8007d92:	46a2      	mov	sl, r4
 8007d94:	e7d2      	b.n	8007d3c <_svfiprintf_r+0x9c>
 8007d96:	9b03      	ldr	r3, [sp, #12]
 8007d98:	1d19      	adds	r1, r3, #4
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	9103      	str	r1, [sp, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	bfbb      	ittet	lt
 8007da2:	425b      	neglt	r3, r3
 8007da4:	f042 0202 	orrlt.w	r2, r2, #2
 8007da8:	9307      	strge	r3, [sp, #28]
 8007daa:	9307      	strlt	r3, [sp, #28]
 8007dac:	bfb8      	it	lt
 8007dae:	9204      	strlt	r2, [sp, #16]
 8007db0:	7823      	ldrb	r3, [r4, #0]
 8007db2:	2b2e      	cmp	r3, #46	; 0x2e
 8007db4:	d10c      	bne.n	8007dd0 <_svfiprintf_r+0x130>
 8007db6:	7863      	ldrb	r3, [r4, #1]
 8007db8:	2b2a      	cmp	r3, #42	; 0x2a
 8007dba:	d135      	bne.n	8007e28 <_svfiprintf_r+0x188>
 8007dbc:	9b03      	ldr	r3, [sp, #12]
 8007dbe:	1d1a      	adds	r2, r3, #4
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	9203      	str	r2, [sp, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	bfb8      	it	lt
 8007dc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007dcc:	3402      	adds	r4, #2
 8007dce:	9305      	str	r3, [sp, #20]
 8007dd0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e9c <_svfiprintf_r+0x1fc>
 8007dd4:	7821      	ldrb	r1, [r4, #0]
 8007dd6:	2203      	movs	r2, #3
 8007dd8:	4650      	mov	r0, sl
 8007dda:	f7f8 fa21 	bl	8000220 <memchr>
 8007dde:	b140      	cbz	r0, 8007df2 <_svfiprintf_r+0x152>
 8007de0:	2340      	movs	r3, #64	; 0x40
 8007de2:	eba0 000a 	sub.w	r0, r0, sl
 8007de6:	fa03 f000 	lsl.w	r0, r3, r0
 8007dea:	9b04      	ldr	r3, [sp, #16]
 8007dec:	4303      	orrs	r3, r0
 8007dee:	3401      	adds	r4, #1
 8007df0:	9304      	str	r3, [sp, #16]
 8007df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df6:	4826      	ldr	r0, [pc, #152]	; (8007e90 <_svfiprintf_r+0x1f0>)
 8007df8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dfc:	2206      	movs	r2, #6
 8007dfe:	f7f8 fa0f 	bl	8000220 <memchr>
 8007e02:	2800      	cmp	r0, #0
 8007e04:	d038      	beq.n	8007e78 <_svfiprintf_r+0x1d8>
 8007e06:	4b23      	ldr	r3, [pc, #140]	; (8007e94 <_svfiprintf_r+0x1f4>)
 8007e08:	bb1b      	cbnz	r3, 8007e52 <_svfiprintf_r+0x1b2>
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	3307      	adds	r3, #7
 8007e0e:	f023 0307 	bic.w	r3, r3, #7
 8007e12:	3308      	adds	r3, #8
 8007e14:	9303      	str	r3, [sp, #12]
 8007e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e18:	4433      	add	r3, r6
 8007e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007e1c:	e767      	b.n	8007cee <_svfiprintf_r+0x4e>
 8007e1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e22:	460c      	mov	r4, r1
 8007e24:	2001      	movs	r0, #1
 8007e26:	e7a5      	b.n	8007d74 <_svfiprintf_r+0xd4>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	3401      	adds	r4, #1
 8007e2c:	9305      	str	r3, [sp, #20]
 8007e2e:	4619      	mov	r1, r3
 8007e30:	f04f 0c0a 	mov.w	ip, #10
 8007e34:	4620      	mov	r0, r4
 8007e36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e3a:	3a30      	subs	r2, #48	; 0x30
 8007e3c:	2a09      	cmp	r2, #9
 8007e3e:	d903      	bls.n	8007e48 <_svfiprintf_r+0x1a8>
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d0c5      	beq.n	8007dd0 <_svfiprintf_r+0x130>
 8007e44:	9105      	str	r1, [sp, #20]
 8007e46:	e7c3      	b.n	8007dd0 <_svfiprintf_r+0x130>
 8007e48:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e7f0      	b.n	8007e34 <_svfiprintf_r+0x194>
 8007e52:	ab03      	add	r3, sp, #12
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	462a      	mov	r2, r5
 8007e58:	4b0f      	ldr	r3, [pc, #60]	; (8007e98 <_svfiprintf_r+0x1f8>)
 8007e5a:	a904      	add	r1, sp, #16
 8007e5c:	4638      	mov	r0, r7
 8007e5e:	f3af 8000 	nop.w
 8007e62:	1c42      	adds	r2, r0, #1
 8007e64:	4606      	mov	r6, r0
 8007e66:	d1d6      	bne.n	8007e16 <_svfiprintf_r+0x176>
 8007e68:	89ab      	ldrh	r3, [r5, #12]
 8007e6a:	065b      	lsls	r3, r3, #25
 8007e6c:	f53f af2c 	bmi.w	8007cc8 <_svfiprintf_r+0x28>
 8007e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e72:	b01d      	add	sp, #116	; 0x74
 8007e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e78:	ab03      	add	r3, sp, #12
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	462a      	mov	r2, r5
 8007e7e:	4b06      	ldr	r3, [pc, #24]	; (8007e98 <_svfiprintf_r+0x1f8>)
 8007e80:	a904      	add	r1, sp, #16
 8007e82:	4638      	mov	r0, r7
 8007e84:	f000 f87a 	bl	8007f7c <_printf_i>
 8007e88:	e7eb      	b.n	8007e62 <_svfiprintf_r+0x1c2>
 8007e8a:	bf00      	nop
 8007e8c:	0800845c 	.word	0x0800845c
 8007e90:	08008466 	.word	0x08008466
 8007e94:	00000000 	.word	0x00000000
 8007e98:	08007be9 	.word	0x08007be9
 8007e9c:	08008462 	.word	0x08008462

08007ea0 <_printf_common>:
 8007ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ea4:	4616      	mov	r6, r2
 8007ea6:	4699      	mov	r9, r3
 8007ea8:	688a      	ldr	r2, [r1, #8]
 8007eaa:	690b      	ldr	r3, [r1, #16]
 8007eac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	bfb8      	it	lt
 8007eb4:	4613      	movlt	r3, r2
 8007eb6:	6033      	str	r3, [r6, #0]
 8007eb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ebc:	4607      	mov	r7, r0
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	b10a      	cbz	r2, 8007ec6 <_printf_common+0x26>
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	6033      	str	r3, [r6, #0]
 8007ec6:	6823      	ldr	r3, [r4, #0]
 8007ec8:	0699      	lsls	r1, r3, #26
 8007eca:	bf42      	ittt	mi
 8007ecc:	6833      	ldrmi	r3, [r6, #0]
 8007ece:	3302      	addmi	r3, #2
 8007ed0:	6033      	strmi	r3, [r6, #0]
 8007ed2:	6825      	ldr	r5, [r4, #0]
 8007ed4:	f015 0506 	ands.w	r5, r5, #6
 8007ed8:	d106      	bne.n	8007ee8 <_printf_common+0x48>
 8007eda:	f104 0a19 	add.w	sl, r4, #25
 8007ede:	68e3      	ldr	r3, [r4, #12]
 8007ee0:	6832      	ldr	r2, [r6, #0]
 8007ee2:	1a9b      	subs	r3, r3, r2
 8007ee4:	42ab      	cmp	r3, r5
 8007ee6:	dc26      	bgt.n	8007f36 <_printf_common+0x96>
 8007ee8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007eec:	1e13      	subs	r3, r2, #0
 8007eee:	6822      	ldr	r2, [r4, #0]
 8007ef0:	bf18      	it	ne
 8007ef2:	2301      	movne	r3, #1
 8007ef4:	0692      	lsls	r2, r2, #26
 8007ef6:	d42b      	bmi.n	8007f50 <_printf_common+0xb0>
 8007ef8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007efc:	4649      	mov	r1, r9
 8007efe:	4638      	mov	r0, r7
 8007f00:	47c0      	blx	r8
 8007f02:	3001      	adds	r0, #1
 8007f04:	d01e      	beq.n	8007f44 <_printf_common+0xa4>
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	68e5      	ldr	r5, [r4, #12]
 8007f0a:	6832      	ldr	r2, [r6, #0]
 8007f0c:	f003 0306 	and.w	r3, r3, #6
 8007f10:	2b04      	cmp	r3, #4
 8007f12:	bf08      	it	eq
 8007f14:	1aad      	subeq	r5, r5, r2
 8007f16:	68a3      	ldr	r3, [r4, #8]
 8007f18:	6922      	ldr	r2, [r4, #16]
 8007f1a:	bf0c      	ite	eq
 8007f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f20:	2500      	movne	r5, #0
 8007f22:	4293      	cmp	r3, r2
 8007f24:	bfc4      	itt	gt
 8007f26:	1a9b      	subgt	r3, r3, r2
 8007f28:	18ed      	addgt	r5, r5, r3
 8007f2a:	2600      	movs	r6, #0
 8007f2c:	341a      	adds	r4, #26
 8007f2e:	42b5      	cmp	r5, r6
 8007f30:	d11a      	bne.n	8007f68 <_printf_common+0xc8>
 8007f32:	2000      	movs	r0, #0
 8007f34:	e008      	b.n	8007f48 <_printf_common+0xa8>
 8007f36:	2301      	movs	r3, #1
 8007f38:	4652      	mov	r2, sl
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	47c0      	blx	r8
 8007f40:	3001      	adds	r0, #1
 8007f42:	d103      	bne.n	8007f4c <_printf_common+0xac>
 8007f44:	f04f 30ff 	mov.w	r0, #4294967295
 8007f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f4c:	3501      	adds	r5, #1
 8007f4e:	e7c6      	b.n	8007ede <_printf_common+0x3e>
 8007f50:	18e1      	adds	r1, r4, r3
 8007f52:	1c5a      	adds	r2, r3, #1
 8007f54:	2030      	movs	r0, #48	; 0x30
 8007f56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f5a:	4422      	add	r2, r4
 8007f5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f64:	3302      	adds	r3, #2
 8007f66:	e7c7      	b.n	8007ef8 <_printf_common+0x58>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	4622      	mov	r2, r4
 8007f6c:	4649      	mov	r1, r9
 8007f6e:	4638      	mov	r0, r7
 8007f70:	47c0      	blx	r8
 8007f72:	3001      	adds	r0, #1
 8007f74:	d0e6      	beq.n	8007f44 <_printf_common+0xa4>
 8007f76:	3601      	adds	r6, #1
 8007f78:	e7d9      	b.n	8007f2e <_printf_common+0x8e>
	...

08007f7c <_printf_i>:
 8007f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f80:	460c      	mov	r4, r1
 8007f82:	4691      	mov	r9, r2
 8007f84:	7e27      	ldrb	r7, [r4, #24]
 8007f86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007f88:	2f78      	cmp	r7, #120	; 0x78
 8007f8a:	4680      	mov	r8, r0
 8007f8c:	469a      	mov	sl, r3
 8007f8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f92:	d807      	bhi.n	8007fa4 <_printf_i+0x28>
 8007f94:	2f62      	cmp	r7, #98	; 0x62
 8007f96:	d80a      	bhi.n	8007fae <_printf_i+0x32>
 8007f98:	2f00      	cmp	r7, #0
 8007f9a:	f000 80d8 	beq.w	800814e <_printf_i+0x1d2>
 8007f9e:	2f58      	cmp	r7, #88	; 0x58
 8007fa0:	f000 80a3 	beq.w	80080ea <_printf_i+0x16e>
 8007fa4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007fa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007fac:	e03a      	b.n	8008024 <_printf_i+0xa8>
 8007fae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007fb2:	2b15      	cmp	r3, #21
 8007fb4:	d8f6      	bhi.n	8007fa4 <_printf_i+0x28>
 8007fb6:	a001      	add	r0, pc, #4	; (adr r0, 8007fbc <_printf_i+0x40>)
 8007fb8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007fbc:	08008015 	.word	0x08008015
 8007fc0:	08008029 	.word	0x08008029
 8007fc4:	08007fa5 	.word	0x08007fa5
 8007fc8:	08007fa5 	.word	0x08007fa5
 8007fcc:	08007fa5 	.word	0x08007fa5
 8007fd0:	08007fa5 	.word	0x08007fa5
 8007fd4:	08008029 	.word	0x08008029
 8007fd8:	08007fa5 	.word	0x08007fa5
 8007fdc:	08007fa5 	.word	0x08007fa5
 8007fe0:	08007fa5 	.word	0x08007fa5
 8007fe4:	08007fa5 	.word	0x08007fa5
 8007fe8:	08008135 	.word	0x08008135
 8007fec:	08008059 	.word	0x08008059
 8007ff0:	08008117 	.word	0x08008117
 8007ff4:	08007fa5 	.word	0x08007fa5
 8007ff8:	08007fa5 	.word	0x08007fa5
 8007ffc:	08008157 	.word	0x08008157
 8008000:	08007fa5 	.word	0x08007fa5
 8008004:	08008059 	.word	0x08008059
 8008008:	08007fa5 	.word	0x08007fa5
 800800c:	08007fa5 	.word	0x08007fa5
 8008010:	0800811f 	.word	0x0800811f
 8008014:	680b      	ldr	r3, [r1, #0]
 8008016:	1d1a      	adds	r2, r3, #4
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	600a      	str	r2, [r1, #0]
 800801c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008024:	2301      	movs	r3, #1
 8008026:	e0a3      	b.n	8008170 <_printf_i+0x1f4>
 8008028:	6825      	ldr	r5, [r4, #0]
 800802a:	6808      	ldr	r0, [r1, #0]
 800802c:	062e      	lsls	r6, r5, #24
 800802e:	f100 0304 	add.w	r3, r0, #4
 8008032:	d50a      	bpl.n	800804a <_printf_i+0xce>
 8008034:	6805      	ldr	r5, [r0, #0]
 8008036:	600b      	str	r3, [r1, #0]
 8008038:	2d00      	cmp	r5, #0
 800803a:	da03      	bge.n	8008044 <_printf_i+0xc8>
 800803c:	232d      	movs	r3, #45	; 0x2d
 800803e:	426d      	negs	r5, r5
 8008040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008044:	485e      	ldr	r0, [pc, #376]	; (80081c0 <_printf_i+0x244>)
 8008046:	230a      	movs	r3, #10
 8008048:	e019      	b.n	800807e <_printf_i+0x102>
 800804a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800804e:	6805      	ldr	r5, [r0, #0]
 8008050:	600b      	str	r3, [r1, #0]
 8008052:	bf18      	it	ne
 8008054:	b22d      	sxthne	r5, r5
 8008056:	e7ef      	b.n	8008038 <_printf_i+0xbc>
 8008058:	680b      	ldr	r3, [r1, #0]
 800805a:	6825      	ldr	r5, [r4, #0]
 800805c:	1d18      	adds	r0, r3, #4
 800805e:	6008      	str	r0, [r1, #0]
 8008060:	0628      	lsls	r0, r5, #24
 8008062:	d501      	bpl.n	8008068 <_printf_i+0xec>
 8008064:	681d      	ldr	r5, [r3, #0]
 8008066:	e002      	b.n	800806e <_printf_i+0xf2>
 8008068:	0669      	lsls	r1, r5, #25
 800806a:	d5fb      	bpl.n	8008064 <_printf_i+0xe8>
 800806c:	881d      	ldrh	r5, [r3, #0]
 800806e:	4854      	ldr	r0, [pc, #336]	; (80081c0 <_printf_i+0x244>)
 8008070:	2f6f      	cmp	r7, #111	; 0x6f
 8008072:	bf0c      	ite	eq
 8008074:	2308      	moveq	r3, #8
 8008076:	230a      	movne	r3, #10
 8008078:	2100      	movs	r1, #0
 800807a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800807e:	6866      	ldr	r6, [r4, #4]
 8008080:	60a6      	str	r6, [r4, #8]
 8008082:	2e00      	cmp	r6, #0
 8008084:	bfa2      	ittt	ge
 8008086:	6821      	ldrge	r1, [r4, #0]
 8008088:	f021 0104 	bicge.w	r1, r1, #4
 800808c:	6021      	strge	r1, [r4, #0]
 800808e:	b90d      	cbnz	r5, 8008094 <_printf_i+0x118>
 8008090:	2e00      	cmp	r6, #0
 8008092:	d04d      	beq.n	8008130 <_printf_i+0x1b4>
 8008094:	4616      	mov	r6, r2
 8008096:	fbb5 f1f3 	udiv	r1, r5, r3
 800809a:	fb03 5711 	mls	r7, r3, r1, r5
 800809e:	5dc7      	ldrb	r7, [r0, r7]
 80080a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80080a4:	462f      	mov	r7, r5
 80080a6:	42bb      	cmp	r3, r7
 80080a8:	460d      	mov	r5, r1
 80080aa:	d9f4      	bls.n	8008096 <_printf_i+0x11a>
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d10b      	bne.n	80080c8 <_printf_i+0x14c>
 80080b0:	6823      	ldr	r3, [r4, #0]
 80080b2:	07df      	lsls	r7, r3, #31
 80080b4:	d508      	bpl.n	80080c8 <_printf_i+0x14c>
 80080b6:	6923      	ldr	r3, [r4, #16]
 80080b8:	6861      	ldr	r1, [r4, #4]
 80080ba:	4299      	cmp	r1, r3
 80080bc:	bfde      	ittt	le
 80080be:	2330      	movle	r3, #48	; 0x30
 80080c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80080c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80080c8:	1b92      	subs	r2, r2, r6
 80080ca:	6122      	str	r2, [r4, #16]
 80080cc:	f8cd a000 	str.w	sl, [sp]
 80080d0:	464b      	mov	r3, r9
 80080d2:	aa03      	add	r2, sp, #12
 80080d4:	4621      	mov	r1, r4
 80080d6:	4640      	mov	r0, r8
 80080d8:	f7ff fee2 	bl	8007ea0 <_printf_common>
 80080dc:	3001      	adds	r0, #1
 80080de:	d14c      	bne.n	800817a <_printf_i+0x1fe>
 80080e0:	f04f 30ff 	mov.w	r0, #4294967295
 80080e4:	b004      	add	sp, #16
 80080e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ea:	4835      	ldr	r0, [pc, #212]	; (80081c0 <_printf_i+0x244>)
 80080ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80080f0:	6823      	ldr	r3, [r4, #0]
 80080f2:	680e      	ldr	r6, [r1, #0]
 80080f4:	061f      	lsls	r7, r3, #24
 80080f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80080fa:	600e      	str	r6, [r1, #0]
 80080fc:	d514      	bpl.n	8008128 <_printf_i+0x1ac>
 80080fe:	07d9      	lsls	r1, r3, #31
 8008100:	bf44      	itt	mi
 8008102:	f043 0320 	orrmi.w	r3, r3, #32
 8008106:	6023      	strmi	r3, [r4, #0]
 8008108:	b91d      	cbnz	r5, 8008112 <_printf_i+0x196>
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	f023 0320 	bic.w	r3, r3, #32
 8008110:	6023      	str	r3, [r4, #0]
 8008112:	2310      	movs	r3, #16
 8008114:	e7b0      	b.n	8008078 <_printf_i+0xfc>
 8008116:	6823      	ldr	r3, [r4, #0]
 8008118:	f043 0320 	orr.w	r3, r3, #32
 800811c:	6023      	str	r3, [r4, #0]
 800811e:	2378      	movs	r3, #120	; 0x78
 8008120:	4828      	ldr	r0, [pc, #160]	; (80081c4 <_printf_i+0x248>)
 8008122:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008126:	e7e3      	b.n	80080f0 <_printf_i+0x174>
 8008128:	065e      	lsls	r6, r3, #25
 800812a:	bf48      	it	mi
 800812c:	b2ad      	uxthmi	r5, r5
 800812e:	e7e6      	b.n	80080fe <_printf_i+0x182>
 8008130:	4616      	mov	r6, r2
 8008132:	e7bb      	b.n	80080ac <_printf_i+0x130>
 8008134:	680b      	ldr	r3, [r1, #0]
 8008136:	6826      	ldr	r6, [r4, #0]
 8008138:	6960      	ldr	r0, [r4, #20]
 800813a:	1d1d      	adds	r5, r3, #4
 800813c:	600d      	str	r5, [r1, #0]
 800813e:	0635      	lsls	r5, r6, #24
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	d501      	bpl.n	8008148 <_printf_i+0x1cc>
 8008144:	6018      	str	r0, [r3, #0]
 8008146:	e002      	b.n	800814e <_printf_i+0x1d2>
 8008148:	0671      	lsls	r1, r6, #25
 800814a:	d5fb      	bpl.n	8008144 <_printf_i+0x1c8>
 800814c:	8018      	strh	r0, [r3, #0]
 800814e:	2300      	movs	r3, #0
 8008150:	6123      	str	r3, [r4, #16]
 8008152:	4616      	mov	r6, r2
 8008154:	e7ba      	b.n	80080cc <_printf_i+0x150>
 8008156:	680b      	ldr	r3, [r1, #0]
 8008158:	1d1a      	adds	r2, r3, #4
 800815a:	600a      	str	r2, [r1, #0]
 800815c:	681e      	ldr	r6, [r3, #0]
 800815e:	6862      	ldr	r2, [r4, #4]
 8008160:	2100      	movs	r1, #0
 8008162:	4630      	mov	r0, r6
 8008164:	f7f8 f85c 	bl	8000220 <memchr>
 8008168:	b108      	cbz	r0, 800816e <_printf_i+0x1f2>
 800816a:	1b80      	subs	r0, r0, r6
 800816c:	6060      	str	r0, [r4, #4]
 800816e:	6863      	ldr	r3, [r4, #4]
 8008170:	6123      	str	r3, [r4, #16]
 8008172:	2300      	movs	r3, #0
 8008174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008178:	e7a8      	b.n	80080cc <_printf_i+0x150>
 800817a:	6923      	ldr	r3, [r4, #16]
 800817c:	4632      	mov	r2, r6
 800817e:	4649      	mov	r1, r9
 8008180:	4640      	mov	r0, r8
 8008182:	47d0      	blx	sl
 8008184:	3001      	adds	r0, #1
 8008186:	d0ab      	beq.n	80080e0 <_printf_i+0x164>
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	079b      	lsls	r3, r3, #30
 800818c:	d413      	bmi.n	80081b6 <_printf_i+0x23a>
 800818e:	68e0      	ldr	r0, [r4, #12]
 8008190:	9b03      	ldr	r3, [sp, #12]
 8008192:	4298      	cmp	r0, r3
 8008194:	bfb8      	it	lt
 8008196:	4618      	movlt	r0, r3
 8008198:	e7a4      	b.n	80080e4 <_printf_i+0x168>
 800819a:	2301      	movs	r3, #1
 800819c:	4632      	mov	r2, r6
 800819e:	4649      	mov	r1, r9
 80081a0:	4640      	mov	r0, r8
 80081a2:	47d0      	blx	sl
 80081a4:	3001      	adds	r0, #1
 80081a6:	d09b      	beq.n	80080e0 <_printf_i+0x164>
 80081a8:	3501      	adds	r5, #1
 80081aa:	68e3      	ldr	r3, [r4, #12]
 80081ac:	9903      	ldr	r1, [sp, #12]
 80081ae:	1a5b      	subs	r3, r3, r1
 80081b0:	42ab      	cmp	r3, r5
 80081b2:	dcf2      	bgt.n	800819a <_printf_i+0x21e>
 80081b4:	e7eb      	b.n	800818e <_printf_i+0x212>
 80081b6:	2500      	movs	r5, #0
 80081b8:	f104 0619 	add.w	r6, r4, #25
 80081bc:	e7f5      	b.n	80081aa <_printf_i+0x22e>
 80081be:	bf00      	nop
 80081c0:	0800846d 	.word	0x0800846d
 80081c4:	0800847e 	.word	0x0800847e

080081c8 <memmove>:
 80081c8:	4288      	cmp	r0, r1
 80081ca:	b510      	push	{r4, lr}
 80081cc:	eb01 0402 	add.w	r4, r1, r2
 80081d0:	d902      	bls.n	80081d8 <memmove+0x10>
 80081d2:	4284      	cmp	r4, r0
 80081d4:	4623      	mov	r3, r4
 80081d6:	d807      	bhi.n	80081e8 <memmove+0x20>
 80081d8:	1e43      	subs	r3, r0, #1
 80081da:	42a1      	cmp	r1, r4
 80081dc:	d008      	beq.n	80081f0 <memmove+0x28>
 80081de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081e6:	e7f8      	b.n	80081da <memmove+0x12>
 80081e8:	4402      	add	r2, r0
 80081ea:	4601      	mov	r1, r0
 80081ec:	428a      	cmp	r2, r1
 80081ee:	d100      	bne.n	80081f2 <memmove+0x2a>
 80081f0:	bd10      	pop	{r4, pc}
 80081f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081fa:	e7f7      	b.n	80081ec <memmove+0x24>

080081fc <_realloc_r>:
 80081fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081fe:	4607      	mov	r7, r0
 8008200:	4614      	mov	r4, r2
 8008202:	460e      	mov	r6, r1
 8008204:	b921      	cbnz	r1, 8008210 <_realloc_r+0x14>
 8008206:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800820a:	4611      	mov	r1, r2
 800820c:	f7ff bb9c 	b.w	8007948 <_malloc_r>
 8008210:	b922      	cbnz	r2, 800821c <_realloc_r+0x20>
 8008212:	f7ff fc99 	bl	8007b48 <_free_r>
 8008216:	4625      	mov	r5, r4
 8008218:	4628      	mov	r0, r5
 800821a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800821c:	f000 f814 	bl	8008248 <_malloc_usable_size_r>
 8008220:	42a0      	cmp	r0, r4
 8008222:	d20f      	bcs.n	8008244 <_realloc_r+0x48>
 8008224:	4621      	mov	r1, r4
 8008226:	4638      	mov	r0, r7
 8008228:	f7ff fb8e 	bl	8007948 <_malloc_r>
 800822c:	4605      	mov	r5, r0
 800822e:	2800      	cmp	r0, #0
 8008230:	d0f2      	beq.n	8008218 <_realloc_r+0x1c>
 8008232:	4631      	mov	r1, r6
 8008234:	4622      	mov	r2, r4
 8008236:	f7ff fb71 	bl	800791c <memcpy>
 800823a:	4631      	mov	r1, r6
 800823c:	4638      	mov	r0, r7
 800823e:	f7ff fc83 	bl	8007b48 <_free_r>
 8008242:	e7e9      	b.n	8008218 <_realloc_r+0x1c>
 8008244:	4635      	mov	r5, r6
 8008246:	e7e7      	b.n	8008218 <_realloc_r+0x1c>

08008248 <_malloc_usable_size_r>:
 8008248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800824c:	1f18      	subs	r0, r3, #4
 800824e:	2b00      	cmp	r3, #0
 8008250:	bfbc      	itt	lt
 8008252:	580b      	ldrlt	r3, [r1, r0]
 8008254:	18c0      	addlt	r0, r0, r3
 8008256:	4770      	bx	lr

08008258 <_init>:
 8008258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825a:	bf00      	nop
 800825c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800825e:	bc08      	pop	{r3}
 8008260:	469e      	mov	lr, r3
 8008262:	4770      	bx	lr

08008264 <_fini>:
 8008264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008266:	bf00      	nop
 8008268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800826a:	bc08      	pop	{r3}
 800826c:	469e      	mov	lr, r3
 800826e:	4770      	bx	lr
