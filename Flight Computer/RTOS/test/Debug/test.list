
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006388  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08006558  08006558  00016558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006624  08006624  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006624  08006624  00016624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800662c  0800662c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800662c  0800662c  0001662c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006630  08006630  00016630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f1c  20000074  080066a8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f90  080066a8  00024f90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fdfc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b06  00000000  00000000  0003fea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  000439a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f0  00000000  00000000  000450e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000390d  00000000  00000000  000466d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019db1  00000000  00000000  00049fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc81c  00000000  00000000  00063d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001405aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006610  00000000  00000000  00140600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006540 	.word	0x08006540

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006540 	.word	0x08006540

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fbb8 	bl	8000c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f81c 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f908 	bl	8000728 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000518:	f000 f884 	bl	8000624 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800051c:	f000 f8ac 	bl	8000678 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000520:	f000 f8d4 	bl	80006cc <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000524:	f003 f992 	bl	800384c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000528:	4a05      	ldr	r2, [pc, #20]	; (8000540 <main+0x38>)
 800052a:	2100      	movs	r1, #0
 800052c:	4805      	ldr	r0, [pc, #20]	; (8000544 <main+0x3c>)
 800052e:	f003 f9d7 	bl	80038e0 <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a04      	ldr	r2, [pc, #16]	; (8000548 <main+0x40>)
 8000536:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000538:	f003 f9ac 	bl	8003894 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053c:	e7fe      	b.n	800053c <main+0x34>
 800053e:	bf00      	nop
 8000540:	08006588 	.word	0x08006588
 8000544:	08000885 	.word	0x08000885
 8000548:	20004a64 	.word	0x20004a64

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b094      	sub	sp, #80	; 0x50
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	f107 031c 	add.w	r3, r7, #28
 8000556:	2234      	movs	r2, #52	; 0x34
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f005 ff22 	bl	80063a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000560:	f107 0308 	add.w	r3, r7, #8
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b29      	ldr	r3, [pc, #164]	; (800061c <SystemClock_Config+0xd0>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	4a28      	ldr	r2, [pc, #160]	; (800061c <SystemClock_Config+0xd0>)
 800057a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057e:	6413      	str	r3, [r2, #64]	; 0x40
 8000580:	4b26      	ldr	r3, [pc, #152]	; (800061c <SystemClock_Config+0xd0>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058c:	2300      	movs	r3, #0
 800058e:	603b      	str	r3, [r7, #0]
 8000590:	4b23      	ldr	r3, [pc, #140]	; (8000620 <SystemClock_Config+0xd4>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a22      	ldr	r2, [pc, #136]	; (8000620 <SystemClock_Config+0xd4>)
 8000596:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b20      	ldr	r3, [pc, #128]	; (8000620 <SystemClock_Config+0xd4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a8:	2301      	movs	r3, #1
 80005aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b2:	2302      	movs	r3, #2
 80005b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005bc:	2304      	movs	r3, #4
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005c0:	23a8      	movs	r3, #168	; 0xa8
 80005c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c8:	2307      	movs	r3, #7
 80005ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 fdb9 	bl	800214c <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005e0:	f000 f978 	bl	80008d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2302      	movs	r3, #2
 80005ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2105      	movs	r1, #5
 8000602:	4618      	mov	r0, r3
 8000604:	f000 ff7a 	bl	80014fc <HAL_RCC_ClockConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800060e:	f000 f961 	bl	80008d4 <Error_Handler>
  }
}
 8000612:	bf00      	nop
 8000614:	3750      	adds	r7, #80	; 0x50
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	40007000 	.word	0x40007000

08000624 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800062a:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_USART2_UART_Init+0x50>)
 800062c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000634:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800063e:	2200      	movs	r2, #0
 8000640:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800064a:	220c      	movs	r2, #12
 800064c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064e:	4b08      	ldr	r3, [pc, #32]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000650:	2200      	movs	r2, #0
 8000652:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 8000656:	2200      	movs	r2, #0
 8000658:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_USART2_UART_Init+0x4c>)
 800065c:	f002 fac2 	bl	8002be4 <HAL_UART_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000666:	f000 f935 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20004eb4 	.word	0x20004eb4
 8000674:	40004400 	.word	0x40004400

08000678 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 800067e:	4a12      	ldr	r2, [pc, #72]	; (80006c8 <MX_USART3_UART_Init+0x50>)
 8000680:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 8000684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000688:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800069c:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 800069e:	220c      	movs	r2, #12
 80006a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a2:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ae:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_USART3_UART_Init+0x4c>)
 80006b0:	f002 fa98 	bl	8002be4 <HAL_UART_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006ba:	f000 f90b 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20004a68 	.word	0x20004a68
 80006c8:	40004800 	.word	0x40004800

080006cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006da:	2206      	movs	r2, #6
 80006dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e0:	2202      	movs	r2, #2
 80006e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006ec:	2202      	movs	r2, #2
 80006ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000704:	2201      	movs	r2, #1
 8000706:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000710:	f000 fdab 	bl	800126a <HAL_PCD_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800071a:	f000 f8db 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20004aac 	.word	0x20004aac

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08c      	sub	sp, #48	; 0x30
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
 8000742:	4b4c      	ldr	r3, [pc, #304]	; (8000874 <MX_GPIO_Init+0x14c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a4b      	ldr	r2, [pc, #300]	; (8000874 <MX_GPIO_Init+0x14c>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b49      	ldr	r3, [pc, #292]	; (8000874 <MX_GPIO_Init+0x14c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	61bb      	str	r3, [r7, #24]
 8000758:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	4b45      	ldr	r3, [pc, #276]	; (8000874 <MX_GPIO_Init+0x14c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a44      	ldr	r2, [pc, #272]	; (8000874 <MX_GPIO_Init+0x14c>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b42      	ldr	r3, [pc, #264]	; (8000874 <MX_GPIO_Init+0x14c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b3e      	ldr	r3, [pc, #248]	; (8000874 <MX_GPIO_Init+0x14c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a3d      	ldr	r2, [pc, #244]	; (8000874 <MX_GPIO_Init+0x14c>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b3b      	ldr	r3, [pc, #236]	; (8000874 <MX_GPIO_Init+0x14c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b37      	ldr	r3, [pc, #220]	; (8000874 <MX_GPIO_Init+0x14c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a36      	ldr	r2, [pc, #216]	; (8000874 <MX_GPIO_Init+0x14c>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b34      	ldr	r3, [pc, #208]	; (8000874 <MX_GPIO_Init+0x14c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b30      	ldr	r3, [pc, #192]	; (8000874 <MX_GPIO_Init+0x14c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a2f      	ldr	r2, [pc, #188]	; (8000874 <MX_GPIO_Init+0x14c>)
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <MX_GPIO_Init+0x14c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b29      	ldr	r3, [pc, #164]	; (8000874 <MX_GPIO_Init+0x14c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a28      	ldr	r2, [pc, #160]	; (8000874 <MX_GPIO_Init+0x14c>)
 80007d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b26      	ldr	r3, [pc, #152]	; (8000874 <MX_GPIO_Init+0x14c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f244 0181 	movw	r1, #16513	; 0x4081
 80007ec:	4822      	ldr	r0, [pc, #136]	; (8000878 <MX_GPIO_Init+0x150>)
 80007ee:	f000 fd23 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2140      	movs	r1, #64	; 0x40
 80007f6:	4821      	ldr	r0, [pc, #132]	; (800087c <MX_GPIO_Init+0x154>)
 80007f8:	f000 fd1e 	bl	8001238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000802:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	481b      	ldr	r0, [pc, #108]	; (8000880 <MX_GPIO_Init+0x158>)
 8000814:	f000 fb7c 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000818:	f244 0381 	movw	r3, #16513	; 0x4081
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4811      	ldr	r0, [pc, #68]	; (8000878 <MX_GPIO_Init+0x150>)
 8000832:	f000 fb6d 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000836:	2340      	movs	r3, #64	; 0x40
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	480b      	ldr	r0, [pc, #44]	; (800087c <MX_GPIO_Init+0x154>)
 800084e:	f000 fb5f 	bl	8000f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000852:	2380      	movs	r3, #128	; 0x80
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_GPIO_Init+0x154>)
 8000866:	f000 fb53 	bl	8000f10 <HAL_GPIO_Init>

}
 800086a:	bf00      	nop
 800086c:	3730      	adds	r7, #48	; 0x30
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40020400 	.word	0x40020400
 800087c:	40021800 	.word	0x40021800
 8000880:	40020800 	.word	0x40020800

08000884 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	char* buffer = "plz work";
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <StartDefaultTask+0x24>)
 800088e:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*) buffer, 100, 100);
 8000890:	2364      	movs	r3, #100	; 0x64
 8000892:	2264      	movs	r2, #100	; 0x64
 8000894:	68f9      	ldr	r1, [r7, #12]
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <StartDefaultTask+0x28>)
 8000898:	f002 f9f1 	bl	8002c7e <HAL_UART_Transmit>
    osDelay(1000);
 800089c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a0:	f003 f8b0 	bl	8003a04 <osDelay>
  {
 80008a4:	e7f2      	b.n	800088c <StartDefaultTask+0x8>
 80008a6:	bf00      	nop
 80008a8:	08006564 	.word	0x08006564
 80008ac:	20004eb4 	.word	0x20004eb4

080008b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d101      	bne.n	80008c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008c2:	f000 f9ff 	bl	8000cc4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40001000 	.word	0x40001000

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_MspInit+0x54>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	4a11      	ldr	r2, [pc, #68]	; (8000934 <HAL_MspInit+0x54>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f4:	6453      	str	r3, [r2, #68]	; 0x44
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_MspInit+0x54>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <HAL_MspInit+0x54>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <HAL_MspInit+0x54>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <HAL_MspInit+0x54>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	210f      	movs	r1, #15
 8000922:	f06f 0001 	mvn.w	r0, #1
 8000926:	f000 fac9 	bl	8000ebc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08c      	sub	sp, #48	; 0x30
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 031c 	add.w	r3, r7, #28
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a32      	ldr	r2, [pc, #200]	; (8000a20 <HAL_UART_MspInit+0xe8>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d12c      	bne.n	80009b4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
 800095e:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <HAL_UART_MspInit+0xec>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a30      	ldr	r2, [pc, #192]	; (8000a24 <HAL_UART_MspInit+0xec>)
 8000964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
 800096a:	4b2e      	ldr	r3, [pc, #184]	; (8000a24 <HAL_UART_MspInit+0xec>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <HAL_UART_MspInit+0xec>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	4a29      	ldr	r2, [pc, #164]	; (8000a24 <HAL_UART_MspInit+0xec>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	6313      	str	r3, [r2, #48]	; 0x30
 8000986:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <HAL_UART_MspInit+0xec>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000992:	230c      	movs	r3, #12
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a2:	2307      	movs	r3, #7
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	481e      	ldr	r0, [pc, #120]	; (8000a28 <HAL_UART_MspInit+0xf0>)
 80009ae:	f000 faaf 	bl	8000f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009b2:	e031      	b.n	8000a18 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a1c      	ldr	r2, [pc, #112]	; (8000a2c <HAL_UART_MspInit+0xf4>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d12c      	bne.n	8000a18 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <HAL_UART_MspInit+0xec>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <HAL_UART_MspInit+0xec>)
 80009c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <HAL_UART_MspInit+0xec>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_UART_MspInit+0xec>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <HAL_UART_MspInit+0xec>)
 80009e4:	f043 0308 	orr.w	r3, r3, #8
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_UART_MspInit+0xec>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0308 	and.w	r3, r3, #8
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a08:	2307      	movs	r3, #7
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4807      	ldr	r0, [pc, #28]	; (8000a30 <HAL_UART_MspInit+0xf8>)
 8000a14:	f000 fa7c 	bl	8000f10 <HAL_GPIO_Init>
}
 8000a18:	bf00      	nop
 8000a1a:	3730      	adds	r7, #48	; 0x30
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40004400 	.word	0x40004400
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40020000 	.word	0x40020000
 8000a2c:	40004800 	.word	0x40004800
 8000a30:	40020c00 	.word	0x40020c00

08000a34 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b0a0      	sub	sp, #128	; 0x80
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	225c      	movs	r2, #92	; 0x5c
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f005 fca5 	bl	80063a4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a62:	d14e      	bne.n	8000b02 <HAL_PCD_MspInit+0xce>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a68:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 fe8e 	bl	8001794 <HAL_RCCEx_PeriphCLKConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000a7e:	f7ff ff29 	bl	80008d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	4b21      	ldr	r3, [pc, #132]	; (8000b0c <HAL_PCD_MspInit+0xd8>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a20      	ldr	r2, [pc, #128]	; (8000b0c <HAL_PCD_MspInit+0xd8>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b1e      	ldr	r3, [pc, #120]	; (8000b0c <HAL_PCD_MspInit+0xd8>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a9e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000aa2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ab0:	230a      	movs	r3, #10
 8000ab2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4815      	ldr	r0, [pc, #84]	; (8000b10 <HAL_PCD_MspInit+0xdc>)
 8000abc:	f000 fa28 	bl	8000f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ac4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480e      	ldr	r0, [pc, #56]	; (8000b10 <HAL_PCD_MspInit+0xdc>)
 8000ad6:	f000 fa1b 	bl	8000f10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_PCD_MspInit+0xd8>)
 8000adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ade:	4a0b      	ldr	r2, [pc, #44]	; (8000b0c <HAL_PCD_MspInit+0xd8>)
 8000ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ae4:	6353      	str	r3, [r2, #52]	; 0x34
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_PCD_MspInit+0xd8>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aee:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <HAL_PCD_MspInit+0xd8>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af4:	6453      	str	r3, [r2, #68]	; 0x44
 8000af6:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_PCD_MspInit+0xd8>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000b02:	bf00      	nop
 8000b04:	3780      	adds	r7, #128	; 0x80
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020000 	.word	0x40020000

08000b14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	2036      	movs	r0, #54	; 0x36
 8000b2a:	f000 f9c7 	bl	8000ebc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b2e:	2036      	movs	r0, #54	; 0x36
 8000b30:	f000 f9e0 	bl	8000ef4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	4a1e      	ldr	r2, [pc, #120]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b3e:	f043 0310 	orr.w	r3, r3, #16
 8000b42:	6413      	str	r3, [r2, #64]	; 0x40
 8000b44:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	f003 0310 	and.w	r3, r3, #16
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b50:	f107 0210 	add.w	r2, r7, #16
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4611      	mov	r1, r2
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 fde8 	bl	8001730 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000b60:	f000 fdbe 	bl	80016e0 <HAL_RCC_GetPCLK1Freq>
 8000b64:	4603      	mov	r3, r0
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6c:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <HAL_InitTick+0xa8>)
 8000b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b72:	0c9b      	lsrs	r3, r3, #18
 8000b74:	3b01      	subs	r3, #1
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	; (8000bc4 <HAL_InitTick+0xb0>)
 8000b7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b84:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b86:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b8a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b98:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b9a:	f001 fd75 	bl	8002688 <HAL_TIM_Base_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d104      	bne.n	8000bae <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000ba4:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <HAL_InitTick+0xac>)
 8000ba6:	f001 fdc9 	bl	800273c <HAL_TIM_Base_Start_IT>
 8000baa:	4603      	mov	r3, r0
 8000bac:	e000      	b.n	8000bb0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3730      	adds	r7, #48	; 0x30
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	431bde83 	.word	0x431bde83
 8000bc0:	20004ef8 	.word	0x20004ef8
 8000bc4:	40001000 	.word	0x40001000

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <NMI_Handler+0x4>

08000bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <BusFault_Handler+0x4>

08000be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <UsageFault_Handler+0x4>

08000be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <TIM6_DAC_IRQHandler+0x10>)
 8000bfa:	f001 fe0f 	bl	800281c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20004ef8 	.word	0x20004ef8

08000c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <SystemInit+0x20>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <SystemInit+0x20>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c32:	490e      	ldr	r1, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c34:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c48:	4c0b      	ldr	r4, [pc, #44]	; (8000c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c56:	f7ff ffd7 	bl	8000c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f005 fb6f 	bl	800633c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5e:	f7ff fc53 	bl	8000508 <main>
  bx  lr    
 8000c62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c70:	08006634 	.word	0x08006634
  ldr r2, =_sbss
 8000c74:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c78:	20004f90 	.word	0x20004f90

08000c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <HAL_Init+0x40>)
 8000c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_Init+0x40>)
 8000c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_Init+0x40>)
 8000ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 f8fc 	bl	8000ea6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cae:	200f      	movs	r0, #15
 8000cb0:	f7ff ff30 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb4:	f7ff fe14 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023c00 	.word	0x40023c00

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20004f40 	.word	0x20004f40

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	; (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20004f40 	.word	0x20004f40

08000d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d0c:	f7ff ffee 	bl	8000cec <HAL_GetTick>
 8000d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d1c:	d005      	beq.n	8000d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d1e:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_Delay+0x44>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4413      	add	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d2a:	bf00      	nop
 8000d2c:	f7ff ffde 	bl	8000cec <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d8f7      	bhi.n	8000d2c <HAL_Delay+0x28>
  {
  }
}
 8000d3c:	bf00      	nop
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000008 	.word	0x20000008

08000d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d7e:	4a04      	ldr	r2, [pc, #16]	; (8000d90 <__NVIC_SetPriorityGrouping+0x44>)
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	60d3      	str	r3, [r2, #12]
}
 8000d84:	bf00      	nop
 8000d86:	3714      	adds	r7, #20
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d98:	4b04      	ldr	r3, [pc, #16]	; (8000dac <__NVIC_GetPriorityGrouping+0x18>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0307 	and.w	r3, r3, #7
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	db0b      	blt.n	8000dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f003 021f 	and.w	r2, r3, #31
 8000dc8:	4907      	ldr	r1, [pc, #28]	; (8000de8 <__NVIC_EnableIRQ+0x38>)
 8000dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dce:	095b      	lsrs	r3, r3, #5
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000e100 	.word	0xe000e100

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	; (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	; (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	; 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ff4c 	bl	8000d4c <__NVIC_SetPriorityGrouping>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ece:	f7ff ff61 	bl	8000d94 <__NVIC_GetPriorityGrouping>
 8000ed2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	6978      	ldr	r0, [r7, #20]
 8000eda:	f7ff ffb1 	bl	8000e40 <NVIC_EncodePriority>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ff80 	bl	8000dec <__NVIC_SetPriority>
}
 8000eec:	bf00      	nop
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff54 	bl	8000db0 <__NVIC_EnableIRQ>
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b089      	sub	sp, #36	; 0x24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
 8000f2a:	e165      	b.n	80011f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	f040 8154 	bne.w	80011f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d005      	beq.n	8000f62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d130      	bne.n	8000fc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	68da      	ldr	r2, [r3, #12]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f98:	2201      	movs	r2, #1
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	091b      	lsrs	r3, r3, #4
 8000fae:	f003 0201 	and.w	r2, r3, #1
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	d017      	beq.n	8001000 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	689a      	ldr	r2, [r3, #8]
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d123      	bne.n	8001054 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	08da      	lsrs	r2, r3, #3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3208      	adds	r2, #8
 8001014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	f003 0307 	and.w	r3, r3, #7
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	691a      	ldr	r2, [r3, #16]
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	08da      	lsrs	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3208      	adds	r2, #8
 800104e:	69b9      	ldr	r1, [r7, #24]
 8001050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	2203      	movs	r2, #3
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0203 	and.w	r2, r3, #3
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80ae 	beq.w	80011f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <HAL_GPIO_Init+0x300>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	4a5c      	ldr	r2, [pc, #368]	; (8001210 <HAL_GPIO_Init+0x300>)
 80010a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a4:	6453      	str	r3, [r2, #68]	; 0x44
 80010a6:	4b5a      	ldr	r3, [pc, #360]	; (8001210 <HAL_GPIO_Init+0x300>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010b2:	4a58      	ldr	r2, [pc, #352]	; (8001214 <HAL_GPIO_Init+0x304>)
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	3302      	adds	r3, #2
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	220f      	movs	r2, #15
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a4f      	ldr	r2, [pc, #316]	; (8001218 <HAL_GPIO_Init+0x308>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d025      	beq.n	800112a <HAL_GPIO_Init+0x21a>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4e      	ldr	r2, [pc, #312]	; (800121c <HAL_GPIO_Init+0x30c>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d01f      	beq.n	8001126 <HAL_GPIO_Init+0x216>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4d      	ldr	r2, [pc, #308]	; (8001220 <HAL_GPIO_Init+0x310>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d019      	beq.n	8001122 <HAL_GPIO_Init+0x212>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4c      	ldr	r2, [pc, #304]	; (8001224 <HAL_GPIO_Init+0x314>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d013      	beq.n	800111e <HAL_GPIO_Init+0x20e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4b      	ldr	r2, [pc, #300]	; (8001228 <HAL_GPIO_Init+0x318>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d00d      	beq.n	800111a <HAL_GPIO_Init+0x20a>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4a      	ldr	r2, [pc, #296]	; (800122c <HAL_GPIO_Init+0x31c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d007      	beq.n	8001116 <HAL_GPIO_Init+0x206>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a49      	ldr	r2, [pc, #292]	; (8001230 <HAL_GPIO_Init+0x320>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d101      	bne.n	8001112 <HAL_GPIO_Init+0x202>
 800110e:	2306      	movs	r3, #6
 8001110:	e00c      	b.n	800112c <HAL_GPIO_Init+0x21c>
 8001112:	2307      	movs	r3, #7
 8001114:	e00a      	b.n	800112c <HAL_GPIO_Init+0x21c>
 8001116:	2305      	movs	r3, #5
 8001118:	e008      	b.n	800112c <HAL_GPIO_Init+0x21c>
 800111a:	2304      	movs	r3, #4
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x21c>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x21c>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x21c>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x21c>
 800112a:	2300      	movs	r3, #0
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	f002 0203 	and.w	r2, r2, #3
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4093      	lsls	r3, r2
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800113c:	4935      	ldr	r1, [pc, #212]	; (8001214 <HAL_GPIO_Init+0x304>)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114a:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <HAL_GPIO_Init+0x324>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800116e:	4a31      	ldr	r2, [pc, #196]	; (8001234 <HAL_GPIO_Init+0x324>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001174:	4b2f      	ldr	r3, [pc, #188]	; (8001234 <HAL_GPIO_Init+0x324>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001198:	4a26      	ldr	r2, [pc, #152]	; (8001234 <HAL_GPIO_Init+0x324>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119e:	4b25      	ldr	r3, [pc, #148]	; (8001234 <HAL_GPIO_Init+0x324>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011c2:	4a1c      	ldr	r2, [pc, #112]	; (8001234 <HAL_GPIO_Init+0x324>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <HAL_GPIO_Init+0x324>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011ec:	4a11      	ldr	r2, [pc, #68]	; (8001234 <HAL_GPIO_Init+0x324>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b0f      	cmp	r3, #15
 80011fc:	f67f ae96 	bls.w	8000f2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40013800 	.word	0x40013800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40020800 	.word	0x40020800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40021000 	.word	0x40021000
 800122c:	40021400 	.word	0x40021400
 8001230:	40021800 	.word	0x40021800
 8001234:	40013c00 	.word	0x40013c00

08001238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	807b      	strh	r3, [r7, #2]
 8001244:	4613      	mov	r3, r2
 8001246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001248:	787b      	ldrb	r3, [r7, #1]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001254:	e003      	b.n	800125e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	041a      	lsls	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	619a      	str	r2, [r3, #24]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800126a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126c:	b08f      	sub	sp, #60	; 0x3c
 800126e:	af0a      	add	r7, sp, #40	; 0x28
 8001270:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e116      	b.n	80014aa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d106      	bne.n	800129c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fbcc 	bl	8000a34 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2203      	movs	r2, #3
 80012a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f002 f809 	bl	80032d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	687e      	ldr	r6, [r7, #4]
 80012c8:	466d      	mov	r5, sp
 80012ca:	f106 0410 	add.w	r4, r6, #16
 80012ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012da:	e885 0003 	stmia.w	r5, {r0, r1}
 80012de:	1d33      	adds	r3, r6, #4
 80012e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012e2:	6838      	ldr	r0, [r7, #0]
 80012e4:	f001 ff94 	bl	8003210 <USB_CoreInit>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d005      	beq.n	80012fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2202      	movs	r2, #2
 80012f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e0d7      	b.n	80014aa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f001 fff7 	bl	80032f4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001306:	2300      	movs	r3, #0
 8001308:	73fb      	strb	r3, [r7, #15]
 800130a:	e04a      	b.n	80013a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	1a9b      	subs	r3, r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	333d      	adds	r3, #61	; 0x3d
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	1a9b      	subs	r3, r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	333c      	adds	r3, #60	; 0x3c
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	b298      	uxth	r0, r3
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	4613      	mov	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	1a9b      	subs	r3, r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	440b      	add	r3, r1
 8001346:	3342      	adds	r3, #66	; 0x42
 8001348:	4602      	mov	r2, r0
 800134a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800134c:	7bfa      	ldrb	r2, [r7, #15]
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	1a9b      	subs	r3, r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	440b      	add	r3, r1
 800135a:	333f      	adds	r3, #63	; 0x3f
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001360:	7bfa      	ldrb	r2, [r7, #15]
 8001362:	6879      	ldr	r1, [r7, #4]
 8001364:	4613      	mov	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	1a9b      	subs	r3, r3, r2
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	3344      	adds	r3, #68	; 0x44
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	1a9b      	subs	r3, r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	440b      	add	r3, r1
 8001382:	3348      	adds	r3, #72	; 0x48
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001388:	7bfa      	ldrb	r2, [r7, #15]
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	1a9b      	subs	r3, r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	3350      	adds	r3, #80	; 0x50
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	3301      	adds	r3, #1
 80013a0:	73fb      	strb	r3, [r7, #15]
 80013a2:	7bfa      	ldrb	r2, [r7, #15]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d3af      	bcc.n	800130c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	73fb      	strb	r3, [r7, #15]
 80013b0:	e044      	b.n	800143c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	1a9b      	subs	r3, r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	4613      	mov	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	1a9b      	subs	r3, r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	440b      	add	r3, r1
 80013d6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013de:	7bfa      	ldrb	r2, [r7, #15]
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	1a9b      	subs	r3, r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013f4:	7bfa      	ldrb	r2, [r7, #15]
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	4613      	mov	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	1a9b      	subs	r3, r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	440b      	add	r3, r1
 8001402:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800140a:	7bfa      	ldrb	r2, [r7, #15]
 800140c:	6879      	ldr	r1, [r7, #4]
 800140e:	4613      	mov	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	1a9b      	subs	r3, r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	440b      	add	r3, r1
 8001418:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	1a9b      	subs	r3, r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	3301      	adds	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	429a      	cmp	r2, r3
 8001444:	d3b5      	bcc.n	80013b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	687e      	ldr	r6, [r7, #4]
 800144e:	466d      	mov	r5, sp
 8001450:	f106 0410 	add.w	r4, r6, #16
 8001454:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001456:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001460:	e885 0003 	stmia.w	r5, {r0, r1}
 8001464:	1d33      	adds	r3, r6, #4
 8001466:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001468:	6838      	ldr	r0, [r7, #0]
 800146a:	f001 ff8f 	bl	800338c <USB_DevInit>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d005      	beq.n	8001480 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2202      	movs	r2, #2
 8001478:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e014      	b.n	80014aa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	2b01      	cmp	r3, #1
 8001496:	d102      	bne.n	800149e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f80a 	bl	80014b2 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f002 f92d 	bl	8003702 <USB_DevDisconnect>

  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014b2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b085      	sub	sp, #20
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e4:	f043 0303 	orr.w	r3, r3, #3
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
	...

080014fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e0cc      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001510:	4b68      	ldr	r3, [pc, #416]	; (80016b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 030f 	and.w	r3, r3, #15
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d90c      	bls.n	8001538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151e:	4b65      	ldr	r3, [pc, #404]	; (80016b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001526:	4b63      	ldr	r3, [pc, #396]	; (80016b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d001      	beq.n	8001538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0b8      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d020      	beq.n	8001586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001550:	4b59      	ldr	r3, [pc, #356]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	4a58      	ldr	r2, [pc, #352]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800155a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001568:	4b53      	ldr	r3, [pc, #332]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	4a52      	ldr	r2, [pc, #328]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001574:	4b50      	ldr	r3, [pc, #320]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	494d      	ldr	r1, [pc, #308]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	4313      	orrs	r3, r2
 8001584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d044      	beq.n	800161c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d107      	bne.n	80015aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	4b47      	ldr	r3, [pc, #284]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d119      	bne.n	80015da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e07f      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d003      	beq.n	80015ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015b6:	2b03      	cmp	r3, #3
 80015b8:	d107      	bne.n	80015ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ba:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d109      	bne.n	80015da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e06f      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ca:	4b3b      	ldr	r3, [pc, #236]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d101      	bne.n	80015da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e067      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015da:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f023 0203 	bic.w	r2, r3, #3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4934      	ldr	r1, [pc, #208]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015ec:	f7ff fb7e 	bl	8000cec <HAL_GetTick>
 80015f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f2:	e00a      	b.n	800160a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f4:	f7ff fb7a 	bl	8000cec <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001602:	4293      	cmp	r3, r2
 8001604:	d901      	bls.n	800160a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e04f      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160a:	4b2b      	ldr	r3, [pc, #172]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 020c 	and.w	r2, r3, #12
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	429a      	cmp	r2, r3
 800161a:	d1eb      	bne.n	80015f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800161c:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <HAL_RCC_ClockConfig+0x1b8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 030f 	and.w	r3, r3, #15
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d20c      	bcs.n	8001644 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162a:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <HAL_RCC_ClockConfig+0x1b8>)
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001632:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_RCC_ClockConfig+0x1b8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e032      	b.n	80016aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	d008      	beq.n	8001662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4916      	ldr	r1, [pc, #88]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	4313      	orrs	r3, r2
 8001660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d009      	beq.n	8001682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	490e      	ldr	r1, [pc, #56]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	4313      	orrs	r3, r2
 8001680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001682:	f000 fbb1 	bl	8001de8 <HAL_RCC_GetSysClockFreq>
 8001686:	4602      	mov	r2, r0
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	490a      	ldr	r1, [pc, #40]	; (80016bc <HAL_RCC_ClockConfig+0x1c0>)
 8001694:	5ccb      	ldrb	r3, [r1, r3]
 8001696:	fa22 f303 	lsr.w	r3, r2, r3
 800169a:	4a09      	ldr	r2, [pc, #36]	; (80016c0 <HAL_RCC_ClockConfig+0x1c4>)
 800169c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_RCC_ClockConfig+0x1c8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fa36 	bl	8000b14 <HAL_InitTick>

  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023c00 	.word	0x40023c00
 80016b8:	40023800 	.word	0x40023800
 80016bc:	080065ac 	.word	0x080065ac
 80016c0:	20000000 	.word	0x20000000
 80016c4:	20000004 	.word	0x20000004

080016c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_RCC_GetHCLKFreq+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000000 	.word	0x20000000

080016e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016e4:	f7ff fff0 	bl	80016c8 <HAL_RCC_GetHCLKFreq>
 80016e8:	4602      	mov	r2, r0
 80016ea:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	0a9b      	lsrs	r3, r3, #10
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	4903      	ldr	r1, [pc, #12]	; (8001704 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016f6:	5ccb      	ldrb	r3, [r1, r3]
 80016f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800
 8001704:	080065bc 	.word	0x080065bc

08001708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800170c:	f7ff ffdc 	bl	80016c8 <HAL_RCC_GetHCLKFreq>
 8001710:	4602      	mov	r2, r0
 8001712:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	0b5b      	lsrs	r3, r3, #13
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	4903      	ldr	r1, [pc, #12]	; (800172c <HAL_RCC_GetPCLK2Freq+0x24>)
 800171e:	5ccb      	ldrb	r3, [r1, r3]
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001724:	4618      	mov	r0, r3
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40023800 	.word	0x40023800
 800172c:	080065bc 	.word	0x080065bc

08001730 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	220f      	movs	r2, #15
 800173e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_RCC_GetClockConfig+0x5c>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 0203 	and.w	r2, r3, #3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_RCC_GetClockConfig+0x5c>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <HAL_RCC_GetClockConfig+0x5c>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_RCC_GetClockConfig+0x5c>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	08db      	lsrs	r3, r3, #3
 800176a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001772:	4b07      	ldr	r3, [pc, #28]	; (8001790 <HAL_RCC_GetClockConfig+0x60>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 020f 	and.w	r2, r3, #15
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	601a      	str	r2, [r3, #0]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800
 8001790:	40023c00 	.word	0x40023c00

08001794 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08c      	sub	sp, #48	; 0x30
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d010      	beq.n	80017ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80017cc:	4b6f      	ldr	r3, [pc, #444]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017d2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017da:	496c      	ldr	r1, [pc, #432]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80017ea:	2301      	movs	r3, #1
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d010      	beq.n	800181c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80017fa:	4b64      	ldr	r3, [pc, #400]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80017fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001800:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001808:	4960      	ldr	r1, [pc, #384]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800180a:	4313      	orrs	r3, r2
 800180c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001818:	2301      	movs	r3, #1
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d017      	beq.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001828:	4b58      	ldr	r3, [pc, #352]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800182a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800182e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4955      	ldr	r1, [pc, #340]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001838:	4313      	orrs	r3, r2
 800183a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001846:	d101      	bne.n	800184c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001848:	2301      	movs	r3, #1
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001854:	2301      	movs	r3, #1
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d017      	beq.n	8001894 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001864:	4b49      	ldr	r3, [pc, #292]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800186a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001872:	4946      	ldr	r1, [pc, #280]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001874:	4313      	orrs	r3, r2
 8001876:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001882:	d101      	bne.n	8001888 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001884:	2301      	movs	r3, #1
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001890:	2301      	movs	r3, #1
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0320 	and.w	r3, r3, #32
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 808a 	beq.w	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	4b39      	ldr	r3, [pc, #228]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a38      	ldr	r2, [pc, #224]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b36      	ldr	r3, [pc, #216]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80018be:	4b34      	ldr	r3, [pc, #208]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a33      	ldr	r2, [pc, #204]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80018c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80018ca:	f7ff fa0f 	bl	8000cec <HAL_GetTick>
 80018ce:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80018d0:	e008      	b.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80018d2:	f7ff fa0b 	bl	8000cec <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e278      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80018e4:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80018f0:	4b26      	ldr	r3, [pc, #152]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018f8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80018fa:	6a3b      	ldr	r3, [r7, #32]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d02f      	beq.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001908:	6a3a      	ldr	r2, [r7, #32]
 800190a:	429a      	cmp	r2, r3
 800190c:	d028      	beq.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800190e:	4b1f      	ldr	r3, [pc, #124]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001916:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800191a:	2201      	movs	r2, #1
 800191c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800191e:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001924:	4a19      	ldr	r2, [pc, #100]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001926:	6a3b      	ldr	r3, [r7, #32]
 8001928:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800192c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	2b01      	cmp	r3, #1
 8001934:	d114      	bne.n	8001960 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001936:	f7ff f9d9 	bl	8000cec <HAL_GetTick>
 800193a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193c:	e00a      	b.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800193e:	f7ff f9d5 	bl	8000cec <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	f241 3288 	movw	r2, #5000	; 0x1388
 800194c:	4293      	cmp	r3, r2
 800194e:	d901      	bls.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e240      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001954:	4b0d      	ldr	r3, [pc, #52]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0ee      	beq.n	800193e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800196c:	d114      	bne.n	8001998 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800197e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001982:	4902      	ldr	r1, [pc, #8]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]
 8001988:	e00c      	b.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	40007000 	.word	0x40007000
 8001994:	42470e40 	.word	0x42470e40
 8001998:	4b4a      	ldr	r3, [pc, #296]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4a49      	ldr	r2, [pc, #292]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800199e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80019a2:	6093      	str	r3, [r2, #8]
 80019a4:	4b47      	ldr	r3, [pc, #284]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b0:	4944      	ldr	r1, [pc, #272]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0310 	and.w	r3, r3, #16
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d004      	beq.n	80019cc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80019c8:	4b3f      	ldr	r3, [pc, #252]	; (8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80019ca:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00a      	beq.n	80019ee <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80019d8:	4b3a      	ldr	r3, [pc, #232]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	4937      	ldr	r1, [pc, #220]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00a      	beq.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80019fa:	4b32      	ldr	r3, [pc, #200]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80019fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a00:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a08:	492e      	ldr	r1, [pc, #184]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d011      	beq.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001a1c:	4b29      	ldr	r3, [pc, #164]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a22:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2a:	4926      	ldr	r1, [pc, #152]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00a      	beq.n	8001a62 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001a4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	491a      	ldr	r1, [pc, #104]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d011      	beq.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a74:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a7c:	4911      	ldr	r1, [pc, #68]	; (8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d005      	beq.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001aa0:	f040 80ff 	bne.w	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001aaa:	f7ff f91f 	bl	8000cec <HAL_GetTick>
 8001aae:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ab0:	e00e      	b.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ab2:	f7ff f91b 	bl	8000cec <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d907      	bls.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e188      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	424711e0 	.word	0x424711e0
 8001acc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ad0:	4b7e      	ldr	r3, [pc, #504]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1ea      	bne.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d009      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d028      	beq.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d124      	bne.n	8001b4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001b04:	4b71      	ldr	r3, [pc, #452]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b0a:	0c1b      	lsrs	r3, r3, #16
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	3301      	adds	r3, #1
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001b16:	4b6d      	ldr	r3, [pc, #436]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b1c:	0e1b      	lsrs	r3, r3, #24
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	019b      	lsls	r3, r3, #6
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	085b      	lsrs	r3, r3, #1
 8001b34:	3b01      	subs	r3, #1
 8001b36:	041b      	lsls	r3, r3, #16
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	061b      	lsls	r3, r3, #24
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	071b      	lsls	r3, r3, #28
 8001b46:	4961      	ldr	r1, [pc, #388]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d004      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b62:	d00a      	beq.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d035      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b78:	d130      	bne.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001b7a:	4b54      	ldr	r3, [pc, #336]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b80:	0c1b      	lsrs	r3, r3, #16
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	3301      	adds	r3, #1
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b8c:	4b4f      	ldr	r3, [pc, #316]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001b8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b92:	0f1b      	lsrs	r3, r3, #28
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	019b      	lsls	r3, r3, #6
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	085b      	lsrs	r3, r3, #1
 8001baa:	3b01      	subs	r3, #1
 8001bac:	041b      	lsls	r3, r3, #16
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	061b      	lsls	r3, r3, #24
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	071b      	lsls	r3, r3, #28
 8001bbc:	4943      	ldr	r1, [pc, #268]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001bc4:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bca:	f023 021f 	bic.w	r2, r3, #31
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	493d      	ldr	r1, [pc, #244]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d029      	beq.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bf0:	d124      	bne.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001bf2:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bf8:	0c1b      	lsrs	r3, r3, #16
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001c04:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c0a:	0f1b      	lsrs	r3, r3, #28
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	019b      	lsls	r3, r3, #6
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	085b      	lsrs	r3, r3, #1
 8001c24:	3b01      	subs	r3, #1
 8001c26:	041b      	lsls	r3, r3, #16
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	061b      	lsls	r3, r3, #24
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	071b      	lsls	r3, r3, #28
 8001c34:	4925      	ldr	r1, [pc, #148]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d016      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	019b      	lsls	r3, r3, #6
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	085b      	lsrs	r3, r3, #1
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	041b      	lsls	r3, r3, #16
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	061b      	lsls	r3, r3, #24
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	071b      	lsls	r3, r3, #28
 8001c6e:	4917      	ldr	r1, [pc, #92]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001c76:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c7c:	f7ff f836 	bl	8000cec <HAL_GetTick>
 8001c80:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c84:	f7ff f832 	bl	8000cec <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e09f      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0f0      	beq.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	f040 8095 	bne.w	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001cb0:	f7ff f81c 	bl	8000cec <HAL_GetTick>
 8001cb4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001cb6:	e00f      	b.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001cb8:	f7ff f818 	bl	8000cec <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d908      	bls.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e085      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	42470068 	.word	0x42470068
 8001cd4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001cd8:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ce0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ce4:	d0e8      	beq.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d009      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d02b      	beq.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d127      	bne.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001d0e:	4b34      	ldr	r3, [pc, #208]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d14:	0c1b      	lsrs	r3, r3, #16
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	699a      	ldr	r2, [r3, #24]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69db      	ldr	r3, [r3, #28]
 8001d28:	019b      	lsls	r3, r3, #6
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	085b      	lsrs	r3, r3, #1
 8001d30:	3b01      	subs	r3, #1
 8001d32:	041b      	lsls	r3, r3, #16
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	061b      	lsls	r3, r3, #24
 8001d3c:	4928      	ldr	r1, [pc, #160]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001d44:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d4a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	3b01      	subs	r3, #1
 8001d54:	021b      	lsls	r3, r3, #8
 8001d56:	4922      	ldr	r1, [pc, #136]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d01d      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d72:	d118      	bne.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001d74:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d7a:	0e1b      	lsrs	r3, r3, #24
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699a      	ldr	r2, [r3, #24]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	019b      	lsls	r3, r3, #6
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	085b      	lsrs	r3, r3, #1
 8001d94:	3b01      	subs	r3, #1
 8001d96:	041b      	lsls	r3, r3, #16
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	061b      	lsls	r3, r3, #24
 8001d9e:	4910      	ldr	r1, [pc, #64]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001da6:	4b0f      	ldr	r3, [pc, #60]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001dac:	f7fe ff9e 	bl	8000cec <HAL_GetTick>
 8001db0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001db4:	f7fe ff9a 	bl	8000cec <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e007      	b.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dd2:	d1ef      	bne.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3730      	adds	r7, #48	; 0x30
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800
 8001de4:	42470070 	.word	0x42470070

08001de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dec:	b088      	sub	sp, #32
 8001dee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e04:	4bce      	ldr	r3, [pc, #824]	; (8002140 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	2b0c      	cmp	r3, #12
 8001e0e:	f200 818d 	bhi.w	800212c <HAL_RCC_GetSysClockFreq+0x344>
 8001e12:	a201      	add	r2, pc, #4	; (adr r2, 8001e18 <HAL_RCC_GetSysClockFreq+0x30>)
 8001e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e18:	08001e4d 	.word	0x08001e4d
 8001e1c:	0800212d 	.word	0x0800212d
 8001e20:	0800212d 	.word	0x0800212d
 8001e24:	0800212d 	.word	0x0800212d
 8001e28:	08001e53 	.word	0x08001e53
 8001e2c:	0800212d 	.word	0x0800212d
 8001e30:	0800212d 	.word	0x0800212d
 8001e34:	0800212d 	.word	0x0800212d
 8001e38:	08001e59 	.word	0x08001e59
 8001e3c:	0800212d 	.word	0x0800212d
 8001e40:	0800212d 	.word	0x0800212d
 8001e44:	0800212d 	.word	0x0800212d
 8001e48:	08001fcd 	.word	0x08001fcd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e4c:	4bbd      	ldr	r3, [pc, #756]	; (8002144 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001e4e:	61bb      	str	r3, [r7, #24]
       break;
 8001e50:	e16f      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e52:	4bbd      	ldr	r3, [pc, #756]	; (8002148 <HAL_RCC_GetSysClockFreq+0x360>)
 8001e54:	61bb      	str	r3, [r7, #24]
      break;
 8001e56:	e16c      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e58:	4bb9      	ldr	r3, [pc, #740]	; (8002140 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e60:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e62:	4bb7      	ldr	r3, [pc, #732]	; (8002140 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d053      	beq.n	8001f16 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e6e:	4bb4      	ldr	r3, [pc, #720]	; (8002140 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	099b      	lsrs	r3, r3, #6
 8001e74:	461a      	mov	r2, r3
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e7e:	f04f 0100 	mov.w	r1, #0
 8001e82:	ea02 0400 	and.w	r4, r2, r0
 8001e86:	603c      	str	r4, [r7, #0]
 8001e88:	400b      	ands	r3, r1
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e90:	4620      	mov	r0, r4
 8001e92:	4629      	mov	r1, r5
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f04f 0300 	mov.w	r3, #0
 8001e9c:	014b      	lsls	r3, r1, #5
 8001e9e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ea2:	0142      	lsls	r2, r0, #5
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4623      	mov	r3, r4
 8001eaa:	1ac0      	subs	r0, r0, r3
 8001eac:	462b      	mov	r3, r5
 8001eae:	eb61 0103 	sbc.w	r1, r1, r3
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	018b      	lsls	r3, r1, #6
 8001ebc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ec0:	0182      	lsls	r2, r0, #6
 8001ec2:	1a12      	subs	r2, r2, r0
 8001ec4:	eb63 0301 	sbc.w	r3, r3, r1
 8001ec8:	f04f 0000 	mov.w	r0, #0
 8001ecc:	f04f 0100 	mov.w	r1, #0
 8001ed0:	00d9      	lsls	r1, r3, #3
 8001ed2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ed6:	00d0      	lsls	r0, r2, #3
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4621      	mov	r1, r4
 8001ede:	1852      	adds	r2, r2, r1
 8001ee0:	4629      	mov	r1, r5
 8001ee2:	eb43 0101 	adc.w	r1, r3, r1
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	f04f 0000 	mov.w	r0, #0
 8001eec:	f04f 0100 	mov.w	r1, #0
 8001ef0:	0259      	lsls	r1, r3, #9
 8001ef2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ef6:	0250      	lsls	r0, r2, #9
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	461a      	mov	r2, r3
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	f7fe f982 	bl	8000210 <__aeabi_uldivmod>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4613      	mov	r3, r2
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	e04c      	b.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f16:	4b8a      	ldr	r3, [pc, #552]	; (8002140 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	099b      	lsrs	r3, r3, #6
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f26:	f04f 0100 	mov.w	r1, #0
 8001f2a:	ea02 0a00 	and.w	sl, r2, r0
 8001f2e:	ea03 0b01 	and.w	fp, r3, r1
 8001f32:	4650      	mov	r0, sl
 8001f34:	4659      	mov	r1, fp
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	014b      	lsls	r3, r1, #5
 8001f40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f44:	0142      	lsls	r2, r0, #5
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	ebb0 000a 	subs.w	r0, r0, sl
 8001f4e:	eb61 010b 	sbc.w	r1, r1, fp
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	018b      	lsls	r3, r1, #6
 8001f5c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f60:	0182      	lsls	r2, r0, #6
 8001f62:	1a12      	subs	r2, r2, r0
 8001f64:	eb63 0301 	sbc.w	r3, r3, r1
 8001f68:	f04f 0000 	mov.w	r0, #0
 8001f6c:	f04f 0100 	mov.w	r1, #0
 8001f70:	00d9      	lsls	r1, r3, #3
 8001f72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f76:	00d0      	lsls	r0, r2, #3
 8001f78:	4602      	mov	r2, r0
 8001f7a:	460b      	mov	r3, r1
 8001f7c:	eb12 020a 	adds.w	r2, r2, sl
 8001f80:	eb43 030b 	adc.w	r3, r3, fp
 8001f84:	f04f 0000 	mov.w	r0, #0
 8001f88:	f04f 0100 	mov.w	r1, #0
 8001f8c:	0299      	lsls	r1, r3, #10
 8001f8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001f92:	0290      	lsls	r0, r2, #10
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	f04f 0300 	mov.w	r3, #0
 8001fa4:	f7fe f934 	bl	8000210 <__aeabi_uldivmod>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4613      	mov	r3, r2
 8001fae:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fb0:	4b63      	ldr	r3, [pc, #396]	; (8002140 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	0c1b      	lsrs	r3, r3, #16
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	3301      	adds	r3, #1
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc8:	61bb      	str	r3, [r7, #24]
      break;
 8001fca:	e0b2      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fcc:	4b5c      	ldr	r3, [pc, #368]	; (8002140 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fd4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fd6:	4b5a      	ldr	r3, [pc, #360]	; (8002140 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d04d      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe2:	4b57      	ldr	r3, [pc, #348]	; (8002140 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	099b      	lsrs	r3, r3, #6
 8001fe8:	461a      	mov	r2, r3
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001ff2:	f04f 0100 	mov.w	r1, #0
 8001ff6:	ea02 0800 	and.w	r8, r2, r0
 8001ffa:	ea03 0901 	and.w	r9, r3, r1
 8001ffe:	4640      	mov	r0, r8
 8002000:	4649      	mov	r1, r9
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	014b      	lsls	r3, r1, #5
 800200c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002010:	0142      	lsls	r2, r0, #5
 8002012:	4610      	mov	r0, r2
 8002014:	4619      	mov	r1, r3
 8002016:	ebb0 0008 	subs.w	r0, r0, r8
 800201a:	eb61 0109 	sbc.w	r1, r1, r9
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	018b      	lsls	r3, r1, #6
 8002028:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800202c:	0182      	lsls	r2, r0, #6
 800202e:	1a12      	subs	r2, r2, r0
 8002030:	eb63 0301 	sbc.w	r3, r3, r1
 8002034:	f04f 0000 	mov.w	r0, #0
 8002038:	f04f 0100 	mov.w	r1, #0
 800203c:	00d9      	lsls	r1, r3, #3
 800203e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002042:	00d0      	lsls	r0, r2, #3
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	eb12 0208 	adds.w	r2, r2, r8
 800204c:	eb43 0309 	adc.w	r3, r3, r9
 8002050:	f04f 0000 	mov.w	r0, #0
 8002054:	f04f 0100 	mov.w	r1, #0
 8002058:	0259      	lsls	r1, r3, #9
 800205a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800205e:	0250      	lsls	r0, r2, #9
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	461a      	mov	r2, r3
 800206c:	f04f 0300 	mov.w	r3, #0
 8002070:	f7fe f8ce 	bl	8000210 <__aeabi_uldivmod>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4613      	mov	r3, r2
 800207a:	61fb      	str	r3, [r7, #28]
 800207c:	e04a      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800207e:	4b30      	ldr	r3, [pc, #192]	; (8002140 <HAL_RCC_GetSysClockFreq+0x358>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	099b      	lsrs	r3, r3, #6
 8002084:	461a      	mov	r2, r3
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800208e:	f04f 0100 	mov.w	r1, #0
 8002092:	ea02 0400 	and.w	r4, r2, r0
 8002096:	ea03 0501 	and.w	r5, r3, r1
 800209a:	4620      	mov	r0, r4
 800209c:	4629      	mov	r1, r5
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	014b      	lsls	r3, r1, #5
 80020a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80020ac:	0142      	lsls	r2, r0, #5
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	1b00      	subs	r0, r0, r4
 80020b4:	eb61 0105 	sbc.w	r1, r1, r5
 80020b8:	f04f 0200 	mov.w	r2, #0
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	018b      	lsls	r3, r1, #6
 80020c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80020c6:	0182      	lsls	r2, r0, #6
 80020c8:	1a12      	subs	r2, r2, r0
 80020ca:	eb63 0301 	sbc.w	r3, r3, r1
 80020ce:	f04f 0000 	mov.w	r0, #0
 80020d2:	f04f 0100 	mov.w	r1, #0
 80020d6:	00d9      	lsls	r1, r3, #3
 80020d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020dc:	00d0      	lsls	r0, r2, #3
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	1912      	adds	r2, r2, r4
 80020e4:	eb45 0303 	adc.w	r3, r5, r3
 80020e8:	f04f 0000 	mov.w	r0, #0
 80020ec:	f04f 0100 	mov.w	r1, #0
 80020f0:	0299      	lsls	r1, r3, #10
 80020f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020f6:	0290      	lsls	r0, r2, #10
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4610      	mov	r0, r2
 80020fe:	4619      	mov	r1, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	461a      	mov	r2, r3
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	f7fe f882 	bl	8000210 <__aeabi_uldivmod>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4613      	mov	r3, r2
 8002112:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_RCC_GetSysClockFreq+0x358>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	0f1b      	lsrs	r3, r3, #28
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	fbb2 f3f3 	udiv	r3, r2, r3
 8002128:	61bb      	str	r3, [r7, #24]
      break;
 800212a:	e002      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_RCC_GetSysClockFreq+0x35c>)
 800212e:	61bb      	str	r3, [r7, #24]
      break;
 8002130:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002132:	69bb      	ldr	r3, [r7, #24]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3720      	adds	r7, #32
 8002138:	46bd      	mov	sp, r7
 800213a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800213e:	bf00      	nop
 8002140:	40023800 	.word	0x40023800
 8002144:	00f42400 	.word	0x00f42400
 8002148:	007a1200 	.word	0x007a1200

0800214c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e28d      	b.n	800267a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 8083 	beq.w	8002272 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800216c:	4b94      	ldr	r3, [pc, #592]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b04      	cmp	r3, #4
 8002176:	d019      	beq.n	80021ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002178:	4b91      	ldr	r3, [pc, #580]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002180:	2b08      	cmp	r3, #8
 8002182:	d106      	bne.n	8002192 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002184:	4b8e      	ldr	r3, [pc, #568]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002190:	d00c      	beq.n	80021ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002192:	4b8b      	ldr	r3, [pc, #556]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800219a:	2b0c      	cmp	r3, #12
 800219c:	d112      	bne.n	80021c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800219e:	4b88      	ldr	r3, [pc, #544]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021aa:	d10b      	bne.n	80021c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ac:	4b84      	ldr	r3, [pc, #528]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d05b      	beq.n	8002270 <HAL_RCC_OscConfig+0x124>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d157      	bne.n	8002270 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e25a      	b.n	800267a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021cc:	d106      	bne.n	80021dc <HAL_RCC_OscConfig+0x90>
 80021ce:	4b7c      	ldr	r3, [pc, #496]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a7b      	ldr	r2, [pc, #492]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 80021d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e01d      	b.n	8002218 <HAL_RCC_OscConfig+0xcc>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021e4:	d10c      	bne.n	8002200 <HAL_RCC_OscConfig+0xb4>
 80021e6:	4b76      	ldr	r3, [pc, #472]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a75      	ldr	r2, [pc, #468]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 80021ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021f0:	6013      	str	r3, [r2, #0]
 80021f2:	4b73      	ldr	r3, [pc, #460]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a72      	ldr	r2, [pc, #456]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 80021f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	e00b      	b.n	8002218 <HAL_RCC_OscConfig+0xcc>
 8002200:	4b6f      	ldr	r3, [pc, #444]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a6e      	ldr	r2, [pc, #440]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 8002206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220a:	6013      	str	r3, [r2, #0]
 800220c:	4b6c      	ldr	r3, [pc, #432]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a6b      	ldr	r2, [pc, #428]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 8002212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d013      	beq.n	8002248 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7fe fd64 	bl	8000cec <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002228:	f7fe fd60 	bl	8000cec <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b64      	cmp	r3, #100	; 0x64
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e21f      	b.n	800267a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800223a:	4b61      	ldr	r3, [pc, #388]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0xdc>
 8002246:	e014      	b.n	8002272 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7fe fd50 	bl	8000cec <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002250:	f7fe fd4c 	bl	8000cec <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	; 0x64
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e20b      	b.n	800267a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002262:	4b57      	ldr	r3, [pc, #348]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x104>
 800226e:	e000      	b.n	8002272 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d06f      	beq.n	800235e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800227e:	4b50      	ldr	r3, [pc, #320]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b00      	cmp	r3, #0
 8002288:	d017      	beq.n	80022ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800228a:	4b4d      	ldr	r3, [pc, #308]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002292:	2b08      	cmp	r3, #8
 8002294:	d105      	bne.n	80022a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002296:	4b4a      	ldr	r3, [pc, #296]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d00b      	beq.n	80022ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022a2:	4b47      	ldr	r3, [pc, #284]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022aa:	2b0c      	cmp	r3, #12
 80022ac:	d11c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ae:	4b44      	ldr	r3, [pc, #272]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d116      	bne.n	80022e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ba:	4b41      	ldr	r3, [pc, #260]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d005      	beq.n	80022d2 <HAL_RCC_OscConfig+0x186>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e1d3      	b.n	800267a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d2:	4b3b      	ldr	r3, [pc, #236]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4937      	ldr	r1, [pc, #220]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e6:	e03a      	b.n	800235e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d020      	beq.n	8002332 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022f0:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <HAL_RCC_OscConfig+0x278>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f6:	f7fe fcf9 	bl	8000cec <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022fe:	f7fe fcf5 	bl	8000cec <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e1b4      	b.n	800267a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002310:	4b2b      	ldr	r3, [pc, #172]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800231c:	4b28      	ldr	r3, [pc, #160]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4925      	ldr	r1, [pc, #148]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 800232c:	4313      	orrs	r3, r2
 800232e:	600b      	str	r3, [r1, #0]
 8002330:	e015      	b.n	800235e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002332:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <HAL_RCC_OscConfig+0x278>)
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7fe fcd8 	bl	8000cec <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002340:	f7fe fcd4 	bl	8000cec <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e193      	b.n	800267a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002352:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f0      	bne.n	8002340 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d036      	beq.n	80023d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d016      	beq.n	80023a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <HAL_RCC_OscConfig+0x27c>)
 8002374:	2201      	movs	r2, #1
 8002376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7fe fcb8 	bl	8000cec <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002380:	f7fe fcb4 	bl	8000cec <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e173      	b.n	800267a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002392:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_RCC_OscConfig+0x274>)
 8002394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x234>
 800239e:	e01b      	b.n	80023d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_RCC_OscConfig+0x27c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a6:	f7fe fca1 	bl	8000cec <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ac:	e00e      	b.n	80023cc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ae:	f7fe fc9d 	bl	8000cec <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d907      	bls.n	80023cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e15c      	b.n	800267a <HAL_RCC_OscConfig+0x52e>
 80023c0:	40023800 	.word	0x40023800
 80023c4:	42470000 	.word	0x42470000
 80023c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023cc:	4b8a      	ldr	r3, [pc, #552]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 80023ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1ea      	bne.n	80023ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 8097 	beq.w	8002514 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023ea:	4b83      	ldr	r3, [pc, #524]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10f      	bne.n	8002416 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	4b7f      	ldr	r3, [pc, #508]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	4a7e      	ldr	r2, [pc, #504]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 8002400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002404:	6413      	str	r3, [r2, #64]	; 0x40
 8002406:	4b7c      	ldr	r3, [pc, #496]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002412:	2301      	movs	r3, #1
 8002414:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002416:	4b79      	ldr	r3, [pc, #484]	; (80025fc <HAL_RCC_OscConfig+0x4b0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d118      	bne.n	8002454 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002422:	4b76      	ldr	r3, [pc, #472]	; (80025fc <HAL_RCC_OscConfig+0x4b0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a75      	ldr	r2, [pc, #468]	; (80025fc <HAL_RCC_OscConfig+0x4b0>)
 8002428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800242c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800242e:	f7fe fc5d 	bl	8000cec <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002436:	f7fe fc59 	bl	8000cec <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e118      	b.n	800267a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002448:	4b6c      	ldr	r3, [pc, #432]	; (80025fc <HAL_RCC_OscConfig+0x4b0>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d106      	bne.n	800246a <HAL_RCC_OscConfig+0x31e>
 800245c:	4b66      	ldr	r3, [pc, #408]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	4a65      	ldr	r2, [pc, #404]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	6713      	str	r3, [r2, #112]	; 0x70
 8002468:	e01c      	b.n	80024a4 <HAL_RCC_OscConfig+0x358>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2b05      	cmp	r3, #5
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x340>
 8002472:	4b61      	ldr	r3, [pc, #388]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002476:	4a60      	ldr	r2, [pc, #384]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 8002478:	f043 0304 	orr.w	r3, r3, #4
 800247c:	6713      	str	r3, [r2, #112]	; 0x70
 800247e:	4b5e      	ldr	r3, [pc, #376]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	4a5d      	ldr	r2, [pc, #372]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6713      	str	r3, [r2, #112]	; 0x70
 800248a:	e00b      	b.n	80024a4 <HAL_RCC_OscConfig+0x358>
 800248c:	4b5a      	ldr	r3, [pc, #360]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 800248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002490:	4a59      	ldr	r2, [pc, #356]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	6713      	str	r3, [r2, #112]	; 0x70
 8002498:	4b57      	ldr	r3, [pc, #348]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800249c:	4a56      	ldr	r2, [pc, #344]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 800249e:	f023 0304 	bic.w	r3, r3, #4
 80024a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d015      	beq.n	80024d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ac:	f7fe fc1e 	bl	8000cec <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024b4:	f7fe fc1a 	bl	8000cec <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e0d7      	b.n	800267a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ca:	4b4b      	ldr	r3, [pc, #300]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 80024cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0ee      	beq.n	80024b4 <HAL_RCC_OscConfig+0x368>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d8:	f7fe fc08 	bl	8000cec <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e0:	f7fe fc04 	bl	8000cec <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e0c1      	b.n	800267a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024f6:	4b40      	ldr	r3, [pc, #256]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 80024f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1ee      	bne.n	80024e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002502:	7dfb      	ldrb	r3, [r7, #23]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d105      	bne.n	8002514 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002508:	4b3b      	ldr	r3, [pc, #236]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 800250a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250c:	4a3a      	ldr	r2, [pc, #232]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 800250e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002512:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 80ad 	beq.w	8002678 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800251e:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b08      	cmp	r3, #8
 8002528:	d060      	beq.n	80025ec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d145      	bne.n	80025be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002532:	4b33      	ldr	r3, [pc, #204]	; (8002600 <HAL_RCC_OscConfig+0x4b4>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7fe fbd8 	bl	8000cec <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002540:	f7fe fbd4 	bl	8000cec <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e093      	b.n	800267a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002552:	4b29      	ldr	r3, [pc, #164]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69da      	ldr	r2, [r3, #28]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	019b      	lsls	r3, r3, #6
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002574:	085b      	lsrs	r3, r3, #1
 8002576:	3b01      	subs	r3, #1
 8002578:	041b      	lsls	r3, r3, #16
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	061b      	lsls	r3, r3, #24
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	071b      	lsls	r3, r3, #28
 800258a:	491b      	ldr	r1, [pc, #108]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002590:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <HAL_RCC_OscConfig+0x4b4>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002596:	f7fe fba9 	bl	8000cec <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259e:	f7fe fba5 	bl	8000cec <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e064      	b.n	800267a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x452>
 80025bc:	e05c      	b.n	8002678 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <HAL_RCC_OscConfig+0x4b4>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7fe fb92 	bl	8000cec <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025cc:	f7fe fb8e 	bl	8000cec <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e04d      	b.n	800267a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_RCC_OscConfig+0x4ac>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0x480>
 80025ea:	e045      	b.n	8002678 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d107      	bne.n	8002604 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e040      	b.n	800267a <HAL_RCC_OscConfig+0x52e>
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40007000 	.word	0x40007000
 8002600:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002604:	4b1f      	ldr	r3, [pc, #124]	; (8002684 <HAL_RCC_OscConfig+0x538>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d030      	beq.n	8002674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d129      	bne.n	8002674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d122      	bne.n	8002674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002634:	4013      	ands	r3, r2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800263a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800263c:	4293      	cmp	r3, r2
 800263e:	d119      	bne.n	8002674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	085b      	lsrs	r3, r3, #1
 800264c:	3b01      	subs	r3, #1
 800264e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002650:	429a      	cmp	r2, r3
 8002652:	d10f      	bne.n	8002674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002660:	429a      	cmp	r2, r3
 8002662:	d107      	bne.n	8002674 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800

08002688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e041      	b.n	800271e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f839 	bl	8002726 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3304      	adds	r3, #4
 80026c4:	4619      	mov	r1, r3
 80026c6:	4610      	mov	r0, r2
 80026c8:	f000 f9d8 	bl	8002a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274a:	b2db      	uxtb	r3, r3
 800274c:	2b01      	cmp	r3, #1
 800274e:	d001      	beq.n	8002754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e04e      	b.n	80027f2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2202      	movs	r2, #2
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a23      	ldr	r2, [pc, #140]	; (8002800 <HAL_TIM_Base_Start_IT+0xc4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d022      	beq.n	80027bc <HAL_TIM_Base_Start_IT+0x80>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277e:	d01d      	beq.n	80027bc <HAL_TIM_Base_Start_IT+0x80>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a1f      	ldr	r2, [pc, #124]	; (8002804 <HAL_TIM_Base_Start_IT+0xc8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d018      	beq.n	80027bc <HAL_TIM_Base_Start_IT+0x80>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a1e      	ldr	r2, [pc, #120]	; (8002808 <HAL_TIM_Base_Start_IT+0xcc>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d013      	beq.n	80027bc <HAL_TIM_Base_Start_IT+0x80>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a1c      	ldr	r2, [pc, #112]	; (800280c <HAL_TIM_Base_Start_IT+0xd0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d00e      	beq.n	80027bc <HAL_TIM_Base_Start_IT+0x80>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a1b      	ldr	r2, [pc, #108]	; (8002810 <HAL_TIM_Base_Start_IT+0xd4>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d009      	beq.n	80027bc <HAL_TIM_Base_Start_IT+0x80>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a19      	ldr	r2, [pc, #100]	; (8002814 <HAL_TIM_Base_Start_IT+0xd8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d004      	beq.n	80027bc <HAL_TIM_Base_Start_IT+0x80>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a18      	ldr	r2, [pc, #96]	; (8002818 <HAL_TIM_Base_Start_IT+0xdc>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d111      	bne.n	80027e0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	d010      	beq.n	80027f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f042 0201 	orr.w	r2, r2, #1
 80027dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027de:	e007      	b.n	80027f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3714      	adds	r7, #20
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40010000 	.word	0x40010000
 8002804:	40000400 	.word	0x40000400
 8002808:	40000800 	.word	0x40000800
 800280c:	40000c00 	.word	0x40000c00
 8002810:	40010400 	.word	0x40010400
 8002814:	40014000 	.word	0x40014000
 8002818:	40001800 	.word	0x40001800

0800281c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b02      	cmp	r3, #2
 8002830:	d122      	bne.n	8002878 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b02      	cmp	r3, #2
 800283e:	d11b      	bne.n	8002878 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0202 	mvn.w	r2, #2
 8002848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f8ee 	bl	8002a40 <HAL_TIM_IC_CaptureCallback>
 8002864:	e005      	b.n	8002872 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f8e0 	bl	8002a2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f8f1 	bl	8002a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b04      	cmp	r3, #4
 8002884:	d122      	bne.n	80028cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b04      	cmp	r3, #4
 8002892:	d11b      	bne.n	80028cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f06f 0204 	mvn.w	r2, #4
 800289c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2202      	movs	r2, #2
 80028a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d003      	beq.n	80028ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f8c4 	bl	8002a40 <HAL_TIM_IC_CaptureCallback>
 80028b8:	e005      	b.n	80028c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f8b6 	bl	8002a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f8c7 	bl	8002a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f003 0308 	and.w	r3, r3, #8
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d122      	bne.n	8002920 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d11b      	bne.n	8002920 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0208 	mvn.w	r2, #8
 80028f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2204      	movs	r2, #4
 80028f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f89a 	bl	8002a40 <HAL_TIM_IC_CaptureCallback>
 800290c:	e005      	b.n	800291a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f88c 	bl	8002a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f89d 	bl	8002a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	f003 0310 	and.w	r3, r3, #16
 800292a:	2b10      	cmp	r3, #16
 800292c:	d122      	bne.n	8002974 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b10      	cmp	r3, #16
 800293a:	d11b      	bne.n	8002974 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0210 	mvn.w	r2, #16
 8002944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2208      	movs	r2, #8
 800294a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f870 	bl	8002a40 <HAL_TIM_IC_CaptureCallback>
 8002960:	e005      	b.n	800296e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f862 	bl	8002a2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f873 	bl	8002a54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b01      	cmp	r3, #1
 8002980:	d10e      	bne.n	80029a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b01      	cmp	r3, #1
 800298e:	d107      	bne.n	80029a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f06f 0201 	mvn.w	r2, #1
 8002998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fd ff88 	bl	80008b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029aa:	2b80      	cmp	r3, #128	; 0x80
 80029ac:	d10e      	bne.n	80029cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b8:	2b80      	cmp	r3, #128	; 0x80
 80029ba:	d107      	bne.n	80029cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80029c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f902 	bl	8002bd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d6:	2b40      	cmp	r3, #64	; 0x40
 80029d8:	d10e      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029e4:	2b40      	cmp	r3, #64	; 0x40
 80029e6:	d107      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f838 	bl	8002a68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	d10e      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	d107      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0220 	mvn.w	r2, #32
 8002a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f8cc 	bl	8002bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a40      	ldr	r2, [pc, #256]	; (8002b90 <TIM_Base_SetConfig+0x114>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d013      	beq.n	8002abc <TIM_Base_SetConfig+0x40>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9a:	d00f      	beq.n	8002abc <TIM_Base_SetConfig+0x40>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a3d      	ldr	r2, [pc, #244]	; (8002b94 <TIM_Base_SetConfig+0x118>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00b      	beq.n	8002abc <TIM_Base_SetConfig+0x40>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a3c      	ldr	r2, [pc, #240]	; (8002b98 <TIM_Base_SetConfig+0x11c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d007      	beq.n	8002abc <TIM_Base_SetConfig+0x40>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a3b      	ldr	r2, [pc, #236]	; (8002b9c <TIM_Base_SetConfig+0x120>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d003      	beq.n	8002abc <TIM_Base_SetConfig+0x40>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a3a      	ldr	r2, [pc, #232]	; (8002ba0 <TIM_Base_SetConfig+0x124>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d108      	bne.n	8002ace <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a2f      	ldr	r2, [pc, #188]	; (8002b90 <TIM_Base_SetConfig+0x114>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d02b      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002adc:	d027      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a2c      	ldr	r2, [pc, #176]	; (8002b94 <TIM_Base_SetConfig+0x118>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d023      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a2b      	ldr	r2, [pc, #172]	; (8002b98 <TIM_Base_SetConfig+0x11c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d01f      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a2a      	ldr	r2, [pc, #168]	; (8002b9c <TIM_Base_SetConfig+0x120>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d01b      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a29      	ldr	r2, [pc, #164]	; (8002ba0 <TIM_Base_SetConfig+0x124>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d017      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a28      	ldr	r2, [pc, #160]	; (8002ba4 <TIM_Base_SetConfig+0x128>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a27      	ldr	r2, [pc, #156]	; (8002ba8 <TIM_Base_SetConfig+0x12c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00f      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a26      	ldr	r2, [pc, #152]	; (8002bac <TIM_Base_SetConfig+0x130>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00b      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a25      	ldr	r2, [pc, #148]	; (8002bb0 <TIM_Base_SetConfig+0x134>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d007      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <TIM_Base_SetConfig+0x138>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d003      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a23      	ldr	r2, [pc, #140]	; (8002bb8 <TIM_Base_SetConfig+0x13c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d108      	bne.n	8002b40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <TIM_Base_SetConfig+0x114>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d003      	beq.n	8002b74 <TIM_Base_SetConfig+0xf8>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a0c      	ldr	r2, [pc, #48]	; (8002ba0 <TIM_Base_SetConfig+0x124>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d103      	bne.n	8002b7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	615a      	str	r2, [r3, #20]
}
 8002b82:	bf00      	nop
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40010000 	.word	0x40010000
 8002b94:	40000400 	.word	0x40000400
 8002b98:	40000800 	.word	0x40000800
 8002b9c:	40000c00 	.word	0x40000c00
 8002ba0:	40010400 	.word	0x40010400
 8002ba4:	40014000 	.word	0x40014000
 8002ba8:	40014400 	.word	0x40014400
 8002bac:	40014800 	.word	0x40014800
 8002bb0:	40001800 	.word	0x40001800
 8002bb4:	40001c00 	.word	0x40001c00
 8002bb8:	40002000 	.word	0x40002000

08002bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e03f      	b.n	8002c76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7fd fe94 	bl	8000938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2224      	movs	r2, #36	; 0x24
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f929 	bl	8002e80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b08a      	sub	sp, #40	; 0x28
 8002c82:	af02      	add	r7, sp, #8
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	603b      	str	r3, [r7, #0]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b20      	cmp	r3, #32
 8002c9c:	d17c      	bne.n	8002d98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_UART_Transmit+0x2c>
 8002ca4:	88fb      	ldrh	r3, [r7, #6]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e075      	b.n	8002d9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d101      	bne.n	8002cbc <HAL_UART_Transmit+0x3e>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	e06e      	b.n	8002d9a <HAL_UART_Transmit+0x11c>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2221      	movs	r2, #33	; 0x21
 8002cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cd2:	f7fe f80b 	bl	8000cec <HAL_GetTick>
 8002cd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	88fa      	ldrh	r2, [r7, #6]
 8002cdc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	88fa      	ldrh	r2, [r7, #6]
 8002ce2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cec:	d108      	bne.n	8002d00 <HAL_UART_Transmit+0x82>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d104      	bne.n	8002d00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	61bb      	str	r3, [r7, #24]
 8002cfe:	e003      	b.n	8002d08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d04:	2300      	movs	r3, #0
 8002d06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d10:	e02a      	b.n	8002d68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2180      	movs	r1, #128	; 0x80
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f840 	bl	8002da2 <UART_WaitOnFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e036      	b.n	8002d9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10b      	bne.n	8002d4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	3302      	adds	r3, #2
 8002d46:	61bb      	str	r3, [r7, #24]
 8002d48:	e007      	b.n	8002d5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	781a      	ldrb	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	3301      	adds	r3, #1
 8002d58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1cf      	bne.n	8002d12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2140      	movs	r1, #64	; 0x40
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f810 	bl	8002da2 <UART_WaitOnFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e006      	b.n	8002d9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e000      	b.n	8002d9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d98:	2302      	movs	r3, #2
  }
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3720      	adds	r7, #32
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b090      	sub	sp, #64	; 0x40
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	603b      	str	r3, [r7, #0]
 8002dae:	4613      	mov	r3, r2
 8002db0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002db2:	e050      	b.n	8002e56 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dba:	d04c      	beq.n	8002e56 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d007      	beq.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002dc2:	f7fd ff93 	bl	8000cec <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d241      	bcs.n	8002e56 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	330c      	adds	r3, #12
 8002dd8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002de8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	330c      	adds	r3, #12
 8002df0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002df2:	637a      	str	r2, [r7, #52]	; 0x34
 8002df4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002df8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dfa:	e841 2300 	strex	r3, r2, [r1]
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1e5      	bne.n	8002dd2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	3314      	adds	r3, #20
 8002e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	e853 3f00 	ldrex	r3, [r3]
 8002e14:	613b      	str	r3, [r7, #16]
   return(result);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f023 0301 	bic.w	r3, r3, #1
 8002e1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3314      	adds	r3, #20
 8002e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e26:	623a      	str	r2, [r7, #32]
 8002e28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2a:	69f9      	ldr	r1, [r7, #28]
 8002e2c:	6a3a      	ldr	r2, [r7, #32]
 8002e2e:	e841 2300 	strex	r3, r2, [r1]
 8002e32:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1e5      	bne.n	8002e06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e00f      	b.n	8002e76 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	bf0c      	ite	eq
 8002e66:	2301      	moveq	r3, #1
 8002e68:	2300      	movne	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d09f      	beq.n	8002db4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3740      	adds	r7, #64	; 0x40
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e84:	b09f      	sub	sp, #124	; 0x7c
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e96:	68d9      	ldr	r1, [r3, #12]
 8002e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	ea40 0301 	orr.w	r3, r0, r1
 8002ea0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ec4:	f021 010c 	bic.w	r1, r1, #12
 8002ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ece:	430b      	orrs	r3, r1
 8002ed0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ede:	6999      	ldr	r1, [r3, #24]
 8002ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	ea40 0301 	orr.w	r3, r0, r1
 8002ee8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	4bc5      	ldr	r3, [pc, #788]	; (8003204 <UART_SetConfig+0x384>)
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d004      	beq.n	8002efe <UART_SetConfig+0x7e>
 8002ef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4bc3      	ldr	r3, [pc, #780]	; (8003208 <UART_SetConfig+0x388>)
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d103      	bne.n	8002f06 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002efe:	f7fe fc03 	bl	8001708 <HAL_RCC_GetPCLK2Freq>
 8002f02:	6778      	str	r0, [r7, #116]	; 0x74
 8002f04:	e002      	b.n	8002f0c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f06:	f7fe fbeb 	bl	80016e0 <HAL_RCC_GetPCLK1Freq>
 8002f0a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f14:	f040 80b6 	bne.w	8003084 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f1a:	461c      	mov	r4, r3
 8002f1c:	f04f 0500 	mov.w	r5, #0
 8002f20:	4622      	mov	r2, r4
 8002f22:	462b      	mov	r3, r5
 8002f24:	1891      	adds	r1, r2, r2
 8002f26:	6439      	str	r1, [r7, #64]	; 0x40
 8002f28:	415b      	adcs	r3, r3
 8002f2a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f2c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f30:	1912      	adds	r2, r2, r4
 8002f32:	eb45 0303 	adc.w	r3, r5, r3
 8002f36:	f04f 0000 	mov.w	r0, #0
 8002f3a:	f04f 0100 	mov.w	r1, #0
 8002f3e:	00d9      	lsls	r1, r3, #3
 8002f40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f44:	00d0      	lsls	r0, r2, #3
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	1911      	adds	r1, r2, r4
 8002f4c:	6639      	str	r1, [r7, #96]	; 0x60
 8002f4e:	416b      	adcs	r3, r5
 8002f50:	667b      	str	r3, [r7, #100]	; 0x64
 8002f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	461a      	mov	r2, r3
 8002f58:	f04f 0300 	mov.w	r3, #0
 8002f5c:	1891      	adds	r1, r2, r2
 8002f5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f60:	415b      	adcs	r3, r3
 8002f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002f68:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002f6c:	f7fd f950 	bl	8000210 <__aeabi_uldivmod>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4ba5      	ldr	r3, [pc, #660]	; (800320c <UART_SetConfig+0x38c>)
 8002f76:	fba3 2302 	umull	r2, r3, r3, r2
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	011e      	lsls	r6, r3, #4
 8002f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f80:	461c      	mov	r4, r3
 8002f82:	f04f 0500 	mov.w	r5, #0
 8002f86:	4622      	mov	r2, r4
 8002f88:	462b      	mov	r3, r5
 8002f8a:	1891      	adds	r1, r2, r2
 8002f8c:	6339      	str	r1, [r7, #48]	; 0x30
 8002f8e:	415b      	adcs	r3, r3
 8002f90:	637b      	str	r3, [r7, #52]	; 0x34
 8002f92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f96:	1912      	adds	r2, r2, r4
 8002f98:	eb45 0303 	adc.w	r3, r5, r3
 8002f9c:	f04f 0000 	mov.w	r0, #0
 8002fa0:	f04f 0100 	mov.w	r1, #0
 8002fa4:	00d9      	lsls	r1, r3, #3
 8002fa6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002faa:	00d0      	lsls	r0, r2, #3
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	1911      	adds	r1, r2, r4
 8002fb2:	65b9      	str	r1, [r7, #88]	; 0x58
 8002fb4:	416b      	adcs	r3, r5
 8002fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	1891      	adds	r1, r2, r2
 8002fc4:	62b9      	str	r1, [r7, #40]	; 0x28
 8002fc6:	415b      	adcs	r3, r3
 8002fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fce:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002fd2:	f7fd f91d 	bl	8000210 <__aeabi_uldivmod>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4b8c      	ldr	r3, [pc, #560]	; (800320c <UART_SetConfig+0x38c>)
 8002fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe0:	095b      	lsrs	r3, r3, #5
 8002fe2:	2164      	movs	r1, #100	; 0x64
 8002fe4:	fb01 f303 	mul.w	r3, r1, r3
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	3332      	adds	r3, #50	; 0x32
 8002fee:	4a87      	ldr	r2, [pc, #540]	; (800320c <UART_SetConfig+0x38c>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	095b      	lsrs	r3, r3, #5
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002ffc:	441e      	add	r6, r3
 8002ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003000:	4618      	mov	r0, r3
 8003002:	f04f 0100 	mov.w	r1, #0
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	1894      	adds	r4, r2, r2
 800300c:	623c      	str	r4, [r7, #32]
 800300e:	415b      	adcs	r3, r3
 8003010:	627b      	str	r3, [r7, #36]	; 0x24
 8003012:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003016:	1812      	adds	r2, r2, r0
 8003018:	eb41 0303 	adc.w	r3, r1, r3
 800301c:	f04f 0400 	mov.w	r4, #0
 8003020:	f04f 0500 	mov.w	r5, #0
 8003024:	00dd      	lsls	r5, r3, #3
 8003026:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800302a:	00d4      	lsls	r4, r2, #3
 800302c:	4622      	mov	r2, r4
 800302e:	462b      	mov	r3, r5
 8003030:	1814      	adds	r4, r2, r0
 8003032:	653c      	str	r4, [r7, #80]	; 0x50
 8003034:	414b      	adcs	r3, r1
 8003036:	657b      	str	r3, [r7, #84]	; 0x54
 8003038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	461a      	mov	r2, r3
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	1891      	adds	r1, r2, r2
 8003044:	61b9      	str	r1, [r7, #24]
 8003046:	415b      	adcs	r3, r3
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800304e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003052:	f7fd f8dd 	bl	8000210 <__aeabi_uldivmod>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4b6c      	ldr	r3, [pc, #432]	; (800320c <UART_SetConfig+0x38c>)
 800305c:	fba3 1302 	umull	r1, r3, r3, r2
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	2164      	movs	r1, #100	; 0x64
 8003064:	fb01 f303 	mul.w	r3, r1, r3
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	3332      	adds	r3, #50	; 0x32
 800306e:	4a67      	ldr	r2, [pc, #412]	; (800320c <UART_SetConfig+0x38c>)
 8003070:	fba2 2303 	umull	r2, r3, r2, r3
 8003074:	095b      	lsrs	r3, r3, #5
 8003076:	f003 0207 	and.w	r2, r3, #7
 800307a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4432      	add	r2, r6
 8003080:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003082:	e0b9      	b.n	80031f8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003084:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003086:	461c      	mov	r4, r3
 8003088:	f04f 0500 	mov.w	r5, #0
 800308c:	4622      	mov	r2, r4
 800308e:	462b      	mov	r3, r5
 8003090:	1891      	adds	r1, r2, r2
 8003092:	6139      	str	r1, [r7, #16]
 8003094:	415b      	adcs	r3, r3
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800309c:	1912      	adds	r2, r2, r4
 800309e:	eb45 0303 	adc.w	r3, r5, r3
 80030a2:	f04f 0000 	mov.w	r0, #0
 80030a6:	f04f 0100 	mov.w	r1, #0
 80030aa:	00d9      	lsls	r1, r3, #3
 80030ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030b0:	00d0      	lsls	r0, r2, #3
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	eb12 0804 	adds.w	r8, r2, r4
 80030ba:	eb43 0905 	adc.w	r9, r3, r5
 80030be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f04f 0100 	mov.w	r1, #0
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	008b      	lsls	r3, r1, #2
 80030d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80030d6:	0082      	lsls	r2, r0, #2
 80030d8:	4640      	mov	r0, r8
 80030da:	4649      	mov	r1, r9
 80030dc:	f7fd f898 	bl	8000210 <__aeabi_uldivmod>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4b49      	ldr	r3, [pc, #292]	; (800320c <UART_SetConfig+0x38c>)
 80030e6:	fba3 2302 	umull	r2, r3, r3, r2
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	011e      	lsls	r6, r3, #4
 80030ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030f0:	4618      	mov	r0, r3
 80030f2:	f04f 0100 	mov.w	r1, #0
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	1894      	adds	r4, r2, r2
 80030fc:	60bc      	str	r4, [r7, #8]
 80030fe:	415b      	adcs	r3, r3
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003106:	1812      	adds	r2, r2, r0
 8003108:	eb41 0303 	adc.w	r3, r1, r3
 800310c:	f04f 0400 	mov.w	r4, #0
 8003110:	f04f 0500 	mov.w	r5, #0
 8003114:	00dd      	lsls	r5, r3, #3
 8003116:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800311a:	00d4      	lsls	r4, r2, #3
 800311c:	4622      	mov	r2, r4
 800311e:	462b      	mov	r3, r5
 8003120:	1814      	adds	r4, r2, r0
 8003122:	64bc      	str	r4, [r7, #72]	; 0x48
 8003124:	414b      	adcs	r3, r1
 8003126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	4618      	mov	r0, r3
 800312e:	f04f 0100 	mov.w	r1, #0
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	008b      	lsls	r3, r1, #2
 800313c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003140:	0082      	lsls	r2, r0, #2
 8003142:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003146:	f7fd f863 	bl	8000210 <__aeabi_uldivmod>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4b2f      	ldr	r3, [pc, #188]	; (800320c <UART_SetConfig+0x38c>)
 8003150:	fba3 1302 	umull	r1, r3, r3, r2
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	2164      	movs	r1, #100	; 0x64
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	3332      	adds	r3, #50	; 0x32
 8003162:	4a2a      	ldr	r2, [pc, #168]	; (800320c <UART_SetConfig+0x38c>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800316e:	441e      	add	r6, r3
 8003170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003172:	4618      	mov	r0, r3
 8003174:	f04f 0100 	mov.w	r1, #0
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	1894      	adds	r4, r2, r2
 800317e:	603c      	str	r4, [r7, #0]
 8003180:	415b      	adcs	r3, r3
 8003182:	607b      	str	r3, [r7, #4]
 8003184:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003188:	1812      	adds	r2, r2, r0
 800318a:	eb41 0303 	adc.w	r3, r1, r3
 800318e:	f04f 0400 	mov.w	r4, #0
 8003192:	f04f 0500 	mov.w	r5, #0
 8003196:	00dd      	lsls	r5, r3, #3
 8003198:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800319c:	00d4      	lsls	r4, r2, #3
 800319e:	4622      	mov	r2, r4
 80031a0:	462b      	mov	r3, r5
 80031a2:	eb12 0a00 	adds.w	sl, r2, r0
 80031a6:	eb43 0b01 	adc.w	fp, r3, r1
 80031aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f04f 0100 	mov.w	r1, #0
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	008b      	lsls	r3, r1, #2
 80031be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80031c2:	0082      	lsls	r2, r0, #2
 80031c4:	4650      	mov	r0, sl
 80031c6:	4659      	mov	r1, fp
 80031c8:	f7fd f822 	bl	8000210 <__aeabi_uldivmod>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	4b0e      	ldr	r3, [pc, #56]	; (800320c <UART_SetConfig+0x38c>)
 80031d2:	fba3 1302 	umull	r1, r3, r3, r2
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	2164      	movs	r1, #100	; 0x64
 80031da:	fb01 f303 	mul.w	r3, r1, r3
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	3332      	adds	r3, #50	; 0x32
 80031e4:	4a09      	ldr	r2, [pc, #36]	; (800320c <UART_SetConfig+0x38c>)
 80031e6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	f003 020f 	and.w	r2, r3, #15
 80031f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4432      	add	r2, r6
 80031f6:	609a      	str	r2, [r3, #8]
}
 80031f8:	bf00      	nop
 80031fa:	377c      	adds	r7, #124	; 0x7c
 80031fc:	46bd      	mov	sp, r7
 80031fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003202:	bf00      	nop
 8003204:	40011000 	.word	0x40011000
 8003208:	40011400 	.word	0x40011400
 800320c:	51eb851f 	.word	0x51eb851f

08003210 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003210:	b084      	sub	sp, #16
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	f107 001c 	add.w	r0, r7, #28
 800321e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	2b01      	cmp	r3, #1
 8003226:	d122      	bne.n	800326e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800323c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003252:	2b01      	cmp	r3, #1
 8003254:	d105      	bne.n	8003262 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 fa7c 	bl	8003760 <USB_CoreReset>
 8003268:	4603      	mov	r3, r0
 800326a:	73fb      	strb	r3, [r7, #15]
 800326c:	e01a      	b.n	80032a4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fa70 	bl	8003760 <USB_CoreReset>
 8003280:	4603      	mov	r3, r0
 8003282:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d106      	bne.n	8003298 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800328e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	639a      	str	r2, [r3, #56]	; 0x38
 8003296:	e005      	b.n	80032a4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80032a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d10b      	bne.n	80032c2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f043 0206 	orr.w	r2, r3, #6
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f043 0220 	orr.w	r2, r3, #32
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80032c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80032ce:	b004      	add	sp, #16
 80032d0:	4770      	bx	lr

080032d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	f023 0201 	bic.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d115      	bne.n	8003342 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003322:	2001      	movs	r0, #1
 8003324:	f7fd fcee 	bl	8000d04 <HAL_Delay>
      ms++;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	3301      	adds	r3, #1
 800332c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fa08 	bl	8003744 <USB_GetMode>
 8003334:	4603      	mov	r3, r0
 8003336:	2b01      	cmp	r3, #1
 8003338:	d01e      	beq.n	8003378 <USB_SetCurrentMode+0x84>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b31      	cmp	r3, #49	; 0x31
 800333e:	d9f0      	bls.n	8003322 <USB_SetCurrentMode+0x2e>
 8003340:	e01a      	b.n	8003378 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d115      	bne.n	8003374 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003354:	2001      	movs	r0, #1
 8003356:	f7fd fcd5 	bl	8000d04 <HAL_Delay>
      ms++;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	3301      	adds	r3, #1
 800335e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f9ef 	bl	8003744 <USB_GetMode>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d005      	beq.n	8003378 <USB_SetCurrentMode+0x84>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b31      	cmp	r3, #49	; 0x31
 8003370:	d9f0      	bls.n	8003354 <USB_SetCurrentMode+0x60>
 8003372:	e001      	b.n	8003378 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e005      	b.n	8003384 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b32      	cmp	r3, #50	; 0x32
 800337c:	d101      	bne.n	8003382 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800338c:	b084      	sub	sp, #16
 800338e:	b580      	push	{r7, lr}
 8003390:	b086      	sub	sp, #24
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800339a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80033a6:	2300      	movs	r3, #0
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	e009      	b.n	80033c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	3340      	adds	r3, #64	; 0x40
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	2200      	movs	r2, #0
 80033b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	3301      	adds	r3, #1
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b0e      	cmp	r3, #14
 80033c4:	d9f2      	bls.n	80033ac <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80033c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d11c      	bne.n	8003406 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033da:	f043 0302 	orr.w	r3, r3, #2
 80033de:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	e005      	b.n	8003412 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003418:	461a      	mov	r2, r3
 800341a:	2300      	movs	r3, #0
 800341c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003424:	4619      	mov	r1, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800342c:	461a      	mov	r2, r3
 800342e:	680b      	ldr	r3, [r1, #0]
 8003430:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003434:	2b01      	cmp	r3, #1
 8003436:	d10c      	bne.n	8003452 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343a:	2b00      	cmp	r3, #0
 800343c:	d104      	bne.n	8003448 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800343e:	2100      	movs	r1, #0
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f945 	bl	80036d0 <USB_SetDevSpeed>
 8003446:	e008      	b.n	800345a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003448:	2101      	movs	r1, #1
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f940 	bl	80036d0 <USB_SetDevSpeed>
 8003450:	e003      	b.n	800345a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003452:	2103      	movs	r1, #3
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f93b 	bl	80036d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800345a:	2110      	movs	r1, #16
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f8f3 	bl	8003648 <USB_FlushTxFifo>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f90f 	bl	8003690 <USB_FlushRxFifo>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003482:	461a      	mov	r2, r3
 8003484:	2300      	movs	r3, #0
 8003486:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800348e:	461a      	mov	r2, r3
 8003490:	2300      	movs	r3, #0
 8003492:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800349a:	461a      	mov	r2, r3
 800349c:	2300      	movs	r3, #0
 800349e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034a0:	2300      	movs	r3, #0
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	e043      	b.n	800352e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034bc:	d118      	bne.n	80034f0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10a      	bne.n	80034da <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	015a      	lsls	r2, r3, #5
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	4413      	add	r3, r2
 80034cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d0:	461a      	mov	r2, r3
 80034d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034d6:	6013      	str	r3, [r2, #0]
 80034d8:	e013      	b.n	8003502 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e6:	461a      	mov	r2, r3
 80034e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	e008      	b.n	8003502 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034fc:	461a      	mov	r2, r3
 80034fe:	2300      	movs	r3, #0
 8003500:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800350e:	461a      	mov	r2, r3
 8003510:	2300      	movs	r3, #0
 8003512:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4413      	add	r3, r2
 800351c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003520:	461a      	mov	r2, r3
 8003522:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003526:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	3301      	adds	r3, #1
 800352c:	613b      	str	r3, [r7, #16]
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	429a      	cmp	r2, r3
 8003534:	d3b7      	bcc.n	80034a6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	e043      	b.n	80035c4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	015a      	lsls	r2, r3, #5
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4413      	add	r3, r2
 8003544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800354e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003552:	d118      	bne.n	8003586 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10a      	bne.n	8003570 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4413      	add	r3, r2
 8003562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003566:	461a      	mov	r2, r3
 8003568:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e013      	b.n	8003598 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800357c:	461a      	mov	r2, r3
 800357e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	e008      	b.n	8003598 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4413      	add	r3, r2
 800358e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003592:	461a      	mov	r2, r3
 8003594:	2300      	movs	r3, #0
 8003596:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a4:	461a      	mov	r2, r3
 80035a6:	2300      	movs	r3, #0
 80035a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b6:	461a      	mov	r2, r3
 80035b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	3301      	adds	r3, #1
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d3b7      	bcc.n	800353c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80035ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d105      	bne.n	8003600 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	f043 0210 	orr.w	r2, r3, #16
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	699a      	ldr	r2, [r3, #24]
 8003604:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <USB_DevInit+0x2b8>)
 8003606:	4313      	orrs	r3, r2
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800360c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	f043 0208 	orr.w	r2, r3, #8
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800361e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003620:	2b01      	cmp	r3, #1
 8003622:	d107      	bne.n	8003634 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800362c:	f043 0304 	orr.w	r3, r3, #4
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003634:	7dfb      	ldrb	r3, [r7, #23]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003640:	b004      	add	sp, #16
 8003642:	4770      	bx	lr
 8003644:	803c3800 	.word	0x803c3800

08003648 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	019b      	lsls	r3, r3, #6
 800365a:	f043 0220 	orr.w	r2, r3, #32
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	3301      	adds	r3, #1
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	4a08      	ldr	r2, [pc, #32]	; (800368c <USB_FlushTxFifo+0x44>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e006      	b.n	8003680 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f003 0320 	and.w	r3, r3, #32
 800367a:	2b20      	cmp	r3, #32
 800367c:	d0f1      	beq.n	8003662 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	00030d40 	.word	0x00030d40

08003690 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2210      	movs	r2, #16
 80036a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3301      	adds	r3, #1
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	4a08      	ldr	r2, [pc, #32]	; (80036cc <USB_FlushRxFifo+0x3c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e006      	b.n	80036c0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f003 0310 	and.w	r3, r3, #16
 80036ba:	2b10      	cmp	r3, #16
 80036bc:	d0f1      	beq.n	80036a2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80036be:	2300      	movs	r3, #0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	00030d40 	.word	0x00030d40

080036d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	68f9      	ldr	r1, [r7, #12]
 80036ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036f0:	4313      	orrs	r3, r2
 80036f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800371c:	f023 0303 	bic.w	r3, r3, #3
 8003720:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003730:	f043 0302 	orr.w	r3, r3, #2
 8003734:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3714      	adds	r7, #20
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	f003 0301 	and.w	r3, r3, #1
}
 8003754:	4618      	mov	r0, r3
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	3301      	adds	r3, #1
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <USB_CoreReset+0x60>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d901      	bls.n	800377c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e01a      	b.n	80037b2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	2b00      	cmp	r3, #0
 8003782:	daf3      	bge.n	800376c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	f043 0201 	orr.w	r2, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	3301      	adds	r3, #1
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	4a09      	ldr	r2, [pc, #36]	; (80037c0 <USB_CoreReset+0x60>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d901      	bls.n	80037a4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e006      	b.n	80037b2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d0f1      	beq.n	8003794 <USB_CoreReset+0x34>

  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	00030d40 	.word	0x00030d40

080037c4 <__NVIC_SetPriority>:
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	6039      	str	r1, [r7, #0]
 80037ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	db0a      	blt.n	80037ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	490c      	ldr	r1, [pc, #48]	; (8003810 <__NVIC_SetPriority+0x4c>)
 80037de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e2:	0112      	lsls	r2, r2, #4
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	440b      	add	r3, r1
 80037e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80037ec:	e00a      	b.n	8003804 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	4908      	ldr	r1, [pc, #32]	; (8003814 <__NVIC_SetPriority+0x50>)
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	3b04      	subs	r3, #4
 80037fc:	0112      	lsls	r2, r2, #4
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	440b      	add	r3, r1
 8003802:	761a      	strb	r2, [r3, #24]
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	e000e100 	.word	0xe000e100
 8003814:	e000ed00 	.word	0xe000ed00

08003818 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003818:	b580      	push	{r7, lr}
 800381a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800381c:	4b05      	ldr	r3, [pc, #20]	; (8003834 <SysTick_Handler+0x1c>)
 800381e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003820:	f001 fd28 	bl	8005274 <xTaskGetSchedulerState>
 8003824:	4603      	mov	r3, r0
 8003826:	2b01      	cmp	r3, #1
 8003828:	d001      	beq.n	800382e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800382a:	f002 fb0d 	bl	8005e48 <xPortSysTickHandler>
  }
}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	e000e010 	.word	0xe000e010

08003838 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800383c:	2100      	movs	r1, #0
 800383e:	f06f 0004 	mvn.w	r0, #4
 8003842:	f7ff ffbf 	bl	80037c4 <__NVIC_SetPriority>
#endif
}
 8003846:	bf00      	nop
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003852:	f3ef 8305 	mrs	r3, IPSR
 8003856:	603b      	str	r3, [r7, #0]
  return(result);
 8003858:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800385e:	f06f 0305 	mvn.w	r3, #5
 8003862:	607b      	str	r3, [r7, #4]
 8003864:	e00c      	b.n	8003880 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003866:	4b0a      	ldr	r3, [pc, #40]	; (8003890 <osKernelInitialize+0x44>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d105      	bne.n	800387a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800386e:	4b08      	ldr	r3, [pc, #32]	; (8003890 <osKernelInitialize+0x44>)
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003874:	2300      	movs	r3, #0
 8003876:	607b      	str	r3, [r7, #4]
 8003878:	e002      	b.n	8003880 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800387a:	f04f 33ff 	mov.w	r3, #4294967295
 800387e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003880:	687b      	ldr	r3, [r7, #4]
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	20000090 	.word	0x20000090

08003894 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800389a:	f3ef 8305 	mrs	r3, IPSR
 800389e:	603b      	str	r3, [r7, #0]
  return(result);
 80038a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80038a6:	f06f 0305 	mvn.w	r3, #5
 80038aa:	607b      	str	r3, [r7, #4]
 80038ac:	e010      	b.n	80038d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80038ae:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <osKernelStart+0x48>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d109      	bne.n	80038ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80038b6:	f7ff ffbf 	bl	8003838 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80038ba:	4b08      	ldr	r3, [pc, #32]	; (80038dc <osKernelStart+0x48>)
 80038bc:	2202      	movs	r2, #2
 80038be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80038c0:	f001 f87c 	bl	80049bc <vTaskStartScheduler>
      stat = osOK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	607b      	str	r3, [r7, #4]
 80038c8:	e002      	b.n	80038d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80038ca:	f04f 33ff 	mov.w	r3, #4294967295
 80038ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80038d0:	687b      	ldr	r3, [r7, #4]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	20000090 	.word	0x20000090

080038e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08e      	sub	sp, #56	; 0x38
 80038e4:	af04      	add	r7, sp, #16
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038f0:	f3ef 8305 	mrs	r3, IPSR
 80038f4:	617b      	str	r3, [r7, #20]
  return(result);
 80038f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d17e      	bne.n	80039fa <osThreadNew+0x11a>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d07b      	beq.n	80039fa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003902:	2380      	movs	r3, #128	; 0x80
 8003904:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003906:	2318      	movs	r3, #24
 8003908:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800390a:	2300      	movs	r3, #0
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800390e:	f04f 33ff 	mov.w	r3, #4294967295
 8003912:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d045      	beq.n	80039a6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <osThreadNew+0x48>
        name = attr->name;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d002      	beq.n	8003936 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <osThreadNew+0x6e>
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	2b38      	cmp	r3, #56	; 0x38
 8003940:	d805      	bhi.n	800394e <osThreadNew+0x6e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <osThreadNew+0x72>
        return (NULL);
 800394e:	2300      	movs	r3, #0
 8003950:	e054      	b.n	80039fc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	089b      	lsrs	r3, r3, #2
 8003960:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00e      	beq.n	8003988 <osThreadNew+0xa8>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	2bbb      	cmp	r3, #187	; 0xbb
 8003970:	d90a      	bls.n	8003988 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003976:	2b00      	cmp	r3, #0
 8003978:	d006      	beq.n	8003988 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <osThreadNew+0xa8>
        mem = 1;
 8003982:	2301      	movs	r3, #1
 8003984:	61bb      	str	r3, [r7, #24]
 8003986:	e010      	b.n	80039aa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10c      	bne.n	80039aa <osThreadNew+0xca>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d108      	bne.n	80039aa <osThreadNew+0xca>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d104      	bne.n	80039aa <osThreadNew+0xca>
          mem = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	61bb      	str	r3, [r7, #24]
 80039a4:	e001      	b.n	80039aa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d110      	bne.n	80039d2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80039b8:	9202      	str	r2, [sp, #8]
 80039ba:	9301      	str	r3, [sp, #4]
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	6a3a      	ldr	r2, [r7, #32]
 80039c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 fe0c 	bl	80045e4 <xTaskCreateStatic>
 80039cc:	4603      	mov	r3, r0
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	e013      	b.n	80039fa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d110      	bne.n	80039fa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	b29a      	uxth	r2, r3
 80039dc:	f107 0310 	add.w	r3, r7, #16
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 fe57 	bl	800469e <xTaskCreate>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d001      	beq.n	80039fa <osThreadNew+0x11a>
            hTask = NULL;
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039fa:	693b      	ldr	r3, [r7, #16]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3728      	adds	r7, #40	; 0x28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a0c:	f3ef 8305 	mrs	r3, IPSR
 8003a10:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a12:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <osDelay+0x1c>
    stat = osErrorISR;
 8003a18:	f06f 0305 	mvn.w	r3, #5
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	e007      	b.n	8003a30 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 ff92 	bl	8004954 <vTaskDelay>
    }
  }

  return (stat);
 8003a30:	68fb      	ldr	r3, [r7, #12]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4a07      	ldr	r2, [pc, #28]	; (8003a68 <vApplicationGetIdleTaskMemory+0x2c>)
 8003a4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	4a06      	ldr	r2, [pc, #24]	; (8003a6c <vApplicationGetIdleTaskMemory+0x30>)
 8003a52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2280      	movs	r2, #128	; 0x80
 8003a58:	601a      	str	r2, [r3, #0]
}
 8003a5a:	bf00      	nop
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20000094 	.word	0x20000094
 8003a6c:	20000150 	.word	0x20000150

08003a70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4a07      	ldr	r2, [pc, #28]	; (8003a9c <vApplicationGetTimerTaskMemory+0x2c>)
 8003a80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	4a06      	ldr	r2, [pc, #24]	; (8003aa0 <vApplicationGetTimerTaskMemory+0x30>)
 8003a86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a8e:	601a      	str	r2, [r3, #0]
}
 8003a90:	bf00      	nop
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	20000350 	.word	0x20000350
 8003aa0:	2000040c 	.word	0x2000040c

08003aa4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f103 0208 	add.w	r2, r3, #8
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8003abc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f103 0208 	add.w	r2, r3, #8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f103 0208 	add.w	r2, r3, #8
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003afe:	b480      	push	{r7}
 8003b00:	b085      	sub	sp, #20
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	601a      	str	r2, [r3, #0]
}
 8003b3a:	bf00      	nop
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b46:	b480      	push	{r7}
 8003b48:	b085      	sub	sp, #20
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
 8003b4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5c:	d103      	bne.n	8003b66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	e00c      	b.n	8003b80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3308      	adds	r3, #8
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	e002      	b.n	8003b74 <vListInsert+0x2e>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	60fb      	str	r3, [r7, #12]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d2f6      	bcs.n	8003b6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	601a      	str	r2, [r3, #0]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6892      	ldr	r2, [r2, #8]
 8003bce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6852      	ldr	r2, [r2, #4]
 8003bd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d103      	bne.n	8003bec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	1e5a      	subs	r2, r3, #1
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c32:	bf00      	nop
 8003c34:	e7fe      	b.n	8003c34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c36:	f002 f875 	bl	8005d24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	68f9      	ldr	r1, [r7, #12]
 8003c44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c46:	fb01 f303 	mul.w	r3, r1, r3
 8003c4a:	441a      	add	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c66:	3b01      	subs	r3, #1
 8003c68:	68f9      	ldr	r1, [r7, #12]
 8003c6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c6c:	fb01 f303 	mul.w	r3, r1, r3
 8003c70:	441a      	add	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	22ff      	movs	r2, #255	; 0xff
 8003c7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	22ff      	movs	r2, #255	; 0xff
 8003c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d114      	bne.n	8003cb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01a      	beq.n	8003cca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3310      	adds	r3, #16
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f001 f929 	bl	8004ef0 <xTaskRemoveFromEventList>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d012      	beq.n	8003cca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <xQueueGenericReset+0xcc>)
 8003ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	f3bf 8f4f 	dsb	sy
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	e009      	b.n	8003cca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	3310      	adds	r3, #16
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7ff fef2 	bl	8003aa4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	3324      	adds	r3, #36	; 0x24
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7ff feed 	bl	8003aa4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003cca:	f002 f85b 	bl	8005d84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003cce:	2301      	movs	r3, #1
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	e000ed04 	.word	0xe000ed04

08003cdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08e      	sub	sp, #56	; 0x38
 8003ce0:	af02      	add	r7, sp, #8
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10a      	bne.n	8003d06 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf4:	f383 8811 	msr	BASEPRI, r3
 8003cf8:	f3bf 8f6f 	isb	sy
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d02:	bf00      	nop
 8003d04:	e7fe      	b.n	8003d04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10a      	bne.n	8003d22 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d1e:	bf00      	nop
 8003d20:	e7fe      	b.n	8003d20 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <xQueueGenericCreateStatic+0x52>
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <xQueueGenericCreateStatic+0x56>
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e000      	b.n	8003d34 <xQueueGenericCreateStatic+0x58>
 8003d32:	2300      	movs	r3, #0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10a      	bne.n	8003d4e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	623b      	str	r3, [r7, #32]
}
 8003d4a:	bf00      	nop
 8003d4c:	e7fe      	b.n	8003d4c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d102      	bne.n	8003d5a <xQueueGenericCreateStatic+0x7e>
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <xQueueGenericCreateStatic+0x82>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <xQueueGenericCreateStatic+0x84>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10a      	bne.n	8003d7a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	61fb      	str	r3, [r7, #28]
}
 8003d76:	bf00      	nop
 8003d78:	e7fe      	b.n	8003d78 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d7a:	2350      	movs	r3, #80	; 0x50
 8003d7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b50      	cmp	r3, #80	; 0x50
 8003d82:	d00a      	beq.n	8003d9a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	61bb      	str	r3, [r7, #24]
}
 8003d96:	bf00      	nop
 8003d98:	e7fe      	b.n	8003d98 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d9a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00d      	beq.n	8003dc2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003dae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	4613      	mov	r3, r2
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f805 	bl	8003dcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3730      	adds	r7, #48	; 0x30
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d103      	bne.n	8003de8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	e002      	b.n	8003dee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	69b8      	ldr	r0, [r7, #24]
 8003dfe:	f7ff ff05 	bl	8003c0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	78fa      	ldrb	r2, [r7, #3]
 8003e06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08e      	sub	sp, #56	; 0x38
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e22:	2300      	movs	r3, #0
 8003e24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10a      	bne.n	8003e46 <xQueueGenericSend+0x32>
	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e42:	bf00      	nop
 8003e44:	e7fe      	b.n	8003e44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d103      	bne.n	8003e54 <xQueueGenericSend+0x40>
 8003e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <xQueueGenericSend+0x44>
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <xQueueGenericSend+0x46>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10a      	bne.n	8003e74 <xQueueGenericSend+0x60>
	__asm volatile
 8003e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e70:	bf00      	nop
 8003e72:	e7fe      	b.n	8003e72 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d103      	bne.n	8003e82 <xQueueGenericSend+0x6e>
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <xQueueGenericSend+0x72>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <xQueueGenericSend+0x74>
 8003e86:	2300      	movs	r3, #0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10a      	bne.n	8003ea2 <xQueueGenericSend+0x8e>
	__asm volatile
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	623b      	str	r3, [r7, #32]
}
 8003e9e:	bf00      	nop
 8003ea0:	e7fe      	b.n	8003ea0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ea2:	f001 f9e7 	bl	8005274 <xTaskGetSchedulerState>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d102      	bne.n	8003eb2 <xQueueGenericSend+0x9e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <xQueueGenericSend+0xa2>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <xQueueGenericSend+0xa4>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10a      	bne.n	8003ed2 <xQueueGenericSend+0xbe>
	__asm volatile
 8003ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	61fb      	str	r3, [r7, #28]
}
 8003ece:	bf00      	nop
 8003ed0:	e7fe      	b.n	8003ed0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ed2:	f001 ff27 	bl	8005d24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d302      	bcc.n	8003ee8 <xQueueGenericSend+0xd4>
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d129      	bne.n	8003f3c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	68b9      	ldr	r1, [r7, #8]
 8003eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eee:	f000 fa0b 	bl	8004308 <prvCopyDataToQueue>
 8003ef2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d010      	beq.n	8003f1e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efe:	3324      	adds	r3, #36	; 0x24
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 fff5 	bl	8004ef0 <xTaskRemoveFromEventList>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d013      	beq.n	8003f34 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f0c:	4b3f      	ldr	r3, [pc, #252]	; (800400c <xQueueGenericSend+0x1f8>)
 8003f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	e00a      	b.n	8003f34 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d007      	beq.n	8003f34 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003f24:	4b39      	ldr	r3, [pc, #228]	; (800400c <xQueueGenericSend+0x1f8>)
 8003f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003f34:	f001 ff26 	bl	8005d84 <vPortExitCritical>
				return pdPASS;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e063      	b.n	8004004 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d103      	bne.n	8003f4a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f42:	f001 ff1f 	bl	8005d84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	e05c      	b.n	8004004 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d106      	bne.n	8003f5e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f50:	f107 0314 	add.w	r3, r7, #20
 8003f54:	4618      	mov	r0, r3
 8003f56:	f001 f82f 	bl	8004fb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f5e:	f001 ff11 	bl	8005d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f62:	f000 fd9b 	bl	8004a9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f66:	f001 fedd 	bl	8005d24 <vPortEnterCritical>
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f70:	b25b      	sxtb	r3, r3
 8003f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f76:	d103      	bne.n	8003f80 <xQueueGenericSend+0x16c>
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f86:	b25b      	sxtb	r3, r3
 8003f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8c:	d103      	bne.n	8003f96 <xQueueGenericSend+0x182>
 8003f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f96:	f001 fef5 	bl	8005d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f9a:	1d3a      	adds	r2, r7, #4
 8003f9c:	f107 0314 	add.w	r3, r7, #20
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f001 f81e 	bl	8004fe4 <xTaskCheckForTimeOut>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d124      	bne.n	8003ff8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003fae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fb0:	f000 faa2 	bl	80044f8 <prvIsQueueFull>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d018      	beq.n	8003fec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	3310      	adds	r3, #16
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	4611      	mov	r1, r2
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 ff44 	bl	8004e50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003fc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fca:	f000 fa2d 	bl	8004428 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003fce:	f000 fd73 	bl	8004ab8 <xTaskResumeAll>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f47f af7c 	bne.w	8003ed2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003fda:	4b0c      	ldr	r3, [pc, #48]	; (800400c <xQueueGenericSend+0x1f8>)
 8003fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	f3bf 8f6f 	isb	sy
 8003fea:	e772      	b.n	8003ed2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fee:	f000 fa1b 	bl	8004428 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ff2:	f000 fd61 	bl	8004ab8 <xTaskResumeAll>
 8003ff6:	e76c      	b.n	8003ed2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ffa:	f000 fa15 	bl	8004428 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ffe:	f000 fd5b 	bl	8004ab8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004002:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004004:	4618      	mov	r0, r3
 8004006:	3738      	adds	r7, #56	; 0x38
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	e000ed04 	.word	0xe000ed04

08004010 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b090      	sub	sp, #64	; 0x40
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10a      	bne.n	800403e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800403a:	bf00      	nop
 800403c:	e7fe      	b.n	800403c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d103      	bne.n	800404c <xQueueGenericSendFromISR+0x3c>
 8004044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <xQueueGenericSendFromISR+0x40>
 800404c:	2301      	movs	r3, #1
 800404e:	e000      	b.n	8004052 <xQueueGenericSendFromISR+0x42>
 8004050:	2300      	movs	r3, #0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10a      	bne.n	800406c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004068:	bf00      	nop
 800406a:	e7fe      	b.n	800406a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d103      	bne.n	800407a <xQueueGenericSendFromISR+0x6a>
 8004072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <xQueueGenericSendFromISR+0x6e>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <xQueueGenericSendFromISR+0x70>
 800407e:	2300      	movs	r3, #0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d10a      	bne.n	800409a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	623b      	str	r3, [r7, #32]
}
 8004096:	bf00      	nop
 8004098:	e7fe      	b.n	8004098 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800409a:	f001 ff25 	bl	8005ee8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800409e:	f3ef 8211 	mrs	r2, BASEPRI
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	61fa      	str	r2, [r7, #28]
 80040b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80040b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80040b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d302      	bcc.n	80040cc <xQueueGenericSendFromISR+0xbc>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d12f      	bne.n	800412c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80040cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	68b9      	ldr	r1, [r7, #8]
 80040e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80040e2:	f000 f911 	bl	8004308 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80040e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80040ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ee:	d112      	bne.n	8004116 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d016      	beq.n	8004126 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fa:	3324      	adds	r3, #36	; 0x24
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fef7 	bl	8004ef0 <xTaskRemoveFromEventList>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00e      	beq.n	8004126 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00b      	beq.n	8004126 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	e007      	b.n	8004126 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004116:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800411a:	3301      	adds	r3, #1
 800411c:	b2db      	uxtb	r3, r3
 800411e:	b25a      	sxtb	r2, r3
 8004120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004126:	2301      	movs	r3, #1
 8004128:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800412a:	e001      	b.n	8004130 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800412c:	2300      	movs	r3, #0
 800412e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004132:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800413a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800413c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800413e:	4618      	mov	r0, r3
 8004140:	3740      	adds	r7, #64	; 0x40
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08c      	sub	sp, #48	; 0x30
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004154:	2300      	movs	r3, #0
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	2b00      	cmp	r3, #0
 8004160:	d10a      	bne.n	8004178 <xQueueReceive+0x30>
	__asm volatile
 8004162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	623b      	str	r3, [r7, #32]
}
 8004174:	bf00      	nop
 8004176:	e7fe      	b.n	8004176 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d103      	bne.n	8004186 <xQueueReceive+0x3e>
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <xQueueReceive+0x42>
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <xQueueReceive+0x44>
 800418a:	2300      	movs	r3, #0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10a      	bne.n	80041a6 <xQueueReceive+0x5e>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	61fb      	str	r3, [r7, #28]
}
 80041a2:	bf00      	nop
 80041a4:	e7fe      	b.n	80041a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80041a6:	f001 f865 	bl	8005274 <xTaskGetSchedulerState>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d102      	bne.n	80041b6 <xQueueReceive+0x6e>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <xQueueReceive+0x72>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <xQueueReceive+0x74>
 80041ba:	2300      	movs	r3, #0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10a      	bne.n	80041d6 <xQueueReceive+0x8e>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	61bb      	str	r3, [r7, #24]
}
 80041d2:	bf00      	nop
 80041d4:	e7fe      	b.n	80041d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041d6:	f001 fda5 	bl	8005d24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01f      	beq.n	8004226 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041e6:	68b9      	ldr	r1, [r7, #8]
 80041e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ea:	f000 f8f7 	bl	80043dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	1e5a      	subs	r2, r3, #1
 80041f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00f      	beq.n	800421e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004200:	3310      	adds	r3, #16
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fe74 	bl	8004ef0 <xTaskRemoveFromEventList>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800420e:	4b3d      	ldr	r3, [pc, #244]	; (8004304 <xQueueReceive+0x1bc>)
 8004210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	f3bf 8f4f 	dsb	sy
 800421a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800421e:	f001 fdb1 	bl	8005d84 <vPortExitCritical>
				return pdPASS;
 8004222:	2301      	movs	r3, #1
 8004224:	e069      	b.n	80042fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d103      	bne.n	8004234 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800422c:	f001 fdaa 	bl	8005d84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004230:	2300      	movs	r3, #0
 8004232:	e062      	b.n	80042fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004236:	2b00      	cmp	r3, #0
 8004238:	d106      	bne.n	8004248 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800423a:	f107 0310 	add.w	r3, r7, #16
 800423e:	4618      	mov	r0, r3
 8004240:	f000 feba 	bl	8004fb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004244:	2301      	movs	r3, #1
 8004246:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004248:	f001 fd9c 	bl	8005d84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800424c:	f000 fc26 	bl	8004a9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004250:	f001 fd68 	bl	8005d24 <vPortEnterCritical>
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800425a:	b25b      	sxtb	r3, r3
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004260:	d103      	bne.n	800426a <xQueueReceive+0x122>
 8004262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800426a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800426c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004270:	b25b      	sxtb	r3, r3
 8004272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004276:	d103      	bne.n	8004280 <xQueueReceive+0x138>
 8004278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004280:	f001 fd80 	bl	8005d84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004284:	1d3a      	adds	r2, r7, #4
 8004286:	f107 0310 	add.w	r3, r7, #16
 800428a:	4611      	mov	r1, r2
 800428c:	4618      	mov	r0, r3
 800428e:	f000 fea9 	bl	8004fe4 <xTaskCheckForTimeOut>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d123      	bne.n	80042e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800429a:	f000 f917 	bl	80044cc <prvIsQueueEmpty>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d017      	beq.n	80042d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a6:	3324      	adds	r3, #36	; 0x24
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	4611      	mov	r1, r2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fdcf 	bl	8004e50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042b4:	f000 f8b8 	bl	8004428 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042b8:	f000 fbfe 	bl	8004ab8 <xTaskResumeAll>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d189      	bne.n	80041d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80042c2:	4b10      	ldr	r3, [pc, #64]	; (8004304 <xQueueReceive+0x1bc>)
 80042c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	e780      	b.n	80041d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80042d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042d6:	f000 f8a7 	bl	8004428 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042da:	f000 fbed 	bl	8004ab8 <xTaskResumeAll>
 80042de:	e77a      	b.n	80041d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80042e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042e2:	f000 f8a1 	bl	8004428 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042e6:	f000 fbe7 	bl	8004ab8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ec:	f000 f8ee 	bl	80044cc <prvIsQueueEmpty>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f43f af6f 	beq.w	80041d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80042f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3730      	adds	r7, #48	; 0x30
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	e000ed04 	.word	0xe000ed04

08004308 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10d      	bne.n	8004342 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d14d      	bne.n	80043ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	4618      	mov	r0, r3
 8004334:	f000 ffbc 	bl	80052b0 <xTaskPriorityDisinherit>
 8004338:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	609a      	str	r2, [r3, #8]
 8004340:	e043      	b.n	80043ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d119      	bne.n	800437c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6858      	ldr	r0, [r3, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	461a      	mov	r2, r3
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	f002 f818 	bl	8006388 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	441a      	add	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	685a      	ldr	r2, [r3, #4]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	429a      	cmp	r2, r3
 8004370:	d32b      	bcc.n	80043ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	605a      	str	r2, [r3, #4]
 800437a:	e026      	b.n	80043ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	68d8      	ldr	r0, [r3, #12]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	461a      	mov	r2, r3
 8004386:	68b9      	ldr	r1, [r7, #8]
 8004388:	f001 fffe 	bl	8006388 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	425b      	negs	r3, r3
 8004396:	441a      	add	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d207      	bcs.n	80043b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	425b      	negs	r3, r3
 80043b2:	441a      	add	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d105      	bne.n	80043ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80043d2:	697b      	ldr	r3, [r7, #20]
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3718      	adds	r7, #24
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d018      	beq.n	8004420 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	441a      	add	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	429a      	cmp	r2, r3
 8004406:	d303      	bcc.n	8004410 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	68d9      	ldr	r1, [r3, #12]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	461a      	mov	r2, r3
 800441a:	6838      	ldr	r0, [r7, #0]
 800441c:	f001 ffb4 	bl	8006388 <memcpy>
	}
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004430:	f001 fc78 	bl	8005d24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800443a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800443c:	e011      	b.n	8004462 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004442:	2b00      	cmp	r3, #0
 8004444:	d012      	beq.n	800446c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3324      	adds	r3, #36	; 0x24
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fd50 	bl	8004ef0 <xTaskRemoveFromEventList>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004456:	f000 fe27 	bl	80050a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	3b01      	subs	r3, #1
 800445e:	b2db      	uxtb	r3, r3
 8004460:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004466:	2b00      	cmp	r3, #0
 8004468:	dce9      	bgt.n	800443e <prvUnlockQueue+0x16>
 800446a:	e000      	b.n	800446e <prvUnlockQueue+0x46>
					break;
 800446c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	22ff      	movs	r2, #255	; 0xff
 8004472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004476:	f001 fc85 	bl	8005d84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800447a:	f001 fc53 	bl	8005d24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004484:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004486:	e011      	b.n	80044ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d012      	beq.n	80044b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3310      	adds	r3, #16
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fd2b 	bl	8004ef0 <xTaskRemoveFromEventList>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80044a0:	f000 fe02 	bl	80050a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80044a4:	7bbb      	ldrb	r3, [r7, #14]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	dce9      	bgt.n	8004488 <prvUnlockQueue+0x60>
 80044b4:	e000      	b.n	80044b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80044b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	22ff      	movs	r2, #255	; 0xff
 80044bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80044c0:	f001 fc60 	bl	8005d84 <vPortExitCritical>
}
 80044c4:	bf00      	nop
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044d4:	f001 fc26 	bl	8005d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d102      	bne.n	80044e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80044e0:	2301      	movs	r3, #1
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	e001      	b.n	80044ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80044ea:	f001 fc4b 	bl	8005d84 <vPortExitCritical>

	return xReturn;
 80044ee:	68fb      	ldr	r3, [r7, #12]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004500:	f001 fc10 	bl	8005d24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450c:	429a      	cmp	r2, r3
 800450e:	d102      	bne.n	8004516 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004510:	2301      	movs	r3, #1
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	e001      	b.n	800451a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800451a:	f001 fc33 	bl	8005d84 <vPortExitCritical>

	return xReturn;
 800451e:	68fb      	ldr	r3, [r7, #12]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	e014      	b.n	8004562 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004538:	4a0f      	ldr	r2, [pc, #60]	; (8004578 <vQueueAddToRegistry+0x50>)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10b      	bne.n	800455c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004544:	490c      	ldr	r1, [pc, #48]	; (8004578 <vQueueAddToRegistry+0x50>)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800454e:	4a0a      	ldr	r2, [pc, #40]	; (8004578 <vQueueAddToRegistry+0x50>)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	4413      	add	r3, r2
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800455a:	e006      	b.n	800456a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3301      	adds	r3, #1
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2b07      	cmp	r3, #7
 8004566:	d9e7      	bls.n	8004538 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	20004f44 	.word	0x20004f44

0800457c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800457c:	b580      	push	{r7, lr}
 800457e:	b086      	sub	sp, #24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800458c:	f001 fbca 	bl	8005d24 <vPortEnterCritical>
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004596:	b25b      	sxtb	r3, r3
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459c:	d103      	bne.n	80045a6 <vQueueWaitForMessageRestricted+0x2a>
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045ac:	b25b      	sxtb	r3, r3
 80045ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b2:	d103      	bne.n	80045bc <vQueueWaitForMessageRestricted+0x40>
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045bc:	f001 fbe2 	bl	8005d84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d106      	bne.n	80045d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	3324      	adds	r3, #36	; 0x24
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 fc61 	bl	8004e98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80045d6:	6978      	ldr	r0, [r7, #20]
 80045d8:	f7ff ff26 	bl	8004428 <prvUnlockQueue>
	}
 80045dc:	bf00      	nop
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08e      	sub	sp, #56	; 0x38
 80045e8:	af04      	add	r7, sp, #16
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
 80045f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80045f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10a      	bne.n	800460e <xTaskCreateStatic+0x2a>
	__asm volatile
 80045f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fc:	f383 8811 	msr	BASEPRI, r3
 8004600:	f3bf 8f6f 	isb	sy
 8004604:	f3bf 8f4f 	dsb	sy
 8004608:	623b      	str	r3, [r7, #32]
}
 800460a:	bf00      	nop
 800460c:	e7fe      	b.n	800460c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800460e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10a      	bne.n	800462a <xTaskCreateStatic+0x46>
	__asm volatile
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	61fb      	str	r3, [r7, #28]
}
 8004626:	bf00      	nop
 8004628:	e7fe      	b.n	8004628 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800462a:	23bc      	movs	r3, #188	; 0xbc
 800462c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2bbc      	cmp	r3, #188	; 0xbc
 8004632:	d00a      	beq.n	800464a <xTaskCreateStatic+0x66>
	__asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	61bb      	str	r3, [r7, #24]
}
 8004646:	bf00      	nop
 8004648:	e7fe      	b.n	8004648 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800464a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800464c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01e      	beq.n	8004690 <xTaskCreateStatic+0xac>
 8004652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01b      	beq.n	8004690 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004660:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	2202      	movs	r2, #2
 8004666:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800466a:	2300      	movs	r3, #0
 800466c:	9303      	str	r3, [sp, #12]
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	9302      	str	r3, [sp, #8]
 8004672:	f107 0314 	add.w	r3, r7, #20
 8004676:	9301      	str	r3, [sp, #4]
 8004678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 f850 	bl	8004728 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800468a:	f000 f8f3 	bl	8004874 <prvAddNewTaskToReadyList>
 800468e:	e001      	b.n	8004694 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004694:	697b      	ldr	r3, [r7, #20]
	}
 8004696:	4618      	mov	r0, r3
 8004698:	3728      	adds	r7, #40	; 0x28
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b08c      	sub	sp, #48	; 0x30
 80046a2:	af04      	add	r7, sp, #16
 80046a4:	60f8      	str	r0, [r7, #12]
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	603b      	str	r3, [r7, #0]
 80046aa:	4613      	mov	r3, r2
 80046ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046ae:	88fb      	ldrh	r3, [r7, #6]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4618      	mov	r0, r3
 80046b4:	f001 fc58 	bl	8005f68 <pvPortMalloc>
 80046b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00e      	beq.n	80046de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046c0:	20bc      	movs	r0, #188	; 0xbc
 80046c2:	f001 fc51 	bl	8005f68 <pvPortMalloc>
 80046c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	697a      	ldr	r2, [r7, #20]
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30
 80046d4:	e005      	b.n	80046e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80046d6:	6978      	ldr	r0, [r7, #20]
 80046d8:	f001 fd12 	bl	8006100 <vPortFree>
 80046dc:	e001      	b.n	80046e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d017      	beq.n	8004718 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80046f0:	88fa      	ldrh	r2, [r7, #6]
 80046f2:	2300      	movs	r3, #0
 80046f4:	9303      	str	r3, [sp, #12]
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	9302      	str	r3, [sp, #8]
 80046fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f80e 	bl	8004728 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800470c:	69f8      	ldr	r0, [r7, #28]
 800470e:	f000 f8b1 	bl	8004874 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004712:	2301      	movs	r3, #1
 8004714:	61bb      	str	r3, [r7, #24]
 8004716:	e002      	b.n	800471e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004718:	f04f 33ff 	mov.w	r3, #4294967295
 800471c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800471e:	69bb      	ldr	r3, [r7, #24]
	}
 8004720:	4618      	mov	r0, r3
 8004722:	3720      	adds	r7, #32
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
 8004734:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	461a      	mov	r2, r3
 8004740:	21a5      	movs	r1, #165	; 0xa5
 8004742:	f001 fe2f 	bl	80063a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004750:	3b01      	subs	r3, #1
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	f023 0307 	bic.w	r3, r3, #7
 800475e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00a      	beq.n	8004780 <prvInitialiseNewTask+0x58>
	__asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	617b      	str	r3, [r7, #20]
}
 800477c:	bf00      	nop
 800477e:	e7fe      	b.n	800477e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d01f      	beq.n	80047c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004786:	2300      	movs	r3, #0
 8004788:	61fb      	str	r3, [r7, #28]
 800478a:	e012      	b.n	80047b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	4413      	add	r3, r2
 8004792:	7819      	ldrb	r1, [r3, #0]
 8004794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	4413      	add	r3, r2
 800479a:	3334      	adds	r3, #52	; 0x34
 800479c:	460a      	mov	r2, r1
 800479e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80047a0:	68ba      	ldr	r2, [r7, #8]
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	4413      	add	r3, r2
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d006      	beq.n	80047ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	3301      	adds	r3, #1
 80047b0:	61fb      	str	r3, [r7, #28]
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	2b0f      	cmp	r3, #15
 80047b6:	d9e9      	bls.n	800478c <prvInitialiseNewTask+0x64>
 80047b8:	e000      	b.n	80047bc <prvInitialiseNewTask+0x94>
			{
				break;
 80047ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047c4:	e003      	b.n	80047ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d0:	2b37      	cmp	r3, #55	; 0x37
 80047d2:	d901      	bls.n	80047d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047d4:	2337      	movs	r3, #55	; 0x37
 80047d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	2200      	movs	r2, #0
 80047e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ec:	3304      	adds	r3, #4
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff f978 	bl	8003ae4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	3318      	adds	r3, #24
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff f973 	bl	8003ae4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80047fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004802:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004806:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004812:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004816:	2200      	movs	r2, #0
 8004818:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800481c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481e:	2200      	movs	r2, #0
 8004820:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004826:	3354      	adds	r3, #84	; 0x54
 8004828:	2260      	movs	r2, #96	; 0x60
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f001 fdb9 	bl	80063a4 <memset>
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	4a0c      	ldr	r2, [pc, #48]	; (8004868 <prvInitialiseNewTask+0x140>)
 8004836:	659a      	str	r2, [r3, #88]	; 0x58
 8004838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483a:	4a0c      	ldr	r2, [pc, #48]	; (800486c <prvInitialiseNewTask+0x144>)
 800483c:	65da      	str	r2, [r3, #92]	; 0x5c
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	4a0b      	ldr	r2, [pc, #44]	; (8004870 <prvInitialiseNewTask+0x148>)
 8004842:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	68f9      	ldr	r1, [r7, #12]
 8004848:	69b8      	ldr	r0, [r7, #24]
 800484a:	f001 f941 	bl	8005ad0 <pxPortInitialiseStack>
 800484e:	4602      	mov	r2, r0
 8004850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004852:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004856:	2b00      	cmp	r3, #0
 8004858:	d002      	beq.n	8004860 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800485a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800485e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004860:	bf00      	nop
 8004862:	3720      	adds	r7, #32
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	080065e4 	.word	0x080065e4
 800486c:	08006604 	.word	0x08006604
 8004870:	080065c4 	.word	0x080065c4

08004874 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800487c:	f001 fa52 	bl	8005d24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004880:	4b2d      	ldr	r3, [pc, #180]	; (8004938 <prvAddNewTaskToReadyList+0xc4>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3301      	adds	r3, #1
 8004886:	4a2c      	ldr	r2, [pc, #176]	; (8004938 <prvAddNewTaskToReadyList+0xc4>)
 8004888:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800488a:	4b2c      	ldr	r3, [pc, #176]	; (800493c <prvAddNewTaskToReadyList+0xc8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004892:	4a2a      	ldr	r2, [pc, #168]	; (800493c <prvAddNewTaskToReadyList+0xc8>)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004898:	4b27      	ldr	r3, [pc, #156]	; (8004938 <prvAddNewTaskToReadyList+0xc4>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d110      	bne.n	80048c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048a0:	f000 fc26 	bl	80050f0 <prvInitialiseTaskLists>
 80048a4:	e00d      	b.n	80048c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048a6:	4b26      	ldr	r3, [pc, #152]	; (8004940 <prvAddNewTaskToReadyList+0xcc>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d109      	bne.n	80048c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048ae:	4b23      	ldr	r3, [pc, #140]	; (800493c <prvAddNewTaskToReadyList+0xc8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d802      	bhi.n	80048c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048bc:	4a1f      	ldr	r2, [pc, #124]	; (800493c <prvAddNewTaskToReadyList+0xc8>)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048c2:	4b20      	ldr	r3, [pc, #128]	; (8004944 <prvAddNewTaskToReadyList+0xd0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3301      	adds	r3, #1
 80048c8:	4a1e      	ldr	r2, [pc, #120]	; (8004944 <prvAddNewTaskToReadyList+0xd0>)
 80048ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80048cc:	4b1d      	ldr	r3, [pc, #116]	; (8004944 <prvAddNewTaskToReadyList+0xd0>)
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d8:	4b1b      	ldr	r3, [pc, #108]	; (8004948 <prvAddNewTaskToReadyList+0xd4>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d903      	bls.n	80048e8 <prvAddNewTaskToReadyList+0x74>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	4a18      	ldr	r2, [pc, #96]	; (8004948 <prvAddNewTaskToReadyList+0xd4>)
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4a15      	ldr	r2, [pc, #84]	; (800494c <prvAddNewTaskToReadyList+0xd8>)
 80048f6:	441a      	add	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4619      	mov	r1, r3
 80048fe:	4610      	mov	r0, r2
 8004900:	f7ff f8fd 	bl	8003afe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004904:	f001 fa3e 	bl	8005d84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004908:	4b0d      	ldr	r3, [pc, #52]	; (8004940 <prvAddNewTaskToReadyList+0xcc>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00e      	beq.n	800492e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004910:	4b0a      	ldr	r3, [pc, #40]	; (800493c <prvAddNewTaskToReadyList+0xc8>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	429a      	cmp	r2, r3
 800491c:	d207      	bcs.n	800492e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800491e:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <prvAddNewTaskToReadyList+0xdc>)
 8004920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000ce0 	.word	0x20000ce0
 800493c:	2000080c 	.word	0x2000080c
 8004940:	20000cec 	.word	0x20000cec
 8004944:	20000cfc 	.word	0x20000cfc
 8004948:	20000ce8 	.word	0x20000ce8
 800494c:	20000810 	.word	0x20000810
 8004950:	e000ed04 	.word	0xe000ed04

08004954 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800495c:	2300      	movs	r3, #0
 800495e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d017      	beq.n	8004996 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004966:	4b13      	ldr	r3, [pc, #76]	; (80049b4 <vTaskDelay+0x60>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <vTaskDelay+0x30>
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	60bb      	str	r3, [r7, #8]
}
 8004980:	bf00      	nop
 8004982:	e7fe      	b.n	8004982 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004984:	f000 f88a 	bl	8004a9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004988:	2100      	movs	r1, #0
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fcfe 	bl	800538c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004990:	f000 f892 	bl	8004ab8 <xTaskResumeAll>
 8004994:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d107      	bne.n	80049ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800499c:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <vTaskDelay+0x64>)
 800499e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	f3bf 8f4f 	dsb	sy
 80049a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049ac:	bf00      	nop
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20000d08 	.word	0x20000d08
 80049b8:	e000ed04 	.word	0xe000ed04

080049bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08a      	sub	sp, #40	; 0x28
 80049c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80049ca:	463a      	mov	r2, r7
 80049cc:	1d39      	adds	r1, r7, #4
 80049ce:	f107 0308 	add.w	r3, r7, #8
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff f832 	bl	8003a3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80049d8:	6839      	ldr	r1, [r7, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	9202      	str	r2, [sp, #8]
 80049e0:	9301      	str	r3, [sp, #4]
 80049e2:	2300      	movs	r3, #0
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	2300      	movs	r3, #0
 80049e8:	460a      	mov	r2, r1
 80049ea:	4924      	ldr	r1, [pc, #144]	; (8004a7c <vTaskStartScheduler+0xc0>)
 80049ec:	4824      	ldr	r0, [pc, #144]	; (8004a80 <vTaskStartScheduler+0xc4>)
 80049ee:	f7ff fdf9 	bl	80045e4 <xTaskCreateStatic>
 80049f2:	4603      	mov	r3, r0
 80049f4:	4a23      	ldr	r2, [pc, #140]	; (8004a84 <vTaskStartScheduler+0xc8>)
 80049f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049f8:	4b22      	ldr	r3, [pc, #136]	; (8004a84 <vTaskStartScheduler+0xc8>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a00:	2301      	movs	r3, #1
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	e001      	b.n	8004a0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a06:	2300      	movs	r3, #0
 8004a08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d102      	bne.n	8004a16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004a10:	f000 fd10 	bl	8005434 <xTimerCreateTimerTask>
 8004a14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d11b      	bne.n	8004a54 <vTaskStartScheduler+0x98>
	__asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	613b      	str	r3, [r7, #16]
}
 8004a2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a30:	4b15      	ldr	r3, [pc, #84]	; (8004a88 <vTaskStartScheduler+0xcc>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3354      	adds	r3, #84	; 0x54
 8004a36:	4a15      	ldr	r2, [pc, #84]	; (8004a8c <vTaskStartScheduler+0xd0>)
 8004a38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a3a:	4b15      	ldr	r3, [pc, #84]	; (8004a90 <vTaskStartScheduler+0xd4>)
 8004a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a42:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <vTaskStartScheduler+0xd8>)
 8004a44:	2201      	movs	r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a48:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <vTaskStartScheduler+0xdc>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a4e:	f001 f8c7 	bl	8005be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a52:	e00e      	b.n	8004a72 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5a:	d10a      	bne.n	8004a72 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	60fb      	str	r3, [r7, #12]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <vTaskStartScheduler+0xb4>
}
 8004a72:	bf00      	nop
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	08006570 	.word	0x08006570
 8004a80:	080050c1 	.word	0x080050c1
 8004a84:	20000d04 	.word	0x20000d04
 8004a88:	2000080c 	.word	0x2000080c
 8004a8c:	20000010 	.word	0x20000010
 8004a90:	20000d00 	.word	0x20000d00
 8004a94:	20000cec 	.word	0x20000cec
 8004a98:	20000ce4 	.word	0x20000ce4

08004a9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004aa0:	4b04      	ldr	r3, [pc, #16]	; (8004ab4 <vTaskSuspendAll+0x18>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	4a03      	ldr	r2, [pc, #12]	; (8004ab4 <vTaskSuspendAll+0x18>)
 8004aa8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004aaa:	bf00      	nop
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	20000d08 	.word	0x20000d08

08004ab8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ac6:	4b42      	ldr	r3, [pc, #264]	; (8004bd0 <xTaskResumeAll+0x118>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10a      	bne.n	8004ae4 <xTaskResumeAll+0x2c>
	__asm volatile
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	603b      	str	r3, [r7, #0]
}
 8004ae0:	bf00      	nop
 8004ae2:	e7fe      	b.n	8004ae2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ae4:	f001 f91e 	bl	8005d24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ae8:	4b39      	ldr	r3, [pc, #228]	; (8004bd0 <xTaskResumeAll+0x118>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3b01      	subs	r3, #1
 8004aee:	4a38      	ldr	r2, [pc, #224]	; (8004bd0 <xTaskResumeAll+0x118>)
 8004af0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004af2:	4b37      	ldr	r3, [pc, #220]	; (8004bd0 <xTaskResumeAll+0x118>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d162      	bne.n	8004bc0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004afa:	4b36      	ldr	r3, [pc, #216]	; (8004bd4 <xTaskResumeAll+0x11c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d05e      	beq.n	8004bc0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b02:	e02f      	b.n	8004b64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b04:	4b34      	ldr	r3, [pc, #208]	; (8004bd8 <xTaskResumeAll+0x120>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	3318      	adds	r3, #24
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff f851 	bl	8003bb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3304      	adds	r3, #4
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff f84c 	bl	8003bb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b24:	4b2d      	ldr	r3, [pc, #180]	; (8004bdc <xTaskResumeAll+0x124>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d903      	bls.n	8004b34 <xTaskResumeAll+0x7c>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b30:	4a2a      	ldr	r2, [pc, #168]	; (8004bdc <xTaskResumeAll+0x124>)
 8004b32:	6013      	str	r3, [r2, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4a27      	ldr	r2, [pc, #156]	; (8004be0 <xTaskResumeAll+0x128>)
 8004b42:	441a      	add	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f7fe ffd7 	bl	8003afe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b54:	4b23      	ldr	r3, [pc, #140]	; (8004be4 <xTaskResumeAll+0x12c>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d302      	bcc.n	8004b64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004b5e:	4b22      	ldr	r3, [pc, #136]	; (8004be8 <xTaskResumeAll+0x130>)
 8004b60:	2201      	movs	r2, #1
 8004b62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b64:	4b1c      	ldr	r3, [pc, #112]	; (8004bd8 <xTaskResumeAll+0x120>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1cb      	bne.n	8004b04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b72:	f000 fb5f 	bl	8005234 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b76:	4b1d      	ldr	r3, [pc, #116]	; (8004bec <xTaskResumeAll+0x134>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d010      	beq.n	8004ba4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b82:	f000 f847 	bl	8004c14 <xTaskIncrementTick>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d002      	beq.n	8004b92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004b8c:	4b16      	ldr	r3, [pc, #88]	; (8004be8 <xTaskResumeAll+0x130>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f1      	bne.n	8004b82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004b9e:	4b13      	ldr	r3, [pc, #76]	; (8004bec <xTaskResumeAll+0x134>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ba4:	4b10      	ldr	r3, [pc, #64]	; (8004be8 <xTaskResumeAll+0x130>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d009      	beq.n	8004bc0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004bac:	2301      	movs	r3, #1
 8004bae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004bb0:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <xTaskResumeAll+0x138>)
 8004bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bc0:	f001 f8e0 	bl	8005d84 <vPortExitCritical>

	return xAlreadyYielded;
 8004bc4:	68bb      	ldr	r3, [r7, #8]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	20000d08 	.word	0x20000d08
 8004bd4:	20000ce0 	.word	0x20000ce0
 8004bd8:	20000ca0 	.word	0x20000ca0
 8004bdc:	20000ce8 	.word	0x20000ce8
 8004be0:	20000810 	.word	0x20000810
 8004be4:	2000080c 	.word	0x2000080c
 8004be8:	20000cf4 	.word	0x20000cf4
 8004bec:	20000cf0 	.word	0x20000cf0
 8004bf0:	e000ed04 	.word	0xe000ed04

08004bf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004bfa:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <xTaskGetTickCount+0x1c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c00:	687b      	ldr	r3, [r7, #4]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	370c      	adds	r7, #12
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	20000ce4 	.word	0x20000ce4

08004c14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c1e:	4b4f      	ldr	r3, [pc, #316]	; (8004d5c <xTaskIncrementTick+0x148>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f040 808f 	bne.w	8004d46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c28:	4b4d      	ldr	r3, [pc, #308]	; (8004d60 <xTaskIncrementTick+0x14c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c30:	4a4b      	ldr	r2, [pc, #300]	; (8004d60 <xTaskIncrementTick+0x14c>)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d120      	bne.n	8004c7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c3c:	4b49      	ldr	r3, [pc, #292]	; (8004d64 <xTaskIncrementTick+0x150>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00a      	beq.n	8004c5c <xTaskIncrementTick+0x48>
	__asm volatile
 8004c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	603b      	str	r3, [r7, #0]
}
 8004c58:	bf00      	nop
 8004c5a:	e7fe      	b.n	8004c5a <xTaskIncrementTick+0x46>
 8004c5c:	4b41      	ldr	r3, [pc, #260]	; (8004d64 <xTaskIncrementTick+0x150>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	4b41      	ldr	r3, [pc, #260]	; (8004d68 <xTaskIncrementTick+0x154>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a3f      	ldr	r2, [pc, #252]	; (8004d64 <xTaskIncrementTick+0x150>)
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	4a3f      	ldr	r2, [pc, #252]	; (8004d68 <xTaskIncrementTick+0x154>)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6013      	str	r3, [r2, #0]
 8004c70:	4b3e      	ldr	r3, [pc, #248]	; (8004d6c <xTaskIncrementTick+0x158>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3301      	adds	r3, #1
 8004c76:	4a3d      	ldr	r2, [pc, #244]	; (8004d6c <xTaskIncrementTick+0x158>)
 8004c78:	6013      	str	r3, [r2, #0]
 8004c7a:	f000 fadb 	bl	8005234 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c7e:	4b3c      	ldr	r3, [pc, #240]	; (8004d70 <xTaskIncrementTick+0x15c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d349      	bcc.n	8004d1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c88:	4b36      	ldr	r3, [pc, #216]	; (8004d64 <xTaskIncrementTick+0x150>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d104      	bne.n	8004c9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c92:	4b37      	ldr	r3, [pc, #220]	; (8004d70 <xTaskIncrementTick+0x15c>)
 8004c94:	f04f 32ff 	mov.w	r2, #4294967295
 8004c98:	601a      	str	r2, [r3, #0]
					break;
 8004c9a:	e03f      	b.n	8004d1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c9c:	4b31      	ldr	r3, [pc, #196]	; (8004d64 <xTaskIncrementTick+0x150>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d203      	bcs.n	8004cbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004cb4:	4a2e      	ldr	r2, [pc, #184]	; (8004d70 <xTaskIncrementTick+0x15c>)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004cba:	e02f      	b.n	8004d1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7fe ff79 	bl	8003bb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d004      	beq.n	8004cd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	3318      	adds	r3, #24
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fe ff70 	bl	8003bb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cdc:	4b25      	ldr	r3, [pc, #148]	; (8004d74 <xTaskIncrementTick+0x160>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d903      	bls.n	8004cec <xTaskIncrementTick+0xd8>
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce8:	4a22      	ldr	r2, [pc, #136]	; (8004d74 <xTaskIncrementTick+0x160>)
 8004cea:	6013      	str	r3, [r2, #0]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4a1f      	ldr	r2, [pc, #124]	; (8004d78 <xTaskIncrementTick+0x164>)
 8004cfa:	441a      	add	r2, r3
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	3304      	adds	r3, #4
 8004d00:	4619      	mov	r1, r3
 8004d02:	4610      	mov	r0, r2
 8004d04:	f7fe fefb 	bl	8003afe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0c:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <xTaskIncrementTick+0x168>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d3b8      	bcc.n	8004c88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004d16:	2301      	movs	r3, #1
 8004d18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d1a:	e7b5      	b.n	8004c88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d1c:	4b17      	ldr	r3, [pc, #92]	; (8004d7c <xTaskIncrementTick+0x168>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d22:	4915      	ldr	r1, [pc, #84]	; (8004d78 <xTaskIncrementTick+0x164>)
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d901      	bls.n	8004d38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004d34:	2301      	movs	r3, #1
 8004d36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d38:	4b11      	ldr	r3, [pc, #68]	; (8004d80 <xTaskIncrementTick+0x16c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d007      	beq.n	8004d50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004d40:	2301      	movs	r3, #1
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	e004      	b.n	8004d50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d46:	4b0f      	ldr	r3, [pc, #60]	; (8004d84 <xTaskIncrementTick+0x170>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	4a0d      	ldr	r2, [pc, #52]	; (8004d84 <xTaskIncrementTick+0x170>)
 8004d4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004d50:	697b      	ldr	r3, [r7, #20]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20000d08 	.word	0x20000d08
 8004d60:	20000ce4 	.word	0x20000ce4
 8004d64:	20000c98 	.word	0x20000c98
 8004d68:	20000c9c 	.word	0x20000c9c
 8004d6c:	20000cf8 	.word	0x20000cf8
 8004d70:	20000d00 	.word	0x20000d00
 8004d74:	20000ce8 	.word	0x20000ce8
 8004d78:	20000810 	.word	0x20000810
 8004d7c:	2000080c 	.word	0x2000080c
 8004d80:	20000cf4 	.word	0x20000cf4
 8004d84:	20000cf0 	.word	0x20000cf0

08004d88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d8e:	4b2a      	ldr	r3, [pc, #168]	; (8004e38 <vTaskSwitchContext+0xb0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d96:	4b29      	ldr	r3, [pc, #164]	; (8004e3c <vTaskSwitchContext+0xb4>)
 8004d98:	2201      	movs	r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d9c:	e046      	b.n	8004e2c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004d9e:	4b27      	ldr	r3, [pc, #156]	; (8004e3c <vTaskSwitchContext+0xb4>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004da4:	4b26      	ldr	r3, [pc, #152]	; (8004e40 <vTaskSwitchContext+0xb8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	e010      	b.n	8004dce <vTaskSwitchContext+0x46>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10a      	bne.n	8004dc8 <vTaskSwitchContext+0x40>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	607b      	str	r3, [r7, #4]
}
 8004dc4:	bf00      	nop
 8004dc6:	e7fe      	b.n	8004dc6 <vTaskSwitchContext+0x3e>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	491d      	ldr	r1, [pc, #116]	; (8004e44 <vTaskSwitchContext+0xbc>)
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0e4      	beq.n	8004dac <vTaskSwitchContext+0x24>
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	4613      	mov	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	4413      	add	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4a15      	ldr	r2, [pc, #84]	; (8004e44 <vTaskSwitchContext+0xbc>)
 8004dee:	4413      	add	r3, r2
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	605a      	str	r2, [r3, #4]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	3308      	adds	r3, #8
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d104      	bne.n	8004e12 <vTaskSwitchContext+0x8a>
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	605a      	str	r2, [r3, #4]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4a0b      	ldr	r2, [pc, #44]	; (8004e48 <vTaskSwitchContext+0xc0>)
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	4a08      	ldr	r2, [pc, #32]	; (8004e40 <vTaskSwitchContext+0xb8>)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004e22:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <vTaskSwitchContext+0xc0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3354      	adds	r3, #84	; 0x54
 8004e28:	4a08      	ldr	r2, [pc, #32]	; (8004e4c <vTaskSwitchContext+0xc4>)
 8004e2a:	6013      	str	r3, [r2, #0]
}
 8004e2c:	bf00      	nop
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	20000d08 	.word	0x20000d08
 8004e3c:	20000cf4 	.word	0x20000cf4
 8004e40:	20000ce8 	.word	0x20000ce8
 8004e44:	20000810 	.word	0x20000810
 8004e48:	2000080c 	.word	0x2000080c
 8004e4c:	20000010 	.word	0x20000010

08004e50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	60fb      	str	r3, [r7, #12]
}
 8004e72:	bf00      	nop
 8004e74:	e7fe      	b.n	8004e74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e76:	4b07      	ldr	r3, [pc, #28]	; (8004e94 <vTaskPlaceOnEventList+0x44>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3318      	adds	r3, #24
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fe fe61 	bl	8003b46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e84:	2101      	movs	r1, #1
 8004e86:	6838      	ldr	r0, [r7, #0]
 8004e88:	f000 fa80 	bl	800538c <prvAddCurrentTaskToDelayedList>
}
 8004e8c:	bf00      	nop
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	2000080c 	.word	0x2000080c

08004e98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10a      	bne.n	8004ec0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	617b      	str	r3, [r7, #20]
}
 8004ebc:	bf00      	nop
 8004ebe:	e7fe      	b.n	8004ebe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <vTaskPlaceOnEventListRestricted+0x54>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3318      	adds	r3, #24
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f7fe fe18 	bl	8003afe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	68b8      	ldr	r0, [r7, #8]
 8004ede:	f000 fa55 	bl	800538c <prvAddCurrentTaskToDelayedList>
	}
 8004ee2:	bf00      	nop
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	2000080c 	.word	0x2000080c

08004ef0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10a      	bne.n	8004f1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	60fb      	str	r3, [r7, #12]
}
 8004f18:	bf00      	nop
 8004f1a:	e7fe      	b.n	8004f1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	3318      	adds	r3, #24
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fe fe49 	bl	8003bb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f26:	4b1e      	ldr	r3, [pc, #120]	; (8004fa0 <xTaskRemoveFromEventList+0xb0>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d11d      	bne.n	8004f6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	3304      	adds	r3, #4
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fe fe40 	bl	8003bb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f3c:	4b19      	ldr	r3, [pc, #100]	; (8004fa4 <xTaskRemoveFromEventList+0xb4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d903      	bls.n	8004f4c <xTaskRemoveFromEventList+0x5c>
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	4a16      	ldr	r2, [pc, #88]	; (8004fa4 <xTaskRemoveFromEventList+0xb4>)
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f50:	4613      	mov	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4a13      	ldr	r2, [pc, #76]	; (8004fa8 <xTaskRemoveFromEventList+0xb8>)
 8004f5a:	441a      	add	r2, r3
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4619      	mov	r1, r3
 8004f62:	4610      	mov	r0, r2
 8004f64:	f7fe fdcb 	bl	8003afe <vListInsertEnd>
 8004f68:	e005      	b.n	8004f76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	3318      	adds	r3, #24
 8004f6e:	4619      	mov	r1, r3
 8004f70:	480e      	ldr	r0, [pc, #56]	; (8004fac <xTaskRemoveFromEventList+0xbc>)
 8004f72:	f7fe fdc4 	bl	8003afe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7a:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <xTaskRemoveFromEventList+0xc0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d905      	bls.n	8004f90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f84:	2301      	movs	r3, #1
 8004f86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f88:	4b0a      	ldr	r3, [pc, #40]	; (8004fb4 <xTaskRemoveFromEventList+0xc4>)
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	e001      	b.n	8004f94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f94:	697b      	ldr	r3, [r7, #20]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000d08 	.word	0x20000d08
 8004fa4:	20000ce8 	.word	0x20000ce8
 8004fa8:	20000810 	.word	0x20000810
 8004fac:	20000ca0 	.word	0x20000ca0
 8004fb0:	2000080c 	.word	0x2000080c
 8004fb4:	20000cf4 	.word	0x20000cf4

08004fb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004fc0:	4b06      	ldr	r3, [pc, #24]	; (8004fdc <vTaskInternalSetTimeOutState+0x24>)
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004fc8:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <vTaskInternalSetTimeOutState+0x28>)
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	605a      	str	r2, [r3, #4]
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	20000cf8 	.word	0x20000cf8
 8004fe0:	20000ce4 	.word	0x20000ce4

08004fe4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10a      	bne.n	800500a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	613b      	str	r3, [r7, #16]
}
 8005006:	bf00      	nop
 8005008:	e7fe      	b.n	8005008 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10a      	bne.n	8005026 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	60fb      	str	r3, [r7, #12]
}
 8005022:	bf00      	nop
 8005024:	e7fe      	b.n	8005024 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005026:	f000 fe7d 	bl	8005d24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800502a:	4b1d      	ldr	r3, [pc, #116]	; (80050a0 <xTaskCheckForTimeOut+0xbc>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	69ba      	ldr	r2, [r7, #24]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005042:	d102      	bne.n	800504a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005044:	2300      	movs	r3, #0
 8005046:	61fb      	str	r3, [r7, #28]
 8005048:	e023      	b.n	8005092 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	4b15      	ldr	r3, [pc, #84]	; (80050a4 <xTaskCheckForTimeOut+0xc0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d007      	beq.n	8005066 <xTaskCheckForTimeOut+0x82>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	429a      	cmp	r2, r3
 800505e:	d302      	bcc.n	8005066 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005060:	2301      	movs	r3, #1
 8005062:	61fb      	str	r3, [r7, #28]
 8005064:	e015      	b.n	8005092 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	429a      	cmp	r2, r3
 800506e:	d20b      	bcs.n	8005088 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	1ad2      	subs	r2, r2, r3
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff ff9b 	bl	8004fb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005082:	2300      	movs	r3, #0
 8005084:	61fb      	str	r3, [r7, #28]
 8005086:	e004      	b.n	8005092 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2200      	movs	r2, #0
 800508c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800508e:	2301      	movs	r3, #1
 8005090:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005092:	f000 fe77 	bl	8005d84 <vPortExitCritical>

	return xReturn;
 8005096:	69fb      	ldr	r3, [r7, #28]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3720      	adds	r7, #32
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20000ce4 	.word	0x20000ce4
 80050a4:	20000cf8 	.word	0x20000cf8

080050a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80050ac:	4b03      	ldr	r3, [pc, #12]	; (80050bc <vTaskMissedYield+0x14>)
 80050ae:	2201      	movs	r2, #1
 80050b0:	601a      	str	r2, [r3, #0]
}
 80050b2:	bf00      	nop
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr
 80050bc:	20000cf4 	.word	0x20000cf4

080050c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80050c8:	f000 f852 	bl	8005170 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80050cc:	4b06      	ldr	r3, [pc, #24]	; (80050e8 <prvIdleTask+0x28>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d9f9      	bls.n	80050c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80050d4:	4b05      	ldr	r3, [pc, #20]	; (80050ec <prvIdleTask+0x2c>)
 80050d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80050e4:	e7f0      	b.n	80050c8 <prvIdleTask+0x8>
 80050e6:	bf00      	nop
 80050e8:	20000810 	.word	0x20000810
 80050ec:	e000ed04 	.word	0xe000ed04

080050f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050f6:	2300      	movs	r3, #0
 80050f8:	607b      	str	r3, [r7, #4]
 80050fa:	e00c      	b.n	8005116 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	4613      	mov	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4a12      	ldr	r2, [pc, #72]	; (8005150 <prvInitialiseTaskLists+0x60>)
 8005108:	4413      	add	r3, r2
 800510a:	4618      	mov	r0, r3
 800510c:	f7fe fcca 	bl	8003aa4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3301      	adds	r3, #1
 8005114:	607b      	str	r3, [r7, #4]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b37      	cmp	r3, #55	; 0x37
 800511a:	d9ef      	bls.n	80050fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800511c:	480d      	ldr	r0, [pc, #52]	; (8005154 <prvInitialiseTaskLists+0x64>)
 800511e:	f7fe fcc1 	bl	8003aa4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005122:	480d      	ldr	r0, [pc, #52]	; (8005158 <prvInitialiseTaskLists+0x68>)
 8005124:	f7fe fcbe 	bl	8003aa4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005128:	480c      	ldr	r0, [pc, #48]	; (800515c <prvInitialiseTaskLists+0x6c>)
 800512a:	f7fe fcbb 	bl	8003aa4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800512e:	480c      	ldr	r0, [pc, #48]	; (8005160 <prvInitialiseTaskLists+0x70>)
 8005130:	f7fe fcb8 	bl	8003aa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005134:	480b      	ldr	r0, [pc, #44]	; (8005164 <prvInitialiseTaskLists+0x74>)
 8005136:	f7fe fcb5 	bl	8003aa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800513a:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <prvInitialiseTaskLists+0x78>)
 800513c:	4a05      	ldr	r2, [pc, #20]	; (8005154 <prvInitialiseTaskLists+0x64>)
 800513e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005140:	4b0a      	ldr	r3, [pc, #40]	; (800516c <prvInitialiseTaskLists+0x7c>)
 8005142:	4a05      	ldr	r2, [pc, #20]	; (8005158 <prvInitialiseTaskLists+0x68>)
 8005144:	601a      	str	r2, [r3, #0]
}
 8005146:	bf00      	nop
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20000810 	.word	0x20000810
 8005154:	20000c70 	.word	0x20000c70
 8005158:	20000c84 	.word	0x20000c84
 800515c:	20000ca0 	.word	0x20000ca0
 8005160:	20000cb4 	.word	0x20000cb4
 8005164:	20000ccc 	.word	0x20000ccc
 8005168:	20000c98 	.word	0x20000c98
 800516c:	20000c9c 	.word	0x20000c9c

08005170 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005176:	e019      	b.n	80051ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005178:	f000 fdd4 	bl	8005d24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800517c:	4b10      	ldr	r3, [pc, #64]	; (80051c0 <prvCheckTasksWaitingTermination+0x50>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	3304      	adds	r3, #4
 8005188:	4618      	mov	r0, r3
 800518a:	f7fe fd15 	bl	8003bb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800518e:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <prvCheckTasksWaitingTermination+0x54>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3b01      	subs	r3, #1
 8005194:	4a0b      	ldr	r2, [pc, #44]	; (80051c4 <prvCheckTasksWaitingTermination+0x54>)
 8005196:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005198:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <prvCheckTasksWaitingTermination+0x58>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3b01      	subs	r3, #1
 800519e:	4a0a      	ldr	r2, [pc, #40]	; (80051c8 <prvCheckTasksWaitingTermination+0x58>)
 80051a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80051a2:	f000 fdef 	bl	8005d84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f810 	bl	80051cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051ac:	4b06      	ldr	r3, [pc, #24]	; (80051c8 <prvCheckTasksWaitingTermination+0x58>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e1      	bne.n	8005178 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20000cb4 	.word	0x20000cb4
 80051c4:	20000ce0 	.word	0x20000ce0
 80051c8:	20000cc8 	.word	0x20000cc8

080051cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3354      	adds	r3, #84	; 0x54
 80051d8:	4618      	mov	r0, r3
 80051da:	f001 f8f9 	bl	80063d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d108      	bne.n	80051fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 ff87 	bl	8006100 <vPortFree>
				vPortFree( pxTCB );
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 ff84 	bl	8006100 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80051f8:	e018      	b.n	800522c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005200:	2b01      	cmp	r3, #1
 8005202:	d103      	bne.n	800520c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 ff7b 	bl	8006100 <vPortFree>
	}
 800520a:	e00f      	b.n	800522c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005212:	2b02      	cmp	r3, #2
 8005214:	d00a      	beq.n	800522c <prvDeleteTCB+0x60>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	60fb      	str	r3, [r7, #12]
}
 8005228:	bf00      	nop
 800522a:	e7fe      	b.n	800522a <prvDeleteTCB+0x5e>
	}
 800522c:	bf00      	nop
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800523a:	4b0c      	ldr	r3, [pc, #48]	; (800526c <prvResetNextTaskUnblockTime+0x38>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d104      	bne.n	800524e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005244:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <prvResetNextTaskUnblockTime+0x3c>)
 8005246:	f04f 32ff 	mov.w	r2, #4294967295
 800524a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800524c:	e008      	b.n	8005260 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800524e:	4b07      	ldr	r3, [pc, #28]	; (800526c <prvResetNextTaskUnblockTime+0x38>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	4a04      	ldr	r2, [pc, #16]	; (8005270 <prvResetNextTaskUnblockTime+0x3c>)
 800525e:	6013      	str	r3, [r2, #0]
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	20000c98 	.word	0x20000c98
 8005270:	20000d00 	.word	0x20000d00

08005274 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800527a:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <xTaskGetSchedulerState+0x34>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d102      	bne.n	8005288 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005282:	2301      	movs	r3, #1
 8005284:	607b      	str	r3, [r7, #4]
 8005286:	e008      	b.n	800529a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005288:	4b08      	ldr	r3, [pc, #32]	; (80052ac <xTaskGetSchedulerState+0x38>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d102      	bne.n	8005296 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005290:	2302      	movs	r3, #2
 8005292:	607b      	str	r3, [r7, #4]
 8005294:	e001      	b.n	800529a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005296:	2300      	movs	r3, #0
 8005298:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800529a:	687b      	ldr	r3, [r7, #4]
	}
 800529c:	4618      	mov	r0, r3
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	20000cec 	.word	0x20000cec
 80052ac:	20000d08 	.word	0x20000d08

080052b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80052bc:	2300      	movs	r3, #0
 80052be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d056      	beq.n	8005374 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80052c6:	4b2e      	ldr	r3, [pc, #184]	; (8005380 <xTaskPriorityDisinherit+0xd0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d00a      	beq.n	80052e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80052d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	60fb      	str	r3, [r7, #12]
}
 80052e2:	bf00      	nop
 80052e4:	e7fe      	b.n	80052e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	60bb      	str	r3, [r7, #8]
}
 8005300:	bf00      	nop
 8005302:	e7fe      	b.n	8005302 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005308:	1e5a      	subs	r2, r3, #1
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005316:	429a      	cmp	r2, r3
 8005318:	d02c      	beq.n	8005374 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800531e:	2b00      	cmp	r3, #0
 8005320:	d128      	bne.n	8005374 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	3304      	adds	r3, #4
 8005326:	4618      	mov	r0, r3
 8005328:	f7fe fc46 	bl	8003bb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005338:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005344:	4b0f      	ldr	r3, [pc, #60]	; (8005384 <xTaskPriorityDisinherit+0xd4>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	429a      	cmp	r2, r3
 800534a:	d903      	bls.n	8005354 <xTaskPriorityDisinherit+0xa4>
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	4a0c      	ldr	r2, [pc, #48]	; (8005384 <xTaskPriorityDisinherit+0xd4>)
 8005352:	6013      	str	r3, [r2, #0]
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4a09      	ldr	r2, [pc, #36]	; (8005388 <xTaskPriorityDisinherit+0xd8>)
 8005362:	441a      	add	r2, r3
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	3304      	adds	r3, #4
 8005368:	4619      	mov	r1, r3
 800536a:	4610      	mov	r0, r2
 800536c:	f7fe fbc7 	bl	8003afe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005370:	2301      	movs	r3, #1
 8005372:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005374:	697b      	ldr	r3, [r7, #20]
	}
 8005376:	4618      	mov	r0, r3
 8005378:	3718      	adds	r7, #24
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	2000080c 	.word	0x2000080c
 8005384:	20000ce8 	.word	0x20000ce8
 8005388:	20000810 	.word	0x20000810

0800538c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005396:	4b21      	ldr	r3, [pc, #132]	; (800541c <prvAddCurrentTaskToDelayedList+0x90>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800539c:	4b20      	ldr	r3, [pc, #128]	; (8005420 <prvAddCurrentTaskToDelayedList+0x94>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3304      	adds	r3, #4
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fe fc08 	bl	8003bb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ae:	d10a      	bne.n	80053c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d007      	beq.n	80053c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053b6:	4b1a      	ldr	r3, [pc, #104]	; (8005420 <prvAddCurrentTaskToDelayedList+0x94>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3304      	adds	r3, #4
 80053bc:	4619      	mov	r1, r3
 80053be:	4819      	ldr	r0, [pc, #100]	; (8005424 <prvAddCurrentTaskToDelayedList+0x98>)
 80053c0:	f7fe fb9d 	bl	8003afe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80053c4:	e026      	b.n	8005414 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4413      	add	r3, r2
 80053cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80053ce:	4b14      	ldr	r3, [pc, #80]	; (8005420 <prvAddCurrentTaskToDelayedList+0x94>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d209      	bcs.n	80053f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053de:	4b12      	ldr	r3, [pc, #72]	; (8005428 <prvAddCurrentTaskToDelayedList+0x9c>)
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	4b0f      	ldr	r3, [pc, #60]	; (8005420 <prvAddCurrentTaskToDelayedList+0x94>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3304      	adds	r3, #4
 80053e8:	4619      	mov	r1, r3
 80053ea:	4610      	mov	r0, r2
 80053ec:	f7fe fbab 	bl	8003b46 <vListInsert>
}
 80053f0:	e010      	b.n	8005414 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053f2:	4b0e      	ldr	r3, [pc, #56]	; (800542c <prvAddCurrentTaskToDelayedList+0xa0>)
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	4b0a      	ldr	r3, [pc, #40]	; (8005420 <prvAddCurrentTaskToDelayedList+0x94>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3304      	adds	r3, #4
 80053fc:	4619      	mov	r1, r3
 80053fe:	4610      	mov	r0, r2
 8005400:	f7fe fba1 	bl	8003b46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005404:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	429a      	cmp	r2, r3
 800540c:	d202      	bcs.n	8005414 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800540e:	4a08      	ldr	r2, [pc, #32]	; (8005430 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	6013      	str	r3, [r2, #0]
}
 8005414:	bf00      	nop
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20000ce4 	.word	0x20000ce4
 8005420:	2000080c 	.word	0x2000080c
 8005424:	20000ccc 	.word	0x20000ccc
 8005428:	20000c9c 	.word	0x20000c9c
 800542c:	20000c98 	.word	0x20000c98
 8005430:	20000d00 	.word	0x20000d00

08005434 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08a      	sub	sp, #40	; 0x28
 8005438:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800543e:	f000 fb07 	bl	8005a50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005442:	4b1c      	ldr	r3, [pc, #112]	; (80054b4 <xTimerCreateTimerTask+0x80>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d021      	beq.n	800548e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800544e:	2300      	movs	r3, #0
 8005450:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005452:	1d3a      	adds	r2, r7, #4
 8005454:	f107 0108 	add.w	r1, r7, #8
 8005458:	f107 030c 	add.w	r3, r7, #12
 800545c:	4618      	mov	r0, r3
 800545e:	f7fe fb07 	bl	8003a70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005462:	6879      	ldr	r1, [r7, #4]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	9202      	str	r2, [sp, #8]
 800546a:	9301      	str	r3, [sp, #4]
 800546c:	2302      	movs	r3, #2
 800546e:	9300      	str	r3, [sp, #0]
 8005470:	2300      	movs	r3, #0
 8005472:	460a      	mov	r2, r1
 8005474:	4910      	ldr	r1, [pc, #64]	; (80054b8 <xTimerCreateTimerTask+0x84>)
 8005476:	4811      	ldr	r0, [pc, #68]	; (80054bc <xTimerCreateTimerTask+0x88>)
 8005478:	f7ff f8b4 	bl	80045e4 <xTaskCreateStatic>
 800547c:	4603      	mov	r3, r0
 800547e:	4a10      	ldr	r2, [pc, #64]	; (80054c0 <xTimerCreateTimerTask+0x8c>)
 8005480:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005482:	4b0f      	ldr	r3, [pc, #60]	; (80054c0 <xTimerCreateTimerTask+0x8c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800548a:	2301      	movs	r3, #1
 800548c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10a      	bne.n	80054aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005498:	f383 8811 	msr	BASEPRI, r3
 800549c:	f3bf 8f6f 	isb	sy
 80054a0:	f3bf 8f4f 	dsb	sy
 80054a4:	613b      	str	r3, [r7, #16]
}
 80054a6:	bf00      	nop
 80054a8:	e7fe      	b.n	80054a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80054aa:	697b      	ldr	r3, [r7, #20]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3718      	adds	r7, #24
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	20000d3c 	.word	0x20000d3c
 80054b8:	08006578 	.word	0x08006578
 80054bc:	080055f9 	.word	0x080055f9
 80054c0:	20000d40 	.word	0x20000d40

080054c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08a      	sub	sp, #40	; 0x28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d10a      	bne.n	80054f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80054dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e0:	f383 8811 	msr	BASEPRI, r3
 80054e4:	f3bf 8f6f 	isb	sy
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	623b      	str	r3, [r7, #32]
}
 80054ee:	bf00      	nop
 80054f0:	e7fe      	b.n	80054f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80054f2:	4b1a      	ldr	r3, [pc, #104]	; (800555c <xTimerGenericCommand+0x98>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d02a      	beq.n	8005550 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b05      	cmp	r3, #5
 800550a:	dc18      	bgt.n	800553e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800550c:	f7ff feb2 	bl	8005274 <xTaskGetSchedulerState>
 8005510:	4603      	mov	r3, r0
 8005512:	2b02      	cmp	r3, #2
 8005514:	d109      	bne.n	800552a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005516:	4b11      	ldr	r3, [pc, #68]	; (800555c <xTimerGenericCommand+0x98>)
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	f107 0110 	add.w	r1, r7, #16
 800551e:	2300      	movs	r3, #0
 8005520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005522:	f7fe fc77 	bl	8003e14 <xQueueGenericSend>
 8005526:	6278      	str	r0, [r7, #36]	; 0x24
 8005528:	e012      	b.n	8005550 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800552a:	4b0c      	ldr	r3, [pc, #48]	; (800555c <xTimerGenericCommand+0x98>)
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	f107 0110 	add.w	r1, r7, #16
 8005532:	2300      	movs	r3, #0
 8005534:	2200      	movs	r2, #0
 8005536:	f7fe fc6d 	bl	8003e14 <xQueueGenericSend>
 800553a:	6278      	str	r0, [r7, #36]	; 0x24
 800553c:	e008      	b.n	8005550 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800553e:	4b07      	ldr	r3, [pc, #28]	; (800555c <xTimerGenericCommand+0x98>)
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	f107 0110 	add.w	r1, r7, #16
 8005546:	2300      	movs	r3, #0
 8005548:	683a      	ldr	r2, [r7, #0]
 800554a:	f7fe fd61 	bl	8004010 <xQueueGenericSendFromISR>
 800554e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005552:	4618      	mov	r0, r3
 8005554:	3728      	adds	r7, #40	; 0x28
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000d3c 	.word	0x20000d3c

08005560 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b088      	sub	sp, #32
 8005564:	af02      	add	r7, sp, #8
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800556a:	4b22      	ldr	r3, [pc, #136]	; (80055f4 <prvProcessExpiredTimer+0x94>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	3304      	adds	r3, #4
 8005578:	4618      	mov	r0, r3
 800557a:	f7fe fb1d 	bl	8003bb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b00      	cmp	r3, #0
 800558a:	d022      	beq.n	80055d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	699a      	ldr	r2, [r3, #24]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	18d1      	adds	r1, r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	6978      	ldr	r0, [r7, #20]
 800559a:	f000 f8d1 	bl	8005740 <prvInsertTimerInActiveList>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d01f      	beq.n	80055e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055a4:	2300      	movs	r3, #0
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	2300      	movs	r3, #0
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	2100      	movs	r1, #0
 80055ae:	6978      	ldr	r0, [r7, #20]
 80055b0:	f7ff ff88 	bl	80054c4 <xTimerGenericCommand>
 80055b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d113      	bne.n	80055e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	60fb      	str	r3, [r7, #12]
}
 80055ce:	bf00      	nop
 80055d0:	e7fe      	b.n	80055d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055d8:	f023 0301 	bic.w	r3, r3, #1
 80055dc:	b2da      	uxtb	r2, r3
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	6978      	ldr	r0, [r7, #20]
 80055ea:	4798      	blx	r3
}
 80055ec:	bf00      	nop
 80055ee:	3718      	adds	r7, #24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	20000d34 	.word	0x20000d34

080055f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005600:	f107 0308 	add.w	r3, r7, #8
 8005604:	4618      	mov	r0, r3
 8005606:	f000 f857 	bl	80056b8 <prvGetNextExpireTime>
 800560a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	4619      	mov	r1, r3
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 f803 	bl	800561c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005616:	f000 f8d5 	bl	80057c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800561a:	e7f1      	b.n	8005600 <prvTimerTask+0x8>

0800561c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005626:	f7ff fa39 	bl	8004a9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800562a:	f107 0308 	add.w	r3, r7, #8
 800562e:	4618      	mov	r0, r3
 8005630:	f000 f866 	bl	8005700 <prvSampleTimeNow>
 8005634:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d130      	bne.n	800569e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10a      	bne.n	8005658 <prvProcessTimerOrBlockTask+0x3c>
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	429a      	cmp	r2, r3
 8005648:	d806      	bhi.n	8005658 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800564a:	f7ff fa35 	bl	8004ab8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800564e:	68f9      	ldr	r1, [r7, #12]
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7ff ff85 	bl	8005560 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005656:	e024      	b.n	80056a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d008      	beq.n	8005670 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800565e:	4b13      	ldr	r3, [pc, #76]	; (80056ac <prvProcessTimerOrBlockTask+0x90>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <prvProcessTimerOrBlockTask+0x50>
 8005668:	2301      	movs	r3, #1
 800566a:	e000      	b.n	800566e <prvProcessTimerOrBlockTask+0x52>
 800566c:	2300      	movs	r3, #0
 800566e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005670:	4b0f      	ldr	r3, [pc, #60]	; (80056b0 <prvProcessTimerOrBlockTask+0x94>)
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	4619      	mov	r1, r3
 800567e:	f7fe ff7d 	bl	800457c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005682:	f7ff fa19 	bl	8004ab8 <xTaskResumeAll>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800568c:	4b09      	ldr	r3, [pc, #36]	; (80056b4 <prvProcessTimerOrBlockTask+0x98>)
 800568e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	f3bf 8f6f 	isb	sy
}
 800569c:	e001      	b.n	80056a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800569e:	f7ff fa0b 	bl	8004ab8 <xTaskResumeAll>
}
 80056a2:	bf00      	nop
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	bf00      	nop
 80056ac:	20000d38 	.word	0x20000d38
 80056b0:	20000d3c 	.word	0x20000d3c
 80056b4:	e000ed04 	.word	0xe000ed04

080056b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80056c0:	4b0e      	ldr	r3, [pc, #56]	; (80056fc <prvGetNextExpireTime+0x44>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <prvGetNextExpireTime+0x16>
 80056ca:	2201      	movs	r2, #1
 80056cc:	e000      	b.n	80056d0 <prvGetNextExpireTime+0x18>
 80056ce:	2200      	movs	r2, #0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d105      	bne.n	80056e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056dc:	4b07      	ldr	r3, [pc, #28]	; (80056fc <prvGetNextExpireTime+0x44>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60fb      	str	r3, [r7, #12]
 80056e6:	e001      	b.n	80056ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80056ec:	68fb      	ldr	r3, [r7, #12]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	20000d34 	.word	0x20000d34

08005700 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005708:	f7ff fa74 	bl	8004bf4 <xTaskGetTickCount>
 800570c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800570e:	4b0b      	ldr	r3, [pc, #44]	; (800573c <prvSampleTimeNow+0x3c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	429a      	cmp	r2, r3
 8005716:	d205      	bcs.n	8005724 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005718:	f000 f936 	bl	8005988 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	e002      	b.n	800572a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800572a:	4a04      	ldr	r2, [pc, #16]	; (800573c <prvSampleTimeNow+0x3c>)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005730:	68fb      	ldr	r3, [r7, #12]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000d44 	.word	0x20000d44

08005740 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	429a      	cmp	r2, r3
 8005764:	d812      	bhi.n	800578c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	1ad2      	subs	r2, r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	429a      	cmp	r2, r3
 8005772:	d302      	bcc.n	800577a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005774:	2301      	movs	r3, #1
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	e01b      	b.n	80057b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800577a:	4b10      	ldr	r3, [pc, #64]	; (80057bc <prvInsertTimerInActiveList+0x7c>)
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3304      	adds	r3, #4
 8005782:	4619      	mov	r1, r3
 8005784:	4610      	mov	r0, r2
 8005786:	f7fe f9de 	bl	8003b46 <vListInsert>
 800578a:	e012      	b.n	80057b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	429a      	cmp	r2, r3
 8005792:	d206      	bcs.n	80057a2 <prvInsertTimerInActiveList+0x62>
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d302      	bcc.n	80057a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800579c:	2301      	movs	r3, #1
 800579e:	617b      	str	r3, [r7, #20]
 80057a0:	e007      	b.n	80057b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057a2:	4b07      	ldr	r3, [pc, #28]	; (80057c0 <prvInsertTimerInActiveList+0x80>)
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3304      	adds	r3, #4
 80057aa:	4619      	mov	r1, r3
 80057ac:	4610      	mov	r0, r2
 80057ae:	f7fe f9ca 	bl	8003b46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80057b2:	697b      	ldr	r3, [r7, #20]
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	20000d38 	.word	0x20000d38
 80057c0:	20000d34 	.word	0x20000d34

080057c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08e      	sub	sp, #56	; 0x38
 80057c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057ca:	e0ca      	b.n	8005962 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	da18      	bge.n	8005804 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80057d2:	1d3b      	adds	r3, r7, #4
 80057d4:	3304      	adds	r3, #4
 80057d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80057d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10a      	bne.n	80057f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	61fb      	str	r3, [r7, #28]
}
 80057f0:	bf00      	nop
 80057f2:	e7fe      	b.n	80057f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80057f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057fa:	6850      	ldr	r0, [r2, #4]
 80057fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057fe:	6892      	ldr	r2, [r2, #8]
 8005800:	4611      	mov	r1, r2
 8005802:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	f2c0 80aa 	blt.w	8005960 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d004      	beq.n	8005822 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	3304      	adds	r3, #4
 800581c:	4618      	mov	r0, r3
 800581e:	f7fe f9cb 	bl	8003bb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005822:	463b      	mov	r3, r7
 8005824:	4618      	mov	r0, r3
 8005826:	f7ff ff6b 	bl	8005700 <prvSampleTimeNow>
 800582a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b09      	cmp	r3, #9
 8005830:	f200 8097 	bhi.w	8005962 <prvProcessReceivedCommands+0x19e>
 8005834:	a201      	add	r2, pc, #4	; (adr r2, 800583c <prvProcessReceivedCommands+0x78>)
 8005836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583a:	bf00      	nop
 800583c:	08005865 	.word	0x08005865
 8005840:	08005865 	.word	0x08005865
 8005844:	08005865 	.word	0x08005865
 8005848:	080058d9 	.word	0x080058d9
 800584c:	080058ed 	.word	0x080058ed
 8005850:	08005937 	.word	0x08005937
 8005854:	08005865 	.word	0x08005865
 8005858:	08005865 	.word	0x08005865
 800585c:	080058d9 	.word	0x080058d9
 8005860:	080058ed 	.word	0x080058ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800586a:	f043 0301 	orr.w	r3, r3, #1
 800586e:	b2da      	uxtb	r2, r3
 8005870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	18d1      	adds	r1, r2, r3
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005884:	f7ff ff5c 	bl	8005740 <prvInsertTimerInActiveList>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d069      	beq.n	8005962 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005894:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d05e      	beq.n	8005962 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	441a      	add	r2, r3
 80058ac:	2300      	movs	r3, #0
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	2300      	movs	r3, #0
 80058b2:	2100      	movs	r1, #0
 80058b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058b6:	f7ff fe05 	bl	80054c4 <xTimerGenericCommand>
 80058ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d14f      	bne.n	8005962 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	61bb      	str	r3, [r7, #24]
}
 80058d4:	bf00      	nop
 80058d6:	e7fe      	b.n	80058d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058de:	f023 0301 	bic.w	r3, r3, #1
 80058e2:	b2da      	uxtb	r2, r3
 80058e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80058ea:	e03a      	b.n	8005962 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80058ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058f2:	f043 0301 	orr.w	r3, r3, #1
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10a      	bne.n	8005922 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	617b      	str	r3, [r7, #20]
}
 800591e:	bf00      	nop
 8005920:	e7fe      	b.n	8005920 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005924:	699a      	ldr	r2, [r3, #24]
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	18d1      	adds	r1, r2, r3
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800592e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005930:	f7ff ff06 	bl	8005740 <prvInsertTimerInActiveList>
					break;
 8005934:	e015      	b.n	8005962 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d103      	bne.n	800594c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005946:	f000 fbdb 	bl	8006100 <vPortFree>
 800594a:	e00a      	b.n	8005962 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005952:	f023 0301 	bic.w	r3, r3, #1
 8005956:	b2da      	uxtb	r2, r3
 8005958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800595e:	e000      	b.n	8005962 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005960:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005962:	4b08      	ldr	r3, [pc, #32]	; (8005984 <prvProcessReceivedCommands+0x1c0>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	1d39      	adds	r1, r7, #4
 8005968:	2200      	movs	r2, #0
 800596a:	4618      	mov	r0, r3
 800596c:	f7fe fbec 	bl	8004148 <xQueueReceive>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	f47f af2a 	bne.w	80057cc <prvProcessReceivedCommands+0x8>
	}
}
 8005978:	bf00      	nop
 800597a:	bf00      	nop
 800597c:	3730      	adds	r7, #48	; 0x30
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20000d3c 	.word	0x20000d3c

08005988 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b088      	sub	sp, #32
 800598c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800598e:	e048      	b.n	8005a22 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005990:	4b2d      	ldr	r3, [pc, #180]	; (8005a48 <prvSwitchTimerLists+0xc0>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800599a:	4b2b      	ldr	r3, [pc, #172]	; (8005a48 <prvSwitchTimerLists+0xc0>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3304      	adds	r3, #4
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fe f905 	bl	8003bb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d02e      	beq.n	8005a22 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4413      	add	r3, r2
 80059cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d90e      	bls.n	80059f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059e2:	4b19      	ldr	r3, [pc, #100]	; (8005a48 <prvSwitchTimerLists+0xc0>)
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3304      	adds	r3, #4
 80059ea:	4619      	mov	r1, r3
 80059ec:	4610      	mov	r0, r2
 80059ee:	f7fe f8aa 	bl	8003b46 <vListInsert>
 80059f2:	e016      	b.n	8005a22 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80059f4:	2300      	movs	r3, #0
 80059f6:	9300      	str	r3, [sp, #0]
 80059f8:	2300      	movs	r3, #0
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	2100      	movs	r1, #0
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f7ff fd60 	bl	80054c4 <xTimerGenericCommand>
 8005a04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10a      	bne.n	8005a22 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	603b      	str	r3, [r7, #0]
}
 8005a1e:	bf00      	nop
 8005a20:	e7fe      	b.n	8005a20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a22:	4b09      	ldr	r3, [pc, #36]	; (8005a48 <prvSwitchTimerLists+0xc0>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1b1      	bne.n	8005990 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a2c:	4b06      	ldr	r3, [pc, #24]	; (8005a48 <prvSwitchTimerLists+0xc0>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a32:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <prvSwitchTimerLists+0xc4>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a04      	ldr	r2, [pc, #16]	; (8005a48 <prvSwitchTimerLists+0xc0>)
 8005a38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a3a:	4a04      	ldr	r2, [pc, #16]	; (8005a4c <prvSwitchTimerLists+0xc4>)
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	6013      	str	r3, [r2, #0]
}
 8005a40:	bf00      	nop
 8005a42:	3718      	adds	r7, #24
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	20000d34 	.word	0x20000d34
 8005a4c:	20000d38 	.word	0x20000d38

08005a50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a56:	f000 f965 	bl	8005d24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a5a:	4b15      	ldr	r3, [pc, #84]	; (8005ab0 <prvCheckForValidListAndQueue+0x60>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d120      	bne.n	8005aa4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a62:	4814      	ldr	r0, [pc, #80]	; (8005ab4 <prvCheckForValidListAndQueue+0x64>)
 8005a64:	f7fe f81e 	bl	8003aa4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a68:	4813      	ldr	r0, [pc, #76]	; (8005ab8 <prvCheckForValidListAndQueue+0x68>)
 8005a6a:	f7fe f81b 	bl	8003aa4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a6e:	4b13      	ldr	r3, [pc, #76]	; (8005abc <prvCheckForValidListAndQueue+0x6c>)
 8005a70:	4a10      	ldr	r2, [pc, #64]	; (8005ab4 <prvCheckForValidListAndQueue+0x64>)
 8005a72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a74:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <prvCheckForValidListAndQueue+0x70>)
 8005a76:	4a10      	ldr	r2, [pc, #64]	; (8005ab8 <prvCheckForValidListAndQueue+0x68>)
 8005a78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <prvCheckForValidListAndQueue+0x74>)
 8005a80:	4a11      	ldr	r2, [pc, #68]	; (8005ac8 <prvCheckForValidListAndQueue+0x78>)
 8005a82:	2110      	movs	r1, #16
 8005a84:	200a      	movs	r0, #10
 8005a86:	f7fe f929 	bl	8003cdc <xQueueGenericCreateStatic>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	4a08      	ldr	r2, [pc, #32]	; (8005ab0 <prvCheckForValidListAndQueue+0x60>)
 8005a8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a90:	4b07      	ldr	r3, [pc, #28]	; (8005ab0 <prvCheckForValidListAndQueue+0x60>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d005      	beq.n	8005aa4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a98:	4b05      	ldr	r3, [pc, #20]	; (8005ab0 <prvCheckForValidListAndQueue+0x60>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	490b      	ldr	r1, [pc, #44]	; (8005acc <prvCheckForValidListAndQueue+0x7c>)
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe fd42 	bl	8004528 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005aa4:	f000 f96e 	bl	8005d84 <vPortExitCritical>
}
 8005aa8:	bf00      	nop
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20000d3c 	.word	0x20000d3c
 8005ab4:	20000d0c 	.word	0x20000d0c
 8005ab8:	20000d20 	.word	0x20000d20
 8005abc:	20000d34 	.word	0x20000d34
 8005ac0:	20000d38 	.word	0x20000d38
 8005ac4:	20000de8 	.word	0x20000de8
 8005ac8:	20000d48 	.word	0x20000d48
 8005acc:	08006580 	.word	0x08006580

08005ad0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	3b04      	subs	r3, #4
 8005ae0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005ae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	3b04      	subs	r3, #4
 8005aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f023 0201 	bic.w	r2, r3, #1
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3b04      	subs	r3, #4
 8005afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b00:	4a0c      	ldr	r2, [pc, #48]	; (8005b34 <pxPortInitialiseStack+0x64>)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	3b14      	subs	r3, #20
 8005b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3b04      	subs	r3, #4
 8005b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f06f 0202 	mvn.w	r2, #2
 8005b1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3b20      	subs	r3, #32
 8005b24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005b26:	68fb      	ldr	r3, [r7, #12]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	08005b39 	.word	0x08005b39

08005b38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005b42:	4b12      	ldr	r3, [pc, #72]	; (8005b8c <prvTaskExitError+0x54>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4a:	d00a      	beq.n	8005b62 <prvTaskExitError+0x2a>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	60fb      	str	r3, [r7, #12]
}
 8005b5e:	bf00      	nop
 8005b60:	e7fe      	b.n	8005b60 <prvTaskExitError+0x28>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	60bb      	str	r3, [r7, #8]
}
 8005b74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b76:	bf00      	nop
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0fc      	beq.n	8005b78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b7e:	bf00      	nop
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	2000000c 	.word	0x2000000c

08005b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b90:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <pxCurrentTCBConst2>)
 8005b92:	6819      	ldr	r1, [r3, #0]
 8005b94:	6808      	ldr	r0, [r1, #0]
 8005b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9a:	f380 8809 	msr	PSP, r0
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f04f 0000 	mov.w	r0, #0
 8005ba6:	f380 8811 	msr	BASEPRI, r0
 8005baa:	4770      	bx	lr
 8005bac:	f3af 8000 	nop.w

08005bb0 <pxCurrentTCBConst2>:
 8005bb0:	2000080c 	.word	0x2000080c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005bb4:	bf00      	nop
 8005bb6:	bf00      	nop

08005bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005bb8:	4808      	ldr	r0, [pc, #32]	; (8005bdc <prvPortStartFirstTask+0x24>)
 8005bba:	6800      	ldr	r0, [r0, #0]
 8005bbc:	6800      	ldr	r0, [r0, #0]
 8005bbe:	f380 8808 	msr	MSP, r0
 8005bc2:	f04f 0000 	mov.w	r0, #0
 8005bc6:	f380 8814 	msr	CONTROL, r0
 8005bca:	b662      	cpsie	i
 8005bcc:	b661      	cpsie	f
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	df00      	svc	0
 8005bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005bda:	bf00      	nop
 8005bdc:	e000ed08 	.word	0xe000ed08

08005be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005be6:	4b46      	ldr	r3, [pc, #280]	; (8005d00 <xPortStartScheduler+0x120>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a46      	ldr	r2, [pc, #280]	; (8005d04 <xPortStartScheduler+0x124>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d10a      	bne.n	8005c06 <xPortStartScheduler+0x26>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	613b      	str	r3, [r7, #16]
}
 8005c02:	bf00      	nop
 8005c04:	e7fe      	b.n	8005c04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c06:	4b3e      	ldr	r3, [pc, #248]	; (8005d00 <xPortStartScheduler+0x120>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a3f      	ldr	r2, [pc, #252]	; (8005d08 <xPortStartScheduler+0x128>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d10a      	bne.n	8005c26 <xPortStartScheduler+0x46>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	60fb      	str	r3, [r7, #12]
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c26:	4b39      	ldr	r3, [pc, #228]	; (8005d0c <xPortStartScheduler+0x12c>)
 8005c28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	22ff      	movs	r2, #255	; 0xff
 8005c36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c48:	b2da      	uxtb	r2, r3
 8005c4a:	4b31      	ldr	r3, [pc, #196]	; (8005d10 <xPortStartScheduler+0x130>)
 8005c4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005c4e:	4b31      	ldr	r3, [pc, #196]	; (8005d14 <xPortStartScheduler+0x134>)
 8005c50:	2207      	movs	r2, #7
 8005c52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c54:	e009      	b.n	8005c6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005c56:	4b2f      	ldr	r3, [pc, #188]	; (8005d14 <xPortStartScheduler+0x134>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	4a2d      	ldr	r2, [pc, #180]	; (8005d14 <xPortStartScheduler+0x134>)
 8005c5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c6a:	78fb      	ldrb	r3, [r7, #3]
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c72:	2b80      	cmp	r3, #128	; 0x80
 8005c74:	d0ef      	beq.n	8005c56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c76:	4b27      	ldr	r3, [pc, #156]	; (8005d14 <xPortStartScheduler+0x134>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f1c3 0307 	rsb	r3, r3, #7
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d00a      	beq.n	8005c98 <xPortStartScheduler+0xb8>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	60bb      	str	r3, [r7, #8]
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c98:	4b1e      	ldr	r3, [pc, #120]	; (8005d14 <xPortStartScheduler+0x134>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	4a1d      	ldr	r2, [pc, #116]	; (8005d14 <xPortStartScheduler+0x134>)
 8005ca0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ca2:	4b1c      	ldr	r3, [pc, #112]	; (8005d14 <xPortStartScheduler+0x134>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005caa:	4a1a      	ldr	r2, [pc, #104]	; (8005d14 <xPortStartScheduler+0x134>)
 8005cac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005cb6:	4b18      	ldr	r3, [pc, #96]	; (8005d18 <xPortStartScheduler+0x138>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a17      	ldr	r2, [pc, #92]	; (8005d18 <xPortStartScheduler+0x138>)
 8005cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005cc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005cc2:	4b15      	ldr	r3, [pc, #84]	; (8005d18 <xPortStartScheduler+0x138>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a14      	ldr	r2, [pc, #80]	; (8005d18 <xPortStartScheduler+0x138>)
 8005cc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005ccc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005cce:	f000 f8dd 	bl	8005e8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005cd2:	4b12      	ldr	r3, [pc, #72]	; (8005d1c <xPortStartScheduler+0x13c>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005cd8:	f000 f8fc 	bl	8005ed4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005cdc:	4b10      	ldr	r3, [pc, #64]	; (8005d20 <xPortStartScheduler+0x140>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a0f      	ldr	r2, [pc, #60]	; (8005d20 <xPortStartScheduler+0x140>)
 8005ce2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ce6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ce8:	f7ff ff66 	bl	8005bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005cec:	f7ff f84c 	bl	8004d88 <vTaskSwitchContext>
	prvTaskExitError();
 8005cf0:	f7ff ff22 	bl	8005b38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	e000ed00 	.word	0xe000ed00
 8005d04:	410fc271 	.word	0x410fc271
 8005d08:	410fc270 	.word	0x410fc270
 8005d0c:	e000e400 	.word	0xe000e400
 8005d10:	20000e38 	.word	0x20000e38
 8005d14:	20000e3c 	.word	0x20000e3c
 8005d18:	e000ed20 	.word	0xe000ed20
 8005d1c:	2000000c 	.word	0x2000000c
 8005d20:	e000ef34 	.word	0xe000ef34

08005d24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
	__asm volatile
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	607b      	str	r3, [r7, #4]
}
 8005d3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d3e:	4b0f      	ldr	r3, [pc, #60]	; (8005d7c <vPortEnterCritical+0x58>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3301      	adds	r3, #1
 8005d44:	4a0d      	ldr	r2, [pc, #52]	; (8005d7c <vPortEnterCritical+0x58>)
 8005d46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d48:	4b0c      	ldr	r3, [pc, #48]	; (8005d7c <vPortEnterCritical+0x58>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d10f      	bne.n	8005d70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005d50:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <vPortEnterCritical+0x5c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	603b      	str	r3, [r7, #0]
}
 8005d6c:	bf00      	nop
 8005d6e:	e7fe      	b.n	8005d6e <vPortEnterCritical+0x4a>
	}
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	2000000c 	.word	0x2000000c
 8005d80:	e000ed04 	.word	0xe000ed04

08005d84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d8a:	4b12      	ldr	r3, [pc, #72]	; (8005dd4 <vPortExitCritical+0x50>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10a      	bne.n	8005da8 <vPortExitCritical+0x24>
	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	607b      	str	r3, [r7, #4]
}
 8005da4:	bf00      	nop
 8005da6:	e7fe      	b.n	8005da6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005da8:	4b0a      	ldr	r3, [pc, #40]	; (8005dd4 <vPortExitCritical+0x50>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	4a09      	ldr	r2, [pc, #36]	; (8005dd4 <vPortExitCritical+0x50>)
 8005db0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005db2:	4b08      	ldr	r3, [pc, #32]	; (8005dd4 <vPortExitCritical+0x50>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d105      	bne.n	8005dc6 <vPortExitCritical+0x42>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	f383 8811 	msr	BASEPRI, r3
}
 8005dc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	2000000c 	.word	0x2000000c
	...

08005de0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005de0:	f3ef 8009 	mrs	r0, PSP
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	4b15      	ldr	r3, [pc, #84]	; (8005e40 <pxCurrentTCBConst>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	f01e 0f10 	tst.w	lr, #16
 8005df0:	bf08      	it	eq
 8005df2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005df6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dfa:	6010      	str	r0, [r2, #0]
 8005dfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e04:	f380 8811 	msr	BASEPRI, r0
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f7fe ffba 	bl	8004d88 <vTaskSwitchContext>
 8005e14:	f04f 0000 	mov.w	r0, #0
 8005e18:	f380 8811 	msr	BASEPRI, r0
 8005e1c:	bc09      	pop	{r0, r3}
 8005e1e:	6819      	ldr	r1, [r3, #0]
 8005e20:	6808      	ldr	r0, [r1, #0]
 8005e22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e26:	f01e 0f10 	tst.w	lr, #16
 8005e2a:	bf08      	it	eq
 8005e2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e30:	f380 8809 	msr	PSP, r0
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	f3af 8000 	nop.w

08005e40 <pxCurrentTCBConst>:
 8005e40:	2000080c 	.word	0x2000080c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop

08005e48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e52:	f383 8811 	msr	BASEPRI, r3
 8005e56:	f3bf 8f6f 	isb	sy
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	607b      	str	r3, [r7, #4]
}
 8005e60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e62:	f7fe fed7 	bl	8004c14 <xTaskIncrementTick>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e6c:	4b06      	ldr	r3, [pc, #24]	; (8005e88 <xPortSysTickHandler+0x40>)
 8005e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	2300      	movs	r3, #0
 8005e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	f383 8811 	msr	BASEPRI, r3
}
 8005e7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e80:	bf00      	nop
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	e000ed04 	.word	0xe000ed04

08005e8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e90:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <vPortSetupTimerInterrupt+0x34>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e96:	4b0b      	ldr	r3, [pc, #44]	; (8005ec4 <vPortSetupTimerInterrupt+0x38>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <vPortSetupTimerInterrupt+0x3c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a0a      	ldr	r2, [pc, #40]	; (8005ecc <vPortSetupTimerInterrupt+0x40>)
 8005ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea6:	099b      	lsrs	r3, r3, #6
 8005ea8:	4a09      	ldr	r2, [pc, #36]	; (8005ed0 <vPortSetupTimerInterrupt+0x44>)
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005eae:	4b04      	ldr	r3, [pc, #16]	; (8005ec0 <vPortSetupTimerInterrupt+0x34>)
 8005eb0:	2207      	movs	r2, #7
 8005eb2:	601a      	str	r2, [r3, #0]
}
 8005eb4:	bf00      	nop
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	e000e010 	.word	0xe000e010
 8005ec4:	e000e018 	.word	0xe000e018
 8005ec8:	20000000 	.word	0x20000000
 8005ecc:	10624dd3 	.word	0x10624dd3
 8005ed0:	e000e014 	.word	0xe000e014

08005ed4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ed4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005ee4 <vPortEnableVFP+0x10>
 8005ed8:	6801      	ldr	r1, [r0, #0]
 8005eda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005ede:	6001      	str	r1, [r0, #0]
 8005ee0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005ee2:	bf00      	nop
 8005ee4:	e000ed88 	.word	0xe000ed88

08005ee8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005eee:	f3ef 8305 	mrs	r3, IPSR
 8005ef2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b0f      	cmp	r3, #15
 8005ef8:	d914      	bls.n	8005f24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005efa:	4a17      	ldr	r2, [pc, #92]	; (8005f58 <vPortValidateInterruptPriority+0x70>)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	4413      	add	r3, r2
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f04:	4b15      	ldr	r3, [pc, #84]	; (8005f5c <vPortValidateInterruptPriority+0x74>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	7afa      	ldrb	r2, [r7, #11]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d20a      	bcs.n	8005f24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	607b      	str	r3, [r7, #4]
}
 8005f20:	bf00      	nop
 8005f22:	e7fe      	b.n	8005f22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f24:	4b0e      	ldr	r3, [pc, #56]	; (8005f60 <vPortValidateInterruptPriority+0x78>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f2c:	4b0d      	ldr	r3, [pc, #52]	; (8005f64 <vPortValidateInterruptPriority+0x7c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d90a      	bls.n	8005f4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	603b      	str	r3, [r7, #0]
}
 8005f46:	bf00      	nop
 8005f48:	e7fe      	b.n	8005f48 <vPortValidateInterruptPriority+0x60>
	}
 8005f4a:	bf00      	nop
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	e000e3f0 	.word	0xe000e3f0
 8005f5c:	20000e38 	.word	0x20000e38
 8005f60:	e000ed0c 	.word	0xe000ed0c
 8005f64:	20000e3c 	.word	0x20000e3c

08005f68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08a      	sub	sp, #40	; 0x28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f74:	f7fe fd92 	bl	8004a9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f78:	4b5b      	ldr	r3, [pc, #364]	; (80060e8 <pvPortMalloc+0x180>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d101      	bne.n	8005f84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f80:	f000 f920 	bl	80061c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f84:	4b59      	ldr	r3, [pc, #356]	; (80060ec <pvPortMalloc+0x184>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f040 8093 	bne.w	80060b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d01d      	beq.n	8005fd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005f98:	2208      	movs	r2, #8
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d014      	beq.n	8005fd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f023 0307 	bic.w	r3, r3, #7
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <pvPortMalloc+0x6c>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	617b      	str	r3, [r7, #20]
}
 8005fd0:	bf00      	nop
 8005fd2:	e7fe      	b.n	8005fd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d06e      	beq.n	80060b8 <pvPortMalloc+0x150>
 8005fda:	4b45      	ldr	r3, [pc, #276]	; (80060f0 <pvPortMalloc+0x188>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d869      	bhi.n	80060b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005fe4:	4b43      	ldr	r3, [pc, #268]	; (80060f4 <pvPortMalloc+0x18c>)
 8005fe6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005fe8:	4b42      	ldr	r3, [pc, #264]	; (80060f4 <pvPortMalloc+0x18c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fee:	e004      	b.n	8005ffa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	429a      	cmp	r2, r3
 8006002:	d903      	bls.n	800600c <pvPortMalloc+0xa4>
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d1f1      	bne.n	8005ff0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800600c:	4b36      	ldr	r3, [pc, #216]	; (80060e8 <pvPortMalloc+0x180>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006012:	429a      	cmp	r2, r3
 8006014:	d050      	beq.n	80060b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2208      	movs	r2, #8
 800601c:	4413      	add	r3, r2
 800601e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	1ad2      	subs	r2, r2, r3
 8006030:	2308      	movs	r3, #8
 8006032:	005b      	lsls	r3, r3, #1
 8006034:	429a      	cmp	r2, r3
 8006036:	d91f      	bls.n	8006078 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4413      	add	r3, r2
 800603e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <pvPortMalloc+0xf8>
	__asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	613b      	str	r3, [r7, #16]
}
 800605c:	bf00      	nop
 800605e:	e7fe      	b.n	800605e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	1ad2      	subs	r2, r2, r3
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006072:	69b8      	ldr	r0, [r7, #24]
 8006074:	f000 f908 	bl	8006288 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006078:	4b1d      	ldr	r3, [pc, #116]	; (80060f0 <pvPortMalloc+0x188>)
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	4a1b      	ldr	r2, [pc, #108]	; (80060f0 <pvPortMalloc+0x188>)
 8006084:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006086:	4b1a      	ldr	r3, [pc, #104]	; (80060f0 <pvPortMalloc+0x188>)
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	4b1b      	ldr	r3, [pc, #108]	; (80060f8 <pvPortMalloc+0x190>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d203      	bcs.n	800609a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006092:	4b17      	ldr	r3, [pc, #92]	; (80060f0 <pvPortMalloc+0x188>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a18      	ldr	r2, [pc, #96]	; (80060f8 <pvPortMalloc+0x190>)
 8006098:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800609a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	4b13      	ldr	r3, [pc, #76]	; (80060ec <pvPortMalloc+0x184>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	431a      	orrs	r2, r3
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80060a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80060ae:	4b13      	ldr	r3, [pc, #76]	; (80060fc <pvPortMalloc+0x194>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	3301      	adds	r3, #1
 80060b4:	4a11      	ldr	r2, [pc, #68]	; (80060fc <pvPortMalloc+0x194>)
 80060b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060b8:	f7fe fcfe 	bl	8004ab8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	f003 0307 	and.w	r3, r3, #7
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d00a      	beq.n	80060dc <pvPortMalloc+0x174>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	60fb      	str	r3, [r7, #12]
}
 80060d8:	bf00      	nop
 80060da:	e7fe      	b.n	80060da <pvPortMalloc+0x172>
	return pvReturn;
 80060dc:	69fb      	ldr	r3, [r7, #28]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3728      	adds	r7, #40	; 0x28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20004a48 	.word	0x20004a48
 80060ec:	20004a5c 	.word	0x20004a5c
 80060f0:	20004a4c 	.word	0x20004a4c
 80060f4:	20004a40 	.word	0x20004a40
 80060f8:	20004a50 	.word	0x20004a50
 80060fc:	20004a54 	.word	0x20004a54

08006100 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d04d      	beq.n	80061ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006112:	2308      	movs	r3, #8
 8006114:	425b      	negs	r3, r3
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4413      	add	r3, r2
 800611a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	4b24      	ldr	r3, [pc, #144]	; (80061b8 <vPortFree+0xb8>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4013      	ands	r3, r2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10a      	bne.n	8006144 <vPortFree+0x44>
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	60fb      	str	r3, [r7, #12]
}
 8006140:	bf00      	nop
 8006142:	e7fe      	b.n	8006142 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <vPortFree+0x62>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	60bb      	str	r3, [r7, #8]
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	4b14      	ldr	r3, [pc, #80]	; (80061b8 <vPortFree+0xb8>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4013      	ands	r3, r2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d01e      	beq.n	80061ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d11a      	bne.n	80061ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	4b0e      	ldr	r3, [pc, #56]	; (80061b8 <vPortFree+0xb8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	43db      	mvns	r3, r3
 8006182:	401a      	ands	r2, r3
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006188:	f7fe fc88 	bl	8004a9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <vPortFree+0xbc>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4413      	add	r3, r2
 8006196:	4a09      	ldr	r2, [pc, #36]	; (80061bc <vPortFree+0xbc>)
 8006198:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800619a:	6938      	ldr	r0, [r7, #16]
 800619c:	f000 f874 	bl	8006288 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80061a0:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <vPortFree+0xc0>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3301      	adds	r3, #1
 80061a6:	4a06      	ldr	r2, [pc, #24]	; (80061c0 <vPortFree+0xc0>)
 80061a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80061aa:	f7fe fc85 	bl	8004ab8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061ae:	bf00      	nop
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	20004a5c 	.word	0x20004a5c
 80061bc:	20004a4c 	.word	0x20004a4c
 80061c0:	20004a58 	.word	0x20004a58

080061c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80061ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061d0:	4b27      	ldr	r3, [pc, #156]	; (8006270 <prvHeapInit+0xac>)
 80061d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f003 0307 	and.w	r3, r3, #7
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00c      	beq.n	80061f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3307      	adds	r3, #7
 80061e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f023 0307 	bic.w	r3, r3, #7
 80061ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	4a1f      	ldr	r2, [pc, #124]	; (8006270 <prvHeapInit+0xac>)
 80061f4:	4413      	add	r3, r2
 80061f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061fc:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <prvHeapInit+0xb0>)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006202:	4b1c      	ldr	r3, [pc, #112]	; (8006274 <prvHeapInit+0xb0>)
 8006204:	2200      	movs	r2, #0
 8006206:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	4413      	add	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006210:	2208      	movs	r2, #8
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	1a9b      	subs	r3, r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f023 0307 	bic.w	r3, r3, #7
 800621e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	4a15      	ldr	r2, [pc, #84]	; (8006278 <prvHeapInit+0xb4>)
 8006224:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006226:	4b14      	ldr	r3, [pc, #80]	; (8006278 <prvHeapInit+0xb4>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2200      	movs	r2, #0
 800622c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800622e:	4b12      	ldr	r3, [pc, #72]	; (8006278 <prvHeapInit+0xb4>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2200      	movs	r2, #0
 8006234:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	1ad2      	subs	r2, r2, r3
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006244:	4b0c      	ldr	r3, [pc, #48]	; (8006278 <prvHeapInit+0xb4>)
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	4a0a      	ldr	r2, [pc, #40]	; (800627c <prvHeapInit+0xb8>)
 8006252:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	4a09      	ldr	r2, [pc, #36]	; (8006280 <prvHeapInit+0xbc>)
 800625a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800625c:	4b09      	ldr	r3, [pc, #36]	; (8006284 <prvHeapInit+0xc0>)
 800625e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006262:	601a      	str	r2, [r3, #0]
}
 8006264:	bf00      	nop
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	20000e40 	.word	0x20000e40
 8006274:	20004a40 	.word	0x20004a40
 8006278:	20004a48 	.word	0x20004a48
 800627c:	20004a50 	.word	0x20004a50
 8006280:	20004a4c 	.word	0x20004a4c
 8006284:	20004a5c 	.word	0x20004a5c

08006288 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006290:	4b28      	ldr	r3, [pc, #160]	; (8006334 <prvInsertBlockIntoFreeList+0xac>)
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	e002      	b.n	800629c <prvInsertBlockIntoFreeList+0x14>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d8f7      	bhi.n	8006296 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	4413      	add	r3, r2
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d108      	bne.n	80062ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	441a      	add	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	441a      	add	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d118      	bne.n	8006310 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	4b15      	ldr	r3, [pc, #84]	; (8006338 <prvInsertBlockIntoFreeList+0xb0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d00d      	beq.n	8006306 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	441a      	add	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	e008      	b.n	8006318 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006306:	4b0c      	ldr	r3, [pc, #48]	; (8006338 <prvInsertBlockIntoFreeList+0xb0>)
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	e003      	b.n	8006318 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	429a      	cmp	r2, r3
 800631e:	d002      	beq.n	8006326 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006326:	bf00      	nop
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	20004a40 	.word	0x20004a40
 8006338:	20004a48 	.word	0x20004a48

0800633c <__libc_init_array>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	4d0d      	ldr	r5, [pc, #52]	; (8006374 <__libc_init_array+0x38>)
 8006340:	4c0d      	ldr	r4, [pc, #52]	; (8006378 <__libc_init_array+0x3c>)
 8006342:	1b64      	subs	r4, r4, r5
 8006344:	10a4      	asrs	r4, r4, #2
 8006346:	2600      	movs	r6, #0
 8006348:	42a6      	cmp	r6, r4
 800634a:	d109      	bne.n	8006360 <__libc_init_array+0x24>
 800634c:	4d0b      	ldr	r5, [pc, #44]	; (800637c <__libc_init_array+0x40>)
 800634e:	4c0c      	ldr	r4, [pc, #48]	; (8006380 <__libc_init_array+0x44>)
 8006350:	f000 f8f6 	bl	8006540 <_init>
 8006354:	1b64      	subs	r4, r4, r5
 8006356:	10a4      	asrs	r4, r4, #2
 8006358:	2600      	movs	r6, #0
 800635a:	42a6      	cmp	r6, r4
 800635c:	d105      	bne.n	800636a <__libc_init_array+0x2e>
 800635e:	bd70      	pop	{r4, r5, r6, pc}
 8006360:	f855 3b04 	ldr.w	r3, [r5], #4
 8006364:	4798      	blx	r3
 8006366:	3601      	adds	r6, #1
 8006368:	e7ee      	b.n	8006348 <__libc_init_array+0xc>
 800636a:	f855 3b04 	ldr.w	r3, [r5], #4
 800636e:	4798      	blx	r3
 8006370:	3601      	adds	r6, #1
 8006372:	e7f2      	b.n	800635a <__libc_init_array+0x1e>
 8006374:	0800662c 	.word	0x0800662c
 8006378:	0800662c 	.word	0x0800662c
 800637c:	0800662c 	.word	0x0800662c
 8006380:	08006630 	.word	0x08006630

08006384 <__retarget_lock_acquire_recursive>:
 8006384:	4770      	bx	lr

08006386 <__retarget_lock_release_recursive>:
 8006386:	4770      	bx	lr

08006388 <memcpy>:
 8006388:	440a      	add	r2, r1
 800638a:	4291      	cmp	r1, r2
 800638c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006390:	d100      	bne.n	8006394 <memcpy+0xc>
 8006392:	4770      	bx	lr
 8006394:	b510      	push	{r4, lr}
 8006396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800639a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800639e:	4291      	cmp	r1, r2
 80063a0:	d1f9      	bne.n	8006396 <memcpy+0xe>
 80063a2:	bd10      	pop	{r4, pc}

080063a4 <memset>:
 80063a4:	4402      	add	r2, r0
 80063a6:	4603      	mov	r3, r0
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d100      	bne.n	80063ae <memset+0xa>
 80063ac:	4770      	bx	lr
 80063ae:	f803 1b01 	strb.w	r1, [r3], #1
 80063b2:	e7f9      	b.n	80063a8 <memset+0x4>

080063b4 <cleanup_glue>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	460c      	mov	r4, r1
 80063b8:	6809      	ldr	r1, [r1, #0]
 80063ba:	4605      	mov	r5, r0
 80063bc:	b109      	cbz	r1, 80063c2 <cleanup_glue+0xe>
 80063be:	f7ff fff9 	bl	80063b4 <cleanup_glue>
 80063c2:	4621      	mov	r1, r4
 80063c4:	4628      	mov	r0, r5
 80063c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063ca:	f000 b869 	b.w	80064a0 <_free_r>
	...

080063d0 <_reclaim_reent>:
 80063d0:	4b2c      	ldr	r3, [pc, #176]	; (8006484 <_reclaim_reent+0xb4>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4283      	cmp	r3, r0
 80063d6:	b570      	push	{r4, r5, r6, lr}
 80063d8:	4604      	mov	r4, r0
 80063da:	d051      	beq.n	8006480 <_reclaim_reent+0xb0>
 80063dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80063de:	b143      	cbz	r3, 80063f2 <_reclaim_reent+0x22>
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d14a      	bne.n	800647c <_reclaim_reent+0xac>
 80063e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063e8:	6819      	ldr	r1, [r3, #0]
 80063ea:	b111      	cbz	r1, 80063f2 <_reclaim_reent+0x22>
 80063ec:	4620      	mov	r0, r4
 80063ee:	f000 f857 	bl	80064a0 <_free_r>
 80063f2:	6961      	ldr	r1, [r4, #20]
 80063f4:	b111      	cbz	r1, 80063fc <_reclaim_reent+0x2c>
 80063f6:	4620      	mov	r0, r4
 80063f8:	f000 f852 	bl	80064a0 <_free_r>
 80063fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80063fe:	b111      	cbz	r1, 8006406 <_reclaim_reent+0x36>
 8006400:	4620      	mov	r0, r4
 8006402:	f000 f84d 	bl	80064a0 <_free_r>
 8006406:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006408:	b111      	cbz	r1, 8006410 <_reclaim_reent+0x40>
 800640a:	4620      	mov	r0, r4
 800640c:	f000 f848 	bl	80064a0 <_free_r>
 8006410:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006412:	b111      	cbz	r1, 800641a <_reclaim_reent+0x4a>
 8006414:	4620      	mov	r0, r4
 8006416:	f000 f843 	bl	80064a0 <_free_r>
 800641a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800641c:	b111      	cbz	r1, 8006424 <_reclaim_reent+0x54>
 800641e:	4620      	mov	r0, r4
 8006420:	f000 f83e 	bl	80064a0 <_free_r>
 8006424:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006426:	b111      	cbz	r1, 800642e <_reclaim_reent+0x5e>
 8006428:	4620      	mov	r0, r4
 800642a:	f000 f839 	bl	80064a0 <_free_r>
 800642e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006430:	b111      	cbz	r1, 8006438 <_reclaim_reent+0x68>
 8006432:	4620      	mov	r0, r4
 8006434:	f000 f834 	bl	80064a0 <_free_r>
 8006438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800643a:	b111      	cbz	r1, 8006442 <_reclaim_reent+0x72>
 800643c:	4620      	mov	r0, r4
 800643e:	f000 f82f 	bl	80064a0 <_free_r>
 8006442:	69a3      	ldr	r3, [r4, #24]
 8006444:	b1e3      	cbz	r3, 8006480 <_reclaim_reent+0xb0>
 8006446:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006448:	4620      	mov	r0, r4
 800644a:	4798      	blx	r3
 800644c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800644e:	b1b9      	cbz	r1, 8006480 <_reclaim_reent+0xb0>
 8006450:	4620      	mov	r0, r4
 8006452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006456:	f7ff bfad 	b.w	80063b4 <cleanup_glue>
 800645a:	5949      	ldr	r1, [r1, r5]
 800645c:	b941      	cbnz	r1, 8006470 <_reclaim_reent+0xa0>
 800645e:	3504      	adds	r5, #4
 8006460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006462:	2d80      	cmp	r5, #128	; 0x80
 8006464:	68d9      	ldr	r1, [r3, #12]
 8006466:	d1f8      	bne.n	800645a <_reclaim_reent+0x8a>
 8006468:	4620      	mov	r0, r4
 800646a:	f000 f819 	bl	80064a0 <_free_r>
 800646e:	e7ba      	b.n	80063e6 <_reclaim_reent+0x16>
 8006470:	680e      	ldr	r6, [r1, #0]
 8006472:	4620      	mov	r0, r4
 8006474:	f000 f814 	bl	80064a0 <_free_r>
 8006478:	4631      	mov	r1, r6
 800647a:	e7ef      	b.n	800645c <_reclaim_reent+0x8c>
 800647c:	2500      	movs	r5, #0
 800647e:	e7ef      	b.n	8006460 <_reclaim_reent+0x90>
 8006480:	bd70      	pop	{r4, r5, r6, pc}
 8006482:	bf00      	nop
 8006484:	20000010 	.word	0x20000010

08006488 <__malloc_lock>:
 8006488:	4801      	ldr	r0, [pc, #4]	; (8006490 <__malloc_lock+0x8>)
 800648a:	f7ff bf7b 	b.w	8006384 <__retarget_lock_acquire_recursive>
 800648e:	bf00      	nop
 8006490:	20004f88 	.word	0x20004f88

08006494 <__malloc_unlock>:
 8006494:	4801      	ldr	r0, [pc, #4]	; (800649c <__malloc_unlock+0x8>)
 8006496:	f7ff bf76 	b.w	8006386 <__retarget_lock_release_recursive>
 800649a:	bf00      	nop
 800649c:	20004f88 	.word	0x20004f88

080064a0 <_free_r>:
 80064a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80064a2:	2900      	cmp	r1, #0
 80064a4:	d048      	beq.n	8006538 <_free_r+0x98>
 80064a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064aa:	9001      	str	r0, [sp, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f1a1 0404 	sub.w	r4, r1, #4
 80064b2:	bfb8      	it	lt
 80064b4:	18e4      	addlt	r4, r4, r3
 80064b6:	f7ff ffe7 	bl	8006488 <__malloc_lock>
 80064ba:	4a20      	ldr	r2, [pc, #128]	; (800653c <_free_r+0x9c>)
 80064bc:	9801      	ldr	r0, [sp, #4]
 80064be:	6813      	ldr	r3, [r2, #0]
 80064c0:	4615      	mov	r5, r2
 80064c2:	b933      	cbnz	r3, 80064d2 <_free_r+0x32>
 80064c4:	6063      	str	r3, [r4, #4]
 80064c6:	6014      	str	r4, [r2, #0]
 80064c8:	b003      	add	sp, #12
 80064ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064ce:	f7ff bfe1 	b.w	8006494 <__malloc_unlock>
 80064d2:	42a3      	cmp	r3, r4
 80064d4:	d90b      	bls.n	80064ee <_free_r+0x4e>
 80064d6:	6821      	ldr	r1, [r4, #0]
 80064d8:	1862      	adds	r2, r4, r1
 80064da:	4293      	cmp	r3, r2
 80064dc:	bf04      	itt	eq
 80064de:	681a      	ldreq	r2, [r3, #0]
 80064e0:	685b      	ldreq	r3, [r3, #4]
 80064e2:	6063      	str	r3, [r4, #4]
 80064e4:	bf04      	itt	eq
 80064e6:	1852      	addeq	r2, r2, r1
 80064e8:	6022      	streq	r2, [r4, #0]
 80064ea:	602c      	str	r4, [r5, #0]
 80064ec:	e7ec      	b.n	80064c8 <_free_r+0x28>
 80064ee:	461a      	mov	r2, r3
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	b10b      	cbz	r3, 80064f8 <_free_r+0x58>
 80064f4:	42a3      	cmp	r3, r4
 80064f6:	d9fa      	bls.n	80064ee <_free_r+0x4e>
 80064f8:	6811      	ldr	r1, [r2, #0]
 80064fa:	1855      	adds	r5, r2, r1
 80064fc:	42a5      	cmp	r5, r4
 80064fe:	d10b      	bne.n	8006518 <_free_r+0x78>
 8006500:	6824      	ldr	r4, [r4, #0]
 8006502:	4421      	add	r1, r4
 8006504:	1854      	adds	r4, r2, r1
 8006506:	42a3      	cmp	r3, r4
 8006508:	6011      	str	r1, [r2, #0]
 800650a:	d1dd      	bne.n	80064c8 <_free_r+0x28>
 800650c:	681c      	ldr	r4, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	6053      	str	r3, [r2, #4]
 8006512:	4421      	add	r1, r4
 8006514:	6011      	str	r1, [r2, #0]
 8006516:	e7d7      	b.n	80064c8 <_free_r+0x28>
 8006518:	d902      	bls.n	8006520 <_free_r+0x80>
 800651a:	230c      	movs	r3, #12
 800651c:	6003      	str	r3, [r0, #0]
 800651e:	e7d3      	b.n	80064c8 <_free_r+0x28>
 8006520:	6825      	ldr	r5, [r4, #0]
 8006522:	1961      	adds	r1, r4, r5
 8006524:	428b      	cmp	r3, r1
 8006526:	bf04      	itt	eq
 8006528:	6819      	ldreq	r1, [r3, #0]
 800652a:	685b      	ldreq	r3, [r3, #4]
 800652c:	6063      	str	r3, [r4, #4]
 800652e:	bf04      	itt	eq
 8006530:	1949      	addeq	r1, r1, r5
 8006532:	6021      	streq	r1, [r4, #0]
 8006534:	6054      	str	r4, [r2, #4]
 8006536:	e7c7      	b.n	80064c8 <_free_r+0x28>
 8006538:	b003      	add	sp, #12
 800653a:	bd30      	pop	{r4, r5, pc}
 800653c:	20004a60 	.word	0x20004a60

08006540 <_init>:
 8006540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006542:	bf00      	nop
 8006544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006546:	bc08      	pop	{r3}
 8006548:	469e      	mov	lr, r3
 800654a:	4770      	bx	lr

0800654c <_fini>:
 800654c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654e:	bf00      	nop
 8006550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006552:	bc08      	pop	{r3}
 8006554:	469e      	mov	lr, r3
 8006556:	4770      	bx	lr
