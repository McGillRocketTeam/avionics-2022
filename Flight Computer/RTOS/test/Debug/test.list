
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c58  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08006e28  08006e28  00016e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f34  08006f34  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006f34  08006f34  00016f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f3c  08006f3c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f3c  08006f3c  00016f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f40  08006f40  00016f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006f44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f28  20000074  08006fb8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f9c  08006fb8  00024f9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002087c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cf2  00000000  00000000  00040920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00044618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001600  00000000  00000000  00045d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c47  00000000  00000000  00047370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2c2  00000000  00000000  0004afb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dcb9d  00000000  00000000  00065279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141e16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068a0  00000000  00000000  00141e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006e10 	.word	0x08006e10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006e10 	.word	0x08006e10

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ac:	f000 fbfe 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f81c 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b4:	f000 f908 	bl	80007c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b8:	f000 f884 	bl	80006c4 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005bc:	f000 f8d6 	bl	800076c <MX_USB_OTG_FS_PCD_Init>
  MX_USART3_UART_Init();
 80005c0:	f000 f8aa 	bl	8000718 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c4:	f003 f9d8 	bl	8003978 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005c8:	4a05      	ldr	r2, [pc, #20]	; (80005e0 <main+0x38>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4805      	ldr	r0, [pc, #20]	; (80005e4 <main+0x3c>)
 80005ce:	f003 fa1d 	bl	8003a0c <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <main+0x40>)
 80005d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d8:	f003 f9f2 	bl	80039c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005dc:	e7fe      	b.n	80005dc <main+0x34>
 80005de:	bf00      	nop
 80005e0:	08006e64 	.word	0x08006e64
 80005e4:	08000925 	.word	0x08000925
 80005e8:	20004a6c 	.word	0x20004a6c

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	; 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	2234      	movs	r2, #52	; 0x34
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f005 ff78 	bl	80064f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 0308 	add.w	r3, r7, #8
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b29      	ldr	r3, [pc, #164]	; (80006bc <SystemClock_Config+0xd0>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a28      	ldr	r2, [pc, #160]	; (80006bc <SystemClock_Config+0xd0>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b26      	ldr	r3, [pc, #152]	; (80006bc <SystemClock_Config+0xd0>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <SystemClock_Config+0xd4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a22      	ldr	r2, [pc, #136]	; (80006c0 <SystemClock_Config+0xd4>)
 8000636:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <SystemClock_Config+0xd4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800064c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000650:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800065a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800065c:	2304      	movs	r3, #4
 800065e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000660:	23a8      	movs	r3, #168	; 0xa8
 8000662:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000668:	2307      	movs	r3, #7
 800066a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800066c:	2302      	movs	r3, #2
 800066e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000670:	f107 031c 	add.w	r3, r7, #28
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fdff 	bl	8002278 <HAL_RCC_OscConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000680:	f000 f988 	bl	8000994 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000690:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	2105      	movs	r1, #5
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 ffc0 	bl	8001628 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ae:	f000 f971 	bl	8000994 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	; 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <MX_USART2_UART_Init+0x50>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART2_UART_Init+0x4c>)
 80006fc:	f002 fb08 	bl	8002d10 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000706:	f000 f945 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20004ebc 	.word	0x20004ebc
 8000714:	40004400 	.word	0x40004400

08000718 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_USART3_UART_Init+0x4c>)
 800071e:	4a12      	ldr	r2, [pc, #72]	; (8000768 <MX_USART3_UART_Init+0x50>)
 8000720:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MX_USART3_UART_Init+0x4c>)
 8000724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000728:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_USART3_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_USART3_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MX_USART3_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_USART3_UART_Init+0x4c>)
 800073e:	220c      	movs	r2, #12
 8000740:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000742:	4b08      	ldr	r3, [pc, #32]	; (8000764 <MX_USART3_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_USART3_UART_Init+0x4c>)
 800074a:	2200      	movs	r2, #0
 800074c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <MX_USART3_UART_Init+0x4c>)
 8000750:	f002 fade 	bl	8002d10 <HAL_UART_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800075a:	f000 f91b 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20004a70 	.word	0x20004a70
 8000768:	40004800 	.word	0x40004800

0800076c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000770:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000772:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000776:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077a:	2206      	movs	r2, #6
 800077c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000780:	2202      	movs	r2, #2
 8000782:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078c:	2202      	movs	r2, #2
 800078e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000792:	2201      	movs	r2, #1
 8000794:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000796:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007a8:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007ae:	4805      	ldr	r0, [pc, #20]	; (80007c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b0:	f000 fdf1 	bl	8001396 <HAL_PCD_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007ba:	f000 f8eb 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20004ab4 	.word	0x20004ab4

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	; 0x30
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
 80007e2:	4b4c      	ldr	r3, [pc, #304]	; (8000914 <MX_GPIO_Init+0x14c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a4b      	ldr	r2, [pc, #300]	; (8000914 <MX_GPIO_Init+0x14c>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b49      	ldr	r3, [pc, #292]	; (8000914 <MX_GPIO_Init+0x14c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	4b45      	ldr	r3, [pc, #276]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a44      	ldr	r2, [pc, #272]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b42      	ldr	r3, [pc, #264]	; (8000914 <MX_GPIO_Init+0x14c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	617b      	str	r3, [r7, #20]
 8000814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b3e      	ldr	r3, [pc, #248]	; (8000914 <MX_GPIO_Init+0x14c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a3d      	ldr	r2, [pc, #244]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b3b      	ldr	r3, [pc, #236]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b37      	ldr	r3, [pc, #220]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a36      	ldr	r2, [pc, #216]	; (8000914 <MX_GPIO_Init+0x14c>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b34      	ldr	r3, [pc, #208]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b30      	ldr	r3, [pc, #192]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a2f      	ldr	r2, [pc, #188]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b2d      	ldr	r3, [pc, #180]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b29      	ldr	r3, [pc, #164]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a28      	ldr	r2, [pc, #160]	; (8000914 <MX_GPIO_Init+0x14c>)
 8000874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <MX_GPIO_Init+0x14c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f244 0181 	movw	r1, #16513	; 0x4081
 800088c:	4822      	ldr	r0, [pc, #136]	; (8000918 <MX_GPIO_Init+0x150>)
 800088e:	f000 fd69 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2140      	movs	r1, #64	; 0x40
 8000896:	4821      	ldr	r0, [pc, #132]	; (800091c <MX_GPIO_Init+0x154>)
 8000898:	f000 fd64 	bl	8001364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800089c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	481b      	ldr	r0, [pc, #108]	; (8000920 <MX_GPIO_Init+0x158>)
 80008b4:	f000 fbc2 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008b8:	f244 0381 	movw	r3, #16513	; 0x4081
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4811      	ldr	r0, [pc, #68]	; (8000918 <MX_GPIO_Init+0x150>)
 80008d2:	f000 fbb3 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008d6:	2340      	movs	r3, #64	; 0x40
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	2301      	movs	r3, #1
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <MX_GPIO_Init+0x154>)
 80008ee:	f000 fba5 	bl	800103c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008f2:	2380      	movs	r3, #128	; 0x80
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	; (800091c <MX_GPIO_Init+0x154>)
 8000906:	f000 fb99 	bl	800103c <HAL_GPIO_Init>

}
 800090a:	bf00      	nop
 800090c:	3730      	adds	r7, #48	; 0x30
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40020400 	.word	0x40020400
 800091c:	40021800 	.word	0x40021800
 8000920:	40020800 	.word	0x40020800

08000924 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	char *buffer2 = (char*) malloc(100);
 800092c:	2064      	movs	r0, #100	; 0x64
 800092e:	f005 fdc9 	bl	80064c4 <malloc>
 8000932:	4603      	mov	r3, r0
 8000934:	60fb      	str	r3, [r7, #12]
	memset(buffer2, 0, 100);
 8000936:	2264      	movs	r2, #100	; 0x64
 8000938:	2100      	movs	r1, #0
 800093a:	68f8      	ldr	r0, [r7, #12]
 800093c:	f005 fdd8 	bl	80064f0 <memset>
  for(;;)
  {
	char* buffer = "plz work\n\r\0";
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <StartDefaultTask+0x40>)
 8000942:	60bb      	str	r3, [r7, #8]
	sprintf(buffer2, "reasdwer\r\n\0");
 8000944:	4908      	ldr	r1, [pc, #32]	; (8000968 <StartDefaultTask+0x44>)
 8000946:	68f8      	ldr	r0, [r7, #12]
 8000948:	f005 fefe 	bl	8006748 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) buffer, 100, 100);
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2264      	movs	r2, #100	; 0x64
 8000950:	68b9      	ldr	r1, [r7, #8]
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <StartDefaultTask+0x48>)
 8000954:	f002 fa29 	bl	8002daa <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart3, (uint8_t*) buffer2, 100, 100);
    osDelay(1000);
 8000958:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800095c:	f003 f8e8 	bl	8003b30 <osDelay>
  {
 8000960:	e7ee      	b.n	8000940 <StartDefaultTask+0x1c>
 8000962:	bf00      	nop
 8000964:	08006e34 	.word	0x08006e34
 8000968:	08006e40 	.word	0x08006e40
 800096c:	20004a70 	.word	0x20004a70

08000970 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d101      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000982:	f000 fa35 	bl	8000df0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40001000 	.word	0x40001000

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	e7fe      	b.n	800099c <Error_Handler+0x8>
	...

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_MspInit+0x54>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	4a11      	ldr	r2, [pc, #68]	; (80009f4 <HAL_MspInit+0x54>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	; 0x44
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_MspInit+0x54>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <HAL_MspInit+0x54>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <HAL_MspInit+0x54>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_MspInit+0x54>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	210f      	movs	r1, #15
 80009e2:	f06f 0001 	mvn.w	r0, #1
 80009e6:	f000 faff 	bl	8000fe8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	; 0x30
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a32      	ldr	r2, [pc, #200]	; (8000ae0 <HAL_UART_MspInit+0xe8>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d12c      	bne.n	8000a74 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
 8000a1e:	4b31      	ldr	r3, [pc, #196]	; (8000ae4 <HAL_UART_MspInit+0xec>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a30      	ldr	r2, [pc, #192]	; (8000ae4 <HAL_UART_MspInit+0xec>)
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <HAL_UART_MspInit+0xec>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a32:	61bb      	str	r3, [r7, #24]
 8000a34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ae4 <HAL_UART_MspInit+0xec>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a29      	ldr	r2, [pc, #164]	; (8000ae4 <HAL_UART_MspInit+0xec>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <HAL_UART_MspInit+0xec>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a52:	230c      	movs	r3, #12
 8000a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a62:	2307      	movs	r3, #7
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	481e      	ldr	r0, [pc, #120]	; (8000ae8 <HAL_UART_MspInit+0xf0>)
 8000a6e:	f000 fae5 	bl	800103c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a72:	e031      	b.n	8000ad8 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a1c      	ldr	r2, [pc, #112]	; (8000aec <HAL_UART_MspInit+0xf4>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d12c      	bne.n	8000ad8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_UART_MspInit+0xec>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <HAL_UART_MspInit+0xec>)
 8000a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_UART_MspInit+0xec>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_UART_MspInit+0xec>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <HAL_UART_MspInit+0xec>)
 8000aa4:	f043 0308 	orr.w	r3, r3, #8
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_UART_MspInit+0xec>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0308 	and.w	r3, r3, #8
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ab6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ac8:	2307      	movs	r3, #7
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4807      	ldr	r0, [pc, #28]	; (8000af0 <HAL_UART_MspInit+0xf8>)
 8000ad4:	f000 fab2 	bl	800103c <HAL_GPIO_Init>
}
 8000ad8:	bf00      	nop
 8000ada:	3730      	adds	r7, #48	; 0x30
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40004400 	.word	0x40004400
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	40004800 	.word	0x40004800
 8000af0:	40020c00 	.word	0x40020c00

08000af4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b0a0      	sub	sp, #128	; 0x80
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	225c      	movs	r2, #92	; 0x5c
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f005 fceb 	bl	80064f0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b22:	d14e      	bne.n	8000bc2 <HAL_PCD_MspInit+0xce>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000b24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b28:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fec4 	bl	80018c0 <HAL_RCCEx_PeriphCLKConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 8000b3e:	f7ff ff29 	bl	8000994 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	4b21      	ldr	r3, [pc, #132]	; (8000bcc <HAL_PCD_MspInit+0xd8>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a20      	ldr	r2, [pc, #128]	; (8000bcc <HAL_PCD_MspInit+0xd8>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <HAL_PCD_MspInit+0xd8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b5e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b62:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6c:	2303      	movs	r3, #3
 8000b6e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b70:	230a      	movs	r3, #10
 8000b72:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4815      	ldr	r0, [pc, #84]	; (8000bd0 <HAL_PCD_MspInit+0xdc>)
 8000b7c:	f000 fa5e 	bl	800103c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b84:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b86:	2300      	movs	r3, #0
 8000b88:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b92:	4619      	mov	r1, r3
 8000b94:	480e      	ldr	r0, [pc, #56]	; (8000bd0 <HAL_PCD_MspInit+0xdc>)
 8000b96:	f000 fa51 	bl	800103c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b9a:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_PCD_MspInit+0xd8>)
 8000b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b9e:	4a0b      	ldr	r2, [pc, #44]	; (8000bcc <HAL_PCD_MspInit+0xd8>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba4:	6353      	str	r3, [r2, #52]	; 0x34
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_PCD_MspInit+0xd8>)
 8000bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bae:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <HAL_PCD_MspInit+0xd8>)
 8000bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HAL_PCD_MspInit+0xd8>)
 8000bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3780      	adds	r7, #128	; 0x80
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000

08000bd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08c      	sub	sp, #48	; 0x30
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	2036      	movs	r0, #54	; 0x36
 8000bea:	f000 f9fd 	bl	8000fe8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bee:	2036      	movs	r0, #54	; 0x36
 8000bf0:	f000 fa16 	bl	8001020 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <HAL_InitTick+0xa4>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	4a1e      	ldr	r2, [pc, #120]	; (8000c78 <HAL_InitTick+0xa4>)
 8000bfe:	f043 0310 	orr.w	r3, r3, #16
 8000c02:	6413      	str	r3, [r2, #64]	; 0x40
 8000c04:	4b1c      	ldr	r3, [pc, #112]	; (8000c78 <HAL_InitTick+0xa4>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c08:	f003 0310 	and.w	r3, r3, #16
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c10:	f107 0210 	add.w	r2, r7, #16
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 fe1e 	bl	800185c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c20:	f000 fdf4 	bl	800180c <HAL_RCC_GetPCLK1Freq>
 8000c24:	4603      	mov	r3, r0
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c2c:	4a13      	ldr	r2, [pc, #76]	; (8000c7c <HAL_InitTick+0xa8>)
 8000c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c32:	0c9b      	lsrs	r3, r3, #18
 8000c34:	3b01      	subs	r3, #1
 8000c36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_InitTick+0xac>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <HAL_InitTick+0xb0>)
 8000c3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <HAL_InitTick+0xac>)
 8000c40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c44:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c46:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <HAL_InitTick+0xac>)
 8000c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c4a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <HAL_InitTick+0xac>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <HAL_InitTick+0xac>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000c58:	4809      	ldr	r0, [pc, #36]	; (8000c80 <HAL_InitTick+0xac>)
 8000c5a:	f001 fdab 	bl	80027b4 <HAL_TIM_Base_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d104      	bne.n	8000c6e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000c64:	4806      	ldr	r0, [pc, #24]	; (8000c80 <HAL_InitTick+0xac>)
 8000c66:	f001 fdff 	bl	8002868 <HAL_TIM_Base_Start_IT>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	e000      	b.n	8000c70 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3730      	adds	r7, #48	; 0x30
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	431bde83 	.word	0x431bde83
 8000c80:	20004f00 	.word	0x20004f00
 8000c84:	40001000 	.word	0x40001000

08000c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <NMI_Handler+0x4>

08000c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <HardFault_Handler+0x4>

08000c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <MemManage_Handler+0x4>

08000c9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000caa:	bf00      	nop
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cb8:	4802      	ldr	r0, [pc, #8]	; (8000cc4 <TIM6_DAC_IRQHandler+0x10>)
 8000cba:	f001 fe45 	bl	8002948 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20004f00 	.word	0x20004f00

08000cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd0:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <_sbrk+0x5c>)
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <_sbrk+0x60>)
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cdc:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d102      	bne.n	8000cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <_sbrk+0x64>)
 8000ce6:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <_sbrk+0x68>)
 8000ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cea:	4b10      	ldr	r3, [pc, #64]	; (8000d2c <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d207      	bcs.n	8000d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf8:	f005 fbb8 	bl	800646c <__errno>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	220c      	movs	r2, #12
 8000d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	e009      	b.n	8000d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0e:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	4a05      	ldr	r2, [pc, #20]	; (8000d2c <_sbrk+0x64>)
 8000d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20020000 	.word	0x20020000
 8000d28:	00000400 	.word	0x00000400
 8000d2c:	20000090 	.word	0x20000090
 8000d30:	20004fa0 	.word	0x20004fa0

08000d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <SystemInit+0x20>)
 8000d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3e:	4a05      	ldr	r2, [pc, #20]	; (8000d54 <SystemInit+0x20>)
 8000d40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d5c:	480d      	ldr	r0, [pc, #52]	; (8000d94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d5e:	490e      	ldr	r1, [pc, #56]	; (8000d98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d60:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d64:	e002      	b.n	8000d6c <LoopCopyDataInit>

08000d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6a:	3304      	adds	r3, #4

08000d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d70:	d3f9      	bcc.n	8000d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d74:	4c0b      	ldr	r4, [pc, #44]	; (8000da4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d78:	e001      	b.n	8000d7e <LoopFillZerobss>

08000d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d7c:	3204      	adds	r2, #4

08000d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d80:	d3fb      	bcc.n	8000d7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d82:	f7ff ffd7 	bl	8000d34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d86:	f005 fb77 	bl	8006478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8a:	f7ff fc0d 	bl	80005a8 <main>
  bx  lr    
 8000d8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d9c:	08006f44 	.word	0x08006f44
  ldr r2, =_sbss
 8000da0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000da4:	20004f9c 	.word	0x20004f9c

08000da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC_IRQHandler>
	...

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db0:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <HAL_Init+0x40>)
 8000db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_Init+0x40>)
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_Init+0x40>)
 8000dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f8fc 	bl	8000fd2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	200f      	movs	r0, #15
 8000ddc:	f7ff fefa 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff fdde 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023c00 	.word	0x40023c00

08000df0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_IncTick+0x20>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x24>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_IncTick+0x24>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20004f48 	.word	0x20004f48

08000e18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <HAL_GetTick+0x14>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20004f48 	.word	0x20004f48

08000e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e38:	f7ff ffee 	bl	8000e18 <HAL_GetTick>
 8000e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e48:	d005      	beq.n	8000e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_Delay+0x44>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e56:	bf00      	nop
 8000e58:	f7ff ffde 	bl	8000e18 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d8f7      	bhi.n	8000e58 <HAL_Delay+0x28>
  {
  }
}
 8000e68:	bf00      	nop
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eaa:	4a04      	ldr	r2, [pc, #16]	; (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	60d3      	str	r3, [r2, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db0b      	blt.n	8000f06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	f003 021f 	and.w	r2, r3, #31
 8000ef4:	4907      	ldr	r1, [pc, #28]	; (8000f14 <__NVIC_EnableIRQ+0x38>)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	2001      	movs	r0, #1
 8000efe:	fa00 f202 	lsl.w	r2, r0, r2
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	; (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	; (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	; 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ff4c 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	60b9      	str	r1, [r7, #8]
 8000ff2:	607a      	str	r2, [r7, #4]
 8000ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ffa:	f7ff ff61 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 8000ffe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	68b9      	ldr	r1, [r7, #8]
 8001004:	6978      	ldr	r0, [r7, #20]
 8001006:	f7ff ffb1 	bl	8000f6c <NVIC_EncodePriority>
 800100a:	4602      	mov	r2, r0
 800100c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff80 	bl	8000f18 <__NVIC_SetPriority>
}
 8001018:	bf00      	nop
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ff54 	bl	8000edc <__NVIC_EnableIRQ>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	e165      	b.n	8001324 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001058:	2201      	movs	r2, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	429a      	cmp	r2, r3
 8001072:	f040 8154 	bne.w	800131e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d005      	beq.n	800108e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800108a:	2b02      	cmp	r3, #2
 800108c:	d130      	bne.n	80010f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c4:	2201      	movs	r2, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	091b      	lsrs	r3, r3, #4
 80010da:	f003 0201 	and.w	r2, r3, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d017      	beq.n	800112c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d123      	bne.n	8001180 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	08da      	lsrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3208      	adds	r2, #8
 8001140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	220f      	movs	r2, #15
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	691a      	ldr	r2, [r3, #16]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	69b9      	ldr	r1, [r7, #24]
 800117c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0203 	and.w	r2, r3, #3
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80ae 	beq.w	800131e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	4b5d      	ldr	r3, [pc, #372]	; (800133c <HAL_GPIO_Init+0x300>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a5c      	ldr	r2, [pc, #368]	; (800133c <HAL_GPIO_Init+0x300>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b5a      	ldr	r3, [pc, #360]	; (800133c <HAL_GPIO_Init+0x300>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011de:	4a58      	ldr	r2, [pc, #352]	; (8001340 <HAL_GPIO_Init+0x304>)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4f      	ldr	r2, [pc, #316]	; (8001344 <HAL_GPIO_Init+0x308>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d025      	beq.n	8001256 <HAL_GPIO_Init+0x21a>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4e      	ldr	r2, [pc, #312]	; (8001348 <HAL_GPIO_Init+0x30c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d01f      	beq.n	8001252 <HAL_GPIO_Init+0x216>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4d      	ldr	r2, [pc, #308]	; (800134c <HAL_GPIO_Init+0x310>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d019      	beq.n	800124e <HAL_GPIO_Init+0x212>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4c      	ldr	r2, [pc, #304]	; (8001350 <HAL_GPIO_Init+0x314>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d013      	beq.n	800124a <HAL_GPIO_Init+0x20e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4b      	ldr	r2, [pc, #300]	; (8001354 <HAL_GPIO_Init+0x318>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d00d      	beq.n	8001246 <HAL_GPIO_Init+0x20a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4a      	ldr	r2, [pc, #296]	; (8001358 <HAL_GPIO_Init+0x31c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d007      	beq.n	8001242 <HAL_GPIO_Init+0x206>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a49      	ldr	r2, [pc, #292]	; (800135c <HAL_GPIO_Init+0x320>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d101      	bne.n	800123e <HAL_GPIO_Init+0x202>
 800123a:	2306      	movs	r3, #6
 800123c:	e00c      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 800123e:	2307      	movs	r3, #7
 8001240:	e00a      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 8001242:	2305      	movs	r3, #5
 8001244:	e008      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 8001246:	2304      	movs	r3, #4
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 800124a:	2303      	movs	r3, #3
 800124c:	e004      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 800124e:	2302      	movs	r3, #2
 8001250:	e002      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x21c>
 8001256:	2300      	movs	r3, #0
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	f002 0203 	and.w	r2, r2, #3
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4093      	lsls	r3, r2
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001268:	4935      	ldr	r1, [pc, #212]	; (8001340 <HAL_GPIO_Init+0x304>)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001276:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <HAL_GPIO_Init+0x324>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	43db      	mvns	r3, r3
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	4013      	ands	r3, r2
 8001284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800129a:	4a31      	ldr	r2, [pc, #196]	; (8001360 <HAL_GPIO_Init+0x324>)
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012a0:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <HAL_GPIO_Init+0x324>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c4:	4a26      	ldr	r2, [pc, #152]	; (8001360 <HAL_GPIO_Init+0x324>)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <HAL_GPIO_Init+0x324>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ee:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <HAL_GPIO_Init+0x324>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_GPIO_Init+0x324>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001318:	4a11      	ldr	r2, [pc, #68]	; (8001360 <HAL_GPIO_Init+0x324>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3301      	adds	r3, #1
 8001322:	61fb      	str	r3, [r7, #28]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	2b0f      	cmp	r3, #15
 8001328:	f67f ae96 	bls.w	8001058 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3724      	adds	r7, #36	; 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40013800 	.word	0x40013800
 8001344:	40020000 	.word	0x40020000
 8001348:	40020400 	.word	0x40020400
 800134c:	40020800 	.word	0x40020800
 8001350:	40020c00 	.word	0x40020c00
 8001354:	40021000 	.word	0x40021000
 8001358:	40021400 	.word	0x40021400
 800135c:	40021800 	.word	0x40021800
 8001360:	40013c00 	.word	0x40013c00

08001364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
 8001370:	4613      	mov	r3, r2
 8001372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001374:	787b      	ldrb	r3, [r7, #1]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137a:	887a      	ldrh	r2, [r7, #2]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001380:	e003      	b.n	800138a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001382:	887b      	ldrh	r3, [r7, #2]
 8001384:	041a      	lsls	r2, r3, #16
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	619a      	str	r2, [r3, #24]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001396:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001398:	b08f      	sub	sp, #60	; 0x3c
 800139a:	af0a      	add	r7, sp, #40	; 0x28
 800139c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e116      	b.n	80015d6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d106      	bne.n	80013c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff fb96 	bl	8000af4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2203      	movs	r2, #3
 80013cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 f809 	bl	80033fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	687e      	ldr	r6, [r7, #4]
 80013f4:	466d      	mov	r5, sp
 80013f6:	f106 0410 	add.w	r4, r6, #16
 80013fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001402:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001406:	e885 0003 	stmia.w	r5, {r0, r1}
 800140a:	1d33      	adds	r3, r6, #4
 800140c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800140e:	6838      	ldr	r0, [r7, #0]
 8001410:	f001 ff94 	bl	800333c <USB_CoreInit>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2202      	movs	r2, #2
 800141e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e0d7      	b.n	80015d6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f001 fff7 	bl	8003420 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001432:	2300      	movs	r3, #0
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	e04a      	b.n	80014ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001438:	7bfa      	ldrb	r2, [r7, #15]
 800143a:	6879      	ldr	r1, [r7, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	1a9b      	subs	r3, r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	333d      	adds	r3, #61	; 0x3d
 8001448:	2201      	movs	r2, #1
 800144a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800144c:	7bfa      	ldrb	r2, [r7, #15]
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	333c      	adds	r3, #60	; 0x3c
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	b298      	uxth	r0, r3
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	1a9b      	subs	r3, r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	440b      	add	r3, r1
 8001472:	3342      	adds	r3, #66	; 0x42
 8001474:	4602      	mov	r2, r0
 8001476:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001478:	7bfa      	ldrb	r2, [r7, #15]
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	4613      	mov	r3, r2
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	1a9b      	subs	r3, r3, r2
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	440b      	add	r3, r1
 8001486:	333f      	adds	r3, #63	; 0x3f
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	1a9b      	subs	r3, r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	3344      	adds	r3, #68	; 0x44
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014a0:	7bfa      	ldrb	r2, [r7, #15]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	3348      	adds	r3, #72	; 0x48
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014b4:	7bfa      	ldrb	r2, [r7, #15]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	3350      	adds	r3, #80	; 0x50
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	3301      	adds	r3, #1
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d3af      	bcc.n	8001438 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014d8:	2300      	movs	r3, #0
 80014da:	73fb      	strb	r3, [r7, #15]
 80014dc:	e044      	b.n	8001568 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80014de:	7bfa      	ldrb	r2, [r7, #15]
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	1a9b      	subs	r3, r3, r2
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	440b      	add	r3, r1
 80014ec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80014f4:	7bfa      	ldrb	r2, [r7, #15]
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	1a9b      	subs	r3, r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001506:	7bfa      	ldrb	r2, [r7, #15]
 8001508:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800150a:	7bfa      	ldrb	r2, [r7, #15]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001520:	7bfa      	ldrb	r2, [r7, #15]
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	1a9b      	subs	r3, r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001536:	7bfa      	ldrb	r2, [r7, #15]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	1a9b      	subs	r3, r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4613      	mov	r3, r2
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	1a9b      	subs	r3, r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	440b      	add	r3, r1
 800155a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001562:	7bfb      	ldrb	r3, [r7, #15]
 8001564:	3301      	adds	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	429a      	cmp	r2, r3
 8001570:	d3b5      	bcc.n	80014de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	687e      	ldr	r6, [r7, #4]
 800157a:	466d      	mov	r5, sp
 800157c:	f106 0410 	add.w	r4, r6, #16
 8001580:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001586:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001588:	e894 0003 	ldmia.w	r4, {r0, r1}
 800158c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001590:	1d33      	adds	r3, r6, #4
 8001592:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001594:	6838      	ldr	r0, [r7, #0]
 8001596:	f001 ff8f 	bl	80034b8 <USB_DevInit>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d005      	beq.n	80015ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2202      	movs	r2, #2
 80015a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e014      	b.n	80015d6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d102      	bne.n	80015ca <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f80a 	bl	80015de <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f002 f92d 	bl	800382e <USB_DevDisconnect>

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015de <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80015de:	b480      	push	{r7}
 80015e0:	b085      	sub	sp, #20
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001610:	f043 0303 	orr.w	r3, r3, #3
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e0cc      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800163c:	4b68      	ldr	r3, [pc, #416]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 030f 	and.w	r3, r3, #15
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	429a      	cmp	r2, r3
 8001648:	d90c      	bls.n	8001664 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800164a:	4b65      	ldr	r3, [pc, #404]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001652:	4b63      	ldr	r3, [pc, #396]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d001      	beq.n	8001664 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e0b8      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d020      	beq.n	80016b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800167c:	4b59      	ldr	r3, [pc, #356]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	4a58      	ldr	r2, [pc, #352]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001686:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001694:	4b53      	ldr	r3, [pc, #332]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4a52      	ldr	r2, [pc, #328]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800169e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a0:	4b50      	ldr	r3, [pc, #320]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	494d      	ldr	r1, [pc, #308]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d044      	beq.n	8001748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d107      	bne.n	80016d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	4b47      	ldr	r3, [pc, #284]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d119      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e07f      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d003      	beq.n	80016e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e6:	4b3f      	ldr	r3, [pc, #252]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d109      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e06f      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016f6:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e067      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001706:	4b37      	ldr	r3, [pc, #220]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f023 0203 	bic.w	r2, r3, #3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	4934      	ldr	r1, [pc, #208]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001714:	4313      	orrs	r3, r2
 8001716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001718:	f7ff fb7e 	bl	8000e18 <HAL_GetTick>
 800171c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800171e:	e00a      	b.n	8001736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001720:	f7ff fb7a 	bl	8000e18 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	; 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e04f      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 020c 	and.w	r2, r3, #12
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	429a      	cmp	r2, r3
 8001746:	d1eb      	bne.n	8001720 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001748:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 030f 	and.w	r3, r3, #15
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d20c      	bcs.n	8001770 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e032      	b.n	80017d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d008      	beq.n	800178e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	4916      	ldr	r1, [pc, #88]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	4313      	orrs	r3, r2
 800178c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d009      	beq.n	80017ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800179a:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	490e      	ldr	r1, [pc, #56]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ae:	f000 fbb1 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 80017b2:	4602      	mov	r2, r0
 80017b4:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	091b      	lsrs	r3, r3, #4
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	490a      	ldr	r1, [pc, #40]	; (80017e8 <HAL_RCC_ClockConfig+0x1c0>)
 80017c0:	5ccb      	ldrb	r3, [r1, r3]
 80017c2:	fa22 f303 	lsr.w	r3, r2, r3
 80017c6:	4a09      	ldr	r2, [pc, #36]	; (80017ec <HAL_RCC_ClockConfig+0x1c4>)
 80017c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_RCC_ClockConfig+0x1c8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fa00 	bl	8000bd4 <HAL_InitTick>

  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023c00 	.word	0x40023c00
 80017e4:	40023800 	.word	0x40023800
 80017e8:	08006e88 	.word	0x08006e88
 80017ec:	20000000 	.word	0x20000000
 80017f0:	20000004 	.word	0x20000004

080017f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <HAL_RCC_GetHCLKFreq+0x14>)
 80017fa:	681b      	ldr	r3, [r3, #0]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000000 	.word	0x20000000

0800180c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001810:	f7ff fff0 	bl	80017f4 <HAL_RCC_GetHCLKFreq>
 8001814:	4602      	mov	r2, r0
 8001816:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	0a9b      	lsrs	r3, r3, #10
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	4903      	ldr	r1, [pc, #12]	; (8001830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001822:	5ccb      	ldrb	r3, [r1, r3]
 8001824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001828:	4618      	mov	r0, r3
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40023800 	.word	0x40023800
 8001830:	08006e98 	.word	0x08006e98

08001834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001838:	f7ff ffdc 	bl	80017f4 <HAL_RCC_GetHCLKFreq>
 800183c:	4602      	mov	r2, r0
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	0b5b      	lsrs	r3, r3, #13
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	4903      	ldr	r1, [pc, #12]	; (8001858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800184a:	5ccb      	ldrb	r3, [r1, r3]
 800184c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001850:	4618      	mov	r0, r3
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	08006e98 	.word	0x08006e98

0800185c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	220f      	movs	r2, #15
 800186a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800186c:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <HAL_RCC_GetClockConfig+0x5c>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f003 0203 	and.w	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_RCC_GetClockConfig+0x5c>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <HAL_RCC_GetClockConfig+0x5c>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	08db      	lsrs	r3, r3, #3
 8001896:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <HAL_RCC_GetClockConfig+0x60>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 020f 	and.w	r2, r3, #15
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	601a      	str	r2, [r3, #0]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40023c00 	.word	0x40023c00

080018c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08c      	sub	sp, #48	; 0x30
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d010      	beq.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80018f8:	4b6f      	ldr	r3, [pc, #444]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80018fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018fe:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001906:	496c      	ldr	r1, [pc, #432]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001908:	4313      	orrs	r3, r2
 800190a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001916:	2301      	movs	r3, #1
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d010      	beq.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001926:	4b64      	ldr	r3, [pc, #400]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800192c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001934:	4960      	ldr	r1, [pc, #384]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001936:	4313      	orrs	r3, r2
 8001938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001944:	2301      	movs	r3, #1
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d017      	beq.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001954:	4b58      	ldr	r3, [pc, #352]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800195a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4955      	ldr	r1, [pc, #340]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001964:	4313      	orrs	r3, r2
 8001966:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001972:	d101      	bne.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001974:	2301      	movs	r3, #1
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001980:	2301      	movs	r3, #1
 8001982:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d017      	beq.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001990:	4b49      	ldr	r3, [pc, #292]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001996:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199e:	4946      	ldr	r1, [pc, #280]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019ae:	d101      	bne.n	80019b4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80019b0:	2301      	movs	r3, #1
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80019bc:	2301      	movs	r3, #1
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0320 	and.w	r3, r3, #32
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 808a 	beq.w	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	4b39      	ldr	r3, [pc, #228]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a38      	ldr	r2, [pc, #224]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b36      	ldr	r3, [pc, #216]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80019ea:	4b34      	ldr	r3, [pc, #208]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a33      	ldr	r2, [pc, #204]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80019f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019f6:	f7ff fa0f 	bl	8000e18 <HAL_GetTick>
 80019fa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80019fc:	e008      	b.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80019fe:	f7ff fa0b 	bl	8000e18 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d901      	bls.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	e278      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a10:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d0f0      	beq.n	80019fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a1c:	4b26      	ldr	r3, [pc, #152]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a24:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d02f      	beq.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a34:	6a3a      	ldr	r2, [r7, #32]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d028      	beq.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a42:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a44:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001a50:	4a19      	ldr	r2, [pc, #100]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a52:	6a3b      	ldr	r3, [r7, #32]
 8001a54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d114      	bne.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001a62:	f7ff f9d9 	bl	8000e18 <HAL_GetTick>
 8001a66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff f9d5 	bl	8000e18 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e240      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a80:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ee      	beq.n	8001a6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a98:	d114      	bne.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001a9a:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aae:	4902      	ldr	r1, [pc, #8]	; (8001ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	608b      	str	r3, [r1, #8]
 8001ab4:	e00c      	b.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40007000 	.word	0x40007000
 8001ac0:	42470e40 	.word	0x42470e40
 8001ac4:	4b4a      	ldr	r3, [pc, #296]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	4a49      	ldr	r2, [pc, #292]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001aca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001ace:	6093      	str	r3, [r2, #8]
 8001ad0:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ad2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001adc:	4944      	ldr	r1, [pc, #272]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d004      	beq.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001af4:	4b3f      	ldr	r3, [pc, #252]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001af6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d00a      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001b04:	4b3a      	ldr	r3, [pc, #232]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	4937      	ldr	r1, [pc, #220]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00a      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b26:	4b32      	ldr	r3, [pc, #200]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b34:	492e      	ldr	r1, [pc, #184]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d011      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001b48:	4b29      	ldr	r3, [pc, #164]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b4e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b56:	4926      	ldr	r1, [pc, #152]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001b66:	d101      	bne.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00a      	beq.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b7e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	491a      	ldr	r1, [pc, #104]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d011      	beq.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ba8:	4911      	ldr	r1, [pc, #68]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d005      	beq.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bcc:	f040 80ff 	bne.w	8001dce <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bd6:	f7ff f91f 	bl	8000e18 <HAL_GetTick>
 8001bda:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bdc:	e00e      	b.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001bde:	f7ff f91b 	bl	8000e18 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d907      	bls.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e188      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	424711e0 	.word	0x424711e0
 8001bf8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bfc:	4b7e      	ldr	r3, [pc, #504]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1ea      	bne.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d009      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d028      	beq.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d124      	bne.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001c30:	4b71      	ldr	r3, [pc, #452]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c36:	0c1b      	lsrs	r3, r3, #16
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c42:	4b6d      	ldr	r3, [pc, #436]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c48:	0e1b      	lsrs	r3, r3, #24
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	019b      	lsls	r3, r3, #6
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	085b      	lsrs	r3, r3, #1
 8001c60:	3b01      	subs	r3, #1
 8001c62:	041b      	lsls	r3, r3, #16
 8001c64:	431a      	orrs	r2, r3
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	061b      	lsls	r3, r3, #24
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	071b      	lsls	r3, r3, #28
 8001c72:	4961      	ldr	r1, [pc, #388]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d004      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c8e:	d00a      	beq.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d035      	beq.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ca4:	d130      	bne.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001ca6:	4b54      	ldr	r3, [pc, #336]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cac:	0c1b      	lsrs	r3, r3, #16
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001cb8:	4b4f      	ldr	r3, [pc, #316]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cbe:	0f1b      	lsrs	r3, r3, #28
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	019b      	lsls	r3, r3, #6
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	085b      	lsrs	r3, r3, #1
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	041b      	lsls	r3, r3, #16
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	061b      	lsls	r3, r3, #24
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	071b      	lsls	r3, r3, #28
 8001ce8:	4943      	ldr	r1, [pc, #268]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001cf0:	4b41      	ldr	r3, [pc, #260]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cf6:	f023 021f 	bic.w	r2, r3, #31
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	493d      	ldr	r1, [pc, #244]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d029      	beq.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d1c:	d124      	bne.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d1e:	4b36      	ldr	r3, [pc, #216]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d24:	0c1b      	lsrs	r3, r3, #16
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d30:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d36:	0f1b      	lsrs	r3, r3, #28
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	019b      	lsls	r3, r3, #6
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	085b      	lsrs	r3, r3, #1
 8001d50:	3b01      	subs	r3, #1
 8001d52:	041b      	lsls	r3, r3, #16
 8001d54:	431a      	orrs	r2, r3
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	061b      	lsls	r3, r3, #24
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	071b      	lsls	r3, r3, #28
 8001d60:	4925      	ldr	r1, [pc, #148]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d016      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685a      	ldr	r2, [r3, #4]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	019b      	lsls	r3, r3, #6
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	085b      	lsrs	r3, r3, #1
 8001d86:	3b01      	subs	r3, #1
 8001d88:	041b      	lsls	r3, r3, #16
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	061b      	lsls	r3, r3, #24
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	071b      	lsls	r3, r3, #28
 8001d9a:	4917      	ldr	r1, [pc, #92]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001da2:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001da8:	f7ff f836 	bl	8000e18 <HAL_GetTick>
 8001dac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001db0:	f7ff f832 	bl	8000e18 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e09f      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001dc2:	4b0d      	ldr	r3, [pc, #52]	; (8001df8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	f040 8095 	bne.w	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ddc:	f7ff f81c 	bl	8000e18 <HAL_GetTick>
 8001de0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001de2:	e00f      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001de4:	f7ff f818 	bl	8000e18 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d908      	bls.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e085      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001df6:	bf00      	nop
 8001df8:	40023800 	.word	0x40023800
 8001dfc:	42470068 	.word	0x42470068
 8001e00:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e04:	4b41      	ldr	r3, [pc, #260]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e10:	d0e8      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d009      	beq.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d02b      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d127      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001e3a:	4b34      	ldr	r3, [pc, #208]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e40:	0c1b      	lsrs	r3, r3, #16
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	3301      	adds	r3, #1
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	699a      	ldr	r2, [r3, #24]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	019b      	lsls	r3, r3, #6
 8001e56:	431a      	orrs	r2, r3
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	085b      	lsrs	r3, r3, #1
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	041b      	lsls	r3, r3, #16
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	061b      	lsls	r3, r3, #24
 8001e68:	4928      	ldr	r1, [pc, #160]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e70:	4b26      	ldr	r3, [pc, #152]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e76:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	021b      	lsls	r3, r3, #8
 8001e82:	4922      	ldr	r1, [pc, #136]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d01d      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e9e:	d118      	bne.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001ea0:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea6:	0e1b      	lsrs	r3, r3, #24
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699a      	ldr	r2, [r3, #24]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	019b      	lsls	r3, r3, #6
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	085b      	lsrs	r3, r3, #1
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	041b      	lsls	r3, r3, #16
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	061b      	lsls	r3, r3, #24
 8001eca:	4910      	ldr	r1, [pc, #64]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ed8:	f7fe ff9e 	bl	8000e18 <HAL_GetTick>
 8001edc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001ee0:	f7fe ff9a 	bl	8000e18 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e007      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001efa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001efe:	d1ef      	bne.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3730      	adds	r7, #48	; 0x30
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	42470070 	.word	0x42470070

08001f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f18:	b088      	sub	sp, #32
 8001f1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f30:	4bce      	ldr	r3, [pc, #824]	; (800226c <HAL_RCC_GetSysClockFreq+0x358>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 030c 	and.w	r3, r3, #12
 8001f38:	2b0c      	cmp	r3, #12
 8001f3a:	f200 818d 	bhi.w	8002258 <HAL_RCC_GetSysClockFreq+0x344>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <HAL_RCC_GetSysClockFreq+0x30>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f79 	.word	0x08001f79
 8001f48:	08002259 	.word	0x08002259
 8001f4c:	08002259 	.word	0x08002259
 8001f50:	08002259 	.word	0x08002259
 8001f54:	08001f7f 	.word	0x08001f7f
 8001f58:	08002259 	.word	0x08002259
 8001f5c:	08002259 	.word	0x08002259
 8001f60:	08002259 	.word	0x08002259
 8001f64:	08001f85 	.word	0x08001f85
 8001f68:	08002259 	.word	0x08002259
 8001f6c:	08002259 	.word	0x08002259
 8001f70:	08002259 	.word	0x08002259
 8001f74:	080020f9 	.word	0x080020f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f78:	4bbd      	ldr	r3, [pc, #756]	; (8002270 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f7a:	61bb      	str	r3, [r7, #24]
       break;
 8001f7c:	e16f      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f7e:	4bbd      	ldr	r3, [pc, #756]	; (8002274 <HAL_RCC_GetSysClockFreq+0x360>)
 8001f80:	61bb      	str	r3, [r7, #24]
      break;
 8001f82:	e16c      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f84:	4bb9      	ldr	r3, [pc, #740]	; (800226c <HAL_RCC_GetSysClockFreq+0x358>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f8c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f8e:	4bb7      	ldr	r3, [pc, #732]	; (800226c <HAL_RCC_GetSysClockFreq+0x358>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d053      	beq.n	8002042 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f9a:	4bb4      	ldr	r3, [pc, #720]	; (800226c <HAL_RCC_GetSysClockFreq+0x358>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	099b      	lsrs	r3, r3, #6
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001faa:	f04f 0100 	mov.w	r1, #0
 8001fae:	ea02 0400 	and.w	r4, r2, r0
 8001fb2:	603c      	str	r4, [r7, #0]
 8001fb4:	400b      	ands	r3, r1
 8001fb6:	607b      	str	r3, [r7, #4]
 8001fb8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	f04f 0300 	mov.w	r3, #0
 8001fc8:	014b      	lsls	r3, r1, #5
 8001fca:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fce:	0142      	lsls	r2, r0, #5
 8001fd0:	4610      	mov	r0, r2
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4623      	mov	r3, r4
 8001fd6:	1ac0      	subs	r0, r0, r3
 8001fd8:	462b      	mov	r3, r5
 8001fda:	eb61 0103 	sbc.w	r1, r1, r3
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	f04f 0300 	mov.w	r3, #0
 8001fe6:	018b      	lsls	r3, r1, #6
 8001fe8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001fec:	0182      	lsls	r2, r0, #6
 8001fee:	1a12      	subs	r2, r2, r0
 8001ff0:	eb63 0301 	sbc.w	r3, r3, r1
 8001ff4:	f04f 0000 	mov.w	r0, #0
 8001ff8:	f04f 0100 	mov.w	r1, #0
 8001ffc:	00d9      	lsls	r1, r3, #3
 8001ffe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002002:	00d0      	lsls	r0, r2, #3
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4621      	mov	r1, r4
 800200a:	1852      	adds	r2, r2, r1
 800200c:	4629      	mov	r1, r5
 800200e:	eb43 0101 	adc.w	r1, r3, r1
 8002012:	460b      	mov	r3, r1
 8002014:	f04f 0000 	mov.w	r0, #0
 8002018:	f04f 0100 	mov.w	r1, #0
 800201c:	0259      	lsls	r1, r3, #9
 800201e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002022:	0250      	lsls	r0, r2, #9
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	461a      	mov	r2, r3
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	f7fe f93c 	bl	80002b0 <__aeabi_uldivmod>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4613      	mov	r3, r2
 800203e:	61fb      	str	r3, [r7, #28]
 8002040:	e04c      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002042:	4b8a      	ldr	r3, [pc, #552]	; (800226c <HAL_RCC_GetSysClockFreq+0x358>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	099b      	lsrs	r3, r3, #6
 8002048:	461a      	mov	r2, r3
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002052:	f04f 0100 	mov.w	r1, #0
 8002056:	ea02 0a00 	and.w	sl, r2, r0
 800205a:	ea03 0b01 	and.w	fp, r3, r1
 800205e:	4650      	mov	r0, sl
 8002060:	4659      	mov	r1, fp
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	014b      	lsls	r3, r1, #5
 800206c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002070:	0142      	lsls	r2, r0, #5
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	ebb0 000a 	subs.w	r0, r0, sl
 800207a:	eb61 010b 	sbc.w	r1, r1, fp
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	018b      	lsls	r3, r1, #6
 8002088:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800208c:	0182      	lsls	r2, r0, #6
 800208e:	1a12      	subs	r2, r2, r0
 8002090:	eb63 0301 	sbc.w	r3, r3, r1
 8002094:	f04f 0000 	mov.w	r0, #0
 8002098:	f04f 0100 	mov.w	r1, #0
 800209c:	00d9      	lsls	r1, r3, #3
 800209e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80020a2:	00d0      	lsls	r0, r2, #3
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	eb12 020a 	adds.w	r2, r2, sl
 80020ac:	eb43 030b 	adc.w	r3, r3, fp
 80020b0:	f04f 0000 	mov.w	r0, #0
 80020b4:	f04f 0100 	mov.w	r1, #0
 80020b8:	0299      	lsls	r1, r3, #10
 80020ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80020be:	0290      	lsls	r0, r2, #10
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	461a      	mov	r2, r3
 80020cc:	f04f 0300 	mov.w	r3, #0
 80020d0:	f7fe f8ee 	bl	80002b0 <__aeabi_uldivmod>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4613      	mov	r3, r2
 80020da:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020dc:	4b63      	ldr	r3, [pc, #396]	; (800226c <HAL_RCC_GetSysClockFreq+0x358>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	0c1b      	lsrs	r3, r3, #16
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	3301      	adds	r3, #1
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80020ec:	69fa      	ldr	r2, [r7, #28]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f4:	61bb      	str	r3, [r7, #24]
      break;
 80020f6:	e0b2      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020f8:	4b5c      	ldr	r3, [pc, #368]	; (800226c <HAL_RCC_GetSysClockFreq+0x358>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002100:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002102:	4b5a      	ldr	r3, [pc, #360]	; (800226c <HAL_RCC_GetSysClockFreq+0x358>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d04d      	beq.n	80021aa <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800210e:	4b57      	ldr	r3, [pc, #348]	; (800226c <HAL_RCC_GetSysClockFreq+0x358>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	099b      	lsrs	r3, r3, #6
 8002114:	461a      	mov	r2, r3
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800211e:	f04f 0100 	mov.w	r1, #0
 8002122:	ea02 0800 	and.w	r8, r2, r0
 8002126:	ea03 0901 	and.w	r9, r3, r1
 800212a:	4640      	mov	r0, r8
 800212c:	4649      	mov	r1, r9
 800212e:	f04f 0200 	mov.w	r2, #0
 8002132:	f04f 0300 	mov.w	r3, #0
 8002136:	014b      	lsls	r3, r1, #5
 8002138:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800213c:	0142      	lsls	r2, r0, #5
 800213e:	4610      	mov	r0, r2
 8002140:	4619      	mov	r1, r3
 8002142:	ebb0 0008 	subs.w	r0, r0, r8
 8002146:	eb61 0109 	sbc.w	r1, r1, r9
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	018b      	lsls	r3, r1, #6
 8002154:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002158:	0182      	lsls	r2, r0, #6
 800215a:	1a12      	subs	r2, r2, r0
 800215c:	eb63 0301 	sbc.w	r3, r3, r1
 8002160:	f04f 0000 	mov.w	r0, #0
 8002164:	f04f 0100 	mov.w	r1, #0
 8002168:	00d9      	lsls	r1, r3, #3
 800216a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800216e:	00d0      	lsls	r0, r2, #3
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	eb12 0208 	adds.w	r2, r2, r8
 8002178:	eb43 0309 	adc.w	r3, r3, r9
 800217c:	f04f 0000 	mov.w	r0, #0
 8002180:	f04f 0100 	mov.w	r1, #0
 8002184:	0259      	lsls	r1, r3, #9
 8002186:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800218a:	0250      	lsls	r0, r2, #9
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	461a      	mov	r2, r3
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	f7fe f888 	bl	80002b0 <__aeabi_uldivmod>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4613      	mov	r3, r2
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	e04a      	b.n	8002240 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021aa:	4b30      	ldr	r3, [pc, #192]	; (800226c <HAL_RCC_GetSysClockFreq+0x358>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	099b      	lsrs	r3, r3, #6
 80021b0:	461a      	mov	r2, r3
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021ba:	f04f 0100 	mov.w	r1, #0
 80021be:	ea02 0400 	and.w	r4, r2, r0
 80021c2:	ea03 0501 	and.w	r5, r3, r1
 80021c6:	4620      	mov	r0, r4
 80021c8:	4629      	mov	r1, r5
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	f04f 0300 	mov.w	r3, #0
 80021d2:	014b      	lsls	r3, r1, #5
 80021d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021d8:	0142      	lsls	r2, r0, #5
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	1b00      	subs	r0, r0, r4
 80021e0:	eb61 0105 	sbc.w	r1, r1, r5
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	018b      	lsls	r3, r1, #6
 80021ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021f2:	0182      	lsls	r2, r0, #6
 80021f4:	1a12      	subs	r2, r2, r0
 80021f6:	eb63 0301 	sbc.w	r3, r3, r1
 80021fa:	f04f 0000 	mov.w	r0, #0
 80021fe:	f04f 0100 	mov.w	r1, #0
 8002202:	00d9      	lsls	r1, r3, #3
 8002204:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002208:	00d0      	lsls	r0, r2, #3
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	1912      	adds	r2, r2, r4
 8002210:	eb45 0303 	adc.w	r3, r5, r3
 8002214:	f04f 0000 	mov.w	r0, #0
 8002218:	f04f 0100 	mov.w	r1, #0
 800221c:	0299      	lsls	r1, r3, #10
 800221e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002222:	0290      	lsls	r0, r2, #10
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	461a      	mov	r2, r3
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	f7fe f83c 	bl	80002b0 <__aeabi_uldivmod>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4613      	mov	r3, r2
 800223e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002240:	4b0a      	ldr	r3, [pc, #40]	; (800226c <HAL_RCC_GetSysClockFreq+0x358>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	0f1b      	lsrs	r3, r3, #28
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800224c:	69fa      	ldr	r2, [r7, #28]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	fbb2 f3f3 	udiv	r3, r2, r3
 8002254:	61bb      	str	r3, [r7, #24]
      break;
 8002256:	e002      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_RCC_GetSysClockFreq+0x35c>)
 800225a:	61bb      	str	r3, [r7, #24]
      break;
 800225c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225e:	69bb      	ldr	r3, [r7, #24]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
 8002270:	00f42400 	.word	0x00f42400
 8002274:	007a1200 	.word	0x007a1200

08002278 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e28d      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8083 	beq.w	800239e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002298:	4b94      	ldr	r3, [pc, #592]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	d019      	beq.n	80022d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022a4:	4b91      	ldr	r3, [pc, #580]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d106      	bne.n	80022be <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022b0:	4b8e      	ldr	r3, [pc, #568]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022bc:	d00c      	beq.n	80022d8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022be:	4b8b      	ldr	r3, [pc, #556]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022c6:	2b0c      	cmp	r3, #12
 80022c8:	d112      	bne.n	80022f0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ca:	4b88      	ldr	r3, [pc, #544]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022d6:	d10b      	bne.n	80022f0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d8:	4b84      	ldr	r3, [pc, #528]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d05b      	beq.n	800239c <HAL_RCC_OscConfig+0x124>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d157      	bne.n	800239c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e25a      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022f8:	d106      	bne.n	8002308 <HAL_RCC_OscConfig+0x90>
 80022fa:	4b7c      	ldr	r3, [pc, #496]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a7b      	ldr	r2, [pc, #492]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 8002300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	e01d      	b.n	8002344 <HAL_RCC_OscConfig+0xcc>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0xb4>
 8002312:	4b76      	ldr	r3, [pc, #472]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a75      	ldr	r2, [pc, #468]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 8002318:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b73      	ldr	r3, [pc, #460]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a72      	ldr	r2, [pc, #456]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 8002324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e00b      	b.n	8002344 <HAL_RCC_OscConfig+0xcc>
 800232c:	4b6f      	ldr	r3, [pc, #444]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a6e      	ldr	r2, [pc, #440]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 8002332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b6c      	ldr	r3, [pc, #432]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a6b      	ldr	r2, [pc, #428]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 800233e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d013      	beq.n	8002374 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7fe fd64 	bl	8000e18 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002354:	f7fe fd60 	bl	8000e18 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b64      	cmp	r3, #100	; 0x64
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e21f      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	4b61      	ldr	r3, [pc, #388]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0xdc>
 8002372:	e014      	b.n	800239e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7fe fd50 	bl	8000e18 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800237c:	f7fe fd4c 	bl	8000e18 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	; 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e20b      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800238e:	4b57      	ldr	r3, [pc, #348]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x104>
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d06f      	beq.n	800248a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023aa:	4b50      	ldr	r3, [pc, #320]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 030c 	and.w	r3, r3, #12
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d017      	beq.n	80023e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023b6:	4b4d      	ldr	r3, [pc, #308]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d105      	bne.n	80023ce <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023c2:	4b4a      	ldr	r3, [pc, #296]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ce:	4b47      	ldr	r3, [pc, #284]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023d6:	2b0c      	cmp	r3, #12
 80023d8:	d11c      	bne.n	8002414 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023da:	4b44      	ldr	r3, [pc, #272]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d116      	bne.n	8002414 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023e6:	4b41      	ldr	r3, [pc, #260]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d005      	beq.n	80023fe <HAL_RCC_OscConfig+0x186>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d001      	beq.n	80023fe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e1d3      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fe:	4b3b      	ldr	r3, [pc, #236]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	4937      	ldr	r1, [pc, #220]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002412:	e03a      	b.n	800248a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d020      	beq.n	800245e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800241c:	4b34      	ldr	r3, [pc, #208]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002422:	f7fe fcf9 	bl	8000e18 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800242a:	f7fe fcf5 	bl	8000e18 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e1b4      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243c:	4b2b      	ldr	r3, [pc, #172]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002448:	4b28      	ldr	r3, [pc, #160]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4925      	ldr	r1, [pc, #148]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 8002458:	4313      	orrs	r3, r2
 800245a:	600b      	str	r3, [r1, #0]
 800245c:	e015      	b.n	800248a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800245e:	4b24      	ldr	r3, [pc, #144]	; (80024f0 <HAL_RCC_OscConfig+0x278>)
 8002460:	2200      	movs	r2, #0
 8002462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fcd8 	bl	8000e18 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800246c:	f7fe fcd4 	bl	8000e18 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e193      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247e:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0308 	and.w	r3, r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	d036      	beq.n	8002504 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d016      	beq.n	80024cc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800249e:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a4:	f7fe fcb8 	bl	8000e18 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ac:	f7fe fcb4 	bl	8000e18 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e173      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024be:	4b0b      	ldr	r3, [pc, #44]	; (80024ec <HAL_RCC_OscConfig+0x274>)
 80024c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x234>
 80024ca:	e01b      	b.n	8002504 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024cc:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HAL_RCC_OscConfig+0x27c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d2:	f7fe fca1 	bl	8000e18 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d8:	e00e      	b.n	80024f8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024da:	f7fe fc9d 	bl	8000e18 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d907      	bls.n	80024f8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e15c      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
 80024ec:	40023800 	.word	0x40023800
 80024f0:	42470000 	.word	0x42470000
 80024f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f8:	4b8a      	ldr	r3, [pc, #552]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 80024fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1ea      	bne.n	80024da <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	f000 8097 	beq.w	8002640 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002512:	2300      	movs	r3, #0
 8002514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002516:	4b83      	ldr	r3, [pc, #524]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10f      	bne.n	8002542 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	4b7f      	ldr	r3, [pc, #508]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	4a7e      	ldr	r2, [pc, #504]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 800252c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002530:	6413      	str	r3, [r2, #64]	; 0x40
 8002532:	4b7c      	ldr	r3, [pc, #496]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800253e:	2301      	movs	r3, #1
 8002540:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002542:	4b79      	ldr	r3, [pc, #484]	; (8002728 <HAL_RCC_OscConfig+0x4b0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254a:	2b00      	cmp	r3, #0
 800254c:	d118      	bne.n	8002580 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800254e:	4b76      	ldr	r3, [pc, #472]	; (8002728 <HAL_RCC_OscConfig+0x4b0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a75      	ldr	r2, [pc, #468]	; (8002728 <HAL_RCC_OscConfig+0x4b0>)
 8002554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800255a:	f7fe fc5d 	bl	8000e18 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002562:	f7fe fc59 	bl	8000e18 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e118      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002574:	4b6c      	ldr	r3, [pc, #432]	; (8002728 <HAL_RCC_OscConfig+0x4b0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d106      	bne.n	8002596 <HAL_RCC_OscConfig+0x31e>
 8002588:	4b66      	ldr	r3, [pc, #408]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 800258a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258c:	4a65      	ldr	r2, [pc, #404]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	6713      	str	r3, [r2, #112]	; 0x70
 8002594:	e01c      	b.n	80025d0 <HAL_RCC_OscConfig+0x358>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b05      	cmp	r3, #5
 800259c:	d10c      	bne.n	80025b8 <HAL_RCC_OscConfig+0x340>
 800259e:	4b61      	ldr	r3, [pc, #388]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a2:	4a60      	ldr	r2, [pc, #384]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 80025a4:	f043 0304 	orr.w	r3, r3, #4
 80025a8:	6713      	str	r3, [r2, #112]	; 0x70
 80025aa:	4b5e      	ldr	r3, [pc, #376]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ae:	4a5d      	ldr	r2, [pc, #372]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 80025b0:	f043 0301 	orr.w	r3, r3, #1
 80025b4:	6713      	str	r3, [r2, #112]	; 0x70
 80025b6:	e00b      	b.n	80025d0 <HAL_RCC_OscConfig+0x358>
 80025b8:	4b5a      	ldr	r3, [pc, #360]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 80025ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025bc:	4a59      	ldr	r2, [pc, #356]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 80025be:	f023 0301 	bic.w	r3, r3, #1
 80025c2:	6713      	str	r3, [r2, #112]	; 0x70
 80025c4:	4b57      	ldr	r3, [pc, #348]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 80025c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c8:	4a56      	ldr	r2, [pc, #344]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 80025ca:	f023 0304 	bic.w	r3, r3, #4
 80025ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d015      	beq.n	8002604 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d8:	f7fe fc1e 	bl	8000e18 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025de:	e00a      	b.n	80025f6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025e0:	f7fe fc1a 	bl	8000e18 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e0d7      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f6:	4b4b      	ldr	r3, [pc, #300]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0ee      	beq.n	80025e0 <HAL_RCC_OscConfig+0x368>
 8002602:	e014      	b.n	800262e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002604:	f7fe fc08 	bl	8000e18 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260a:	e00a      	b.n	8002622 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260c:	f7fe fc04 	bl	8000e18 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	f241 3288 	movw	r2, #5000	; 0x1388
 800261a:	4293      	cmp	r3, r2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e0c1      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002622:	4b40      	ldr	r3, [pc, #256]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 8002624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1ee      	bne.n	800260c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800262e:	7dfb      	ldrb	r3, [r7, #23]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d105      	bne.n	8002640 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002634:	4b3b      	ldr	r3, [pc, #236]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	4a3a      	ldr	r2, [pc, #232]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 800263a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800263e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80ad 	beq.w	80027a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800264a:	4b36      	ldr	r3, [pc, #216]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b08      	cmp	r3, #8
 8002654:	d060      	beq.n	8002718 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d145      	bne.n	80026ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265e:	4b33      	ldr	r3, [pc, #204]	; (800272c <HAL_RCC_OscConfig+0x4b4>)
 8002660:	2200      	movs	r2, #0
 8002662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002664:	f7fe fbd8 	bl	8000e18 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800266c:	f7fe fbd4 	bl	8000e18 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e093      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267e:	4b29      	ldr	r3, [pc, #164]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69da      	ldr	r2, [r3, #28]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	019b      	lsls	r3, r3, #6
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	085b      	lsrs	r3, r3, #1
 80026a2:	3b01      	subs	r3, #1
 80026a4:	041b      	lsls	r3, r3, #16
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ac:	061b      	lsls	r3, r3, #24
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	071b      	lsls	r3, r3, #28
 80026b6:	491b      	ldr	r1, [pc, #108]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026bc:	4b1b      	ldr	r3, [pc, #108]	; (800272c <HAL_RCC_OscConfig+0x4b4>)
 80026be:	2201      	movs	r2, #1
 80026c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c2:	f7fe fba9 	bl	8000e18 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ca:	f7fe fba5 	bl	8000e18 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e064      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026dc:	4b11      	ldr	r3, [pc, #68]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0f0      	beq.n	80026ca <HAL_RCC_OscConfig+0x452>
 80026e8:	e05c      	b.n	80027a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ea:	4b10      	ldr	r3, [pc, #64]	; (800272c <HAL_RCC_OscConfig+0x4b4>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7fe fb92 	bl	8000e18 <HAL_GetTick>
 80026f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026f8:	f7fe fb8e 	bl	8000e18 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e04d      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270a:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_RCC_OscConfig+0x4ac>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1f0      	bne.n	80026f8 <HAL_RCC_OscConfig+0x480>
 8002716:	e045      	b.n	80027a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d107      	bne.n	8002730 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e040      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
 8002724:	40023800 	.word	0x40023800
 8002728:	40007000 	.word	0x40007000
 800272c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002730:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <HAL_RCC_OscConfig+0x538>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	699b      	ldr	r3, [r3, #24]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d030      	beq.n	80027a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002748:	429a      	cmp	r2, r3
 800274a:	d129      	bne.n	80027a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002756:	429a      	cmp	r2, r3
 8002758:	d122      	bne.n	80027a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002760:	4013      	ands	r3, r2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002766:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002768:	4293      	cmp	r3, r2
 800276a:	d119      	bne.n	80027a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	085b      	lsrs	r3, r3, #1
 8002778:	3b01      	subs	r3, #1
 800277a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d10f      	bne.n	80027a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800278c:	429a      	cmp	r2, r3
 800278e:	d107      	bne.n	80027a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800279c:	429a      	cmp	r2, r3
 800279e:	d001      	beq.n	80027a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e000      	b.n	80027a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40023800 	.word	0x40023800

080027b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e041      	b.n	800284a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f839 	bl	8002852 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2202      	movs	r2, #2
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3304      	adds	r3, #4
 80027f0:	4619      	mov	r1, r3
 80027f2:	4610      	mov	r0, r2
 80027f4:	f000 f9d8 	bl	8002ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b01      	cmp	r3, #1
 800287a:	d001      	beq.n	8002880 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e04e      	b.n	800291e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a23      	ldr	r2, [pc, #140]	; (800292c <HAL_TIM_Base_Start_IT+0xc4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d022      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0x80>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028aa:	d01d      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0x80>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1f      	ldr	r2, [pc, #124]	; (8002930 <HAL_TIM_Base_Start_IT+0xc8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d018      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0x80>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a1e      	ldr	r2, [pc, #120]	; (8002934 <HAL_TIM_Base_Start_IT+0xcc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d013      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0x80>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a1c      	ldr	r2, [pc, #112]	; (8002938 <HAL_TIM_Base_Start_IT+0xd0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d00e      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0x80>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a1b      	ldr	r2, [pc, #108]	; (800293c <HAL_TIM_Base_Start_IT+0xd4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d009      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0x80>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a19      	ldr	r2, [pc, #100]	; (8002940 <HAL_TIM_Base_Start_IT+0xd8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d004      	beq.n	80028e8 <HAL_TIM_Base_Start_IT+0x80>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a18      	ldr	r2, [pc, #96]	; (8002944 <HAL_TIM_Base_Start_IT+0xdc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d111      	bne.n	800290c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b06      	cmp	r3, #6
 80028f8:	d010      	beq.n	800291c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f042 0201 	orr.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800290a:	e007      	b.n	800291c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	40010000 	.word	0x40010000
 8002930:	40000400 	.word	0x40000400
 8002934:	40000800 	.word	0x40000800
 8002938:	40000c00 	.word	0x40000c00
 800293c:	40010400 	.word	0x40010400
 8002940:	40014000 	.word	0x40014000
 8002944:	40001800 	.word	0x40001800

08002948 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b02      	cmp	r3, #2
 800295c:	d122      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b02      	cmp	r3, #2
 800296a:	d11b      	bne.n	80029a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0202 	mvn.w	r2, #2
 8002974:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f8ee 	bl	8002b6c <HAL_TIM_IC_CaptureCallback>
 8002990:	e005      	b.n	800299e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f8e0 	bl	8002b58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f8f1 	bl	8002b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d122      	bne.n	80029f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d11b      	bne.n	80029f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0204 	mvn.w	r2, #4
 80029c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2202      	movs	r2, #2
 80029ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f8c4 	bl	8002b6c <HAL_TIM_IC_CaptureCallback>
 80029e4:	e005      	b.n	80029f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f8b6 	bl	8002b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f8c7 	bl	8002b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d122      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	2b08      	cmp	r3, #8
 8002a12:	d11b      	bne.n	8002a4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0208 	mvn.w	r2, #8
 8002a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2204      	movs	r2, #4
 8002a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f89a 	bl	8002b6c <HAL_TIM_IC_CaptureCallback>
 8002a38:	e005      	b.n	8002a46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f88c 	bl	8002b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f89d 	bl	8002b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b10      	cmp	r3, #16
 8002a58:	d122      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b10      	cmp	r3, #16
 8002a66:	d11b      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0210 	mvn.w	r2, #16
 8002a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2208      	movs	r2, #8
 8002a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f870 	bl	8002b6c <HAL_TIM_IC_CaptureCallback>
 8002a8c:	e005      	b.n	8002a9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f862 	bl	8002b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f873 	bl	8002b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d10e      	bne.n	8002acc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d107      	bne.n	8002acc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0201 	mvn.w	r2, #1
 8002ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7fd ff52 	bl	8000970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	2b80      	cmp	r3, #128	; 0x80
 8002ad8:	d10e      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae4:	2b80      	cmp	r3, #128	; 0x80
 8002ae6:	d107      	bne.n	8002af8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f902 	bl	8002cfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b02:	2b40      	cmp	r3, #64	; 0x40
 8002b04:	d10e      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b10:	2b40      	cmp	r3, #64	; 0x40
 8002b12:	d107      	bne.n	8002b24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f838 	bl	8002b94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b20      	cmp	r3, #32
 8002b30:	d10e      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f003 0320 	and.w	r3, r3, #32
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d107      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f06f 0220 	mvn.w	r2, #32
 8002b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f8cc 	bl	8002ce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a40      	ldr	r2, [pc, #256]	; (8002cbc <TIM_Base_SetConfig+0x114>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d013      	beq.n	8002be8 <TIM_Base_SetConfig+0x40>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc6:	d00f      	beq.n	8002be8 <TIM_Base_SetConfig+0x40>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a3d      	ldr	r2, [pc, #244]	; (8002cc0 <TIM_Base_SetConfig+0x118>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d00b      	beq.n	8002be8 <TIM_Base_SetConfig+0x40>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a3c      	ldr	r2, [pc, #240]	; (8002cc4 <TIM_Base_SetConfig+0x11c>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d007      	beq.n	8002be8 <TIM_Base_SetConfig+0x40>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a3b      	ldr	r2, [pc, #236]	; (8002cc8 <TIM_Base_SetConfig+0x120>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d003      	beq.n	8002be8 <TIM_Base_SetConfig+0x40>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a3a      	ldr	r2, [pc, #232]	; (8002ccc <TIM_Base_SetConfig+0x124>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d108      	bne.n	8002bfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a2f      	ldr	r2, [pc, #188]	; (8002cbc <TIM_Base_SetConfig+0x114>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d02b      	beq.n	8002c5a <TIM_Base_SetConfig+0xb2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c08:	d027      	beq.n	8002c5a <TIM_Base_SetConfig+0xb2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a2c      	ldr	r2, [pc, #176]	; (8002cc0 <TIM_Base_SetConfig+0x118>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d023      	beq.n	8002c5a <TIM_Base_SetConfig+0xb2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a2b      	ldr	r2, [pc, #172]	; (8002cc4 <TIM_Base_SetConfig+0x11c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d01f      	beq.n	8002c5a <TIM_Base_SetConfig+0xb2>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a2a      	ldr	r2, [pc, #168]	; (8002cc8 <TIM_Base_SetConfig+0x120>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d01b      	beq.n	8002c5a <TIM_Base_SetConfig+0xb2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a29      	ldr	r2, [pc, #164]	; (8002ccc <TIM_Base_SetConfig+0x124>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d017      	beq.n	8002c5a <TIM_Base_SetConfig+0xb2>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a28      	ldr	r2, [pc, #160]	; (8002cd0 <TIM_Base_SetConfig+0x128>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d013      	beq.n	8002c5a <TIM_Base_SetConfig+0xb2>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a27      	ldr	r2, [pc, #156]	; (8002cd4 <TIM_Base_SetConfig+0x12c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d00f      	beq.n	8002c5a <TIM_Base_SetConfig+0xb2>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a26      	ldr	r2, [pc, #152]	; (8002cd8 <TIM_Base_SetConfig+0x130>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00b      	beq.n	8002c5a <TIM_Base_SetConfig+0xb2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a25      	ldr	r2, [pc, #148]	; (8002cdc <TIM_Base_SetConfig+0x134>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d007      	beq.n	8002c5a <TIM_Base_SetConfig+0xb2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a24      	ldr	r2, [pc, #144]	; (8002ce0 <TIM_Base_SetConfig+0x138>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d003      	beq.n	8002c5a <TIM_Base_SetConfig+0xb2>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a23      	ldr	r2, [pc, #140]	; (8002ce4 <TIM_Base_SetConfig+0x13c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d108      	bne.n	8002c6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <TIM_Base_SetConfig+0x114>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d003      	beq.n	8002ca0 <TIM_Base_SetConfig+0xf8>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a0c      	ldr	r2, [pc, #48]	; (8002ccc <TIM_Base_SetConfig+0x124>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d103      	bne.n	8002ca8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	615a      	str	r2, [r3, #20]
}
 8002cae:	bf00      	nop
 8002cb0:	3714      	adds	r7, #20
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40010000 	.word	0x40010000
 8002cc0:	40000400 	.word	0x40000400
 8002cc4:	40000800 	.word	0x40000800
 8002cc8:	40000c00 	.word	0x40000c00
 8002ccc:	40010400 	.word	0x40010400
 8002cd0:	40014000 	.word	0x40014000
 8002cd4:	40014400 	.word	0x40014400
 8002cd8:	40014800 	.word	0x40014800
 8002cdc:	40001800 	.word	0x40001800
 8002ce0:	40001c00 	.word	0x40001c00
 8002ce4:	40002000 	.word	0x40002000

08002ce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e03f      	b.n	8002da2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fd fe5e 	bl	80009f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2224      	movs	r2, #36	; 0x24
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f929 	bl	8002fac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695a      	ldr	r2, [r3, #20]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b08a      	sub	sp, #40	; 0x28
 8002dae:	af02      	add	r7, sp, #8
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	603b      	str	r3, [r7, #0]
 8002db6:	4613      	mov	r3, r2
 8002db8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	d17c      	bne.n	8002ec4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <HAL_UART_Transmit+0x2c>
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e075      	b.n	8002ec6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_UART_Transmit+0x3e>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e06e      	b.n	8002ec6 <HAL_UART_Transmit+0x11c>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2221      	movs	r2, #33	; 0x21
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dfe:	f7fe f80b 	bl	8000e18 <HAL_GetTick>
 8002e02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	88fa      	ldrh	r2, [r7, #6]
 8002e08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	88fa      	ldrh	r2, [r7, #6]
 8002e0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e18:	d108      	bne.n	8002e2c <HAL_UART_Transmit+0x82>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d104      	bne.n	8002e2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	e003      	b.n	8002e34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e3c:	e02a      	b.n	8002e94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2200      	movs	r2, #0
 8002e46:	2180      	movs	r1, #128	; 0x80
 8002e48:	68f8      	ldr	r0, [r7, #12]
 8002e4a:	f000 f840 	bl	8002ece <UART_WaitOnFlagUntilTimeout>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e036      	b.n	8002ec6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10b      	bne.n	8002e76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	3302      	adds	r3, #2
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	e007      	b.n	8002e86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	781a      	ldrb	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	3301      	adds	r3, #1
 8002e84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1cf      	bne.n	8002e3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2140      	movs	r1, #64	; 0x40
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 f810 	bl	8002ece <UART_WaitOnFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e006      	b.n	8002ec6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e000      	b.n	8002ec6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ec4:	2302      	movs	r3, #2
  }
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3720      	adds	r7, #32
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b090      	sub	sp, #64	; 0x40
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	603b      	str	r3, [r7, #0]
 8002eda:	4613      	mov	r3, r2
 8002edc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ede:	e050      	b.n	8002f82 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee6:	d04c      	beq.n	8002f82 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002ee8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d007      	beq.n	8002efe <UART_WaitOnFlagUntilTimeout+0x30>
 8002eee:	f7fd ff93 	bl	8000e18 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d241      	bcs.n	8002f82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	330c      	adds	r3, #12
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f08:	e853 3f00 	ldrex	r3, [r3]
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	330c      	adds	r3, #12
 8002f1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002f1e:	637a      	str	r2, [r7, #52]	; 0x34
 8002f20:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f26:	e841 2300 	strex	r3, r2, [r1]
 8002f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d1e5      	bne.n	8002efe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3314      	adds	r3, #20
 8002f38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	e853 3f00 	ldrex	r3, [r3]
 8002f40:	613b      	str	r3, [r7, #16]
   return(result);
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3314      	adds	r3, #20
 8002f50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f52:	623a      	str	r2, [r7, #32]
 8002f54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f56:	69f9      	ldr	r1, [r7, #28]
 8002f58:	6a3a      	ldr	r2, [r7, #32]
 8002f5a:	e841 2300 	strex	r3, r2, [r1]
 8002f5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1e5      	bne.n	8002f32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2220      	movs	r2, #32
 8002f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e00f      	b.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	68ba      	ldr	r2, [r7, #8]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	bf0c      	ite	eq
 8002f92:	2301      	moveq	r3, #1
 8002f94:	2300      	movne	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	461a      	mov	r2, r3
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d09f      	beq.n	8002ee0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3740      	adds	r7, #64	; 0x40
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fb0:	b09f      	sub	sp, #124	; 0x7c
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc2:	68d9      	ldr	r1, [r3, #12]
 8002fc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	ea40 0301 	orr.w	r3, r0, r1
 8002fcc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ff0:	f021 010c 	bic.w	r1, r1, #12
 8002ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ffa:	430b      	orrs	r3, r1
 8002ffc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ffe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300a:	6999      	ldr	r1, [r3, #24]
 800300c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	ea40 0301 	orr.w	r3, r0, r1
 8003014:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	4bc5      	ldr	r3, [pc, #788]	; (8003330 <UART_SetConfig+0x384>)
 800301c:	429a      	cmp	r2, r3
 800301e:	d004      	beq.n	800302a <UART_SetConfig+0x7e>
 8003020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4bc3      	ldr	r3, [pc, #780]	; (8003334 <UART_SetConfig+0x388>)
 8003026:	429a      	cmp	r2, r3
 8003028:	d103      	bne.n	8003032 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800302a:	f7fe fc03 	bl	8001834 <HAL_RCC_GetPCLK2Freq>
 800302e:	6778      	str	r0, [r7, #116]	; 0x74
 8003030:	e002      	b.n	8003038 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003032:	f7fe fbeb 	bl	800180c <HAL_RCC_GetPCLK1Freq>
 8003036:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003040:	f040 80b6 	bne.w	80031b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003046:	461c      	mov	r4, r3
 8003048:	f04f 0500 	mov.w	r5, #0
 800304c:	4622      	mov	r2, r4
 800304e:	462b      	mov	r3, r5
 8003050:	1891      	adds	r1, r2, r2
 8003052:	6439      	str	r1, [r7, #64]	; 0x40
 8003054:	415b      	adcs	r3, r3
 8003056:	647b      	str	r3, [r7, #68]	; 0x44
 8003058:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800305c:	1912      	adds	r2, r2, r4
 800305e:	eb45 0303 	adc.w	r3, r5, r3
 8003062:	f04f 0000 	mov.w	r0, #0
 8003066:	f04f 0100 	mov.w	r1, #0
 800306a:	00d9      	lsls	r1, r3, #3
 800306c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003070:	00d0      	lsls	r0, r2, #3
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	1911      	adds	r1, r2, r4
 8003078:	6639      	str	r1, [r7, #96]	; 0x60
 800307a:	416b      	adcs	r3, r5
 800307c:	667b      	str	r3, [r7, #100]	; 0x64
 800307e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	461a      	mov	r2, r3
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	1891      	adds	r1, r2, r2
 800308a:	63b9      	str	r1, [r7, #56]	; 0x38
 800308c:	415b      	adcs	r3, r3
 800308e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003090:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003094:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003098:	f7fd f90a 	bl	80002b0 <__aeabi_uldivmod>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4ba5      	ldr	r3, [pc, #660]	; (8003338 <UART_SetConfig+0x38c>)
 80030a2:	fba3 2302 	umull	r2, r3, r3, r2
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	011e      	lsls	r6, r3, #4
 80030aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ac:	461c      	mov	r4, r3
 80030ae:	f04f 0500 	mov.w	r5, #0
 80030b2:	4622      	mov	r2, r4
 80030b4:	462b      	mov	r3, r5
 80030b6:	1891      	adds	r1, r2, r2
 80030b8:	6339      	str	r1, [r7, #48]	; 0x30
 80030ba:	415b      	adcs	r3, r3
 80030bc:	637b      	str	r3, [r7, #52]	; 0x34
 80030be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80030c2:	1912      	adds	r2, r2, r4
 80030c4:	eb45 0303 	adc.w	r3, r5, r3
 80030c8:	f04f 0000 	mov.w	r0, #0
 80030cc:	f04f 0100 	mov.w	r1, #0
 80030d0:	00d9      	lsls	r1, r3, #3
 80030d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030d6:	00d0      	lsls	r0, r2, #3
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	1911      	adds	r1, r2, r4
 80030de:	65b9      	str	r1, [r7, #88]	; 0x58
 80030e0:	416b      	adcs	r3, r5
 80030e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	461a      	mov	r2, r3
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	1891      	adds	r1, r2, r2
 80030f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80030f2:	415b      	adcs	r3, r3
 80030f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80030fe:	f7fd f8d7 	bl	80002b0 <__aeabi_uldivmod>
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	4b8c      	ldr	r3, [pc, #560]	; (8003338 <UART_SetConfig+0x38c>)
 8003108:	fba3 1302 	umull	r1, r3, r3, r2
 800310c:	095b      	lsrs	r3, r3, #5
 800310e:	2164      	movs	r1, #100	; 0x64
 8003110:	fb01 f303 	mul.w	r3, r1, r3
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	3332      	adds	r3, #50	; 0x32
 800311a:	4a87      	ldr	r2, [pc, #540]	; (8003338 <UART_SetConfig+0x38c>)
 800311c:	fba2 2303 	umull	r2, r3, r2, r3
 8003120:	095b      	lsrs	r3, r3, #5
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003128:	441e      	add	r6, r3
 800312a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800312c:	4618      	mov	r0, r3
 800312e:	f04f 0100 	mov.w	r1, #0
 8003132:	4602      	mov	r2, r0
 8003134:	460b      	mov	r3, r1
 8003136:	1894      	adds	r4, r2, r2
 8003138:	623c      	str	r4, [r7, #32]
 800313a:	415b      	adcs	r3, r3
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
 800313e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003142:	1812      	adds	r2, r2, r0
 8003144:	eb41 0303 	adc.w	r3, r1, r3
 8003148:	f04f 0400 	mov.w	r4, #0
 800314c:	f04f 0500 	mov.w	r5, #0
 8003150:	00dd      	lsls	r5, r3, #3
 8003152:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003156:	00d4      	lsls	r4, r2, #3
 8003158:	4622      	mov	r2, r4
 800315a:	462b      	mov	r3, r5
 800315c:	1814      	adds	r4, r2, r0
 800315e:	653c      	str	r4, [r7, #80]	; 0x50
 8003160:	414b      	adcs	r3, r1
 8003162:	657b      	str	r3, [r7, #84]	; 0x54
 8003164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	461a      	mov	r2, r3
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	1891      	adds	r1, r2, r2
 8003170:	61b9      	str	r1, [r7, #24]
 8003172:	415b      	adcs	r3, r3
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800317a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800317e:	f7fd f897 	bl	80002b0 <__aeabi_uldivmod>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4b6c      	ldr	r3, [pc, #432]	; (8003338 <UART_SetConfig+0x38c>)
 8003188:	fba3 1302 	umull	r1, r3, r3, r2
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	2164      	movs	r1, #100	; 0x64
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	3332      	adds	r3, #50	; 0x32
 800319a:	4a67      	ldr	r2, [pc, #412]	; (8003338 <UART_SetConfig+0x38c>)
 800319c:	fba2 2303 	umull	r2, r3, r2, r3
 80031a0:	095b      	lsrs	r3, r3, #5
 80031a2:	f003 0207 	and.w	r2, r3, #7
 80031a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4432      	add	r2, r6
 80031ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031ae:	e0b9      	b.n	8003324 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031b2:	461c      	mov	r4, r3
 80031b4:	f04f 0500 	mov.w	r5, #0
 80031b8:	4622      	mov	r2, r4
 80031ba:	462b      	mov	r3, r5
 80031bc:	1891      	adds	r1, r2, r2
 80031be:	6139      	str	r1, [r7, #16]
 80031c0:	415b      	adcs	r3, r3
 80031c2:	617b      	str	r3, [r7, #20]
 80031c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031c8:	1912      	adds	r2, r2, r4
 80031ca:	eb45 0303 	adc.w	r3, r5, r3
 80031ce:	f04f 0000 	mov.w	r0, #0
 80031d2:	f04f 0100 	mov.w	r1, #0
 80031d6:	00d9      	lsls	r1, r3, #3
 80031d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031dc:	00d0      	lsls	r0, r2, #3
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	eb12 0804 	adds.w	r8, r2, r4
 80031e6:	eb43 0905 	adc.w	r9, r3, r5
 80031ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f04f 0100 	mov.w	r1, #0
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	008b      	lsls	r3, r1, #2
 80031fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003202:	0082      	lsls	r2, r0, #2
 8003204:	4640      	mov	r0, r8
 8003206:	4649      	mov	r1, r9
 8003208:	f7fd f852 	bl	80002b0 <__aeabi_uldivmod>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4b49      	ldr	r3, [pc, #292]	; (8003338 <UART_SetConfig+0x38c>)
 8003212:	fba3 2302 	umull	r2, r3, r3, r2
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	011e      	lsls	r6, r3, #4
 800321a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800321c:	4618      	mov	r0, r3
 800321e:	f04f 0100 	mov.w	r1, #0
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	1894      	adds	r4, r2, r2
 8003228:	60bc      	str	r4, [r7, #8]
 800322a:	415b      	adcs	r3, r3
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003232:	1812      	adds	r2, r2, r0
 8003234:	eb41 0303 	adc.w	r3, r1, r3
 8003238:	f04f 0400 	mov.w	r4, #0
 800323c:	f04f 0500 	mov.w	r5, #0
 8003240:	00dd      	lsls	r5, r3, #3
 8003242:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003246:	00d4      	lsls	r4, r2, #3
 8003248:	4622      	mov	r2, r4
 800324a:	462b      	mov	r3, r5
 800324c:	1814      	adds	r4, r2, r0
 800324e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003250:	414b      	adcs	r3, r1
 8003252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4618      	mov	r0, r3
 800325a:	f04f 0100 	mov.w	r1, #0
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	008b      	lsls	r3, r1, #2
 8003268:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800326c:	0082      	lsls	r2, r0, #2
 800326e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003272:	f7fd f81d 	bl	80002b0 <__aeabi_uldivmod>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4b2f      	ldr	r3, [pc, #188]	; (8003338 <UART_SetConfig+0x38c>)
 800327c:	fba3 1302 	umull	r1, r3, r3, r2
 8003280:	095b      	lsrs	r3, r3, #5
 8003282:	2164      	movs	r1, #100	; 0x64
 8003284:	fb01 f303 	mul.w	r3, r1, r3
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	3332      	adds	r3, #50	; 0x32
 800328e:	4a2a      	ldr	r2, [pc, #168]	; (8003338 <UART_SetConfig+0x38c>)
 8003290:	fba2 2303 	umull	r2, r3, r2, r3
 8003294:	095b      	lsrs	r3, r3, #5
 8003296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800329a:	441e      	add	r6, r3
 800329c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800329e:	4618      	mov	r0, r3
 80032a0:	f04f 0100 	mov.w	r1, #0
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	1894      	adds	r4, r2, r2
 80032aa:	603c      	str	r4, [r7, #0]
 80032ac:	415b      	adcs	r3, r3
 80032ae:	607b      	str	r3, [r7, #4]
 80032b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032b4:	1812      	adds	r2, r2, r0
 80032b6:	eb41 0303 	adc.w	r3, r1, r3
 80032ba:	f04f 0400 	mov.w	r4, #0
 80032be:	f04f 0500 	mov.w	r5, #0
 80032c2:	00dd      	lsls	r5, r3, #3
 80032c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80032c8:	00d4      	lsls	r4, r2, #3
 80032ca:	4622      	mov	r2, r4
 80032cc:	462b      	mov	r3, r5
 80032ce:	eb12 0a00 	adds.w	sl, r2, r0
 80032d2:	eb43 0b01 	adc.w	fp, r3, r1
 80032d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4618      	mov	r0, r3
 80032dc:	f04f 0100 	mov.w	r1, #0
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	008b      	lsls	r3, r1, #2
 80032ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032ee:	0082      	lsls	r2, r0, #2
 80032f0:	4650      	mov	r0, sl
 80032f2:	4659      	mov	r1, fp
 80032f4:	f7fc ffdc 	bl	80002b0 <__aeabi_uldivmod>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <UART_SetConfig+0x38c>)
 80032fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	2164      	movs	r1, #100	; 0x64
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	3332      	adds	r3, #50	; 0x32
 8003310:	4a09      	ldr	r2, [pc, #36]	; (8003338 <UART_SetConfig+0x38c>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	f003 020f 	and.w	r2, r3, #15
 800331c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4432      	add	r2, r6
 8003322:	609a      	str	r2, [r3, #8]
}
 8003324:	bf00      	nop
 8003326:	377c      	adds	r7, #124	; 0x7c
 8003328:	46bd      	mov	sp, r7
 800332a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800332e:	bf00      	nop
 8003330:	40011000 	.word	0x40011000
 8003334:	40011400 	.word	0x40011400
 8003338:	51eb851f 	.word	0x51eb851f

0800333c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800333c:	b084      	sub	sp, #16
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	f107 001c 	add.w	r0, r7, #28
 800334a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800334e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003350:	2b01      	cmp	r3, #1
 8003352:	d122      	bne.n	800339a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003358:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003368:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800337c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800337e:	2b01      	cmp	r3, #1
 8003380:	d105      	bne.n	800338e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fa7c 	bl	800388c <USB_CoreReset>
 8003394:	4603      	mov	r3, r0
 8003396:	73fb      	strb	r3, [r7, #15]
 8003398:	e01a      	b.n	80033d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fa70 	bl	800388c <USB_CoreReset>
 80033ac:	4603      	mov	r3, r0
 80033ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80033b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	639a      	str	r2, [r3, #56]	; 0x38
 80033c2:	e005      	b.n	80033d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d10b      	bne.n	80033ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f043 0206 	orr.w	r2, r3, #6
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f043 0220 	orr.w	r2, r3, #32
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033fa:	b004      	add	sp, #16
 80033fc:	4770      	bx	lr

080033fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f023 0201 	bic.w	r2, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d115      	bne.n	800346e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800344e:	2001      	movs	r0, #1
 8003450:	f7fd fcee 	bl	8000e30 <HAL_Delay>
      ms++;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	3301      	adds	r3, #1
 8003458:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fa08 	bl	8003870 <USB_GetMode>
 8003460:	4603      	mov	r3, r0
 8003462:	2b01      	cmp	r3, #1
 8003464:	d01e      	beq.n	80034a4 <USB_SetCurrentMode+0x84>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b31      	cmp	r3, #49	; 0x31
 800346a:	d9f0      	bls.n	800344e <USB_SetCurrentMode+0x2e>
 800346c:	e01a      	b.n	80034a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800346e:	78fb      	ldrb	r3, [r7, #3]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d115      	bne.n	80034a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003480:	2001      	movs	r0, #1
 8003482:	f7fd fcd5 	bl	8000e30 <HAL_Delay>
      ms++;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	3301      	adds	r3, #1
 800348a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f9ef 	bl	8003870 <USB_GetMode>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <USB_SetCurrentMode+0x84>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b31      	cmp	r3, #49	; 0x31
 800349c:	d9f0      	bls.n	8003480 <USB_SetCurrentMode+0x60>
 800349e:	e001      	b.n	80034a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e005      	b.n	80034b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2b32      	cmp	r3, #50	; 0x32
 80034a8:	d101      	bne.n	80034ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034b8:	b084      	sub	sp, #16
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b086      	sub	sp, #24
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80034c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80034ca:	2300      	movs	r3, #0
 80034cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80034d2:	2300      	movs	r3, #0
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	e009      	b.n	80034ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	3340      	adds	r3, #64	; 0x40
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	2200      	movs	r2, #0
 80034e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	3301      	adds	r3, #1
 80034ea:	613b      	str	r3, [r7, #16]
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b0e      	cmp	r3, #14
 80034f0:	d9f2      	bls.n	80034d8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80034f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d11c      	bne.n	8003532 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003506:	f043 0302 	orr.w	r3, r3, #2
 800350a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003510:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	601a      	str	r2, [r3, #0]
 8003530:	e005      	b.n	800353e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003536:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003544:	461a      	mov	r2, r3
 8003546:	2300      	movs	r3, #0
 8003548:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003550:	4619      	mov	r1, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003558:	461a      	mov	r2, r3
 800355a:	680b      	ldr	r3, [r1, #0]
 800355c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800355e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003560:	2b01      	cmp	r3, #1
 8003562:	d10c      	bne.n	800357e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003566:	2b00      	cmp	r3, #0
 8003568:	d104      	bne.n	8003574 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800356a:	2100      	movs	r1, #0
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f945 	bl	80037fc <USB_SetDevSpeed>
 8003572:	e008      	b.n	8003586 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003574:	2101      	movs	r1, #1
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f940 	bl	80037fc <USB_SetDevSpeed>
 800357c:	e003      	b.n	8003586 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800357e:	2103      	movs	r1, #3
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f93b 	bl	80037fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003586:	2110      	movs	r1, #16
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f8f3 	bl	8003774 <USB_FlushTxFifo>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f90f 	bl	80037bc <USB_FlushRxFifo>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ae:	461a      	mov	r2, r3
 80035b0:	2300      	movs	r3, #0
 80035b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ba:	461a      	mov	r2, r3
 80035bc:	2300      	movs	r3, #0
 80035be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c6:	461a      	mov	r2, r3
 80035c8:	2300      	movs	r3, #0
 80035ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80035cc:	2300      	movs	r3, #0
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	e043      	b.n	800365a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035e8:	d118      	bne.n	800361c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10a      	bne.n	8003606 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fc:	461a      	mov	r2, r3
 80035fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003602:	6013      	str	r3, [r2, #0]
 8003604:	e013      	b.n	800362e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4413      	add	r3, r2
 800360e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003612:	461a      	mov	r2, r3
 8003614:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e008      	b.n	800362e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003628:	461a      	mov	r2, r3
 800362a:	2300      	movs	r3, #0
 800362c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363a:	461a      	mov	r2, r3
 800363c:	2300      	movs	r3, #0
 800363e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364c:	461a      	mov	r2, r3
 800364e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003652:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	3301      	adds	r3, #1
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	429a      	cmp	r2, r3
 8003660:	d3b7      	bcc.n	80035d2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003662:	2300      	movs	r3, #0
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	e043      	b.n	80036f0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800367a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800367e:	d118      	bne.n	80036b2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10a      	bne.n	800369c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4413      	add	r3, r2
 800368e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003692:	461a      	mov	r2, r3
 8003694:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	e013      	b.n	80036c4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a8:	461a      	mov	r2, r3
 80036aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80036ae:	6013      	str	r3, [r2, #0]
 80036b0:	e008      	b.n	80036c4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	015a      	lsls	r2, r3, #5
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4413      	add	r3, r2
 80036ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036be:	461a      	mov	r2, r3
 80036c0:	2300      	movs	r3, #0
 80036c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d0:	461a      	mov	r2, r3
 80036d2:	2300      	movs	r3, #0
 80036d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e2:	461a      	mov	r2, r3
 80036e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	3301      	adds	r3, #1
 80036ee:	613b      	str	r3, [r7, #16]
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d3b7      	bcc.n	8003668 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003706:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800370a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003718:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371c:	2b00      	cmp	r3, #0
 800371e:	d105      	bne.n	800372c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	f043 0210 	orr.w	r2, r3, #16
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699a      	ldr	r2, [r3, #24]
 8003730:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <USB_DevInit+0x2b8>)
 8003732:	4313      	orrs	r3, r2
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d005      	beq.n	800374a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f043 0208 	orr.w	r2, r3, #8
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800374a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800374c:	2b01      	cmp	r3, #1
 800374e:	d107      	bne.n	8003760 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003758:	f043 0304 	orr.w	r3, r3, #4
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003760:	7dfb      	ldrb	r3, [r7, #23]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800376c:	b004      	add	sp, #16
 800376e:	4770      	bx	lr
 8003770:	803c3800 	.word	0x803c3800

08003774 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	019b      	lsls	r3, r3, #6
 8003786:	f043 0220 	orr.w	r2, r3, #32
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	3301      	adds	r3, #1
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	4a08      	ldr	r2, [pc, #32]	; (80037b8 <USB_FlushTxFifo+0x44>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e006      	b.n	80037ac <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f003 0320 	and.w	r3, r3, #32
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d0f1      	beq.n	800378e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3714      	adds	r7, #20
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	00030d40 	.word	0x00030d40

080037bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2210      	movs	r2, #16
 80037cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	3301      	adds	r3, #1
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	4a08      	ldr	r2, [pc, #32]	; (80037f8 <USB_FlushRxFifo+0x3c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e006      	b.n	80037ec <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b10      	cmp	r3, #16
 80037e8:	d0f1      	beq.n	80037ce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	00030d40 	.word	0x00030d40

080037fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	68f9      	ldr	r1, [r7, #12]
 8003818:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800381c:	4313      	orrs	r3, r2
 800381e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800382e:	b480      	push	{r7}
 8003830:	b085      	sub	sp, #20
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003848:	f023 0303 	bic.w	r3, r3, #3
 800384c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800385c:	f043 0302 	orr.w	r3, r3, #2
 8003860:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3714      	adds	r7, #20
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	695b      	ldr	r3, [r3, #20]
 800387c:	f003 0301 	and.w	r3, r3, #1
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	3301      	adds	r3, #1
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	4a13      	ldr	r2, [pc, #76]	; (80038ec <USB_CoreReset+0x60>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d901      	bls.n	80038a8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e01a      	b.n	80038de <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	daf3      	bge.n	8003898 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f043 0201 	orr.w	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3301      	adds	r3, #1
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	4a09      	ldr	r2, [pc, #36]	; (80038ec <USB_CoreReset+0x60>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d901      	bls.n	80038d0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e006      	b.n	80038de <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d0f1      	beq.n	80038c0 <USB_CoreReset+0x34>

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	00030d40 	.word	0x00030d40

080038f0 <__NVIC_SetPriority>:
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	6039      	str	r1, [r7, #0]
 80038fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003900:	2b00      	cmp	r3, #0
 8003902:	db0a      	blt.n	800391a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	b2da      	uxtb	r2, r3
 8003908:	490c      	ldr	r1, [pc, #48]	; (800393c <__NVIC_SetPriority+0x4c>)
 800390a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390e:	0112      	lsls	r2, r2, #4
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	440b      	add	r3, r1
 8003914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003918:	e00a      	b.n	8003930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	b2da      	uxtb	r2, r3
 800391e:	4908      	ldr	r1, [pc, #32]	; (8003940 <__NVIC_SetPriority+0x50>)
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	3b04      	subs	r3, #4
 8003928:	0112      	lsls	r2, r2, #4
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	440b      	add	r3, r1
 800392e:	761a      	strb	r2, [r3, #24]
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	e000e100 	.word	0xe000e100
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003948:	4b05      	ldr	r3, [pc, #20]	; (8003960 <SysTick_Handler+0x1c>)
 800394a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800394c:	f001 fd28 	bl	80053a0 <xTaskGetSchedulerState>
 8003950:	4603      	mov	r3, r0
 8003952:	2b01      	cmp	r3, #1
 8003954:	d001      	beq.n	800395a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003956:	f002 fb0f 	bl	8005f78 <xPortSysTickHandler>
  }
}
 800395a:	bf00      	nop
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	e000e010 	.word	0xe000e010

08003964 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003968:	2100      	movs	r1, #0
 800396a:	f06f 0004 	mvn.w	r0, #4
 800396e:	f7ff ffbf 	bl	80038f0 <__NVIC_SetPriority>
#endif
}
 8003972:	bf00      	nop
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800397e:	f3ef 8305 	mrs	r3, IPSR
 8003982:	603b      	str	r3, [r7, #0]
  return(result);
 8003984:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800398a:	f06f 0305 	mvn.w	r3, #5
 800398e:	607b      	str	r3, [r7, #4]
 8003990:	e00c      	b.n	80039ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003992:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <osKernelInitialize+0x44>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d105      	bne.n	80039a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800399a:	4b08      	ldr	r3, [pc, #32]	; (80039bc <osKernelInitialize+0x44>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	e002      	b.n	80039ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80039a6:	f04f 33ff 	mov.w	r3, #4294967295
 80039aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039ac:	687b      	ldr	r3, [r7, #4]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	20000094 	.word	0x20000094

080039c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039c6:	f3ef 8305 	mrs	r3, IPSR
 80039ca:	603b      	str	r3, [r7, #0]
  return(result);
 80039cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <osKernelStart+0x1a>
    stat = osErrorISR;
 80039d2:	f06f 0305 	mvn.w	r3, #5
 80039d6:	607b      	str	r3, [r7, #4]
 80039d8:	e010      	b.n	80039fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80039da:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <osKernelStart+0x48>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d109      	bne.n	80039f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80039e2:	f7ff ffbf 	bl	8003964 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80039e6:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <osKernelStart+0x48>)
 80039e8:	2202      	movs	r2, #2
 80039ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80039ec:	f001 f87c 	bl	8004ae8 <vTaskStartScheduler>
      stat = osOK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	607b      	str	r3, [r7, #4]
 80039f4:	e002      	b.n	80039fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80039f6:	f04f 33ff 	mov.w	r3, #4294967295
 80039fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039fc:	687b      	ldr	r3, [r7, #4]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000094 	.word	0x20000094

08003a0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b08e      	sub	sp, #56	; 0x38
 8003a10:	af04      	add	r7, sp, #16
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a1c:	f3ef 8305 	mrs	r3, IPSR
 8003a20:	617b      	str	r3, [r7, #20]
  return(result);
 8003a22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d17e      	bne.n	8003b26 <osThreadNew+0x11a>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d07b      	beq.n	8003b26 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003a2e:	2380      	movs	r3, #128	; 0x80
 8003a30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003a32:	2318      	movs	r3, #24
 8003a34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d045      	beq.n	8003ad2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <osThreadNew+0x48>
        name = attr->name;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <osThreadNew+0x6e>
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2b38      	cmp	r3, #56	; 0x38
 8003a6c:	d805      	bhi.n	8003a7a <osThreadNew+0x6e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <osThreadNew+0x72>
        return (NULL);
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e054      	b.n	8003b28 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	089b      	lsrs	r3, r3, #2
 8003a8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00e      	beq.n	8003ab4 <osThreadNew+0xa8>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	2bbb      	cmp	r3, #187	; 0xbb
 8003a9c:	d90a      	bls.n	8003ab4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d006      	beq.n	8003ab4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <osThreadNew+0xa8>
        mem = 1;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	61bb      	str	r3, [r7, #24]
 8003ab2:	e010      	b.n	8003ad6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d10c      	bne.n	8003ad6 <osThreadNew+0xca>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d108      	bne.n	8003ad6 <osThreadNew+0xca>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d104      	bne.n	8003ad6 <osThreadNew+0xca>
          mem = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	61bb      	str	r3, [r7, #24]
 8003ad0:	e001      	b.n	8003ad6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d110      	bne.n	8003afe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ae4:	9202      	str	r2, [sp, #8]
 8003ae6:	9301      	str	r3, [sp, #4]
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	6a3a      	ldr	r2, [r7, #32]
 8003af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 fe0c 	bl	8004710 <xTaskCreateStatic>
 8003af8:	4603      	mov	r3, r0
 8003afa:	613b      	str	r3, [r7, #16]
 8003afc:	e013      	b.n	8003b26 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d110      	bne.n	8003b26 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	f107 0310 	add.w	r3, r7, #16
 8003b0c:	9301      	str	r3, [sp, #4]
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 fe57 	bl	80047ca <xTaskCreate>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d001      	beq.n	8003b26 <osThreadNew+0x11a>
            hTask = NULL;
 8003b22:	2300      	movs	r3, #0
 8003b24:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003b26:	693b      	ldr	r3, [r7, #16]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3728      	adds	r7, #40	; 0x28
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b38:	f3ef 8305 	mrs	r3, IPSR
 8003b3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <osDelay+0x1c>
    stat = osErrorISR;
 8003b44:	f06f 0305 	mvn.w	r3, #5
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	e007      	b.n	8003b5c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 ff92 	bl	8004a80 <vTaskDelay>
    }
  }

  return (stat);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	4a07      	ldr	r2, [pc, #28]	; (8003b94 <vApplicationGetIdleTaskMemory+0x2c>)
 8003b78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4a06      	ldr	r2, [pc, #24]	; (8003b98 <vApplicationGetIdleTaskMemory+0x30>)
 8003b7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2280      	movs	r2, #128	; 0x80
 8003b84:	601a      	str	r2, [r3, #0]
}
 8003b86:	bf00      	nop
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	20000098 	.word	0x20000098
 8003b98:	20000154 	.word	0x20000154

08003b9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <vApplicationGetTimerTaskMemory+0x2c>)
 8003bac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	4a06      	ldr	r2, [pc, #24]	; (8003bcc <vApplicationGetTimerTaskMemory+0x30>)
 8003bb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bba:	601a      	str	r2, [r3, #0]
}
 8003bbc:	bf00      	nop
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	20000354 	.word	0x20000354
 8003bcc:	20000410 	.word	0x20000410

08003bd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f103 0208 	add.w	r2, r3, #8
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f04f 32ff 	mov.w	r2, #4294967295
 8003be8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f103 0208 	add.w	r2, r3, #8
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f103 0208 	add.w	r2, r3, #8
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr

08003c2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	b085      	sub	sp, #20
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
 8003c32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	601a      	str	r2, [r3, #0]
}
 8003c66:	bf00      	nop
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c72:	b480      	push	{r7}
 8003c74:	b085      	sub	sp, #20
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c88:	d103      	bne.n	8003c92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	e00c      	b.n	8003cac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3308      	adds	r3, #8
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	e002      	b.n	8003ca0 <vListInsert+0x2e>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d2f6      	bcs.n	8003c9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	601a      	str	r2, [r3, #0]
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6892      	ldr	r2, [r2, #8]
 8003cfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6852      	ldr	r2, [r2, #4]
 8003d04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d103      	bne.n	8003d18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	1e5a      	subs	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10a      	bne.n	8003d62 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d5e:	bf00      	nop
 8003d60:	e7fe      	b.n	8003d60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d62:	f002 f877 	bl	8005e54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6e:	68f9      	ldr	r1, [r7, #12]
 8003d70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d72:	fb01 f303 	mul.w	r3, r1, r3
 8003d76:	441a      	add	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d92:	3b01      	subs	r3, #1
 8003d94:	68f9      	ldr	r1, [r7, #12]
 8003d96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d98:	fb01 f303 	mul.w	r3, r1, r3
 8003d9c:	441a      	add	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	22ff      	movs	r2, #255	; 0xff
 8003da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	22ff      	movs	r2, #255	; 0xff
 8003dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d114      	bne.n	8003de2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d01a      	beq.n	8003df6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	3310      	adds	r3, #16
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f001 f929 	bl	800501c <xTaskRemoveFromEventList>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d012      	beq.n	8003df6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003dd0:	4b0c      	ldr	r3, [pc, #48]	; (8003e04 <xQueueGenericReset+0xcc>)
 8003dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	e009      	b.n	8003df6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	3310      	adds	r3, #16
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff fef2 	bl	8003bd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	3324      	adds	r3, #36	; 0x24
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff feed 	bl	8003bd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003df6:	f002 f85d 	bl	8005eb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003dfa:	2301      	movs	r3, #1
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	e000ed04 	.word	0xe000ed04

08003e08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08e      	sub	sp, #56	; 0x38
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10a      	bne.n	8003e32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e2e:	bf00      	nop
 8003e30:	e7fe      	b.n	8003e30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3c:	f383 8811 	msr	BASEPRI, r3
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e4a:	bf00      	nop
 8003e4c:	e7fe      	b.n	8003e4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <xQueueGenericCreateStatic+0x52>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <xQueueGenericCreateStatic+0x56>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <xQueueGenericCreateStatic+0x58>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	623b      	str	r3, [r7, #32]
}
 8003e76:	bf00      	nop
 8003e78:	e7fe      	b.n	8003e78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d102      	bne.n	8003e86 <xQueueGenericCreateStatic+0x7e>
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <xQueueGenericCreateStatic+0x82>
 8003e86:	2301      	movs	r3, #1
 8003e88:	e000      	b.n	8003e8c <xQueueGenericCreateStatic+0x84>
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10a      	bne.n	8003ea6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	61fb      	str	r3, [r7, #28]
}
 8003ea2:	bf00      	nop
 8003ea4:	e7fe      	b.n	8003ea4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003ea6:	2350      	movs	r3, #80	; 0x50
 8003ea8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2b50      	cmp	r3, #80	; 0x50
 8003eae:	d00a      	beq.n	8003ec6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	61bb      	str	r3, [r7, #24]
}
 8003ec2:	bf00      	nop
 8003ec4:	e7fe      	b.n	8003ec4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003ec6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00d      	beq.n	8003eee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003eda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	68b9      	ldr	r1, [r7, #8]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f805 	bl	8003ef8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3730      	adds	r7, #48	; 0x30
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d103      	bne.n	8003f14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	e002      	b.n	8003f1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f26:	2101      	movs	r1, #1
 8003f28:	69b8      	ldr	r0, [r7, #24]
 8003f2a:	f7ff ff05 	bl	8003d38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	78fa      	ldrb	r2, [r7, #3]
 8003f32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f36:	bf00      	nop
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08e      	sub	sp, #56	; 0x38
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10a      	bne.n	8003f72 <xQueueGenericSend+0x32>
	__asm volatile
 8003f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f6e:	bf00      	nop
 8003f70:	e7fe      	b.n	8003f70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d103      	bne.n	8003f80 <xQueueGenericSend+0x40>
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <xQueueGenericSend+0x44>
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <xQueueGenericSend+0x46>
 8003f84:	2300      	movs	r3, #0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10a      	bne.n	8003fa0 <xQueueGenericSend+0x60>
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d103      	bne.n	8003fae <xQueueGenericSend+0x6e>
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <xQueueGenericSend+0x72>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <xQueueGenericSend+0x74>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10a      	bne.n	8003fce <xQueueGenericSend+0x8e>
	__asm volatile
 8003fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbc:	f383 8811 	msr	BASEPRI, r3
 8003fc0:	f3bf 8f6f 	isb	sy
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	623b      	str	r3, [r7, #32]
}
 8003fca:	bf00      	nop
 8003fcc:	e7fe      	b.n	8003fcc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fce:	f001 f9e7 	bl	80053a0 <xTaskGetSchedulerState>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d102      	bne.n	8003fde <xQueueGenericSend+0x9e>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <xQueueGenericSend+0xa2>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <xQueueGenericSend+0xa4>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10a      	bne.n	8003ffe <xQueueGenericSend+0xbe>
	__asm volatile
 8003fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fec:	f383 8811 	msr	BASEPRI, r3
 8003ff0:	f3bf 8f6f 	isb	sy
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	61fb      	str	r3, [r7, #28]
}
 8003ffa:	bf00      	nop
 8003ffc:	e7fe      	b.n	8003ffc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ffe:	f001 ff29 	bl	8005e54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400a:	429a      	cmp	r2, r3
 800400c:	d302      	bcc.n	8004014 <xQueueGenericSend+0xd4>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d129      	bne.n	8004068 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	68b9      	ldr	r1, [r7, #8]
 8004018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800401a:	f000 fa0b 	bl	8004434 <prvCopyDataToQueue>
 800401e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	2b00      	cmp	r3, #0
 8004026:	d010      	beq.n	800404a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402a:	3324      	adds	r3, #36	; 0x24
 800402c:	4618      	mov	r0, r3
 800402e:	f000 fff5 	bl	800501c <xTaskRemoveFromEventList>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d013      	beq.n	8004060 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004038:	4b3f      	ldr	r3, [pc, #252]	; (8004138 <xQueueGenericSend+0x1f8>)
 800403a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	e00a      	b.n	8004060 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404c:	2b00      	cmp	r3, #0
 800404e:	d007      	beq.n	8004060 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004050:	4b39      	ldr	r3, [pc, #228]	; (8004138 <xQueueGenericSend+0x1f8>)
 8004052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	f3bf 8f4f 	dsb	sy
 800405c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004060:	f001 ff28 	bl	8005eb4 <vPortExitCritical>
				return pdPASS;
 8004064:	2301      	movs	r3, #1
 8004066:	e063      	b.n	8004130 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d103      	bne.n	8004076 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800406e:	f001 ff21 	bl	8005eb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004072:	2300      	movs	r3, #0
 8004074:	e05c      	b.n	8004130 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004078:	2b00      	cmp	r3, #0
 800407a:	d106      	bne.n	800408a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800407c:	f107 0314 	add.w	r3, r7, #20
 8004080:	4618      	mov	r0, r3
 8004082:	f001 f82f 	bl	80050e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004086:	2301      	movs	r3, #1
 8004088:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800408a:	f001 ff13 	bl	8005eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800408e:	f000 fd9b 	bl	8004bc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004092:	f001 fedf 	bl	8005e54 <vPortEnterCritical>
 8004096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004098:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800409c:	b25b      	sxtb	r3, r3
 800409e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a2:	d103      	bne.n	80040ac <xQueueGenericSend+0x16c>
 80040a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040b2:	b25b      	sxtb	r3, r3
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d103      	bne.n	80040c2 <xQueueGenericSend+0x182>
 80040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040c2:	f001 fef7 	bl	8005eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040c6:	1d3a      	adds	r2, r7, #4
 80040c8:	f107 0314 	add.w	r3, r7, #20
 80040cc:	4611      	mov	r1, r2
 80040ce:	4618      	mov	r0, r3
 80040d0:	f001 f81e 	bl	8005110 <xTaskCheckForTimeOut>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d124      	bne.n	8004124 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040dc:	f000 faa2 	bl	8004624 <prvIsQueueFull>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d018      	beq.n	8004118 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	3310      	adds	r3, #16
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	4611      	mov	r1, r2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 ff44 	bl	8004f7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040f6:	f000 fa2d 	bl	8004554 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040fa:	f000 fd73 	bl	8004be4 <xTaskResumeAll>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	f47f af7c 	bne.w	8003ffe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004106:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <xQueueGenericSend+0x1f8>)
 8004108:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800410c:	601a      	str	r2, [r3, #0]
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	e772      	b.n	8003ffe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004118:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800411a:	f000 fa1b 	bl	8004554 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800411e:	f000 fd61 	bl	8004be4 <xTaskResumeAll>
 8004122:	e76c      	b.n	8003ffe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004124:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004126:	f000 fa15 	bl	8004554 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800412a:	f000 fd5b 	bl	8004be4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800412e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004130:	4618      	mov	r0, r3
 8004132:	3738      	adds	r7, #56	; 0x38
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	e000ed04 	.word	0xe000ed04

0800413c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b090      	sub	sp, #64	; 0x40
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800414e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10a      	bne.n	800416a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004166:	bf00      	nop
 8004168:	e7fe      	b.n	8004168 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d103      	bne.n	8004178 <xQueueGenericSendFromISR+0x3c>
 8004170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	2b00      	cmp	r3, #0
 8004176:	d101      	bne.n	800417c <xQueueGenericSendFromISR+0x40>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <xQueueGenericSendFromISR+0x42>
 800417c:	2300      	movs	r3, #0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10a      	bne.n	8004198 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004194:	bf00      	nop
 8004196:	e7fe      	b.n	8004196 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d103      	bne.n	80041a6 <xQueueGenericSendFromISR+0x6a>
 800419e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <xQueueGenericSendFromISR+0x6e>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <xQueueGenericSendFromISR+0x70>
 80041aa:	2300      	movs	r3, #0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10a      	bne.n	80041c6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	623b      	str	r3, [r7, #32]
}
 80041c2:	bf00      	nop
 80041c4:	e7fe      	b.n	80041c4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041c6:	f001 ff27 	bl	8006018 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80041ca:	f3ef 8211 	mrs	r2, BASEPRI
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	61fa      	str	r2, [r7, #28]
 80041e0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80041e2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041e4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d302      	bcc.n	80041f8 <xQueueGenericSendFromISR+0xbc>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d12f      	bne.n	8004258 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004206:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800420e:	f000 f911 	bl	8004434 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004212:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421a:	d112      	bne.n	8004242 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800421c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	2b00      	cmp	r3, #0
 8004222:	d016      	beq.n	8004252 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004226:	3324      	adds	r3, #36	; 0x24
 8004228:	4618      	mov	r0, r3
 800422a:	f000 fef7 	bl	800501c <xTaskRemoveFromEventList>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00e      	beq.n	8004252 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00b      	beq.n	8004252 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	e007      	b.n	8004252 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004242:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004246:	3301      	adds	r3, #1
 8004248:	b2db      	uxtb	r3, r3
 800424a:	b25a      	sxtb	r2, r3
 800424c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004252:	2301      	movs	r3, #1
 8004254:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004256:	e001      	b.n	800425c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004258:	2300      	movs	r3, #0
 800425a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800425c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800425e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004266:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800426a:	4618      	mov	r0, r3
 800426c:	3740      	adds	r7, #64	; 0x40
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08c      	sub	sp, #48	; 0x30
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004280:	2300      	movs	r3, #0
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10a      	bne.n	80042a4 <xQueueReceive+0x30>
	__asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	623b      	str	r3, [r7, #32]
}
 80042a0:	bf00      	nop
 80042a2:	e7fe      	b.n	80042a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d103      	bne.n	80042b2 <xQueueReceive+0x3e>
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <xQueueReceive+0x42>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e000      	b.n	80042b8 <xQueueReceive+0x44>
 80042b6:	2300      	movs	r3, #0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <xQueueReceive+0x5e>
	__asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	61fb      	str	r3, [r7, #28]
}
 80042ce:	bf00      	nop
 80042d0:	e7fe      	b.n	80042d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042d2:	f001 f865 	bl	80053a0 <xTaskGetSchedulerState>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d102      	bne.n	80042e2 <xQueueReceive+0x6e>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <xQueueReceive+0x72>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e000      	b.n	80042e8 <xQueueReceive+0x74>
 80042e6:	2300      	movs	r3, #0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10a      	bne.n	8004302 <xQueueReceive+0x8e>
	__asm volatile
 80042ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	61bb      	str	r3, [r7, #24]
}
 80042fe:	bf00      	nop
 8004300:	e7fe      	b.n	8004300 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004302:	f001 fda7 	bl	8005e54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430e:	2b00      	cmp	r3, #0
 8004310:	d01f      	beq.n	8004352 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004316:	f000 f8f7 	bl	8004508 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	1e5a      	subs	r2, r3, #1
 800431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004320:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00f      	beq.n	800434a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800432a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432c:	3310      	adds	r3, #16
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fe74 	bl	800501c <xTaskRemoveFromEventList>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d007      	beq.n	800434a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800433a:	4b3d      	ldr	r3, [pc, #244]	; (8004430 <xQueueReceive+0x1bc>)
 800433c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800434a:	f001 fdb3 	bl	8005eb4 <vPortExitCritical>
				return pdPASS;
 800434e:	2301      	movs	r3, #1
 8004350:	e069      	b.n	8004426 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d103      	bne.n	8004360 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004358:	f001 fdac 	bl	8005eb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800435c:	2300      	movs	r3, #0
 800435e:	e062      	b.n	8004426 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004366:	f107 0310 	add.w	r3, r7, #16
 800436a:	4618      	mov	r0, r3
 800436c:	f000 feba 	bl	80050e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004370:	2301      	movs	r3, #1
 8004372:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004374:	f001 fd9e 	bl	8005eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004378:	f000 fc26 	bl	8004bc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800437c:	f001 fd6a 	bl	8005e54 <vPortEnterCritical>
 8004380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004382:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004386:	b25b      	sxtb	r3, r3
 8004388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438c:	d103      	bne.n	8004396 <xQueueReceive+0x122>
 800438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800439c:	b25b      	sxtb	r3, r3
 800439e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a2:	d103      	bne.n	80043ac <xQueueReceive+0x138>
 80043a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043ac:	f001 fd82 	bl	8005eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043b0:	1d3a      	adds	r2, r7, #4
 80043b2:	f107 0310 	add.w	r3, r7, #16
 80043b6:	4611      	mov	r1, r2
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 fea9 	bl	8005110 <xTaskCheckForTimeOut>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d123      	bne.n	800440c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043c6:	f000 f917 	bl	80045f8 <prvIsQueueEmpty>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d017      	beq.n	8004400 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	3324      	adds	r3, #36	; 0x24
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	4611      	mov	r1, r2
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fdcf 	bl	8004f7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043e0:	f000 f8b8 	bl	8004554 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043e4:	f000 fbfe 	bl	8004be4 <xTaskResumeAll>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d189      	bne.n	8004302 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80043ee:	4b10      	ldr	r3, [pc, #64]	; (8004430 <xQueueReceive+0x1bc>)
 80043f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	e780      	b.n	8004302 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004402:	f000 f8a7 	bl	8004554 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004406:	f000 fbed 	bl	8004be4 <xTaskResumeAll>
 800440a:	e77a      	b.n	8004302 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800440c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800440e:	f000 f8a1 	bl	8004554 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004412:	f000 fbe7 	bl	8004be4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004418:	f000 f8ee 	bl	80045f8 <prvIsQueueEmpty>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	f43f af6f 	beq.w	8004302 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004424:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004426:	4618      	mov	r0, r3
 8004428:	3730      	adds	r7, #48	; 0x30
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	e000ed04 	.word	0xe000ed04

08004434 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004440:	2300      	movs	r3, #0
 8004442:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10d      	bne.n	800446e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d14d      	bne.n	80044f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	4618      	mov	r0, r3
 8004460:	f000 ffbc 	bl	80053dc <xTaskPriorityDisinherit>
 8004464:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	e043      	b.n	80044f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d119      	bne.n	80044a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6858      	ldr	r0, [r3, #4]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	461a      	mov	r2, r3
 800447e:	68b9      	ldr	r1, [r7, #8]
 8004480:	f002 f828 	bl	80064d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	441a      	add	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	429a      	cmp	r2, r3
 800449c:	d32b      	bcc.n	80044f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	605a      	str	r2, [r3, #4]
 80044a6:	e026      	b.n	80044f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	68d8      	ldr	r0, [r3, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	461a      	mov	r2, r3
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	f002 f80e 	bl	80064d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	68da      	ldr	r2, [r3, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	425b      	negs	r3, r3
 80044c2:	441a      	add	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d207      	bcs.n	80044e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	425b      	negs	r3, r3
 80044de:	441a      	add	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d105      	bne.n	80044f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80044fe:	697b      	ldr	r3, [r7, #20]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3718      	adds	r7, #24
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004516:	2b00      	cmp	r3, #0
 8004518:	d018      	beq.n	800454c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68da      	ldr	r2, [r3, #12]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	441a      	add	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	429a      	cmp	r2, r3
 8004532:	d303      	bcc.n	800453c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68d9      	ldr	r1, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	461a      	mov	r2, r3
 8004546:	6838      	ldr	r0, [r7, #0]
 8004548:	f001 ffc4 	bl	80064d4 <memcpy>
	}
}
 800454c:	bf00      	nop
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800455c:	f001 fc7a 	bl	8005e54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004566:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004568:	e011      	b.n	800458e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	2b00      	cmp	r3, #0
 8004570:	d012      	beq.n	8004598 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3324      	adds	r3, #36	; 0x24
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fd50 	bl	800501c <xTaskRemoveFromEventList>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004582:	f000 fe27 	bl	80051d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	3b01      	subs	r3, #1
 800458a:	b2db      	uxtb	r3, r3
 800458c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800458e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004592:	2b00      	cmp	r3, #0
 8004594:	dce9      	bgt.n	800456a <prvUnlockQueue+0x16>
 8004596:	e000      	b.n	800459a <prvUnlockQueue+0x46>
					break;
 8004598:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	22ff      	movs	r2, #255	; 0xff
 800459e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80045a2:	f001 fc87 	bl	8005eb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80045a6:	f001 fc55 	bl	8005e54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045b2:	e011      	b.n	80045d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d012      	beq.n	80045e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3310      	adds	r3, #16
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 fd2b 	bl	800501c <xTaskRemoveFromEventList>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80045cc:	f000 fe02 	bl	80051d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80045d0:	7bbb      	ldrb	r3, [r7, #14]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	dce9      	bgt.n	80045b4 <prvUnlockQueue+0x60>
 80045e0:	e000      	b.n	80045e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	22ff      	movs	r2, #255	; 0xff
 80045e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80045ec:	f001 fc62 	bl	8005eb4 <vPortExitCritical>
}
 80045f0:	bf00      	nop
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004600:	f001 fc28 	bl	8005e54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004608:	2b00      	cmp	r3, #0
 800460a:	d102      	bne.n	8004612 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800460c:	2301      	movs	r3, #1
 800460e:	60fb      	str	r3, [r7, #12]
 8004610:	e001      	b.n	8004616 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004616:	f001 fc4d 	bl	8005eb4 <vPortExitCritical>

	return xReturn;
 800461a:	68fb      	ldr	r3, [r7, #12]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800462c:	f001 fc12 	bl	8005e54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004638:	429a      	cmp	r2, r3
 800463a:	d102      	bne.n	8004642 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800463c:	2301      	movs	r3, #1
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	e001      	b.n	8004646 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004642:	2300      	movs	r3, #0
 8004644:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004646:	f001 fc35 	bl	8005eb4 <vPortExitCritical>

	return xReturn;
 800464a:	68fb      	ldr	r3, [r7, #12]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	e014      	b.n	800468e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004664:	4a0f      	ldr	r2, [pc, #60]	; (80046a4 <vQueueAddToRegistry+0x50>)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10b      	bne.n	8004688 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004670:	490c      	ldr	r1, [pc, #48]	; (80046a4 <vQueueAddToRegistry+0x50>)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	683a      	ldr	r2, [r7, #0]
 8004676:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800467a:	4a0a      	ldr	r2, [pc, #40]	; (80046a4 <vQueueAddToRegistry+0x50>)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	4413      	add	r3, r2
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004686:	e006      	b.n	8004696 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3301      	adds	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b07      	cmp	r3, #7
 8004692:	d9e7      	bls.n	8004664 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004694:	bf00      	nop
 8004696:	bf00      	nop
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	20004f4c 	.word	0x20004f4c

080046a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80046b8:	f001 fbcc 	bl	8005e54 <vPortEnterCritical>
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046c2:	b25b      	sxtb	r3, r3
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d103      	bne.n	80046d2 <vQueueWaitForMessageRestricted+0x2a>
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046d8:	b25b      	sxtb	r3, r3
 80046da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046de:	d103      	bne.n	80046e8 <vQueueWaitForMessageRestricted+0x40>
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046e8:	f001 fbe4 	bl	8005eb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d106      	bne.n	8004702 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	3324      	adds	r3, #36	; 0x24
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	68b9      	ldr	r1, [r7, #8]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fc61 	bl	8004fc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004702:	6978      	ldr	r0, [r7, #20]
 8004704:	f7ff ff26 	bl	8004554 <prvUnlockQueue>
	}
 8004708:	bf00      	nop
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08e      	sub	sp, #56	; 0x38
 8004714:	af04      	add	r7, sp, #16
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
 800471c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800471e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10a      	bne.n	800473a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	623b      	str	r3, [r7, #32]
}
 8004736:	bf00      	nop
 8004738:	e7fe      	b.n	8004738 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800473a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10a      	bne.n	8004756 <xTaskCreateStatic+0x46>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	61fb      	str	r3, [r7, #28]
}
 8004752:	bf00      	nop
 8004754:	e7fe      	b.n	8004754 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004756:	23bc      	movs	r3, #188	; 0xbc
 8004758:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	2bbc      	cmp	r3, #188	; 0xbc
 800475e:	d00a      	beq.n	8004776 <xTaskCreateStatic+0x66>
	__asm volatile
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	61bb      	str	r3, [r7, #24]
}
 8004772:	bf00      	nop
 8004774:	e7fe      	b.n	8004774 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004776:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477a:	2b00      	cmp	r3, #0
 800477c:	d01e      	beq.n	80047bc <xTaskCreateStatic+0xac>
 800477e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01b      	beq.n	80047bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800478c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	2202      	movs	r2, #2
 8004792:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004796:	2300      	movs	r3, #0
 8004798:	9303      	str	r3, [sp, #12]
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	9302      	str	r3, [sp, #8]
 800479e:	f107 0314 	add.w	r3, r7, #20
 80047a2:	9301      	str	r3, [sp, #4]
 80047a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a6:	9300      	str	r3, [sp, #0]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	68b9      	ldr	r1, [r7, #8]
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f000 f850 	bl	8004854 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047b6:	f000 f8f3 	bl	80049a0 <prvAddNewTaskToReadyList>
 80047ba:	e001      	b.n	80047c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80047c0:	697b      	ldr	r3, [r7, #20]
	}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3728      	adds	r7, #40	; 0x28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b08c      	sub	sp, #48	; 0x30
 80047ce:	af04      	add	r7, sp, #16
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	603b      	str	r3, [r7, #0]
 80047d6:	4613      	mov	r3, r2
 80047d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4618      	mov	r0, r3
 80047e0:	f001 fc5a 	bl	8006098 <pvPortMalloc>
 80047e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00e      	beq.n	800480a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047ec:	20bc      	movs	r0, #188	; 0xbc
 80047ee:	f001 fc53 	bl	8006098 <pvPortMalloc>
 80047f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d003      	beq.n	8004802 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30
 8004800:	e005      	b.n	800480e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004802:	6978      	ldr	r0, [r7, #20]
 8004804:	f001 fd14 	bl	8006230 <vPortFree>
 8004808:	e001      	b.n	800480e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d017      	beq.n	8004844 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800481c:	88fa      	ldrh	r2, [r7, #6]
 800481e:	2300      	movs	r3, #0
 8004820:	9303      	str	r3, [sp, #12]
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	9302      	str	r3, [sp, #8]
 8004826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004828:	9301      	str	r3, [sp, #4]
 800482a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68b9      	ldr	r1, [r7, #8]
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f000 f80e 	bl	8004854 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004838:	69f8      	ldr	r0, [r7, #28]
 800483a:	f000 f8b1 	bl	80049a0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800483e:	2301      	movs	r3, #1
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	e002      	b.n	800484a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004844:	f04f 33ff 	mov.w	r3, #4294967295
 8004848:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800484a:	69bb      	ldr	r3, [r7, #24]
	}
 800484c:	4618      	mov	r0, r3
 800484e:	3720      	adds	r7, #32
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004864:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	461a      	mov	r2, r3
 800486c:	21a5      	movs	r1, #165	; 0xa5
 800486e:	f001 fe3f 	bl	80064f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800487c:	3b01      	subs	r3, #1
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	f023 0307 	bic.w	r3, r3, #7
 800488a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	f003 0307 	and.w	r3, r3, #7
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8004896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	617b      	str	r3, [r7, #20]
}
 80048a8:	bf00      	nop
 80048aa:	e7fe      	b.n	80048aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d01f      	beq.n	80048f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
 80048b6:	e012      	b.n	80048de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	4413      	add	r3, r2
 80048be:	7819      	ldrb	r1, [r3, #0]
 80048c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	4413      	add	r3, r2
 80048c6:	3334      	adds	r3, #52	; 0x34
 80048c8:	460a      	mov	r2, r1
 80048ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	69fb      	ldr	r3, [r7, #28]
 80048d0:	4413      	add	r3, r2
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d006      	beq.n	80048e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	3301      	adds	r3, #1
 80048dc:	61fb      	str	r3, [r7, #28]
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	2b0f      	cmp	r3, #15
 80048e2:	d9e9      	bls.n	80048b8 <prvInitialiseNewTask+0x64>
 80048e4:	e000      	b.n	80048e8 <prvInitialiseNewTask+0x94>
			{
				break;
 80048e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048f0:	e003      	b.n	80048fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	2b37      	cmp	r3, #55	; 0x37
 80048fe:	d901      	bls.n	8004904 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004900:	2337      	movs	r3, #55	; 0x37
 8004902:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004908:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800490e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004912:	2200      	movs	r2, #0
 8004914:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	3304      	adds	r3, #4
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff f978 	bl	8003c10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004922:	3318      	adds	r3, #24
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff f973 	bl	8003c10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800492a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800492e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004932:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004938:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800493a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800493e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004942:	2200      	movs	r2, #0
 8004944:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	2200      	movs	r2, #0
 800494c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	3354      	adds	r3, #84	; 0x54
 8004954:	2260      	movs	r2, #96	; 0x60
 8004956:	2100      	movs	r1, #0
 8004958:	4618      	mov	r0, r3
 800495a:	f001 fdc9 	bl	80064f0 <memset>
 800495e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004960:	4a0c      	ldr	r2, [pc, #48]	; (8004994 <prvInitialiseNewTask+0x140>)
 8004962:	659a      	str	r2, [r3, #88]	; 0x58
 8004964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004966:	4a0c      	ldr	r2, [pc, #48]	; (8004998 <prvInitialiseNewTask+0x144>)
 8004968:	65da      	str	r2, [r3, #92]	; 0x5c
 800496a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496c:	4a0b      	ldr	r2, [pc, #44]	; (800499c <prvInitialiseNewTask+0x148>)
 800496e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	68f9      	ldr	r1, [r7, #12]
 8004974:	69b8      	ldr	r0, [r7, #24]
 8004976:	f001 f941 	bl	8005bfc <pxPortInitialiseStack>
 800497a:	4602      	mov	r2, r0
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800498a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800498c:	bf00      	nop
 800498e:	3720      	adds	r7, #32
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	08006ec0 	.word	0x08006ec0
 8004998:	08006ee0 	.word	0x08006ee0
 800499c:	08006ea0 	.word	0x08006ea0

080049a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80049a8:	f001 fa54 	bl	8005e54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80049ac:	4b2d      	ldr	r3, [pc, #180]	; (8004a64 <prvAddNewTaskToReadyList+0xc4>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3301      	adds	r3, #1
 80049b2:	4a2c      	ldr	r2, [pc, #176]	; (8004a64 <prvAddNewTaskToReadyList+0xc4>)
 80049b4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80049b6:	4b2c      	ldr	r3, [pc, #176]	; (8004a68 <prvAddNewTaskToReadyList+0xc8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d109      	bne.n	80049d2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80049be:	4a2a      	ldr	r2, [pc, #168]	; (8004a68 <prvAddNewTaskToReadyList+0xc8>)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80049c4:	4b27      	ldr	r3, [pc, #156]	; (8004a64 <prvAddNewTaskToReadyList+0xc4>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d110      	bne.n	80049ee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049cc:	f000 fc26 	bl	800521c <prvInitialiseTaskLists>
 80049d0:	e00d      	b.n	80049ee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049d2:	4b26      	ldr	r3, [pc, #152]	; (8004a6c <prvAddNewTaskToReadyList+0xcc>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d109      	bne.n	80049ee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049da:	4b23      	ldr	r3, [pc, #140]	; (8004a68 <prvAddNewTaskToReadyList+0xc8>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d802      	bhi.n	80049ee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049e8:	4a1f      	ldr	r2, [pc, #124]	; (8004a68 <prvAddNewTaskToReadyList+0xc8>)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049ee:	4b20      	ldr	r3, [pc, #128]	; (8004a70 <prvAddNewTaskToReadyList+0xd0>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3301      	adds	r3, #1
 80049f4:	4a1e      	ldr	r2, [pc, #120]	; (8004a70 <prvAddNewTaskToReadyList+0xd0>)
 80049f6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049f8:	4b1d      	ldr	r3, [pc, #116]	; (8004a70 <prvAddNewTaskToReadyList+0xd0>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a04:	4b1b      	ldr	r3, [pc, #108]	; (8004a74 <prvAddNewTaskToReadyList+0xd4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d903      	bls.n	8004a14 <prvAddNewTaskToReadyList+0x74>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a10:	4a18      	ldr	r2, [pc, #96]	; (8004a74 <prvAddNewTaskToReadyList+0xd4>)
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4a15      	ldr	r2, [pc, #84]	; (8004a78 <prvAddNewTaskToReadyList+0xd8>)
 8004a22:	441a      	add	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3304      	adds	r3, #4
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	f7ff f8fd 	bl	8003c2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a30:	f001 fa40 	bl	8005eb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a34:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <prvAddNewTaskToReadyList+0xcc>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00e      	beq.n	8004a5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <prvAddNewTaskToReadyList+0xc8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d207      	bcs.n	8004a5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a4a:	4b0c      	ldr	r3, [pc, #48]	; (8004a7c <prvAddNewTaskToReadyList+0xdc>)
 8004a4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a5a:	bf00      	nop
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20000ce4 	.word	0x20000ce4
 8004a68:	20000810 	.word	0x20000810
 8004a6c:	20000cf0 	.word	0x20000cf0
 8004a70:	20000d00 	.word	0x20000d00
 8004a74:	20000cec 	.word	0x20000cec
 8004a78:	20000814 	.word	0x20000814
 8004a7c:	e000ed04 	.word	0xe000ed04

08004a80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d017      	beq.n	8004ac2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a92:	4b13      	ldr	r3, [pc, #76]	; (8004ae0 <vTaskDelay+0x60>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <vTaskDelay+0x30>
	__asm volatile
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	60bb      	str	r3, [r7, #8]
}
 8004aac:	bf00      	nop
 8004aae:	e7fe      	b.n	8004aae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ab0:	f000 f88a 	bl	8004bc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fcfe 	bl	80054b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004abc:	f000 f892 	bl	8004be4 <xTaskResumeAll>
 8004ac0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d107      	bne.n	8004ad8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004ac8:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <vTaskDelay+0x64>)
 8004aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ad8:	bf00      	nop
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20000d0c 	.word	0x20000d0c
 8004ae4:	e000ed04 	.word	0xe000ed04

08004ae8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08a      	sub	sp, #40	; 0x28
 8004aec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004af2:	2300      	movs	r3, #0
 8004af4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004af6:	463a      	mov	r2, r7
 8004af8:	1d39      	adds	r1, r7, #4
 8004afa:	f107 0308 	add.w	r3, r7, #8
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff f832 	bl	8003b68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b04:	6839      	ldr	r1, [r7, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	9202      	str	r2, [sp, #8]
 8004b0c:	9301      	str	r3, [sp, #4]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	2300      	movs	r3, #0
 8004b14:	460a      	mov	r2, r1
 8004b16:	4924      	ldr	r1, [pc, #144]	; (8004ba8 <vTaskStartScheduler+0xc0>)
 8004b18:	4824      	ldr	r0, [pc, #144]	; (8004bac <vTaskStartScheduler+0xc4>)
 8004b1a:	f7ff fdf9 	bl	8004710 <xTaskCreateStatic>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	4a23      	ldr	r2, [pc, #140]	; (8004bb0 <vTaskStartScheduler+0xc8>)
 8004b22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004b24:	4b22      	ldr	r3, [pc, #136]	; (8004bb0 <vTaskStartScheduler+0xc8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	617b      	str	r3, [r7, #20]
 8004b30:	e001      	b.n	8004b36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d102      	bne.n	8004b42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004b3c:	f000 fd10 	bl	8005560 <xTimerCreateTimerTask>
 8004b40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d11b      	bne.n	8004b80 <vTaskStartScheduler+0x98>
	__asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	613b      	str	r3, [r7, #16]
}
 8004b5a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b5c:	4b15      	ldr	r3, [pc, #84]	; (8004bb4 <vTaskStartScheduler+0xcc>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3354      	adds	r3, #84	; 0x54
 8004b62:	4a15      	ldr	r2, [pc, #84]	; (8004bb8 <vTaskStartScheduler+0xd0>)
 8004b64:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b66:	4b15      	ldr	r3, [pc, #84]	; (8004bbc <vTaskStartScheduler+0xd4>)
 8004b68:	f04f 32ff 	mov.w	r2, #4294967295
 8004b6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b6e:	4b14      	ldr	r3, [pc, #80]	; (8004bc0 <vTaskStartScheduler+0xd8>)
 8004b70:	2201      	movs	r2, #1
 8004b72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b74:	4b13      	ldr	r3, [pc, #76]	; (8004bc4 <vTaskStartScheduler+0xdc>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b7a:	f001 f8c9 	bl	8005d10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b7e:	e00e      	b.n	8004b9e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b86:	d10a      	bne.n	8004b9e <vTaskStartScheduler+0xb6>
	__asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	60fb      	str	r3, [r7, #12]
}
 8004b9a:	bf00      	nop
 8004b9c:	e7fe      	b.n	8004b9c <vTaskStartScheduler+0xb4>
}
 8004b9e:	bf00      	nop
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	08006e4c 	.word	0x08006e4c
 8004bac:	080051ed 	.word	0x080051ed
 8004bb0:	20000d08 	.word	0x20000d08
 8004bb4:	20000810 	.word	0x20000810
 8004bb8:	20000010 	.word	0x20000010
 8004bbc:	20000d04 	.word	0x20000d04
 8004bc0:	20000cf0 	.word	0x20000cf0
 8004bc4:	20000ce8 	.word	0x20000ce8

08004bc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004bcc:	4b04      	ldr	r3, [pc, #16]	; (8004be0 <vTaskSuspendAll+0x18>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	4a03      	ldr	r2, [pc, #12]	; (8004be0 <vTaskSuspendAll+0x18>)
 8004bd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004bd6:	bf00      	nop
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	20000d0c 	.word	0x20000d0c

08004be4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004bf2:	4b42      	ldr	r3, [pc, #264]	; (8004cfc <xTaskResumeAll+0x118>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10a      	bne.n	8004c10 <xTaskResumeAll+0x2c>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	603b      	str	r3, [r7, #0]
}
 8004c0c:	bf00      	nop
 8004c0e:	e7fe      	b.n	8004c0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004c10:	f001 f920 	bl	8005e54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004c14:	4b39      	ldr	r3, [pc, #228]	; (8004cfc <xTaskResumeAll+0x118>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	4a38      	ldr	r2, [pc, #224]	; (8004cfc <xTaskResumeAll+0x118>)
 8004c1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c1e:	4b37      	ldr	r3, [pc, #220]	; (8004cfc <xTaskResumeAll+0x118>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d162      	bne.n	8004cec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004c26:	4b36      	ldr	r3, [pc, #216]	; (8004d00 <xTaskResumeAll+0x11c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d05e      	beq.n	8004cec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c2e:	e02f      	b.n	8004c90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c30:	4b34      	ldr	r3, [pc, #208]	; (8004d04 <xTaskResumeAll+0x120>)
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3318      	adds	r3, #24
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff f851 	bl	8003ce4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	3304      	adds	r3, #4
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7ff f84c 	bl	8003ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c50:	4b2d      	ldr	r3, [pc, #180]	; (8004d08 <xTaskResumeAll+0x124>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d903      	bls.n	8004c60 <xTaskResumeAll+0x7c>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	4a2a      	ldr	r2, [pc, #168]	; (8004d08 <xTaskResumeAll+0x124>)
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c64:	4613      	mov	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4a27      	ldr	r2, [pc, #156]	; (8004d0c <xTaskResumeAll+0x128>)
 8004c6e:	441a      	add	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	3304      	adds	r3, #4
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f7fe ffd7 	bl	8003c2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c80:	4b23      	ldr	r3, [pc, #140]	; (8004d10 <xTaskResumeAll+0x12c>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d302      	bcc.n	8004c90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004c8a:	4b22      	ldr	r3, [pc, #136]	; (8004d14 <xTaskResumeAll+0x130>)
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c90:	4b1c      	ldr	r3, [pc, #112]	; (8004d04 <xTaskResumeAll+0x120>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1cb      	bne.n	8004c30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c9e:	f000 fb5f 	bl	8005360 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ca2:	4b1d      	ldr	r3, [pc, #116]	; (8004d18 <xTaskResumeAll+0x134>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d010      	beq.n	8004cd0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004cae:	f000 f847 	bl	8004d40 <xTaskIncrementTick>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004cb8:	4b16      	ldr	r3, [pc, #88]	; (8004d14 <xTaskResumeAll+0x130>)
 8004cba:	2201      	movs	r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f1      	bne.n	8004cae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004cca:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <xTaskResumeAll+0x134>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004cd0:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <xTaskResumeAll+0x130>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d009      	beq.n	8004cec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004cdc:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <xTaskResumeAll+0x138>)
 8004cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cec:	f001 f8e2 	bl	8005eb4 <vPortExitCritical>

	return xAlreadyYielded;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20000d0c 	.word	0x20000d0c
 8004d00:	20000ce4 	.word	0x20000ce4
 8004d04:	20000ca4 	.word	0x20000ca4
 8004d08:	20000cec 	.word	0x20000cec
 8004d0c:	20000814 	.word	0x20000814
 8004d10:	20000810 	.word	0x20000810
 8004d14:	20000cf8 	.word	0x20000cf8
 8004d18:	20000cf4 	.word	0x20000cf4
 8004d1c:	e000ed04 	.word	0xe000ed04

08004d20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004d26:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <xTaskGetTickCount+0x1c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004d2c:	687b      	ldr	r3, [r7, #4]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	20000ce8 	.word	0x20000ce8

08004d40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d46:	2300      	movs	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d4a:	4b4f      	ldr	r3, [pc, #316]	; (8004e88 <xTaskIncrementTick+0x148>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f040 808f 	bne.w	8004e72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d54:	4b4d      	ldr	r3, [pc, #308]	; (8004e8c <xTaskIncrementTick+0x14c>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3301      	adds	r3, #1
 8004d5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d5c:	4a4b      	ldr	r2, [pc, #300]	; (8004e8c <xTaskIncrementTick+0x14c>)
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d120      	bne.n	8004daa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d68:	4b49      	ldr	r3, [pc, #292]	; (8004e90 <xTaskIncrementTick+0x150>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <xTaskIncrementTick+0x48>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	603b      	str	r3, [r7, #0]
}
 8004d84:	bf00      	nop
 8004d86:	e7fe      	b.n	8004d86 <xTaskIncrementTick+0x46>
 8004d88:	4b41      	ldr	r3, [pc, #260]	; (8004e90 <xTaskIncrementTick+0x150>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	4b41      	ldr	r3, [pc, #260]	; (8004e94 <xTaskIncrementTick+0x154>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a3f      	ldr	r2, [pc, #252]	; (8004e90 <xTaskIncrementTick+0x150>)
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	4a3f      	ldr	r2, [pc, #252]	; (8004e94 <xTaskIncrementTick+0x154>)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	4b3e      	ldr	r3, [pc, #248]	; (8004e98 <xTaskIncrementTick+0x158>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3301      	adds	r3, #1
 8004da2:	4a3d      	ldr	r2, [pc, #244]	; (8004e98 <xTaskIncrementTick+0x158>)
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	f000 fadb 	bl	8005360 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004daa:	4b3c      	ldr	r3, [pc, #240]	; (8004e9c <xTaskIncrementTick+0x15c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d349      	bcc.n	8004e48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004db4:	4b36      	ldr	r3, [pc, #216]	; (8004e90 <xTaskIncrementTick+0x150>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dbe:	4b37      	ldr	r3, [pc, #220]	; (8004e9c <xTaskIncrementTick+0x15c>)
 8004dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004dc4:	601a      	str	r2, [r3, #0]
					break;
 8004dc6:	e03f      	b.n	8004e48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dc8:	4b31      	ldr	r3, [pc, #196]	; (8004e90 <xTaskIncrementTick+0x150>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d203      	bcs.n	8004de8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004de0:	4a2e      	ldr	r2, [pc, #184]	; (8004e9c <xTaskIncrementTick+0x15c>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004de6:	e02f      	b.n	8004e48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	3304      	adds	r3, #4
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fe ff79 	bl	8003ce4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d004      	beq.n	8004e04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	3318      	adds	r3, #24
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fe ff70 	bl	8003ce4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e08:	4b25      	ldr	r3, [pc, #148]	; (8004ea0 <xTaskIncrementTick+0x160>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d903      	bls.n	8004e18 <xTaskIncrementTick+0xd8>
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	4a22      	ldr	r2, [pc, #136]	; (8004ea0 <xTaskIncrementTick+0x160>)
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4a1f      	ldr	r2, [pc, #124]	; (8004ea4 <xTaskIncrementTick+0x164>)
 8004e26:	441a      	add	r2, r3
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	f7fe fefb 	bl	8003c2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e38:	4b1b      	ldr	r3, [pc, #108]	; (8004ea8 <xTaskIncrementTick+0x168>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d3b8      	bcc.n	8004db4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e42:	2301      	movs	r3, #1
 8004e44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e46:	e7b5      	b.n	8004db4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e48:	4b17      	ldr	r3, [pc, #92]	; (8004ea8 <xTaskIncrementTick+0x168>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4e:	4915      	ldr	r1, [pc, #84]	; (8004ea4 <xTaskIncrementTick+0x164>)
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d901      	bls.n	8004e64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004e60:	2301      	movs	r3, #1
 8004e62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e64:	4b11      	ldr	r3, [pc, #68]	; (8004eac <xTaskIncrementTick+0x16c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d007      	beq.n	8004e7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	e004      	b.n	8004e7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e72:	4b0f      	ldr	r3, [pc, #60]	; (8004eb0 <xTaskIncrementTick+0x170>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	3301      	adds	r3, #1
 8004e78:	4a0d      	ldr	r2, [pc, #52]	; (8004eb0 <xTaskIncrementTick+0x170>)
 8004e7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e7c:	697b      	ldr	r3, [r7, #20]
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	20000d0c 	.word	0x20000d0c
 8004e8c:	20000ce8 	.word	0x20000ce8
 8004e90:	20000c9c 	.word	0x20000c9c
 8004e94:	20000ca0 	.word	0x20000ca0
 8004e98:	20000cfc 	.word	0x20000cfc
 8004e9c:	20000d04 	.word	0x20000d04
 8004ea0:	20000cec 	.word	0x20000cec
 8004ea4:	20000814 	.word	0x20000814
 8004ea8:	20000810 	.word	0x20000810
 8004eac:	20000cf8 	.word	0x20000cf8
 8004eb0:	20000cf4 	.word	0x20000cf4

08004eb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004eba:	4b2a      	ldr	r3, [pc, #168]	; (8004f64 <vTaskSwitchContext+0xb0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ec2:	4b29      	ldr	r3, [pc, #164]	; (8004f68 <vTaskSwitchContext+0xb4>)
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ec8:	e046      	b.n	8004f58 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004eca:	4b27      	ldr	r3, [pc, #156]	; (8004f68 <vTaskSwitchContext+0xb4>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ed0:	4b26      	ldr	r3, [pc, #152]	; (8004f6c <vTaskSwitchContext+0xb8>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	e010      	b.n	8004efa <vTaskSwitchContext+0x46>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10a      	bne.n	8004ef4 <vTaskSwitchContext+0x40>
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	607b      	str	r3, [r7, #4]
}
 8004ef0:	bf00      	nop
 8004ef2:	e7fe      	b.n	8004ef2 <vTaskSwitchContext+0x3e>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]
 8004efa:	491d      	ldr	r1, [pc, #116]	; (8004f70 <vTaskSwitchContext+0xbc>)
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0e4      	beq.n	8004ed8 <vTaskSwitchContext+0x24>
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4a15      	ldr	r2, [pc, #84]	; (8004f70 <vTaskSwitchContext+0xbc>)
 8004f1a:	4413      	add	r3, r2
 8004f1c:	60bb      	str	r3, [r7, #8]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	605a      	str	r2, [r3, #4]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	3308      	adds	r3, #8
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d104      	bne.n	8004f3e <vTaskSwitchContext+0x8a>
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	605a      	str	r2, [r3, #4]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	4a0b      	ldr	r2, [pc, #44]	; (8004f74 <vTaskSwitchContext+0xc0>)
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	4a08      	ldr	r2, [pc, #32]	; (8004f6c <vTaskSwitchContext+0xb8>)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f4e:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <vTaskSwitchContext+0xc0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3354      	adds	r3, #84	; 0x54
 8004f54:	4a08      	ldr	r2, [pc, #32]	; (8004f78 <vTaskSwitchContext+0xc4>)
 8004f56:	6013      	str	r3, [r2, #0]
}
 8004f58:	bf00      	nop
 8004f5a:	3714      	adds	r7, #20
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	20000d0c 	.word	0x20000d0c
 8004f68:	20000cf8 	.word	0x20000cf8
 8004f6c:	20000cec 	.word	0x20000cec
 8004f70:	20000814 	.word	0x20000814
 8004f74:	20000810 	.word	0x20000810
 8004f78:	20000010 	.word	0x20000010

08004f7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	60fb      	str	r3, [r7, #12]
}
 8004f9e:	bf00      	nop
 8004fa0:	e7fe      	b.n	8004fa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fa2:	4b07      	ldr	r3, [pc, #28]	; (8004fc0 <vTaskPlaceOnEventList+0x44>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3318      	adds	r3, #24
 8004fa8:	4619      	mov	r1, r3
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f7fe fe61 	bl	8003c72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	6838      	ldr	r0, [r7, #0]
 8004fb4:	f000 fa80 	bl	80054b8 <prvAddCurrentTaskToDelayedList>
}
 8004fb8:	bf00      	nop
 8004fba:	3710      	adds	r7, #16
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	20000810 	.word	0x20000810

08004fc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10a      	bne.n	8004fec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fda:	f383 8811 	msr	BASEPRI, r3
 8004fde:	f3bf 8f6f 	isb	sy
 8004fe2:	f3bf 8f4f 	dsb	sy
 8004fe6:	617b      	str	r3, [r7, #20]
}
 8004fe8:	bf00      	nop
 8004fea:	e7fe      	b.n	8004fea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fec:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <vTaskPlaceOnEventListRestricted+0x54>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3318      	adds	r3, #24
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f7fe fe18 	bl	8003c2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d002      	beq.n	8005006 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005000:	f04f 33ff 	mov.w	r3, #4294967295
 8005004:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005006:	6879      	ldr	r1, [r7, #4]
 8005008:	68b8      	ldr	r0, [r7, #8]
 800500a:	f000 fa55 	bl	80054b8 <prvAddCurrentTaskToDelayedList>
	}
 800500e:	bf00      	nop
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20000810 	.word	0x20000810

0800501c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10a      	bne.n	8005048 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	60fb      	str	r3, [r7, #12]
}
 8005044:	bf00      	nop
 8005046:	e7fe      	b.n	8005046 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	3318      	adds	r3, #24
 800504c:	4618      	mov	r0, r3
 800504e:	f7fe fe49 	bl	8003ce4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005052:	4b1e      	ldr	r3, [pc, #120]	; (80050cc <xTaskRemoveFromEventList+0xb0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d11d      	bne.n	8005096 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	3304      	adds	r3, #4
 800505e:	4618      	mov	r0, r3
 8005060:	f7fe fe40 	bl	8003ce4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005068:	4b19      	ldr	r3, [pc, #100]	; (80050d0 <xTaskRemoveFromEventList+0xb4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	429a      	cmp	r2, r3
 800506e:	d903      	bls.n	8005078 <xTaskRemoveFromEventList+0x5c>
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	4a16      	ldr	r2, [pc, #88]	; (80050d0 <xTaskRemoveFromEventList+0xb4>)
 8005076:	6013      	str	r3, [r2, #0]
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4a13      	ldr	r2, [pc, #76]	; (80050d4 <xTaskRemoveFromEventList+0xb8>)
 8005086:	441a      	add	r2, r3
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	3304      	adds	r3, #4
 800508c:	4619      	mov	r1, r3
 800508e:	4610      	mov	r0, r2
 8005090:	f7fe fdcb 	bl	8003c2a <vListInsertEnd>
 8005094:	e005      	b.n	80050a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	3318      	adds	r3, #24
 800509a:	4619      	mov	r1, r3
 800509c:	480e      	ldr	r0, [pc, #56]	; (80050d8 <xTaskRemoveFromEventList+0xbc>)
 800509e:	f7fe fdc4 	bl	8003c2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050a6:	4b0d      	ldr	r3, [pc, #52]	; (80050dc <xTaskRemoveFromEventList+0xc0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d905      	bls.n	80050bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80050b0:	2301      	movs	r3, #1
 80050b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80050b4:	4b0a      	ldr	r3, [pc, #40]	; (80050e0 <xTaskRemoveFromEventList+0xc4>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	e001      	b.n	80050c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80050bc:	2300      	movs	r3, #0
 80050be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80050c0:	697b      	ldr	r3, [r7, #20]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000d0c 	.word	0x20000d0c
 80050d0:	20000cec 	.word	0x20000cec
 80050d4:	20000814 	.word	0x20000814
 80050d8:	20000ca4 	.word	0x20000ca4
 80050dc:	20000810 	.word	0x20000810
 80050e0:	20000cf8 	.word	0x20000cf8

080050e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050ec:	4b06      	ldr	r3, [pc, #24]	; (8005108 <vTaskInternalSetTimeOutState+0x24>)
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050f4:	4b05      	ldr	r3, [pc, #20]	; (800510c <vTaskInternalSetTimeOutState+0x28>)
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	605a      	str	r2, [r3, #4]
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	20000cfc 	.word	0x20000cfc
 800510c:	20000ce8 	.word	0x20000ce8

08005110 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b088      	sub	sp, #32
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10a      	bne.n	8005136 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	613b      	str	r3, [r7, #16]
}
 8005132:	bf00      	nop
 8005134:	e7fe      	b.n	8005134 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10a      	bne.n	8005152 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	60fb      	str	r3, [r7, #12]
}
 800514e:	bf00      	nop
 8005150:	e7fe      	b.n	8005150 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005152:	f000 fe7f 	bl	8005e54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005156:	4b1d      	ldr	r3, [pc, #116]	; (80051cc <xTaskCheckForTimeOut+0xbc>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516e:	d102      	bne.n	8005176 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005170:	2300      	movs	r3, #0
 8005172:	61fb      	str	r3, [r7, #28]
 8005174:	e023      	b.n	80051be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	4b15      	ldr	r3, [pc, #84]	; (80051d0 <xTaskCheckForTimeOut+0xc0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d007      	beq.n	8005192 <xTaskCheckForTimeOut+0x82>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	69ba      	ldr	r2, [r7, #24]
 8005188:	429a      	cmp	r2, r3
 800518a:	d302      	bcc.n	8005192 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800518c:	2301      	movs	r3, #1
 800518e:	61fb      	str	r3, [r7, #28]
 8005190:	e015      	b.n	80051be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	429a      	cmp	r2, r3
 800519a:	d20b      	bcs.n	80051b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	1ad2      	subs	r2, r2, r3
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff ff9b 	bl	80050e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80051ae:	2300      	movs	r3, #0
 80051b0:	61fb      	str	r3, [r7, #28]
 80051b2:	e004      	b.n	80051be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80051ba:	2301      	movs	r3, #1
 80051bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80051be:	f000 fe79 	bl	8005eb4 <vPortExitCritical>

	return xReturn;
 80051c2:	69fb      	ldr	r3, [r7, #28]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3720      	adds	r7, #32
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	20000ce8 	.word	0x20000ce8
 80051d0:	20000cfc 	.word	0x20000cfc

080051d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051d8:	4b03      	ldr	r3, [pc, #12]	; (80051e8 <vTaskMissedYield+0x14>)
 80051da:	2201      	movs	r2, #1
 80051dc:	601a      	str	r2, [r3, #0]
}
 80051de:	bf00      	nop
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	20000cf8 	.word	0x20000cf8

080051ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051f4:	f000 f852 	bl	800529c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051f8:	4b06      	ldr	r3, [pc, #24]	; (8005214 <prvIdleTask+0x28>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d9f9      	bls.n	80051f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005200:	4b05      	ldr	r3, [pc, #20]	; (8005218 <prvIdleTask+0x2c>)
 8005202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005210:	e7f0      	b.n	80051f4 <prvIdleTask+0x8>
 8005212:	bf00      	nop
 8005214:	20000814 	.word	0x20000814
 8005218:	e000ed04 	.word	0xe000ed04

0800521c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005222:	2300      	movs	r3, #0
 8005224:	607b      	str	r3, [r7, #4]
 8005226:	e00c      	b.n	8005242 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	4613      	mov	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4a12      	ldr	r2, [pc, #72]	; (800527c <prvInitialiseTaskLists+0x60>)
 8005234:	4413      	add	r3, r2
 8005236:	4618      	mov	r0, r3
 8005238:	f7fe fcca 	bl	8003bd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	3301      	adds	r3, #1
 8005240:	607b      	str	r3, [r7, #4]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2b37      	cmp	r3, #55	; 0x37
 8005246:	d9ef      	bls.n	8005228 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005248:	480d      	ldr	r0, [pc, #52]	; (8005280 <prvInitialiseTaskLists+0x64>)
 800524a:	f7fe fcc1 	bl	8003bd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800524e:	480d      	ldr	r0, [pc, #52]	; (8005284 <prvInitialiseTaskLists+0x68>)
 8005250:	f7fe fcbe 	bl	8003bd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005254:	480c      	ldr	r0, [pc, #48]	; (8005288 <prvInitialiseTaskLists+0x6c>)
 8005256:	f7fe fcbb 	bl	8003bd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800525a:	480c      	ldr	r0, [pc, #48]	; (800528c <prvInitialiseTaskLists+0x70>)
 800525c:	f7fe fcb8 	bl	8003bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005260:	480b      	ldr	r0, [pc, #44]	; (8005290 <prvInitialiseTaskLists+0x74>)
 8005262:	f7fe fcb5 	bl	8003bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005266:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <prvInitialiseTaskLists+0x78>)
 8005268:	4a05      	ldr	r2, [pc, #20]	; (8005280 <prvInitialiseTaskLists+0x64>)
 800526a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800526c:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <prvInitialiseTaskLists+0x7c>)
 800526e:	4a05      	ldr	r2, [pc, #20]	; (8005284 <prvInitialiseTaskLists+0x68>)
 8005270:	601a      	str	r2, [r3, #0]
}
 8005272:	bf00      	nop
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000814 	.word	0x20000814
 8005280:	20000c74 	.word	0x20000c74
 8005284:	20000c88 	.word	0x20000c88
 8005288:	20000ca4 	.word	0x20000ca4
 800528c:	20000cb8 	.word	0x20000cb8
 8005290:	20000cd0 	.word	0x20000cd0
 8005294:	20000c9c 	.word	0x20000c9c
 8005298:	20000ca0 	.word	0x20000ca0

0800529c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052a2:	e019      	b.n	80052d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80052a4:	f000 fdd6 	bl	8005e54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052a8:	4b10      	ldr	r3, [pc, #64]	; (80052ec <prvCheckTasksWaitingTermination+0x50>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3304      	adds	r3, #4
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fe fd15 	bl	8003ce4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80052ba:	4b0d      	ldr	r3, [pc, #52]	; (80052f0 <prvCheckTasksWaitingTermination+0x54>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3b01      	subs	r3, #1
 80052c0:	4a0b      	ldr	r2, [pc, #44]	; (80052f0 <prvCheckTasksWaitingTermination+0x54>)
 80052c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80052c4:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <prvCheckTasksWaitingTermination+0x58>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	4a0a      	ldr	r2, [pc, #40]	; (80052f4 <prvCheckTasksWaitingTermination+0x58>)
 80052cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80052ce:	f000 fdf1 	bl	8005eb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f810 	bl	80052f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052d8:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <prvCheckTasksWaitingTermination+0x58>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e1      	bne.n	80052a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052e0:	bf00      	nop
 80052e2:	bf00      	nop
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20000cb8 	.word	0x20000cb8
 80052f0:	20000ce4 	.word	0x20000ce4
 80052f4:	20000ccc 	.word	0x20000ccc

080052f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3354      	adds	r3, #84	; 0x54
 8005304:	4618      	mov	r0, r3
 8005306:	f001 f9b3 	bl	8006670 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005310:	2b00      	cmp	r3, #0
 8005312:	d108      	bne.n	8005326 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	4618      	mov	r0, r3
 800531a:	f000 ff89 	bl	8006230 <vPortFree>
				vPortFree( pxTCB );
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 ff86 	bl	8006230 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005324:	e018      	b.n	8005358 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800532c:	2b01      	cmp	r3, #1
 800532e:	d103      	bne.n	8005338 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 ff7d 	bl	8006230 <vPortFree>
	}
 8005336:	e00f      	b.n	8005358 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800533e:	2b02      	cmp	r3, #2
 8005340:	d00a      	beq.n	8005358 <prvDeleteTCB+0x60>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	60fb      	str	r3, [r7, #12]
}
 8005354:	bf00      	nop
 8005356:	e7fe      	b.n	8005356 <prvDeleteTCB+0x5e>
	}
 8005358:	bf00      	nop
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005366:	4b0c      	ldr	r3, [pc, #48]	; (8005398 <prvResetNextTaskUnblockTime+0x38>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d104      	bne.n	800537a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005370:	4b0a      	ldr	r3, [pc, #40]	; (800539c <prvResetNextTaskUnblockTime+0x3c>)
 8005372:	f04f 32ff 	mov.w	r2, #4294967295
 8005376:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005378:	e008      	b.n	800538c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800537a:	4b07      	ldr	r3, [pc, #28]	; (8005398 <prvResetNextTaskUnblockTime+0x38>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	4a04      	ldr	r2, [pc, #16]	; (800539c <prvResetNextTaskUnblockTime+0x3c>)
 800538a:	6013      	str	r3, [r2, #0]
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr
 8005398:	20000c9c 	.word	0x20000c9c
 800539c:	20000d04 	.word	0x20000d04

080053a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80053a6:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <xTaskGetSchedulerState+0x34>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d102      	bne.n	80053b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80053ae:	2301      	movs	r3, #1
 80053b0:	607b      	str	r3, [r7, #4]
 80053b2:	e008      	b.n	80053c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053b4:	4b08      	ldr	r3, [pc, #32]	; (80053d8 <xTaskGetSchedulerState+0x38>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d102      	bne.n	80053c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80053bc:	2302      	movs	r3, #2
 80053be:	607b      	str	r3, [r7, #4]
 80053c0:	e001      	b.n	80053c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80053c2:	2300      	movs	r3, #0
 80053c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80053c6:	687b      	ldr	r3, [r7, #4]
	}
 80053c8:	4618      	mov	r0, r3
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	20000cf0 	.word	0x20000cf0
 80053d8:	20000d0c 	.word	0x20000d0c

080053dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80053e8:	2300      	movs	r3, #0
 80053ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d056      	beq.n	80054a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80053f2:	4b2e      	ldr	r3, [pc, #184]	; (80054ac <xTaskPriorityDisinherit+0xd0>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d00a      	beq.n	8005412 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80053fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005400:	f383 8811 	msr	BASEPRI, r3
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	60fb      	str	r3, [r7, #12]
}
 800540e:	bf00      	nop
 8005410:	e7fe      	b.n	8005410 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10a      	bne.n	8005430 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800541a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	60bb      	str	r3, [r7, #8]
}
 800542c:	bf00      	nop
 800542e:	e7fe      	b.n	800542e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005434:	1e5a      	subs	r2, r3, #1
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005442:	429a      	cmp	r2, r3
 8005444:	d02c      	beq.n	80054a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800544a:	2b00      	cmp	r3, #0
 800544c:	d128      	bne.n	80054a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	3304      	adds	r3, #4
 8005452:	4618      	mov	r0, r3
 8005454:	f7fe fc46 	bl	8003ce4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005470:	4b0f      	ldr	r3, [pc, #60]	; (80054b0 <xTaskPriorityDisinherit+0xd4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d903      	bls.n	8005480 <xTaskPriorityDisinherit+0xa4>
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	4a0c      	ldr	r2, [pc, #48]	; (80054b0 <xTaskPriorityDisinherit+0xd4>)
 800547e:	6013      	str	r3, [r2, #0]
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005484:	4613      	mov	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4a09      	ldr	r2, [pc, #36]	; (80054b4 <xTaskPriorityDisinherit+0xd8>)
 800548e:	441a      	add	r2, r3
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	3304      	adds	r3, #4
 8005494:	4619      	mov	r1, r3
 8005496:	4610      	mov	r0, r2
 8005498:	f7fe fbc7 	bl	8003c2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800549c:	2301      	movs	r3, #1
 800549e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80054a0:	697b      	ldr	r3, [r7, #20]
	}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3718      	adds	r7, #24
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000810 	.word	0x20000810
 80054b0:	20000cec 	.word	0x20000cec
 80054b4:	20000814 	.word	0x20000814

080054b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80054c2:	4b21      	ldr	r3, [pc, #132]	; (8005548 <prvAddCurrentTaskToDelayedList+0x90>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054c8:	4b20      	ldr	r3, [pc, #128]	; (800554c <prvAddCurrentTaskToDelayedList+0x94>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3304      	adds	r3, #4
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7fe fc08 	bl	8003ce4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054da:	d10a      	bne.n	80054f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d007      	beq.n	80054f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054e2:	4b1a      	ldr	r3, [pc, #104]	; (800554c <prvAddCurrentTaskToDelayedList+0x94>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3304      	adds	r3, #4
 80054e8:	4619      	mov	r1, r3
 80054ea:	4819      	ldr	r0, [pc, #100]	; (8005550 <prvAddCurrentTaskToDelayedList+0x98>)
 80054ec:	f7fe fb9d 	bl	8003c2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054f0:	e026      	b.n	8005540 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4413      	add	r3, r2
 80054f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054fa:	4b14      	ldr	r3, [pc, #80]	; (800554c <prvAddCurrentTaskToDelayedList+0x94>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	429a      	cmp	r2, r3
 8005508:	d209      	bcs.n	800551e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800550a:	4b12      	ldr	r3, [pc, #72]	; (8005554 <prvAddCurrentTaskToDelayedList+0x9c>)
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	4b0f      	ldr	r3, [pc, #60]	; (800554c <prvAddCurrentTaskToDelayedList+0x94>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3304      	adds	r3, #4
 8005514:	4619      	mov	r1, r3
 8005516:	4610      	mov	r0, r2
 8005518:	f7fe fbab 	bl	8003c72 <vListInsert>
}
 800551c:	e010      	b.n	8005540 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800551e:	4b0e      	ldr	r3, [pc, #56]	; (8005558 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	4b0a      	ldr	r3, [pc, #40]	; (800554c <prvAddCurrentTaskToDelayedList+0x94>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3304      	adds	r3, #4
 8005528:	4619      	mov	r1, r3
 800552a:	4610      	mov	r0, r2
 800552c:	f7fe fba1 	bl	8003c72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005530:	4b0a      	ldr	r3, [pc, #40]	; (800555c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	429a      	cmp	r2, r3
 8005538:	d202      	bcs.n	8005540 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800553a:	4a08      	ldr	r2, [pc, #32]	; (800555c <prvAddCurrentTaskToDelayedList+0xa4>)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	6013      	str	r3, [r2, #0]
}
 8005540:	bf00      	nop
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	20000ce8 	.word	0x20000ce8
 800554c:	20000810 	.word	0x20000810
 8005550:	20000cd0 	.word	0x20000cd0
 8005554:	20000ca0 	.word	0x20000ca0
 8005558:	20000c9c 	.word	0x20000c9c
 800555c:	20000d04 	.word	0x20000d04

08005560 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b08a      	sub	sp, #40	; 0x28
 8005564:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005566:	2300      	movs	r3, #0
 8005568:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800556a:	f000 fb07 	bl	8005b7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800556e:	4b1c      	ldr	r3, [pc, #112]	; (80055e0 <xTimerCreateTimerTask+0x80>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d021      	beq.n	80055ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800557a:	2300      	movs	r3, #0
 800557c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800557e:	1d3a      	adds	r2, r7, #4
 8005580:	f107 0108 	add.w	r1, r7, #8
 8005584:	f107 030c 	add.w	r3, r7, #12
 8005588:	4618      	mov	r0, r3
 800558a:	f7fe fb07 	bl	8003b9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	9202      	str	r2, [sp, #8]
 8005596:	9301      	str	r3, [sp, #4]
 8005598:	2302      	movs	r3, #2
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	2300      	movs	r3, #0
 800559e:	460a      	mov	r2, r1
 80055a0:	4910      	ldr	r1, [pc, #64]	; (80055e4 <xTimerCreateTimerTask+0x84>)
 80055a2:	4811      	ldr	r0, [pc, #68]	; (80055e8 <xTimerCreateTimerTask+0x88>)
 80055a4:	f7ff f8b4 	bl	8004710 <xTaskCreateStatic>
 80055a8:	4603      	mov	r3, r0
 80055aa:	4a10      	ldr	r2, [pc, #64]	; (80055ec <xTimerCreateTimerTask+0x8c>)
 80055ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80055ae:	4b0f      	ldr	r3, [pc, #60]	; (80055ec <xTimerCreateTimerTask+0x8c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80055b6:	2301      	movs	r3, #1
 80055b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10a      	bne.n	80055d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	613b      	str	r3, [r7, #16]
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80055d6:	697b      	ldr	r3, [r7, #20]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	20000d40 	.word	0x20000d40
 80055e4:	08006e54 	.word	0x08006e54
 80055e8:	08005725 	.word	0x08005725
 80055ec:	20000d44 	.word	0x20000d44

080055f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08a      	sub	sp, #40	; 0x28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
 80055fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80055fe:	2300      	movs	r3, #0
 8005600:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10a      	bne.n	800561e <xTimerGenericCommand+0x2e>
	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	623b      	str	r3, [r7, #32]
}
 800561a:	bf00      	nop
 800561c:	e7fe      	b.n	800561c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800561e:	4b1a      	ldr	r3, [pc, #104]	; (8005688 <xTimerGenericCommand+0x98>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d02a      	beq.n	800567c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b05      	cmp	r3, #5
 8005636:	dc18      	bgt.n	800566a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005638:	f7ff feb2 	bl	80053a0 <xTaskGetSchedulerState>
 800563c:	4603      	mov	r3, r0
 800563e:	2b02      	cmp	r3, #2
 8005640:	d109      	bne.n	8005656 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005642:	4b11      	ldr	r3, [pc, #68]	; (8005688 <xTimerGenericCommand+0x98>)
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	f107 0110 	add.w	r1, r7, #16
 800564a:	2300      	movs	r3, #0
 800564c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800564e:	f7fe fc77 	bl	8003f40 <xQueueGenericSend>
 8005652:	6278      	str	r0, [r7, #36]	; 0x24
 8005654:	e012      	b.n	800567c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005656:	4b0c      	ldr	r3, [pc, #48]	; (8005688 <xTimerGenericCommand+0x98>)
 8005658:	6818      	ldr	r0, [r3, #0]
 800565a:	f107 0110 	add.w	r1, r7, #16
 800565e:	2300      	movs	r3, #0
 8005660:	2200      	movs	r2, #0
 8005662:	f7fe fc6d 	bl	8003f40 <xQueueGenericSend>
 8005666:	6278      	str	r0, [r7, #36]	; 0x24
 8005668:	e008      	b.n	800567c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800566a:	4b07      	ldr	r3, [pc, #28]	; (8005688 <xTimerGenericCommand+0x98>)
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	f107 0110 	add.w	r1, r7, #16
 8005672:	2300      	movs	r3, #0
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	f7fe fd61 	bl	800413c <xQueueGenericSendFromISR>
 800567a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800567e:	4618      	mov	r0, r3
 8005680:	3728      	adds	r7, #40	; 0x28
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000d40 	.word	0x20000d40

0800568c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af02      	add	r7, sp, #8
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005696:	4b22      	ldr	r3, [pc, #136]	; (8005720 <prvProcessExpiredTimer+0x94>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fe fb1d 	bl	8003ce4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d022      	beq.n	80056fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	699a      	ldr	r2, [r3, #24]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	18d1      	adds	r1, r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	6978      	ldr	r0, [r7, #20]
 80056c6:	f000 f8d1 	bl	800586c <prvInsertTimerInActiveList>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01f      	beq.n	8005710 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056d0:	2300      	movs	r3, #0
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	2300      	movs	r3, #0
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	2100      	movs	r1, #0
 80056da:	6978      	ldr	r0, [r7, #20]
 80056dc:	f7ff ff88 	bl	80055f0 <xTimerGenericCommand>
 80056e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d113      	bne.n	8005710 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	60fb      	str	r3, [r7, #12]
}
 80056fa:	bf00      	nop
 80056fc:	e7fe      	b.n	80056fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005704:	f023 0301 	bic.w	r3, r3, #1
 8005708:	b2da      	uxtb	r2, r3
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	6978      	ldr	r0, [r7, #20]
 8005716:	4798      	blx	r3
}
 8005718:	bf00      	nop
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	20000d38 	.word	0x20000d38

08005724 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800572c:	f107 0308 	add.w	r3, r7, #8
 8005730:	4618      	mov	r0, r3
 8005732:	f000 f857 	bl	80057e4 <prvGetNextExpireTime>
 8005736:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4619      	mov	r1, r3
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 f803 	bl	8005748 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005742:	f000 f8d5 	bl	80058f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005746:	e7f1      	b.n	800572c <prvTimerTask+0x8>

08005748 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005752:	f7ff fa39 	bl	8004bc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005756:	f107 0308 	add.w	r3, r7, #8
 800575a:	4618      	mov	r0, r3
 800575c:	f000 f866 	bl	800582c <prvSampleTimeNow>
 8005760:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d130      	bne.n	80057ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10a      	bne.n	8005784 <prvProcessTimerOrBlockTask+0x3c>
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	429a      	cmp	r2, r3
 8005774:	d806      	bhi.n	8005784 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005776:	f7ff fa35 	bl	8004be4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800577a:	68f9      	ldr	r1, [r7, #12]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff ff85 	bl	800568c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005782:	e024      	b.n	80057ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d008      	beq.n	800579c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800578a:	4b13      	ldr	r3, [pc, #76]	; (80057d8 <prvProcessTimerOrBlockTask+0x90>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <prvProcessTimerOrBlockTask+0x50>
 8005794:	2301      	movs	r3, #1
 8005796:	e000      	b.n	800579a <prvProcessTimerOrBlockTask+0x52>
 8005798:	2300      	movs	r3, #0
 800579a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800579c:	4b0f      	ldr	r3, [pc, #60]	; (80057dc <prvProcessTimerOrBlockTask+0x94>)
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	4619      	mov	r1, r3
 80057aa:	f7fe ff7d 	bl	80046a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80057ae:	f7ff fa19 	bl	8004be4 <xTaskResumeAll>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10a      	bne.n	80057ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80057b8:	4b09      	ldr	r3, [pc, #36]	; (80057e0 <prvProcessTimerOrBlockTask+0x98>)
 80057ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	f3bf 8f6f 	isb	sy
}
 80057c8:	e001      	b.n	80057ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80057ca:	f7ff fa0b 	bl	8004be4 <xTaskResumeAll>
}
 80057ce:	bf00      	nop
 80057d0:	3710      	adds	r7, #16
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20000d3c 	.word	0x20000d3c
 80057dc:	20000d40 	.word	0x20000d40
 80057e0:	e000ed04 	.word	0xe000ed04

080057e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80057ec:	4b0e      	ldr	r3, [pc, #56]	; (8005828 <prvGetNextExpireTime+0x44>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <prvGetNextExpireTime+0x16>
 80057f6:	2201      	movs	r2, #1
 80057f8:	e000      	b.n	80057fc <prvGetNextExpireTime+0x18>
 80057fa:	2200      	movs	r2, #0
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d105      	bne.n	8005814 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005808:	4b07      	ldr	r3, [pc, #28]	; (8005828 <prvGetNextExpireTime+0x44>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	e001      	b.n	8005818 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005814:	2300      	movs	r3, #0
 8005816:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005818:	68fb      	ldr	r3, [r7, #12]
}
 800581a:	4618      	mov	r0, r3
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	20000d38 	.word	0x20000d38

0800582c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005834:	f7ff fa74 	bl	8004d20 <xTaskGetTickCount>
 8005838:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800583a:	4b0b      	ldr	r3, [pc, #44]	; (8005868 <prvSampleTimeNow+0x3c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68fa      	ldr	r2, [r7, #12]
 8005840:	429a      	cmp	r2, r3
 8005842:	d205      	bcs.n	8005850 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005844:	f000 f936 	bl	8005ab4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	601a      	str	r2, [r3, #0]
 800584e:	e002      	b.n	8005856 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005856:	4a04      	ldr	r2, [pc, #16]	; (8005868 <prvSampleTimeNow+0x3c>)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800585c:	68fb      	ldr	r3, [r7, #12]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20000d48 	.word	0x20000d48

0800586c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	429a      	cmp	r2, r3
 8005890:	d812      	bhi.n	80058b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	1ad2      	subs	r2, r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	429a      	cmp	r2, r3
 800589e:	d302      	bcc.n	80058a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80058a0:	2301      	movs	r3, #1
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	e01b      	b.n	80058de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80058a6:	4b10      	ldr	r3, [pc, #64]	; (80058e8 <prvInsertTimerInActiveList+0x7c>)
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3304      	adds	r3, #4
 80058ae:	4619      	mov	r1, r3
 80058b0:	4610      	mov	r0, r2
 80058b2:	f7fe f9de 	bl	8003c72 <vListInsert>
 80058b6:	e012      	b.n	80058de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d206      	bcs.n	80058ce <prvInsertTimerInActiveList+0x62>
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d302      	bcc.n	80058ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80058c8:	2301      	movs	r3, #1
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	e007      	b.n	80058de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058ce:	4b07      	ldr	r3, [pc, #28]	; (80058ec <prvInsertTimerInActiveList+0x80>)
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3304      	adds	r3, #4
 80058d6:	4619      	mov	r1, r3
 80058d8:	4610      	mov	r0, r2
 80058da:	f7fe f9ca 	bl	8003c72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80058de:	697b      	ldr	r3, [r7, #20]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	20000d3c 	.word	0x20000d3c
 80058ec:	20000d38 	.word	0x20000d38

080058f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08e      	sub	sp, #56	; 0x38
 80058f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058f6:	e0ca      	b.n	8005a8e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	da18      	bge.n	8005930 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80058fe:	1d3b      	adds	r3, r7, #4
 8005900:	3304      	adds	r3, #4
 8005902:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10a      	bne.n	8005920 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	61fb      	str	r3, [r7, #28]
}
 800591c:	bf00      	nop
 800591e:	e7fe      	b.n	800591e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005926:	6850      	ldr	r0, [r2, #4]
 8005928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800592a:	6892      	ldr	r2, [r2, #8]
 800592c:	4611      	mov	r1, r2
 800592e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	f2c0 80aa 	blt.w	8005a8c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800593c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d004      	beq.n	800594e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	3304      	adds	r3, #4
 8005948:	4618      	mov	r0, r3
 800594a:	f7fe f9cb 	bl	8003ce4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800594e:	463b      	mov	r3, r7
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff ff6b 	bl	800582c <prvSampleTimeNow>
 8005956:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b09      	cmp	r3, #9
 800595c:	f200 8097 	bhi.w	8005a8e <prvProcessReceivedCommands+0x19e>
 8005960:	a201      	add	r2, pc, #4	; (adr r2, 8005968 <prvProcessReceivedCommands+0x78>)
 8005962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005966:	bf00      	nop
 8005968:	08005991 	.word	0x08005991
 800596c:	08005991 	.word	0x08005991
 8005970:	08005991 	.word	0x08005991
 8005974:	08005a05 	.word	0x08005a05
 8005978:	08005a19 	.word	0x08005a19
 800597c:	08005a63 	.word	0x08005a63
 8005980:	08005991 	.word	0x08005991
 8005984:	08005991 	.word	0x08005991
 8005988:	08005a05 	.word	0x08005a05
 800598c:	08005a19 	.word	0x08005a19
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005996:	f043 0301 	orr.w	r3, r3, #1
 800599a:	b2da      	uxtb	r2, r3
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	18d1      	adds	r1, r2, r3
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059b0:	f7ff ff5c 	bl	800586c <prvInsertTimerInActiveList>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d069      	beq.n	8005a8e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d05e      	beq.n	8005a8e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	441a      	add	r2, r3
 80059d8:	2300      	movs	r3, #0
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	2300      	movs	r3, #0
 80059de:	2100      	movs	r1, #0
 80059e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059e2:	f7ff fe05 	bl	80055f0 <xTimerGenericCommand>
 80059e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d14f      	bne.n	8005a8e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	61bb      	str	r3, [r7, #24]
}
 8005a00:	bf00      	nop
 8005a02:	e7fe      	b.n	8005a02 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a0a:	f023 0301 	bic.w	r3, r3, #1
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005a16:	e03a      	b.n	8005a8e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a1e:	f043 0301 	orr.w	r3, r3, #1
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10a      	bne.n	8005a4e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3c:	f383 8811 	msr	BASEPRI, r3
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	617b      	str	r3, [r7, #20]
}
 8005a4a:	bf00      	nop
 8005a4c:	e7fe      	b.n	8005a4c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	699a      	ldr	r2, [r3, #24]
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	18d1      	adds	r1, r2, r3
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a5c:	f7ff ff06 	bl	800586c <prvInsertTimerInActiveList>
					break;
 8005a60:	e015      	b.n	8005a8e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d103      	bne.n	8005a78 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a72:	f000 fbdd 	bl	8006230 <vPortFree>
 8005a76:	e00a      	b.n	8005a8e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a7e:	f023 0301 	bic.w	r3, r3, #1
 8005a82:	b2da      	uxtb	r2, r3
 8005a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a8a:	e000      	b.n	8005a8e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005a8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a8e:	4b08      	ldr	r3, [pc, #32]	; (8005ab0 <prvProcessReceivedCommands+0x1c0>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	1d39      	adds	r1, r7, #4
 8005a94:	2200      	movs	r2, #0
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fe fbec 	bl	8004274 <xQueueReceive>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f47f af2a 	bne.w	80058f8 <prvProcessReceivedCommands+0x8>
	}
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop
 8005aa8:	3730      	adds	r7, #48	; 0x30
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20000d40 	.word	0x20000d40

08005ab4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b088      	sub	sp, #32
 8005ab8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005aba:	e048      	b.n	8005b4e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005abc:	4b2d      	ldr	r3, [pc, #180]	; (8005b74 <prvSwitchTimerLists+0xc0>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ac6:	4b2b      	ldr	r3, [pc, #172]	; (8005b74 <prvSwitchTimerLists+0xc0>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	3304      	adds	r3, #4
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fe f905 	bl	8003ce4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d02e      	beq.n	8005b4e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	699b      	ldr	r3, [r3, #24]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	4413      	add	r3, r2
 8005af8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d90e      	bls.n	8005b20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b0e:	4b19      	ldr	r3, [pc, #100]	; (8005b74 <prvSwitchTimerLists+0xc0>)
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3304      	adds	r3, #4
 8005b16:	4619      	mov	r1, r3
 8005b18:	4610      	mov	r0, r2
 8005b1a:	f7fe f8aa 	bl	8003c72 <vListInsert>
 8005b1e:	e016      	b.n	8005b4e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b20:	2300      	movs	r3, #0
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	2300      	movs	r3, #0
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	2100      	movs	r1, #0
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f7ff fd60 	bl	80055f0 <xTimerGenericCommand>
 8005b30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10a      	bne.n	8005b4e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	603b      	str	r3, [r7, #0]
}
 8005b4a:	bf00      	nop
 8005b4c:	e7fe      	b.n	8005b4c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b4e:	4b09      	ldr	r3, [pc, #36]	; (8005b74 <prvSwitchTimerLists+0xc0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1b1      	bne.n	8005abc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005b58:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <prvSwitchTimerLists+0xc0>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005b5e:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <prvSwitchTimerLists+0xc4>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a04      	ldr	r2, [pc, #16]	; (8005b74 <prvSwitchTimerLists+0xc0>)
 8005b64:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005b66:	4a04      	ldr	r2, [pc, #16]	; (8005b78 <prvSwitchTimerLists+0xc4>)
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	6013      	str	r3, [r2, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	3718      	adds	r7, #24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	20000d38 	.word	0x20000d38
 8005b78:	20000d3c 	.word	0x20000d3c

08005b7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b82:	f000 f967 	bl	8005e54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b86:	4b15      	ldr	r3, [pc, #84]	; (8005bdc <prvCheckForValidListAndQueue+0x60>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d120      	bne.n	8005bd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b8e:	4814      	ldr	r0, [pc, #80]	; (8005be0 <prvCheckForValidListAndQueue+0x64>)
 8005b90:	f7fe f81e 	bl	8003bd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005b94:	4813      	ldr	r0, [pc, #76]	; (8005be4 <prvCheckForValidListAndQueue+0x68>)
 8005b96:	f7fe f81b 	bl	8003bd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b9a:	4b13      	ldr	r3, [pc, #76]	; (8005be8 <prvCheckForValidListAndQueue+0x6c>)
 8005b9c:	4a10      	ldr	r2, [pc, #64]	; (8005be0 <prvCheckForValidListAndQueue+0x64>)
 8005b9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005ba0:	4b12      	ldr	r3, [pc, #72]	; (8005bec <prvCheckForValidListAndQueue+0x70>)
 8005ba2:	4a10      	ldr	r2, [pc, #64]	; (8005be4 <prvCheckForValidListAndQueue+0x68>)
 8005ba4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	4b11      	ldr	r3, [pc, #68]	; (8005bf0 <prvCheckForValidListAndQueue+0x74>)
 8005bac:	4a11      	ldr	r2, [pc, #68]	; (8005bf4 <prvCheckForValidListAndQueue+0x78>)
 8005bae:	2110      	movs	r1, #16
 8005bb0:	200a      	movs	r0, #10
 8005bb2:	f7fe f929 	bl	8003e08 <xQueueGenericCreateStatic>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	4a08      	ldr	r2, [pc, #32]	; (8005bdc <prvCheckForValidListAndQueue+0x60>)
 8005bba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005bbc:	4b07      	ldr	r3, [pc, #28]	; (8005bdc <prvCheckForValidListAndQueue+0x60>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d005      	beq.n	8005bd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005bc4:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <prvCheckForValidListAndQueue+0x60>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	490b      	ldr	r1, [pc, #44]	; (8005bf8 <prvCheckForValidListAndQueue+0x7c>)
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fe fd42 	bl	8004654 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bd0:	f000 f970 	bl	8005eb4 <vPortExitCritical>
}
 8005bd4:	bf00      	nop
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000d40 	.word	0x20000d40
 8005be0:	20000d10 	.word	0x20000d10
 8005be4:	20000d24 	.word	0x20000d24
 8005be8:	20000d38 	.word	0x20000d38
 8005bec:	20000d3c 	.word	0x20000d3c
 8005bf0:	20000dec 	.word	0x20000dec
 8005bf4:	20000d4c 	.word	0x20000d4c
 8005bf8:	08006e5c 	.word	0x08006e5c

08005bfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3b04      	subs	r3, #4
 8005c0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3b04      	subs	r3, #4
 8005c1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f023 0201 	bic.w	r2, r3, #1
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	3b04      	subs	r3, #4
 8005c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c2c:	4a0c      	ldr	r2, [pc, #48]	; (8005c60 <pxPortInitialiseStack+0x64>)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3b14      	subs	r3, #20
 8005c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3b04      	subs	r3, #4
 8005c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f06f 0202 	mvn.w	r2, #2
 8005c4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3b20      	subs	r3, #32
 8005c50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c52:	68fb      	ldr	r3, [r7, #12]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3714      	adds	r7, #20
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	08005c65 	.word	0x08005c65

08005c64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c6e:	4b12      	ldr	r3, [pc, #72]	; (8005cb8 <prvTaskExitError+0x54>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c76:	d00a      	beq.n	8005c8e <prvTaskExitError+0x2a>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	60fb      	str	r3, [r7, #12]
}
 8005c8a:	bf00      	nop
 8005c8c:	e7fe      	b.n	8005c8c <prvTaskExitError+0x28>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	60bb      	str	r3, [r7, #8]
}
 8005ca0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ca2:	bf00      	nop
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d0fc      	beq.n	8005ca4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005caa:	bf00      	nop
 8005cac:	bf00      	nop
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	2000000c 	.word	0x2000000c
 8005cbc:	00000000 	.word	0x00000000

08005cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005cc0:	4b07      	ldr	r3, [pc, #28]	; (8005ce0 <pxCurrentTCBConst2>)
 8005cc2:	6819      	ldr	r1, [r3, #0]
 8005cc4:	6808      	ldr	r0, [r1, #0]
 8005cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cca:	f380 8809 	msr	PSP, r0
 8005cce:	f3bf 8f6f 	isb	sy
 8005cd2:	f04f 0000 	mov.w	r0, #0
 8005cd6:	f380 8811 	msr	BASEPRI, r0
 8005cda:	4770      	bx	lr
 8005cdc:	f3af 8000 	nop.w

08005ce0 <pxCurrentTCBConst2>:
 8005ce0:	20000810 	.word	0x20000810
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop

08005ce8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ce8:	4808      	ldr	r0, [pc, #32]	; (8005d0c <prvPortStartFirstTask+0x24>)
 8005cea:	6800      	ldr	r0, [r0, #0]
 8005cec:	6800      	ldr	r0, [r0, #0]
 8005cee:	f380 8808 	msr	MSP, r0
 8005cf2:	f04f 0000 	mov.w	r0, #0
 8005cf6:	f380 8814 	msr	CONTROL, r0
 8005cfa:	b662      	cpsie	i
 8005cfc:	b661      	cpsie	f
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	f3bf 8f6f 	isb	sy
 8005d06:	df00      	svc	0
 8005d08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d0a:	bf00      	nop
 8005d0c:	e000ed08 	.word	0xe000ed08

08005d10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b086      	sub	sp, #24
 8005d14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d16:	4b46      	ldr	r3, [pc, #280]	; (8005e30 <xPortStartScheduler+0x120>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a46      	ldr	r2, [pc, #280]	; (8005e34 <xPortStartScheduler+0x124>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d10a      	bne.n	8005d36 <xPortStartScheduler+0x26>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	613b      	str	r3, [r7, #16]
}
 8005d32:	bf00      	nop
 8005d34:	e7fe      	b.n	8005d34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d36:	4b3e      	ldr	r3, [pc, #248]	; (8005e30 <xPortStartScheduler+0x120>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a3f      	ldr	r2, [pc, #252]	; (8005e38 <xPortStartScheduler+0x128>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d10a      	bne.n	8005d56 <xPortStartScheduler+0x46>
	__asm volatile
 8005d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d44:	f383 8811 	msr	BASEPRI, r3
 8005d48:	f3bf 8f6f 	isb	sy
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	60fb      	str	r3, [r7, #12]
}
 8005d52:	bf00      	nop
 8005d54:	e7fe      	b.n	8005d54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d56:	4b39      	ldr	r3, [pc, #228]	; (8005e3c <xPortStartScheduler+0x12c>)
 8005d58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	22ff      	movs	r2, #255	; 0xff
 8005d66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	4b31      	ldr	r3, [pc, #196]	; (8005e40 <xPortStartScheduler+0x130>)
 8005d7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d7e:	4b31      	ldr	r3, [pc, #196]	; (8005e44 <xPortStartScheduler+0x134>)
 8005d80:	2207      	movs	r2, #7
 8005d82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d84:	e009      	b.n	8005d9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005d86:	4b2f      	ldr	r3, [pc, #188]	; (8005e44 <xPortStartScheduler+0x134>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	4a2d      	ldr	r2, [pc, #180]	; (8005e44 <xPortStartScheduler+0x134>)
 8005d8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d9a:	78fb      	ldrb	r3, [r7, #3]
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005da2:	2b80      	cmp	r3, #128	; 0x80
 8005da4:	d0ef      	beq.n	8005d86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005da6:	4b27      	ldr	r3, [pc, #156]	; (8005e44 <xPortStartScheduler+0x134>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f1c3 0307 	rsb	r3, r3, #7
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d00a      	beq.n	8005dc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	60bb      	str	r3, [r7, #8]
}
 8005dc4:	bf00      	nop
 8005dc6:	e7fe      	b.n	8005dc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005dc8:	4b1e      	ldr	r3, [pc, #120]	; (8005e44 <xPortStartScheduler+0x134>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	021b      	lsls	r3, r3, #8
 8005dce:	4a1d      	ldr	r2, [pc, #116]	; (8005e44 <xPortStartScheduler+0x134>)
 8005dd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005dd2:	4b1c      	ldr	r3, [pc, #112]	; (8005e44 <xPortStartScheduler+0x134>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005dda:	4a1a      	ldr	r2, [pc, #104]	; (8005e44 <xPortStartScheduler+0x134>)
 8005ddc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005de6:	4b18      	ldr	r3, [pc, #96]	; (8005e48 <xPortStartScheduler+0x138>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a17      	ldr	r2, [pc, #92]	; (8005e48 <xPortStartScheduler+0x138>)
 8005dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005df0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005df2:	4b15      	ldr	r3, [pc, #84]	; (8005e48 <xPortStartScheduler+0x138>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a14      	ldr	r2, [pc, #80]	; (8005e48 <xPortStartScheduler+0x138>)
 8005df8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005dfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005dfe:	f000 f8dd 	bl	8005fbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e02:	4b12      	ldr	r3, [pc, #72]	; (8005e4c <xPortStartScheduler+0x13c>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e08:	f000 f8fc 	bl	8006004 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e0c:	4b10      	ldr	r3, [pc, #64]	; (8005e50 <xPortStartScheduler+0x140>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a0f      	ldr	r2, [pc, #60]	; (8005e50 <xPortStartScheduler+0x140>)
 8005e12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005e16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e18:	f7ff ff66 	bl	8005ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e1c:	f7ff f84a 	bl	8004eb4 <vTaskSwitchContext>
	prvTaskExitError();
 8005e20:	f7ff ff20 	bl	8005c64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	e000ed00 	.word	0xe000ed00
 8005e34:	410fc271 	.word	0x410fc271
 8005e38:	410fc270 	.word	0x410fc270
 8005e3c:	e000e400 	.word	0xe000e400
 8005e40:	20000e3c 	.word	0x20000e3c
 8005e44:	20000e40 	.word	0x20000e40
 8005e48:	e000ed20 	.word	0xe000ed20
 8005e4c:	2000000c 	.word	0x2000000c
 8005e50:	e000ef34 	.word	0xe000ef34

08005e54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	607b      	str	r3, [r7, #4]
}
 8005e6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e6e:	4b0f      	ldr	r3, [pc, #60]	; (8005eac <vPortEnterCritical+0x58>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3301      	adds	r3, #1
 8005e74:	4a0d      	ldr	r2, [pc, #52]	; (8005eac <vPortEnterCritical+0x58>)
 8005e76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e78:	4b0c      	ldr	r3, [pc, #48]	; (8005eac <vPortEnterCritical+0x58>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d10f      	bne.n	8005ea0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e80:	4b0b      	ldr	r3, [pc, #44]	; (8005eb0 <vPortEnterCritical+0x5c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	603b      	str	r3, [r7, #0]
}
 8005e9c:	bf00      	nop
 8005e9e:	e7fe      	b.n	8005e9e <vPortEnterCritical+0x4a>
	}
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	2000000c 	.word	0x2000000c
 8005eb0:	e000ed04 	.word	0xe000ed04

08005eb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005eba:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <vPortExitCritical+0x50>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10a      	bne.n	8005ed8 <vPortExitCritical+0x24>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	607b      	str	r3, [r7, #4]
}
 8005ed4:	bf00      	nop
 8005ed6:	e7fe      	b.n	8005ed6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ed8:	4b0a      	ldr	r3, [pc, #40]	; (8005f04 <vPortExitCritical+0x50>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3b01      	subs	r3, #1
 8005ede:	4a09      	ldr	r2, [pc, #36]	; (8005f04 <vPortExitCritical+0x50>)
 8005ee0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ee2:	4b08      	ldr	r3, [pc, #32]	; (8005f04 <vPortExitCritical+0x50>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d105      	bne.n	8005ef6 <vPortExitCritical+0x42>
 8005eea:	2300      	movs	r3, #0
 8005eec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	f383 8811 	msr	BASEPRI, r3
}
 8005ef4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	2000000c 	.word	0x2000000c
	...

08005f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f10:	f3ef 8009 	mrs	r0, PSP
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	4b15      	ldr	r3, [pc, #84]	; (8005f70 <pxCurrentTCBConst>)
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	f01e 0f10 	tst.w	lr, #16
 8005f20:	bf08      	it	eq
 8005f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f2a:	6010      	str	r0, [r2, #0]
 8005f2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f34:	f380 8811 	msr	BASEPRI, r0
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f7fe ffb8 	bl	8004eb4 <vTaskSwitchContext>
 8005f44:	f04f 0000 	mov.w	r0, #0
 8005f48:	f380 8811 	msr	BASEPRI, r0
 8005f4c:	bc09      	pop	{r0, r3}
 8005f4e:	6819      	ldr	r1, [r3, #0]
 8005f50:	6808      	ldr	r0, [r1, #0]
 8005f52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f56:	f01e 0f10 	tst.w	lr, #16
 8005f5a:	bf08      	it	eq
 8005f5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f60:	f380 8809 	msr	PSP, r0
 8005f64:	f3bf 8f6f 	isb	sy
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	f3af 8000 	nop.w

08005f70 <pxCurrentTCBConst>:
 8005f70:	20000810 	.word	0x20000810
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f74:	bf00      	nop
 8005f76:	bf00      	nop

08005f78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f82:	f383 8811 	msr	BASEPRI, r3
 8005f86:	f3bf 8f6f 	isb	sy
 8005f8a:	f3bf 8f4f 	dsb	sy
 8005f8e:	607b      	str	r3, [r7, #4]
}
 8005f90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f92:	f7fe fed5 	bl	8004d40 <xTaskIncrementTick>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d003      	beq.n	8005fa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f9c:	4b06      	ldr	r3, [pc, #24]	; (8005fb8 <xPortSysTickHandler+0x40>)
 8005f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	f383 8811 	msr	BASEPRI, r3
}
 8005fae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005fb0:	bf00      	nop
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	e000ed04 	.word	0xe000ed04

08005fbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005fc0:	4b0b      	ldr	r3, [pc, #44]	; (8005ff0 <vPortSetupTimerInterrupt+0x34>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005fc6:	4b0b      	ldr	r3, [pc, #44]	; (8005ff4 <vPortSetupTimerInterrupt+0x38>)
 8005fc8:	2200      	movs	r2, #0
 8005fca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	; (8005ff8 <vPortSetupTimerInterrupt+0x3c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a0a      	ldr	r2, [pc, #40]	; (8005ffc <vPortSetupTimerInterrupt+0x40>)
 8005fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd6:	099b      	lsrs	r3, r3, #6
 8005fd8:	4a09      	ldr	r2, [pc, #36]	; (8006000 <vPortSetupTimerInterrupt+0x44>)
 8005fda:	3b01      	subs	r3, #1
 8005fdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005fde:	4b04      	ldr	r3, [pc, #16]	; (8005ff0 <vPortSetupTimerInterrupt+0x34>)
 8005fe0:	2207      	movs	r2, #7
 8005fe2:	601a      	str	r2, [r3, #0]
}
 8005fe4:	bf00      	nop
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	e000e010 	.word	0xe000e010
 8005ff4:	e000e018 	.word	0xe000e018
 8005ff8:	20000000 	.word	0x20000000
 8005ffc:	10624dd3 	.word	0x10624dd3
 8006000:	e000e014 	.word	0xe000e014

08006004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006004:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006014 <vPortEnableVFP+0x10>
 8006008:	6801      	ldr	r1, [r0, #0]
 800600a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800600e:	6001      	str	r1, [r0, #0]
 8006010:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006012:	bf00      	nop
 8006014:	e000ed88 	.word	0xe000ed88

08006018 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800601e:	f3ef 8305 	mrs	r3, IPSR
 8006022:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2b0f      	cmp	r3, #15
 8006028:	d914      	bls.n	8006054 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800602a:	4a17      	ldr	r2, [pc, #92]	; (8006088 <vPortValidateInterruptPriority+0x70>)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4413      	add	r3, r2
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006034:	4b15      	ldr	r3, [pc, #84]	; (800608c <vPortValidateInterruptPriority+0x74>)
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	7afa      	ldrb	r2, [r7, #11]
 800603a:	429a      	cmp	r2, r3
 800603c:	d20a      	bcs.n	8006054 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	607b      	str	r3, [r7, #4]
}
 8006050:	bf00      	nop
 8006052:	e7fe      	b.n	8006052 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006054:	4b0e      	ldr	r3, [pc, #56]	; (8006090 <vPortValidateInterruptPriority+0x78>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800605c:	4b0d      	ldr	r3, [pc, #52]	; (8006094 <vPortValidateInterruptPriority+0x7c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	429a      	cmp	r2, r3
 8006062:	d90a      	bls.n	800607a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006068:	f383 8811 	msr	BASEPRI, r3
 800606c:	f3bf 8f6f 	isb	sy
 8006070:	f3bf 8f4f 	dsb	sy
 8006074:	603b      	str	r3, [r7, #0]
}
 8006076:	bf00      	nop
 8006078:	e7fe      	b.n	8006078 <vPortValidateInterruptPriority+0x60>
	}
 800607a:	bf00      	nop
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	e000e3f0 	.word	0xe000e3f0
 800608c:	20000e3c 	.word	0x20000e3c
 8006090:	e000ed0c 	.word	0xe000ed0c
 8006094:	20000e40 	.word	0x20000e40

08006098 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b08a      	sub	sp, #40	; 0x28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80060a0:	2300      	movs	r3, #0
 80060a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80060a4:	f7fe fd90 	bl	8004bc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80060a8:	4b5b      	ldr	r3, [pc, #364]	; (8006218 <pvPortMalloc+0x180>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80060b0:	f000 f920 	bl	80062f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060b4:	4b59      	ldr	r3, [pc, #356]	; (800621c <pvPortMalloc+0x184>)
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4013      	ands	r3, r2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f040 8093 	bne.w	80061e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01d      	beq.n	8006104 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80060c8:	2208      	movs	r2, #8
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4413      	add	r3, r2
 80060ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d014      	beq.n	8006104 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f023 0307 	bic.w	r3, r3, #7
 80060e0:	3308      	adds	r3, #8
 80060e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00a      	beq.n	8006104 <pvPortMalloc+0x6c>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	617b      	str	r3, [r7, #20]
}
 8006100:	bf00      	nop
 8006102:	e7fe      	b.n	8006102 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d06e      	beq.n	80061e8 <pvPortMalloc+0x150>
 800610a:	4b45      	ldr	r3, [pc, #276]	; (8006220 <pvPortMalloc+0x188>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	429a      	cmp	r2, r3
 8006112:	d869      	bhi.n	80061e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006114:	4b43      	ldr	r3, [pc, #268]	; (8006224 <pvPortMalloc+0x18c>)
 8006116:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006118:	4b42      	ldr	r3, [pc, #264]	; (8006224 <pvPortMalloc+0x18c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800611e:	e004      	b.n	800612a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800612a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	429a      	cmp	r2, r3
 8006132:	d903      	bls.n	800613c <pvPortMalloc+0xa4>
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1f1      	bne.n	8006120 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800613c:	4b36      	ldr	r3, [pc, #216]	; (8006218 <pvPortMalloc+0x180>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006142:	429a      	cmp	r2, r3
 8006144:	d050      	beq.n	80061e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2208      	movs	r2, #8
 800614c:	4413      	add	r3, r2
 800614e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	1ad2      	subs	r2, r2, r3
 8006160:	2308      	movs	r3, #8
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	429a      	cmp	r2, r3
 8006166:	d91f      	bls.n	80061a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4413      	add	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	f003 0307 	and.w	r3, r3, #7
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00a      	beq.n	8006190 <pvPortMalloc+0xf8>
	__asm volatile
 800617a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	613b      	str	r3, [r7, #16]
}
 800618c:	bf00      	nop
 800618e:	e7fe      	b.n	800618e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	1ad2      	subs	r2, r2, r3
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800619c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061a2:	69b8      	ldr	r0, [r7, #24]
 80061a4:	f000 f908 	bl	80063b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061a8:	4b1d      	ldr	r3, [pc, #116]	; (8006220 <pvPortMalloc+0x188>)
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	4a1b      	ldr	r2, [pc, #108]	; (8006220 <pvPortMalloc+0x188>)
 80061b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061b6:	4b1a      	ldr	r3, [pc, #104]	; (8006220 <pvPortMalloc+0x188>)
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	4b1b      	ldr	r3, [pc, #108]	; (8006228 <pvPortMalloc+0x190>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d203      	bcs.n	80061ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80061c2:	4b17      	ldr	r3, [pc, #92]	; (8006220 <pvPortMalloc+0x188>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a18      	ldr	r2, [pc, #96]	; (8006228 <pvPortMalloc+0x190>)
 80061c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	4b13      	ldr	r3, [pc, #76]	; (800621c <pvPortMalloc+0x184>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	431a      	orrs	r2, r3
 80061d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	2200      	movs	r2, #0
 80061dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80061de:	4b13      	ldr	r3, [pc, #76]	; (800622c <pvPortMalloc+0x194>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3301      	adds	r3, #1
 80061e4:	4a11      	ldr	r2, [pc, #68]	; (800622c <pvPortMalloc+0x194>)
 80061e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061e8:	f7fe fcfc 	bl	8004be4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f003 0307 	and.w	r3, r3, #7
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <pvPortMalloc+0x174>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	60fb      	str	r3, [r7, #12]
}
 8006208:	bf00      	nop
 800620a:	e7fe      	b.n	800620a <pvPortMalloc+0x172>
	return pvReturn;
 800620c:	69fb      	ldr	r3, [r7, #28]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3728      	adds	r7, #40	; 0x28
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20004a4c 	.word	0x20004a4c
 800621c:	20004a60 	.word	0x20004a60
 8006220:	20004a50 	.word	0x20004a50
 8006224:	20004a44 	.word	0x20004a44
 8006228:	20004a54 	.word	0x20004a54
 800622c:	20004a58 	.word	0x20004a58

08006230 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d04d      	beq.n	80062de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006242:	2308      	movs	r3, #8
 8006244:	425b      	negs	r3, r3
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4413      	add	r3, r2
 800624a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	4b24      	ldr	r3, [pc, #144]	; (80062e8 <vPortFree+0xb8>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4013      	ands	r3, r2
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10a      	bne.n	8006274 <vPortFree+0x44>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	60fb      	str	r3, [r7, #12]
}
 8006270:	bf00      	nop
 8006272:	e7fe      	b.n	8006272 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00a      	beq.n	8006292 <vPortFree+0x62>
	__asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	60bb      	str	r3, [r7, #8]
}
 800628e:	bf00      	nop
 8006290:	e7fe      	b.n	8006290 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	4b14      	ldr	r3, [pc, #80]	; (80062e8 <vPortFree+0xb8>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4013      	ands	r3, r2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d01e      	beq.n	80062de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d11a      	bne.n	80062de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	4b0e      	ldr	r3, [pc, #56]	; (80062e8 <vPortFree+0xb8>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	43db      	mvns	r3, r3
 80062b2:	401a      	ands	r2, r3
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80062b8:	f7fe fc86 	bl	8004bc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	4b0a      	ldr	r3, [pc, #40]	; (80062ec <vPortFree+0xbc>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4413      	add	r3, r2
 80062c6:	4a09      	ldr	r2, [pc, #36]	; (80062ec <vPortFree+0xbc>)
 80062c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062ca:	6938      	ldr	r0, [r7, #16]
 80062cc:	f000 f874 	bl	80063b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80062d0:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <vPortFree+0xc0>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3301      	adds	r3, #1
 80062d6:	4a06      	ldr	r2, [pc, #24]	; (80062f0 <vPortFree+0xc0>)
 80062d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80062da:	f7fe fc83 	bl	8004be4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80062de:	bf00      	nop
 80062e0:	3718      	adds	r7, #24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	20004a60 	.word	0x20004a60
 80062ec:	20004a50 	.word	0x20004a50
 80062f0:	20004a5c 	.word	0x20004a5c

080062f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80062fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006300:	4b27      	ldr	r3, [pc, #156]	; (80063a0 <prvHeapInit+0xac>)
 8006302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00c      	beq.n	8006328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3307      	adds	r3, #7
 8006312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f023 0307 	bic.w	r3, r3, #7
 800631a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	4a1f      	ldr	r2, [pc, #124]	; (80063a0 <prvHeapInit+0xac>)
 8006324:	4413      	add	r3, r2
 8006326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800632c:	4a1d      	ldr	r2, [pc, #116]	; (80063a4 <prvHeapInit+0xb0>)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006332:	4b1c      	ldr	r3, [pc, #112]	; (80063a4 <prvHeapInit+0xb0>)
 8006334:	2200      	movs	r2, #0
 8006336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	4413      	add	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006340:	2208      	movs	r2, #8
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	1a9b      	subs	r3, r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0307 	bic.w	r3, r3, #7
 800634e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4a15      	ldr	r2, [pc, #84]	; (80063a8 <prvHeapInit+0xb4>)
 8006354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006356:	4b14      	ldr	r3, [pc, #80]	; (80063a8 <prvHeapInit+0xb4>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2200      	movs	r2, #0
 800635c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800635e:	4b12      	ldr	r3, [pc, #72]	; (80063a8 <prvHeapInit+0xb4>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	1ad2      	subs	r2, r2, r3
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006374:	4b0c      	ldr	r3, [pc, #48]	; (80063a8 <prvHeapInit+0xb4>)
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	4a0a      	ldr	r2, [pc, #40]	; (80063ac <prvHeapInit+0xb8>)
 8006382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	4a09      	ldr	r2, [pc, #36]	; (80063b0 <prvHeapInit+0xbc>)
 800638a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800638c:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <prvHeapInit+0xc0>)
 800638e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006392:	601a      	str	r2, [r3, #0]
}
 8006394:	bf00      	nop
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	20000e44 	.word	0x20000e44
 80063a4:	20004a44 	.word	0x20004a44
 80063a8:	20004a4c 	.word	0x20004a4c
 80063ac:	20004a54 	.word	0x20004a54
 80063b0:	20004a50 	.word	0x20004a50
 80063b4:	20004a60 	.word	0x20004a60

080063b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80063c0:	4b28      	ldr	r3, [pc, #160]	; (8006464 <prvInsertBlockIntoFreeList+0xac>)
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	e002      	b.n	80063cc <prvInsertBlockIntoFreeList+0x14>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d8f7      	bhi.n	80063c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	4413      	add	r3, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d108      	bne.n	80063fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	441a      	add	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	441a      	add	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d118      	bne.n	8006440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	4b15      	ldr	r3, [pc, #84]	; (8006468 <prvInsertBlockIntoFreeList+0xb0>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d00d      	beq.n	8006436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	441a      	add	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	e008      	b.n	8006448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006436:	4b0c      	ldr	r3, [pc, #48]	; (8006468 <prvInsertBlockIntoFreeList+0xb0>)
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	e003      	b.n	8006448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	429a      	cmp	r2, r3
 800644e:	d002      	beq.n	8006456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006456:	bf00      	nop
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	20004a44 	.word	0x20004a44
 8006468:	20004a4c 	.word	0x20004a4c

0800646c <__errno>:
 800646c:	4b01      	ldr	r3, [pc, #4]	; (8006474 <__errno+0x8>)
 800646e:	6818      	ldr	r0, [r3, #0]
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	20000010 	.word	0x20000010

08006478 <__libc_init_array>:
 8006478:	b570      	push	{r4, r5, r6, lr}
 800647a:	4d0d      	ldr	r5, [pc, #52]	; (80064b0 <__libc_init_array+0x38>)
 800647c:	4c0d      	ldr	r4, [pc, #52]	; (80064b4 <__libc_init_array+0x3c>)
 800647e:	1b64      	subs	r4, r4, r5
 8006480:	10a4      	asrs	r4, r4, #2
 8006482:	2600      	movs	r6, #0
 8006484:	42a6      	cmp	r6, r4
 8006486:	d109      	bne.n	800649c <__libc_init_array+0x24>
 8006488:	4d0b      	ldr	r5, [pc, #44]	; (80064b8 <__libc_init_array+0x40>)
 800648a:	4c0c      	ldr	r4, [pc, #48]	; (80064bc <__libc_init_array+0x44>)
 800648c:	f000 fcc0 	bl	8006e10 <_init>
 8006490:	1b64      	subs	r4, r4, r5
 8006492:	10a4      	asrs	r4, r4, #2
 8006494:	2600      	movs	r6, #0
 8006496:	42a6      	cmp	r6, r4
 8006498:	d105      	bne.n	80064a6 <__libc_init_array+0x2e>
 800649a:	bd70      	pop	{r4, r5, r6, pc}
 800649c:	f855 3b04 	ldr.w	r3, [r5], #4
 80064a0:	4798      	blx	r3
 80064a2:	3601      	adds	r6, #1
 80064a4:	e7ee      	b.n	8006484 <__libc_init_array+0xc>
 80064a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80064aa:	4798      	blx	r3
 80064ac:	3601      	adds	r6, #1
 80064ae:	e7f2      	b.n	8006496 <__libc_init_array+0x1e>
 80064b0:	08006f3c 	.word	0x08006f3c
 80064b4:	08006f3c 	.word	0x08006f3c
 80064b8:	08006f3c 	.word	0x08006f3c
 80064bc:	08006f40 	.word	0x08006f40

080064c0 <__retarget_lock_acquire_recursive>:
 80064c0:	4770      	bx	lr

080064c2 <__retarget_lock_release_recursive>:
 80064c2:	4770      	bx	lr

080064c4 <malloc>:
 80064c4:	4b02      	ldr	r3, [pc, #8]	; (80064d0 <malloc+0xc>)
 80064c6:	4601      	mov	r1, r0
 80064c8:	6818      	ldr	r0, [r3, #0]
 80064ca:	f000 b869 	b.w	80065a0 <_malloc_r>
 80064ce:	bf00      	nop
 80064d0:	20000010 	.word	0x20000010

080064d4 <memcpy>:
 80064d4:	440a      	add	r2, r1
 80064d6:	4291      	cmp	r1, r2
 80064d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80064dc:	d100      	bne.n	80064e0 <memcpy+0xc>
 80064de:	4770      	bx	lr
 80064e0:	b510      	push	{r4, lr}
 80064e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064ea:	4291      	cmp	r1, r2
 80064ec:	d1f9      	bne.n	80064e2 <memcpy+0xe>
 80064ee:	bd10      	pop	{r4, pc}

080064f0 <memset>:
 80064f0:	4402      	add	r2, r0
 80064f2:	4603      	mov	r3, r0
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d100      	bne.n	80064fa <memset+0xa>
 80064f8:	4770      	bx	lr
 80064fa:	f803 1b01 	strb.w	r1, [r3], #1
 80064fe:	e7f9      	b.n	80064f4 <memset+0x4>

08006500 <_free_r>:
 8006500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006502:	2900      	cmp	r1, #0
 8006504:	d048      	beq.n	8006598 <_free_r+0x98>
 8006506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800650a:	9001      	str	r0, [sp, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	f1a1 0404 	sub.w	r4, r1, #4
 8006512:	bfb8      	it	lt
 8006514:	18e4      	addlt	r4, r4, r3
 8006516:	f000 f937 	bl	8006788 <__malloc_lock>
 800651a:	4a20      	ldr	r2, [pc, #128]	; (800659c <_free_r+0x9c>)
 800651c:	9801      	ldr	r0, [sp, #4]
 800651e:	6813      	ldr	r3, [r2, #0]
 8006520:	4615      	mov	r5, r2
 8006522:	b933      	cbnz	r3, 8006532 <_free_r+0x32>
 8006524:	6063      	str	r3, [r4, #4]
 8006526:	6014      	str	r4, [r2, #0]
 8006528:	b003      	add	sp, #12
 800652a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800652e:	f000 b931 	b.w	8006794 <__malloc_unlock>
 8006532:	42a3      	cmp	r3, r4
 8006534:	d90b      	bls.n	800654e <_free_r+0x4e>
 8006536:	6821      	ldr	r1, [r4, #0]
 8006538:	1862      	adds	r2, r4, r1
 800653a:	4293      	cmp	r3, r2
 800653c:	bf04      	itt	eq
 800653e:	681a      	ldreq	r2, [r3, #0]
 8006540:	685b      	ldreq	r3, [r3, #4]
 8006542:	6063      	str	r3, [r4, #4]
 8006544:	bf04      	itt	eq
 8006546:	1852      	addeq	r2, r2, r1
 8006548:	6022      	streq	r2, [r4, #0]
 800654a:	602c      	str	r4, [r5, #0]
 800654c:	e7ec      	b.n	8006528 <_free_r+0x28>
 800654e:	461a      	mov	r2, r3
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	b10b      	cbz	r3, 8006558 <_free_r+0x58>
 8006554:	42a3      	cmp	r3, r4
 8006556:	d9fa      	bls.n	800654e <_free_r+0x4e>
 8006558:	6811      	ldr	r1, [r2, #0]
 800655a:	1855      	adds	r5, r2, r1
 800655c:	42a5      	cmp	r5, r4
 800655e:	d10b      	bne.n	8006578 <_free_r+0x78>
 8006560:	6824      	ldr	r4, [r4, #0]
 8006562:	4421      	add	r1, r4
 8006564:	1854      	adds	r4, r2, r1
 8006566:	42a3      	cmp	r3, r4
 8006568:	6011      	str	r1, [r2, #0]
 800656a:	d1dd      	bne.n	8006528 <_free_r+0x28>
 800656c:	681c      	ldr	r4, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	6053      	str	r3, [r2, #4]
 8006572:	4421      	add	r1, r4
 8006574:	6011      	str	r1, [r2, #0]
 8006576:	e7d7      	b.n	8006528 <_free_r+0x28>
 8006578:	d902      	bls.n	8006580 <_free_r+0x80>
 800657a:	230c      	movs	r3, #12
 800657c:	6003      	str	r3, [r0, #0]
 800657e:	e7d3      	b.n	8006528 <_free_r+0x28>
 8006580:	6825      	ldr	r5, [r4, #0]
 8006582:	1961      	adds	r1, r4, r5
 8006584:	428b      	cmp	r3, r1
 8006586:	bf04      	itt	eq
 8006588:	6819      	ldreq	r1, [r3, #0]
 800658a:	685b      	ldreq	r3, [r3, #4]
 800658c:	6063      	str	r3, [r4, #4]
 800658e:	bf04      	itt	eq
 8006590:	1949      	addeq	r1, r1, r5
 8006592:	6021      	streq	r1, [r4, #0]
 8006594:	6054      	str	r4, [r2, #4]
 8006596:	e7c7      	b.n	8006528 <_free_r+0x28>
 8006598:	b003      	add	sp, #12
 800659a:	bd30      	pop	{r4, r5, pc}
 800659c:	20004a64 	.word	0x20004a64

080065a0 <_malloc_r>:
 80065a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a2:	1ccd      	adds	r5, r1, #3
 80065a4:	f025 0503 	bic.w	r5, r5, #3
 80065a8:	3508      	adds	r5, #8
 80065aa:	2d0c      	cmp	r5, #12
 80065ac:	bf38      	it	cc
 80065ae:	250c      	movcc	r5, #12
 80065b0:	2d00      	cmp	r5, #0
 80065b2:	4606      	mov	r6, r0
 80065b4:	db01      	blt.n	80065ba <_malloc_r+0x1a>
 80065b6:	42a9      	cmp	r1, r5
 80065b8:	d903      	bls.n	80065c2 <_malloc_r+0x22>
 80065ba:	230c      	movs	r3, #12
 80065bc:	6033      	str	r3, [r6, #0]
 80065be:	2000      	movs	r0, #0
 80065c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065c2:	f000 f8e1 	bl	8006788 <__malloc_lock>
 80065c6:	4921      	ldr	r1, [pc, #132]	; (800664c <_malloc_r+0xac>)
 80065c8:	680a      	ldr	r2, [r1, #0]
 80065ca:	4614      	mov	r4, r2
 80065cc:	b99c      	cbnz	r4, 80065f6 <_malloc_r+0x56>
 80065ce:	4f20      	ldr	r7, [pc, #128]	; (8006650 <_malloc_r+0xb0>)
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	b923      	cbnz	r3, 80065de <_malloc_r+0x3e>
 80065d4:	4621      	mov	r1, r4
 80065d6:	4630      	mov	r0, r6
 80065d8:	f000 f8a6 	bl	8006728 <_sbrk_r>
 80065dc:	6038      	str	r0, [r7, #0]
 80065de:	4629      	mov	r1, r5
 80065e0:	4630      	mov	r0, r6
 80065e2:	f000 f8a1 	bl	8006728 <_sbrk_r>
 80065e6:	1c43      	adds	r3, r0, #1
 80065e8:	d123      	bne.n	8006632 <_malloc_r+0x92>
 80065ea:	230c      	movs	r3, #12
 80065ec:	6033      	str	r3, [r6, #0]
 80065ee:	4630      	mov	r0, r6
 80065f0:	f000 f8d0 	bl	8006794 <__malloc_unlock>
 80065f4:	e7e3      	b.n	80065be <_malloc_r+0x1e>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	1b5b      	subs	r3, r3, r5
 80065fa:	d417      	bmi.n	800662c <_malloc_r+0x8c>
 80065fc:	2b0b      	cmp	r3, #11
 80065fe:	d903      	bls.n	8006608 <_malloc_r+0x68>
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	441c      	add	r4, r3
 8006604:	6025      	str	r5, [r4, #0]
 8006606:	e004      	b.n	8006612 <_malloc_r+0x72>
 8006608:	6863      	ldr	r3, [r4, #4]
 800660a:	42a2      	cmp	r2, r4
 800660c:	bf0c      	ite	eq
 800660e:	600b      	streq	r3, [r1, #0]
 8006610:	6053      	strne	r3, [r2, #4]
 8006612:	4630      	mov	r0, r6
 8006614:	f000 f8be 	bl	8006794 <__malloc_unlock>
 8006618:	f104 000b 	add.w	r0, r4, #11
 800661c:	1d23      	adds	r3, r4, #4
 800661e:	f020 0007 	bic.w	r0, r0, #7
 8006622:	1ac2      	subs	r2, r0, r3
 8006624:	d0cc      	beq.n	80065c0 <_malloc_r+0x20>
 8006626:	1a1b      	subs	r3, r3, r0
 8006628:	50a3      	str	r3, [r4, r2]
 800662a:	e7c9      	b.n	80065c0 <_malloc_r+0x20>
 800662c:	4622      	mov	r2, r4
 800662e:	6864      	ldr	r4, [r4, #4]
 8006630:	e7cc      	b.n	80065cc <_malloc_r+0x2c>
 8006632:	1cc4      	adds	r4, r0, #3
 8006634:	f024 0403 	bic.w	r4, r4, #3
 8006638:	42a0      	cmp	r0, r4
 800663a:	d0e3      	beq.n	8006604 <_malloc_r+0x64>
 800663c:	1a21      	subs	r1, r4, r0
 800663e:	4630      	mov	r0, r6
 8006640:	f000 f872 	bl	8006728 <_sbrk_r>
 8006644:	3001      	adds	r0, #1
 8006646:	d1dd      	bne.n	8006604 <_malloc_r+0x64>
 8006648:	e7cf      	b.n	80065ea <_malloc_r+0x4a>
 800664a:	bf00      	nop
 800664c:	20004a64 	.word	0x20004a64
 8006650:	20004a68 	.word	0x20004a68

08006654 <cleanup_glue>:
 8006654:	b538      	push	{r3, r4, r5, lr}
 8006656:	460c      	mov	r4, r1
 8006658:	6809      	ldr	r1, [r1, #0]
 800665a:	4605      	mov	r5, r0
 800665c:	b109      	cbz	r1, 8006662 <cleanup_glue+0xe>
 800665e:	f7ff fff9 	bl	8006654 <cleanup_glue>
 8006662:	4621      	mov	r1, r4
 8006664:	4628      	mov	r0, r5
 8006666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800666a:	f7ff bf49 	b.w	8006500 <_free_r>
	...

08006670 <_reclaim_reent>:
 8006670:	4b2c      	ldr	r3, [pc, #176]	; (8006724 <_reclaim_reent+0xb4>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4283      	cmp	r3, r0
 8006676:	b570      	push	{r4, r5, r6, lr}
 8006678:	4604      	mov	r4, r0
 800667a:	d051      	beq.n	8006720 <_reclaim_reent+0xb0>
 800667c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800667e:	b143      	cbz	r3, 8006692 <_reclaim_reent+0x22>
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d14a      	bne.n	800671c <_reclaim_reent+0xac>
 8006686:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006688:	6819      	ldr	r1, [r3, #0]
 800668a:	b111      	cbz	r1, 8006692 <_reclaim_reent+0x22>
 800668c:	4620      	mov	r0, r4
 800668e:	f7ff ff37 	bl	8006500 <_free_r>
 8006692:	6961      	ldr	r1, [r4, #20]
 8006694:	b111      	cbz	r1, 800669c <_reclaim_reent+0x2c>
 8006696:	4620      	mov	r0, r4
 8006698:	f7ff ff32 	bl	8006500 <_free_r>
 800669c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800669e:	b111      	cbz	r1, 80066a6 <_reclaim_reent+0x36>
 80066a0:	4620      	mov	r0, r4
 80066a2:	f7ff ff2d 	bl	8006500 <_free_r>
 80066a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80066a8:	b111      	cbz	r1, 80066b0 <_reclaim_reent+0x40>
 80066aa:	4620      	mov	r0, r4
 80066ac:	f7ff ff28 	bl	8006500 <_free_r>
 80066b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80066b2:	b111      	cbz	r1, 80066ba <_reclaim_reent+0x4a>
 80066b4:	4620      	mov	r0, r4
 80066b6:	f7ff ff23 	bl	8006500 <_free_r>
 80066ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80066bc:	b111      	cbz	r1, 80066c4 <_reclaim_reent+0x54>
 80066be:	4620      	mov	r0, r4
 80066c0:	f7ff ff1e 	bl	8006500 <_free_r>
 80066c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80066c6:	b111      	cbz	r1, 80066ce <_reclaim_reent+0x5e>
 80066c8:	4620      	mov	r0, r4
 80066ca:	f7ff ff19 	bl	8006500 <_free_r>
 80066ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80066d0:	b111      	cbz	r1, 80066d8 <_reclaim_reent+0x68>
 80066d2:	4620      	mov	r0, r4
 80066d4:	f7ff ff14 	bl	8006500 <_free_r>
 80066d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066da:	b111      	cbz	r1, 80066e2 <_reclaim_reent+0x72>
 80066dc:	4620      	mov	r0, r4
 80066de:	f7ff ff0f 	bl	8006500 <_free_r>
 80066e2:	69a3      	ldr	r3, [r4, #24]
 80066e4:	b1e3      	cbz	r3, 8006720 <_reclaim_reent+0xb0>
 80066e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80066e8:	4620      	mov	r0, r4
 80066ea:	4798      	blx	r3
 80066ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80066ee:	b1b9      	cbz	r1, 8006720 <_reclaim_reent+0xb0>
 80066f0:	4620      	mov	r0, r4
 80066f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80066f6:	f7ff bfad 	b.w	8006654 <cleanup_glue>
 80066fa:	5949      	ldr	r1, [r1, r5]
 80066fc:	b941      	cbnz	r1, 8006710 <_reclaim_reent+0xa0>
 80066fe:	3504      	adds	r5, #4
 8006700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006702:	2d80      	cmp	r5, #128	; 0x80
 8006704:	68d9      	ldr	r1, [r3, #12]
 8006706:	d1f8      	bne.n	80066fa <_reclaim_reent+0x8a>
 8006708:	4620      	mov	r0, r4
 800670a:	f7ff fef9 	bl	8006500 <_free_r>
 800670e:	e7ba      	b.n	8006686 <_reclaim_reent+0x16>
 8006710:	680e      	ldr	r6, [r1, #0]
 8006712:	4620      	mov	r0, r4
 8006714:	f7ff fef4 	bl	8006500 <_free_r>
 8006718:	4631      	mov	r1, r6
 800671a:	e7ef      	b.n	80066fc <_reclaim_reent+0x8c>
 800671c:	2500      	movs	r5, #0
 800671e:	e7ef      	b.n	8006700 <_reclaim_reent+0x90>
 8006720:	bd70      	pop	{r4, r5, r6, pc}
 8006722:	bf00      	nop
 8006724:	20000010 	.word	0x20000010

08006728 <_sbrk_r>:
 8006728:	b538      	push	{r3, r4, r5, lr}
 800672a:	4d06      	ldr	r5, [pc, #24]	; (8006744 <_sbrk_r+0x1c>)
 800672c:	2300      	movs	r3, #0
 800672e:	4604      	mov	r4, r0
 8006730:	4608      	mov	r0, r1
 8006732:	602b      	str	r3, [r5, #0]
 8006734:	f7fa fac8 	bl	8000cc8 <_sbrk>
 8006738:	1c43      	adds	r3, r0, #1
 800673a:	d102      	bne.n	8006742 <_sbrk_r+0x1a>
 800673c:	682b      	ldr	r3, [r5, #0]
 800673e:	b103      	cbz	r3, 8006742 <_sbrk_r+0x1a>
 8006740:	6023      	str	r3, [r4, #0]
 8006742:	bd38      	pop	{r3, r4, r5, pc}
 8006744:	20004f98 	.word	0x20004f98

08006748 <siprintf>:
 8006748:	b40e      	push	{r1, r2, r3}
 800674a:	b500      	push	{lr}
 800674c:	b09c      	sub	sp, #112	; 0x70
 800674e:	ab1d      	add	r3, sp, #116	; 0x74
 8006750:	9002      	str	r0, [sp, #8]
 8006752:	9006      	str	r0, [sp, #24]
 8006754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006758:	4809      	ldr	r0, [pc, #36]	; (8006780 <siprintf+0x38>)
 800675a:	9107      	str	r1, [sp, #28]
 800675c:	9104      	str	r1, [sp, #16]
 800675e:	4909      	ldr	r1, [pc, #36]	; (8006784 <siprintf+0x3c>)
 8006760:	f853 2b04 	ldr.w	r2, [r3], #4
 8006764:	9105      	str	r1, [sp, #20]
 8006766:	6800      	ldr	r0, [r0, #0]
 8006768:	9301      	str	r3, [sp, #4]
 800676a:	a902      	add	r1, sp, #8
 800676c:	f000 f874 	bl	8006858 <_svfiprintf_r>
 8006770:	9b02      	ldr	r3, [sp, #8]
 8006772:	2200      	movs	r2, #0
 8006774:	701a      	strb	r2, [r3, #0]
 8006776:	b01c      	add	sp, #112	; 0x70
 8006778:	f85d eb04 	ldr.w	lr, [sp], #4
 800677c:	b003      	add	sp, #12
 800677e:	4770      	bx	lr
 8006780:	20000010 	.word	0x20000010
 8006784:	ffff0208 	.word	0xffff0208

08006788 <__malloc_lock>:
 8006788:	4801      	ldr	r0, [pc, #4]	; (8006790 <__malloc_lock+0x8>)
 800678a:	f7ff be99 	b.w	80064c0 <__retarget_lock_acquire_recursive>
 800678e:	bf00      	nop
 8006790:	20004f90 	.word	0x20004f90

08006794 <__malloc_unlock>:
 8006794:	4801      	ldr	r0, [pc, #4]	; (800679c <__malloc_unlock+0x8>)
 8006796:	f7ff be94 	b.w	80064c2 <__retarget_lock_release_recursive>
 800679a:	bf00      	nop
 800679c:	20004f90 	.word	0x20004f90

080067a0 <__ssputs_r>:
 80067a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a4:	688e      	ldr	r6, [r1, #8]
 80067a6:	429e      	cmp	r6, r3
 80067a8:	4682      	mov	sl, r0
 80067aa:	460c      	mov	r4, r1
 80067ac:	4690      	mov	r8, r2
 80067ae:	461f      	mov	r7, r3
 80067b0:	d838      	bhi.n	8006824 <__ssputs_r+0x84>
 80067b2:	898a      	ldrh	r2, [r1, #12]
 80067b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067b8:	d032      	beq.n	8006820 <__ssputs_r+0x80>
 80067ba:	6825      	ldr	r5, [r4, #0]
 80067bc:	6909      	ldr	r1, [r1, #16]
 80067be:	eba5 0901 	sub.w	r9, r5, r1
 80067c2:	6965      	ldr	r5, [r4, #20]
 80067c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067cc:	3301      	adds	r3, #1
 80067ce:	444b      	add	r3, r9
 80067d0:	106d      	asrs	r5, r5, #1
 80067d2:	429d      	cmp	r5, r3
 80067d4:	bf38      	it	cc
 80067d6:	461d      	movcc	r5, r3
 80067d8:	0553      	lsls	r3, r2, #21
 80067da:	d531      	bpl.n	8006840 <__ssputs_r+0xa0>
 80067dc:	4629      	mov	r1, r5
 80067de:	f7ff fedf 	bl	80065a0 <_malloc_r>
 80067e2:	4606      	mov	r6, r0
 80067e4:	b950      	cbnz	r0, 80067fc <__ssputs_r+0x5c>
 80067e6:	230c      	movs	r3, #12
 80067e8:	f8ca 3000 	str.w	r3, [sl]
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067f2:	81a3      	strh	r3, [r4, #12]
 80067f4:	f04f 30ff 	mov.w	r0, #4294967295
 80067f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067fc:	6921      	ldr	r1, [r4, #16]
 80067fe:	464a      	mov	r2, r9
 8006800:	f7ff fe68 	bl	80064d4 <memcpy>
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800680a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800680e:	81a3      	strh	r3, [r4, #12]
 8006810:	6126      	str	r6, [r4, #16]
 8006812:	6165      	str	r5, [r4, #20]
 8006814:	444e      	add	r6, r9
 8006816:	eba5 0509 	sub.w	r5, r5, r9
 800681a:	6026      	str	r6, [r4, #0]
 800681c:	60a5      	str	r5, [r4, #8]
 800681e:	463e      	mov	r6, r7
 8006820:	42be      	cmp	r6, r7
 8006822:	d900      	bls.n	8006826 <__ssputs_r+0x86>
 8006824:	463e      	mov	r6, r7
 8006826:	4632      	mov	r2, r6
 8006828:	6820      	ldr	r0, [r4, #0]
 800682a:	4641      	mov	r1, r8
 800682c:	f000 faa8 	bl	8006d80 <memmove>
 8006830:	68a3      	ldr	r3, [r4, #8]
 8006832:	6822      	ldr	r2, [r4, #0]
 8006834:	1b9b      	subs	r3, r3, r6
 8006836:	4432      	add	r2, r6
 8006838:	60a3      	str	r3, [r4, #8]
 800683a:	6022      	str	r2, [r4, #0]
 800683c:	2000      	movs	r0, #0
 800683e:	e7db      	b.n	80067f8 <__ssputs_r+0x58>
 8006840:	462a      	mov	r2, r5
 8006842:	f000 fab7 	bl	8006db4 <_realloc_r>
 8006846:	4606      	mov	r6, r0
 8006848:	2800      	cmp	r0, #0
 800684a:	d1e1      	bne.n	8006810 <__ssputs_r+0x70>
 800684c:	6921      	ldr	r1, [r4, #16]
 800684e:	4650      	mov	r0, sl
 8006850:	f7ff fe56 	bl	8006500 <_free_r>
 8006854:	e7c7      	b.n	80067e6 <__ssputs_r+0x46>
	...

08006858 <_svfiprintf_r>:
 8006858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685c:	4698      	mov	r8, r3
 800685e:	898b      	ldrh	r3, [r1, #12]
 8006860:	061b      	lsls	r3, r3, #24
 8006862:	b09d      	sub	sp, #116	; 0x74
 8006864:	4607      	mov	r7, r0
 8006866:	460d      	mov	r5, r1
 8006868:	4614      	mov	r4, r2
 800686a:	d50e      	bpl.n	800688a <_svfiprintf_r+0x32>
 800686c:	690b      	ldr	r3, [r1, #16]
 800686e:	b963      	cbnz	r3, 800688a <_svfiprintf_r+0x32>
 8006870:	2140      	movs	r1, #64	; 0x40
 8006872:	f7ff fe95 	bl	80065a0 <_malloc_r>
 8006876:	6028      	str	r0, [r5, #0]
 8006878:	6128      	str	r0, [r5, #16]
 800687a:	b920      	cbnz	r0, 8006886 <_svfiprintf_r+0x2e>
 800687c:	230c      	movs	r3, #12
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	f04f 30ff 	mov.w	r0, #4294967295
 8006884:	e0d1      	b.n	8006a2a <_svfiprintf_r+0x1d2>
 8006886:	2340      	movs	r3, #64	; 0x40
 8006888:	616b      	str	r3, [r5, #20]
 800688a:	2300      	movs	r3, #0
 800688c:	9309      	str	r3, [sp, #36]	; 0x24
 800688e:	2320      	movs	r3, #32
 8006890:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006894:	f8cd 800c 	str.w	r8, [sp, #12]
 8006898:	2330      	movs	r3, #48	; 0x30
 800689a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a44 <_svfiprintf_r+0x1ec>
 800689e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068a2:	f04f 0901 	mov.w	r9, #1
 80068a6:	4623      	mov	r3, r4
 80068a8:	469a      	mov	sl, r3
 80068aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068ae:	b10a      	cbz	r2, 80068b4 <_svfiprintf_r+0x5c>
 80068b0:	2a25      	cmp	r2, #37	; 0x25
 80068b2:	d1f9      	bne.n	80068a8 <_svfiprintf_r+0x50>
 80068b4:	ebba 0b04 	subs.w	fp, sl, r4
 80068b8:	d00b      	beq.n	80068d2 <_svfiprintf_r+0x7a>
 80068ba:	465b      	mov	r3, fp
 80068bc:	4622      	mov	r2, r4
 80068be:	4629      	mov	r1, r5
 80068c0:	4638      	mov	r0, r7
 80068c2:	f7ff ff6d 	bl	80067a0 <__ssputs_r>
 80068c6:	3001      	adds	r0, #1
 80068c8:	f000 80aa 	beq.w	8006a20 <_svfiprintf_r+0x1c8>
 80068cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068ce:	445a      	add	r2, fp
 80068d0:	9209      	str	r2, [sp, #36]	; 0x24
 80068d2:	f89a 3000 	ldrb.w	r3, [sl]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 80a2 	beq.w	8006a20 <_svfiprintf_r+0x1c8>
 80068dc:	2300      	movs	r3, #0
 80068de:	f04f 32ff 	mov.w	r2, #4294967295
 80068e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068e6:	f10a 0a01 	add.w	sl, sl, #1
 80068ea:	9304      	str	r3, [sp, #16]
 80068ec:	9307      	str	r3, [sp, #28]
 80068ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068f2:	931a      	str	r3, [sp, #104]	; 0x68
 80068f4:	4654      	mov	r4, sl
 80068f6:	2205      	movs	r2, #5
 80068f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068fc:	4851      	ldr	r0, [pc, #324]	; (8006a44 <_svfiprintf_r+0x1ec>)
 80068fe:	f7f9 fc87 	bl	8000210 <memchr>
 8006902:	9a04      	ldr	r2, [sp, #16]
 8006904:	b9d8      	cbnz	r0, 800693e <_svfiprintf_r+0xe6>
 8006906:	06d0      	lsls	r0, r2, #27
 8006908:	bf44      	itt	mi
 800690a:	2320      	movmi	r3, #32
 800690c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006910:	0711      	lsls	r1, r2, #28
 8006912:	bf44      	itt	mi
 8006914:	232b      	movmi	r3, #43	; 0x2b
 8006916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800691a:	f89a 3000 	ldrb.w	r3, [sl]
 800691e:	2b2a      	cmp	r3, #42	; 0x2a
 8006920:	d015      	beq.n	800694e <_svfiprintf_r+0xf6>
 8006922:	9a07      	ldr	r2, [sp, #28]
 8006924:	4654      	mov	r4, sl
 8006926:	2000      	movs	r0, #0
 8006928:	f04f 0c0a 	mov.w	ip, #10
 800692c:	4621      	mov	r1, r4
 800692e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006932:	3b30      	subs	r3, #48	; 0x30
 8006934:	2b09      	cmp	r3, #9
 8006936:	d94e      	bls.n	80069d6 <_svfiprintf_r+0x17e>
 8006938:	b1b0      	cbz	r0, 8006968 <_svfiprintf_r+0x110>
 800693a:	9207      	str	r2, [sp, #28]
 800693c:	e014      	b.n	8006968 <_svfiprintf_r+0x110>
 800693e:	eba0 0308 	sub.w	r3, r0, r8
 8006942:	fa09 f303 	lsl.w	r3, r9, r3
 8006946:	4313      	orrs	r3, r2
 8006948:	9304      	str	r3, [sp, #16]
 800694a:	46a2      	mov	sl, r4
 800694c:	e7d2      	b.n	80068f4 <_svfiprintf_r+0x9c>
 800694e:	9b03      	ldr	r3, [sp, #12]
 8006950:	1d19      	adds	r1, r3, #4
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	9103      	str	r1, [sp, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	bfbb      	ittet	lt
 800695a:	425b      	neglt	r3, r3
 800695c:	f042 0202 	orrlt.w	r2, r2, #2
 8006960:	9307      	strge	r3, [sp, #28]
 8006962:	9307      	strlt	r3, [sp, #28]
 8006964:	bfb8      	it	lt
 8006966:	9204      	strlt	r2, [sp, #16]
 8006968:	7823      	ldrb	r3, [r4, #0]
 800696a:	2b2e      	cmp	r3, #46	; 0x2e
 800696c:	d10c      	bne.n	8006988 <_svfiprintf_r+0x130>
 800696e:	7863      	ldrb	r3, [r4, #1]
 8006970:	2b2a      	cmp	r3, #42	; 0x2a
 8006972:	d135      	bne.n	80069e0 <_svfiprintf_r+0x188>
 8006974:	9b03      	ldr	r3, [sp, #12]
 8006976:	1d1a      	adds	r2, r3, #4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	9203      	str	r2, [sp, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	bfb8      	it	lt
 8006980:	f04f 33ff 	movlt.w	r3, #4294967295
 8006984:	3402      	adds	r4, #2
 8006986:	9305      	str	r3, [sp, #20]
 8006988:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a54 <_svfiprintf_r+0x1fc>
 800698c:	7821      	ldrb	r1, [r4, #0]
 800698e:	2203      	movs	r2, #3
 8006990:	4650      	mov	r0, sl
 8006992:	f7f9 fc3d 	bl	8000210 <memchr>
 8006996:	b140      	cbz	r0, 80069aa <_svfiprintf_r+0x152>
 8006998:	2340      	movs	r3, #64	; 0x40
 800699a:	eba0 000a 	sub.w	r0, r0, sl
 800699e:	fa03 f000 	lsl.w	r0, r3, r0
 80069a2:	9b04      	ldr	r3, [sp, #16]
 80069a4:	4303      	orrs	r3, r0
 80069a6:	3401      	adds	r4, #1
 80069a8:	9304      	str	r3, [sp, #16]
 80069aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069ae:	4826      	ldr	r0, [pc, #152]	; (8006a48 <_svfiprintf_r+0x1f0>)
 80069b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069b4:	2206      	movs	r2, #6
 80069b6:	f7f9 fc2b 	bl	8000210 <memchr>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d038      	beq.n	8006a30 <_svfiprintf_r+0x1d8>
 80069be:	4b23      	ldr	r3, [pc, #140]	; (8006a4c <_svfiprintf_r+0x1f4>)
 80069c0:	bb1b      	cbnz	r3, 8006a0a <_svfiprintf_r+0x1b2>
 80069c2:	9b03      	ldr	r3, [sp, #12]
 80069c4:	3307      	adds	r3, #7
 80069c6:	f023 0307 	bic.w	r3, r3, #7
 80069ca:	3308      	adds	r3, #8
 80069cc:	9303      	str	r3, [sp, #12]
 80069ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069d0:	4433      	add	r3, r6
 80069d2:	9309      	str	r3, [sp, #36]	; 0x24
 80069d4:	e767      	b.n	80068a6 <_svfiprintf_r+0x4e>
 80069d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80069da:	460c      	mov	r4, r1
 80069dc:	2001      	movs	r0, #1
 80069de:	e7a5      	b.n	800692c <_svfiprintf_r+0xd4>
 80069e0:	2300      	movs	r3, #0
 80069e2:	3401      	adds	r4, #1
 80069e4:	9305      	str	r3, [sp, #20]
 80069e6:	4619      	mov	r1, r3
 80069e8:	f04f 0c0a 	mov.w	ip, #10
 80069ec:	4620      	mov	r0, r4
 80069ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069f2:	3a30      	subs	r2, #48	; 0x30
 80069f4:	2a09      	cmp	r2, #9
 80069f6:	d903      	bls.n	8006a00 <_svfiprintf_r+0x1a8>
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d0c5      	beq.n	8006988 <_svfiprintf_r+0x130>
 80069fc:	9105      	str	r1, [sp, #20]
 80069fe:	e7c3      	b.n	8006988 <_svfiprintf_r+0x130>
 8006a00:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a04:	4604      	mov	r4, r0
 8006a06:	2301      	movs	r3, #1
 8006a08:	e7f0      	b.n	80069ec <_svfiprintf_r+0x194>
 8006a0a:	ab03      	add	r3, sp, #12
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	462a      	mov	r2, r5
 8006a10:	4b0f      	ldr	r3, [pc, #60]	; (8006a50 <_svfiprintf_r+0x1f8>)
 8006a12:	a904      	add	r1, sp, #16
 8006a14:	4638      	mov	r0, r7
 8006a16:	f3af 8000 	nop.w
 8006a1a:	1c42      	adds	r2, r0, #1
 8006a1c:	4606      	mov	r6, r0
 8006a1e:	d1d6      	bne.n	80069ce <_svfiprintf_r+0x176>
 8006a20:	89ab      	ldrh	r3, [r5, #12]
 8006a22:	065b      	lsls	r3, r3, #25
 8006a24:	f53f af2c 	bmi.w	8006880 <_svfiprintf_r+0x28>
 8006a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a2a:	b01d      	add	sp, #116	; 0x74
 8006a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a30:	ab03      	add	r3, sp, #12
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	462a      	mov	r2, r5
 8006a36:	4b06      	ldr	r3, [pc, #24]	; (8006a50 <_svfiprintf_r+0x1f8>)
 8006a38:	a904      	add	r1, sp, #16
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	f000 f87a 	bl	8006b34 <_printf_i>
 8006a40:	e7eb      	b.n	8006a1a <_svfiprintf_r+0x1c2>
 8006a42:	bf00      	nop
 8006a44:	08006f00 	.word	0x08006f00
 8006a48:	08006f0a 	.word	0x08006f0a
 8006a4c:	00000000 	.word	0x00000000
 8006a50:	080067a1 	.word	0x080067a1
 8006a54:	08006f06 	.word	0x08006f06

08006a58 <_printf_common>:
 8006a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a5c:	4616      	mov	r6, r2
 8006a5e:	4699      	mov	r9, r3
 8006a60:	688a      	ldr	r2, [r1, #8]
 8006a62:	690b      	ldr	r3, [r1, #16]
 8006a64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	bfb8      	it	lt
 8006a6c:	4613      	movlt	r3, r2
 8006a6e:	6033      	str	r3, [r6, #0]
 8006a70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a74:	4607      	mov	r7, r0
 8006a76:	460c      	mov	r4, r1
 8006a78:	b10a      	cbz	r2, 8006a7e <_printf_common+0x26>
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	6033      	str	r3, [r6, #0]
 8006a7e:	6823      	ldr	r3, [r4, #0]
 8006a80:	0699      	lsls	r1, r3, #26
 8006a82:	bf42      	ittt	mi
 8006a84:	6833      	ldrmi	r3, [r6, #0]
 8006a86:	3302      	addmi	r3, #2
 8006a88:	6033      	strmi	r3, [r6, #0]
 8006a8a:	6825      	ldr	r5, [r4, #0]
 8006a8c:	f015 0506 	ands.w	r5, r5, #6
 8006a90:	d106      	bne.n	8006aa0 <_printf_common+0x48>
 8006a92:	f104 0a19 	add.w	sl, r4, #25
 8006a96:	68e3      	ldr	r3, [r4, #12]
 8006a98:	6832      	ldr	r2, [r6, #0]
 8006a9a:	1a9b      	subs	r3, r3, r2
 8006a9c:	42ab      	cmp	r3, r5
 8006a9e:	dc26      	bgt.n	8006aee <_printf_common+0x96>
 8006aa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006aa4:	1e13      	subs	r3, r2, #0
 8006aa6:	6822      	ldr	r2, [r4, #0]
 8006aa8:	bf18      	it	ne
 8006aaa:	2301      	movne	r3, #1
 8006aac:	0692      	lsls	r2, r2, #26
 8006aae:	d42b      	bmi.n	8006b08 <_printf_common+0xb0>
 8006ab0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ab4:	4649      	mov	r1, r9
 8006ab6:	4638      	mov	r0, r7
 8006ab8:	47c0      	blx	r8
 8006aba:	3001      	adds	r0, #1
 8006abc:	d01e      	beq.n	8006afc <_printf_common+0xa4>
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	68e5      	ldr	r5, [r4, #12]
 8006ac2:	6832      	ldr	r2, [r6, #0]
 8006ac4:	f003 0306 	and.w	r3, r3, #6
 8006ac8:	2b04      	cmp	r3, #4
 8006aca:	bf08      	it	eq
 8006acc:	1aad      	subeq	r5, r5, r2
 8006ace:	68a3      	ldr	r3, [r4, #8]
 8006ad0:	6922      	ldr	r2, [r4, #16]
 8006ad2:	bf0c      	ite	eq
 8006ad4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ad8:	2500      	movne	r5, #0
 8006ada:	4293      	cmp	r3, r2
 8006adc:	bfc4      	itt	gt
 8006ade:	1a9b      	subgt	r3, r3, r2
 8006ae0:	18ed      	addgt	r5, r5, r3
 8006ae2:	2600      	movs	r6, #0
 8006ae4:	341a      	adds	r4, #26
 8006ae6:	42b5      	cmp	r5, r6
 8006ae8:	d11a      	bne.n	8006b20 <_printf_common+0xc8>
 8006aea:	2000      	movs	r0, #0
 8006aec:	e008      	b.n	8006b00 <_printf_common+0xa8>
 8006aee:	2301      	movs	r3, #1
 8006af0:	4652      	mov	r2, sl
 8006af2:	4649      	mov	r1, r9
 8006af4:	4638      	mov	r0, r7
 8006af6:	47c0      	blx	r8
 8006af8:	3001      	adds	r0, #1
 8006afa:	d103      	bne.n	8006b04 <_printf_common+0xac>
 8006afc:	f04f 30ff 	mov.w	r0, #4294967295
 8006b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b04:	3501      	adds	r5, #1
 8006b06:	e7c6      	b.n	8006a96 <_printf_common+0x3e>
 8006b08:	18e1      	adds	r1, r4, r3
 8006b0a:	1c5a      	adds	r2, r3, #1
 8006b0c:	2030      	movs	r0, #48	; 0x30
 8006b0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b12:	4422      	add	r2, r4
 8006b14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b1c:	3302      	adds	r3, #2
 8006b1e:	e7c7      	b.n	8006ab0 <_printf_common+0x58>
 8006b20:	2301      	movs	r3, #1
 8006b22:	4622      	mov	r2, r4
 8006b24:	4649      	mov	r1, r9
 8006b26:	4638      	mov	r0, r7
 8006b28:	47c0      	blx	r8
 8006b2a:	3001      	adds	r0, #1
 8006b2c:	d0e6      	beq.n	8006afc <_printf_common+0xa4>
 8006b2e:	3601      	adds	r6, #1
 8006b30:	e7d9      	b.n	8006ae6 <_printf_common+0x8e>
	...

08006b34 <_printf_i>:
 8006b34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b38:	460c      	mov	r4, r1
 8006b3a:	4691      	mov	r9, r2
 8006b3c:	7e27      	ldrb	r7, [r4, #24]
 8006b3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b40:	2f78      	cmp	r7, #120	; 0x78
 8006b42:	4680      	mov	r8, r0
 8006b44:	469a      	mov	sl, r3
 8006b46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b4a:	d807      	bhi.n	8006b5c <_printf_i+0x28>
 8006b4c:	2f62      	cmp	r7, #98	; 0x62
 8006b4e:	d80a      	bhi.n	8006b66 <_printf_i+0x32>
 8006b50:	2f00      	cmp	r7, #0
 8006b52:	f000 80d8 	beq.w	8006d06 <_printf_i+0x1d2>
 8006b56:	2f58      	cmp	r7, #88	; 0x58
 8006b58:	f000 80a3 	beq.w	8006ca2 <_printf_i+0x16e>
 8006b5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b64:	e03a      	b.n	8006bdc <_printf_i+0xa8>
 8006b66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b6a:	2b15      	cmp	r3, #21
 8006b6c:	d8f6      	bhi.n	8006b5c <_printf_i+0x28>
 8006b6e:	a001      	add	r0, pc, #4	; (adr r0, 8006b74 <_printf_i+0x40>)
 8006b70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006b74:	08006bcd 	.word	0x08006bcd
 8006b78:	08006be1 	.word	0x08006be1
 8006b7c:	08006b5d 	.word	0x08006b5d
 8006b80:	08006b5d 	.word	0x08006b5d
 8006b84:	08006b5d 	.word	0x08006b5d
 8006b88:	08006b5d 	.word	0x08006b5d
 8006b8c:	08006be1 	.word	0x08006be1
 8006b90:	08006b5d 	.word	0x08006b5d
 8006b94:	08006b5d 	.word	0x08006b5d
 8006b98:	08006b5d 	.word	0x08006b5d
 8006b9c:	08006b5d 	.word	0x08006b5d
 8006ba0:	08006ced 	.word	0x08006ced
 8006ba4:	08006c11 	.word	0x08006c11
 8006ba8:	08006ccf 	.word	0x08006ccf
 8006bac:	08006b5d 	.word	0x08006b5d
 8006bb0:	08006b5d 	.word	0x08006b5d
 8006bb4:	08006d0f 	.word	0x08006d0f
 8006bb8:	08006b5d 	.word	0x08006b5d
 8006bbc:	08006c11 	.word	0x08006c11
 8006bc0:	08006b5d 	.word	0x08006b5d
 8006bc4:	08006b5d 	.word	0x08006b5d
 8006bc8:	08006cd7 	.word	0x08006cd7
 8006bcc:	680b      	ldr	r3, [r1, #0]
 8006bce:	1d1a      	adds	r2, r3, #4
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	600a      	str	r2, [r1, #0]
 8006bd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e0a3      	b.n	8006d28 <_printf_i+0x1f4>
 8006be0:	6825      	ldr	r5, [r4, #0]
 8006be2:	6808      	ldr	r0, [r1, #0]
 8006be4:	062e      	lsls	r6, r5, #24
 8006be6:	f100 0304 	add.w	r3, r0, #4
 8006bea:	d50a      	bpl.n	8006c02 <_printf_i+0xce>
 8006bec:	6805      	ldr	r5, [r0, #0]
 8006bee:	600b      	str	r3, [r1, #0]
 8006bf0:	2d00      	cmp	r5, #0
 8006bf2:	da03      	bge.n	8006bfc <_printf_i+0xc8>
 8006bf4:	232d      	movs	r3, #45	; 0x2d
 8006bf6:	426d      	negs	r5, r5
 8006bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bfc:	485e      	ldr	r0, [pc, #376]	; (8006d78 <_printf_i+0x244>)
 8006bfe:	230a      	movs	r3, #10
 8006c00:	e019      	b.n	8006c36 <_printf_i+0x102>
 8006c02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006c06:	6805      	ldr	r5, [r0, #0]
 8006c08:	600b      	str	r3, [r1, #0]
 8006c0a:	bf18      	it	ne
 8006c0c:	b22d      	sxthne	r5, r5
 8006c0e:	e7ef      	b.n	8006bf0 <_printf_i+0xbc>
 8006c10:	680b      	ldr	r3, [r1, #0]
 8006c12:	6825      	ldr	r5, [r4, #0]
 8006c14:	1d18      	adds	r0, r3, #4
 8006c16:	6008      	str	r0, [r1, #0]
 8006c18:	0628      	lsls	r0, r5, #24
 8006c1a:	d501      	bpl.n	8006c20 <_printf_i+0xec>
 8006c1c:	681d      	ldr	r5, [r3, #0]
 8006c1e:	e002      	b.n	8006c26 <_printf_i+0xf2>
 8006c20:	0669      	lsls	r1, r5, #25
 8006c22:	d5fb      	bpl.n	8006c1c <_printf_i+0xe8>
 8006c24:	881d      	ldrh	r5, [r3, #0]
 8006c26:	4854      	ldr	r0, [pc, #336]	; (8006d78 <_printf_i+0x244>)
 8006c28:	2f6f      	cmp	r7, #111	; 0x6f
 8006c2a:	bf0c      	ite	eq
 8006c2c:	2308      	moveq	r3, #8
 8006c2e:	230a      	movne	r3, #10
 8006c30:	2100      	movs	r1, #0
 8006c32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c36:	6866      	ldr	r6, [r4, #4]
 8006c38:	60a6      	str	r6, [r4, #8]
 8006c3a:	2e00      	cmp	r6, #0
 8006c3c:	bfa2      	ittt	ge
 8006c3e:	6821      	ldrge	r1, [r4, #0]
 8006c40:	f021 0104 	bicge.w	r1, r1, #4
 8006c44:	6021      	strge	r1, [r4, #0]
 8006c46:	b90d      	cbnz	r5, 8006c4c <_printf_i+0x118>
 8006c48:	2e00      	cmp	r6, #0
 8006c4a:	d04d      	beq.n	8006ce8 <_printf_i+0x1b4>
 8006c4c:	4616      	mov	r6, r2
 8006c4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c52:	fb03 5711 	mls	r7, r3, r1, r5
 8006c56:	5dc7      	ldrb	r7, [r0, r7]
 8006c58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c5c:	462f      	mov	r7, r5
 8006c5e:	42bb      	cmp	r3, r7
 8006c60:	460d      	mov	r5, r1
 8006c62:	d9f4      	bls.n	8006c4e <_printf_i+0x11a>
 8006c64:	2b08      	cmp	r3, #8
 8006c66:	d10b      	bne.n	8006c80 <_printf_i+0x14c>
 8006c68:	6823      	ldr	r3, [r4, #0]
 8006c6a:	07df      	lsls	r7, r3, #31
 8006c6c:	d508      	bpl.n	8006c80 <_printf_i+0x14c>
 8006c6e:	6923      	ldr	r3, [r4, #16]
 8006c70:	6861      	ldr	r1, [r4, #4]
 8006c72:	4299      	cmp	r1, r3
 8006c74:	bfde      	ittt	le
 8006c76:	2330      	movle	r3, #48	; 0x30
 8006c78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c80:	1b92      	subs	r2, r2, r6
 8006c82:	6122      	str	r2, [r4, #16]
 8006c84:	f8cd a000 	str.w	sl, [sp]
 8006c88:	464b      	mov	r3, r9
 8006c8a:	aa03      	add	r2, sp, #12
 8006c8c:	4621      	mov	r1, r4
 8006c8e:	4640      	mov	r0, r8
 8006c90:	f7ff fee2 	bl	8006a58 <_printf_common>
 8006c94:	3001      	adds	r0, #1
 8006c96:	d14c      	bne.n	8006d32 <_printf_i+0x1fe>
 8006c98:	f04f 30ff 	mov.w	r0, #4294967295
 8006c9c:	b004      	add	sp, #16
 8006c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca2:	4835      	ldr	r0, [pc, #212]	; (8006d78 <_printf_i+0x244>)
 8006ca4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	680e      	ldr	r6, [r1, #0]
 8006cac:	061f      	lsls	r7, r3, #24
 8006cae:	f856 5b04 	ldr.w	r5, [r6], #4
 8006cb2:	600e      	str	r6, [r1, #0]
 8006cb4:	d514      	bpl.n	8006ce0 <_printf_i+0x1ac>
 8006cb6:	07d9      	lsls	r1, r3, #31
 8006cb8:	bf44      	itt	mi
 8006cba:	f043 0320 	orrmi.w	r3, r3, #32
 8006cbe:	6023      	strmi	r3, [r4, #0]
 8006cc0:	b91d      	cbnz	r5, 8006cca <_printf_i+0x196>
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	f023 0320 	bic.w	r3, r3, #32
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	2310      	movs	r3, #16
 8006ccc:	e7b0      	b.n	8006c30 <_printf_i+0xfc>
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	f043 0320 	orr.w	r3, r3, #32
 8006cd4:	6023      	str	r3, [r4, #0]
 8006cd6:	2378      	movs	r3, #120	; 0x78
 8006cd8:	4828      	ldr	r0, [pc, #160]	; (8006d7c <_printf_i+0x248>)
 8006cda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cde:	e7e3      	b.n	8006ca8 <_printf_i+0x174>
 8006ce0:	065e      	lsls	r6, r3, #25
 8006ce2:	bf48      	it	mi
 8006ce4:	b2ad      	uxthmi	r5, r5
 8006ce6:	e7e6      	b.n	8006cb6 <_printf_i+0x182>
 8006ce8:	4616      	mov	r6, r2
 8006cea:	e7bb      	b.n	8006c64 <_printf_i+0x130>
 8006cec:	680b      	ldr	r3, [r1, #0]
 8006cee:	6826      	ldr	r6, [r4, #0]
 8006cf0:	6960      	ldr	r0, [r4, #20]
 8006cf2:	1d1d      	adds	r5, r3, #4
 8006cf4:	600d      	str	r5, [r1, #0]
 8006cf6:	0635      	lsls	r5, r6, #24
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	d501      	bpl.n	8006d00 <_printf_i+0x1cc>
 8006cfc:	6018      	str	r0, [r3, #0]
 8006cfe:	e002      	b.n	8006d06 <_printf_i+0x1d2>
 8006d00:	0671      	lsls	r1, r6, #25
 8006d02:	d5fb      	bpl.n	8006cfc <_printf_i+0x1c8>
 8006d04:	8018      	strh	r0, [r3, #0]
 8006d06:	2300      	movs	r3, #0
 8006d08:	6123      	str	r3, [r4, #16]
 8006d0a:	4616      	mov	r6, r2
 8006d0c:	e7ba      	b.n	8006c84 <_printf_i+0x150>
 8006d0e:	680b      	ldr	r3, [r1, #0]
 8006d10:	1d1a      	adds	r2, r3, #4
 8006d12:	600a      	str	r2, [r1, #0]
 8006d14:	681e      	ldr	r6, [r3, #0]
 8006d16:	6862      	ldr	r2, [r4, #4]
 8006d18:	2100      	movs	r1, #0
 8006d1a:	4630      	mov	r0, r6
 8006d1c:	f7f9 fa78 	bl	8000210 <memchr>
 8006d20:	b108      	cbz	r0, 8006d26 <_printf_i+0x1f2>
 8006d22:	1b80      	subs	r0, r0, r6
 8006d24:	6060      	str	r0, [r4, #4]
 8006d26:	6863      	ldr	r3, [r4, #4]
 8006d28:	6123      	str	r3, [r4, #16]
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d30:	e7a8      	b.n	8006c84 <_printf_i+0x150>
 8006d32:	6923      	ldr	r3, [r4, #16]
 8006d34:	4632      	mov	r2, r6
 8006d36:	4649      	mov	r1, r9
 8006d38:	4640      	mov	r0, r8
 8006d3a:	47d0      	blx	sl
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	d0ab      	beq.n	8006c98 <_printf_i+0x164>
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	079b      	lsls	r3, r3, #30
 8006d44:	d413      	bmi.n	8006d6e <_printf_i+0x23a>
 8006d46:	68e0      	ldr	r0, [r4, #12]
 8006d48:	9b03      	ldr	r3, [sp, #12]
 8006d4a:	4298      	cmp	r0, r3
 8006d4c:	bfb8      	it	lt
 8006d4e:	4618      	movlt	r0, r3
 8006d50:	e7a4      	b.n	8006c9c <_printf_i+0x168>
 8006d52:	2301      	movs	r3, #1
 8006d54:	4632      	mov	r2, r6
 8006d56:	4649      	mov	r1, r9
 8006d58:	4640      	mov	r0, r8
 8006d5a:	47d0      	blx	sl
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	d09b      	beq.n	8006c98 <_printf_i+0x164>
 8006d60:	3501      	adds	r5, #1
 8006d62:	68e3      	ldr	r3, [r4, #12]
 8006d64:	9903      	ldr	r1, [sp, #12]
 8006d66:	1a5b      	subs	r3, r3, r1
 8006d68:	42ab      	cmp	r3, r5
 8006d6a:	dcf2      	bgt.n	8006d52 <_printf_i+0x21e>
 8006d6c:	e7eb      	b.n	8006d46 <_printf_i+0x212>
 8006d6e:	2500      	movs	r5, #0
 8006d70:	f104 0619 	add.w	r6, r4, #25
 8006d74:	e7f5      	b.n	8006d62 <_printf_i+0x22e>
 8006d76:	bf00      	nop
 8006d78:	08006f11 	.word	0x08006f11
 8006d7c:	08006f22 	.word	0x08006f22

08006d80 <memmove>:
 8006d80:	4288      	cmp	r0, r1
 8006d82:	b510      	push	{r4, lr}
 8006d84:	eb01 0402 	add.w	r4, r1, r2
 8006d88:	d902      	bls.n	8006d90 <memmove+0x10>
 8006d8a:	4284      	cmp	r4, r0
 8006d8c:	4623      	mov	r3, r4
 8006d8e:	d807      	bhi.n	8006da0 <memmove+0x20>
 8006d90:	1e43      	subs	r3, r0, #1
 8006d92:	42a1      	cmp	r1, r4
 8006d94:	d008      	beq.n	8006da8 <memmove+0x28>
 8006d96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d9e:	e7f8      	b.n	8006d92 <memmove+0x12>
 8006da0:	4402      	add	r2, r0
 8006da2:	4601      	mov	r1, r0
 8006da4:	428a      	cmp	r2, r1
 8006da6:	d100      	bne.n	8006daa <memmove+0x2a>
 8006da8:	bd10      	pop	{r4, pc}
 8006daa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006db2:	e7f7      	b.n	8006da4 <memmove+0x24>

08006db4 <_realloc_r>:
 8006db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db6:	4607      	mov	r7, r0
 8006db8:	4614      	mov	r4, r2
 8006dba:	460e      	mov	r6, r1
 8006dbc:	b921      	cbnz	r1, 8006dc8 <_realloc_r+0x14>
 8006dbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	f7ff bbec 	b.w	80065a0 <_malloc_r>
 8006dc8:	b922      	cbnz	r2, 8006dd4 <_realloc_r+0x20>
 8006dca:	f7ff fb99 	bl	8006500 <_free_r>
 8006dce:	4625      	mov	r5, r4
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dd4:	f000 f814 	bl	8006e00 <_malloc_usable_size_r>
 8006dd8:	42a0      	cmp	r0, r4
 8006dda:	d20f      	bcs.n	8006dfc <_realloc_r+0x48>
 8006ddc:	4621      	mov	r1, r4
 8006dde:	4638      	mov	r0, r7
 8006de0:	f7ff fbde 	bl	80065a0 <_malloc_r>
 8006de4:	4605      	mov	r5, r0
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d0f2      	beq.n	8006dd0 <_realloc_r+0x1c>
 8006dea:	4631      	mov	r1, r6
 8006dec:	4622      	mov	r2, r4
 8006dee:	f7ff fb71 	bl	80064d4 <memcpy>
 8006df2:	4631      	mov	r1, r6
 8006df4:	4638      	mov	r0, r7
 8006df6:	f7ff fb83 	bl	8006500 <_free_r>
 8006dfa:	e7e9      	b.n	8006dd0 <_realloc_r+0x1c>
 8006dfc:	4635      	mov	r5, r6
 8006dfe:	e7e7      	b.n	8006dd0 <_realloc_r+0x1c>

08006e00 <_malloc_usable_size_r>:
 8006e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e04:	1f18      	subs	r0, r3, #4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	bfbc      	itt	lt
 8006e0a:	580b      	ldrlt	r3, [r1, r0]
 8006e0c:	18c0      	addlt	r0, r0, r3
 8006e0e:	4770      	bx	lr

08006e10 <_init>:
 8006e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e12:	bf00      	nop
 8006e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e16:	bc08      	pop	{r3}
 8006e18:	469e      	mov	lr, r3
 8006e1a:	4770      	bx	lr

08006e1c <_fini>:
 8006e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1e:	bf00      	nop
 8006e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e22:	bc08      	pop	{r3}
 8006e24:	469e      	mov	lr, r3
 8006e26:	4770      	bx	lr
