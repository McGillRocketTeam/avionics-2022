
FC_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c25c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  0800c430  0800c430  0001c430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb88  0800cb88  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb88  0800cb88  0001cb88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb90  0800cb90  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cb90  0800cb90  0001cb90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb98  0800cb98  0001cb98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800cb9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005260  200001e4  0800cd80  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005444  0800cd80  00025444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038c01  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005396  00000000  00000000  00058e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002580  00000000  00000000  0005e1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023e0  00000000  00000000  00060730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000737e  00000000  00000000  00062b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000257aa  00000000  00000000  00069e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f11a1  00000000  00000000  0008f638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001807d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b3c8  00000000  00000000  0018082c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c414 	.word	0x0800c414

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800c414 	.word	0x0800c414

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee2:	b0a3      	sub	sp, #140	; 0x8c
 8000ee4:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f001 fe5f 	bl	8002ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f87d 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eee:	f000 f9cf 	bl	8001290 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ef2:	f000 f9a3 	bl	800123c <MX_USART3_UART_Init>
  MX_RTC_Init();
 8000ef6:	f000 f915 	bl	8001124 <MX_RTC_Init>
  MX_I2C1_Init();
 8000efa:	f000 f8e5 	bl	80010c8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  checkForI2CDevices(huart3,hi2c1);
 8000efe:	4e2e      	ldr	r6, [pc, #184]	; (8000fb8 <main+0xd8>)
 8000f00:	4a2e      	ldr	r2, [pc, #184]	; (8000fbc <main+0xdc>)
 8000f02:	ab0d      	add	r3, sp, #52	; 0x34
 8000f04:	4611      	mov	r1, r2
 8000f06:	2254      	movs	r2, #84	; 0x54
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f008 fc87 	bl	800981c <memcpy>
 8000f0e:	466d      	mov	r5, sp
 8000f10:	f106 0410 	add.w	r4, r6, #16
 8000f14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	602b      	str	r3, [r5, #0]
 8000f24:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f28:	f000 fd28 	bl	800197c <checkForI2CDevices>

  /*
   * For ISM330DLC
   *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
   */
  MRT_ISM330DLC_Setup(&huart3,hi2c1);
 8000f2c:	4c23      	ldr	r4, [pc, #140]	; (8000fbc <main+0xdc>)
 8000f2e:	4668      	mov	r0, sp
 8000f30:	f104 030c 	add.w	r3, r4, #12
 8000f34:	2248      	movs	r2, #72	; 0x48
 8000f36:	4619      	mov	r1, r3
 8000f38:	f008 fc70 	bl	800981c <memcpy>
 8000f3c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8000f40:	481d      	ldr	r0, [pc, #116]	; (8000fb8 <main+0xd8>)
 8000f42:	f001 f863 	bl	800200c <MRT_ISM330DLC_Setup>
   * -Define what you want in the alarms callback functions (check the .h file)
   * -(Optional) Setup alarm A and the clock time in .ioc
   * The rest have been taken care of
   * You can access the flag of both alarm A and B with the variables flagA and flagB
   */
  MRT_SetupRTOS(huart3,10,0);
 8000f46:	4e1c      	ldr	r6, [pc, #112]	; (8000fb8 <main+0xd8>)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	930e      	str	r3, [sp, #56]	; 0x38
 8000f4c:	230a      	movs	r3, #10
 8000f4e:	930d      	str	r3, [sp, #52]	; 0x34
 8000f50:	466d      	mov	r5, sp
 8000f52:	f106 0410 	add.w	r4, r6, #16
 8000f56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f62:	6823      	ldr	r3, [r4, #0]
 8000f64:	602b      	str	r3, [r5, #0]
 8000f66:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f6a:	f001 fcd1 	bl	8002910 <MRT_SetupRTOS>

  HAL_UART_Transmit(&huart3,"Starting FC\r\n",13,HAL_MAX_DELAY);
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	220d      	movs	r2, #13
 8000f74:	4912      	ldr	r1, [pc, #72]	; (8000fc0 <main+0xe0>)
 8000f76:	4810      	ldr	r0, [pc, #64]	; (8000fb8 <main+0xd8>)
 8000f78:	f005 fa65 	bl	8006446 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f7c:	f005 fd70 	bl	8006a60 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f80:	4a10      	ldr	r2, [pc, #64]	; (8000fc4 <main+0xe4>)
 8000f82:	2100      	movs	r1, #0
 8000f84:	4810      	ldr	r0, [pc, #64]	; (8000fc8 <main+0xe8>)
 8000f86:	f005 fdb5 	bl	8006af4 <osThreadNew>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <main+0xec>)
 8000f8e:	6013      	str	r3, [r2, #0]

  /* creation of Iridium02 */
  Iridium02Handle = osThreadNew(StartIridium02, NULL, &Iridium02_attributes);
 8000f90:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <main+0xf0>)
 8000f92:	2100      	movs	r1, #0
 8000f94:	480f      	ldr	r0, [pc, #60]	; (8000fd4 <main+0xf4>)
 8000f96:	f005 fdad 	bl	8006af4 <osThreadNew>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <main+0xf8>)
 8000f9e:	6013      	str	r3, [r2, #0]

  /* creation of ISM330DLC03 */
  ISM330DLC03Handle = osThreadNew(StartISM330DLC03, NULL, &ISM330DLC03_attributes);
 8000fa0:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <main+0xfc>)
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	480e      	ldr	r0, [pc, #56]	; (8000fe0 <main+0x100>)
 8000fa6:	f005 fda5 	bl	8006af4 <osThreadNew>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a0d      	ldr	r2, [pc, #52]	; (8000fe4 <main+0x104>)
 8000fae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fb0:	f005 fd7a 	bl	8006aa8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <main+0xd4>
 8000fb6:	bf00      	nop
 8000fb8:	20005274 	.word	0x20005274
 8000fbc:	200052e0 	.word	0x200052e0
 8000fc0:	0800c454 	.word	0x0800c454
 8000fc4:	0800c6d0 	.word	0x0800c6d0
 8000fc8:	080012e1 	.word	0x080012e1
 8000fcc:	20005264 	.word	0x20005264
 8000fd0:	0800c6f4 	.word	0x0800c6f4
 8000fd4:	08001301 	.word	0x08001301
 8000fd8:	20005354 	.word	0x20005354
 8000fdc:	0800c718 	.word	0x0800c718
 8000fe0:	08001321 	.word	0x08001321
 8000fe4:	2000535c 	.word	0x2000535c

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b094      	sub	sp, #80	; 0x50
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	2234      	movs	r2, #52	; 0x34
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f008 fc38 	bl	800986c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	f107 0308 	add.w	r3, r7, #8
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	4b2b      	ldr	r3, [pc, #172]	; (80010c0 <SystemClock_Config+0xd8>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	4a2a      	ldr	r2, [pc, #168]	; (80010c0 <SystemClock_Config+0xd8>)
 8001016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101a:	6413      	str	r3, [r2, #64]	; 0x40
 800101c:	4b28      	ldr	r3, [pc, #160]	; (80010c0 <SystemClock_Config+0xd8>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001028:	2300      	movs	r3, #0
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <SystemClock_Config+0xdc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a24      	ldr	r2, [pc, #144]	; (80010c4 <SystemClock_Config+0xdc>)
 8001032:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b22      	ldr	r3, [pc, #136]	; (80010c4 <SystemClock_Config+0xdc>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001044:	230a      	movs	r3, #10
 8001046:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800104c:	2301      	movs	r3, #1
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001050:	2310      	movs	r3, #16
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001054:	2301      	movs	r3, #1
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001058:	2302      	movs	r3, #2
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800105c:	2300      	movs	r3, #0
 800105e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001060:	2308      	movs	r3, #8
 8001062:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001064:	23a8      	movs	r3, #168	; 0xa8
 8001066:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001068:	2302      	movs	r3, #2
 800106a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800106c:	2307      	movs	r3, #7
 800106e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001070:	2302      	movs	r3, #2
 8001072:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4618      	mov	r0, r3
 800107a:	f004 f803 	bl	8005084 <HAL_RCC_OscConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001084:	f000 fa00 	bl	8001488 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001088:	230f      	movs	r3, #15
 800108a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800108c:	2302      	movs	r3, #2
 800108e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001094:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001098:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800109a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800109e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010a0:	f107 0308 	add.w	r3, r7, #8
 80010a4:	2105      	movs	r1, #5
 80010a6:	4618      	mov	r0, r3
 80010a8:	f003 f9c4 	bl	8004434 <HAL_RCC_ClockConfig>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80010b2:	f000 f9e9 	bl	8001488 <Error_Handler>
  }
}
 80010b6:	bf00      	nop
 80010b8:	3750      	adds	r7, #80	; 0x50
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40007000 	.word	0x40007000

080010c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <MX_I2C1_Init+0x50>)
 80010ce:	4a13      	ldr	r2, [pc, #76]	; (800111c <MX_I2C1_Init+0x54>)
 80010d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_I2C1_Init+0x50>)
 80010d4:	4a12      	ldr	r2, [pc, #72]	; (8001120 <MX_I2C1_Init+0x58>)
 80010d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_I2C1_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_I2C1_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_I2C1_Init+0x50>)
 80010e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <MX_I2C1_Init+0x50>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_I2C1_Init+0x50>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010f8:	4b07      	ldr	r3, [pc, #28]	; (8001118 <MX_I2C1_Init+0x50>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_I2C1_Init+0x50>)
 8001100:	2200      	movs	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001104:	4804      	ldr	r0, [pc, #16]	; (8001118 <MX_I2C1_Init+0x50>)
 8001106:	f002 f85d 	bl	80031c4 <HAL_I2C_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001110:	f000 f9ba 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}
 8001118:	200052e0 	.word	0x200052e0
 800111c:	40005400 	.word	0x40005400
 8001120:	000186a0 	.word	0x000186a0

08001124 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b090      	sub	sp, #64	; 0x40
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800112a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800113a:	2300      	movs	r3, #0
 800113c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2228      	movs	r2, #40	; 0x28
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f008 fb91 	bl	800986c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800114a:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <MX_RTC_Init+0x110>)
 800114c:	4a3a      	ldr	r2, [pc, #232]	; (8001238 <MX_RTC_Init+0x114>)
 800114e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001150:	4b38      	ldr	r3, [pc, #224]	; (8001234 <MX_RTC_Init+0x110>)
 8001152:	2200      	movs	r2, #0
 8001154:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001156:	4b37      	ldr	r3, [pc, #220]	; (8001234 <MX_RTC_Init+0x110>)
 8001158:	227f      	movs	r2, #127	; 0x7f
 800115a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800115c:	4b35      	ldr	r3, [pc, #212]	; (8001234 <MX_RTC_Init+0x110>)
 800115e:	22ff      	movs	r2, #255	; 0xff
 8001160:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001162:	4b34      	ldr	r3, [pc, #208]	; (8001234 <MX_RTC_Init+0x110>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001168:	4b32      	ldr	r3, [pc, #200]	; (8001234 <MX_RTC_Init+0x110>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800116e:	4b31      	ldr	r3, [pc, #196]	; (8001234 <MX_RTC_Init+0x110>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001174:	482f      	ldr	r0, [pc, #188]	; (8001234 <MX_RTC_Init+0x110>)
 8001176:	f004 fa23 	bl	80055c0 <HAL_RTC_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001180:	f000 f982 	bl	8001488 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001184:	2300      	movs	r3, #0
 8001186:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800118a:	2300      	movs	r3, #0
 800118c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001190:	2300      	movs	r3, #0
 8001192:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001196:	2300      	movs	r3, #0
 8001198:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800119e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a2:	2201      	movs	r2, #1
 80011a4:	4619      	mov	r1, r3
 80011a6:	4823      	ldr	r0, [pc, #140]	; (8001234 <MX_RTC_Init+0x110>)
 80011a8:	f004 fa9b 	bl	80056e2 <HAL_RTC_SetTime>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80011b2:	f000 f969 	bl	8001488 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80011b6:	2301      	movs	r3, #1
 80011b8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80011bc:	2301      	movs	r3, #1
 80011be:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80011c2:	2301      	movs	r3, #1
 80011c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d2:	2201      	movs	r2, #1
 80011d4:	4619      	mov	r1, r3
 80011d6:	4817      	ldr	r0, [pc, #92]	; (8001234 <MX_RTC_Init+0x110>)
 80011d8:	f004 fb40 	bl	800585c <HAL_RTC_SetDate>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80011e2:	f000 f951 	bl	8001488 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x20;
 80011ee:	2320      	movs	r3, #32
 80011f0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001206:	2300      	movs	r3, #0
 8001208:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800120a:	2301      	movs	r3, #1
 800120c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001216:	463b      	mov	r3, r7
 8001218:	2201      	movs	r2, #1
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_RTC_Init+0x110>)
 800121e:	f004 fbc5 	bl	80059ac <HAL_RTC_SetAlarm_IT>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8001228:	f000 f92e 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	3740      	adds	r7, #64	; 0x40
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20005334 	.word	0x20005334
 8001238:	40002800 	.word	0x40002800

0800123c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <MX_USART3_UART_Init+0x4c>)
 8001242:	4a12      	ldr	r2, [pc, #72]	; (800128c <MX_USART3_UART_Init+0x50>)
 8001244:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001246:	4b10      	ldr	r3, [pc, #64]	; (8001288 <MX_USART3_UART_Init+0x4c>)
 8001248:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800124c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800124e:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <MX_USART3_UART_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_USART3_UART_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <MX_USART3_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MX_USART3_UART_Init+0x4c>)
 8001262:	220c      	movs	r2, #12
 8001264:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001266:	4b08      	ldr	r3, [pc, #32]	; (8001288 <MX_USART3_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <MX_USART3_UART_Init+0x4c>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001272:	4805      	ldr	r0, [pc, #20]	; (8001288 <MX_USART3_UART_Init+0x4c>)
 8001274:	f005 f89a 	bl	80063ac <HAL_UART_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800127e:	f000 f903 	bl	8001488 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20005274 	.word	0x20005274
 800128c:	40004800 	.word	0x40004800

08001290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_GPIO_Init+0x4c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <MX_GPIO_Init+0x4c>)
 80012a0:	f043 0308 	orr.w	r3, r3, #8
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <MX_GPIO_Init+0x4c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_GPIO_Init+0x4c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <MX_GPIO_Init+0x4c>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_GPIO_Init+0x4c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800

080012e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	//Add thread id to the list
	threadID[0]=osThreadGetId();
 80012e8:	f005 fc96 	bl	8006c18 <osThreadGetId>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a03      	ldr	r2, [pc, #12]	; (80012fc <StartDefaultTask+0x1c>)
 80012f0:	6013      	str	r3, [r2, #0]
	if (flagA==1){
		MRT_Static_Iridium_Shutdown();
		MRT_StandByMode(10);
	}
	*/
    osDelay(1);
 80012f2:	2001      	movs	r0, #1
 80012f4:	f005 fc9b 	bl	8006c2e <osDelay>
 80012f8:	e7fb      	b.n	80012f2 <StartDefaultTask+0x12>
 80012fa:	bf00      	nop
 80012fc:	200052b8 	.word	0x200052b8

08001300 <StartIridium02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIridium02 */
void StartIridium02(void *argument)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIridium02 */

	//Add thread id to the list
	threadID[2]=osThreadGetId();
 8001308:	f005 fc86 	bl	8006c18 <osThreadGetId>
 800130c:	4603      	mov	r3, r0
 800130e:	4a03      	ldr	r2, [pc, #12]	; (800131c <StartIridium02+0x1c>)
 8001310:	6093      	str	r3, [r2, #8]

  /* Infinite loop */
  for(;;)
  {
	//MRT_Static_Iridium_getTime();
    osDelay(5000);
 8001312:	f241 3088 	movw	r0, #5000	; 0x1388
 8001316:	f005 fc8a 	bl	8006c2e <osDelay>
 800131a:	e7fa      	b.n	8001312 <StartIridium02+0x12>
 800131c:	200052b8 	.word	0x200052b8

08001320 <StartISM330DLC03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartISM330DLC03 */
void StartISM330DLC03(void *argument)
{
 8001320:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af04      	add	r7, sp, #16
 8001328:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartISM330DLC03 */
	//Add thread id to the list
	threadID[3]=osThreadGetId();
 800132a:	f005 fc75 	bl	8006c18 <osThreadGetId>
 800132e:	4603      	mov	r3, r0
 8001330:	4a3f      	ldr	r2, [pc, #252]	; (8001430 <StartISM330DLC03+0x110>)
 8001332:	60d3      	str	r3, [r2, #12]

  /* Infinite loop */
  for(;;)
  {
	osDelay(1000);
 8001334:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001338:	f005 fc79 	bl	8006c2e <osDelay>
	ISM330DLC_getAcceleration(data_raw_acceleration,acceleration_mg,&dev_ctx);
 800133c:	4a3d      	ldr	r2, [pc, #244]	; (8001434 <StartISM330DLC03+0x114>)
 800133e:	493e      	ldr	r1, [pc, #248]	; (8001438 <StartISM330DLC03+0x118>)
 8001340:	483e      	ldr	r0, [pc, #248]	; (800143c <StartISM330DLC03+0x11c>)
 8001342:	f000 ff2b 	bl	800219c <ISM330DLC_getAcceleration>
	sprintf((char *)tx_buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8001346:	4b3c      	ldr	r3, [pc, #240]	; (8001438 <StartISM330DLC03+0x118>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f91c 	bl	8000588 <__aeabi_f2d>
 8001350:	4680      	mov	r8, r0
 8001352:	4689      	mov	r9, r1
 8001354:	4b38      	ldr	r3, [pc, #224]	; (8001438 <StartISM330DLC03+0x118>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f915 	bl	8000588 <__aeabi_f2d>
 800135e:	4604      	mov	r4, r0
 8001360:	460d      	mov	r5, r1
 8001362:	4b35      	ldr	r3, [pc, #212]	; (8001438 <StartISM330DLC03+0x118>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f90e 	bl	8000588 <__aeabi_f2d>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001374:	e9cd 4500 	strd	r4, r5, [sp]
 8001378:	4642      	mov	r2, r8
 800137a:	464b      	mov	r3, r9
 800137c:	4930      	ldr	r1, [pc, #192]	; (8001440 <StartISM330DLC03+0x120>)
 800137e:	4831      	ldr	r0, [pc, #196]	; (8001444 <StartISM330DLC03+0x124>)
 8001380:	f009 f84e 	bl	800a420 <siprintf>
	HAL_UART_Transmit(&huart3, tx_buffer, strlen(tx_buffer), HAL_MAX_DELAY);
 8001384:	482f      	ldr	r0, [pc, #188]	; (8001444 <StartISM330DLC03+0x124>)
 8001386:	f7fe ff43 	bl	8000210 <strlen>
 800138a:	4603      	mov	r3, r0
 800138c:	b29a      	uxth	r2, r3
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	492c      	ldr	r1, [pc, #176]	; (8001444 <StartISM330DLC03+0x124>)
 8001394:	482c      	ldr	r0, [pc, #176]	; (8001448 <StartISM330DLC03+0x128>)
 8001396:	f005 f856 	bl	8006446 <HAL_UART_Transmit>

	ISM330DLC_getAngularRate(data_raw_angular_rate,angular_rate_mdps,&dev_ctx);
 800139a:	4a26      	ldr	r2, [pc, #152]	; (8001434 <StartISM330DLC03+0x114>)
 800139c:	492b      	ldr	r1, [pc, #172]	; (800144c <StartISM330DLC03+0x12c>)
 800139e:	482c      	ldr	r0, [pc, #176]	; (8001450 <StartISM330DLC03+0x130>)
 80013a0:	f000 ff58 	bl	8002254 <ISM330DLC_getAngularRate>
	sprintf((char *)tx_buffer,"Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 80013a4:	4b29      	ldr	r3, [pc, #164]	; (800144c <StartISM330DLC03+0x12c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8ed 	bl	8000588 <__aeabi_f2d>
 80013ae:	4680      	mov	r8, r0
 80013b0:	4689      	mov	r9, r1
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <StartISM330DLC03+0x12c>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f8e6 	bl	8000588 <__aeabi_f2d>
 80013bc:	4604      	mov	r4, r0
 80013be:	460d      	mov	r5, r1
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <StartISM330DLC03+0x12c>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f8df 	bl	8000588 <__aeabi_f2d>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013d2:	e9cd 4500 	strd	r4, r5, [sp]
 80013d6:	4642      	mov	r2, r8
 80013d8:	464b      	mov	r3, r9
 80013da:	491e      	ldr	r1, [pc, #120]	; (8001454 <StartISM330DLC03+0x134>)
 80013dc:	4819      	ldr	r0, [pc, #100]	; (8001444 <StartISM330DLC03+0x124>)
 80013de:	f009 f81f 	bl	800a420 <siprintf>
	HAL_UART_Transmit(&huart3, tx_buffer, strlen(tx_buffer), HAL_MAX_DELAY);
 80013e2:	4818      	ldr	r0, [pc, #96]	; (8001444 <StartISM330DLC03+0x124>)
 80013e4:	f7fe ff14 	bl	8000210 <strlen>
 80013e8:	4603      	mov	r3, r0
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295
 80013f0:	4914      	ldr	r1, [pc, #80]	; (8001444 <StartISM330DLC03+0x124>)
 80013f2:	4815      	ldr	r0, [pc, #84]	; (8001448 <StartISM330DLC03+0x128>)
 80013f4:	f005 f827 	bl	8006446 <HAL_UART_Transmit>

	ISM330DLC_getTemperature(data_raw_temperature,temperature_degC,&dev_ctx);
 80013f8:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <StartISM330DLC03+0x114>)
 80013fa:	4917      	ldr	r1, [pc, #92]	; (8001458 <StartISM330DLC03+0x138>)
 80013fc:	4817      	ldr	r0, [pc, #92]	; (800145c <StartISM330DLC03+0x13c>)
 80013fe:	f000 ff6e 	bl	80022de <ISM330DLC_getTemperature>
	sprintf((char *)tx_buffer, "Temperature [degC]:%6.2f\r\n", temperature_degC[0]);
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <StartISM330DLC03+0x138>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f8be 	bl	8000588 <__aeabi_f2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4913      	ldr	r1, [pc, #76]	; (8001460 <StartISM330DLC03+0x140>)
 8001412:	480c      	ldr	r0, [pc, #48]	; (8001444 <StartISM330DLC03+0x124>)
 8001414:	f009 f804 	bl	800a420 <siprintf>
	HAL_UART_Transmit(&huart3, tx_buffer, strlen(tx_buffer), HAL_MAX_DELAY);
 8001418:	480a      	ldr	r0, [pc, #40]	; (8001444 <StartISM330DLC03+0x124>)
 800141a:	f7fe fef9 	bl	8000210 <strlen>
 800141e:	4603      	mov	r3, r0
 8001420:	b29a      	uxth	r2, r3
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	4907      	ldr	r1, [pc, #28]	; (8001444 <StartISM330DLC03+0x124>)
 8001428:	4807      	ldr	r0, [pc, #28]	; (8001448 <StartISM330DLC03+0x128>)
 800142a:	f005 f80c 	bl	8006446 <HAL_UART_Transmit>
	osDelay(1000);
 800142e:	e781      	b.n	8001334 <StartISM330DLC03+0x14>
 8001430:	200052b8 	.word	0x200052b8
 8001434:	20005268 	.word	0x20005268
 8001438:	20000208 	.word	0x20000208
 800143c:	20000200 	.word	0x20000200
 8001440:	0800c464 	.word	0x0800c464
 8001444:	20000230 	.word	0x20000230
 8001448:	20005274 	.word	0x20005274
 800144c:	2000021c 	.word	0x2000021c
 8001450:	20000214 	.word	0x20000214
 8001454:	0800c48c 	.word	0x0800c48c
 8001458:	2000022c 	.word	0x2000022c
 800145c:	20000228 	.word	0x20000228
 8001460:	0800c4b4 	.word	0x0800c4b4

08001464 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d101      	bne.n	800147a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001476:	f001 fbb9 	bl	8002bec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40010000 	.word	0x40010000

08001488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001490:	e7fe      	b.n	8001490 <Error_Handler+0x8>
	...

08001494 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_MspInit+0x54>)
 80014a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a2:	4a11      	ldr	r2, [pc, #68]	; (80014e8 <HAL_MspInit+0x54>)
 80014a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a8:	6453      	str	r3, [r2, #68]	; 0x44
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <HAL_MspInit+0x54>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_MspInit+0x54>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <HAL_MspInit+0x54>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_MspInit+0x54>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	210f      	movs	r1, #15
 80014d6:	f06f 0001 	mvn.w	r0, #1
 80014da:	f001 fca7 	bl	8002e2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a19      	ldr	r2, [pc, #100]	; (8001570 <HAL_I2C_MspInit+0x84>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d12c      	bne.n	8001568 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <HAL_I2C_MspInit+0x88>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a17      	ldr	r2, [pc, #92]	; (8001574 <HAL_I2C_MspInit+0x88>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_I2C_MspInit+0x88>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800152a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001530:	2312      	movs	r3, #18
 8001532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800153c:	2304      	movs	r3, #4
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	480c      	ldr	r0, [pc, #48]	; (8001578 <HAL_I2C_MspInit+0x8c>)
 8001548:	f001 fca8 	bl	8002e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <HAL_I2C_MspInit+0x88>)
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	4a07      	ldr	r2, [pc, #28]	; (8001574 <HAL_I2C_MspInit+0x88>)
 8001556:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800155a:	6413      	str	r3, [r2, #64]	; 0x40
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <HAL_I2C_MspInit+0x88>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001568:	bf00      	nop
 800156a:	3728      	adds	r7, #40	; 0x28
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40005400 	.word	0x40005400
 8001574:	40023800 	.word	0x40023800
 8001578:	40020400 	.word	0x40020400

0800157c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b09a      	sub	sp, #104	; 0x68
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	225c      	movs	r2, #92	; 0x5c
 800158a:	2100      	movs	r1, #0
 800158c:	4618      	mov	r0, r3
 800158e:	f008 f96d 	bl	800986c <memset>
  if(hrtc->Instance==RTC)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_RTC_MspInit+0x5c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d119      	bne.n	80015d0 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800159c:	2320      	movs	r3, #32
 800159e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80015a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 f88e 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80015b6:	f7ff ff67 	bl	8001488 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <HAL_RTC_MspInit+0x60>)
 80015bc:	2201      	movs	r2, #1
 80015be:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2105      	movs	r1, #5
 80015c4:	2029      	movs	r0, #41	; 0x29
 80015c6:	f001 fc31 	bl	8002e2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80015ca:	2029      	movs	r0, #41	; 0x29
 80015cc:	f001 fc4a 	bl	8002e64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015d0:	bf00      	nop
 80015d2:	3768      	adds	r7, #104	; 0x68
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40002800 	.word	0x40002800
 80015dc:	42470e3c 	.word	0x42470e3c

080015e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a19      	ldr	r2, [pc, #100]	; (8001664 <HAL_UART_MspInit+0x84>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d12c      	bne.n	800165c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	4b18      	ldr	r3, [pc, #96]	; (8001668 <HAL_UART_MspInit+0x88>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a17      	ldr	r2, [pc, #92]	; (8001668 <HAL_UART_MspInit+0x88>)
 800160c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_UART_MspInit+0x88>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_UART_MspInit+0x88>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a10      	ldr	r2, [pc, #64]	; (8001668 <HAL_UART_MspInit+0x88>)
 8001628:	f043 0308 	orr.w	r3, r3, #8
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_UART_MspInit+0x88>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0308 	and.w	r3, r3, #8
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800163a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800163e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800164c:	2307      	movs	r3, #7
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <HAL_UART_MspInit+0x8c>)
 8001658:	f001 fc20 	bl	8002e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800165c:	bf00      	nop
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40004800 	.word	0x40004800
 8001668:	40023800 	.word	0x40023800
 800166c:	40020c00 	.word	0x40020c00

08001670 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b08c      	sub	sp, #48	; 0x30
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001680:	2200      	movs	r2, #0
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	2019      	movs	r0, #25
 8001686:	f001 fbd1 	bl	8002e2c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800168a:	2019      	movs	r0, #25
 800168c:	f001 fbea 	bl	8002e64 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <HAL_InitTick+0xa4>)
 8001696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001698:	4a1e      	ldr	r2, [pc, #120]	; (8001714 <HAL_InitTick+0xa4>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6453      	str	r3, [r2, #68]	; 0x44
 80016a0:	4b1c      	ldr	r3, [pc, #112]	; (8001714 <HAL_InitTick+0xa4>)
 80016a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016ac:	f107 0210 	add.w	r2, r7, #16
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f002 ffd6 	bl	8004668 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80016bc:	f002 ffc0 	bl	8004640 <HAL_RCC_GetPCLK2Freq>
 80016c0:	4603      	mov	r3, r0
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c8:	4a13      	ldr	r2, [pc, #76]	; (8001718 <HAL_InitTick+0xa8>)
 80016ca:	fba2 2303 	umull	r2, r3, r2, r3
 80016ce:	0c9b      	lsrs	r3, r3, #18
 80016d0:	3b01      	subs	r3, #1
 80016d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_InitTick+0xac>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	; (8001720 <HAL_InitTick+0xb0>)
 80016d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_InitTick+0xac>)
 80016dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016e0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80016e2:	4a0e      	ldr	r2, [pc, #56]	; (800171c <HAL_InitTick+0xac>)
 80016e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016e6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <HAL_InitTick+0xac>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_InitTick+0xac>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80016f4:	4809      	ldr	r0, [pc, #36]	; (800171c <HAL_InitTick+0xac>)
 80016f6:	f004 fbab 	bl	8005e50 <HAL_TIM_Base_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d104      	bne.n	800170a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001700:	4806      	ldr	r0, [pc, #24]	; (800171c <HAL_InitTick+0xac>)
 8001702:	f004 fbff 	bl	8005f04 <HAL_TIM_Base_Start_IT>
 8001706:	4603      	mov	r3, r0
 8001708:	e000      	b.n	800170c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	3730      	adds	r7, #48	; 0x30
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40023800 	.word	0x40023800
 8001718:	431bde83 	.word	0x431bde83
 800171c:	20005360 	.word	0x20005360
 8001720:	40010000 	.word	0x40010000

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <NMI_Handler+0x4>

0800172a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <MemManage_Handler+0x4>

08001736 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <UsageFault_Handler+0x4>

08001742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001756:	f004 fc45 	bl	8005fe4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20005360 	.word	0x20005360

08001764 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <RTC_Alarm_IRQHandler+0x10>)
 800176a:	f004 fa57 	bl	8005c1c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20005334 	.word	0x20005334

08001778 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
	return 1;
 800177c:	2301      	movs	r3, #1
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <_kill>:

int _kill(int pid, int sig)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001792:	f007 ff17 	bl	80095c4 <__errno>
 8001796:	4603      	mov	r3, r0
 8001798:	2216      	movs	r2, #22
 800179a:	601a      	str	r2, [r3, #0]
	return -1;
 800179c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_exit>:

void _exit (int status)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017b0:	f04f 31ff 	mov.w	r1, #4294967295
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff ffe7 	bl	8001788 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017ba:	e7fe      	b.n	80017ba <_exit+0x12>

080017bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	e00a      	b.n	80017e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017ce:	f3af 8000 	nop.w
 80017d2:	4601      	mov	r1, r0
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	60ba      	str	r2, [r7, #8]
 80017da:	b2ca      	uxtb	r2, r1
 80017dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	dbf0      	blt.n	80017ce <_read+0x12>
	}

return len;
 80017ec:	687b      	ldr	r3, [r7, #4]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	e009      	b.n	800181c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	60ba      	str	r2, [r7, #8]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3301      	adds	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	dbf1      	blt.n	8001808 <_write+0x12>
	}
	return len;
 8001824:	687b      	ldr	r3, [r7, #4]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_close>:

int _close(int file)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
	return -1;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001846:	b480      	push	{r7}
 8001848:	b083      	sub	sp, #12
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
 800184e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001856:	605a      	str	r2, [r3, #4]
	return 0;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <_isatty>:

int _isatty(int file)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
	return 1;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
	return 0;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a0:	4a14      	ldr	r2, [pc, #80]	; (80018f4 <_sbrk+0x5c>)
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <_sbrk+0x60>)
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b4:	4b11      	ldr	r3, [pc, #68]	; (80018fc <_sbrk+0x64>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	; (8001900 <_sbrk+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d207      	bcs.n	80018d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c8:	f007 fe7c 	bl	80095c4 <__errno>
 80018cc:	4603      	mov	r3, r0
 80018ce:	220c      	movs	r2, #12
 80018d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	e009      	b.n	80018ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a05      	ldr	r2, [pc, #20]	; (80018fc <_sbrk+0x64>)
 80018e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ea:	68fb      	ldr	r3, [r7, #12]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20020000 	.word	0x20020000
 80018f8:	00000400 	.word	0x00000400
 80018fc:	20000618 	.word	0x20000618
 8001900:	20005448 	.word	0x20005448

08001904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <SystemInit+0x20>)
 800190a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800190e:	4a05      	ldr	r2, [pc, #20]	; (8001924 <SystemInit+0x20>)
 8001910:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001960 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800192c:	480d      	ldr	r0, [pc, #52]	; (8001964 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800192e:	490e      	ldr	r1, [pc, #56]	; (8001968 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001930:	4a0e      	ldr	r2, [pc, #56]	; (800196c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001934:	e002      	b.n	800193c <LoopCopyDataInit>

08001936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193a:	3304      	adds	r3, #4

0800193c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800193c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800193e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001940:	d3f9      	bcc.n	8001936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001942:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001944:	4c0b      	ldr	r4, [pc, #44]	; (8001974 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001948:	e001      	b.n	800194e <LoopFillZerobss>

0800194a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800194c:	3204      	adds	r2, #4

0800194e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800194e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001950:	d3fb      	bcc.n	800194a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001952:	f7ff ffd7 	bl	8001904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001956:	f007 ff31 	bl	80097bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195a:	f7ff fac1 	bl	8000ee0 <main>
  bx  lr    
 800195e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001968:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800196c:	0800cb9c 	.word	0x0800cb9c
  ldr r2, =_sbss
 8001970:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001974:	20005444 	.word	0x20005444

08001978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC_IRQHandler>
	...

0800197c <checkForI2CDevices>:
 *      Author: Jacoby
 */
#include <stm32f4xx_hal.h>


void checkForI2CDevices(UART_HandleTypeDef uart, I2C_HandleTypeDef I2C ){
 800197c:	b084      	sub	sp, #16
 800197e:	b5b0      	push	{r4, r5, r7, lr}
 8001980:	b092      	sub	sp, #72	; 0x48
 8001982:	af00      	add	r7, sp, #0
 8001984:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001988:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t Buffer[25] = {0};
 800198c:	2300      	movs	r3, #0
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001990:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]
 80019a0:	751a      	strb	r2, [r3, #20]
	uint8_t Space[] = " - ";
 80019a2:	4b38      	ldr	r3, [pc, #224]	; (8001a84 <checkForI2CDevices+0x108>)
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 80019a6:	4b38      	ldr	r3, [pc, #224]	; (8001a88 <checkForI2CDevices+0x10c>)
 80019a8:	f107 040c 	add.w	r4, r7, #12
 80019ac:	461d      	mov	r5, r3
 80019ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019b6:	c403      	stmia	r4!, {r0, r1}
 80019b8:	8022      	strh	r2, [r4, #0]
	uint8_t EndMSG[] = "Done! \r\n\r\n";
 80019ba:	4a34      	ldr	r2, [pc, #208]	; (8001a8c <checkForI2CDevices+0x110>)
 80019bc:	463b      	mov	r3, r7
 80019be:	ca07      	ldmia	r2, {r0, r1, r2}
 80019c0:	c303      	stmia	r3!, {r0, r1}
 80019c2:	801a      	strh	r2, [r3, #0]
 80019c4:	3302      	adds	r3, #2
 80019c6:	0c12      	lsrs	r2, r2, #16
 80019c8:	701a      	strb	r2, [r3, #0]

    uint8_t i = 0, ret;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    HAL_Delay(1000);
 80019d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019d4:	f001 f92a 	bl	8002c2c <HAL_Delay>

    /*-[ I2C Bus Scanning ]-*/
    HAL_UART_Transmit(&uart, StartMSG, sizeof(StartMSG), HAL_MAX_DELAY);
 80019d8:	f107 010c 	add.w	r1, r7, #12
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295
 80019e0:	221a      	movs	r2, #26
 80019e2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80019e6:	f004 fd2e 	bl	8006446 <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 80019ea:	2301      	movs	r3, #1
 80019ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80019f0:	e035      	b.n	8001a5e <checkForI2CDevices+0xe2>
    {
        ret = HAL_I2C_IsDeviceReady(&I2C, (uint16_t)(i<<1), 3, 5);
 80019f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	b299      	uxth	r1, r3
 80019fc:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8001a00:	2305      	movs	r3, #5
 8001a02:	2203      	movs	r2, #3
 8001a04:	f002 f842 	bl	8003a8c <HAL_I2C_IsDeviceReady>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        if (ret != HAL_OK) /* No ACK Received At That Address */
 8001a0e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d009      	beq.n	8001a2a <checkForI2CDevices+0xae>
        {
            HAL_UART_Transmit(&uart, Space, sizeof(Space), HAL_MAX_DELAY);
 8001a16:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1e:	2204      	movs	r2, #4
 8001a20:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001a24:	f004 fd0f 	bl	8006446 <HAL_UART_Transmit>
 8001a28:	e014      	b.n	8001a54 <checkForI2CDevices+0xd8>
        }
        else if(ret == HAL_OK)
 8001a2a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d110      	bne.n	8001a54 <checkForI2CDevices+0xd8>
        {
            sprintf(Buffer, "0x%X", i);
 8001a32:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001a36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3a:	4915      	ldr	r1, [pc, #84]	; (8001a90 <checkForI2CDevices+0x114>)
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f008 fcef 	bl	800a420 <siprintf>
            HAL_UART_Transmit(&uart, Buffer, sizeof(Buffer), HAL_MAX_DELAY);
 8001a42:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
 8001a4a:	2219      	movs	r2, #25
 8001a4c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001a50:	f004 fcf9 	bl	8006446 <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 8001a54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001a58:	3301      	adds	r3, #1
 8001a5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001a5e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	dac5      	bge.n	80019f2 <checkForI2CDevices+0x76>
        }
    }
    HAL_UART_Transmit(&uart, EndMSG, sizeof(EndMSG), HAL_MAX_DELAY);
 8001a66:	4639      	mov	r1, r7
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6c:	220b      	movs	r2, #11
 8001a6e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001a72:	f004 fce8 	bl	8006446 <HAL_UART_Transmit>
    /*--[ Scanning Done ]--*/

}
 8001a76:	bf00      	nop
 8001a78:	3748      	adds	r7, #72	; 0x48
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001a80:	b004      	add	sp, #16
 8001a82:	4770      	bx	lr
 8001a84:	00202d20 	.word	0x00202d20
 8001a88:	0800c4d8 	.word	0x0800c4d8
 8001a8c:	0800c4f4 	.word	0x0800c4f4
 8001a90:	0800c4d0 	.word	0x0800c4d0

08001a94 <ism330dlc_read_reg>:
  *
  */
int32_t ism330dlc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	72fb      	strb	r3, [r7, #11]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	685c      	ldr	r4, [r3, #4]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6898      	ldr	r0, [r3, #8]
 8001ab0:	893b      	ldrh	r3, [r7, #8]
 8001ab2:	7af9      	ldrb	r1, [r7, #11]
 8001ab4:	687a      	ldr	r2, [r7, #4]
 8001ab6:	47a0      	blx	r4
 8001ab8:	6178      	str	r0, [r7, #20]

  return ret;
 8001aba:	697b      	ldr	r3, [r7, #20]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	371c      	adds	r7, #28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd90      	pop	{r4, r7, pc}

08001ac4 <ism330dlc_write_reg>:
  *
  */
int32_t ism330dlc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	607a      	str	r2, [r7, #4]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	72fb      	strb	r3, [r7, #11]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681c      	ldr	r4, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6898      	ldr	r0, [r3, #8]
 8001ae0:	893b      	ldrh	r3, [r7, #8]
 8001ae2:	7af9      	ldrb	r1, [r7, #11]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	47a0      	blx	r4
 8001ae8:	6178      	str	r0, [r7, #20]

  return ret;
 8001aea:	697b      	ldr	r3, [r7, #20]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	371c      	adds	r7, #28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd90      	pop	{r4, r7, pc}

08001af4 <ism330dlc_from_fs2g_to_mg>:
  * @{
  *
  */

float_t ism330dlc_from_fs2g_to_mg(int16_t lsb)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8001afe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b02:	ee07 3a90 	vmov	s15, r3
 8001b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b0a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001b20 <ism330dlc_from_fs2g_to_mg+0x2c>
 8001b0e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001b12:	eeb0 0a67 	vmov.f32	s0, s15
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	3d79db23 	.word	0x3d79db23

08001b24 <ism330dlc_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 70.0f);
}

float_t ism330dlc_from_lsb_to_celsius(int16_t lsb)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8001b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b3a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001b58 <ism330dlc_from_lsb_to_celsius+0x34>
 8001b3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b42:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001b46:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	43800000 	.word	0x43800000

08001b5c <ism330dlc_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    ism330dlc_fs_xl_t val)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 8001b68:	f107 0208 	add.w	r2, r7, #8
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	2110      	movs	r1, #16
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff8f 	bl	8001a94 <ism330dlc_read_reg>
 8001b76:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10f      	bne.n	8001b9e <ism330dlc_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	7a3b      	ldrb	r3, [r7, #8]
 8001b88:	f362 0383 	bfi	r3, r2, #2, #2
 8001b8c:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL1_XL,
 8001b8e:	f107 0208 	add.w	r2, r7, #8
 8001b92:	2301      	movs	r3, #1
 8001b94:	2110      	movs	r1, #16
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ff94 	bl	8001ac4 <ism330dlc_write_reg>
 8001b9c:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <ism330dlc_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   ism330dlc_odr_xl_t val)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 8001bb4:	f107 0208 	add.w	r2, r7, #8
 8001bb8:	2301      	movs	r3, #1
 8001bba:	2110      	movs	r1, #16
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff ff69 	bl	8001a94 <ism330dlc_read_reg>
 8001bc2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10f      	bne.n	8001bea <ism330dlc_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	f003 030f 	and.w	r3, r3, #15
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	7a3b      	ldrb	r3, [r7, #8]
 8001bd4:	f362 1307 	bfi	r3, r2, #4, #4
 8001bd8:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL1_XL,
 8001bda:	f107 0208 	add.w	r2, r7, #8
 8001bde:	2301      	movs	r3, #1
 8001be0:	2110      	movs	r1, #16
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ff6e 	bl	8001ac4 <ism330dlc_write_reg>
 8001be8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8001bea:	68fb      	ldr	r3, [r7, #12]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <ism330dlc_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_gy_full_scale_set(stmdev_ctx_t *ctx,
                                    ism330dlc_fs_g_t val)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001c00:	f107 0208 	add.w	r2, r7, #8
 8001c04:	2301      	movs	r3, #1
 8001c06:	2111      	movs	r1, #17
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff43 	bl	8001a94 <ism330dlc_read_reg>
 8001c0e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10f      	bne.n	8001c36 <ism330dlc_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8001c16:	78fb      	ldrb	r3, [r7, #3]
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	7a3b      	ldrb	r3, [r7, #8]
 8001c20:	f362 0343 	bfi	r3, r2, #1, #3
 8001c24:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001c26:	f107 0208 	add.w	r2, r7, #8
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	2111      	movs	r1, #17
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff ff48 	bl	8001ac4 <ism330dlc_write_reg>
 8001c34:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <ism330dlc_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_gy_data_rate_set(stmdev_ctx_t *ctx,
                                   ism330dlc_odr_g_t val)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001c4c:	f107 0208 	add.w	r2, r7, #8
 8001c50:	2301      	movs	r3, #1
 8001c52:	2111      	movs	r1, #17
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ff1d 	bl	8001a94 <ism330dlc_read_reg>
 8001c5a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10f      	bne.n	8001c82 <ism330dlc_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8001c62:	78fb      	ldrb	r3, [r7, #3]
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	7a3b      	ldrb	r3, [r7, #8]
 8001c6c:	f362 1307 	bfi	r3, r2, #4, #4
 8001c70:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001c72:	f107 0208 	add.w	r2, r7, #8
 8001c76:	2301      	movs	r3, #1
 8001c78:	2111      	movs	r1, #17
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff ff22 	bl	8001ac4 <ism330dlc_write_reg>
 8001c80:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <ism330dlc_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_block_data_update_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001c98:	f107 0208 	add.w	r2, r7, #8
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	2112      	movs	r1, #18
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff fef7 	bl	8001a94 <ism330dlc_read_reg>
 8001ca6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10f      	bne.n	8001cce <ism330dlc_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	7a3b      	ldrb	r3, [r7, #8]
 8001cb8:	f362 1386 	bfi	r3, r2, #6, #1
 8001cbc:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001cbe:	f107 0208 	add.w	r2, r7, #8
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	2112      	movs	r1, #18
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff fefc 	bl	8001ac4 <ism330dlc_write_reg>
 8001ccc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001cce:	68fb      	ldr	r3, [r7, #12]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <ism330dlc_status_reg_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_status_reg_get(stmdev_ctx_t *ctx,
                                 ism330dlc_status_reg_t *val)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_STATUS_REG, (uint8_t *) val, 1);
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	211e      	movs	r1, #30
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff fed3 	bl	8001a94 <ism330dlc_read_reg>
 8001cee:	60f8      	str	r0, [r7, #12]

  return ret;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <ism330dlc_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_OUT_TEMP_L, buff, 2);
 8001d04:	f107 0208 	add.w	r2, r7, #8
 8001d08:	2302      	movs	r3, #2
 8001d0a:	2120      	movs	r1, #32
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff fec1 	bl	8001a94 <ism330dlc_read_reg>
 8001d12:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001d14:	7a7b      	ldrb	r3, [r7, #9]
 8001d16:	b21a      	sxth	r2, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	7a3b      	ldrb	r3, [r7, #8]
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	b21a      	sxth	r2, r3
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	801a      	strh	r2, [r3, #0]

  return ret;
 8001d36:	68fb      	ldr	r3, [r7, #12]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <ism330dlc_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_OUTX_L_XL, buff, 6);
 8001d4a:	f107 020c 	add.w	r2, r7, #12
 8001d4e:	2306      	movs	r3, #6
 8001d50:	2128      	movs	r1, #40	; 0x28
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff fe9e 	bl	8001a94 <ism330dlc_read_reg>
 8001d58:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001d5a:	7b7b      	ldrb	r3, [r7, #13]
 8001d5c:	b21a      	sxth	r2, r3
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	7b3b      	ldrb	r3, [r7, #12]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	b29b      	uxth	r3, r3
 8001d76:	b21a      	sxth	r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	3302      	adds	r3, #2
 8001d82:	b212      	sxth	r2, r2
 8001d84:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	3302      	adds	r3, #2
 8001d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	021b      	lsls	r3, r3, #8
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	7bbb      	ldrb	r3, [r7, #14]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	4413      	add	r3, r2
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	3302      	adds	r3, #2
 8001da0:	b212      	sxth	r2, r2
 8001da2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001da4:	7c7a      	ldrb	r2, [r7, #17]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	3304      	adds	r3, #4
 8001daa:	b212      	sxth	r2, r2
 8001dac:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	3304      	adds	r3, #4
 8001db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	7c3b      	ldrb	r3, [r7, #16]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	b212      	sxth	r2, r2
 8001dca:	801a      	strh	r2, [r3, #0]

  return ret;
 8001dcc:	697b      	ldr	r3, [r7, #20]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <ism330dlc_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_WHO_AM_I, buff, 1);
 8001de0:	2301      	movs	r3, #1
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	210f      	movs	r1, #15
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff fe54 	bl	8001a94 <ism330dlc_read_reg>
 8001dec:	60f8      	str	r0, [r7, #12]

  return ret;
 8001dee:	68fb      	ldr	r3, [r7, #12]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <ism330dlc_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001e04:	f107 0208 	add.w	r2, r7, #8
 8001e08:	2301      	movs	r3, #1
 8001e0a:	2112      	movs	r1, #18
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff fe41 	bl	8001a94 <ism330dlc_read_reg>
 8001e12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10f      	bne.n	8001e3a <ism330dlc_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8001e1a:	78fb      	ldrb	r3, [r7, #3]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	7a3b      	ldrb	r3, [r7, #8]
 8001e24:	f362 0300 	bfi	r3, r2, #0, #1
 8001e28:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001e2a:	f107 0208 	add.w	r2, r7, #8
 8001e2e:	2301      	movs	r3, #1
 8001e30:	2112      	movs	r1, #18
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff fe46 	bl	8001ac4 <ism330dlc_write_reg>
 8001e38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3710      	adds	r7, #16
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <ism330dlc_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  ism330dlc_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001e4e:	f107 0208 	add.w	r2, r7, #8
 8001e52:	2301      	movs	r3, #1
 8001e54:	2112      	movs	r1, #18
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff fe1c 	bl	8001a94 <ism330dlc_read_reg>
 8001e5c:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8001e5e:	7a3b      	ldrb	r3, [r7, #8]
 8001e60:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	461a      	mov	r2, r3
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	701a      	strb	r2, [r3, #0]

  return ret;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <ism330dlc_xl_filter_analog_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_filter_analog_set(stmdev_ctx_t *ctx,
                                       ism330dlc_bw0_xl_t val)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b084      	sub	sp, #16
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 8001e82:	f107 0208 	add.w	r2, r7, #8
 8001e86:	2301      	movs	r3, #1
 8001e88:	2110      	movs	r1, #16
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff fe02 	bl	8001a94 <ism330dlc_read_reg>
 8001e90:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10f      	bne.n	8001eb8 <ism330dlc_xl_filter_analog_set+0x42>
  {
    ctrl1_xl.bw0_xl = (uint8_t) val;
 8001e98:	78fb      	ldrb	r3, [r7, #3]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	7a3b      	ldrb	r3, [r7, #8]
 8001ea2:	f362 0300 	bfi	r3, r2, #0, #1
 8001ea6:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL1_XL,
 8001ea8:	f107 0208 	add.w	r2, r7, #8
 8001eac:	2301      	movs	r3, #1
 8001eae:	2110      	movs	r1, #16
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff fe07 	bl	8001ac4 <ism330dlc_write_reg>
 8001eb6:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <ism330dlc_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                       ism330dlc_input_composite_t val)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl8_xl_t ctrl8_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL8_XL,
 8001ece:	f107 0208 	add.w	r2, r7, #8
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	2117      	movs	r1, #23
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff fddc 	bl	8001a94 <ism330dlc_read_reg>
 8001edc:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl8_xl, 1);

  if (ret == 0)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d120      	bne.n	8001f26 <ism330dlc_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 8001ee4:	78fb      	ldrb	r3, [r7, #3]
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	7a3b      	ldrb	r3, [r7, #8]
 8001ef0:	f362 03c3 	bfi	r3, r2, #3, #1
 8001ef4:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8001ef6:	78fb      	ldrb	r3, [r7, #3]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	7a3b      	ldrb	r3, [r7, #8]
 8001f00:	f362 1346 	bfi	r3, r2, #5, #2
 8001f04:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8001f06:	7a3b      	ldrb	r3, [r7, #8]
 8001f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f0c:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 8001f0e:	7a3b      	ldrb	r3, [r7, #8]
 8001f10:	f36f 0382 	bfc	r3, #2, #1
 8001f14:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL8_XL,
 8001f16:	f107 0208 	add.w	r2, r7, #8
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	2117      	movs	r1, #23
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff fdd0 	bl	8001ac4 <ism330dlc_write_reg>
 8001f24:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 8001f26:	68fb      	ldr	r3, [r7, #12]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <ism330dlc_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_gy_band_pass_set(stmdev_ctx_t *ctx,
                                   ism330dlc_lpf1_sel_g_t val)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl4_c_t ctrl4_c;
  ism330dlc_ctrl6_c_t ctrl6_c;
  ism330dlc_ctrl7_g_t ctrl7_g;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001f3c:	f107 0208 	add.w	r2, r7, #8
 8001f40:	2301      	movs	r3, #1
 8001f42:	2116      	movs	r1, #22
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff fda5 	bl	8001a94 <ism330dlc_read_reg>
 8001f4a:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d157      	bne.n	8002002 <ism330dlc_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	7a3b      	ldrb	r3, [r7, #8]
 8001f5e:	f362 1305 	bfi	r3, r2, #4, #2
 8001f62:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	09db      	lsrs	r3, r3, #7
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	7a3b      	ldrb	r3, [r7, #8]
 8001f72:	f362 1386 	bfi	r3, r2, #6, #1
 8001f76:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8001f78:	f107 0208 	add.w	r2, r7, #8
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	2116      	movs	r1, #22
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff fd9f 	bl	8001ac4 <ism330dlc_write_reg>
 8001f86:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d139      	bne.n	8002002 <ism330dlc_gy_band_pass_set+0xd2>
    {
      ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8001f8e:	f107 020c 	add.w	r2, r7, #12
 8001f92:	2301      	movs	r3, #1
 8001f94:	2115      	movs	r1, #21
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fd7c 	bl	8001a94 <ism330dlc_read_reg>
 8001f9c:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d12e      	bne.n	8002002 <ism330dlc_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8001fa4:	78fb      	ldrb	r3, [r7, #3]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	7b3b      	ldrb	r3, [r7, #12]
 8001fae:	f362 0301 	bfi	r3, r2, #0, #2
 8001fb2:	733b      	strb	r3, [r7, #12]
        ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL6_C,
 8001fb4:	f107 020c 	add.w	r2, r7, #12
 8001fb8:	2301      	movs	r3, #1
 8001fba:	2115      	movs	r1, #21
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff fd81 	bl	8001ac4 <ism330dlc_write_reg>
 8001fc2:	6178      	str	r0, [r7, #20]
                                  (uint8_t *)&ctrl6_c, 1);

        if (ret == 0)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d11b      	bne.n	8002002 <ism330dlc_gy_band_pass_set+0xd2>
        {
          ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL4_C,
 8001fca:	f107 0210 	add.w	r2, r7, #16
 8001fce:	2301      	movs	r3, #1
 8001fd0:	2113      	movs	r1, #19
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7ff fd5e 	bl	8001a94 <ism330dlc_read_reg>
 8001fd8:	6178      	str	r0, [r7, #20]
                                   (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d110      	bne.n	8002002 <ism330dlc_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	08db      	lsrs	r3, r3, #3
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	7c3b      	ldrb	r3, [r7, #16]
 8001fec:	f362 0341 	bfi	r3, r2, #1, #1
 8001ff0:	743b      	strb	r3, [r7, #16]
            ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL4_C,
 8001ff2:	f107 0210 	add.w	r2, r7, #16
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	2113      	movs	r1, #19
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fd62 	bl	8001ac4 <ism330dlc_write_reg>
 8002000:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 8002002:	697b      	ldr	r3, [r7, #20]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <MRT_ISM330DLC_Setup>:

UART_HandleTypeDef* Guart;


void MRT_ISM330DLC_Setup(UART_HandleTypeDef *uart, I2C_HandleTypeDef SENSOR_BUS)
	{
 800200c:	b084      	sub	sp, #16
 800200e:	b590      	push	{r4, r7, lr}
 8002010:	b0df      	sub	sp, #380	; 0x17c
 8002012:	af00      	add	r7, sp, #0
 8002014:	1d3c      	adds	r4, r7, #4
 8002016:	6020      	str	r0, [r4, #0]
 8002018:	f507 70c6 	add.w	r0, r7, #396	; 0x18c
 800201c:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	Guart=uart;
 8002020:	4a51      	ldr	r2, [pc, #324]	; (8002168 <MRT_ISM330DLC_Setup+0x15c>)
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6013      	str	r3, [r2, #0]

	  HAL_UART_Transmit(uart,"\r\nLISM330DLC Setup Starts\r\n", 29, HAL_MAX_DELAY);
 8002028:	1d38      	adds	r0, r7, #4
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
 800202e:	221d      	movs	r2, #29
 8002030:	494e      	ldr	r1, [pc, #312]	; (800216c <MRT_ISM330DLC_Setup+0x160>)
 8002032:	6800      	ldr	r0, [r0, #0]
 8002034:	f004 fa07 	bl	8006446 <HAL_UART_Transmit>
	  /* Initialize mems driver interface */
	  dev_ctx.write_reg = write;
 8002038:	4b4d      	ldr	r3, [pc, #308]	; (8002170 <MRT_ISM330DLC_Setup+0x164>)
 800203a:	4a4e      	ldr	r2, [pc, #312]	; (8002174 <MRT_ISM330DLC_Setup+0x168>)
 800203c:	601a      	str	r2, [r3, #0]
	  dev_ctx.read_reg = read;
 800203e:	4b4c      	ldr	r3, [pc, #304]	; (8002170 <MRT_ISM330DLC_Setup+0x164>)
 8002040:	4a4d      	ldr	r2, [pc, #308]	; (8002178 <MRT_ISM330DLC_Setup+0x16c>)
 8002042:	605a      	str	r2, [r3, #4]
	  dev_ctx.handle = &SENSOR_BUS;
 8002044:	4a4a      	ldr	r2, [pc, #296]	; (8002170 <MRT_ISM330DLC_Setup+0x164>)
 8002046:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800204a:	6093      	str	r3, [r2, #8]
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 800204c:	200a      	movs	r0, #10
 800204e:	f000 fded 	bl	8002c2c <HAL_Delay>
	  /* Check device ID */
	  ism330dlc_device_id_get(&dev_ctx, &whoamI);
 8002052:	494a      	ldr	r1, [pc, #296]	; (800217c <MRT_ISM330DLC_Setup+0x170>)
 8002054:	4846      	ldr	r0, [pc, #280]	; (8002170 <MRT_ISM330DLC_Setup+0x164>)
 8002056:	f7ff febe 	bl	8001dd6 <ism330dlc_device_id_get>

	  	  HAL_UART_Transmit(uart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 800205a:	1d38      	adds	r0, r7, #4
 800205c:	f04f 33ff 	mov.w	r3, #4294967295
 8002060:	2215      	movs	r2, #21
 8002062:	4947      	ldr	r1, [pc, #284]	; (8002180 <MRT_ISM330DLC_Setup+0x174>)
 8002064:	6800      	ldr	r0, [r0, #0]
 8002066:	f004 f9ee 	bl	8006446 <HAL_UART_Transmit>
	  if (whoamI != ISM330DLC_ID){
 800206a:	4b44      	ldr	r3, [pc, #272]	; (800217c <MRT_ISM330DLC_Setup+0x170>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b6a      	cmp	r3, #106	; 0x6a
 8002070:	d035      	beq.n	80020de <MRT_ISM330DLC_Setup+0xd2>
		  HAL_UART_Transmit(uart,"NOT OK\r\n", 10, HAL_MAX_DELAY);
 8002072:	1d38      	adds	r0, r7, #4
 8002074:	f04f 33ff 	mov.w	r3, #4294967295
 8002078:	220a      	movs	r2, #10
 800207a:	4942      	ldr	r1, [pc, #264]	; (8002184 <MRT_ISM330DLC_Setup+0x178>)
 800207c:	6800      	ldr	r0, [r0, #0]
 800207e:	f004 f9e2 	bl	8006446 <HAL_UART_Transmit>

		  char* whoRU[32];
		  sprintf(whoRU,"This Device is: 0x%X\r\n",whoamI);
 8002082:	4b3e      	ldr	r3, [pc, #248]	; (800217c <MRT_ISM330DLC_Setup+0x170>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	f107 030c 	add.w	r3, r7, #12
 800208c:	493e      	ldr	r1, [pc, #248]	; (8002188 <MRT_ISM330DLC_Setup+0x17c>)
 800208e:	4618      	mov	r0, r3
 8002090:	f008 f9c6 	bl	800a420 <siprintf>
		  HAL_UART_Transmit(uart,whoRU, strlen(whoRU), HAL_MAX_DELAY);
 8002094:	f107 030c 	add.w	r3, r7, #12
 8002098:	4618      	mov	r0, r3
 800209a:	f7fe f8b9 	bl	8000210 <strlen>
 800209e:	4603      	mov	r3, r0
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	f107 010c 	add.w	r1, r7, #12
 80020a6:	1d38      	adds	r0, r7, #4
 80020a8:	f04f 33ff 	mov.w	r3, #4294967295
 80020ac:	6800      	ldr	r0, [r0, #0]
 80020ae:	f004 f9ca 	bl	8006446 <HAL_UART_Transmit>
		  char* whoShould[59];
		  sprintf(whoShould,"This Device should be: 0x%X\r\nProgram Terminated\r\n",ISM330DLC_ID);
 80020b2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80020b6:	226a      	movs	r2, #106	; 0x6a
 80020b8:	4934      	ldr	r1, [pc, #208]	; (800218c <MRT_ISM330DLC_Setup+0x180>)
 80020ba:	4618      	mov	r0, r3
 80020bc:	f008 f9b0 	bl	800a420 <siprintf>
		  HAL_UART_Transmit(uart,whoShould, strlen(whoShould), HAL_MAX_DELAY);
 80020c0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe f8a3 	bl	8000210 <strlen>
 80020ca:	4603      	mov	r3, r0
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80020d2:	1d38      	adds	r0, r7, #4
 80020d4:	f04f 33ff 	mov.w	r3, #4294967295
 80020d8:	6800      	ldr	r0, [r0, #0]
 80020da:	f004 f9b4 	bl	8006446 <HAL_UART_Transmit>
		  //while(1);
	  }
	  	  HAL_UART_Transmit(uart,"OK\n\r", 6, HAL_MAX_DELAY);
 80020de:	1d38      	adds	r0, r7, #4
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295
 80020e4:	2206      	movs	r2, #6
 80020e6:	492a      	ldr	r1, [pc, #168]	; (8002190 <MRT_ISM330DLC_Setup+0x184>)
 80020e8:	6800      	ldr	r0, [r0, #0]
 80020ea:	f004 f9ac 	bl	8006446 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  ism330dlc_reset_set(&dev_ctx, PROPERTY_ENABLE);
 80020ee:	2101      	movs	r1, #1
 80020f0:	481f      	ldr	r0, [pc, #124]	; (8002170 <MRT_ISM330DLC_Setup+0x164>)
 80020f2:	f7ff fe81 	bl	8001df8 <ism330dlc_reset_set>

	  do {
		ism330dlc_reset_get(&dev_ctx, &rst);
 80020f6:	4927      	ldr	r1, [pc, #156]	; (8002194 <MRT_ISM330DLC_Setup+0x188>)
 80020f8:	481d      	ldr	r0, [pc, #116]	; (8002170 <MRT_ISM330DLC_Setup+0x164>)
 80020fa:	f7ff fea3 	bl	8001e44 <ism330dlc_reset_get>
	  } while (rst);
 80020fe:	4b25      	ldr	r3, [pc, #148]	; (8002194 <MRT_ISM330DLC_Setup+0x188>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f7      	bne.n	80020f6 <MRT_ISM330DLC_Setup+0xea>


	  /* Enable Block Data Update */
	    ism330dlc_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8002106:	2101      	movs	r1, #1
 8002108:	4819      	ldr	r0, [pc, #100]	; (8002170 <MRT_ISM330DLC_Setup+0x164>)
 800210a:	f7ff fdbf 	bl	8001c8c <ism330dlc_block_data_update_set>
	    /* Set Output Data Rate */
	    ism330dlc_xl_data_rate_set(&dev_ctx, ISM330DLC_XL_ODR_12Hz5);
 800210e:	2101      	movs	r1, #1
 8002110:	4817      	ldr	r0, [pc, #92]	; (8002170 <MRT_ISM330DLC_Setup+0x164>)
 8002112:	f7ff fd49 	bl	8001ba8 <ism330dlc_xl_data_rate_set>
	    ism330dlc_gy_data_rate_set(&dev_ctx, ISM330DLC_GY_ODR_12Hz5);
 8002116:	2101      	movs	r1, #1
 8002118:	4815      	ldr	r0, [pc, #84]	; (8002170 <MRT_ISM330DLC_Setup+0x164>)
 800211a:	f7ff fd91 	bl	8001c40 <ism330dlc_gy_data_rate_set>
	    /* Set full scale */
	    ism330dlc_xl_full_scale_set(&dev_ctx, ISM330DLC_2g);
 800211e:	2100      	movs	r1, #0
 8002120:	4813      	ldr	r0, [pc, #76]	; (8002170 <MRT_ISM330DLC_Setup+0x164>)
 8002122:	f7ff fd1b 	bl	8001b5c <ism330dlc_xl_full_scale_set>
	    ism330dlc_gy_full_scale_set(&dev_ctx, ISM330DLC_2000dps);
 8002126:	2106      	movs	r1, #6
 8002128:	4811      	ldr	r0, [pc, #68]	; (8002170 <MRT_ISM330DLC_Setup+0x164>)
 800212a:	f7ff fd63 	bl	8001bf4 <ism330dlc_gy_full_scale_set>
	    /* Configure filtering chain(No aux interface) */
	    /* Accelerometer - analog filter */
	    ism330dlc_xl_filter_analog_set(&dev_ctx, ISM330DLC_XL_ANA_BW_400Hz);
 800212e:	2101      	movs	r1, #1
 8002130:	480f      	ldr	r0, [pc, #60]	; (8002170 <MRT_ISM330DLC_Setup+0x164>)
 8002132:	f7ff fea0 	bl	8001e76 <ism330dlc_xl_filter_analog_set>
	    /* Accelerometer - LPF1 path ( LPF2 not used )*/
	    //ism330dlc_xl_lp1_bandwidth_set(dev_ctx, ISM330DLC_XL_LP1_ODR_DIV_4);
	    /* Accelerometer - LPF1 + LPF2 path */
	    ism330dlc_xl_lp2_bandwidth_set(&dev_ctx,
 8002136:	2111      	movs	r1, #17
 8002138:	480d      	ldr	r0, [pc, #52]	; (8002170 <MRT_ISM330DLC_Setup+0x164>)
 800213a:	f7ff fec2 	bl	8001ec2 <ism330dlc_xl_lp2_bandwidth_set>
	                                   ISM330DLC_XL_LOW_NOISE_LP_ODR_DIV_100);
	    /* Accelerometer - High Pass / Slope path */
	    //ism330dlc_xl_reference_mode_set(&dev_ctx, PROPERTY_DISABLE);
	    //ism330dlc_xl_hp_bandwidth_set(&dev_ctx, ISM330DLC_XL_HP_ODR_DIV_100);
	    /* Gyroscope - filtering chain */
	    ism330dlc_gy_band_pass_set(&dev_ctx, ISM330DLC_HP_260mHz_LP1_STRONG);
 800213e:	21a8      	movs	r1, #168	; 0xa8
 8002140:	480b      	ldr	r0, [pc, #44]	; (8002170 <MRT_ISM330DLC_Setup+0x164>)
 8002142:	f7ff fef5 	bl	8001f30 <ism330dlc_gy_band_pass_set>
	    HAL_UART_Transmit(uart,"LISM330DLC Setup Ends\r\n\r\n", 25, HAL_MAX_DELAY);
 8002146:	1d38      	adds	r0, r7, #4
 8002148:	f04f 33ff 	mov.w	r3, #4294967295
 800214c:	2219      	movs	r2, #25
 800214e:	4912      	ldr	r1, [pc, #72]	; (8002198 <MRT_ISM330DLC_Setup+0x18c>)
 8002150:	6800      	ldr	r0, [r0, #0]
 8002152:	f004 f978 	bl	8006446 <HAL_UART_Transmit>
	}
 8002156:	bf00      	nop
 8002158:	f507 77be 	add.w	r7, r7, #380	; 0x17c
 800215c:	46bd      	mov	sp, r7
 800215e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002162:	b004      	add	sp, #16
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20005358 	.word	0x20005358
 800216c:	0800c500 	.word	0x0800c500
 8002170:	20005268 	.word	0x20005268
 8002174:	08002333 	.word	0x08002333
 8002178:	0800236d 	.word	0x0800236d
 800217c:	2000061c 	.word	0x2000061c
 8002180:	0800c51c 	.word	0x0800c51c
 8002184:	0800c534 	.word	0x0800c534
 8002188:	0800c540 	.word	0x0800c540
 800218c:	0800c558 	.word	0x0800c558
 8002190:	0800c58c 	.word	0x0800c58c
 8002194:	2000061d 	.word	0x2000061d
 8002198:	0800c594 	.word	0x0800c594

0800219c <ISM330DLC_getAcceleration>:


/*
 * Get acceleration values
 */
void ISM330DLC_getAcceleration(int16_t data_raw_acceleration[3],float acceleration_mg[3],stmdev_ctx_t *dev_ctx){
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
		ism330dlc_reg_t reg; //For some reason, this one has to be in the loop
		ism330dlc_status_reg_get(dev_ctx, &reg.status_reg);
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4619      	mov	r1, r3
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff fd92 	bl	8001cd8 <ism330dlc_status_reg_get>

		HAL_UART_Transmit(Guart,"Start A\r\n",9,HAL_MAX_DELAY);
 80021b4:	4b24      	ldr	r3, [pc, #144]	; (8002248 <ISM330DLC_getAcceleration+0xac>)
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	f04f 33ff 	mov.w	r3, #4294967295
 80021bc:	2209      	movs	r2, #9
 80021be:	4923      	ldr	r1, [pc, #140]	; (800224c <ISM330DLC_getAcceleration+0xb0>)
 80021c0:	f004 f941 	bl	8006446 <HAL_UART_Transmit>

		if (reg.status_reg.gda) {
 80021c4:	7d3b      	ldrb	r3, [r7, #20]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d02e      	beq.n	800222e <ISM330DLC_getAcceleration+0x92>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80021d0:	2206      	movs	r2, #6
 80021d2:	2100      	movs	r1, #0
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f007 fb49 	bl	800986c <memset>
        ism330dlc_acceleration_raw_get(dev_ctx, data_raw_acceleration);
 80021da:	68f9      	ldr	r1, [r7, #12]
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff fdaf 	bl	8001d40 <ism330dlc_acceleration_raw_get>
        acceleration_mg[0] = ism330dlc_from_fs2g_to_mg(
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fc83 	bl	8001af4 <ism330dlc_from_fs2g_to_mg>
 80021ee:	eef0 7a40 	vmov.f32	s15, s0
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = ism330dlc_from_fs2g_to_mg(
                               data_raw_acceleration[1]);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	3302      	adds	r3, #2
        acceleration_mg[1] = ism330dlc_from_fs2g_to_mg(
 80021fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	1d1c      	adds	r4, r3, #4
 8002204:	4610      	mov	r0, r2
 8002206:	f7ff fc75 	bl	8001af4 <ism330dlc_from_fs2g_to_mg>
 800220a:	eef0 7a40 	vmov.f32	s15, s0
 800220e:	edc4 7a00 	vstr	s15, [r4]
        acceleration_mg[2] = ism330dlc_from_fs2g_to_mg(
                               data_raw_acceleration[2]);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	3304      	adds	r3, #4
        acceleration_mg[2] = ism330dlc_from_fs2g_to_mg(
 8002216:	f9b3 2000 	ldrsh.w	r2, [r3]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	f103 0408 	add.w	r4, r3, #8
 8002220:	4610      	mov	r0, r2
 8002222:	f7ff fc67 	bl	8001af4 <ism330dlc_from_fs2g_to_mg>
 8002226:	eef0 7a40 	vmov.f32	s15, s0
 800222a:	edc4 7a00 	vstr	s15, [r4]
      }

		HAL_UART_Transmit(Guart,"End A\r\n",7,HAL_MAX_DELAY);
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <ISM330DLC_getAcceleration+0xac>)
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	2207      	movs	r2, #7
 8002238:	4905      	ldr	r1, [pc, #20]	; (8002250 <ISM330DLC_getAcceleration+0xb4>)
 800223a:	f004 f904 	bl	8006446 <HAL_UART_Transmit>

}
 800223e:	bf00      	nop
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	bd90      	pop	{r4, r7, pc}
 8002246:	bf00      	nop
 8002248:	20005358 	.word	0x20005358
 800224c:	0800c5b0 	.word	0x0800c5b0
 8002250:	0800c5bc 	.word	0x0800c5bc

08002254 <ISM330DLC_getAngularRate>:


/*
 * Get angular rate values
 */
void ISM330DLC_getAngularRate(int16_t data_raw_angular_rate[3],float angular_rate_mdps[3],stmdev_ctx_t *dev_ctx){
 8002254:	b590      	push	{r4, r7, lr}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
		ism330dlc_reg_t reg; //For some reason, this one has to be in the loop
		ism330dlc_status_reg_get(dev_ctx, &reg.status_reg);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff fd36 	bl	8001cd8 <ism330dlc_status_reg_get>

		if (reg.status_reg.xlda) {
 800226c:	7d3b      	ldrb	r3, [r7, #20]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d02e      	beq.n	80022d6 <ISM330DLC_getAngularRate+0x82>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8002278:	2206      	movs	r2, #6
 800227a:	2100      	movs	r1, #0
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f007 faf5 	bl	800986c <memset>
		ism330dlc_acceleration_raw_get(dev_ctx, data_raw_angular_rate);
 8002282:	68f9      	ldr	r1, [r7, #12]
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff fd5b 	bl	8001d40 <ism330dlc_acceleration_raw_get>
		angular_rate_mdps[0] = ism330dlc_from_fs2g_to_mg(
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fc2f 	bl	8001af4 <ism330dlc_from_fs2g_to_mg>
 8002296:	eef0 7a40 	vmov.f32	s15, s0
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	edc3 7a00 	vstr	s15, [r3]
		data_raw_angular_rate[0]);
		angular_rate_mdps[1] = ism330dlc_from_fs2g_to_mg(
		data_raw_angular_rate[1]);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	3302      	adds	r3, #2
		angular_rate_mdps[1] = ism330dlc_from_fs2g_to_mg(
 80022a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	1d1c      	adds	r4, r3, #4
 80022ac:	4610      	mov	r0, r2
 80022ae:	f7ff fc21 	bl	8001af4 <ism330dlc_from_fs2g_to_mg>
 80022b2:	eef0 7a40 	vmov.f32	s15, s0
 80022b6:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] = ism330dlc_from_fs2g_to_mg(
		data_raw_angular_rate[2]);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	3304      	adds	r3, #4
		angular_rate_mdps[2] = ism330dlc_from_fs2g_to_mg(
 80022be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	f103 0408 	add.w	r4, r3, #8
 80022c8:	4610      	mov	r0, r2
 80022ca:	f7ff fc13 	bl	8001af4 <ism330dlc_from_fs2g_to_mg>
 80022ce:	eef0 7a40 	vmov.f32	s15, s0
 80022d2:	edc4 7a00 	vstr	s15, [r4]
		}

}
 80022d6:	bf00      	nop
 80022d8:	371c      	adds	r7, #28
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd90      	pop	{r4, r7, pc}

080022de <ISM330DLC_getTemperature>:


/*
 * Get temperature value
 */
void ISM330DLC_getTemperature(int16_t data_raw_temperature[1],float temperature_degC[1],stmdev_ctx_t *dev_ctx){
 80022de:	b580      	push	{r7, lr}
 80022e0:	b086      	sub	sp, #24
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
	ism330dlc_reg_t reg; //For some reason, this one has to be in the loop
	ism330dlc_status_reg_get(dev_ctx, &reg.status_reg);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff fcf1 	bl	8001cd8 <ism330dlc_status_reg_get>
	if (reg.status_reg.tda) {
 80022f6:	7d3b      	ldrb	r3, [r7, #20]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d013      	beq.n	800232a <ISM330DLC_getTemperature+0x4c>
		//Read temperature data
		memset(data_raw_temperature, 0x00, sizeof(int16_t));
 8002302:	2202      	movs	r2, #2
 8002304:	2100      	movs	r1, #0
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f007 fab0 	bl	800986c <memset>
		ism330dlc_temperature_raw_get(dev_ctx, data_raw_temperature);
 800230c:	68f9      	ldr	r1, [r7, #12]
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff fcf3 	bl	8001cfa <ism330dlc_temperature_raw_get>
		temperature_degC[0] = ism330dlc_from_lsb_to_celsius(data_raw_temperature[0]);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fc02 	bl	8001b24 <ism330dlc_from_lsb_to_celsius>
 8002320:	eef0 7a40 	vmov.f32	s15, s0
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800232a:	bf00      	nop
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b088      	sub	sp, #32
 8002336:	af04      	add	r7, sp, #16
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	461a      	mov	r2, r3
 800233e:	460b      	mov	r3, r1
 8002340:	72fb      	strb	r3, [r7, #11]
 8002342:	4613      	mov	r3, r2
 8002344:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, ISM330DLC_I2C_ADD_L, reg,
 8002346:	7afb      	ldrb	r3, [r7, #11]
 8002348:	b29a      	uxth	r2, r3
 800234a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800234e:	9302      	str	r3, [sp, #8]
 8002350:	893b      	ldrh	r3, [r7, #8]
 8002352:	9301      	str	r3, [sp, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2301      	movs	r3, #1
 800235a:	21d5      	movs	r1, #213	; 0xd5
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f001 f875 	bl	800344c <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af04      	add	r7, sp, #16
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	461a      	mov	r2, r3
 8002378:	460b      	mov	r3, r1
 800237a:	72fb      	strb	r3, [r7, #11]
 800237c:	4613      	mov	r3, r2
 800237e:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, ISM330DLC_I2C_ADD_L, reg,
 8002380:	7afb      	ldrb	r3, [r7, #11]
 8002382:	b29a      	uxth	r2, r3
 8002384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002388:	9302      	str	r3, [sp, #8]
 800238a:	893b      	ldrh	r3, [r7, #8]
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	2301      	movs	r3, #1
 8002394:	21d5      	movs	r1, #213	; 0xd5
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f001 f952 	bl	8003640 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  while (size--) {
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	1e5a      	subs	r2, r3, #1
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf14      	ite	ne
 80023c0:	2301      	movne	r3, #1
 80023c2:	2300      	moveq	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00e      	beq.n	80023e8 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	1c59      	adds	r1, r3, #1
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	4619      	mov	r1, r3
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	4790      	blx	r2
 80023de:	4602      	mov	r2, r0
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	4413      	add	r3, r2
 80023e4:	617b      	str	r3, [r7, #20]
  while (size--) {
 80023e6:	e7e6      	b.n	80023b6 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 80023e8:	697b      	ldr	r3, [r7, #20]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	4a06      	ldr	r2, [pc, #24]	; (8002418 <_ZN5PrintC1Ev+0x24>)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	0800c75c 	.word	0x0800c75c

0800241c <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff ffe4 	bl	80023f4 <_ZN5PrintC1Ev>
 800242c:	4a05      	ldr	r2, [pc, #20]	; (8002444 <_ZN6StreamC1Ev+0x28>)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	0800c78c 	.word	0x0800c78c

08002448 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ffe1 	bl	800241c <_ZN6StreamC1Ev>
 800245a:	4a16      	ldr	r2, [pc, #88]	; (80024b4 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	3390      	adds	r3, #144	; 0x90
 800246a:	2220      	movs	r2, #32
 800246c:	2100      	movs	r1, #0
 800246e:	4618      	mov	r0, r3
 8002470:	f007 f9fc 	bl	800986c <memset>
  rxBufferIndex = 0;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	0800c76c 	.word	0x0800c76c

080024b8 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d01d      	beq.n	800250a <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80024d4:	2b1f      	cmp	r3, #31
 80024d6:	d901      	bls.n	80024dc <_ZN7TwoWire5writeEh+0x24>
      return 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	e028      	b.n	800252e <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80024e2:	4619      	mov	r1, r3
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	440b      	add	r3, r1
 80024ea:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80024f2:	3301      	adds	r3, #1
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8002508:	e010      	b.n	800252c <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f984 	bl	8002818 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8002510:	1cfb      	adds	r3, r7, #3
 8002512:	2201      	movs	r2, #1
 8002514:	4619      	mov	r1, r3
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f8b7 	bl	800268a <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f949 	bl	80027b4 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	333c      	adds	r3, #60	; 0x3c
 8002526:	4618      	mov	r0, r3
 8002528:	f001 fbde 	bl	8003ce8 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 800252c:	2301      	movs	r3, #1
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b086      	sub	sp, #24
 800253a:	af00      	add	r7, sp, #0
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	d21e      	bcs.n	8002596 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68b9      	ldr	r1, [r7, #8]
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	440a      	add	r2, r1
 8002564:	7812      	ldrb	r2, [r2, #0]
 8002566:	4611      	mov	r1, r2
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	3301      	adds	r3, #1
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	e7ed      	b.n	8002550 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 f94f 	bl	8002818 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	461a      	mov	r2, r3
 800257e:	68b9      	ldr	r1, [r7, #8]
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 f882 	bl	800268a <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f914 	bl	80027b4 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	333c      	adds	r3, #60	; 0x3c
 8002590:	4618      	mov	r0, r3
 8002592:	f001 fba9 	bl	8003ce8 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 8002596:	687b      	ldr	r3, [r7, #4]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	461a      	mov	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	1ad3      	subs	r3, r2, r3
}
 80025bc:	4618      	mov	r0, r3
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  int value = -1;
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295
 80025d4:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	429a      	cmp	r2, r3
 80025e8:	bf34      	ite	cc
 80025ea:	2301      	movcc	r3, #1
 80025ec:	2300      	movcs	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d012      	beq.n	800261a <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4413      	add	r3, r2
 8002602:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002606:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	3301      	adds	r3, #1
 8002612:	b2da      	uxtb	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 800261a:	68fb      	ldr	r3, [r7, #12]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  int value = -1;
 8002630:	f04f 33ff 	mov.w	r3, #4294967295
 8002634:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800263c:	b2da      	uxtb	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002644:	b2db      	uxtb	r3, r3
 8002646:	429a      	cmp	r2, r3
 8002648:	bf34      	ite	cc
 800264a:	2301      	movcc	r3, #1
 800264c:	2300      	movcs	r3, #0
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d009      	beq.n	8002668 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800265a:	b2db      	uxtb	r3, r3
 800265c:	461a      	mov	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8002666:	60fb      	str	r3, [r7, #12]
  }

  return value;
 8002668:	68fb      	ldr	r3, [r7, #12]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <_ZN7TwoWire15i2c_slave_writeEPKci>:

    return 1;
}

int TwoWire::i2c_slave_write(const char *data, int length)
{
 800268a:	b480      	push	{r7}
 800268c:	b089      	sub	sp, #36	; 0x24
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269e:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	dd41      	ble.n	800272a <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 80026a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026aa:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b6:	2b80      	cmp	r3, #128	; 0x80
 80026b8:	bf14      	ite	ne
 80026ba:	2301      	movne	r3, #1
 80026bc:	2300      	moveq	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1ed      	bne.n	80026ac <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 80026d0:	f04f 33ff 	mov.w	r3, #4294967295
 80026d4:	e068      	b.n	80027a8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	60ba      	str	r2, [r7, #8]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	611a      	str	r2, [r3, #16]
        length--;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	607b      	str	r3, [r7, #4]
        size++;
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	3301      	adds	r3, #1
 80026ee:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d104      	bne.n	8002708 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8002708:	2300      	movs	r3, #0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0c8      	beq.n	80026a0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	60ba      	str	r2, [r7, #8]
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	611a      	str	r2, [r3, #16]
            length--;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3b01      	subs	r3, #1
 8002720:	607b      	str	r3, [r7, #4]
            size++;
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	3301      	adds	r3, #1
 8002726:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8002728:	e7ba      	b.n	80026a0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 800272a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800272e:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800273e:	bf14      	ite	ne
 8002740:	2301      	movne	r3, #1
 8002742:	2300      	moveq	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d008      	beq.n	800275c <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3b01      	subs	r3, #1
 800274e:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1ec      	bne.n	8002730 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8002756:	f04f 33ff 	mov.w	r3, #4294967295
 800275a:	e025      	b.n	80027a8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002760:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002764:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8002766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800276a:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b02      	cmp	r3, #2
 8002778:	bf0c      	ite	eq
 800277a:	2301      	moveq	r3, #1
 800277c:	2300      	movne	r3, #0
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	3b01      	subs	r3, #1
 8002788:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1ed      	bne.n	800276c <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8002790:	f04f 33ff 	mov.w	r3, #4294967295
 8002794:	e008      	b.n	80027a8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 80027a6:	69bb      	ldr	r3, [r7, #24]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3724      	adds	r7, #36	; 0x24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c0:	4a12      	ldr	r2, [pc, #72]	; (800280c <_ZN7TwoWire15enableInterruptEv+0x58>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d106      	bne.n	80027d4 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80027c6:	2049      	movs	r0, #73	; 0x49
 80027c8:	f000 fb4c 	bl	8002e64 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80027cc:	2048      	movs	r0, #72	; 0x48
 80027ce:	f000 fb49 	bl	8002e64 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 80027d2:	e016      	b.n	8002802 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d8:	4a0d      	ldr	r2, [pc, #52]	; (8002810 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d106      	bne.n	80027ec <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80027de:	2022      	movs	r0, #34	; 0x22
 80027e0:	f000 fb40 	bl	8002e64 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80027e4:	2021      	movs	r0, #33	; 0x21
 80027e6:	f000 fb3d 	bl	8002e64 <HAL_NVIC_EnableIRQ>
}
 80027ea:	e00a      	b.n	8002802 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f0:	4a08      	ldr	r2, [pc, #32]	; (8002814 <_ZN7TwoWire15enableInterruptEv+0x60>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d105      	bne.n	8002802 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80027f6:	2020      	movs	r0, #32
 80027f8:	f000 fb34 	bl	8002e64 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80027fc:	201f      	movs	r0, #31
 80027fe:	f000 fb31 	bl	8002e64 <HAL_NVIC_EnableIRQ>
}
 8002802:	bf00      	nop
 8002804:	3708      	adds	r7, #8
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40005c00 	.word	0x40005c00
 8002810:	40005800 	.word	0x40005800
 8002814:	40005400 	.word	0x40005400

08002818 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002824:	4a12      	ldr	r2, [pc, #72]	; (8002870 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d106      	bne.n	8002838 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 800282a:	2049      	movs	r0, #73	; 0x49
 800282c:	f000 fb28 	bl	8002e80 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8002830:	2048      	movs	r0, #72	; 0x48
 8002832:	f000 fb25 	bl	8002e80 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8002836:	e016      	b.n	8002866 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283c:	4a0d      	ldr	r2, [pc, #52]	; (8002874 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d106      	bne.n	8002850 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8002842:	2022      	movs	r0, #34	; 0x22
 8002844:	f000 fb1c 	bl	8002e80 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8002848:	2021      	movs	r0, #33	; 0x21
 800284a:	f000 fb19 	bl	8002e80 <HAL_NVIC_DisableIRQ>
}
 800284e:	e00a      	b.n	8002866 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002854:	4a08      	ldr	r2, [pc, #32]	; (8002878 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d105      	bne.n	8002866 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 800285a:	2020      	movs	r0, #32
 800285c:	f000 fb10 	bl	8002e80 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8002860:	201f      	movs	r0, #31
 8002862:	f000 fb0d 	bl	8002e80 <HAL_NVIC_DisableIRQ>
}
 8002866:	bf00      	nop
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40005c00 	.word	0x40005c00
 8002874:	40005800 	.word	0x40005800
 8002878:	40005400 	.word	0x40005400

0800287c <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d110      	bne.n	80028ae <_Z41__static_initialization_and_destruction_0ii+0x32>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002892:	4293      	cmp	r3, r2
 8002894:	d10b      	bne.n	80028ae <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8002896:	4908      	ldr	r1, [pc, #32]	; (80028b8 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002898:	4808      	ldr	r0, [pc, #32]	; (80028bc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800289a:	f7ff fdd5 	bl	8002448 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 800289e:	4908      	ldr	r1, [pc, #32]	; (80028c0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80028a0:	4808      	ldr	r0, [pc, #32]	; (80028c4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80028a2:	f7ff fdd1 	bl	8002448 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 80028a6:	4908      	ldr	r1, [pc, #32]	; (80028c8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80028a8:	4808      	ldr	r0, [pc, #32]	; (80028cc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80028aa:	f7ff fdcd 	bl	8002448 <_ZN7TwoWireC1EP11I2C_TypeDef>
 80028ae:	bf00      	nop
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40005400 	.word	0x40005400
 80028bc:	20000620 	.word	0x20000620
 80028c0:	40005800 	.word	0x40005800
 80028c4:	200006d8 	.word	0x200006d8
 80028c8:	40005c00 	.word	0x40005c00
 80028cc:	20000790 	.word	0x20000790

080028d0 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80028d8:	2001      	movs	r0, #1
 80028da:	f7ff ffcf 	bl	800287c <_Z41__static_initialization_and_destruction_0ii>
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_RTC_AlarmAEventCallback>:
RTC_TimeTypeDef sTime = {0};
RTC_DateTypeDef sDate = {0};
RTC_AlarmTypeDef sAlarm = {0};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 80028e8:	f04f 33ff 	mov.w	r3, #4294967295
 80028ec:	2208      	movs	r2, #8
 80028ee:	4905      	ldr	r1, [pc, #20]	; (8002904 <HAL_RTC_AlarmAEventCallback+0x24>)
 80028f0:	4805      	ldr	r0, [pc, #20]	; (8002908 <HAL_RTC_AlarmAEventCallback+0x28>)
 80028f2:	f003 fda8 	bl	8006446 <HAL_UART_Transmit>
	flagA = 1;
 80028f6:	4b05      	ldr	r3, [pc, #20]	; (800290c <HAL_RTC_AlarmAEventCallback+0x2c>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	0800c5c4 	.word	0x0800c5c4
 8002908:	200053a8 	.word	0x200053a8
 800290c:	20000848 	.word	0x20000848

08002910 <MRT_SetupRTOS>:
}




void MRT_SetupRTOS(UART_HandleTypeDef uart,uint8_t sleepT , uint8_t defAlarm){
 8002910:	b084      	sub	sp, #16
 8002912:	b580      	push	{r7, lr}
 8002914:	af00      	add	r7, sp, #0
 8002916:	f107 0c08 	add.w	ip, r7, #8
 800291a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 800291e:	f04f 33ff 	mov.w	r3, #4294967295
 8002922:	2211      	movs	r2, #17
 8002924:	490f      	ldr	r1, [pc, #60]	; (8002964 <MRT_SetupRTOS+0x54>)
 8002926:	4810      	ldr	r0, [pc, #64]	; (8002968 <MRT_SetupRTOS+0x58>)
 8002928:	f003 fd8d 	bl	8006446 <HAL_UART_Transmit>
	rtos.huart = uart;
 800292c:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <MRT_SetupRTOS+0x58>)
 800292e:	4618      	mov	r0, r3
 8002930:	f107 0308 	add.w	r3, r7, #8
 8002934:	2244      	movs	r2, #68	; 0x44
 8002936:	4619      	mov	r1, r3
 8002938:	f006 ff70 	bl	800981c <memcpy>
	rtos.sleepTime = sleepT;
 800293c:	4a0a      	ldr	r2, [pc, #40]	; (8002968 <MRT_SetupRTOS+0x58>)
 800293e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002942:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	MRT_WUProcedure();
 8002946:	f000 f811 	bl	800296c <MRT_WUProcedure>
	if (defAlarm==1) MRT_DefaultRTC();
 800294a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <MRT_SetupRTOS+0x46>
 8002952:	f000 f8b5 	bl	8002ac0 <MRT_DefaultRTC>
}
 8002956:	bf00      	nop
 8002958:	46bd      	mov	sp, r7
 800295a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800295e:	b004      	add	sp, #16
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	0800c5dc 	.word	0x0800c5dc
 8002968:	200053a8 	.word	0x200053a8

0800296c <MRT_WUProcedure>:



void MRT_WUProcedure(void){
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8002972:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <MRT_WUProcedure+0x54>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b02      	cmp	r3, #2
 800297c:	d119      	bne.n	80029b2 <MRT_WUProcedure+0x46>
	{
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 800297e:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <MRT_WUProcedure+0x54>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a0f      	ldr	r2, [pc, #60]	; (80029c0 <MRT_WUProcedure+0x54>)
 8002984:	f043 0308 	orr.w	r3, r3, #8
 8002988:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 800298a:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <MRT_WUProcedure+0x58>)
 800298c:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fd fc3e 	bl	8000210 <strlen>
 8002994:	4603      	mov	r3, r0
 8002996:	b29a      	uxth	r2, r3
 8002998:	f04f 33ff 	mov.w	r3, #4294967295
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	480a      	ldr	r0, [pc, #40]	; (80029c8 <MRT_WUProcedure+0x5c>)
 80029a0:	f003 fd51 	bl	8006446 <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 80029a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80029a8:	f001 fd30 	bl	800440c <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80029ac:	4807      	ldr	r0, [pc, #28]	; (80029cc <MRT_WUProcedure+0x60>)
 80029ae:	f003 f9ed 	bl	8005d8c <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 80029b2:	f000 f80d 	bl	80029d0 <MRT_ClearFlags>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40007000 	.word	0x40007000
 80029c4:	0800c5f0 	.word	0x0800c5f0
 80029c8:	200053a8 	.word	0x200053a8
 80029cc:	20005334 	.word	0x20005334

080029d0 <MRT_ClearFlags>:

void MRT_ClearFlags(void){
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 80029d4:	f04f 33ff 	mov.w	r3, #4294967295
 80029d8:	2214      	movs	r2, #20
 80029da:	4932      	ldr	r1, [pc, #200]	; (8002aa4 <MRT_ClearFlags+0xd4>)
 80029dc:	4832      	ldr	r0, [pc, #200]	; (8002aa8 <MRT_ClearFlags+0xd8>)
 80029de:	f003 fd32 	bl	8006446 <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 80029e2:	4b32      	ldr	r3, [pc, #200]	; (8002aac <MRT_ClearFlags+0xdc>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	22ca      	movs	r2, #202	; 0xca
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24
 80029ea:	4b30      	ldr	r3, [pc, #192]	; (8002aac <MRT_ClearFlags+0xdc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2253      	movs	r2, #83	; 0x53
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 80029f2:	e00f      	b.n	8002a14 <MRT_ClearFlags+0x44>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 80029f4:	f04f 33ff 	mov.w	r3, #4294967295
 80029f8:	2217      	movs	r2, #23
 80029fa:	492d      	ldr	r1, [pc, #180]	; (8002ab0 <MRT_ClearFlags+0xe0>)
 80029fc:	482a      	ldr	r0, [pc, #168]	; (8002aa8 <MRT_ClearFlags+0xd8>)
 80029fe:	f003 fd22 	bl	8006446 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002a02:	4b2a      	ldr	r3, [pc, #168]	; (8002aac <MRT_ClearFlags+0xdc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	4b28      	ldr	r3, [pc, #160]	; (8002aac <MRT_ClearFlags+0xdc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002a12:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8002a14:	4b25      	ldr	r3, [pc, #148]	; (8002aac <MRT_ClearFlags+0xdc>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1e8      	bne.n	80029f4 <MRT_ClearFlags+0x24>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002a22:	4b22      	ldr	r3, [pc, #136]	; (8002aac <MRT_ClearFlags+0xdc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	22ff      	movs	r2, #255	; 0xff
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002a2a:	4b22      	ldr	r3, [pc, #136]	; (8002ab4 <MRT_ClearFlags+0xe4>)
 8002a2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a30:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8002a32:	4b1e      	ldr	r3, [pc, #120]	; (8002aac <MRT_ClearFlags+0xdc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	22ca      	movs	r2, #202	; 0xca
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <MRT_ClearFlags+0xdc>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2253      	movs	r2, #83	; 0x53
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002a42:	e00f      	b.n	8002a64 <MRT_ClearFlags+0x94>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 8002a44:	f04f 33ff 	mov.w	r3, #4294967295
 8002a48:	2217      	movs	r2, #23
 8002a4a:	491b      	ldr	r1, [pc, #108]	; (8002ab8 <MRT_ClearFlags+0xe8>)
 8002a4c:	4816      	ldr	r0, [pc, #88]	; (8002aa8 <MRT_ClearFlags+0xd8>)
 8002a4e:	f003 fcfa 	bl	8006446 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8002a52:	4b16      	ldr	r3, [pc, #88]	; (8002aac <MRT_ClearFlags+0xdc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <MRT_ClearFlags+0xdc>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002a62:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <MRT_ClearFlags+0xdc>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1e8      	bne.n	8002a44 <MRT_ClearFlags+0x74>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <MRT_ClearFlags+0xdc>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	22ff      	movs	r2, #255	; 0xff
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002a7a:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <MRT_ClearFlags+0xe4>)
 8002a7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a80:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002a82:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <MRT_ClearFlags+0xec>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a0d      	ldr	r2, [pc, #52]	; (8002abc <MRT_ClearFlags+0xec>)
 8002a88:	f043 0304 	orr.w	r3, r3, #4
 8002a8c:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8002a8e:	4b07      	ldr	r3, [pc, #28]	; (8002aac <MRT_ClearFlags+0xdc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4b05      	ldr	r3, [pc, #20]	; (8002aac <MRT_ClearFlags+0xdc>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002a9e:	60da      	str	r2, [r3, #12]
}
 8002aa0:	bf00      	nop
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	0800c610 	.word	0x0800c610
 8002aa8:	200053a8 	.word	0x200053a8
 8002aac:	20005334 	.word	0x20005334
 8002ab0:	0800c628 	.word	0x0800c628
 8002ab4:	40013c00 	.word	0x40013c00
 8002ab8:	0800c640 	.word	0x0800c640
 8002abc:	40007000 	.word	0x40007000

08002ac0 <MRT_DefaultRTC>:

	HAL_PWR_EnterSTANDBYMode();
}


void MRT_DefaultRTC(void){
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0

	/*Can be setup using the ioc files*/

	  HAL_UART_Transmit(&(rtos.huart),"Initializing default RTC\r\n", 26, HAL_MAX_DELAY);
 8002ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac8:	221a      	movs	r2, #26
 8002aca:	4931      	ldr	r1, [pc, #196]	; (8002b90 <MRT_DefaultRTC+0xd0>)
 8002acc:	4831      	ldr	r0, [pc, #196]	; (8002b94 <MRT_DefaultRTC+0xd4>)
 8002ace:	f003 fcba 	bl	8006446 <HAL_UART_Transmit>
	  /** Initialize RTC and set the Time and Date
	  */
	  sTime.Hours = 0x0;
 8002ad2:	4b31      	ldr	r3, [pc, #196]	; (8002b98 <MRT_DefaultRTC+0xd8>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
	  sTime.Minutes = 0x0;
 8002ad8:	4b2f      	ldr	r3, [pc, #188]	; (8002b98 <MRT_DefaultRTC+0xd8>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	705a      	strb	r2, [r3, #1]
	  sTime.Seconds = 0x15;
 8002ade:	4b2e      	ldr	r3, [pc, #184]	; (8002b98 <MRT_DefaultRTC+0xd8>)
 8002ae0:	2215      	movs	r2, #21
 8002ae2:	709a      	strb	r2, [r3, #2]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002ae4:	4b2c      	ldr	r3, [pc, #176]	; (8002b98 <MRT_DefaultRTC+0xd8>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	60da      	str	r2, [r3, #12]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002aea:	4b2b      	ldr	r3, [pc, #172]	; (8002b98 <MRT_DefaultRTC+0xd8>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	611a      	str	r2, [r3, #16]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002af0:	2201      	movs	r2, #1
 8002af2:	4929      	ldr	r1, [pc, #164]	; (8002b98 <MRT_DefaultRTC+0xd8>)
 8002af4:	4829      	ldr	r0, [pc, #164]	; (8002b9c <MRT_DefaultRTC+0xdc>)
 8002af6:	f002 fdf4 	bl	80056e2 <HAL_RTC_SetTime>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MRT_DefaultRTC+0x44>
	  {
	    Error_Handler();
 8002b00:	f7fe fcc2 	bl	8001488 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002b04:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <MRT_DefaultRTC+0xe0>)
 8002b06:	2201      	movs	r2, #1
 8002b08:	701a      	strb	r2, [r3, #0]
	  sDate.Month = RTC_MONTH_JANUARY;
 8002b0a:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <MRT_DefaultRTC+0xe0>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	705a      	strb	r2, [r3, #1]
	  sDate.Date = 0x1;
 8002b10:	4b23      	ldr	r3, [pc, #140]	; (8002ba0 <MRT_DefaultRTC+0xe0>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	709a      	strb	r2, [r3, #2]
	  sDate.Year = 0x0;
 8002b16:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <MRT_DefaultRTC+0xe0>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	70da      	strb	r2, [r3, #3]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4920      	ldr	r1, [pc, #128]	; (8002ba0 <MRT_DefaultRTC+0xe0>)
 8002b20:	481e      	ldr	r0, [pc, #120]	; (8002b9c <MRT_DefaultRTC+0xdc>)
 8002b22:	f002 fe9b 	bl	800585c <HAL_RTC_SetDate>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MRT_DefaultRTC+0x70>
	  {
	    Error_Handler();
 8002b2c:	f7fe fcac 	bl	8001488 <Error_Handler>
	  }


	  /** Enable the Alarm A
	  */
	  sAlarm.AlarmTime.Hours = 0x0;
 8002b30:	4b1c      	ldr	r3, [pc, #112]	; (8002ba4 <MRT_DefaultRTC+0xe4>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
	  sAlarm.AlarmTime.Minutes = 0x0;
 8002b36:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <MRT_DefaultRTC+0xe4>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	705a      	strb	r2, [r3, #1]
	  sAlarm.AlarmTime.Seconds = 0x20;
 8002b3c:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <MRT_DefaultRTC+0xe4>)
 8002b3e:	2220      	movs	r2, #32
 8002b40:	709a      	strb	r2, [r3, #2]
	  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002b42:	4b18      	ldr	r3, [pc, #96]	; (8002ba4 <MRT_DefaultRTC+0xe4>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	605a      	str	r2, [r3, #4]
	  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002b48:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <MRT_DefaultRTC+0xe4>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60da      	str	r2, [r3, #12]
	  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <MRT_DefaultRTC+0xe4>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
	  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002b54:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <MRT_DefaultRTC+0xe4>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	615a      	str	r2, [r3, #20]
	  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8002b5a:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <MRT_DefaultRTC+0xe4>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
	  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002b60:	4b10      	ldr	r3, [pc, #64]	; (8002ba4 <MRT_DefaultRTC+0xe4>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	61da      	str	r2, [r3, #28]
	  sAlarm.AlarmDateWeekDay = 0x1;
 8002b66:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <MRT_DefaultRTC+0xe4>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2020 	strb.w	r2, [r3, #32]
	  sAlarm.Alarm = RTC_ALARM_A;
 8002b6e:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <MRT_DefaultRTC+0xe4>)
 8002b70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b74:	625a      	str	r2, [r3, #36]	; 0x24
	  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002b76:	2201      	movs	r2, #1
 8002b78:	490a      	ldr	r1, [pc, #40]	; (8002ba4 <MRT_DefaultRTC+0xe4>)
 8002b7a:	4808      	ldr	r0, [pc, #32]	; (8002b9c <MRT_DefaultRTC+0xdc>)
 8002b7c:	f002 ff16 	bl	80059ac <HAL_RTC_SetAlarm_IT>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MRT_DefaultRTC+0xca>
	  {
	    Error_Handler();
 8002b86:	f7fe fc7f 	bl	8001488 <Error_Handler>
	  }
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	0800c69c 	.word	0x0800c69c
 8002b94:	200053a8 	.word	0x200053a8
 8002b98:	2000084c 	.word	0x2000084c
 8002b9c:	20005334 	.word	0x20005334
 8002ba0:	20000860 	.word	0x20000860
 8002ba4:	20000864 	.word	0x20000864

08002ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bac:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <HAL_Init+0x40>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a0d      	ldr	r2, [pc, #52]	; (8002be8 <HAL_Init+0x40>)
 8002bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <HAL_Init+0x40>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a0a      	ldr	r2, [pc, #40]	; (8002be8 <HAL_Init+0x40>)
 8002bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <HAL_Init+0x40>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a07      	ldr	r2, [pc, #28]	; (8002be8 <HAL_Init+0x40>)
 8002bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bd0:	2003      	movs	r0, #3
 8002bd2:	f000 f920 	bl	8002e16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bd6:	200f      	movs	r0, #15
 8002bd8:	f7fe fd4a 	bl	8001670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bdc:	f7fe fc5a 	bl	8001494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40023c00 	.word	0x40023c00

08002bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bf0:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_IncTick+0x20>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_IncTick+0x24>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	4a04      	ldr	r2, [pc, #16]	; (8002c10 <HAL_IncTick+0x24>)
 8002bfe:	6013      	str	r3, [r2, #0]
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20000008 	.word	0x20000008
 8002c10:	200053f0 	.word	0x200053f0

08002c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return uwTick;
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <HAL_GetTick+0x14>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	200053f0 	.word	0x200053f0

08002c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c34:	f7ff ffee 	bl	8002c14 <HAL_GetTick>
 8002c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c44:	d005      	beq.n	8002c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c46:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <HAL_Delay+0x44>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4413      	add	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c52:	bf00      	nop
 8002c54:	f7ff ffde 	bl	8002c14 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d8f7      	bhi.n	8002c54 <HAL_Delay+0x28>
  {
  }
}
 8002c64:	bf00      	nop
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000008 	.word	0x20000008

08002c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c90:	4013      	ands	r3, r2
 8002c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ca6:	4a04      	ldr	r2, [pc, #16]	; (8002cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	60d3      	str	r3, [r2, #12]
}
 8002cac:	bf00      	nop
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc0:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	0a1b      	lsrs	r3, r3, #8
 8002cc6:	f003 0307 	and.w	r3, r3, #7
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	e000ed00 	.word	0xe000ed00

08002cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	db0b      	blt.n	8002d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	f003 021f 	and.w	r2, r3, #31
 8002cf0:	4907      	ldr	r1, [pc, #28]	; (8002d10 <__NVIC_EnableIRQ+0x38>)
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	095b      	lsrs	r3, r3, #5
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d02:	bf00      	nop
 8002d04:	370c      	adds	r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	e000e100 	.word	0xe000e100

08002d14 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	db12      	blt.n	8002d4c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	f003 021f 	and.w	r2, r3, #31
 8002d2c:	490a      	ldr	r1, [pc, #40]	; (8002d58 <__NVIC_DisableIRQ+0x44>)
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	2001      	movs	r0, #1
 8002d36:	fa00 f202 	lsl.w	r2, r0, r2
 8002d3a:	3320      	adds	r3, #32
 8002d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d40:	f3bf 8f4f 	dsb	sy
}
 8002d44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d46:	f3bf 8f6f 	isb	sy
}
 8002d4a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000e100 	.word	0xe000e100

08002d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	6039      	str	r1, [r7, #0]
 8002d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	db0a      	blt.n	8002d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	490c      	ldr	r1, [pc, #48]	; (8002da8 <__NVIC_SetPriority+0x4c>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d84:	e00a      	b.n	8002d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4908      	ldr	r1, [pc, #32]	; (8002dac <__NVIC_SetPriority+0x50>)
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	3b04      	subs	r3, #4
 8002d94:	0112      	lsls	r2, r2, #4
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	440b      	add	r3, r1
 8002d9a:	761a      	strb	r2, [r3, #24]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000e100 	.word	0xe000e100
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b089      	sub	sp, #36	; 0x24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f1c3 0307 	rsb	r3, r3, #7
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	bf28      	it	cs
 8002dce:	2304      	movcs	r3, #4
 8002dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d902      	bls.n	8002de0 <NVIC_EncodePriority+0x30>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3b03      	subs	r3, #3
 8002dde:	e000      	b.n	8002de2 <NVIC_EncodePriority+0x32>
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	401a      	ands	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	43d9      	mvns	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	4313      	orrs	r3, r2
         );
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3724      	adds	r7, #36	; 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ff28 	bl	8002c74 <__NVIC_SetPriorityGrouping>
}
 8002e24:	bf00      	nop
 8002e26:	3708      	adds	r7, #8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e3e:	f7ff ff3d 	bl	8002cbc <__NVIC_GetPriorityGrouping>
 8002e42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	68b9      	ldr	r1, [r7, #8]
 8002e48:	6978      	ldr	r0, [r7, #20]
 8002e4a:	f7ff ffb1 	bl	8002db0 <NVIC_EncodePriority>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff80 	bl	8002d5c <__NVIC_SetPriority>
}
 8002e5c:	bf00      	nop
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff ff30 	bl	8002cd8 <__NVIC_EnableIRQ>
}
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff ff40 	bl	8002d14 <__NVIC_DisableIRQ>
}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b089      	sub	sp, #36	; 0x24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	e165      	b.n	8003184 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002eb8:	2201      	movs	r2, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	f040 8154 	bne.w	800317e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d005      	beq.n	8002eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d130      	bne.n	8002f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	2203      	movs	r2, #3
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f24:	2201      	movs	r2, #1
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	4013      	ands	r3, r2
 8002f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 0201 	and.w	r2, r3, #1
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d017      	beq.n	8002f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2203      	movs	r2, #3
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	005b      	lsls	r3, r3, #1
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d123      	bne.n	8002fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	08da      	lsrs	r2, r3, #3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3208      	adds	r2, #8
 8002fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	220f      	movs	r2, #15
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	691a      	ldr	r2, [r3, #16]
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	08da      	lsrs	r2, r3, #3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3208      	adds	r2, #8
 8002fda:	69b9      	ldr	r1, [r7, #24]
 8002fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	2203      	movs	r2, #3
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 0203 	and.w	r2, r3, #3
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800301c:	2b00      	cmp	r3, #0
 800301e:	f000 80ae 	beq.w	800317e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	4b5d      	ldr	r3, [pc, #372]	; (800319c <HAL_GPIO_Init+0x300>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	4a5c      	ldr	r2, [pc, #368]	; (800319c <HAL_GPIO_Init+0x300>)
 800302c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003030:	6453      	str	r3, [r2, #68]	; 0x44
 8003032:	4b5a      	ldr	r3, [pc, #360]	; (800319c <HAL_GPIO_Init+0x300>)
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800303e:	4a58      	ldr	r2, [pc, #352]	; (80031a0 <HAL_GPIO_Init+0x304>)
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	089b      	lsrs	r3, r3, #2
 8003044:	3302      	adds	r3, #2
 8003046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	220f      	movs	r2, #15
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	4013      	ands	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a4f      	ldr	r2, [pc, #316]	; (80031a4 <HAL_GPIO_Init+0x308>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d025      	beq.n	80030b6 <HAL_GPIO_Init+0x21a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a4e      	ldr	r2, [pc, #312]	; (80031a8 <HAL_GPIO_Init+0x30c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d01f      	beq.n	80030b2 <HAL_GPIO_Init+0x216>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a4d      	ldr	r2, [pc, #308]	; (80031ac <HAL_GPIO_Init+0x310>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d019      	beq.n	80030ae <HAL_GPIO_Init+0x212>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a4c      	ldr	r2, [pc, #304]	; (80031b0 <HAL_GPIO_Init+0x314>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <HAL_GPIO_Init+0x20e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a4b      	ldr	r2, [pc, #300]	; (80031b4 <HAL_GPIO_Init+0x318>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00d      	beq.n	80030a6 <HAL_GPIO_Init+0x20a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a4a      	ldr	r2, [pc, #296]	; (80031b8 <HAL_GPIO_Init+0x31c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d007      	beq.n	80030a2 <HAL_GPIO_Init+0x206>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a49      	ldr	r2, [pc, #292]	; (80031bc <HAL_GPIO_Init+0x320>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d101      	bne.n	800309e <HAL_GPIO_Init+0x202>
 800309a:	2306      	movs	r3, #6
 800309c:	e00c      	b.n	80030b8 <HAL_GPIO_Init+0x21c>
 800309e:	2307      	movs	r3, #7
 80030a0:	e00a      	b.n	80030b8 <HAL_GPIO_Init+0x21c>
 80030a2:	2305      	movs	r3, #5
 80030a4:	e008      	b.n	80030b8 <HAL_GPIO_Init+0x21c>
 80030a6:	2304      	movs	r3, #4
 80030a8:	e006      	b.n	80030b8 <HAL_GPIO_Init+0x21c>
 80030aa:	2303      	movs	r3, #3
 80030ac:	e004      	b.n	80030b8 <HAL_GPIO_Init+0x21c>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e002      	b.n	80030b8 <HAL_GPIO_Init+0x21c>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e000      	b.n	80030b8 <HAL_GPIO_Init+0x21c>
 80030b6:	2300      	movs	r3, #0
 80030b8:	69fa      	ldr	r2, [r7, #28]
 80030ba:	f002 0203 	and.w	r2, r2, #3
 80030be:	0092      	lsls	r2, r2, #2
 80030c0:	4093      	lsls	r3, r2
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030c8:	4935      	ldr	r1, [pc, #212]	; (80031a0 <HAL_GPIO_Init+0x304>)
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	089b      	lsrs	r3, r3, #2
 80030ce:	3302      	adds	r3, #2
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030d6:	4b3a      	ldr	r3, [pc, #232]	; (80031c0 <HAL_GPIO_Init+0x324>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	43db      	mvns	r3, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4013      	ands	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030fa:	4a31      	ldr	r2, [pc, #196]	; (80031c0 <HAL_GPIO_Init+0x324>)
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003100:	4b2f      	ldr	r3, [pc, #188]	; (80031c0 <HAL_GPIO_Init+0x324>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	43db      	mvns	r3, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003124:	4a26      	ldr	r2, [pc, #152]	; (80031c0 <HAL_GPIO_Init+0x324>)
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800312a:	4b25      	ldr	r3, [pc, #148]	; (80031c0 <HAL_GPIO_Init+0x324>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	43db      	mvns	r3, r3
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	4013      	ands	r3, r2
 8003138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800314e:	4a1c      	ldr	r2, [pc, #112]	; (80031c0 <HAL_GPIO_Init+0x324>)
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003154:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <HAL_GPIO_Init+0x324>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003178:	4a11      	ldr	r2, [pc, #68]	; (80031c0 <HAL_GPIO_Init+0x324>)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3301      	adds	r3, #1
 8003182:	61fb      	str	r3, [r7, #28]
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	2b0f      	cmp	r3, #15
 8003188:	f67f ae96 	bls.w	8002eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800318c:	bf00      	nop
 800318e:	bf00      	nop
 8003190:	3724      	adds	r7, #36	; 0x24
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800
 80031a0:	40013800 	.word	0x40013800
 80031a4:	40020000 	.word	0x40020000
 80031a8:	40020400 	.word	0x40020400
 80031ac:	40020800 	.word	0x40020800
 80031b0:	40020c00 	.word	0x40020c00
 80031b4:	40021000 	.word	0x40021000
 80031b8:	40021400 	.word	0x40021400
 80031bc:	40021800 	.word	0x40021800
 80031c0:	40013c00 	.word	0x40013c00

080031c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e12b      	b.n	800342e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d106      	bne.n	80031f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7fe f97e 	bl	80014ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2224      	movs	r2, #36	; 0x24
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0201 	bic.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003216:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003226:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003228:	f001 f9f6 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 800322c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	4a81      	ldr	r2, [pc, #516]	; (8003438 <HAL_I2C_Init+0x274>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d807      	bhi.n	8003248 <HAL_I2C_Init+0x84>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a80      	ldr	r2, [pc, #512]	; (800343c <HAL_I2C_Init+0x278>)
 800323c:	4293      	cmp	r3, r2
 800323e:	bf94      	ite	ls
 8003240:	2301      	movls	r3, #1
 8003242:	2300      	movhi	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	e006      	b.n	8003256 <HAL_I2C_Init+0x92>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4a7d      	ldr	r2, [pc, #500]	; (8003440 <HAL_I2C_Init+0x27c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	bf94      	ite	ls
 8003250:	2301      	movls	r3, #1
 8003252:	2300      	movhi	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e0e7      	b.n	800342e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4a78      	ldr	r2, [pc, #480]	; (8003444 <HAL_I2C_Init+0x280>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	0c9b      	lsrs	r3, r3, #18
 8003268:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	430a      	orrs	r2, r1
 800327c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4a6a      	ldr	r2, [pc, #424]	; (8003438 <HAL_I2C_Init+0x274>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d802      	bhi.n	8003298 <HAL_I2C_Init+0xd4>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	3301      	adds	r3, #1
 8003296:	e009      	b.n	80032ac <HAL_I2C_Init+0xe8>
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	4a69      	ldr	r2, [pc, #420]	; (8003448 <HAL_I2C_Init+0x284>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	099b      	lsrs	r3, r3, #6
 80032aa:	3301      	adds	r3, #1
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	430b      	orrs	r3, r1
 80032b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	495c      	ldr	r1, [pc, #368]	; (8003438 <HAL_I2C_Init+0x274>)
 80032c8:	428b      	cmp	r3, r1
 80032ca:	d819      	bhi.n	8003300 <HAL_I2C_Init+0x13c>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1e59      	subs	r1, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80032da:	1c59      	adds	r1, r3, #1
 80032dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032e0:	400b      	ands	r3, r1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <HAL_I2C_Init+0x138>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1e59      	subs	r1, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032f4:	3301      	adds	r3, #1
 80032f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fa:	e051      	b.n	80033a0 <HAL_I2C_Init+0x1dc>
 80032fc:	2304      	movs	r3, #4
 80032fe:	e04f      	b.n	80033a0 <HAL_I2C_Init+0x1dc>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d111      	bne.n	800332c <HAL_I2C_Init+0x168>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1e58      	subs	r0, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6859      	ldr	r1, [r3, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	440b      	add	r3, r1
 8003316:	fbb0 f3f3 	udiv	r3, r0, r3
 800331a:	3301      	adds	r3, #1
 800331c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	e012      	b.n	8003352 <HAL_I2C_Init+0x18e>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	1e58      	subs	r0, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6859      	ldr	r1, [r3, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	0099      	lsls	r1, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003342:	3301      	adds	r3, #1
 8003344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003348:	2b00      	cmp	r3, #0
 800334a:	bf0c      	ite	eq
 800334c:	2301      	moveq	r3, #1
 800334e:	2300      	movne	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_I2C_Init+0x196>
 8003356:	2301      	movs	r3, #1
 8003358:	e022      	b.n	80033a0 <HAL_I2C_Init+0x1dc>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10e      	bne.n	8003380 <HAL_I2C_Init+0x1bc>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1e58      	subs	r0, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6859      	ldr	r1, [r3, #4]
 800336a:	460b      	mov	r3, r1
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	440b      	add	r3, r1
 8003370:	fbb0 f3f3 	udiv	r3, r0, r3
 8003374:	3301      	adds	r3, #1
 8003376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800337a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800337e:	e00f      	b.n	80033a0 <HAL_I2C_Init+0x1dc>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1e58      	subs	r0, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6859      	ldr	r1, [r3, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	0099      	lsls	r1, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	fbb0 f3f3 	udiv	r3, r0, r3
 8003396:	3301      	adds	r3, #1
 8003398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	6809      	ldr	r1, [r1, #0]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69da      	ldr	r2, [r3, #28]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6911      	ldr	r1, [r2, #16]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	68d2      	ldr	r2, [r2, #12]
 80033da:	4311      	orrs	r1, r2
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	430b      	orrs	r3, r1
 80033e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	000186a0 	.word	0x000186a0
 800343c:	001e847f 	.word	0x001e847f
 8003440:	003d08ff 	.word	0x003d08ff
 8003444:	431bde83 	.word	0x431bde83
 8003448:	10624dd3 	.word	0x10624dd3

0800344c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af02      	add	r7, sp, #8
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	4608      	mov	r0, r1
 8003456:	4611      	mov	r1, r2
 8003458:	461a      	mov	r2, r3
 800345a:	4603      	mov	r3, r0
 800345c:	817b      	strh	r3, [r7, #10]
 800345e:	460b      	mov	r3, r1
 8003460:	813b      	strh	r3, [r7, #8]
 8003462:	4613      	mov	r3, r2
 8003464:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003466:	f7ff fbd5 	bl	8002c14 <HAL_GetTick>
 800346a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b20      	cmp	r3, #32
 8003476:	f040 80d9 	bne.w	800362c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	2319      	movs	r3, #25
 8003480:	2201      	movs	r2, #1
 8003482:	496d      	ldr	r1, [pc, #436]	; (8003638 <HAL_I2C_Mem_Write+0x1ec>)
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 fde3 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d001      	beq.n	8003494 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003490:	2302      	movs	r3, #2
 8003492:	e0cc      	b.n	800362e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800349a:	2b01      	cmp	r3, #1
 800349c:	d101      	bne.n	80034a2 <HAL_I2C_Mem_Write+0x56>
 800349e:	2302      	movs	r3, #2
 80034a0:	e0c5      	b.n	800362e <HAL_I2C_Mem_Write+0x1e2>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d007      	beq.n	80034c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2221      	movs	r2, #33	; 0x21
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2240      	movs	r2, #64	; 0x40
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a3a      	ldr	r2, [r7, #32]
 80034f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4a4d      	ldr	r2, [pc, #308]	; (800363c <HAL_I2C_Mem_Write+0x1f0>)
 8003508:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800350a:	88f8      	ldrh	r0, [r7, #6]
 800350c:	893a      	ldrh	r2, [r7, #8]
 800350e:	8979      	ldrh	r1, [r7, #10]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	4603      	mov	r3, r0
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 fc1a 	bl	8003d54 <I2C_RequestMemoryWrite>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d052      	beq.n	80035cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e081      	b.n	800362e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 fe64 	bl	80041fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00d      	beq.n	8003556 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	2b04      	cmp	r3, #4
 8003540:	d107      	bne.n	8003552 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003550:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e06b      	b.n	800362e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	781a      	ldrb	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b04      	cmp	r3, #4
 8003592:	d11b      	bne.n	80035cc <HAL_I2C_Mem_Write+0x180>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003598:	2b00      	cmp	r3, #0
 800359a:	d017      	beq.n	80035cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	781a      	ldrb	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1aa      	bne.n	800352a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 fe50 	bl	800427e <I2C_WaitOnBTFFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00d      	beq.n	8003600 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	2b04      	cmp	r3, #4
 80035ea:	d107      	bne.n	80035fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e016      	b.n	800362e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800360e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	e000      	b.n	800362e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800362c:	2302      	movs	r3, #2
  }
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	00100002 	.word	0x00100002
 800363c:	ffff0000 	.word	0xffff0000

08003640 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08c      	sub	sp, #48	; 0x30
 8003644:	af02      	add	r7, sp, #8
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	4608      	mov	r0, r1
 800364a:	4611      	mov	r1, r2
 800364c:	461a      	mov	r2, r3
 800364e:	4603      	mov	r3, r0
 8003650:	817b      	strh	r3, [r7, #10]
 8003652:	460b      	mov	r3, r1
 8003654:	813b      	strh	r3, [r7, #8]
 8003656:	4613      	mov	r3, r2
 8003658:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800365a:	f7ff fadb 	bl	8002c14 <HAL_GetTick>
 800365e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b20      	cmp	r3, #32
 800366a:	f040 8208 	bne.w	8003a7e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	2319      	movs	r3, #25
 8003674:	2201      	movs	r2, #1
 8003676:	497b      	ldr	r1, [pc, #492]	; (8003864 <HAL_I2C_Mem_Read+0x224>)
 8003678:	68f8      	ldr	r0, [r7, #12]
 800367a:	f000 fce9 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003684:	2302      	movs	r3, #2
 8003686:	e1fb      	b.n	8003a80 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_I2C_Mem_Read+0x56>
 8003692:	2302      	movs	r3, #2
 8003694:	e1f4      	b.n	8003a80 <HAL_I2C_Mem_Read+0x440>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0301 	and.w	r3, r3, #1
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d007      	beq.n	80036bc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2222      	movs	r2, #34	; 0x22
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2240      	movs	r2, #64	; 0x40
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80036ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4a5b      	ldr	r2, [pc, #364]	; (8003868 <HAL_I2C_Mem_Read+0x228>)
 80036fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036fe:	88f8      	ldrh	r0, [r7, #6]
 8003700:	893a      	ldrh	r2, [r7, #8]
 8003702:	8979      	ldrh	r1, [r7, #10]
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	4603      	mov	r3, r0
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 fbb6 	bl	8003e80 <I2C_RequestMemoryRead>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e1b0      	b.n	8003a80 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003722:	2b00      	cmp	r3, #0
 8003724:	d113      	bne.n	800374e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003726:	2300      	movs	r3, #0
 8003728:	623b      	str	r3, [r7, #32]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	623b      	str	r3, [r7, #32]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	623b      	str	r3, [r7, #32]
 800373a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	e184      	b.n	8003a58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003752:	2b01      	cmp	r3, #1
 8003754:	d11b      	bne.n	800378e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003764:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003766:	2300      	movs	r3, #0
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	61fb      	str	r3, [r7, #28]
 800377a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	e164      	b.n	8003a58 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003792:	2b02      	cmp	r3, #2
 8003794:	d11b      	bne.n	80037ce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b6:	2300      	movs	r3, #0
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	61bb      	str	r3, [r7, #24]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	e144      	b.n	8003a58 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	617b      	str	r3, [r7, #20]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037e4:	e138      	b.n	8003a58 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ea:	2b03      	cmp	r3, #3
 80037ec:	f200 80f1 	bhi.w	80039d2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d123      	bne.n	8003840 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 fd7f 	bl	8004300 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e139      	b.n	8003a80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	691a      	ldr	r2, [r3, #16]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003834:	b29b      	uxth	r3, r3
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800383e:	e10b      	b.n	8003a58 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003844:	2b02      	cmp	r3, #2
 8003846:	d14e      	bne.n	80038e6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384e:	2200      	movs	r2, #0
 8003850:	4906      	ldr	r1, [pc, #24]	; (800386c <HAL_I2C_Mem_Read+0x22c>)
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fbfc 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d008      	beq.n	8003870 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e10e      	b.n	8003a80 <HAL_I2C_Mem_Read+0x440>
 8003862:	bf00      	nop
 8003864:	00100002 	.word	0x00100002
 8003868:	ffff0000 	.word	0xffff0000
 800386c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800387e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691a      	ldr	r2, [r3, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003892:	1c5a      	adds	r2, r3, #1
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038e4:	e0b8      	b.n	8003a58 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ec:	2200      	movs	r2, #0
 80038ee:	4966      	ldr	r1, [pc, #408]	; (8003a88 <HAL_I2C_Mem_Read+0x448>)
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 fbad 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e0bf      	b.n	8003a80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800390e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	2200      	movs	r2, #0
 800394a:	494f      	ldr	r1, [pc, #316]	; (8003a88 <HAL_I2C_Mem_Read+0x448>)
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 fb7f 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e091      	b.n	8003a80 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	1c5a      	adds	r2, r3, #1
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003994:	b29b      	uxth	r3, r3
 8003996:	3b01      	subs	r3, #1
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039d0:	e042      	b.n	8003a58 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 fc92 	bl	8004300 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e04c      	b.n	8003a80 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a02:	3b01      	subs	r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d118      	bne.n	8003a58 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	1c5a      	adds	r2, r3, #1
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f47f aec2 	bne.w	80037e6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e000      	b.n	8003a80 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a7e:	2302      	movs	r3, #2
  }
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3728      	adds	r7, #40	; 0x28
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	00010004 	.word	0x00010004

08003a8c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08a      	sub	sp, #40	; 0x28
 8003a90:	af02      	add	r7, sp, #8
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	607a      	str	r2, [r7, #4]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003a9c:	f7ff f8ba 	bl	8002c14 <HAL_GetTick>
 8003aa0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	f040 8111 	bne.w	8003cd6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	2319      	movs	r3, #25
 8003aba:	2201      	movs	r2, #1
 8003abc:	4988      	ldr	r1, [pc, #544]	; (8003ce0 <HAL_I2C_IsDeviceReady+0x254>)
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fac6 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003aca:	2302      	movs	r3, #2
 8003acc:	e104      	b.n	8003cd8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d101      	bne.n	8003adc <HAL_I2C_IsDeviceReady+0x50>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	e0fd      	b.n	8003cd8 <HAL_I2C_IsDeviceReady+0x24c>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d007      	beq.n	8003b02 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f042 0201 	orr.w	r2, r2, #1
 8003b00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2224      	movs	r2, #36	; 0x24
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4a70      	ldr	r2, [pc, #448]	; (8003ce4 <HAL_I2C_IsDeviceReady+0x258>)
 8003b24:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b34:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 fa84 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00d      	beq.n	8003b6a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b5c:	d103      	bne.n	8003b66 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e0b6      	b.n	8003cd8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b6a:	897b      	ldrh	r3, [r7, #10]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b78:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003b7a:	f7ff f84b 	bl	8002c14 <HAL_GetTick>
 8003b7e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2301      	moveq	r3, #1
 8003b90:	2300      	movne	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba4:	bf0c      	ite	eq
 8003ba6:	2301      	moveq	r3, #1
 8003ba8:	2300      	movne	r3, #0
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bae:	e025      	b.n	8003bfc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bb0:	f7ff f830 	bl	8002c14 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d302      	bcc.n	8003bc6 <HAL_I2C_IsDeviceReady+0x13a>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d103      	bne.n	8003bce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	22a0      	movs	r2, #160	; 0xa0
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf2:	bf0c      	ite	eq
 8003bf4:	2301      	moveq	r3, #1
 8003bf6:	2300      	movne	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2ba0      	cmp	r3, #160	; 0xa0
 8003c06:	d005      	beq.n	8003c14 <HAL_I2C_IsDeviceReady+0x188>
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d102      	bne.n	8003c14 <HAL_I2C_IsDeviceReady+0x188>
 8003c0e:	7dbb      	ldrb	r3, [r7, #22]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0cd      	beq.n	8003bb0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d129      	bne.n	8003c7e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c38:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	2319      	movs	r3, #25
 8003c56:	2201      	movs	r2, #1
 8003c58:	4921      	ldr	r1, [pc, #132]	; (8003ce0 <HAL_I2C_IsDeviceReady+0x254>)
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f9f8 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e036      	b.n	8003cd8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e02c      	b.n	8003cd8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c8c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c96:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	2319      	movs	r3, #25
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	490f      	ldr	r1, [pc, #60]	; (8003ce0 <HAL_I2C_IsDeviceReady+0x254>)
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 f9d4 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e012      	b.n	8003cd8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	f4ff af32 	bcc.w	8003b26 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003cd6:	2302      	movs	r3, #2
  }
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3720      	adds	r7, #32
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	00100002 	.word	0x00100002
 8003ce4:	ffff0000 	.word	0xffff0000

08003ce8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b20      	cmp	r3, #32
 8003cfa:	d124      	bne.n	8003d46 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2228      	movs	r2, #40	; 0x28
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d007      	beq.n	8003d22 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d30:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003d40:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e000      	b.n	8003d48 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003d46:	2302      	movs	r3, #2
  }
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	4608      	mov	r0, r1
 8003d5e:	4611      	mov	r1, r2
 8003d60:	461a      	mov	r2, r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	817b      	strh	r3, [r7, #10]
 8003d66:	460b      	mov	r3, r1
 8003d68:	813b      	strh	r3, [r7, #8]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f960 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00d      	beq.n	8003db2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003da4:	d103      	bne.n	8003dae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e05f      	b.n	8003e72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003db2:	897b      	ldrh	r3, [r7, #10]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	461a      	mov	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	6a3a      	ldr	r2, [r7, #32]
 8003dc6:	492d      	ldr	r1, [pc, #180]	; (8003e7c <I2C_RequestMemoryWrite+0x128>)
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f998 	bl	80040fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e04c      	b.n	8003e72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd8:	2300      	movs	r3, #0
 8003dda:	617b      	str	r3, [r7, #20]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	617b      	str	r3, [r7, #20]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df0:	6a39      	ldr	r1, [r7, #32]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 fa02 	bl	80041fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00d      	beq.n	8003e1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d107      	bne.n	8003e16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e02b      	b.n	8003e72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e1a:	88fb      	ldrh	r3, [r7, #6]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d105      	bne.n	8003e2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e20:	893b      	ldrh	r3, [r7, #8]
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	611a      	str	r2, [r3, #16]
 8003e2a:	e021      	b.n	8003e70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e2c:	893b      	ldrh	r3, [r7, #8]
 8003e2e:	0a1b      	lsrs	r3, r3, #8
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e3c:	6a39      	ldr	r1, [r7, #32]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f9dc 	bl	80041fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00d      	beq.n	8003e66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d107      	bne.n	8003e62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e005      	b.n	8003e72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e66:	893b      	ldrh	r3, [r7, #8]
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	00010002 	.word	0x00010002

08003e80 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	4608      	mov	r0, r1
 8003e8a:	4611      	mov	r1, r2
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4603      	mov	r3, r0
 8003e90:	817b      	strh	r3, [r7, #10]
 8003e92:	460b      	mov	r3, r1
 8003e94:	813b      	strh	r3, [r7, #8]
 8003e96:	4613      	mov	r3, r2
 8003e98:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ea8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f8c2 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00d      	beq.n	8003eee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee0:	d103      	bne.n	8003eea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ee8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e0aa      	b.n	8004044 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eee:	897b      	ldrh	r3, [r7, #10]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003efc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	6a3a      	ldr	r2, [r7, #32]
 8003f02:	4952      	ldr	r1, [pc, #328]	; (800404c <I2C_RequestMemoryRead+0x1cc>)
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f8fa 	bl	80040fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e097      	b.n	8004044 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f14:	2300      	movs	r3, #0
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2c:	6a39      	ldr	r1, [r7, #32]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f964 	bl	80041fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00d      	beq.n	8003f56 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d107      	bne.n	8003f52 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e076      	b.n	8004044 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f56:	88fb      	ldrh	r3, [r7, #6]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d105      	bne.n	8003f68 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f5c:	893b      	ldrh	r3, [r7, #8]
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	611a      	str	r2, [r3, #16]
 8003f66:	e021      	b.n	8003fac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f68:	893b      	ldrh	r3, [r7, #8]
 8003f6a:	0a1b      	lsrs	r3, r3, #8
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f78:	6a39      	ldr	r1, [r7, #32]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 f93e 	bl	80041fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00d      	beq.n	8003fa2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d107      	bne.n	8003f9e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e050      	b.n	8004044 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fa2:	893b      	ldrh	r3, [r7, #8]
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fae:	6a39      	ldr	r1, [r7, #32]
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f923 	bl	80041fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00d      	beq.n	8003fd8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d107      	bne.n	8003fd4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e035      	b.n	8004044 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fe6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f82b 	bl	8004050 <I2C_WaitOnFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00d      	beq.n	800401c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800400a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800400e:	d103      	bne.n	8004018 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004016:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e013      	b.n	8004044 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800401c:	897b      	ldrh	r3, [r7, #10]
 800401e:	b2db      	uxtb	r3, r3
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	b2da      	uxtb	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	6a3a      	ldr	r2, [r7, #32]
 8004030:	4906      	ldr	r1, [pc, #24]	; (800404c <I2C_RequestMemoryRead+0x1cc>)
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 f863 	bl	80040fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	00010002 	.word	0x00010002

08004050 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004060:	e025      	b.n	80040ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004068:	d021      	beq.n	80040ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800406a:	f7fe fdd3 	bl	8002c14 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d302      	bcc.n	8004080 <I2C_WaitOnFlagUntilTimeout+0x30>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d116      	bne.n	80040ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	f043 0220 	orr.w	r2, r3, #32
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e023      	b.n	80040f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	0c1b      	lsrs	r3, r3, #16
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d10d      	bne.n	80040d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	43da      	mvns	r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	4013      	ands	r3, r2
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	bf0c      	ite	eq
 80040ca:	2301      	moveq	r3, #1
 80040cc:	2300      	movne	r3, #0
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	461a      	mov	r2, r3
 80040d2:	e00c      	b.n	80040ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	43da      	mvns	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	4013      	ands	r3, r2
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	bf0c      	ite	eq
 80040e6:	2301      	moveq	r3, #1
 80040e8:	2300      	movne	r3, #0
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	461a      	mov	r2, r3
 80040ee:	79fb      	ldrb	r3, [r7, #7]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d0b6      	beq.n	8004062 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	60f8      	str	r0, [r7, #12]
 8004106:	60b9      	str	r1, [r7, #8]
 8004108:	607a      	str	r2, [r7, #4]
 800410a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800410c:	e051      	b.n	80041b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411c:	d123      	bne.n	8004166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004136:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f043 0204 	orr.w	r2, r3, #4
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e046      	b.n	80041f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416c:	d021      	beq.n	80041b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416e:	f7fe fd51 	bl	8002c14 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	429a      	cmp	r2, r3
 800417c:	d302      	bcc.n	8004184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d116      	bne.n	80041b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	f043 0220 	orr.w	r2, r3, #32
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e020      	b.n	80041f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	0c1b      	lsrs	r3, r3, #16
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d10c      	bne.n	80041d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	43da      	mvns	r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	4013      	ands	r3, r2
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	bf14      	ite	ne
 80041ce:	2301      	movne	r3, #1
 80041d0:	2300      	moveq	r3, #0
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	e00b      	b.n	80041ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	43da      	mvns	r2, r3
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	4013      	ands	r3, r2
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	bf14      	ite	ne
 80041e8:	2301      	movne	r3, #1
 80041ea:	2300      	moveq	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d18d      	bne.n	800410e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004208:	e02d      	b.n	8004266 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 f8ce 	bl	80043ac <I2C_IsAcknowledgeFailed>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e02d      	b.n	8004276 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004220:	d021      	beq.n	8004266 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004222:	f7fe fcf7 	bl	8002c14 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	429a      	cmp	r2, r3
 8004230:	d302      	bcc.n	8004238 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d116      	bne.n	8004266 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f043 0220 	orr.w	r2, r3, #32
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e007      	b.n	8004276 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004270:	2b80      	cmp	r3, #128	; 0x80
 8004272:	d1ca      	bne.n	800420a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b084      	sub	sp, #16
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800428a:	e02d      	b.n	80042e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f88d 	bl	80043ac <I2C_IsAcknowledgeFailed>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e02d      	b.n	80042f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a2:	d021      	beq.n	80042e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a4:	f7fe fcb6 	bl	8002c14 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d302      	bcc.n	80042ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d116      	bne.n	80042e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2220      	movs	r2, #32
 80042c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	f043 0220 	orr.w	r2, r3, #32
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e007      	b.n	80042f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	f003 0304 	and.w	r3, r3, #4
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d1ca      	bne.n	800428c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800430c:	e042      	b.n	8004394 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	2b10      	cmp	r3, #16
 800431a:	d119      	bne.n	8004350 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0210 	mvn.w	r2, #16
 8004324:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e029      	b.n	80043a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004350:	f7fe fc60 	bl	8002c14 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	429a      	cmp	r2, r3
 800435e:	d302      	bcc.n	8004366 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d116      	bne.n	8004394 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	f043 0220 	orr.w	r2, r3, #32
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e007      	b.n	80043a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439e:	2b40      	cmp	r3, #64	; 0x40
 80043a0:	d1b5      	bne.n	800430e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c2:	d11b      	bne.n	80043fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	f043 0204 	orr.w	r2, r3, #4
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
	...

0800440c <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8004414:	4b06      	ldr	r3, [pc, #24]	; (8004430 <HAL_PWR_DisableWakeUpPin+0x24>)
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	43db      	mvns	r3, r3
 800441c:	4904      	ldr	r1, [pc, #16]	; (8004430 <HAL_PWR_DisableWakeUpPin+0x24>)
 800441e:	4013      	ands	r3, r2
 8004420:	604b      	str	r3, [r1, #4]
}
 8004422:	bf00      	nop
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40007000 	.word	0x40007000

08004434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e0cc      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004448:	4b68      	ldr	r3, [pc, #416]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	429a      	cmp	r2, r3
 8004454:	d90c      	bls.n	8004470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004456:	4b65      	ldr	r3, [pc, #404]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 8004458:	683a      	ldr	r2, [r7, #0]
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445e:	4b63      	ldr	r3, [pc, #396]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e0b8      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d020      	beq.n	80044be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004488:	4b59      	ldr	r3, [pc, #356]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	4a58      	ldr	r2, [pc, #352]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044a0:	4b53      	ldr	r3, [pc, #332]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4a52      	ldr	r2, [pc, #328]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ac:	4b50      	ldr	r3, [pc, #320]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	494d      	ldr	r1, [pc, #308]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d044      	beq.n	8004554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d2:	4b47      	ldr	r3, [pc, #284]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d119      	bne.n	8004512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e07f      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d003      	beq.n	80044f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d107      	bne.n	8004502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f2:	4b3f      	ldr	r3, [pc, #252]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e06f      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004502:	4b3b      	ldr	r3, [pc, #236]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e067      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004512:	4b37      	ldr	r3, [pc, #220]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f023 0203 	bic.w	r2, r3, #3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	4934      	ldr	r1, [pc, #208]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	4313      	orrs	r3, r2
 8004522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004524:	f7fe fb76 	bl	8002c14 <HAL_GetTick>
 8004528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452a:	e00a      	b.n	8004542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800452c:	f7fe fb72 	bl	8002c14 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f241 3288 	movw	r2, #5000	; 0x1388
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e04f      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004542:	4b2b      	ldr	r3, [pc, #172]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 020c 	and.w	r2, r3, #12
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	429a      	cmp	r2, r3
 8004552:	d1eb      	bne.n	800452c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004554:	4b25      	ldr	r3, [pc, #148]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d20c      	bcs.n	800457c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004562:	4b22      	ldr	r3, [pc, #136]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b20      	ldr	r3, [pc, #128]	; (80045ec <HAL_RCC_ClockConfig+0x1b8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e032      	b.n	80045e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004588:	4b19      	ldr	r3, [pc, #100]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4916      	ldr	r1, [pc, #88]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	4313      	orrs	r3, r2
 8004598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045a6:	4b12      	ldr	r3, [pc, #72]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	490e      	ldr	r1, [pc, #56]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ba:	f000 fbb1 	bl	8004d20 <HAL_RCC_GetSysClockFreq>
 80045be:	4602      	mov	r2, r0
 80045c0:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	091b      	lsrs	r3, r3, #4
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	490a      	ldr	r1, [pc, #40]	; (80045f4 <HAL_RCC_ClockConfig+0x1c0>)
 80045cc:	5ccb      	ldrb	r3, [r1, r3]
 80045ce:	fa22 f303 	lsr.w	r3, r2, r3
 80045d2:	4a09      	ldr	r2, [pc, #36]	; (80045f8 <HAL_RCC_ClockConfig+0x1c4>)
 80045d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045d6:	4b09      	ldr	r3, [pc, #36]	; (80045fc <HAL_RCC_ClockConfig+0x1c8>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7fd f848 	bl	8001670 <HAL_InitTick>

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3710      	adds	r7, #16
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40023c00 	.word	0x40023c00
 80045f0:	40023800 	.word	0x40023800
 80045f4:	0800c73c 	.word	0x0800c73c
 80045f8:	20000000 	.word	0x20000000
 80045fc:	20000004 	.word	0x20000004

08004600 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004604:	4b03      	ldr	r3, [pc, #12]	; (8004614 <HAL_RCC_GetHCLKFreq+0x14>)
 8004606:	681b      	ldr	r3, [r3, #0]
}
 8004608:	4618      	mov	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000000 	.word	0x20000000

08004618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800461c:	f7ff fff0 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8004620:	4602      	mov	r2, r0
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	0a9b      	lsrs	r3, r3, #10
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	4903      	ldr	r1, [pc, #12]	; (800463c <HAL_RCC_GetPCLK1Freq+0x24>)
 800462e:	5ccb      	ldrb	r3, [r1, r3]
 8004630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004634:	4618      	mov	r0, r3
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40023800 	.word	0x40023800
 800463c:	0800c74c 	.word	0x0800c74c

08004640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004644:	f7ff ffdc 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8004648:	4602      	mov	r2, r0
 800464a:	4b05      	ldr	r3, [pc, #20]	; (8004660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	0b5b      	lsrs	r3, r3, #13
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	4903      	ldr	r1, [pc, #12]	; (8004664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004656:	5ccb      	ldrb	r3, [r1, r3]
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800465c:	4618      	mov	r0, r3
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40023800 	.word	0x40023800
 8004664:	0800c74c 	.word	0x0800c74c

08004668 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	220f      	movs	r2, #15
 8004676:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004678:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <HAL_RCC_GetClockConfig+0x5c>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 0203 	and.w	r2, r3, #3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004684:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004690:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800469c:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <HAL_RCC_GetClockConfig+0x5c>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	08db      	lsrs	r3, r3, #3
 80046a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046aa:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <HAL_RCC_GetClockConfig+0x60>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 020f 	and.w	r2, r3, #15
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	601a      	str	r2, [r3, #0]
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800
 80046c8:	40023c00 	.word	0x40023c00

080046cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08c      	sub	sp, #48	; 0x30
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80046dc:	2300      	movs	r3, #0
 80046de:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d010      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8004704:	4b6f      	ldr	r3, [pc, #444]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800470a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004712:	496c      	ldr	r1, [pc, #432]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8004722:	2301      	movs	r3, #1
 8004724:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0302 	and.w	r3, r3, #2
 800472e:	2b00      	cmp	r3, #0
 8004730:	d010      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8004732:	4b64      	ldr	r3, [pc, #400]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004738:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004740:	4960      	ldr	r1, [pc, #384]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8004750:	2301      	movs	r3, #1
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d017      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004760:	4b58      	ldr	r3, [pc, #352]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004766:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476e:	4955      	ldr	r1, [pc, #340]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800477e:	d101      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8004780:	2301      	movs	r3, #1
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800478c:	2301      	movs	r3, #1
 800478e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0308 	and.w	r3, r3, #8
 8004798:	2b00      	cmp	r3, #0
 800479a:	d017      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800479c:	4b49      	ldr	r3, [pc, #292]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800479e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047aa:	4946      	ldr	r1, [pc, #280]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ba:	d101      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80047bc:	2301      	movs	r3, #1
 80047be:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80047c8:	2301      	movs	r3, #1
 80047ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 808a 	beq.w	80048ee <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047da:	2300      	movs	r3, #0
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	4b39      	ldr	r3, [pc, #228]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	4a38      	ldr	r2, [pc, #224]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80047e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ea:	4b36      	ldr	r3, [pc, #216]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047f6:	4b34      	ldr	r3, [pc, #208]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a33      	ldr	r2, [pc, #204]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80047fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004800:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004802:	f7fe fa07 	bl	8002c14 <HAL_GetTick>
 8004806:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004808:	e008      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800480a:	f7fe fa03 	bl	8002c14 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e278      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800481c:	4b2a      	ldr	r3, [pc, #168]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004828:	4b26      	ldr	r3, [pc, #152]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004830:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d02f      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004840:	6a3a      	ldr	r2, [r7, #32]
 8004842:	429a      	cmp	r2, r3
 8004844:	d028      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004846:	4b1f      	ldr	r3, [pc, #124]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800484e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004850:	4b1e      	ldr	r3, [pc, #120]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004852:	2201      	movs	r2, #1
 8004854:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004856:	4b1d      	ldr	r3, [pc, #116]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800485c:	4a19      	ldr	r2, [pc, #100]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004862:	4b18      	ldr	r3, [pc, #96]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b01      	cmp	r3, #1
 800486c:	d114      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800486e:	f7fe f9d1 	bl	8002c14 <HAL_GetTick>
 8004872:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004874:	e00a      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004876:	f7fe f9cd 	bl	8002c14 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	f241 3288 	movw	r2, #5000	; 0x1388
 8004884:	4293      	cmp	r3, r2
 8004886:	d901      	bls.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e240      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800488c:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800488e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0ee      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048a4:	d114      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80048a6:	4b07      	ldr	r3, [pc, #28]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80048b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ba:	4902      	ldr	r1, [pc, #8]	; (80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80048bc:	4313      	orrs	r3, r2
 80048be:	608b      	str	r3, [r1, #8]
 80048c0:	e00c      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80048c2:	bf00      	nop
 80048c4:	40023800 	.word	0x40023800
 80048c8:	40007000 	.word	0x40007000
 80048cc:	42470e40 	.word	0x42470e40
 80048d0:	4b4a      	ldr	r3, [pc, #296]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	4a49      	ldr	r2, [pc, #292]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80048d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048da:	6093      	str	r3, [r2, #8]
 80048dc:	4b47      	ldr	r3, [pc, #284]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80048de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048e8:	4944      	ldr	r1, [pc, #272]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0310 	and.w	r3, r3, #16
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d004      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004900:	4b3f      	ldr	r3, [pc, #252]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004902:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004910:	4b3a      	ldr	r3, [pc, #232]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004916:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491e:	4937      	ldr	r1, [pc, #220]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004932:	4b32      	ldr	r3, [pc, #200]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004934:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004938:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004940:	492e      	ldr	r1, [pc, #184]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004950:	2b00      	cmp	r3, #0
 8004952:	d011      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004954:	4b29      	ldr	r3, [pc, #164]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800495a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004962:	4926      	ldr	r1, [pc, #152]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800496e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004972:	d101      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004974:	2301      	movs	r3, #1
 8004976:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004984:	4b1d      	ldr	r3, [pc, #116]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004986:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800498a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004992:	491a      	ldr	r1, [pc, #104]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d011      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80049a6:	4b15      	ldr	r3, [pc, #84]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80049a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049ac:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049b4:	4911      	ldr	r1, [pc, #68]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049c4:	d101      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80049c6:	2301      	movs	r3, #1
 80049c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80049ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d005      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d8:	f040 80ff 	bne.w	8004bda <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049dc:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049e2:	f7fe f917 	bl	8002c14 <HAL_GetTick>
 80049e6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049e8:	e00e      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80049ea:	f7fe f913 	bl	8002c14 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d907      	bls.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e188      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x642>
 80049fc:	40023800 	.word	0x40023800
 8004a00:	424711e0 	.word	0x424711e0
 8004a04:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a08:	4b7e      	ldr	r3, [pc, #504]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1ea      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d009      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d028      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d124      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004a3c:	4b71      	ldr	r3, [pc, #452]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a42:	0c1b      	lsrs	r3, r3, #16
 8004a44:	f003 0303 	and.w	r3, r3, #3
 8004a48:	3301      	adds	r3, #1
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a4e:	4b6d      	ldr	r3, [pc, #436]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a54:	0e1b      	lsrs	r3, r3, #24
 8004a56:	f003 030f 	and.w	r3, r3, #15
 8004a5a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	019b      	lsls	r3, r3, #6
 8004a66:	431a      	orrs	r2, r3
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	085b      	lsrs	r3, r3, #1
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	041b      	lsls	r3, r3, #16
 8004a70:	431a      	orrs	r2, r3
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	061b      	lsls	r3, r3, #24
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	071b      	lsls	r3, r3, #28
 8004a7e:	4961      	ldr	r1, [pc, #388]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d004      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a9a:	d00a      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d035      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ab0:	d130      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004ab2:	4b54      	ldr	r3, [pc, #336]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab8:	0c1b      	lsrs	r3, r3, #16
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	3301      	adds	r3, #1
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ac4:	4b4f      	ldr	r3, [pc, #316]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aca:	0f1b      	lsrs	r3, r3, #28
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	019b      	lsls	r3, r3, #6
 8004adc:	431a      	orrs	r2, r3
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	085b      	lsrs	r3, r3, #1
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	041b      	lsls	r3, r3, #16
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	061b      	lsls	r3, r3, #24
 8004aee:	431a      	orrs	r2, r3
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	071b      	lsls	r3, r3, #28
 8004af4:	4943      	ldr	r1, [pc, #268]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004afc:	4b41      	ldr	r3, [pc, #260]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b02:	f023 021f 	bic.w	r2, r3, #31
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	493d      	ldr	r1, [pc, #244]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d029      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b28:	d124      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004b2a:	4b36      	ldr	r3, [pc, #216]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b30:	0c1b      	lsrs	r3, r3, #16
 8004b32:	f003 0303 	and.w	r3, r3, #3
 8004b36:	3301      	adds	r3, #1
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b3c:	4b31      	ldr	r3, [pc, #196]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b42:	0f1b      	lsrs	r3, r3, #28
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	019b      	lsls	r3, r3, #6
 8004b54:	431a      	orrs	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	085b      	lsrs	r3, r3, #1
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	041b      	lsls	r3, r3, #16
 8004b60:	431a      	orrs	r2, r3
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	061b      	lsls	r3, r3, #24
 8004b66:	431a      	orrs	r2, r3
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	071b      	lsls	r3, r3, #28
 8004b6c:	4925      	ldr	r1, [pc, #148]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d016      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	019b      	lsls	r3, r3, #6
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	085b      	lsrs	r3, r3, #1
 8004b92:	3b01      	subs	r3, #1
 8004b94:	041b      	lsls	r3, r3, #16
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	061b      	lsls	r3, r3, #24
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	071b      	lsls	r3, r3, #28
 8004ba6:	4917      	ldr	r1, [pc, #92]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bae:	4b16      	ldr	r3, [pc, #88]	; (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bb4:	f7fe f82e 	bl	8002c14 <HAL_GetTick>
 8004bb8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bba:	e008      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bbc:	f7fe f82a 	bl	8002c14 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e09f      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bce:	4b0d      	ldr	r3, [pc, #52]	; (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0f0      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	f040 8095 	bne.w	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004be8:	f7fe f814 	bl	8002c14 <HAL_GetTick>
 8004bec:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004bee:	e00f      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004bf0:	f7fe f810 	bl	8002c14 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d908      	bls.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e085      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004c02:	bf00      	nop
 8004c04:	40023800 	.word	0x40023800
 8004c08:	42470068 	.word	0x42470068
 8004c0c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c10:	4b41      	ldr	r3, [pc, #260]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c1c:	d0e8      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d009      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d02b      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d127      	bne.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004c46:	4b34      	ldr	r3, [pc, #208]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c4c:	0c1b      	lsrs	r3, r3, #16
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	3301      	adds	r3, #1
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699a      	ldr	r2, [r3, #24]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	019b      	lsls	r3, r3, #6
 8004c62:	431a      	orrs	r2, r3
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	085b      	lsrs	r3, r3, #1
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	041b      	lsls	r3, r3, #16
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	061b      	lsls	r3, r3, #24
 8004c74:	4928      	ldr	r1, [pc, #160]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004c7c:	4b26      	ldr	r3, [pc, #152]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c82:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	4922      	ldr	r1, [pc, #136]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d01d      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004caa:	d118      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cac:	4b1a      	ldr	r3, [pc, #104]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb2:	0e1b      	lsrs	r3, r3, #24
 8004cb4:	f003 030f 	and.w	r3, r3, #15
 8004cb8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	019b      	lsls	r3, r3, #6
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	085b      	lsrs	r3, r3, #1
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	041b      	lsls	r3, r3, #16
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	061b      	lsls	r3, r3, #24
 8004cd6:	4910      	ldr	r1, [pc, #64]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004cde:	4b0f      	ldr	r3, [pc, #60]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ce4:	f7fd ff96 	bl	8002c14 <HAL_GetTick>
 8004ce8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004cec:	f7fd ff92 	bl	8002c14 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e007      	b.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004cfe:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d0a:	d1ef      	bne.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3730      	adds	r7, #48	; 0x30
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	42470070 	.word	0x42470070

08004d20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d24:	b088      	sub	sp, #32
 8004d26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d3c:	4bce      	ldr	r3, [pc, #824]	; (8005078 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f003 030c 	and.w	r3, r3, #12
 8004d44:	2b0c      	cmp	r3, #12
 8004d46:	f200 818d 	bhi.w	8005064 <HAL_RCC_GetSysClockFreq+0x344>
 8004d4a:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <HAL_RCC_GetSysClockFreq+0x30>)
 8004d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d50:	08004d85 	.word	0x08004d85
 8004d54:	08005065 	.word	0x08005065
 8004d58:	08005065 	.word	0x08005065
 8004d5c:	08005065 	.word	0x08005065
 8004d60:	08004d8b 	.word	0x08004d8b
 8004d64:	08005065 	.word	0x08005065
 8004d68:	08005065 	.word	0x08005065
 8004d6c:	08005065 	.word	0x08005065
 8004d70:	08004d91 	.word	0x08004d91
 8004d74:	08005065 	.word	0x08005065
 8004d78:	08005065 	.word	0x08005065
 8004d7c:	08005065 	.word	0x08005065
 8004d80:	08004f05 	.word	0x08004f05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d84:	4bbd      	ldr	r3, [pc, #756]	; (800507c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004d86:	61bb      	str	r3, [r7, #24]
       break;
 8004d88:	e16f      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d8a:	4bbd      	ldr	r3, [pc, #756]	; (8005080 <HAL_RCC_GetSysClockFreq+0x360>)
 8004d8c:	61bb      	str	r3, [r7, #24]
      break;
 8004d8e:	e16c      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d90:	4bb9      	ldr	r3, [pc, #740]	; (8005078 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d98:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d9a:	4bb7      	ldr	r3, [pc, #732]	; (8005078 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d053      	beq.n	8004e4e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004da6:	4bb4      	ldr	r3, [pc, #720]	; (8005078 <HAL_RCC_GetSysClockFreq+0x358>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	099b      	lsrs	r3, r3, #6
 8004dac:	461a      	mov	r2, r3
 8004dae:	f04f 0300 	mov.w	r3, #0
 8004db2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004db6:	f04f 0100 	mov.w	r1, #0
 8004dba:	ea02 0400 	and.w	r4, r2, r0
 8004dbe:	603c      	str	r4, [r7, #0]
 8004dc0:	400b      	ands	r3, r1
 8004dc2:	607b      	str	r3, [r7, #4]
 8004dc4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dc8:	4620      	mov	r0, r4
 8004dca:	4629      	mov	r1, r5
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	014b      	lsls	r3, r1, #5
 8004dd6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004dda:	0142      	lsls	r2, r0, #5
 8004ddc:	4610      	mov	r0, r2
 8004dde:	4619      	mov	r1, r3
 8004de0:	4623      	mov	r3, r4
 8004de2:	1ac0      	subs	r0, r0, r3
 8004de4:	462b      	mov	r3, r5
 8004de6:	eb61 0103 	sbc.w	r1, r1, r3
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	018b      	lsls	r3, r1, #6
 8004df4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004df8:	0182      	lsls	r2, r0, #6
 8004dfa:	1a12      	subs	r2, r2, r0
 8004dfc:	eb63 0301 	sbc.w	r3, r3, r1
 8004e00:	f04f 0000 	mov.w	r0, #0
 8004e04:	f04f 0100 	mov.w	r1, #0
 8004e08:	00d9      	lsls	r1, r3, #3
 8004e0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e0e:	00d0      	lsls	r0, r2, #3
 8004e10:	4602      	mov	r2, r0
 8004e12:	460b      	mov	r3, r1
 8004e14:	4621      	mov	r1, r4
 8004e16:	1852      	adds	r2, r2, r1
 8004e18:	4629      	mov	r1, r5
 8004e1a:	eb43 0101 	adc.w	r1, r3, r1
 8004e1e:	460b      	mov	r3, r1
 8004e20:	f04f 0000 	mov.w	r0, #0
 8004e24:	f04f 0100 	mov.w	r1, #0
 8004e28:	0259      	lsls	r1, r3, #9
 8004e2a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004e2e:	0250      	lsls	r0, r2, #9
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4610      	mov	r0, r2
 8004e36:	4619      	mov	r1, r3
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	f7fb fed2 	bl	8000be8 <__aeabi_uldivmod>
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	4613      	mov	r3, r2
 8004e4a:	61fb      	str	r3, [r7, #28]
 8004e4c:	e04c      	b.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e4e:	4b8a      	ldr	r3, [pc, #552]	; (8005078 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	099b      	lsrs	r3, r3, #6
 8004e54:	461a      	mov	r2, r3
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e5e:	f04f 0100 	mov.w	r1, #0
 8004e62:	ea02 0a00 	and.w	sl, r2, r0
 8004e66:	ea03 0b01 	and.w	fp, r3, r1
 8004e6a:	4650      	mov	r0, sl
 8004e6c:	4659      	mov	r1, fp
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	014b      	lsls	r3, r1, #5
 8004e78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e7c:	0142      	lsls	r2, r0, #5
 8004e7e:	4610      	mov	r0, r2
 8004e80:	4619      	mov	r1, r3
 8004e82:	ebb0 000a 	subs.w	r0, r0, sl
 8004e86:	eb61 010b 	sbc.w	r1, r1, fp
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	f04f 0300 	mov.w	r3, #0
 8004e92:	018b      	lsls	r3, r1, #6
 8004e94:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e98:	0182      	lsls	r2, r0, #6
 8004e9a:	1a12      	subs	r2, r2, r0
 8004e9c:	eb63 0301 	sbc.w	r3, r3, r1
 8004ea0:	f04f 0000 	mov.w	r0, #0
 8004ea4:	f04f 0100 	mov.w	r1, #0
 8004ea8:	00d9      	lsls	r1, r3, #3
 8004eaa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004eae:	00d0      	lsls	r0, r2, #3
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	eb12 020a 	adds.w	r2, r2, sl
 8004eb8:	eb43 030b 	adc.w	r3, r3, fp
 8004ebc:	f04f 0000 	mov.w	r0, #0
 8004ec0:	f04f 0100 	mov.w	r1, #0
 8004ec4:	0299      	lsls	r1, r3, #10
 8004ec6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004eca:	0290      	lsls	r0, r2, #10
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4610      	mov	r0, r2
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	f7fb fe84 	bl	8000be8 <__aeabi_uldivmod>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ee8:	4b63      	ldr	r3, [pc, #396]	; (8005078 <HAL_RCC_GetSysClockFreq+0x358>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	0c1b      	lsrs	r3, r3, #16
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f00:	61bb      	str	r3, [r7, #24]
      break;
 8004f02:	e0b2      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f04:	4b5c      	ldr	r3, [pc, #368]	; (8005078 <HAL_RCC_GetSysClockFreq+0x358>)
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f0c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f0e:	4b5a      	ldr	r3, [pc, #360]	; (8005078 <HAL_RCC_GetSysClockFreq+0x358>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d04d      	beq.n	8004fb6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f1a:	4b57      	ldr	r3, [pc, #348]	; (8005078 <HAL_RCC_GetSysClockFreq+0x358>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	099b      	lsrs	r3, r3, #6
 8004f20:	461a      	mov	r2, r3
 8004f22:	f04f 0300 	mov.w	r3, #0
 8004f26:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004f2a:	f04f 0100 	mov.w	r1, #0
 8004f2e:	ea02 0800 	and.w	r8, r2, r0
 8004f32:	ea03 0901 	and.w	r9, r3, r1
 8004f36:	4640      	mov	r0, r8
 8004f38:	4649      	mov	r1, r9
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	f04f 0300 	mov.w	r3, #0
 8004f42:	014b      	lsls	r3, r1, #5
 8004f44:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004f48:	0142      	lsls	r2, r0, #5
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	ebb0 0008 	subs.w	r0, r0, r8
 8004f52:	eb61 0109 	sbc.w	r1, r1, r9
 8004f56:	f04f 0200 	mov.w	r2, #0
 8004f5a:	f04f 0300 	mov.w	r3, #0
 8004f5e:	018b      	lsls	r3, r1, #6
 8004f60:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004f64:	0182      	lsls	r2, r0, #6
 8004f66:	1a12      	subs	r2, r2, r0
 8004f68:	eb63 0301 	sbc.w	r3, r3, r1
 8004f6c:	f04f 0000 	mov.w	r0, #0
 8004f70:	f04f 0100 	mov.w	r1, #0
 8004f74:	00d9      	lsls	r1, r3, #3
 8004f76:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f7a:	00d0      	lsls	r0, r2, #3
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	eb12 0208 	adds.w	r2, r2, r8
 8004f84:	eb43 0309 	adc.w	r3, r3, r9
 8004f88:	f04f 0000 	mov.w	r0, #0
 8004f8c:	f04f 0100 	mov.w	r1, #0
 8004f90:	0259      	lsls	r1, r3, #9
 8004f92:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004f96:	0250      	lsls	r0, r2, #9
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4610      	mov	r0, r2
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	f7fb fe1e 	bl	8000be8 <__aeabi_uldivmod>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	e04a      	b.n	800504c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fb6:	4b30      	ldr	r3, [pc, #192]	; (8005078 <HAL_RCC_GetSysClockFreq+0x358>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	099b      	lsrs	r3, r3, #6
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004fc6:	f04f 0100 	mov.w	r1, #0
 8004fca:	ea02 0400 	and.w	r4, r2, r0
 8004fce:	ea03 0501 	and.w	r5, r3, r1
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	4629      	mov	r1, r5
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	014b      	lsls	r3, r1, #5
 8004fe0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004fe4:	0142      	lsls	r2, r0, #5
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	4619      	mov	r1, r3
 8004fea:	1b00      	subs	r0, r0, r4
 8004fec:	eb61 0105 	sbc.w	r1, r1, r5
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	018b      	lsls	r3, r1, #6
 8004ffa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ffe:	0182      	lsls	r2, r0, #6
 8005000:	1a12      	subs	r2, r2, r0
 8005002:	eb63 0301 	sbc.w	r3, r3, r1
 8005006:	f04f 0000 	mov.w	r0, #0
 800500a:	f04f 0100 	mov.w	r1, #0
 800500e:	00d9      	lsls	r1, r3, #3
 8005010:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005014:	00d0      	lsls	r0, r2, #3
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	1912      	adds	r2, r2, r4
 800501c:	eb45 0303 	adc.w	r3, r5, r3
 8005020:	f04f 0000 	mov.w	r0, #0
 8005024:	f04f 0100 	mov.w	r1, #0
 8005028:	0299      	lsls	r1, r3, #10
 800502a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800502e:	0290      	lsls	r0, r2, #10
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4610      	mov	r0, r2
 8005036:	4619      	mov	r1, r3
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	461a      	mov	r2, r3
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	f7fb fdd2 	bl	8000be8 <__aeabi_uldivmod>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4613      	mov	r3, r2
 800504a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800504c:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <HAL_RCC_GetSysClockFreq+0x358>)
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	0f1b      	lsrs	r3, r3, #28
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005060:	61bb      	str	r3, [r7, #24]
      break;
 8005062:	e002      	b.n	800506a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005064:	4b05      	ldr	r3, [pc, #20]	; (800507c <HAL_RCC_GetSysClockFreq+0x35c>)
 8005066:	61bb      	str	r3, [r7, #24]
      break;
 8005068:	bf00      	nop
    }
  }
  return sysclockfreq;
 800506a:	69bb      	ldr	r3, [r7, #24]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3720      	adds	r7, #32
 8005070:	46bd      	mov	sp, r7
 8005072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005076:	bf00      	nop
 8005078:	40023800 	.word	0x40023800
 800507c:	00f42400 	.word	0x00f42400
 8005080:	007a1200 	.word	0x007a1200

08005084 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e28d      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 8083 	beq.w	80051aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80050a4:	4b94      	ldr	r3, [pc, #592]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f003 030c 	and.w	r3, r3, #12
 80050ac:	2b04      	cmp	r3, #4
 80050ae:	d019      	beq.n	80050e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80050b0:	4b91      	ldr	r3, [pc, #580]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d106      	bne.n	80050ca <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80050bc:	4b8e      	ldr	r3, [pc, #568]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050c8:	d00c      	beq.n	80050e4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ca:	4b8b      	ldr	r3, [pc, #556]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80050d2:	2b0c      	cmp	r3, #12
 80050d4:	d112      	bne.n	80050fc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050d6:	4b88      	ldr	r3, [pc, #544]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050e2:	d10b      	bne.n	80050fc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e4:	4b84      	ldr	r3, [pc, #528]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d05b      	beq.n	80051a8 <HAL_RCC_OscConfig+0x124>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d157      	bne.n	80051a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e25a      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005104:	d106      	bne.n	8005114 <HAL_RCC_OscConfig+0x90>
 8005106:	4b7c      	ldr	r3, [pc, #496]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a7b      	ldr	r2, [pc, #492]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 800510c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	e01d      	b.n	8005150 <HAL_RCC_OscConfig+0xcc>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800511c:	d10c      	bne.n	8005138 <HAL_RCC_OscConfig+0xb4>
 800511e:	4b76      	ldr	r3, [pc, #472]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a75      	ldr	r2, [pc, #468]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 8005124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	4b73      	ldr	r3, [pc, #460]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a72      	ldr	r2, [pc, #456]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 8005130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	e00b      	b.n	8005150 <HAL_RCC_OscConfig+0xcc>
 8005138:	4b6f      	ldr	r3, [pc, #444]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a6e      	ldr	r2, [pc, #440]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 800513e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	4b6c      	ldr	r3, [pc, #432]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a6b      	ldr	r2, [pc, #428]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 800514a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800514e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d013      	beq.n	8005180 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005158:	f7fd fd5c 	bl	8002c14 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005160:	f7fd fd58 	bl	8002c14 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b64      	cmp	r3, #100	; 0x64
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e21f      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005172:	4b61      	ldr	r3, [pc, #388]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0f0      	beq.n	8005160 <HAL_RCC_OscConfig+0xdc>
 800517e:	e014      	b.n	80051aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005180:	f7fd fd48 	bl	8002c14 <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005188:	f7fd fd44 	bl	8002c14 <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b64      	cmp	r3, #100	; 0x64
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e20b      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800519a:	4b57      	ldr	r3, [pc, #348]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f0      	bne.n	8005188 <HAL_RCC_OscConfig+0x104>
 80051a6:	e000      	b.n	80051aa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d06f      	beq.n	8005296 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80051b6:	4b50      	ldr	r3, [pc, #320]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 030c 	and.w	r3, r3, #12
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d017      	beq.n	80051f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80051c2:	4b4d      	ldr	r3, [pc, #308]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d105      	bne.n	80051da <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80051ce:	4b4a      	ldr	r3, [pc, #296]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00b      	beq.n	80051f2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051da:	4b47      	ldr	r3, [pc, #284]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80051e2:	2b0c      	cmp	r3, #12
 80051e4:	d11c      	bne.n	8005220 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051e6:	4b44      	ldr	r3, [pc, #272]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d116      	bne.n	8005220 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051f2:	4b41      	ldr	r3, [pc, #260]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d005      	beq.n	800520a <HAL_RCC_OscConfig+0x186>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d001      	beq.n	800520a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e1d3      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800520a:	4b3b      	ldr	r3, [pc, #236]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4937      	ldr	r1, [pc, #220]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 800521a:	4313      	orrs	r3, r2
 800521c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800521e:	e03a      	b.n	8005296 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d020      	beq.n	800526a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005228:	4b34      	ldr	r3, [pc, #208]	; (80052fc <HAL_RCC_OscConfig+0x278>)
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522e:	f7fd fcf1 	bl	8002c14 <HAL_GetTick>
 8005232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005234:	e008      	b.n	8005248 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005236:	f7fd fced 	bl	8002c14 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	2b02      	cmp	r3, #2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e1b4      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005248:	4b2b      	ldr	r3, [pc, #172]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0f0      	beq.n	8005236 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005254:	4b28      	ldr	r3, [pc, #160]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	4925      	ldr	r1, [pc, #148]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 8005264:	4313      	orrs	r3, r2
 8005266:	600b      	str	r3, [r1, #0]
 8005268:	e015      	b.n	8005296 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800526a:	4b24      	ldr	r3, [pc, #144]	; (80052fc <HAL_RCC_OscConfig+0x278>)
 800526c:	2200      	movs	r2, #0
 800526e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005270:	f7fd fcd0 	bl	8002c14 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005278:	f7fd fccc 	bl	8002c14 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e193      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800528a:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1f0      	bne.n	8005278 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0308 	and.w	r3, r3, #8
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d036      	beq.n	8005310 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d016      	beq.n	80052d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052aa:	4b15      	ldr	r3, [pc, #84]	; (8005300 <HAL_RCC_OscConfig+0x27c>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b0:	f7fd fcb0 	bl	8002c14 <HAL_GetTick>
 80052b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052b8:	f7fd fcac 	bl	8002c14 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e173      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ca:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <HAL_RCC_OscConfig+0x274>)
 80052cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f0      	beq.n	80052b8 <HAL_RCC_OscConfig+0x234>
 80052d6:	e01b      	b.n	8005310 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052d8:	4b09      	ldr	r3, [pc, #36]	; (8005300 <HAL_RCC_OscConfig+0x27c>)
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052de:	f7fd fc99 	bl	8002c14 <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052e4:	e00e      	b.n	8005304 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052e6:	f7fd fc95 	bl	8002c14 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d907      	bls.n	8005304 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e15c      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
 80052f8:	40023800 	.word	0x40023800
 80052fc:	42470000 	.word	0x42470000
 8005300:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005304:	4b8a      	ldr	r3, [pc, #552]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1ea      	bne.n	80052e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8097 	beq.w	800544c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800531e:	2300      	movs	r3, #0
 8005320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005322:	4b83      	ldr	r3, [pc, #524]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10f      	bne.n	800534e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800532e:	2300      	movs	r3, #0
 8005330:	60bb      	str	r3, [r7, #8]
 8005332:	4b7f      	ldr	r3, [pc, #508]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	4a7e      	ldr	r2, [pc, #504]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533c:	6413      	str	r3, [r2, #64]	; 0x40
 800533e:	4b7c      	ldr	r3, [pc, #496]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005346:	60bb      	str	r3, [r7, #8]
 8005348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800534a:	2301      	movs	r3, #1
 800534c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800534e:	4b79      	ldr	r3, [pc, #484]	; (8005534 <HAL_RCC_OscConfig+0x4b0>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005356:	2b00      	cmp	r3, #0
 8005358:	d118      	bne.n	800538c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800535a:	4b76      	ldr	r3, [pc, #472]	; (8005534 <HAL_RCC_OscConfig+0x4b0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a75      	ldr	r2, [pc, #468]	; (8005534 <HAL_RCC_OscConfig+0x4b0>)
 8005360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005366:	f7fd fc55 	bl	8002c14 <HAL_GetTick>
 800536a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800536c:	e008      	b.n	8005380 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800536e:	f7fd fc51 	bl	8002c14 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	2b02      	cmp	r3, #2
 800537a:	d901      	bls.n	8005380 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800537c:	2303      	movs	r3, #3
 800537e:	e118      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005380:	4b6c      	ldr	r3, [pc, #432]	; (8005534 <HAL_RCC_OscConfig+0x4b0>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005388:	2b00      	cmp	r3, #0
 800538a:	d0f0      	beq.n	800536e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d106      	bne.n	80053a2 <HAL_RCC_OscConfig+0x31e>
 8005394:	4b66      	ldr	r3, [pc, #408]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005398:	4a65      	ldr	r2, [pc, #404]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 800539a:	f043 0301 	orr.w	r3, r3, #1
 800539e:	6713      	str	r3, [r2, #112]	; 0x70
 80053a0:	e01c      	b.n	80053dc <HAL_RCC_OscConfig+0x358>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b05      	cmp	r3, #5
 80053a8:	d10c      	bne.n	80053c4 <HAL_RCC_OscConfig+0x340>
 80053aa:	4b61      	ldr	r3, [pc, #388]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 80053ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ae:	4a60      	ldr	r2, [pc, #384]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 80053b0:	f043 0304 	orr.w	r3, r3, #4
 80053b4:	6713      	str	r3, [r2, #112]	; 0x70
 80053b6:	4b5e      	ldr	r3, [pc, #376]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 80053b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ba:	4a5d      	ldr	r2, [pc, #372]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 80053bc:	f043 0301 	orr.w	r3, r3, #1
 80053c0:	6713      	str	r3, [r2, #112]	; 0x70
 80053c2:	e00b      	b.n	80053dc <HAL_RCC_OscConfig+0x358>
 80053c4:	4b5a      	ldr	r3, [pc, #360]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 80053c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c8:	4a59      	ldr	r2, [pc, #356]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 80053ca:	f023 0301 	bic.w	r3, r3, #1
 80053ce:	6713      	str	r3, [r2, #112]	; 0x70
 80053d0:	4b57      	ldr	r3, [pc, #348]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 80053d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d4:	4a56      	ldr	r2, [pc, #344]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 80053d6:	f023 0304 	bic.w	r3, r3, #4
 80053da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d015      	beq.n	8005410 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e4:	f7fd fc16 	bl	8002c14 <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ea:	e00a      	b.n	8005402 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ec:	f7fd fc12 	bl	8002c14 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e0d7      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005402:	4b4b      	ldr	r3, [pc, #300]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0ee      	beq.n	80053ec <HAL_RCC_OscConfig+0x368>
 800540e:	e014      	b.n	800543a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005410:	f7fd fc00 	bl	8002c14 <HAL_GetTick>
 8005414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005416:	e00a      	b.n	800542e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005418:	f7fd fbfc 	bl	8002c14 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	f241 3288 	movw	r2, #5000	; 0x1388
 8005426:	4293      	cmp	r3, r2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e0c1      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800542e:	4b40      	ldr	r3, [pc, #256]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1ee      	bne.n	8005418 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800543a:	7dfb      	ldrb	r3, [r7, #23]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d105      	bne.n	800544c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005440:	4b3b      	ldr	r3, [pc, #236]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005444:	4a3a      	ldr	r2, [pc, #232]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005446:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800544a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 80ad 	beq.w	80055b0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005456:	4b36      	ldr	r3, [pc, #216]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f003 030c 	and.w	r3, r3, #12
 800545e:	2b08      	cmp	r3, #8
 8005460:	d060      	beq.n	8005524 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d145      	bne.n	80054f6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800546a:	4b33      	ldr	r3, [pc, #204]	; (8005538 <HAL_RCC_OscConfig+0x4b4>)
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005470:	f7fd fbd0 	bl	8002c14 <HAL_GetTick>
 8005474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005476:	e008      	b.n	800548a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005478:	f7fd fbcc 	bl	8002c14 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	2b02      	cmp	r3, #2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e093      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800548a:	4b29      	ldr	r3, [pc, #164]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1f0      	bne.n	8005478 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	69da      	ldr	r2, [r3, #28]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	019b      	lsls	r3, r3, #6
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ac:	085b      	lsrs	r3, r3, #1
 80054ae:	3b01      	subs	r3, #1
 80054b0:	041b      	lsls	r3, r3, #16
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b8:	061b      	lsls	r3, r3, #24
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	071b      	lsls	r3, r3, #28
 80054c2:	491b      	ldr	r1, [pc, #108]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054c8:	4b1b      	ldr	r3, [pc, #108]	; (8005538 <HAL_RCC_OscConfig+0x4b4>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ce:	f7fd fba1 	bl	8002c14 <HAL_GetTick>
 80054d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d4:	e008      	b.n	80054e8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054d6:	f7fd fb9d 	bl	8002c14 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d901      	bls.n	80054e8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e064      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e8:	4b11      	ldr	r3, [pc, #68]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0f0      	beq.n	80054d6 <HAL_RCC_OscConfig+0x452>
 80054f4:	e05c      	b.n	80055b0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f6:	4b10      	ldr	r3, [pc, #64]	; (8005538 <HAL_RCC_OscConfig+0x4b4>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054fc:	f7fd fb8a 	bl	8002c14 <HAL_GetTick>
 8005500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005504:	f7fd fb86 	bl	8002c14 <HAL_GetTick>
 8005508:	4602      	mov	r2, r0
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e04d      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005516:	4b06      	ldr	r3, [pc, #24]	; (8005530 <HAL_RCC_OscConfig+0x4ac>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1f0      	bne.n	8005504 <HAL_RCC_OscConfig+0x480>
 8005522:	e045      	b.n	80055b0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d107      	bne.n	800553c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e040      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
 8005530:	40023800 	.word	0x40023800
 8005534:	40007000 	.word	0x40007000
 8005538:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800553c:	4b1f      	ldr	r3, [pc, #124]	; (80055bc <HAL_RCC_OscConfig+0x538>)
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d030      	beq.n	80055ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005554:	429a      	cmp	r2, r3
 8005556:	d129      	bne.n	80055ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005562:	429a      	cmp	r2, r3
 8005564:	d122      	bne.n	80055ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800556c:	4013      	ands	r3, r2
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005572:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005574:	4293      	cmp	r3, r2
 8005576:	d119      	bne.n	80055ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	085b      	lsrs	r3, r3, #1
 8005584:	3b01      	subs	r3, #1
 8005586:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005588:	429a      	cmp	r2, r3
 800558a:	d10f      	bne.n	80055ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005596:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005598:	429a      	cmp	r2, r3
 800559a:	d107      	bne.n	80055ac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d001      	beq.n	80055b0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e000      	b.n	80055b2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40023800 	.word	0x40023800

080055c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e083      	b.n	80056da <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	7f5b      	ldrb	r3, [r3, #29]
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d105      	bne.n	80055e8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7fb ffca 	bl	800157c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	22ca      	movs	r2, #202	; 0xca
 80055f4:	625a      	str	r2, [r3, #36]	; 0x24
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2253      	movs	r2, #83	; 0x53
 80055fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fb7a 	bl	8005cf8 <RTC_EnterInitMode>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d008      	beq.n	800561c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	22ff      	movs	r2, #255	; 0xff
 8005610:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2204      	movs	r2, #4
 8005616:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e05e      	b.n	80056da <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6812      	ldr	r2, [r2, #0]
 8005626:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800562a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800562e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6899      	ldr	r1, [r3, #8]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	431a      	orrs	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	68d2      	ldr	r2, [r2, #12]
 8005656:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6919      	ldr	r1, [r3, #16]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	041a      	lsls	r2, r3, #16
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68da      	ldr	r2, [r3, #12]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800567a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10e      	bne.n	80056a8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fb0c 	bl	8005ca8 <HAL_RTC_WaitForSynchro>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d008      	beq.n	80056a8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	22ff      	movs	r2, #255	; 0xff
 800569c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2204      	movs	r2, #4
 80056a2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e018      	b.n	80056da <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80056b6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	22ff      	movs	r2, #255	; 0xff
 80056d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80056d8:	2300      	movs	r3, #0
  }
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056e2:	b590      	push	{r4, r7, lr}
 80056e4:	b087      	sub	sp, #28
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	7f1b      	ldrb	r3, [r3, #28]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d101      	bne.n	80056fe <HAL_RTC_SetTime+0x1c>
 80056fa:	2302      	movs	r3, #2
 80056fc:	e0aa      	b.n	8005854 <HAL_RTC_SetTime+0x172>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2202      	movs	r2, #2
 8005708:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d126      	bne.n	800575e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571a:	2b00      	cmp	r3, #0
 800571c:	d102      	bne.n	8005724 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2200      	movs	r2, #0
 8005722:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fb11 	bl	8005d50 <RTC_ByteToBcd2>
 800572e:	4603      	mov	r3, r0
 8005730:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	785b      	ldrb	r3, [r3, #1]
 8005736:	4618      	mov	r0, r3
 8005738:	f000 fb0a 	bl	8005d50 <RTC_ByteToBcd2>
 800573c:	4603      	mov	r3, r0
 800573e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005740:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	789b      	ldrb	r3, [r3, #2]
 8005746:	4618      	mov	r0, r3
 8005748:	f000 fb02 	bl	8005d50 <RTC_ByteToBcd2>
 800574c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800574e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	78db      	ldrb	r3, [r3, #3]
 8005756:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	e018      	b.n	8005790 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005768:	2b00      	cmp	r3, #0
 800576a:	d102      	bne.n	8005772 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2200      	movs	r2, #0
 8005770:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	785b      	ldrb	r3, [r3, #1]
 800577c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800577e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005784:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	78db      	ldrb	r3, [r3, #3]
 800578a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800578c:	4313      	orrs	r3, r2
 800578e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	22ca      	movs	r2, #202	; 0xca
 8005796:	625a      	str	r2, [r3, #36]	; 0x24
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2253      	movs	r2, #83	; 0x53
 800579e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 faa9 	bl	8005cf8 <RTC_EnterInitMode>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00b      	beq.n	80057c4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	22ff      	movs	r2, #255	; 0xff
 80057b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2204      	movs	r2, #4
 80057b8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e047      	b.n	8005854 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80057ce:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80057d2:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80057e2:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6899      	ldr	r1, [r3, #8]
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	68da      	ldr	r2, [r3, #12]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	431a      	orrs	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	430a      	orrs	r2, r1
 80057fa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800580a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 0320 	and.w	r3, r3, #32
 8005816:	2b00      	cmp	r3, #0
 8005818:	d111      	bne.n	800583e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 fa44 	bl	8005ca8 <HAL_RTC_WaitForSynchro>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00b      	beq.n	800583e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	22ff      	movs	r2, #255	; 0xff
 800582c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2204      	movs	r2, #4
 8005832:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e00a      	b.n	8005854 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	22ff      	movs	r2, #255	; 0xff
 8005844:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2201      	movs	r2, #1
 800584a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005852:	2300      	movs	r3, #0
  }
}
 8005854:	4618      	mov	r0, r3
 8005856:	371c      	adds	r7, #28
 8005858:	46bd      	mov	sp, r7
 800585a:	bd90      	pop	{r4, r7, pc}

0800585c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800585c:	b590      	push	{r4, r7, lr}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	7f1b      	ldrb	r3, [r3, #28]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_RTC_SetDate+0x1c>
 8005874:	2302      	movs	r3, #2
 8005876:	e094      	b.n	80059a2 <HAL_RTC_SetDate+0x146>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2201      	movs	r2, #1
 800587c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2202      	movs	r2, #2
 8005882:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10e      	bne.n	80058a8 <HAL_RTC_SetDate+0x4c>
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	785b      	ldrb	r3, [r3, #1]
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	2b00      	cmp	r3, #0
 8005894:	d008      	beq.n	80058a8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	785b      	ldrb	r3, [r3, #1]
 800589a:	f023 0310 	bic.w	r3, r3, #16
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	330a      	adds	r3, #10
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d11c      	bne.n	80058e8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	78db      	ldrb	r3, [r3, #3]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 fa4c 	bl	8005d50 <RTC_ByteToBcd2>
 80058b8:	4603      	mov	r3, r0
 80058ba:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	785b      	ldrb	r3, [r3, #1]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fa45 	bl	8005d50 <RTC_ByteToBcd2>
 80058c6:	4603      	mov	r3, r0
 80058c8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80058ca:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	789b      	ldrb	r3, [r3, #2]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fa3d 	bl	8005d50 <RTC_ByteToBcd2>
 80058d6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80058d8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]
 80058e6:	e00e      	b.n	8005906 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	78db      	ldrb	r3, [r3, #3]
 80058ec:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80058f4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80058fa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	22ca      	movs	r2, #202	; 0xca
 800590c:	625a      	str	r2, [r3, #36]	; 0x24
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2253      	movs	r2, #83	; 0x53
 8005914:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 f9ee 	bl	8005cf8 <RTC_EnterInitMode>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00b      	beq.n	800593a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	22ff      	movs	r2, #255	; 0xff
 8005928:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2204      	movs	r2, #4
 800592e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e033      	b.n	80059a2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005944:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005948:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68da      	ldr	r2, [r3, #12]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005958:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 0320 	and.w	r3, r3, #32
 8005964:	2b00      	cmp	r3, #0
 8005966:	d111      	bne.n	800598c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 f99d 	bl	8005ca8 <HAL_RTC_WaitForSynchro>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00b      	beq.n	800598c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	22ff      	movs	r2, #255	; 0xff
 800597a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2204      	movs	r2, #4
 8005980:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e00a      	b.n	80059a2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	22ff      	movs	r2, #255	; 0xff
 8005992:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2201      	movs	r2, #1
 8005998:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80059a0:	2300      	movs	r3, #0
  }
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd90      	pop	{r4, r7, pc}
	...

080059ac <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80059ac:	b590      	push	{r4, r7, lr}
 80059ae:	b089      	sub	sp, #36	; 0x24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	61fb      	str	r3, [r7, #28]
 80059bc:	2300      	movs	r3, #0
 80059be:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 80059c0:	4b93      	ldr	r3, [pc, #588]	; (8005c10 <HAL_RTC_SetAlarm_IT+0x264>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a93      	ldr	r2, [pc, #588]	; (8005c14 <HAL_RTC_SetAlarm_IT+0x268>)
 80059c6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ca:	0adb      	lsrs	r3, r3, #11
 80059cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059d0:	fb02 f303 	mul.w	r3, r2, r3
 80059d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	7f1b      	ldrb	r3, [r3, #28]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_RTC_SetAlarm_IT+0x36>
 80059de:	2302      	movs	r3, #2
 80059e0:	e111      	b.n	8005c06 <HAL_RTC_SetAlarm_IT+0x25a>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2201      	movs	r2, #1
 80059e6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2202      	movs	r2, #2
 80059ec:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d137      	bne.n	8005a64 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d102      	bne.n	8005a08 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2200      	movs	r2, #0
 8005a06:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 f99f 	bl	8005d50 <RTC_ByteToBcd2>
 8005a12:	4603      	mov	r3, r0
 8005a14:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	785b      	ldrb	r3, [r3, #1]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 f998 	bl	8005d50 <RTC_ByteToBcd2>
 8005a20:	4603      	mov	r3, r0
 8005a22:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005a24:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	789b      	ldrb	r3, [r3, #2]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 f990 	bl	8005d50 <RTC_ByteToBcd2>
 8005a30:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005a32:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	78db      	ldrb	r3, [r3, #3]
 8005a3a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8005a3c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 f982 	bl	8005d50 <RTC_ByteToBcd2>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005a50:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005a58:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	61fb      	str	r3, [r7, #28]
 8005a62:	e023      	b.n	8005aac <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d102      	bne.n	8005a78 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	2200      	movs	r2, #0
 8005a76:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	785b      	ldrb	r3, [r3, #1]
 8005a82:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005a84:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005a8a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	78db      	ldrb	r3, [r3, #3]
 8005a90:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8005a92:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a9a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005a9c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005aa2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	22ca      	movs	r2, #202	; 0xca
 8005abe:	625a      	str	r2, [r3, #36]	; 0x24
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2253      	movs	r2, #83	; 0x53
 8005ac6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ad0:	d141      	bne.n	8005b56 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ae0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005af2:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	1e5a      	subs	r2, r3, #1
 8005af8:	617a      	str	r2, [r7, #20]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10b      	bne.n	8005b16 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	22ff      	movs	r2, #255	; 0xff
 8005b04:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2203      	movs	r2, #3
 8005b0a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e077      	b.n	8005c06 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d0e7      	beq.n	8005af4 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69fa      	ldr	r2, [r7, #28]
 8005b2a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b42:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689a      	ldr	r2, [r3, #8]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005b52:	609a      	str	r2, [r3, #8]
 8005b54:	e040      	b.n	8005bd8 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b64:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005b76:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	1e5a      	subs	r2, r3, #1
 8005b7c:	617a      	str	r2, [r7, #20]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10b      	bne.n	8005b9a <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	22ff      	movs	r2, #255	; 0xff
 8005b88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2203      	movs	r2, #3
 8005b8e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005b96:	2303      	movs	r3, #3
 8005b98:	e035      	b.n	8005c06 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f003 0302 	and.w	r3, r3, #2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d0e7      	beq.n	8005b78 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	69fa      	ldr	r2, [r7, #28]
 8005bae:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bc6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005bd6:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005bd8:	4b0f      	ldr	r3, [pc, #60]	; (8005c18 <HAL_RTC_SetAlarm_IT+0x26c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a0e      	ldr	r2, [pc, #56]	; (8005c18 <HAL_RTC_SetAlarm_IT+0x26c>)
 8005bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005be2:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8005be4:	4b0c      	ldr	r3, [pc, #48]	; (8005c18 <HAL_RTC_SetAlarm_IT+0x26c>)
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	4a0b      	ldr	r2, [pc, #44]	; (8005c18 <HAL_RTC_SetAlarm_IT+0x26c>)
 8005bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bee:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	22ff      	movs	r2, #255	; 0xff
 8005bf6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3724      	adds	r7, #36	; 0x24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd90      	pop	{r4, r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	20000000 	.word	0x20000000
 8005c14:	10624dd3 	.word	0x10624dd3
 8005c18:	40013c00 	.word	0x40013c00

08005c1c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d012      	beq.n	8005c58 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d00b      	beq.n	8005c58 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7fc fe4d 	bl	80028e0 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005c56:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d012      	beq.n	8005c8c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00b      	beq.n	8005c8c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f8e1 	bl	8005e3c <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f462 7220 	orn	r2, r2, #640	; 0x280
 8005c8a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005c8c:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005c8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005c92:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	775a      	strb	r2, [r3, #29]
}
 8005c9a:	bf00      	nop
 8005c9c:	3708      	adds	r7, #8
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	40013c00 	.word	0x40013c00

08005ca8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cc2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cc4:	f7fc ffa6 	bl	8002c14 <HAL_GetTick>
 8005cc8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005cca:	e009      	b.n	8005ce0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005ccc:	f7fc ffa2 	bl	8002c14 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cda:	d901      	bls.n	8005ce0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e007      	b.n	8005cf0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f003 0320 	and.w	r3, r3, #32
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d0ee      	beq.n	8005ccc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d119      	bne.n	8005d46 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d1c:	f7fc ff7a 	bl	8002c14 <HAL_GetTick>
 8005d20:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d22:	e009      	b.n	8005d38 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005d24:	f7fc ff76 	bl	8002c14 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d32:	d901      	bls.n	8005d38 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e007      	b.n	8005d48 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0ee      	beq.n	8005d24 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	4603      	mov	r3, r0
 8005d58:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005d5e:	e005      	b.n	8005d6c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3301      	adds	r3, #1
 8005d64:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005d66:	79fb      	ldrb	r3, [r7, #7]
 8005d68:	3b0a      	subs	r3, #10
 8005d6a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005d6c:	79fb      	ldrb	r3, [r7, #7]
 8005d6e:	2b09      	cmp	r3, #9
 8005d70:	d8f6      	bhi.n	8005d60 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	b2db      	uxtb	r3, r3
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	7f1b      	ldrb	r3, [r3, #28]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e047      	b.n	8005e34 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2202      	movs	r2, #2
 8005dae:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	22ca      	movs	r2, #202	; 0xca
 8005db6:	625a      	str	r2, [r3, #36]	; 0x24
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2253      	movs	r2, #83	; 0x53
 8005dbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689a      	ldr	r2, [r3, #8]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dce:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005dde:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005de0:	f7fc ff18 	bl	8002c14 <HAL_GetTick>
 8005de4:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8005de6:	e013      	b.n	8005e10 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005de8:	f7fc ff14 	bl	8002c14 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005df6:	d90b      	bls.n	8005e10 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	22ff      	movs	r2, #255	; 0xff
 8005dfe:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2203      	movs	r2, #3
 8005e04:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e011      	b.n	8005e34 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	f003 0304 	and.w	r3, r3, #4
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0e4      	beq.n	8005de8 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	22ff      	movs	r2, #255	; 0xff
 8005e24:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e041      	b.n	8005ee6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d106      	bne.n	8005e7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f839 	bl	8005eee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4610      	mov	r0, r2
 8005e90:	f000 f9d8 	bl	8006244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
	...

08005f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d001      	beq.n	8005f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e04e      	b.n	8005fba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0201 	orr.w	r2, r2, #1
 8005f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a23      	ldr	r2, [pc, #140]	; (8005fc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d022      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f46:	d01d      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a1f      	ldr	r2, [pc, #124]	; (8005fcc <HAL_TIM_Base_Start_IT+0xc8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d018      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a1e      	ldr	r2, [pc, #120]	; (8005fd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d013      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a1c      	ldr	r2, [pc, #112]	; (8005fd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00e      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1b      	ldr	r2, [pc, #108]	; (8005fd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d009      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a19      	ldr	r2, [pc, #100]	; (8005fdc <HAL_TIM_Base_Start_IT+0xd8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d004      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a18      	ldr	r2, [pc, #96]	; (8005fe0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d111      	bne.n	8005fa8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2b06      	cmp	r3, #6
 8005f94:	d010      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f042 0201 	orr.w	r2, r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa6:	e007      	b.n	8005fb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0201 	orr.w	r2, r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	40010000 	.word	0x40010000
 8005fcc:	40000400 	.word	0x40000400
 8005fd0:	40000800 	.word	0x40000800
 8005fd4:	40000c00 	.word	0x40000c00
 8005fd8:	40010400 	.word	0x40010400
 8005fdc:	40014000 	.word	0x40014000
 8005fe0:	40001800 	.word	0x40001800

08005fe4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f003 0302 	and.w	r3, r3, #2
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d122      	bne.n	8006040 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b02      	cmp	r3, #2
 8006006:	d11b      	bne.n	8006040 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f06f 0202 	mvn.w	r2, #2
 8006010:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f8ee 	bl	8006208 <HAL_TIM_IC_CaptureCallback>
 800602c:	e005      	b.n	800603a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f8e0 	bl	80061f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f8f1 	bl	800621c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f003 0304 	and.w	r3, r3, #4
 800604a:	2b04      	cmp	r3, #4
 800604c:	d122      	bne.n	8006094 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	2b04      	cmp	r3, #4
 800605a:	d11b      	bne.n	8006094 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0204 	mvn.w	r2, #4
 8006064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2202      	movs	r2, #2
 800606a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f8c4 	bl	8006208 <HAL_TIM_IC_CaptureCallback>
 8006080:	e005      	b.n	800608e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f8b6 	bl	80061f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f8c7 	bl	800621c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f003 0308 	and.w	r3, r3, #8
 800609e:	2b08      	cmp	r3, #8
 80060a0:	d122      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	d11b      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0208 	mvn.w	r2, #8
 80060b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2204      	movs	r2, #4
 80060be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	f003 0303 	and.w	r3, r3, #3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d003      	beq.n	80060d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f89a 	bl	8006208 <HAL_TIM_IC_CaptureCallback>
 80060d4:	e005      	b.n	80060e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f88c 	bl	80061f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f89d 	bl	800621c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	f003 0310 	and.w	r3, r3, #16
 80060f2:	2b10      	cmp	r3, #16
 80060f4:	d122      	bne.n	800613c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f003 0310 	and.w	r3, r3, #16
 8006100:	2b10      	cmp	r3, #16
 8006102:	d11b      	bne.n	800613c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f06f 0210 	mvn.w	r2, #16
 800610c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2208      	movs	r2, #8
 8006112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f870 	bl	8006208 <HAL_TIM_IC_CaptureCallback>
 8006128:	e005      	b.n	8006136 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f862 	bl	80061f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f873 	bl	800621c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b01      	cmp	r3, #1
 8006148:	d10e      	bne.n	8006168 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	2b01      	cmp	r3, #1
 8006156:	d107      	bne.n	8006168 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0201 	mvn.w	r2, #1
 8006160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f7fb f97e 	bl	8001464 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006172:	2b80      	cmp	r3, #128	; 0x80
 8006174:	d10e      	bne.n	8006194 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006180:	2b80      	cmp	r3, #128	; 0x80
 8006182:	d107      	bne.n	8006194 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800618c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f902 	bl	8006398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619e:	2b40      	cmp	r3, #64	; 0x40
 80061a0:	d10e      	bne.n	80061c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ac:	2b40      	cmp	r3, #64	; 0x40
 80061ae:	d107      	bne.n	80061c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f838 	bl	8006230 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	f003 0320 	and.w	r3, r3, #32
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d10e      	bne.n	80061ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	f003 0320 	and.w	r3, r3, #32
 80061d8:	2b20      	cmp	r3, #32
 80061da:	d107      	bne.n	80061ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f06f 0220 	mvn.w	r2, #32
 80061e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f8cc 	bl	8006384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061ec:	bf00      	nop
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a40      	ldr	r2, [pc, #256]	; (8006358 <TIM_Base_SetConfig+0x114>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d013      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006262:	d00f      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a3d      	ldr	r2, [pc, #244]	; (800635c <TIM_Base_SetConfig+0x118>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00b      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a3c      	ldr	r2, [pc, #240]	; (8006360 <TIM_Base_SetConfig+0x11c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d007      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a3b      	ldr	r2, [pc, #236]	; (8006364 <TIM_Base_SetConfig+0x120>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d003      	beq.n	8006284 <TIM_Base_SetConfig+0x40>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a3a      	ldr	r2, [pc, #232]	; (8006368 <TIM_Base_SetConfig+0x124>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d108      	bne.n	8006296 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a2f      	ldr	r2, [pc, #188]	; (8006358 <TIM_Base_SetConfig+0x114>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d02b      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a4:	d027      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a2c      	ldr	r2, [pc, #176]	; (800635c <TIM_Base_SetConfig+0x118>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d023      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a2b      	ldr	r2, [pc, #172]	; (8006360 <TIM_Base_SetConfig+0x11c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d01f      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a2a      	ldr	r2, [pc, #168]	; (8006364 <TIM_Base_SetConfig+0x120>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d01b      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a29      	ldr	r2, [pc, #164]	; (8006368 <TIM_Base_SetConfig+0x124>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d017      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a28      	ldr	r2, [pc, #160]	; (800636c <TIM_Base_SetConfig+0x128>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a27      	ldr	r2, [pc, #156]	; (8006370 <TIM_Base_SetConfig+0x12c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00f      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a26      	ldr	r2, [pc, #152]	; (8006374 <TIM_Base_SetConfig+0x130>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00b      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a25      	ldr	r2, [pc, #148]	; (8006378 <TIM_Base_SetConfig+0x134>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d007      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a24      	ldr	r2, [pc, #144]	; (800637c <TIM_Base_SetConfig+0x138>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a23      	ldr	r2, [pc, #140]	; (8006380 <TIM_Base_SetConfig+0x13c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d108      	bne.n	8006308 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a0a      	ldr	r2, [pc, #40]	; (8006358 <TIM_Base_SetConfig+0x114>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d003      	beq.n	800633c <TIM_Base_SetConfig+0xf8>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a0c      	ldr	r2, [pc, #48]	; (8006368 <TIM_Base_SetConfig+0x124>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d103      	bne.n	8006344 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	691a      	ldr	r2, [r3, #16]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	615a      	str	r2, [r3, #20]
}
 800634a:	bf00      	nop
 800634c:	3714      	adds	r7, #20
 800634e:	46bd      	mov	sp, r7
 8006350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	40010000 	.word	0x40010000
 800635c:	40000400 	.word	0x40000400
 8006360:	40000800 	.word	0x40000800
 8006364:	40000c00 	.word	0x40000c00
 8006368:	40010400 	.word	0x40010400
 800636c:	40014000 	.word	0x40014000
 8006370:	40014400 	.word	0x40014400
 8006374:	40014800 	.word	0x40014800
 8006378:	40001800 	.word	0x40001800
 800637c:	40001c00 	.word	0x40001c00
 8006380:	40002000 	.word	0x40002000

08006384 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e03f      	b.n	800643e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d106      	bne.n	80063d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7fb f904 	bl	80015e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2224      	movs	r2, #36	; 0x24
 80063dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f929 	bl	8006648 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006404:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	695a      	ldr	r2, [r3, #20]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006414:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68da      	ldr	r2, [r3, #12]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006424:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2220      	movs	r2, #32
 8006438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b08a      	sub	sp, #40	; 0x28
 800644a:	af02      	add	r7, sp, #8
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	603b      	str	r3, [r7, #0]
 8006452:	4613      	mov	r3, r2
 8006454:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b20      	cmp	r3, #32
 8006464:	d17c      	bne.n	8006560 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <HAL_UART_Transmit+0x2c>
 800646c:	88fb      	ldrh	r3, [r7, #6]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e075      	b.n	8006562 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800647c:	2b01      	cmp	r3, #1
 800647e:	d101      	bne.n	8006484 <HAL_UART_Transmit+0x3e>
 8006480:	2302      	movs	r3, #2
 8006482:	e06e      	b.n	8006562 <HAL_UART_Transmit+0x11c>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2221      	movs	r2, #33	; 0x21
 8006496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800649a:	f7fc fbbb 	bl	8002c14 <HAL_GetTick>
 800649e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	88fa      	ldrh	r2, [r7, #6]
 80064a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	88fa      	ldrh	r2, [r7, #6]
 80064aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064b4:	d108      	bne.n	80064c8 <HAL_UART_Transmit+0x82>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d104      	bne.n	80064c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80064be:	2300      	movs	r3, #0
 80064c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	e003      	b.n	80064d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064cc:	2300      	movs	r3, #0
 80064ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80064d8:	e02a      	b.n	8006530 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2200      	movs	r2, #0
 80064e2:	2180      	movs	r1, #128	; 0x80
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 f840 	bl	800656a <UART_WaitOnFlagUntilTimeout>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e036      	b.n	8006562 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d10b      	bne.n	8006512 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	461a      	mov	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006508:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	3302      	adds	r3, #2
 800650e:	61bb      	str	r3, [r7, #24]
 8006510:	e007      	b.n	8006522 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	781a      	ldrb	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	3301      	adds	r3, #1
 8006520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006526:	b29b      	uxth	r3, r3
 8006528:	3b01      	subs	r3, #1
 800652a:	b29a      	uxth	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1cf      	bne.n	80064da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	9300      	str	r3, [sp, #0]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2200      	movs	r2, #0
 8006542:	2140      	movs	r1, #64	; 0x40
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f810 	bl	800656a <UART_WaitOnFlagUntilTimeout>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006550:	2303      	movs	r3, #3
 8006552:	e006      	b.n	8006562 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2220      	movs	r2, #32
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800655c:	2300      	movs	r3, #0
 800655e:	e000      	b.n	8006562 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006560:	2302      	movs	r3, #2
  }
}
 8006562:	4618      	mov	r0, r3
 8006564:	3720      	adds	r7, #32
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b090      	sub	sp, #64	; 0x40
 800656e:	af00      	add	r7, sp, #0
 8006570:	60f8      	str	r0, [r7, #12]
 8006572:	60b9      	str	r1, [r7, #8]
 8006574:	603b      	str	r3, [r7, #0]
 8006576:	4613      	mov	r3, r2
 8006578:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800657a:	e050      	b.n	800661e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800657c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800657e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006582:	d04c      	beq.n	800661e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006584:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006586:	2b00      	cmp	r3, #0
 8006588:	d007      	beq.n	800659a <UART_WaitOnFlagUntilTimeout+0x30>
 800658a:	f7fc fb43 	bl	8002c14 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006596:	429a      	cmp	r2, r3
 8006598:	d241      	bcs.n	800661e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	330c      	adds	r3, #12
 80065a0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	330c      	adds	r3, #12
 80065b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065ba:	637a      	str	r2, [r7, #52]	; 0x34
 80065bc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80065c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e5      	bne.n	800659a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3314      	adds	r3, #20
 80065d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	e853 3f00 	ldrex	r3, [r3]
 80065dc:	613b      	str	r3, [r7, #16]
   return(result);
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f023 0301 	bic.w	r3, r3, #1
 80065e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3314      	adds	r3, #20
 80065ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065ee:	623a      	str	r2, [r7, #32]
 80065f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	69f9      	ldr	r1, [r7, #28]
 80065f4:	6a3a      	ldr	r2, [r7, #32]
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e5      	bne.n	80065ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2220      	movs	r2, #32
 8006606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2220      	movs	r2, #32
 800660e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e00f      	b.n	800663e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	4013      	ands	r3, r2
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	429a      	cmp	r2, r3
 800662c:	bf0c      	ite	eq
 800662e:	2301      	moveq	r3, #1
 8006630:	2300      	movne	r3, #0
 8006632:	b2db      	uxtb	r3, r3
 8006634:	461a      	mov	r2, r3
 8006636:	79fb      	ldrb	r3, [r7, #7]
 8006638:	429a      	cmp	r2, r3
 800663a:	d09f      	beq.n	800657c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800663c:	2300      	movs	r3, #0
}
 800663e:	4618      	mov	r0, r3
 8006640:	3740      	adds	r7, #64	; 0x40
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
	...

08006648 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800664c:	b09f      	sub	sp, #124	; 0x7c
 800664e:	af00      	add	r7, sp, #0
 8006650:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800665c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800665e:	68d9      	ldr	r1, [r3, #12]
 8006660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	ea40 0301 	orr.w	r3, r0, r1
 8006668:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800666a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666c:	689a      	ldr	r2, [r3, #8]
 800666e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	431a      	orrs	r2, r3
 8006674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	431a      	orrs	r2, r3
 800667a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	4313      	orrs	r3, r2
 8006680:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800668c:	f021 010c 	bic.w	r1, r1, #12
 8006690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006696:	430b      	orrs	r3, r1
 8006698:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800669a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a6:	6999      	ldr	r1, [r3, #24]
 80066a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	ea40 0301 	orr.w	r3, r0, r1
 80066b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	4bc5      	ldr	r3, [pc, #788]	; (80069cc <UART_SetConfig+0x384>)
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d004      	beq.n	80066c6 <UART_SetConfig+0x7e>
 80066bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	4bc3      	ldr	r3, [pc, #780]	; (80069d0 <UART_SetConfig+0x388>)
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d103      	bne.n	80066ce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066c6:	f7fd ffbb 	bl	8004640 <HAL_RCC_GetPCLK2Freq>
 80066ca:	6778      	str	r0, [r7, #116]	; 0x74
 80066cc:	e002      	b.n	80066d4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066ce:	f7fd ffa3 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 80066d2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d6:	69db      	ldr	r3, [r3, #28]
 80066d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066dc:	f040 80b6 	bne.w	800684c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066e2:	461c      	mov	r4, r3
 80066e4:	f04f 0500 	mov.w	r5, #0
 80066e8:	4622      	mov	r2, r4
 80066ea:	462b      	mov	r3, r5
 80066ec:	1891      	adds	r1, r2, r2
 80066ee:	6439      	str	r1, [r7, #64]	; 0x40
 80066f0:	415b      	adcs	r3, r3
 80066f2:	647b      	str	r3, [r7, #68]	; 0x44
 80066f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80066f8:	1912      	adds	r2, r2, r4
 80066fa:	eb45 0303 	adc.w	r3, r5, r3
 80066fe:	f04f 0000 	mov.w	r0, #0
 8006702:	f04f 0100 	mov.w	r1, #0
 8006706:	00d9      	lsls	r1, r3, #3
 8006708:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800670c:	00d0      	lsls	r0, r2, #3
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	1911      	adds	r1, r2, r4
 8006714:	6639      	str	r1, [r7, #96]	; 0x60
 8006716:	416b      	adcs	r3, r5
 8006718:	667b      	str	r3, [r7, #100]	; 0x64
 800671a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	461a      	mov	r2, r3
 8006720:	f04f 0300 	mov.w	r3, #0
 8006724:	1891      	adds	r1, r2, r2
 8006726:	63b9      	str	r1, [r7, #56]	; 0x38
 8006728:	415b      	adcs	r3, r3
 800672a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800672c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006730:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006734:	f7fa fa58 	bl	8000be8 <__aeabi_uldivmod>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	4ba5      	ldr	r3, [pc, #660]	; (80069d4 <UART_SetConfig+0x38c>)
 800673e:	fba3 2302 	umull	r2, r3, r3, r2
 8006742:	095b      	lsrs	r3, r3, #5
 8006744:	011e      	lsls	r6, r3, #4
 8006746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006748:	461c      	mov	r4, r3
 800674a:	f04f 0500 	mov.w	r5, #0
 800674e:	4622      	mov	r2, r4
 8006750:	462b      	mov	r3, r5
 8006752:	1891      	adds	r1, r2, r2
 8006754:	6339      	str	r1, [r7, #48]	; 0x30
 8006756:	415b      	adcs	r3, r3
 8006758:	637b      	str	r3, [r7, #52]	; 0x34
 800675a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800675e:	1912      	adds	r2, r2, r4
 8006760:	eb45 0303 	adc.w	r3, r5, r3
 8006764:	f04f 0000 	mov.w	r0, #0
 8006768:	f04f 0100 	mov.w	r1, #0
 800676c:	00d9      	lsls	r1, r3, #3
 800676e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006772:	00d0      	lsls	r0, r2, #3
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	1911      	adds	r1, r2, r4
 800677a:	65b9      	str	r1, [r7, #88]	; 0x58
 800677c:	416b      	adcs	r3, r5
 800677e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	461a      	mov	r2, r3
 8006786:	f04f 0300 	mov.w	r3, #0
 800678a:	1891      	adds	r1, r2, r2
 800678c:	62b9      	str	r1, [r7, #40]	; 0x28
 800678e:	415b      	adcs	r3, r3
 8006790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006792:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006796:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800679a:	f7fa fa25 	bl	8000be8 <__aeabi_uldivmod>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	4b8c      	ldr	r3, [pc, #560]	; (80069d4 <UART_SetConfig+0x38c>)
 80067a4:	fba3 1302 	umull	r1, r3, r3, r2
 80067a8:	095b      	lsrs	r3, r3, #5
 80067aa:	2164      	movs	r1, #100	; 0x64
 80067ac:	fb01 f303 	mul.w	r3, r1, r3
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	3332      	adds	r3, #50	; 0x32
 80067b6:	4a87      	ldr	r2, [pc, #540]	; (80069d4 <UART_SetConfig+0x38c>)
 80067b8:	fba2 2303 	umull	r2, r3, r2, r3
 80067bc:	095b      	lsrs	r3, r3, #5
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067c4:	441e      	add	r6, r3
 80067c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067c8:	4618      	mov	r0, r3
 80067ca:	f04f 0100 	mov.w	r1, #0
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	1894      	adds	r4, r2, r2
 80067d4:	623c      	str	r4, [r7, #32]
 80067d6:	415b      	adcs	r3, r3
 80067d8:	627b      	str	r3, [r7, #36]	; 0x24
 80067da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067de:	1812      	adds	r2, r2, r0
 80067e0:	eb41 0303 	adc.w	r3, r1, r3
 80067e4:	f04f 0400 	mov.w	r4, #0
 80067e8:	f04f 0500 	mov.w	r5, #0
 80067ec:	00dd      	lsls	r5, r3, #3
 80067ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067f2:	00d4      	lsls	r4, r2, #3
 80067f4:	4622      	mov	r2, r4
 80067f6:	462b      	mov	r3, r5
 80067f8:	1814      	adds	r4, r2, r0
 80067fa:	653c      	str	r4, [r7, #80]	; 0x50
 80067fc:	414b      	adcs	r3, r1
 80067fe:	657b      	str	r3, [r7, #84]	; 0x54
 8006800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	461a      	mov	r2, r3
 8006806:	f04f 0300 	mov.w	r3, #0
 800680a:	1891      	adds	r1, r2, r2
 800680c:	61b9      	str	r1, [r7, #24]
 800680e:	415b      	adcs	r3, r3
 8006810:	61fb      	str	r3, [r7, #28]
 8006812:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006816:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800681a:	f7fa f9e5 	bl	8000be8 <__aeabi_uldivmod>
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	4b6c      	ldr	r3, [pc, #432]	; (80069d4 <UART_SetConfig+0x38c>)
 8006824:	fba3 1302 	umull	r1, r3, r3, r2
 8006828:	095b      	lsrs	r3, r3, #5
 800682a:	2164      	movs	r1, #100	; 0x64
 800682c:	fb01 f303 	mul.w	r3, r1, r3
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	3332      	adds	r3, #50	; 0x32
 8006836:	4a67      	ldr	r2, [pc, #412]	; (80069d4 <UART_SetConfig+0x38c>)
 8006838:	fba2 2303 	umull	r2, r3, r2, r3
 800683c:	095b      	lsrs	r3, r3, #5
 800683e:	f003 0207 	and.w	r2, r3, #7
 8006842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4432      	add	r2, r6
 8006848:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800684a:	e0b9      	b.n	80069c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800684c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800684e:	461c      	mov	r4, r3
 8006850:	f04f 0500 	mov.w	r5, #0
 8006854:	4622      	mov	r2, r4
 8006856:	462b      	mov	r3, r5
 8006858:	1891      	adds	r1, r2, r2
 800685a:	6139      	str	r1, [r7, #16]
 800685c:	415b      	adcs	r3, r3
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006864:	1912      	adds	r2, r2, r4
 8006866:	eb45 0303 	adc.w	r3, r5, r3
 800686a:	f04f 0000 	mov.w	r0, #0
 800686e:	f04f 0100 	mov.w	r1, #0
 8006872:	00d9      	lsls	r1, r3, #3
 8006874:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006878:	00d0      	lsls	r0, r2, #3
 800687a:	4602      	mov	r2, r0
 800687c:	460b      	mov	r3, r1
 800687e:	eb12 0804 	adds.w	r8, r2, r4
 8006882:	eb43 0905 	adc.w	r9, r3, r5
 8006886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	4618      	mov	r0, r3
 800688c:	f04f 0100 	mov.w	r1, #0
 8006890:	f04f 0200 	mov.w	r2, #0
 8006894:	f04f 0300 	mov.w	r3, #0
 8006898:	008b      	lsls	r3, r1, #2
 800689a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800689e:	0082      	lsls	r2, r0, #2
 80068a0:	4640      	mov	r0, r8
 80068a2:	4649      	mov	r1, r9
 80068a4:	f7fa f9a0 	bl	8000be8 <__aeabi_uldivmod>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	4b49      	ldr	r3, [pc, #292]	; (80069d4 <UART_SetConfig+0x38c>)
 80068ae:	fba3 2302 	umull	r2, r3, r3, r2
 80068b2:	095b      	lsrs	r3, r3, #5
 80068b4:	011e      	lsls	r6, r3, #4
 80068b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068b8:	4618      	mov	r0, r3
 80068ba:	f04f 0100 	mov.w	r1, #0
 80068be:	4602      	mov	r2, r0
 80068c0:	460b      	mov	r3, r1
 80068c2:	1894      	adds	r4, r2, r2
 80068c4:	60bc      	str	r4, [r7, #8]
 80068c6:	415b      	adcs	r3, r3
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068ce:	1812      	adds	r2, r2, r0
 80068d0:	eb41 0303 	adc.w	r3, r1, r3
 80068d4:	f04f 0400 	mov.w	r4, #0
 80068d8:	f04f 0500 	mov.w	r5, #0
 80068dc:	00dd      	lsls	r5, r3, #3
 80068de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80068e2:	00d4      	lsls	r4, r2, #3
 80068e4:	4622      	mov	r2, r4
 80068e6:	462b      	mov	r3, r5
 80068e8:	1814      	adds	r4, r2, r0
 80068ea:	64bc      	str	r4, [r7, #72]	; 0x48
 80068ec:	414b      	adcs	r3, r1
 80068ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f04f 0100 	mov.w	r1, #0
 80068fa:	f04f 0200 	mov.w	r2, #0
 80068fe:	f04f 0300 	mov.w	r3, #0
 8006902:	008b      	lsls	r3, r1, #2
 8006904:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006908:	0082      	lsls	r2, r0, #2
 800690a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800690e:	f7fa f96b 	bl	8000be8 <__aeabi_uldivmod>
 8006912:	4602      	mov	r2, r0
 8006914:	460b      	mov	r3, r1
 8006916:	4b2f      	ldr	r3, [pc, #188]	; (80069d4 <UART_SetConfig+0x38c>)
 8006918:	fba3 1302 	umull	r1, r3, r3, r2
 800691c:	095b      	lsrs	r3, r3, #5
 800691e:	2164      	movs	r1, #100	; 0x64
 8006920:	fb01 f303 	mul.w	r3, r1, r3
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	011b      	lsls	r3, r3, #4
 8006928:	3332      	adds	r3, #50	; 0x32
 800692a:	4a2a      	ldr	r2, [pc, #168]	; (80069d4 <UART_SetConfig+0x38c>)
 800692c:	fba2 2303 	umull	r2, r3, r2, r3
 8006930:	095b      	lsrs	r3, r3, #5
 8006932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006936:	441e      	add	r6, r3
 8006938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800693a:	4618      	mov	r0, r3
 800693c:	f04f 0100 	mov.w	r1, #0
 8006940:	4602      	mov	r2, r0
 8006942:	460b      	mov	r3, r1
 8006944:	1894      	adds	r4, r2, r2
 8006946:	603c      	str	r4, [r7, #0]
 8006948:	415b      	adcs	r3, r3
 800694a:	607b      	str	r3, [r7, #4]
 800694c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006950:	1812      	adds	r2, r2, r0
 8006952:	eb41 0303 	adc.w	r3, r1, r3
 8006956:	f04f 0400 	mov.w	r4, #0
 800695a:	f04f 0500 	mov.w	r5, #0
 800695e:	00dd      	lsls	r5, r3, #3
 8006960:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006964:	00d4      	lsls	r4, r2, #3
 8006966:	4622      	mov	r2, r4
 8006968:	462b      	mov	r3, r5
 800696a:	eb12 0a00 	adds.w	sl, r2, r0
 800696e:	eb43 0b01 	adc.w	fp, r3, r1
 8006972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	4618      	mov	r0, r3
 8006978:	f04f 0100 	mov.w	r1, #0
 800697c:	f04f 0200 	mov.w	r2, #0
 8006980:	f04f 0300 	mov.w	r3, #0
 8006984:	008b      	lsls	r3, r1, #2
 8006986:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800698a:	0082      	lsls	r2, r0, #2
 800698c:	4650      	mov	r0, sl
 800698e:	4659      	mov	r1, fp
 8006990:	f7fa f92a 	bl	8000be8 <__aeabi_uldivmod>
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	4b0e      	ldr	r3, [pc, #56]	; (80069d4 <UART_SetConfig+0x38c>)
 800699a:	fba3 1302 	umull	r1, r3, r3, r2
 800699e:	095b      	lsrs	r3, r3, #5
 80069a0:	2164      	movs	r1, #100	; 0x64
 80069a2:	fb01 f303 	mul.w	r3, r1, r3
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	011b      	lsls	r3, r3, #4
 80069aa:	3332      	adds	r3, #50	; 0x32
 80069ac:	4a09      	ldr	r2, [pc, #36]	; (80069d4 <UART_SetConfig+0x38c>)
 80069ae:	fba2 2303 	umull	r2, r3, r2, r3
 80069b2:	095b      	lsrs	r3, r3, #5
 80069b4:	f003 020f 	and.w	r2, r3, #15
 80069b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4432      	add	r2, r6
 80069be:	609a      	str	r2, [r3, #8]
}
 80069c0:	bf00      	nop
 80069c2:	377c      	adds	r7, #124	; 0x7c
 80069c4:	46bd      	mov	sp, r7
 80069c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ca:	bf00      	nop
 80069cc:	40011000 	.word	0x40011000
 80069d0:	40011400 	.word	0x40011400
 80069d4:	51eb851f 	.word	0x51eb851f

080069d8 <__NVIC_SetPriority>:
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	4603      	mov	r3, r0
 80069e0:	6039      	str	r1, [r7, #0]
 80069e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	db0a      	blt.n	8006a02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	490c      	ldr	r1, [pc, #48]	; (8006a24 <__NVIC_SetPriority+0x4c>)
 80069f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f6:	0112      	lsls	r2, r2, #4
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	440b      	add	r3, r1
 80069fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006a00:	e00a      	b.n	8006a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	4908      	ldr	r1, [pc, #32]	; (8006a28 <__NVIC_SetPriority+0x50>)
 8006a08:	79fb      	ldrb	r3, [r7, #7]
 8006a0a:	f003 030f 	and.w	r3, r3, #15
 8006a0e:	3b04      	subs	r3, #4
 8006a10:	0112      	lsls	r2, r2, #4
 8006a12:	b2d2      	uxtb	r2, r2
 8006a14:	440b      	add	r3, r1
 8006a16:	761a      	strb	r2, [r3, #24]
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	e000e100 	.word	0xe000e100
 8006a28:	e000ed00 	.word	0xe000ed00

08006a2c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006a30:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <SysTick_Handler+0x1c>)
 8006a32:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006a34:	f001 fd42 	bl	80084bc <xTaskGetSchedulerState>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d001      	beq.n	8006a42 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006a3e:	f002 fb2b 	bl	8009098 <xPortSysTickHandler>
  }
}
 8006a42:	bf00      	nop
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	e000e010 	.word	0xe000e010

08006a4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006a50:	2100      	movs	r1, #0
 8006a52:	f06f 0004 	mvn.w	r0, #4
 8006a56:	f7ff ffbf 	bl	80069d8 <__NVIC_SetPriority>
#endif
}
 8006a5a:	bf00      	nop
 8006a5c:	bd80      	pop	{r7, pc}
	...

08006a60 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a66:	f3ef 8305 	mrs	r3, IPSR
 8006a6a:	603b      	str	r3, [r7, #0]
  return(result);
 8006a6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006a72:	f06f 0305 	mvn.w	r3, #5
 8006a76:	607b      	str	r3, [r7, #4]
 8006a78:	e00c      	b.n	8006a94 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006a7a:	4b0a      	ldr	r3, [pc, #40]	; (8006aa4 <osKernelInitialize+0x44>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d105      	bne.n	8006a8e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006a82:	4b08      	ldr	r3, [pc, #32]	; (8006aa4 <osKernelInitialize+0x44>)
 8006a84:	2201      	movs	r2, #1
 8006a86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	607b      	str	r3, [r7, #4]
 8006a8c:	e002      	b.n	8006a94 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006a94:	687b      	ldr	r3, [r7, #4]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	2000088c 	.word	0x2000088c

08006aa8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aae:	f3ef 8305 	mrs	r3, IPSR
 8006ab2:	603b      	str	r3, [r7, #0]
  return(result);
 8006ab4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006aba:	f06f 0305 	mvn.w	r3, #5
 8006abe:	607b      	str	r3, [r7, #4]
 8006ac0:	e010      	b.n	8006ae4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006ac2:	4b0b      	ldr	r3, [pc, #44]	; (8006af0 <osKernelStart+0x48>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d109      	bne.n	8006ade <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006aca:	f7ff ffbf 	bl	8006a4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006ace:	4b08      	ldr	r3, [pc, #32]	; (8006af0 <osKernelStart+0x48>)
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006ad4:	f001 f886 	bl	8007be4 <vTaskStartScheduler>
      stat = osOK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	607b      	str	r3, [r7, #4]
 8006adc:	e002      	b.n	8006ae4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006ade:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ae4:	687b      	ldr	r3, [r7, #4]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	2000088c 	.word	0x2000088c

08006af4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08e      	sub	sp, #56	; 0x38
 8006af8:	af04      	add	r7, sp, #16
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b04:	f3ef 8305 	mrs	r3, IPSR
 8006b08:	617b      	str	r3, [r7, #20]
  return(result);
 8006b0a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d17e      	bne.n	8006c0e <osThreadNew+0x11a>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d07b      	beq.n	8006c0e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006b16:	2380      	movs	r3, #128	; 0x80
 8006b18:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006b1a:	2318      	movs	r3, #24
 8006b1c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006b22:	f04f 33ff 	mov.w	r3, #4294967295
 8006b26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d045      	beq.n	8006bba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d002      	beq.n	8006b3c <osThreadNew+0x48>
        name = attr->name;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d008      	beq.n	8006b62 <osThreadNew+0x6e>
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	2b38      	cmp	r3, #56	; 0x38
 8006b54:	d805      	bhi.n	8006b62 <osThreadNew+0x6e>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <osThreadNew+0x72>
        return (NULL);
 8006b62:	2300      	movs	r3, #0
 8006b64:	e054      	b.n	8006c10 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	089b      	lsrs	r3, r3, #2
 8006b74:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00e      	beq.n	8006b9c <osThreadNew+0xa8>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	2bbb      	cmp	r3, #187	; 0xbb
 8006b84:	d90a      	bls.n	8006b9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d006      	beq.n	8006b9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <osThreadNew+0xa8>
        mem = 1;
 8006b96:	2301      	movs	r3, #1
 8006b98:	61bb      	str	r3, [r7, #24]
 8006b9a:	e010      	b.n	8006bbe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d10c      	bne.n	8006bbe <osThreadNew+0xca>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d108      	bne.n	8006bbe <osThreadNew+0xca>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d104      	bne.n	8006bbe <osThreadNew+0xca>
          mem = 0;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	61bb      	str	r3, [r7, #24]
 8006bb8:	e001      	b.n	8006bbe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d110      	bne.n	8006be6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006bcc:	9202      	str	r2, [sp, #8]
 8006bce:	9301      	str	r3, [sp, #4]
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	9300      	str	r3, [sp, #0]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	6a3a      	ldr	r2, [r7, #32]
 8006bd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 fe16 	bl	800780c <xTaskCreateStatic>
 8006be0:	4603      	mov	r3, r0
 8006be2:	613b      	str	r3, [r7, #16]
 8006be4:	e013      	b.n	8006c0e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d110      	bne.n	8006c0e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	f107 0310 	add.w	r3, r7, #16
 8006bf4:	9301      	str	r3, [sp, #4]
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f000 fe61 	bl	80078c6 <xTaskCreate>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d001      	beq.n	8006c0e <osThreadNew+0x11a>
            hTask = NULL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006c0e:	693b      	ldr	r3, [r7, #16]
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3728      	adds	r7, #40	; 0x28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8006c1e:	f001 fc3d 	bl	800849c <xTaskGetCurrentTaskHandle>
 8006c22:	6078      	str	r0, [r7, #4]

  return (id);
 8006c24:	687b      	ldr	r3, [r7, #4]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b084      	sub	sp, #16
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c36:	f3ef 8305 	mrs	r3, IPSR
 8006c3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <osDelay+0x1c>
    stat = osErrorISR;
 8006c42:	f06f 0305 	mvn.w	r3, #5
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	e007      	b.n	8006c5a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <osDelay+0x2c>
      vTaskDelay(ticks);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 ff91 	bl	8007b7c <vTaskDelay>
    }
  }

  return (stat);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3710      	adds	r7, #16
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4a07      	ldr	r2, [pc, #28]	; (8006c90 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	4a06      	ldr	r2, [pc, #24]	; (8006c94 <vApplicationGetIdleTaskMemory+0x30>)
 8006c7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2280      	movs	r2, #128	; 0x80
 8006c80:	601a      	str	r2, [r3, #0]
}
 8006c82:	bf00      	nop
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop
 8006c90:	20000890 	.word	0x20000890
 8006c94:	2000094c 	.word	0x2000094c

08006c98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4a07      	ldr	r2, [pc, #28]	; (8006cc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006ca8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	4a06      	ldr	r2, [pc, #24]	; (8006cc8 <vApplicationGetTimerTaskMemory+0x30>)
 8006cae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cb6:	601a      	str	r2, [r3, #0]
}
 8006cb8:	bf00      	nop
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	20000b4c 	.word	0x20000b4c
 8006cc8:	20000c08 	.word	0x20000c08

08006ccc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f103 0208 	add.w	r2, r3, #8
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f103 0208 	add.w	r2, r3, #8
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f103 0208 	add.w	r2, r3, #8
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d1a:	bf00      	nop
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d26:	b480      	push	{r7}
 8006d28:	b085      	sub	sp, #20
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
 8006d2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	687a      	ldr	r2, [r7, #4]
 8006d56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	1c5a      	adds	r2, r3, #1
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	601a      	str	r2, [r3, #0]
}
 8006d62:	bf00      	nop
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b085      	sub	sp, #20
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d84:	d103      	bne.n	8006d8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	e00c      	b.n	8006da8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3308      	adds	r3, #8
 8006d92:	60fb      	str	r3, [r7, #12]
 8006d94:	e002      	b.n	8006d9c <vListInsert+0x2e>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d2f6      	bcs.n	8006d96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	601a      	str	r2, [r3, #0]
}
 8006dd4:	bf00      	nop
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	6892      	ldr	r2, [r2, #8]
 8006df6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	6852      	ldr	r2, [r2, #4]
 8006e00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d103      	bne.n	8006e14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	1e5a      	subs	r2, r3, #1
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10a      	bne.n	8006e5e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e5a:	bf00      	nop
 8006e5c:	e7fe      	b.n	8006e5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e5e:	f002 f889 	bl	8008f74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6a:	68f9      	ldr	r1, [r7, #12]
 8006e6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e6e:	fb01 f303 	mul.w	r3, r1, r3
 8006e72:	441a      	add	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	68f9      	ldr	r1, [r7, #12]
 8006e92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e94:	fb01 f303 	mul.w	r3, r1, r3
 8006e98:	441a      	add	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	22ff      	movs	r2, #255	; 0xff
 8006ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	22ff      	movs	r2, #255	; 0xff
 8006eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d114      	bne.n	8006ede <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01a      	beq.n	8006ef2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3310      	adds	r3, #16
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f001 f929 	bl	8008118 <xTaskRemoveFromEventList>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d012      	beq.n	8006ef2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ecc:	4b0c      	ldr	r3, [pc, #48]	; (8006f00 <xQueueGenericReset+0xcc>)
 8006ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	e009      	b.n	8006ef2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3310      	adds	r3, #16
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7ff fef2 	bl	8006ccc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3324      	adds	r3, #36	; 0x24
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7ff feed 	bl	8006ccc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ef2:	f002 f86f 	bl	8008fd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ef6:	2301      	movs	r3, #1
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	e000ed04 	.word	0xe000ed04

08006f04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b08e      	sub	sp, #56	; 0x38
 8006f08:	af02      	add	r7, sp, #8
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
 8006f10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10a      	bne.n	8006f2e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1c:	f383 8811 	msr	BASEPRI, r3
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f2a:	bf00      	nop
 8006f2c:	e7fe      	b.n	8006f2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10a      	bne.n	8006f4a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f38:	f383 8811 	msr	BASEPRI, r3
 8006f3c:	f3bf 8f6f 	isb	sy
 8006f40:	f3bf 8f4f 	dsb	sy
 8006f44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f46:	bf00      	nop
 8006f48:	e7fe      	b.n	8006f48 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d002      	beq.n	8006f56 <xQueueGenericCreateStatic+0x52>
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d001      	beq.n	8006f5a <xQueueGenericCreateStatic+0x56>
 8006f56:	2301      	movs	r3, #1
 8006f58:	e000      	b.n	8006f5c <xQueueGenericCreateStatic+0x58>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10a      	bne.n	8006f76 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	623b      	str	r3, [r7, #32]
}
 8006f72:	bf00      	nop
 8006f74:	e7fe      	b.n	8006f74 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d102      	bne.n	8006f82 <xQueueGenericCreateStatic+0x7e>
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <xQueueGenericCreateStatic+0x82>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e000      	b.n	8006f88 <xQueueGenericCreateStatic+0x84>
 8006f86:	2300      	movs	r3, #0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10a      	bne.n	8006fa2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f90:	f383 8811 	msr	BASEPRI, r3
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	f3bf 8f4f 	dsb	sy
 8006f9c:	61fb      	str	r3, [r7, #28]
}
 8006f9e:	bf00      	nop
 8006fa0:	e7fe      	b.n	8006fa0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006fa2:	2350      	movs	r3, #80	; 0x50
 8006fa4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b50      	cmp	r3, #80	; 0x50
 8006faa:	d00a      	beq.n	8006fc2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	61bb      	str	r3, [r7, #24]
}
 8006fbe:	bf00      	nop
 8006fc0:	e7fe      	b.n	8006fc0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006fc2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00d      	beq.n	8006fea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fd6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	68b9      	ldr	r1, [r7, #8]
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 f805 	bl	8006ff4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3730      	adds	r7, #48	; 0x30
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
 8007000:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d103      	bne.n	8007010 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	69ba      	ldr	r2, [r7, #24]
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	e002      	b.n	8007016 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007016:	69bb      	ldr	r3, [r7, #24]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007022:	2101      	movs	r1, #1
 8007024:	69b8      	ldr	r0, [r7, #24]
 8007026:	f7ff ff05 	bl	8006e34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	78fa      	ldrb	r2, [r7, #3]
 800702e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007032:	bf00      	nop
 8007034:	3710      	adds	r7, #16
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
	...

0800703c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b08e      	sub	sp, #56	; 0x38
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
 8007048:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800704a:	2300      	movs	r3, #0
 800704c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007054:	2b00      	cmp	r3, #0
 8007056:	d10a      	bne.n	800706e <xQueueGenericSend+0x32>
	__asm volatile
 8007058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705c:	f383 8811 	msr	BASEPRI, r3
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800706a:	bf00      	nop
 800706c:	e7fe      	b.n	800706c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d103      	bne.n	800707c <xQueueGenericSend+0x40>
 8007074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007078:	2b00      	cmp	r3, #0
 800707a:	d101      	bne.n	8007080 <xQueueGenericSend+0x44>
 800707c:	2301      	movs	r3, #1
 800707e:	e000      	b.n	8007082 <xQueueGenericSend+0x46>
 8007080:	2300      	movs	r3, #0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10a      	bne.n	800709c <xQueueGenericSend+0x60>
	__asm volatile
 8007086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007098:	bf00      	nop
 800709a:	e7fe      	b.n	800709a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d103      	bne.n	80070aa <xQueueGenericSend+0x6e>
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d101      	bne.n	80070ae <xQueueGenericSend+0x72>
 80070aa:	2301      	movs	r3, #1
 80070ac:	e000      	b.n	80070b0 <xQueueGenericSend+0x74>
 80070ae:	2300      	movs	r3, #0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10a      	bne.n	80070ca <xQueueGenericSend+0x8e>
	__asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	623b      	str	r3, [r7, #32]
}
 80070c6:	bf00      	nop
 80070c8:	e7fe      	b.n	80070c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070ca:	f001 f9f7 	bl	80084bc <xTaskGetSchedulerState>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d102      	bne.n	80070da <xQueueGenericSend+0x9e>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d101      	bne.n	80070de <xQueueGenericSend+0xa2>
 80070da:	2301      	movs	r3, #1
 80070dc:	e000      	b.n	80070e0 <xQueueGenericSend+0xa4>
 80070de:	2300      	movs	r3, #0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10a      	bne.n	80070fa <xQueueGenericSend+0xbe>
	__asm volatile
 80070e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e8:	f383 8811 	msr	BASEPRI, r3
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f3bf 8f4f 	dsb	sy
 80070f4:	61fb      	str	r3, [r7, #28]
}
 80070f6:	bf00      	nop
 80070f8:	e7fe      	b.n	80070f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070fa:	f001 ff3b 	bl	8008f74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007100:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007106:	429a      	cmp	r2, r3
 8007108:	d302      	bcc.n	8007110 <xQueueGenericSend+0xd4>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b02      	cmp	r3, #2
 800710e:	d129      	bne.n	8007164 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	68b9      	ldr	r1, [r7, #8]
 8007114:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007116:	f000 fa0b 	bl	8007530 <prvCopyDataToQueue>
 800711a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007120:	2b00      	cmp	r3, #0
 8007122:	d010      	beq.n	8007146 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007126:	3324      	adds	r3, #36	; 0x24
 8007128:	4618      	mov	r0, r3
 800712a:	f000 fff5 	bl	8008118 <xTaskRemoveFromEventList>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d013      	beq.n	800715c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007134:	4b3f      	ldr	r3, [pc, #252]	; (8007234 <xQueueGenericSend+0x1f8>)
 8007136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800713a:	601a      	str	r2, [r3, #0]
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	f3bf 8f6f 	isb	sy
 8007144:	e00a      	b.n	800715c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007148:	2b00      	cmp	r3, #0
 800714a:	d007      	beq.n	800715c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800714c:	4b39      	ldr	r3, [pc, #228]	; (8007234 <xQueueGenericSend+0x1f8>)
 800714e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	f3bf 8f4f 	dsb	sy
 8007158:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800715c:	f001 ff3a 	bl	8008fd4 <vPortExitCritical>
				return pdPASS;
 8007160:	2301      	movs	r3, #1
 8007162:	e063      	b.n	800722c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d103      	bne.n	8007172 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800716a:	f001 ff33 	bl	8008fd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800716e:	2300      	movs	r3, #0
 8007170:	e05c      	b.n	800722c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007174:	2b00      	cmp	r3, #0
 8007176:	d106      	bne.n	8007186 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007178:	f107 0314 	add.w	r3, r7, #20
 800717c:	4618      	mov	r0, r3
 800717e:	f001 f82f 	bl	80081e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007182:	2301      	movs	r3, #1
 8007184:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007186:	f001 ff25 	bl	8008fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800718a:	f000 fd9b 	bl	8007cc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800718e:	f001 fef1 	bl	8008f74 <vPortEnterCritical>
 8007192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007194:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007198:	b25b      	sxtb	r3, r3
 800719a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719e:	d103      	bne.n	80071a8 <xQueueGenericSend+0x16c>
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071ae:	b25b      	sxtb	r3, r3
 80071b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b4:	d103      	bne.n	80071be <xQueueGenericSend+0x182>
 80071b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071be:	f001 ff09 	bl	8008fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071c2:	1d3a      	adds	r2, r7, #4
 80071c4:	f107 0314 	add.w	r3, r7, #20
 80071c8:	4611      	mov	r1, r2
 80071ca:	4618      	mov	r0, r3
 80071cc:	f001 f81e 	bl	800820c <xTaskCheckForTimeOut>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d124      	bne.n	8007220 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80071d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071d8:	f000 faa2 	bl	8007720 <prvIsQueueFull>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d018      	beq.n	8007214 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	3310      	adds	r3, #16
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	4611      	mov	r1, r2
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 ff44 	bl	8008078 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80071f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071f2:	f000 fa2d 	bl	8007650 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80071f6:	f000 fd73 	bl	8007ce0 <xTaskResumeAll>
 80071fa:	4603      	mov	r3, r0
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f47f af7c 	bne.w	80070fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007202:	4b0c      	ldr	r3, [pc, #48]	; (8007234 <xQueueGenericSend+0x1f8>)
 8007204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	f3bf 8f6f 	isb	sy
 8007212:	e772      	b.n	80070fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007216:	f000 fa1b 	bl	8007650 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800721a:	f000 fd61 	bl	8007ce0 <xTaskResumeAll>
 800721e:	e76c      	b.n	80070fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007222:	f000 fa15 	bl	8007650 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007226:	f000 fd5b 	bl	8007ce0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800722a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800722c:	4618      	mov	r0, r3
 800722e:	3738      	adds	r7, #56	; 0x38
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	e000ed04 	.word	0xe000ed04

08007238 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b090      	sub	sp, #64	; 0x40
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
 8007244:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800724a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10a      	bne.n	8007266 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007262:	bf00      	nop
 8007264:	e7fe      	b.n	8007264 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d103      	bne.n	8007274 <xQueueGenericSendFromISR+0x3c>
 800726c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800726e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007270:	2b00      	cmp	r3, #0
 8007272:	d101      	bne.n	8007278 <xQueueGenericSendFromISR+0x40>
 8007274:	2301      	movs	r3, #1
 8007276:	e000      	b.n	800727a <xQueueGenericSendFromISR+0x42>
 8007278:	2300      	movs	r3, #0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10a      	bne.n	8007294 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007290:	bf00      	nop
 8007292:	e7fe      	b.n	8007292 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2b02      	cmp	r3, #2
 8007298:	d103      	bne.n	80072a2 <xQueueGenericSendFromISR+0x6a>
 800729a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d101      	bne.n	80072a6 <xQueueGenericSendFromISR+0x6e>
 80072a2:	2301      	movs	r3, #1
 80072a4:	e000      	b.n	80072a8 <xQueueGenericSendFromISR+0x70>
 80072a6:	2300      	movs	r3, #0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10a      	bne.n	80072c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80072ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b0:	f383 8811 	msr	BASEPRI, r3
 80072b4:	f3bf 8f6f 	isb	sy
 80072b8:	f3bf 8f4f 	dsb	sy
 80072bc:	623b      	str	r3, [r7, #32]
}
 80072be:	bf00      	nop
 80072c0:	e7fe      	b.n	80072c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072c2:	f001 ff39 	bl	8009138 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80072c6:	f3ef 8211 	mrs	r2, BASEPRI
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	61fa      	str	r2, [r7, #28]
 80072dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80072de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d302      	bcc.n	80072f4 <xQueueGenericSendFromISR+0xbc>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d12f      	bne.n	8007354 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80072f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007302:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007304:	683a      	ldr	r2, [r7, #0]
 8007306:	68b9      	ldr	r1, [r7, #8]
 8007308:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800730a:	f000 f911 	bl	8007530 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800730e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007316:	d112      	bne.n	800733e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731c:	2b00      	cmp	r3, #0
 800731e:	d016      	beq.n	800734e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007322:	3324      	adds	r3, #36	; 0x24
 8007324:	4618      	mov	r0, r3
 8007326:	f000 fef7 	bl	8008118 <xTaskRemoveFromEventList>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00e      	beq.n	800734e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00b      	beq.n	800734e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	e007      	b.n	800734e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800733e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007342:	3301      	adds	r3, #1
 8007344:	b2db      	uxtb	r3, r3
 8007346:	b25a      	sxtb	r2, r3
 8007348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800734e:	2301      	movs	r3, #1
 8007350:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007352:	e001      	b.n	8007358 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007354:	2300      	movs	r3, #0
 8007356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800735a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007362:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007366:	4618      	mov	r0, r3
 8007368:	3740      	adds	r7, #64	; 0x40
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b08c      	sub	sp, #48	; 0x30
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800737c:	2300      	movs	r3, #0
 800737e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10a      	bne.n	80073a0 <xQueueReceive+0x30>
	__asm volatile
 800738a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	623b      	str	r3, [r7, #32]
}
 800739c:	bf00      	nop
 800739e:	e7fe      	b.n	800739e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d103      	bne.n	80073ae <xQueueReceive+0x3e>
 80073a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <xQueueReceive+0x42>
 80073ae:	2301      	movs	r3, #1
 80073b0:	e000      	b.n	80073b4 <xQueueReceive+0x44>
 80073b2:	2300      	movs	r3, #0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10a      	bne.n	80073ce <xQueueReceive+0x5e>
	__asm volatile
 80073b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	61fb      	str	r3, [r7, #28]
}
 80073ca:	bf00      	nop
 80073cc:	e7fe      	b.n	80073cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073ce:	f001 f875 	bl	80084bc <xTaskGetSchedulerState>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d102      	bne.n	80073de <xQueueReceive+0x6e>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <xQueueReceive+0x72>
 80073de:	2301      	movs	r3, #1
 80073e0:	e000      	b.n	80073e4 <xQueueReceive+0x74>
 80073e2:	2300      	movs	r3, #0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10a      	bne.n	80073fe <xQueueReceive+0x8e>
	__asm volatile
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	61bb      	str	r3, [r7, #24]
}
 80073fa:	bf00      	nop
 80073fc:	e7fe      	b.n	80073fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073fe:	f001 fdb9 	bl	8008f74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007406:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	2b00      	cmp	r3, #0
 800740c:	d01f      	beq.n	800744e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800740e:	68b9      	ldr	r1, [r7, #8]
 8007410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007412:	f000 f8f7 	bl	8007604 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007418:	1e5a      	subs	r2, r3, #1
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800741e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00f      	beq.n	8007446 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007428:	3310      	adds	r3, #16
 800742a:	4618      	mov	r0, r3
 800742c:	f000 fe74 	bl	8008118 <xTaskRemoveFromEventList>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d007      	beq.n	8007446 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007436:	4b3d      	ldr	r3, [pc, #244]	; (800752c <xQueueReceive+0x1bc>)
 8007438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007446:	f001 fdc5 	bl	8008fd4 <vPortExitCritical>
				return pdPASS;
 800744a:	2301      	movs	r3, #1
 800744c:	e069      	b.n	8007522 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d103      	bne.n	800745c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007454:	f001 fdbe 	bl	8008fd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007458:	2300      	movs	r3, #0
 800745a:	e062      	b.n	8007522 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800745c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800745e:	2b00      	cmp	r3, #0
 8007460:	d106      	bne.n	8007470 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007462:	f107 0310 	add.w	r3, r7, #16
 8007466:	4618      	mov	r0, r3
 8007468:	f000 feba 	bl	80081e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800746c:	2301      	movs	r3, #1
 800746e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007470:	f001 fdb0 	bl	8008fd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007474:	f000 fc26 	bl	8007cc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007478:	f001 fd7c 	bl	8008f74 <vPortEnterCritical>
 800747c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007482:	b25b      	sxtb	r3, r3
 8007484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007488:	d103      	bne.n	8007492 <xQueueReceive+0x122>
 800748a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007494:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007498:	b25b      	sxtb	r3, r3
 800749a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800749e:	d103      	bne.n	80074a8 <xQueueReceive+0x138>
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074a8:	f001 fd94 	bl	8008fd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074ac:	1d3a      	adds	r2, r7, #4
 80074ae:	f107 0310 	add.w	r3, r7, #16
 80074b2:	4611      	mov	r1, r2
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 fea9 	bl	800820c <xTaskCheckForTimeOut>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d123      	bne.n	8007508 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074c2:	f000 f917 	bl	80076f4 <prvIsQueueEmpty>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d017      	beq.n	80074fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ce:	3324      	adds	r3, #36	; 0x24
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	4611      	mov	r1, r2
 80074d4:	4618      	mov	r0, r3
 80074d6:	f000 fdcf 	bl	8008078 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074dc:	f000 f8b8 	bl	8007650 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074e0:	f000 fbfe 	bl	8007ce0 <xTaskResumeAll>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d189      	bne.n	80073fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80074ea:	4b10      	ldr	r3, [pc, #64]	; (800752c <xQueueReceive+0x1bc>)
 80074ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	e780      	b.n	80073fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80074fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074fe:	f000 f8a7 	bl	8007650 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007502:	f000 fbed 	bl	8007ce0 <xTaskResumeAll>
 8007506:	e77a      	b.n	80073fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800750a:	f000 f8a1 	bl	8007650 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800750e:	f000 fbe7 	bl	8007ce0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007514:	f000 f8ee 	bl	80076f4 <prvIsQueueEmpty>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	f43f af6f 	beq.w	80073fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007520:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007522:	4618      	mov	r0, r3
 8007524:	3730      	adds	r7, #48	; 0x30
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
 800752a:	bf00      	nop
 800752c:	e000ed04 	.word	0xe000ed04

08007530 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b086      	sub	sp, #24
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800753c:	2300      	movs	r3, #0
 800753e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007544:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10d      	bne.n	800756a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d14d      	bne.n	80075f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	4618      	mov	r0, r3
 800755c:	f000 ffcc 	bl	80084f8 <xTaskPriorityDisinherit>
 8007560:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	609a      	str	r2, [r3, #8]
 8007568:	e043      	b.n	80075f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d119      	bne.n	80075a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6858      	ldr	r0, [r3, #4]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	461a      	mov	r2, r3
 800757a:	68b9      	ldr	r1, [r7, #8]
 800757c:	f002 f94e 	bl	800981c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	685a      	ldr	r2, [r3, #4]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007588:	441a      	add	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	429a      	cmp	r2, r3
 8007598:	d32b      	bcc.n	80075f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	605a      	str	r2, [r3, #4]
 80075a2:	e026      	b.n	80075f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	68d8      	ldr	r0, [r3, #12]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ac:	461a      	mov	r2, r3
 80075ae:	68b9      	ldr	r1, [r7, #8]
 80075b0:	f002 f934 	bl	800981c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	68da      	ldr	r2, [r3, #12]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075bc:	425b      	negs	r3, r3
 80075be:	441a      	add	r2, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	68da      	ldr	r2, [r3, #12]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d207      	bcs.n	80075e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	689a      	ldr	r2, [r3, #8]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d8:	425b      	negs	r3, r3
 80075da:	441a      	add	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d105      	bne.n	80075f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d002      	beq.n	80075f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	3b01      	subs	r3, #1
 80075f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	1c5a      	adds	r2, r3, #1
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80075fa:	697b      	ldr	r3, [r7, #20]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	2b00      	cmp	r3, #0
 8007614:	d018      	beq.n	8007648 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68da      	ldr	r2, [r3, #12]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800761e:	441a      	add	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	68da      	ldr	r2, [r3, #12]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	429a      	cmp	r2, r3
 800762e:	d303      	bcc.n	8007638 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68d9      	ldr	r1, [r3, #12]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007640:	461a      	mov	r2, r3
 8007642:	6838      	ldr	r0, [r7, #0]
 8007644:	f002 f8ea 	bl	800981c <memcpy>
	}
}
 8007648:	bf00      	nop
 800764a:	3708      	adds	r7, #8
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007658:	f001 fc8c 	bl	8008f74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007662:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007664:	e011      	b.n	800768a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766a:	2b00      	cmp	r3, #0
 800766c:	d012      	beq.n	8007694 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3324      	adds	r3, #36	; 0x24
 8007672:	4618      	mov	r0, r3
 8007674:	f000 fd50 	bl	8008118 <xTaskRemoveFromEventList>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800767e:	f000 fe27 	bl	80082d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007682:	7bfb      	ldrb	r3, [r7, #15]
 8007684:	3b01      	subs	r3, #1
 8007686:	b2db      	uxtb	r3, r3
 8007688:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800768a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800768e:	2b00      	cmp	r3, #0
 8007690:	dce9      	bgt.n	8007666 <prvUnlockQueue+0x16>
 8007692:	e000      	b.n	8007696 <prvUnlockQueue+0x46>
					break;
 8007694:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	22ff      	movs	r2, #255	; 0xff
 800769a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800769e:	f001 fc99 	bl	8008fd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80076a2:	f001 fc67 	bl	8008f74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076ae:	e011      	b.n	80076d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d012      	beq.n	80076de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3310      	adds	r3, #16
 80076bc:	4618      	mov	r0, r3
 80076be:	f000 fd2b 	bl	8008118 <xTaskRemoveFromEventList>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d001      	beq.n	80076cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80076c8:	f000 fe02 	bl	80082d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	3b01      	subs	r3, #1
 80076d0:	b2db      	uxtb	r3, r3
 80076d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	dce9      	bgt.n	80076b0 <prvUnlockQueue+0x60>
 80076dc:	e000      	b.n	80076e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80076de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	22ff      	movs	r2, #255	; 0xff
 80076e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80076e8:	f001 fc74 	bl	8008fd4 <vPortExitCritical>
}
 80076ec:	bf00      	nop
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076fc:	f001 fc3a 	bl	8008f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007704:	2b00      	cmp	r3, #0
 8007706:	d102      	bne.n	800770e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007708:	2301      	movs	r3, #1
 800770a:	60fb      	str	r3, [r7, #12]
 800770c:	e001      	b.n	8007712 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800770e:	2300      	movs	r3, #0
 8007710:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007712:	f001 fc5f 	bl	8008fd4 <vPortExitCritical>

	return xReturn;
 8007716:	68fb      	ldr	r3, [r7, #12]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007728:	f001 fc24 	bl	8008f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007734:	429a      	cmp	r2, r3
 8007736:	d102      	bne.n	800773e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007738:	2301      	movs	r3, #1
 800773a:	60fb      	str	r3, [r7, #12]
 800773c:	e001      	b.n	8007742 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800773e:	2300      	movs	r3, #0
 8007740:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007742:	f001 fc47 	bl	8008fd4 <vPortExitCritical>

	return xReturn;
 8007746:	68fb      	ldr	r3, [r7, #12]
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800775a:	2300      	movs	r3, #0
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	e014      	b.n	800778a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007760:	4a0f      	ldr	r2, [pc, #60]	; (80077a0 <vQueueAddToRegistry+0x50>)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10b      	bne.n	8007784 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800776c:	490c      	ldr	r1, [pc, #48]	; (80077a0 <vQueueAddToRegistry+0x50>)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	683a      	ldr	r2, [r7, #0]
 8007772:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007776:	4a0a      	ldr	r2, [pc, #40]	; (80077a0 <vQueueAddToRegistry+0x50>)
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	00db      	lsls	r3, r3, #3
 800777c:	4413      	add	r3, r2
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007782:	e006      	b.n	8007792 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	3301      	adds	r3, #1
 8007788:	60fb      	str	r3, [r7, #12]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b07      	cmp	r3, #7
 800778e:	d9e7      	bls.n	8007760 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007790:	bf00      	nop
 8007792:	bf00      	nop
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	200053f4 	.word	0x200053f4

080077a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80077b4:	f001 fbde 	bl	8008f74 <vPortEnterCritical>
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077be:	b25b      	sxtb	r3, r3
 80077c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c4:	d103      	bne.n	80077ce <vQueueWaitForMessageRestricted+0x2a>
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077d4:	b25b      	sxtb	r3, r3
 80077d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077da:	d103      	bne.n	80077e4 <vQueueWaitForMessageRestricted+0x40>
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077e4:	f001 fbf6 	bl	8008fd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d106      	bne.n	80077fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	3324      	adds	r3, #36	; 0x24
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	68b9      	ldr	r1, [r7, #8]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f000 fc61 	bl	80080c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80077fe:	6978      	ldr	r0, [r7, #20]
 8007800:	f7ff ff26 	bl	8007650 <prvUnlockQueue>
	}
 8007804:	bf00      	nop
 8007806:	3718      	adds	r7, #24
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08e      	sub	sp, #56	; 0x38
 8007810:	af04      	add	r7, sp, #16
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
 8007818:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800781a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781c:	2b00      	cmp	r3, #0
 800781e:	d10a      	bne.n	8007836 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007824:	f383 8811 	msr	BASEPRI, r3
 8007828:	f3bf 8f6f 	isb	sy
 800782c:	f3bf 8f4f 	dsb	sy
 8007830:	623b      	str	r3, [r7, #32]
}
 8007832:	bf00      	nop
 8007834:	e7fe      	b.n	8007834 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10a      	bne.n	8007852 <xTaskCreateStatic+0x46>
	__asm volatile
 800783c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	61fb      	str	r3, [r7, #28]
}
 800784e:	bf00      	nop
 8007850:	e7fe      	b.n	8007850 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007852:	23bc      	movs	r3, #188	; 0xbc
 8007854:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	2bbc      	cmp	r3, #188	; 0xbc
 800785a:	d00a      	beq.n	8007872 <xTaskCreateStatic+0x66>
	__asm volatile
 800785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	61bb      	str	r3, [r7, #24]
}
 800786e:	bf00      	nop
 8007870:	e7fe      	b.n	8007870 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007872:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007876:	2b00      	cmp	r3, #0
 8007878:	d01e      	beq.n	80078b8 <xTaskCreateStatic+0xac>
 800787a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800787c:	2b00      	cmp	r3, #0
 800787e:	d01b      	beq.n	80078b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007882:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007888:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	2202      	movs	r2, #2
 800788e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007892:	2300      	movs	r3, #0
 8007894:	9303      	str	r3, [sp, #12]
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007898:	9302      	str	r3, [sp, #8]
 800789a:	f107 0314 	add.w	r3, r7, #20
 800789e:	9301      	str	r3, [sp, #4]
 80078a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	68b9      	ldr	r1, [r7, #8]
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f000 f850 	bl	8007950 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078b2:	f000 f8f3 	bl	8007a9c <prvAddNewTaskToReadyList>
 80078b6:	e001      	b.n	80078bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80078b8:	2300      	movs	r3, #0
 80078ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80078bc:	697b      	ldr	r3, [r7, #20]
	}
 80078be:	4618      	mov	r0, r3
 80078c0:	3728      	adds	r7, #40	; 0x28
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b08c      	sub	sp, #48	; 0x30
 80078ca:	af04      	add	r7, sp, #16
 80078cc:	60f8      	str	r0, [r7, #12]
 80078ce:	60b9      	str	r1, [r7, #8]
 80078d0:	603b      	str	r3, [r7, #0]
 80078d2:	4613      	mov	r3, r2
 80078d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80078d6:	88fb      	ldrh	r3, [r7, #6]
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4618      	mov	r0, r3
 80078dc:	f001 fc6c 	bl	80091b8 <pvPortMalloc>
 80078e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00e      	beq.n	8007906 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80078e8:	20bc      	movs	r0, #188	; 0xbc
 80078ea:	f001 fc65 	bl	80091b8 <pvPortMalloc>
 80078ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80078f6:	69fb      	ldr	r3, [r7, #28]
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	631a      	str	r2, [r3, #48]	; 0x30
 80078fc:	e005      	b.n	800790a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078fe:	6978      	ldr	r0, [r7, #20]
 8007900:	f001 fd26 	bl	8009350 <vPortFree>
 8007904:	e001      	b.n	800790a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007906:	2300      	movs	r3, #0
 8007908:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d017      	beq.n	8007940 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007918:	88fa      	ldrh	r2, [r7, #6]
 800791a:	2300      	movs	r3, #0
 800791c:	9303      	str	r3, [sp, #12]
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	9302      	str	r3, [sp, #8]
 8007922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007924:	9301      	str	r3, [sp, #4]
 8007926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	68b9      	ldr	r1, [r7, #8]
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	f000 f80e 	bl	8007950 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007934:	69f8      	ldr	r0, [r7, #28]
 8007936:	f000 f8b1 	bl	8007a9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800793a:	2301      	movs	r3, #1
 800793c:	61bb      	str	r3, [r7, #24]
 800793e:	e002      	b.n	8007946 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007940:	f04f 33ff 	mov.w	r3, #4294967295
 8007944:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007946:	69bb      	ldr	r3, [r7, #24]
	}
 8007948:	4618      	mov	r0, r3
 800794a:	3720      	adds	r7, #32
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b088      	sub	sp, #32
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
 800795c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007960:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	461a      	mov	r2, r3
 8007968:	21a5      	movs	r1, #165	; 0xa5
 800796a:	f001 ff7f 	bl	800986c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007978:	3b01      	subs	r3, #1
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4413      	add	r3, r2
 800797e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	f023 0307 	bic.w	r3, r3, #7
 8007986:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	f003 0307 	and.w	r3, r3, #7
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00a      	beq.n	80079a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007996:	f383 8811 	msr	BASEPRI, r3
 800799a:	f3bf 8f6f 	isb	sy
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	617b      	str	r3, [r7, #20]
}
 80079a4:	bf00      	nop
 80079a6:	e7fe      	b.n	80079a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d01f      	beq.n	80079ee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079ae:	2300      	movs	r3, #0
 80079b0:	61fb      	str	r3, [r7, #28]
 80079b2:	e012      	b.n	80079da <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	4413      	add	r3, r2
 80079ba:	7819      	ldrb	r1, [r3, #0]
 80079bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	4413      	add	r3, r2
 80079c2:	3334      	adds	r3, #52	; 0x34
 80079c4:	460a      	mov	r2, r1
 80079c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	4413      	add	r3, r2
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d006      	beq.n	80079e2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	3301      	adds	r3, #1
 80079d8:	61fb      	str	r3, [r7, #28]
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	2b0f      	cmp	r3, #15
 80079de:	d9e9      	bls.n	80079b4 <prvInitialiseNewTask+0x64>
 80079e0:	e000      	b.n	80079e4 <prvInitialiseNewTask+0x94>
			{
				break;
 80079e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079ec:	e003      	b.n	80079f6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f8:	2b37      	cmp	r3, #55	; 0x37
 80079fa:	d901      	bls.n	8007a00 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079fc:	2337      	movs	r3, #55	; 0x37
 80079fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a0a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0e:	2200      	movs	r2, #0
 8007a10:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a14:	3304      	adds	r3, #4
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7ff f978 	bl	8006d0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	3318      	adds	r3, #24
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7ff f973 	bl	8006d0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	3354      	adds	r3, #84	; 0x54
 8007a50:	2260      	movs	r2, #96	; 0x60
 8007a52:	2100      	movs	r1, #0
 8007a54:	4618      	mov	r0, r3
 8007a56:	f001 ff09 	bl	800986c <memset>
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	4a0c      	ldr	r2, [pc, #48]	; (8007a90 <prvInitialiseNewTask+0x140>)
 8007a5e:	659a      	str	r2, [r3, #88]	; 0x58
 8007a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a62:	4a0c      	ldr	r2, [pc, #48]	; (8007a94 <prvInitialiseNewTask+0x144>)
 8007a64:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a68:	4a0b      	ldr	r2, [pc, #44]	; (8007a98 <prvInitialiseNewTask+0x148>)
 8007a6a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a6c:	683a      	ldr	r2, [r7, #0]
 8007a6e:	68f9      	ldr	r1, [r7, #12]
 8007a70:	69b8      	ldr	r0, [r7, #24]
 8007a72:	f001 f951 	bl	8008d18 <pxPortInitialiseStack>
 8007a76:	4602      	mov	r2, r0
 8007a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d002      	beq.n	8007a88 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a88:	bf00      	nop
 8007a8a:	3720      	adds	r7, #32
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	0800c7c4 	.word	0x0800c7c4
 8007a94:	0800c7e4 	.word	0x0800c7e4
 8007a98:	0800c7a4 	.word	0x0800c7a4

08007a9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007aa4:	f001 fa66 	bl	8008f74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007aa8:	4b2d      	ldr	r3, [pc, #180]	; (8007b60 <prvAddNewTaskToReadyList+0xc4>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3301      	adds	r3, #1
 8007aae:	4a2c      	ldr	r2, [pc, #176]	; (8007b60 <prvAddNewTaskToReadyList+0xc4>)
 8007ab0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ab2:	4b2c      	ldr	r3, [pc, #176]	; (8007b64 <prvAddNewTaskToReadyList+0xc8>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d109      	bne.n	8007ace <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007aba:	4a2a      	ldr	r2, [pc, #168]	; (8007b64 <prvAddNewTaskToReadyList+0xc8>)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ac0:	4b27      	ldr	r3, [pc, #156]	; (8007b60 <prvAddNewTaskToReadyList+0xc4>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d110      	bne.n	8007aea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ac8:	f000 fc26 	bl	8008318 <prvInitialiseTaskLists>
 8007acc:	e00d      	b.n	8007aea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ace:	4b26      	ldr	r3, [pc, #152]	; (8007b68 <prvAddNewTaskToReadyList+0xcc>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d109      	bne.n	8007aea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ad6:	4b23      	ldr	r3, [pc, #140]	; (8007b64 <prvAddNewTaskToReadyList+0xc8>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d802      	bhi.n	8007aea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ae4:	4a1f      	ldr	r2, [pc, #124]	; (8007b64 <prvAddNewTaskToReadyList+0xc8>)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007aea:	4b20      	ldr	r3, [pc, #128]	; (8007b6c <prvAddNewTaskToReadyList+0xd0>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3301      	adds	r3, #1
 8007af0:	4a1e      	ldr	r2, [pc, #120]	; (8007b6c <prvAddNewTaskToReadyList+0xd0>)
 8007af2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007af4:	4b1d      	ldr	r3, [pc, #116]	; (8007b6c <prvAddNewTaskToReadyList+0xd0>)
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b00:	4b1b      	ldr	r3, [pc, #108]	; (8007b70 <prvAddNewTaskToReadyList+0xd4>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d903      	bls.n	8007b10 <prvAddNewTaskToReadyList+0x74>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0c:	4a18      	ldr	r2, [pc, #96]	; (8007b70 <prvAddNewTaskToReadyList+0xd4>)
 8007b0e:	6013      	str	r3, [r2, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b14:	4613      	mov	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	4a15      	ldr	r2, [pc, #84]	; (8007b74 <prvAddNewTaskToReadyList+0xd8>)
 8007b1e:	441a      	add	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	3304      	adds	r3, #4
 8007b24:	4619      	mov	r1, r3
 8007b26:	4610      	mov	r0, r2
 8007b28:	f7ff f8fd 	bl	8006d26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b2c:	f001 fa52 	bl	8008fd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b30:	4b0d      	ldr	r3, [pc, #52]	; (8007b68 <prvAddNewTaskToReadyList+0xcc>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00e      	beq.n	8007b56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b38:	4b0a      	ldr	r3, [pc, #40]	; (8007b64 <prvAddNewTaskToReadyList+0xc8>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d207      	bcs.n	8007b56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b46:	4b0c      	ldr	r3, [pc, #48]	; (8007b78 <prvAddNewTaskToReadyList+0xdc>)
 8007b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b4c:	601a      	str	r2, [r3, #0]
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b56:	bf00      	nop
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	200014dc 	.word	0x200014dc
 8007b64:	20001008 	.word	0x20001008
 8007b68:	200014e8 	.word	0x200014e8
 8007b6c:	200014f8 	.word	0x200014f8
 8007b70:	200014e4 	.word	0x200014e4
 8007b74:	2000100c 	.word	0x2000100c
 8007b78:	e000ed04 	.word	0xe000ed04

08007b7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b84:	2300      	movs	r3, #0
 8007b86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d017      	beq.n	8007bbe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b8e:	4b13      	ldr	r3, [pc, #76]	; (8007bdc <vTaskDelay+0x60>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00a      	beq.n	8007bac <vTaskDelay+0x30>
	__asm volatile
 8007b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	60bb      	str	r3, [r7, #8]
}
 8007ba8:	bf00      	nop
 8007baa:	e7fe      	b.n	8007baa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007bac:	f000 f88a 	bl	8007cc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fd0e 	bl	80085d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bb8:	f000 f892 	bl	8007ce0 <xTaskResumeAll>
 8007bbc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d107      	bne.n	8007bd4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007bc4:	4b06      	ldr	r3, [pc, #24]	; (8007be0 <vTaskDelay+0x64>)
 8007bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bca:	601a      	str	r2, [r3, #0]
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bd4:	bf00      	nop
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	20001504 	.word	0x20001504
 8007be0:	e000ed04 	.word	0xe000ed04

08007be4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b08a      	sub	sp, #40	; 0x28
 8007be8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007bea:	2300      	movs	r3, #0
 8007bec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007bf2:	463a      	mov	r2, r7
 8007bf4:	1d39      	adds	r1, r7, #4
 8007bf6:	f107 0308 	add.w	r3, r7, #8
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff f832 	bl	8006c64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c00:	6839      	ldr	r1, [r7, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	9202      	str	r2, [sp, #8]
 8007c08:	9301      	str	r3, [sp, #4]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	2300      	movs	r3, #0
 8007c10:	460a      	mov	r2, r1
 8007c12:	4924      	ldr	r1, [pc, #144]	; (8007ca4 <vTaskStartScheduler+0xc0>)
 8007c14:	4824      	ldr	r0, [pc, #144]	; (8007ca8 <vTaskStartScheduler+0xc4>)
 8007c16:	f7ff fdf9 	bl	800780c <xTaskCreateStatic>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	4a23      	ldr	r2, [pc, #140]	; (8007cac <vTaskStartScheduler+0xc8>)
 8007c1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c20:	4b22      	ldr	r3, [pc, #136]	; (8007cac <vTaskStartScheduler+0xc8>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	617b      	str	r3, [r7, #20]
 8007c2c:	e001      	b.n	8007c32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d102      	bne.n	8007c3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007c38:	f000 fd20 	bl	800867c <xTimerCreateTimerTask>
 8007c3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d11b      	bne.n	8007c7c <vTaskStartScheduler+0x98>
	__asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	613b      	str	r3, [r7, #16]
}
 8007c56:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c58:	4b15      	ldr	r3, [pc, #84]	; (8007cb0 <vTaskStartScheduler+0xcc>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3354      	adds	r3, #84	; 0x54
 8007c5e:	4a15      	ldr	r2, [pc, #84]	; (8007cb4 <vTaskStartScheduler+0xd0>)
 8007c60:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c62:	4b15      	ldr	r3, [pc, #84]	; (8007cb8 <vTaskStartScheduler+0xd4>)
 8007c64:	f04f 32ff 	mov.w	r2, #4294967295
 8007c68:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c6a:	4b14      	ldr	r3, [pc, #80]	; (8007cbc <vTaskStartScheduler+0xd8>)
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c70:	4b13      	ldr	r3, [pc, #76]	; (8007cc0 <vTaskStartScheduler+0xdc>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c76:	f001 f8db 	bl	8008e30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c7a:	e00e      	b.n	8007c9a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c82:	d10a      	bne.n	8007c9a <vTaskStartScheduler+0xb6>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	60fb      	str	r3, [r7, #12]
}
 8007c96:	bf00      	nop
 8007c98:	e7fe      	b.n	8007c98 <vTaskStartScheduler+0xb4>
}
 8007c9a:	bf00      	nop
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	0800c6b8 	.word	0x0800c6b8
 8007ca8:	080082e9 	.word	0x080082e9
 8007cac:	20001500 	.word	0x20001500
 8007cb0:	20001008 	.word	0x20001008
 8007cb4:	20000014 	.word	0x20000014
 8007cb8:	200014fc 	.word	0x200014fc
 8007cbc:	200014e8 	.word	0x200014e8
 8007cc0:	200014e0 	.word	0x200014e0

08007cc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007cc8:	4b04      	ldr	r3, [pc, #16]	; (8007cdc <vTaskSuspendAll+0x18>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	4a03      	ldr	r2, [pc, #12]	; (8007cdc <vTaskSuspendAll+0x18>)
 8007cd0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007cd2:	bf00      	nop
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	20001504 	.word	0x20001504

08007ce0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cea:	2300      	movs	r3, #0
 8007cec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cee:	4b42      	ldr	r3, [pc, #264]	; (8007df8 <xTaskResumeAll+0x118>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10a      	bne.n	8007d0c <xTaskResumeAll+0x2c>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	603b      	str	r3, [r7, #0]
}
 8007d08:	bf00      	nop
 8007d0a:	e7fe      	b.n	8007d0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d0c:	f001 f932 	bl	8008f74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d10:	4b39      	ldr	r3, [pc, #228]	; (8007df8 <xTaskResumeAll+0x118>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3b01      	subs	r3, #1
 8007d16:	4a38      	ldr	r2, [pc, #224]	; (8007df8 <xTaskResumeAll+0x118>)
 8007d18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d1a:	4b37      	ldr	r3, [pc, #220]	; (8007df8 <xTaskResumeAll+0x118>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d162      	bne.n	8007de8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d22:	4b36      	ldr	r3, [pc, #216]	; (8007dfc <xTaskResumeAll+0x11c>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d05e      	beq.n	8007de8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d2a:	e02f      	b.n	8007d8c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d2c:	4b34      	ldr	r3, [pc, #208]	; (8007e00 <xTaskResumeAll+0x120>)
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	3318      	adds	r3, #24
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7ff f851 	bl	8006de0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	3304      	adds	r3, #4
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7ff f84c 	bl	8006de0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d4c:	4b2d      	ldr	r3, [pc, #180]	; (8007e04 <xTaskResumeAll+0x124>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d903      	bls.n	8007d5c <xTaskResumeAll+0x7c>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d58:	4a2a      	ldr	r2, [pc, #168]	; (8007e04 <xTaskResumeAll+0x124>)
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d60:	4613      	mov	r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4413      	add	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4a27      	ldr	r2, [pc, #156]	; (8007e08 <xTaskResumeAll+0x128>)
 8007d6a:	441a      	add	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	3304      	adds	r3, #4
 8007d70:	4619      	mov	r1, r3
 8007d72:	4610      	mov	r0, r2
 8007d74:	f7fe ffd7 	bl	8006d26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7c:	4b23      	ldr	r3, [pc, #140]	; (8007e0c <xTaskResumeAll+0x12c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d302      	bcc.n	8007d8c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007d86:	4b22      	ldr	r3, [pc, #136]	; (8007e10 <xTaskResumeAll+0x130>)
 8007d88:	2201      	movs	r2, #1
 8007d8a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d8c:	4b1c      	ldr	r3, [pc, #112]	; (8007e00 <xTaskResumeAll+0x120>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1cb      	bne.n	8007d2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d9a:	f000 fb5f 	bl	800845c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d9e:	4b1d      	ldr	r3, [pc, #116]	; (8007e14 <xTaskResumeAll+0x134>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d010      	beq.n	8007dcc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007daa:	f000 f847 	bl	8007e3c <xTaskIncrementTick>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007db4:	4b16      	ldr	r3, [pc, #88]	; (8007e10 <xTaskResumeAll+0x130>)
 8007db6:	2201      	movs	r2, #1
 8007db8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1f1      	bne.n	8007daa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007dc6:	4b13      	ldr	r3, [pc, #76]	; (8007e14 <xTaskResumeAll+0x134>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007dcc:	4b10      	ldr	r3, [pc, #64]	; (8007e10 <xTaskResumeAll+0x130>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d009      	beq.n	8007de8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007dd8:	4b0f      	ldr	r3, [pc, #60]	; (8007e18 <xTaskResumeAll+0x138>)
 8007dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dde:	601a      	str	r2, [r3, #0]
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007de8:	f001 f8f4 	bl	8008fd4 <vPortExitCritical>

	return xAlreadyYielded;
 8007dec:	68bb      	ldr	r3, [r7, #8]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20001504 	.word	0x20001504
 8007dfc:	200014dc 	.word	0x200014dc
 8007e00:	2000149c 	.word	0x2000149c
 8007e04:	200014e4 	.word	0x200014e4
 8007e08:	2000100c 	.word	0x2000100c
 8007e0c:	20001008 	.word	0x20001008
 8007e10:	200014f0 	.word	0x200014f0
 8007e14:	200014ec 	.word	0x200014ec
 8007e18:	e000ed04 	.word	0xe000ed04

08007e1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e22:	4b05      	ldr	r3, [pc, #20]	; (8007e38 <xTaskGetTickCount+0x1c>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e28:	687b      	ldr	r3, [r7, #4]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	200014e0 	.word	0x200014e0

08007e3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e42:	2300      	movs	r3, #0
 8007e44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e46:	4b4f      	ldr	r3, [pc, #316]	; (8007f84 <xTaskIncrementTick+0x148>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f040 808f 	bne.w	8007f6e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e50:	4b4d      	ldr	r3, [pc, #308]	; (8007f88 <xTaskIncrementTick+0x14c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3301      	adds	r3, #1
 8007e56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e58:	4a4b      	ldr	r2, [pc, #300]	; (8007f88 <xTaskIncrementTick+0x14c>)
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d120      	bne.n	8007ea6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e64:	4b49      	ldr	r3, [pc, #292]	; (8007f8c <xTaskIncrementTick+0x150>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00a      	beq.n	8007e84 <xTaskIncrementTick+0x48>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	603b      	str	r3, [r7, #0]
}
 8007e80:	bf00      	nop
 8007e82:	e7fe      	b.n	8007e82 <xTaskIncrementTick+0x46>
 8007e84:	4b41      	ldr	r3, [pc, #260]	; (8007f8c <xTaskIncrementTick+0x150>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	60fb      	str	r3, [r7, #12]
 8007e8a:	4b41      	ldr	r3, [pc, #260]	; (8007f90 <xTaskIncrementTick+0x154>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a3f      	ldr	r2, [pc, #252]	; (8007f8c <xTaskIncrementTick+0x150>)
 8007e90:	6013      	str	r3, [r2, #0]
 8007e92:	4a3f      	ldr	r2, [pc, #252]	; (8007f90 <xTaskIncrementTick+0x154>)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6013      	str	r3, [r2, #0]
 8007e98:	4b3e      	ldr	r3, [pc, #248]	; (8007f94 <xTaskIncrementTick+0x158>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	4a3d      	ldr	r2, [pc, #244]	; (8007f94 <xTaskIncrementTick+0x158>)
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	f000 fadb 	bl	800845c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ea6:	4b3c      	ldr	r3, [pc, #240]	; (8007f98 <xTaskIncrementTick+0x15c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d349      	bcc.n	8007f44 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eb0:	4b36      	ldr	r3, [pc, #216]	; (8007f8c <xTaskIncrementTick+0x150>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d104      	bne.n	8007ec4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eba:	4b37      	ldr	r3, [pc, #220]	; (8007f98 <xTaskIncrementTick+0x15c>)
 8007ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec0:	601a      	str	r2, [r3, #0]
					break;
 8007ec2:	e03f      	b.n	8007f44 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec4:	4b31      	ldr	r3, [pc, #196]	; (8007f8c <xTaskIncrementTick+0x150>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ed4:	693a      	ldr	r2, [r7, #16]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d203      	bcs.n	8007ee4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007edc:	4a2e      	ldr	r2, [pc, #184]	; (8007f98 <xTaskIncrementTick+0x15c>)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ee2:	e02f      	b.n	8007f44 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	3304      	adds	r3, #4
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7fe ff79 	bl	8006de0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d004      	beq.n	8007f00 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	3318      	adds	r3, #24
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fe ff70 	bl	8006de0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f04:	4b25      	ldr	r3, [pc, #148]	; (8007f9c <xTaskIncrementTick+0x160>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d903      	bls.n	8007f14 <xTaskIncrementTick+0xd8>
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f10:	4a22      	ldr	r2, [pc, #136]	; (8007f9c <xTaskIncrementTick+0x160>)
 8007f12:	6013      	str	r3, [r2, #0]
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f18:	4613      	mov	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4a1f      	ldr	r2, [pc, #124]	; (8007fa0 <xTaskIncrementTick+0x164>)
 8007f22:	441a      	add	r2, r3
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	3304      	adds	r3, #4
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	f7fe fefb 	bl	8006d26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f34:	4b1b      	ldr	r3, [pc, #108]	; (8007fa4 <xTaskIncrementTick+0x168>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d3b8      	bcc.n	8007eb0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f42:	e7b5      	b.n	8007eb0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f44:	4b17      	ldr	r3, [pc, #92]	; (8007fa4 <xTaskIncrementTick+0x168>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f4a:	4915      	ldr	r1, [pc, #84]	; (8007fa0 <xTaskIncrementTick+0x164>)
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	4413      	add	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	440b      	add	r3, r1
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d901      	bls.n	8007f60 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f60:	4b11      	ldr	r3, [pc, #68]	; (8007fa8 <xTaskIncrementTick+0x16c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d007      	beq.n	8007f78 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	617b      	str	r3, [r7, #20]
 8007f6c:	e004      	b.n	8007f78 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f6e:	4b0f      	ldr	r3, [pc, #60]	; (8007fac <xTaskIncrementTick+0x170>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	3301      	adds	r3, #1
 8007f74:	4a0d      	ldr	r2, [pc, #52]	; (8007fac <xTaskIncrementTick+0x170>)
 8007f76:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f78:	697b      	ldr	r3, [r7, #20]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	20001504 	.word	0x20001504
 8007f88:	200014e0 	.word	0x200014e0
 8007f8c:	20001494 	.word	0x20001494
 8007f90:	20001498 	.word	0x20001498
 8007f94:	200014f4 	.word	0x200014f4
 8007f98:	200014fc 	.word	0x200014fc
 8007f9c:	200014e4 	.word	0x200014e4
 8007fa0:	2000100c 	.word	0x2000100c
 8007fa4:	20001008 	.word	0x20001008
 8007fa8:	200014f0 	.word	0x200014f0
 8007fac:	200014ec 	.word	0x200014ec

08007fb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007fb6:	4b2a      	ldr	r3, [pc, #168]	; (8008060 <vTaskSwitchContext+0xb0>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d003      	beq.n	8007fc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007fbe:	4b29      	ldr	r3, [pc, #164]	; (8008064 <vTaskSwitchContext+0xb4>)
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007fc4:	e046      	b.n	8008054 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007fc6:	4b27      	ldr	r3, [pc, #156]	; (8008064 <vTaskSwitchContext+0xb4>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fcc:	4b26      	ldr	r3, [pc, #152]	; (8008068 <vTaskSwitchContext+0xb8>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	60fb      	str	r3, [r7, #12]
 8007fd2:	e010      	b.n	8007ff6 <vTaskSwitchContext+0x46>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <vTaskSwitchContext+0x40>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	607b      	str	r3, [r7, #4]
}
 8007fec:	bf00      	nop
 8007fee:	e7fe      	b.n	8007fee <vTaskSwitchContext+0x3e>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	60fb      	str	r3, [r7, #12]
 8007ff6:	491d      	ldr	r1, [pc, #116]	; (800806c <vTaskSwitchContext+0xbc>)
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	4413      	add	r3, r2
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	440b      	add	r3, r1
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d0e4      	beq.n	8007fd4 <vTaskSwitchContext+0x24>
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	4613      	mov	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4a15      	ldr	r2, [pc, #84]	; (800806c <vTaskSwitchContext+0xbc>)
 8008016:	4413      	add	r3, r2
 8008018:	60bb      	str	r3, [r7, #8]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	605a      	str	r2, [r3, #4]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	685a      	ldr	r2, [r3, #4]
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	3308      	adds	r3, #8
 800802c:	429a      	cmp	r2, r3
 800802e:	d104      	bne.n	800803a <vTaskSwitchContext+0x8a>
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	605a      	str	r2, [r3, #4]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	4a0b      	ldr	r2, [pc, #44]	; (8008070 <vTaskSwitchContext+0xc0>)
 8008042:	6013      	str	r3, [r2, #0]
 8008044:	4a08      	ldr	r2, [pc, #32]	; (8008068 <vTaskSwitchContext+0xb8>)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800804a:	4b09      	ldr	r3, [pc, #36]	; (8008070 <vTaskSwitchContext+0xc0>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	3354      	adds	r3, #84	; 0x54
 8008050:	4a08      	ldr	r2, [pc, #32]	; (8008074 <vTaskSwitchContext+0xc4>)
 8008052:	6013      	str	r3, [r2, #0]
}
 8008054:	bf00      	nop
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr
 8008060:	20001504 	.word	0x20001504
 8008064:	200014f0 	.word	0x200014f0
 8008068:	200014e4 	.word	0x200014e4
 800806c:	2000100c 	.word	0x2000100c
 8008070:	20001008 	.word	0x20001008
 8008074:	20000014 	.word	0x20000014

08008078 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10a      	bne.n	800809e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	60fb      	str	r3, [r7, #12]
}
 800809a:	bf00      	nop
 800809c:	e7fe      	b.n	800809c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800809e:	4b07      	ldr	r3, [pc, #28]	; (80080bc <vTaskPlaceOnEventList+0x44>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3318      	adds	r3, #24
 80080a4:	4619      	mov	r1, r3
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7fe fe61 	bl	8006d6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80080ac:	2101      	movs	r1, #1
 80080ae:	6838      	ldr	r0, [r7, #0]
 80080b0:	f000 fa90 	bl	80085d4 <prvAddCurrentTaskToDelayedList>
}
 80080b4:	bf00      	nop
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	20001008 	.word	0x20001008

080080c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10a      	bne.n	80080e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	617b      	str	r3, [r7, #20]
}
 80080e4:	bf00      	nop
 80080e6:	e7fe      	b.n	80080e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80080e8:	4b0a      	ldr	r3, [pc, #40]	; (8008114 <vTaskPlaceOnEventListRestricted+0x54>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	3318      	adds	r3, #24
 80080ee:	4619      	mov	r1, r3
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f7fe fe18 	bl	8006d26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80080fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008100:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008102:	6879      	ldr	r1, [r7, #4]
 8008104:	68b8      	ldr	r0, [r7, #8]
 8008106:	f000 fa65 	bl	80085d4 <prvAddCurrentTaskToDelayedList>
	}
 800810a:	bf00      	nop
 800810c:	3718      	adds	r7, #24
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	20001008 	.word	0x20001008

08008118 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10a      	bne.n	8008144 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	60fb      	str	r3, [r7, #12]
}
 8008140:	bf00      	nop
 8008142:	e7fe      	b.n	8008142 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	3318      	adds	r3, #24
 8008148:	4618      	mov	r0, r3
 800814a:	f7fe fe49 	bl	8006de0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800814e:	4b1e      	ldr	r3, [pc, #120]	; (80081c8 <xTaskRemoveFromEventList+0xb0>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d11d      	bne.n	8008192 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	3304      	adds	r3, #4
 800815a:	4618      	mov	r0, r3
 800815c:	f7fe fe40 	bl	8006de0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008164:	4b19      	ldr	r3, [pc, #100]	; (80081cc <xTaskRemoveFromEventList+0xb4>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	429a      	cmp	r2, r3
 800816a:	d903      	bls.n	8008174 <xTaskRemoveFromEventList+0x5c>
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008170:	4a16      	ldr	r2, [pc, #88]	; (80081cc <xTaskRemoveFromEventList+0xb4>)
 8008172:	6013      	str	r3, [r2, #0]
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008178:	4613      	mov	r3, r2
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	4413      	add	r3, r2
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4a13      	ldr	r2, [pc, #76]	; (80081d0 <xTaskRemoveFromEventList+0xb8>)
 8008182:	441a      	add	r2, r3
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	3304      	adds	r3, #4
 8008188:	4619      	mov	r1, r3
 800818a:	4610      	mov	r0, r2
 800818c:	f7fe fdcb 	bl	8006d26 <vListInsertEnd>
 8008190:	e005      	b.n	800819e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	3318      	adds	r3, #24
 8008196:	4619      	mov	r1, r3
 8008198:	480e      	ldr	r0, [pc, #56]	; (80081d4 <xTaskRemoveFromEventList+0xbc>)
 800819a:	f7fe fdc4 	bl	8006d26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a2:	4b0d      	ldr	r3, [pc, #52]	; (80081d8 <xTaskRemoveFromEventList+0xc0>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d905      	bls.n	80081b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80081ac:	2301      	movs	r3, #1
 80081ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80081b0:	4b0a      	ldr	r3, [pc, #40]	; (80081dc <xTaskRemoveFromEventList+0xc4>)
 80081b2:	2201      	movs	r2, #1
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	e001      	b.n	80081bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80081b8:	2300      	movs	r3, #0
 80081ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80081bc:	697b      	ldr	r3, [r7, #20]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3718      	adds	r7, #24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	20001504 	.word	0x20001504
 80081cc:	200014e4 	.word	0x200014e4
 80081d0:	2000100c 	.word	0x2000100c
 80081d4:	2000149c 	.word	0x2000149c
 80081d8:	20001008 	.word	0x20001008
 80081dc:	200014f0 	.word	0x200014f0

080081e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80081e8:	4b06      	ldr	r3, [pc, #24]	; (8008204 <vTaskInternalSetTimeOutState+0x24>)
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80081f0:	4b05      	ldr	r3, [pc, #20]	; (8008208 <vTaskInternalSetTimeOutState+0x28>)
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	605a      	str	r2, [r3, #4]
}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	200014f4 	.word	0x200014f4
 8008208:	200014e0 	.word	0x200014e0

0800820c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b088      	sub	sp, #32
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10a      	bne.n	8008232 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	613b      	str	r3, [r7, #16]
}
 800822e:	bf00      	nop
 8008230:	e7fe      	b.n	8008230 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d10a      	bne.n	800824e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823c:	f383 8811 	msr	BASEPRI, r3
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	60fb      	str	r3, [r7, #12]
}
 800824a:	bf00      	nop
 800824c:	e7fe      	b.n	800824c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800824e:	f000 fe91 	bl	8008f74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008252:	4b1d      	ldr	r3, [pc, #116]	; (80082c8 <xTaskCheckForTimeOut+0xbc>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	69ba      	ldr	r2, [r7, #24]
 800825e:	1ad3      	subs	r3, r2, r3
 8008260:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826a:	d102      	bne.n	8008272 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800826c:	2300      	movs	r3, #0
 800826e:	61fb      	str	r3, [r7, #28]
 8008270:	e023      	b.n	80082ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	4b15      	ldr	r3, [pc, #84]	; (80082cc <xTaskCheckForTimeOut+0xc0>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	429a      	cmp	r2, r3
 800827c:	d007      	beq.n	800828e <xTaskCheckForTimeOut+0x82>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	69ba      	ldr	r2, [r7, #24]
 8008284:	429a      	cmp	r2, r3
 8008286:	d302      	bcc.n	800828e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008288:	2301      	movs	r3, #1
 800828a:	61fb      	str	r3, [r7, #28]
 800828c:	e015      	b.n	80082ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	697a      	ldr	r2, [r7, #20]
 8008294:	429a      	cmp	r2, r3
 8008296:	d20b      	bcs.n	80082b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	1ad2      	subs	r2, r2, r3
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f7ff ff9b 	bl	80081e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80082aa:	2300      	movs	r3, #0
 80082ac:	61fb      	str	r3, [r7, #28]
 80082ae:	e004      	b.n	80082ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80082b6:	2301      	movs	r3, #1
 80082b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80082ba:	f000 fe8b 	bl	8008fd4 <vPortExitCritical>

	return xReturn;
 80082be:	69fb      	ldr	r3, [r7, #28]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3720      	adds	r7, #32
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	200014e0 	.word	0x200014e0
 80082cc:	200014f4 	.word	0x200014f4

080082d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80082d0:	b480      	push	{r7}
 80082d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80082d4:	4b03      	ldr	r3, [pc, #12]	; (80082e4 <vTaskMissedYield+0x14>)
 80082d6:	2201      	movs	r2, #1
 80082d8:	601a      	str	r2, [r3, #0]
}
 80082da:	bf00      	nop
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	200014f0 	.word	0x200014f0

080082e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80082f0:	f000 f852 	bl	8008398 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80082f4:	4b06      	ldr	r3, [pc, #24]	; (8008310 <prvIdleTask+0x28>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d9f9      	bls.n	80082f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80082fc:	4b05      	ldr	r3, [pc, #20]	; (8008314 <prvIdleTask+0x2c>)
 80082fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008302:	601a      	str	r2, [r3, #0]
 8008304:	f3bf 8f4f 	dsb	sy
 8008308:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800830c:	e7f0      	b.n	80082f0 <prvIdleTask+0x8>
 800830e:	bf00      	nop
 8008310:	2000100c 	.word	0x2000100c
 8008314:	e000ed04 	.word	0xe000ed04

08008318 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800831e:	2300      	movs	r3, #0
 8008320:	607b      	str	r3, [r7, #4]
 8008322:	e00c      	b.n	800833e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	4613      	mov	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4a12      	ldr	r2, [pc, #72]	; (8008378 <prvInitialiseTaskLists+0x60>)
 8008330:	4413      	add	r3, r2
 8008332:	4618      	mov	r0, r3
 8008334:	f7fe fcca 	bl	8006ccc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	3301      	adds	r3, #1
 800833c:	607b      	str	r3, [r7, #4]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b37      	cmp	r3, #55	; 0x37
 8008342:	d9ef      	bls.n	8008324 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008344:	480d      	ldr	r0, [pc, #52]	; (800837c <prvInitialiseTaskLists+0x64>)
 8008346:	f7fe fcc1 	bl	8006ccc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800834a:	480d      	ldr	r0, [pc, #52]	; (8008380 <prvInitialiseTaskLists+0x68>)
 800834c:	f7fe fcbe 	bl	8006ccc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008350:	480c      	ldr	r0, [pc, #48]	; (8008384 <prvInitialiseTaskLists+0x6c>)
 8008352:	f7fe fcbb 	bl	8006ccc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008356:	480c      	ldr	r0, [pc, #48]	; (8008388 <prvInitialiseTaskLists+0x70>)
 8008358:	f7fe fcb8 	bl	8006ccc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800835c:	480b      	ldr	r0, [pc, #44]	; (800838c <prvInitialiseTaskLists+0x74>)
 800835e:	f7fe fcb5 	bl	8006ccc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008362:	4b0b      	ldr	r3, [pc, #44]	; (8008390 <prvInitialiseTaskLists+0x78>)
 8008364:	4a05      	ldr	r2, [pc, #20]	; (800837c <prvInitialiseTaskLists+0x64>)
 8008366:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008368:	4b0a      	ldr	r3, [pc, #40]	; (8008394 <prvInitialiseTaskLists+0x7c>)
 800836a:	4a05      	ldr	r2, [pc, #20]	; (8008380 <prvInitialiseTaskLists+0x68>)
 800836c:	601a      	str	r2, [r3, #0]
}
 800836e:	bf00      	nop
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	2000100c 	.word	0x2000100c
 800837c:	2000146c 	.word	0x2000146c
 8008380:	20001480 	.word	0x20001480
 8008384:	2000149c 	.word	0x2000149c
 8008388:	200014b0 	.word	0x200014b0
 800838c:	200014c8 	.word	0x200014c8
 8008390:	20001494 	.word	0x20001494
 8008394:	20001498 	.word	0x20001498

08008398 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800839e:	e019      	b.n	80083d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80083a0:	f000 fde8 	bl	8008f74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083a4:	4b10      	ldr	r3, [pc, #64]	; (80083e8 <prvCheckTasksWaitingTermination+0x50>)
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	3304      	adds	r3, #4
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7fe fd15 	bl	8006de0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80083b6:	4b0d      	ldr	r3, [pc, #52]	; (80083ec <prvCheckTasksWaitingTermination+0x54>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	3b01      	subs	r3, #1
 80083bc:	4a0b      	ldr	r2, [pc, #44]	; (80083ec <prvCheckTasksWaitingTermination+0x54>)
 80083be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083c0:	4b0b      	ldr	r3, [pc, #44]	; (80083f0 <prvCheckTasksWaitingTermination+0x58>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	4a0a      	ldr	r2, [pc, #40]	; (80083f0 <prvCheckTasksWaitingTermination+0x58>)
 80083c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80083ca:	f000 fe03 	bl	8008fd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f810 	bl	80083f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083d4:	4b06      	ldr	r3, [pc, #24]	; (80083f0 <prvCheckTasksWaitingTermination+0x58>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1e1      	bne.n	80083a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80083dc:	bf00      	nop
 80083de:	bf00      	nop
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	200014b0 	.word	0x200014b0
 80083ec:	200014dc 	.word	0x200014dc
 80083f0:	200014c4 	.word	0x200014c4

080083f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	3354      	adds	r3, #84	; 0x54
 8008400:	4618      	mov	r0, r3
 8008402:	f001 ff5d 	bl	800a2c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800840c:	2b00      	cmp	r3, #0
 800840e:	d108      	bne.n	8008422 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008414:	4618      	mov	r0, r3
 8008416:	f000 ff9b 	bl	8009350 <vPortFree>
				vPortFree( pxTCB );
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 ff98 	bl	8009350 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008420:	e018      	b.n	8008454 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008428:	2b01      	cmp	r3, #1
 800842a:	d103      	bne.n	8008434 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 ff8f 	bl	8009350 <vPortFree>
	}
 8008432:	e00f      	b.n	8008454 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800843a:	2b02      	cmp	r3, #2
 800843c:	d00a      	beq.n	8008454 <prvDeleteTCB+0x60>
	__asm volatile
 800843e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008442:	f383 8811 	msr	BASEPRI, r3
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	60fb      	str	r3, [r7, #12]
}
 8008450:	bf00      	nop
 8008452:	e7fe      	b.n	8008452 <prvDeleteTCB+0x5e>
	}
 8008454:	bf00      	nop
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008462:	4b0c      	ldr	r3, [pc, #48]	; (8008494 <prvResetNextTaskUnblockTime+0x38>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d104      	bne.n	8008476 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800846c:	4b0a      	ldr	r3, [pc, #40]	; (8008498 <prvResetNextTaskUnblockTime+0x3c>)
 800846e:	f04f 32ff 	mov.w	r2, #4294967295
 8008472:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008474:	e008      	b.n	8008488 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008476:	4b07      	ldr	r3, [pc, #28]	; (8008494 <prvResetNextTaskUnblockTime+0x38>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	68db      	ldr	r3, [r3, #12]
 800847e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	4a04      	ldr	r2, [pc, #16]	; (8008498 <prvResetNextTaskUnblockTime+0x3c>)
 8008486:	6013      	str	r3, [r2, #0]
}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	20001494 	.word	0x20001494
 8008498:	200014fc 	.word	0x200014fc

0800849c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80084a2:	4b05      	ldr	r3, [pc, #20]	; (80084b8 <xTaskGetCurrentTaskHandle+0x1c>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80084a8:	687b      	ldr	r3, [r7, #4]
	}
 80084aa:	4618      	mov	r0, r3
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	20001008 	.word	0x20001008

080084bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80084c2:	4b0b      	ldr	r3, [pc, #44]	; (80084f0 <xTaskGetSchedulerState+0x34>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d102      	bne.n	80084d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80084ca:	2301      	movs	r3, #1
 80084cc:	607b      	str	r3, [r7, #4]
 80084ce:	e008      	b.n	80084e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084d0:	4b08      	ldr	r3, [pc, #32]	; (80084f4 <xTaskGetSchedulerState+0x38>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d102      	bne.n	80084de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80084d8:	2302      	movs	r3, #2
 80084da:	607b      	str	r3, [r7, #4]
 80084dc:	e001      	b.n	80084e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80084de:	2300      	movs	r3, #0
 80084e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80084e2:	687b      	ldr	r3, [r7, #4]
	}
 80084e4:	4618      	mov	r0, r3
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	200014e8 	.word	0x200014e8
 80084f4:	20001504 	.word	0x20001504

080084f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b086      	sub	sp, #24
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008504:	2300      	movs	r3, #0
 8008506:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d056      	beq.n	80085bc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800850e:	4b2e      	ldr	r3, [pc, #184]	; (80085c8 <xTaskPriorityDisinherit+0xd0>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	429a      	cmp	r2, r3
 8008516:	d00a      	beq.n	800852e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851c:	f383 8811 	msr	BASEPRI, r3
 8008520:	f3bf 8f6f 	isb	sy
 8008524:	f3bf 8f4f 	dsb	sy
 8008528:	60fb      	str	r3, [r7, #12]
}
 800852a:	bf00      	nop
 800852c:	e7fe      	b.n	800852c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10a      	bne.n	800854c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853a:	f383 8811 	msr	BASEPRI, r3
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	60bb      	str	r3, [r7, #8]
}
 8008548:	bf00      	nop
 800854a:	e7fe      	b.n	800854a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008550:	1e5a      	subs	r2, r3, #1
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800855e:	429a      	cmp	r2, r3
 8008560:	d02c      	beq.n	80085bc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008566:	2b00      	cmp	r3, #0
 8008568:	d128      	bne.n	80085bc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	3304      	adds	r3, #4
 800856e:	4618      	mov	r0, r3
 8008570:	f7fe fc36 	bl	8006de0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800858c:	4b0f      	ldr	r3, [pc, #60]	; (80085cc <xTaskPriorityDisinherit+0xd4>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	429a      	cmp	r2, r3
 8008592:	d903      	bls.n	800859c <xTaskPriorityDisinherit+0xa4>
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008598:	4a0c      	ldr	r2, [pc, #48]	; (80085cc <xTaskPriorityDisinherit+0xd4>)
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a0:	4613      	mov	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4a09      	ldr	r2, [pc, #36]	; (80085d0 <xTaskPriorityDisinherit+0xd8>)
 80085aa:	441a      	add	r2, r3
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	3304      	adds	r3, #4
 80085b0:	4619      	mov	r1, r3
 80085b2:	4610      	mov	r0, r2
 80085b4:	f7fe fbb7 	bl	8006d26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80085b8:	2301      	movs	r3, #1
 80085ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085bc:	697b      	ldr	r3, [r7, #20]
	}
 80085be:	4618      	mov	r0, r3
 80085c0:	3718      	adds	r7, #24
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	20001008 	.word	0x20001008
 80085cc:	200014e4 	.word	0x200014e4
 80085d0:	2000100c 	.word	0x2000100c

080085d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80085de:	4b21      	ldr	r3, [pc, #132]	; (8008664 <prvAddCurrentTaskToDelayedList+0x90>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085e4:	4b20      	ldr	r3, [pc, #128]	; (8008668 <prvAddCurrentTaskToDelayedList+0x94>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	3304      	adds	r3, #4
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe fbf8 	bl	8006de0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f6:	d10a      	bne.n	800860e <prvAddCurrentTaskToDelayedList+0x3a>
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d007      	beq.n	800860e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085fe:	4b1a      	ldr	r3, [pc, #104]	; (8008668 <prvAddCurrentTaskToDelayedList+0x94>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3304      	adds	r3, #4
 8008604:	4619      	mov	r1, r3
 8008606:	4819      	ldr	r0, [pc, #100]	; (800866c <prvAddCurrentTaskToDelayedList+0x98>)
 8008608:	f7fe fb8d 	bl	8006d26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800860c:	e026      	b.n	800865c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800860e:	68fa      	ldr	r2, [r7, #12]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	4413      	add	r3, r2
 8008614:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008616:	4b14      	ldr	r3, [pc, #80]	; (8008668 <prvAddCurrentTaskToDelayedList+0x94>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800861e:	68ba      	ldr	r2, [r7, #8]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	429a      	cmp	r2, r3
 8008624:	d209      	bcs.n	800863a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008626:	4b12      	ldr	r3, [pc, #72]	; (8008670 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	4b0f      	ldr	r3, [pc, #60]	; (8008668 <prvAddCurrentTaskToDelayedList+0x94>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3304      	adds	r3, #4
 8008630:	4619      	mov	r1, r3
 8008632:	4610      	mov	r0, r2
 8008634:	f7fe fb9b 	bl	8006d6e <vListInsert>
}
 8008638:	e010      	b.n	800865c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800863a:	4b0e      	ldr	r3, [pc, #56]	; (8008674 <prvAddCurrentTaskToDelayedList+0xa0>)
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	4b0a      	ldr	r3, [pc, #40]	; (8008668 <prvAddCurrentTaskToDelayedList+0x94>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3304      	adds	r3, #4
 8008644:	4619      	mov	r1, r3
 8008646:	4610      	mov	r0, r2
 8008648:	f7fe fb91 	bl	8006d6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800864c:	4b0a      	ldr	r3, [pc, #40]	; (8008678 <prvAddCurrentTaskToDelayedList+0xa4>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	429a      	cmp	r2, r3
 8008654:	d202      	bcs.n	800865c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008656:	4a08      	ldr	r2, [pc, #32]	; (8008678 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	6013      	str	r3, [r2, #0]
}
 800865c:	bf00      	nop
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	200014e0 	.word	0x200014e0
 8008668:	20001008 	.word	0x20001008
 800866c:	200014c8 	.word	0x200014c8
 8008670:	20001498 	.word	0x20001498
 8008674:	20001494 	.word	0x20001494
 8008678:	200014fc 	.word	0x200014fc

0800867c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b08a      	sub	sp, #40	; 0x28
 8008680:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008682:	2300      	movs	r3, #0
 8008684:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008686:	f000 fb07 	bl	8008c98 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800868a:	4b1c      	ldr	r3, [pc, #112]	; (80086fc <xTimerCreateTimerTask+0x80>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d021      	beq.n	80086d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008692:	2300      	movs	r3, #0
 8008694:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008696:	2300      	movs	r3, #0
 8008698:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800869a:	1d3a      	adds	r2, r7, #4
 800869c:	f107 0108 	add.w	r1, r7, #8
 80086a0:	f107 030c 	add.w	r3, r7, #12
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fe faf7 	bl	8006c98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80086aa:	6879      	ldr	r1, [r7, #4]
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	9202      	str	r2, [sp, #8]
 80086b2:	9301      	str	r3, [sp, #4]
 80086b4:	2302      	movs	r3, #2
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	2300      	movs	r3, #0
 80086ba:	460a      	mov	r2, r1
 80086bc:	4910      	ldr	r1, [pc, #64]	; (8008700 <xTimerCreateTimerTask+0x84>)
 80086be:	4811      	ldr	r0, [pc, #68]	; (8008704 <xTimerCreateTimerTask+0x88>)
 80086c0:	f7ff f8a4 	bl	800780c <xTaskCreateStatic>
 80086c4:	4603      	mov	r3, r0
 80086c6:	4a10      	ldr	r2, [pc, #64]	; (8008708 <xTimerCreateTimerTask+0x8c>)
 80086c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80086ca:	4b0f      	ldr	r3, [pc, #60]	; (8008708 <xTimerCreateTimerTask+0x8c>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80086d2:	2301      	movs	r3, #1
 80086d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d10a      	bne.n	80086f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80086dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	613b      	str	r3, [r7, #16]
}
 80086ee:	bf00      	nop
 80086f0:	e7fe      	b.n	80086f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80086f2:	697b      	ldr	r3, [r7, #20]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	20001538 	.word	0x20001538
 8008700:	0800c6c0 	.word	0x0800c6c0
 8008704:	08008841 	.word	0x08008841
 8008708:	2000153c 	.word	0x2000153c

0800870c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08a      	sub	sp, #40	; 0x28
 8008710:	af00      	add	r7, sp, #0
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800871a:	2300      	movs	r3, #0
 800871c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d10a      	bne.n	800873a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	623b      	str	r3, [r7, #32]
}
 8008736:	bf00      	nop
 8008738:	e7fe      	b.n	8008738 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800873a:	4b1a      	ldr	r3, [pc, #104]	; (80087a4 <xTimerGenericCommand+0x98>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d02a      	beq.n	8008798 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	2b05      	cmp	r3, #5
 8008752:	dc18      	bgt.n	8008786 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008754:	f7ff feb2 	bl	80084bc <xTaskGetSchedulerState>
 8008758:	4603      	mov	r3, r0
 800875a:	2b02      	cmp	r3, #2
 800875c:	d109      	bne.n	8008772 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800875e:	4b11      	ldr	r3, [pc, #68]	; (80087a4 <xTimerGenericCommand+0x98>)
 8008760:	6818      	ldr	r0, [r3, #0]
 8008762:	f107 0110 	add.w	r1, r7, #16
 8008766:	2300      	movs	r3, #0
 8008768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800876a:	f7fe fc67 	bl	800703c <xQueueGenericSend>
 800876e:	6278      	str	r0, [r7, #36]	; 0x24
 8008770:	e012      	b.n	8008798 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008772:	4b0c      	ldr	r3, [pc, #48]	; (80087a4 <xTimerGenericCommand+0x98>)
 8008774:	6818      	ldr	r0, [r3, #0]
 8008776:	f107 0110 	add.w	r1, r7, #16
 800877a:	2300      	movs	r3, #0
 800877c:	2200      	movs	r2, #0
 800877e:	f7fe fc5d 	bl	800703c <xQueueGenericSend>
 8008782:	6278      	str	r0, [r7, #36]	; 0x24
 8008784:	e008      	b.n	8008798 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008786:	4b07      	ldr	r3, [pc, #28]	; (80087a4 <xTimerGenericCommand+0x98>)
 8008788:	6818      	ldr	r0, [r3, #0]
 800878a:	f107 0110 	add.w	r1, r7, #16
 800878e:	2300      	movs	r3, #0
 8008790:	683a      	ldr	r2, [r7, #0]
 8008792:	f7fe fd51 	bl	8007238 <xQueueGenericSendFromISR>
 8008796:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800879a:	4618      	mov	r0, r3
 800879c:	3728      	adds	r7, #40	; 0x28
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	20001538 	.word	0x20001538

080087a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b088      	sub	sp, #32
 80087ac:	af02      	add	r7, sp, #8
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087b2:	4b22      	ldr	r3, [pc, #136]	; (800883c <prvProcessExpiredTimer+0x94>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68db      	ldr	r3, [r3, #12]
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	3304      	adds	r3, #4
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7fe fb0d 	bl	8006de0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087cc:	f003 0304 	and.w	r3, r3, #4
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d022      	beq.n	800881a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	699a      	ldr	r2, [r3, #24]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	18d1      	adds	r1, r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	6978      	ldr	r0, [r7, #20]
 80087e2:	f000 f8d1 	bl	8008988 <prvInsertTimerInActiveList>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d01f      	beq.n	800882c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80087ec:	2300      	movs	r3, #0
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	2300      	movs	r3, #0
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	2100      	movs	r1, #0
 80087f6:	6978      	ldr	r0, [r7, #20]
 80087f8:	f7ff ff88 	bl	800870c <xTimerGenericCommand>
 80087fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d113      	bne.n	800882c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008808:	f383 8811 	msr	BASEPRI, r3
 800880c:	f3bf 8f6f 	isb	sy
 8008810:	f3bf 8f4f 	dsb	sy
 8008814:	60fb      	str	r3, [r7, #12]
}
 8008816:	bf00      	nop
 8008818:	e7fe      	b.n	8008818 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008820:	f023 0301 	bic.w	r3, r3, #1
 8008824:	b2da      	uxtb	r2, r3
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	6a1b      	ldr	r3, [r3, #32]
 8008830:	6978      	ldr	r0, [r7, #20]
 8008832:	4798      	blx	r3
}
 8008834:	bf00      	nop
 8008836:	3718      	adds	r7, #24
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	20001530 	.word	0x20001530

08008840 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008848:	f107 0308 	add.w	r3, r7, #8
 800884c:	4618      	mov	r0, r3
 800884e:	f000 f857 	bl	8008900 <prvGetNextExpireTime>
 8008852:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	4619      	mov	r1, r3
 8008858:	68f8      	ldr	r0, [r7, #12]
 800885a:	f000 f803 	bl	8008864 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800885e:	f000 f8d5 	bl	8008a0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008862:	e7f1      	b.n	8008848 <prvTimerTask+0x8>

08008864 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800886e:	f7ff fa29 	bl	8007cc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008872:	f107 0308 	add.w	r3, r7, #8
 8008876:	4618      	mov	r0, r3
 8008878:	f000 f866 	bl	8008948 <prvSampleTimeNow>
 800887c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d130      	bne.n	80088e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d10a      	bne.n	80088a0 <prvProcessTimerOrBlockTask+0x3c>
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	429a      	cmp	r2, r3
 8008890:	d806      	bhi.n	80088a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008892:	f7ff fa25 	bl	8007ce0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008896:	68f9      	ldr	r1, [r7, #12]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7ff ff85 	bl	80087a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800889e:	e024      	b.n	80088ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d008      	beq.n	80088b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80088a6:	4b13      	ldr	r3, [pc, #76]	; (80088f4 <prvProcessTimerOrBlockTask+0x90>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <prvProcessTimerOrBlockTask+0x50>
 80088b0:	2301      	movs	r3, #1
 80088b2:	e000      	b.n	80088b6 <prvProcessTimerOrBlockTask+0x52>
 80088b4:	2300      	movs	r3, #0
 80088b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80088b8:	4b0f      	ldr	r3, [pc, #60]	; (80088f8 <prvProcessTimerOrBlockTask+0x94>)
 80088ba:	6818      	ldr	r0, [r3, #0]
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	1ad3      	subs	r3, r2, r3
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	4619      	mov	r1, r3
 80088c6:	f7fe ff6d 	bl	80077a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80088ca:	f7ff fa09 	bl	8007ce0 <xTaskResumeAll>
 80088ce:	4603      	mov	r3, r0
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10a      	bne.n	80088ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80088d4:	4b09      	ldr	r3, [pc, #36]	; (80088fc <prvProcessTimerOrBlockTask+0x98>)
 80088d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	f3bf 8f6f 	isb	sy
}
 80088e4:	e001      	b.n	80088ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80088e6:	f7ff f9fb 	bl	8007ce0 <xTaskResumeAll>
}
 80088ea:	bf00      	nop
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	20001534 	.word	0x20001534
 80088f8:	20001538 	.word	0x20001538
 80088fc:	e000ed04 	.word	0xe000ed04

08008900 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008908:	4b0e      	ldr	r3, [pc, #56]	; (8008944 <prvGetNextExpireTime+0x44>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d101      	bne.n	8008916 <prvGetNextExpireTime+0x16>
 8008912:	2201      	movs	r2, #1
 8008914:	e000      	b.n	8008918 <prvGetNextExpireTime+0x18>
 8008916:	2200      	movs	r2, #0
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d105      	bne.n	8008930 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008924:	4b07      	ldr	r3, [pc, #28]	; (8008944 <prvGetNextExpireTime+0x44>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	60fb      	str	r3, [r7, #12]
 800892e:	e001      	b.n	8008934 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008930:	2300      	movs	r3, #0
 8008932:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008934:	68fb      	ldr	r3, [r7, #12]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	20001530 	.word	0x20001530

08008948 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008950:	f7ff fa64 	bl	8007e1c <xTaskGetTickCount>
 8008954:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008956:	4b0b      	ldr	r3, [pc, #44]	; (8008984 <prvSampleTimeNow+0x3c>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	429a      	cmp	r2, r3
 800895e:	d205      	bcs.n	800896c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008960:	f000 f936 	bl	8008bd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	601a      	str	r2, [r3, #0]
 800896a:	e002      	b.n	8008972 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008972:	4a04      	ldr	r2, [pc, #16]	; (8008984 <prvSampleTimeNow+0x3c>)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008978:	68fb      	ldr	r3, [r7, #12]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20001540 	.word	0x20001540

08008988 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b086      	sub	sp, #24
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	607a      	str	r2, [r7, #4]
 8008994:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008996:	2300      	movs	r3, #0
 8008998:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d812      	bhi.n	80089d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	1ad2      	subs	r2, r2, r3
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d302      	bcc.n	80089c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80089bc:	2301      	movs	r3, #1
 80089be:	617b      	str	r3, [r7, #20]
 80089c0:	e01b      	b.n	80089fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80089c2:	4b10      	ldr	r3, [pc, #64]	; (8008a04 <prvInsertTimerInActiveList+0x7c>)
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	3304      	adds	r3, #4
 80089ca:	4619      	mov	r1, r3
 80089cc:	4610      	mov	r0, r2
 80089ce:	f7fe f9ce 	bl	8006d6e <vListInsert>
 80089d2:	e012      	b.n	80089fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d206      	bcs.n	80089ea <prvInsertTimerInActiveList+0x62>
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d302      	bcc.n	80089ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80089e4:	2301      	movs	r3, #1
 80089e6:	617b      	str	r3, [r7, #20]
 80089e8:	e007      	b.n	80089fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089ea:	4b07      	ldr	r3, [pc, #28]	; (8008a08 <prvInsertTimerInActiveList+0x80>)
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	3304      	adds	r3, #4
 80089f2:	4619      	mov	r1, r3
 80089f4:	4610      	mov	r0, r2
 80089f6:	f7fe f9ba 	bl	8006d6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80089fa:	697b      	ldr	r3, [r7, #20]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3718      	adds	r7, #24
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	20001534 	.word	0x20001534
 8008a08:	20001530 	.word	0x20001530

08008a0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b08e      	sub	sp, #56	; 0x38
 8008a10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a12:	e0ca      	b.n	8008baa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	da18      	bge.n	8008a4c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008a1a:	1d3b      	adds	r3, r7, #4
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10a      	bne.n	8008a3c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2a:	f383 8811 	msr	BASEPRI, r3
 8008a2e:	f3bf 8f6f 	isb	sy
 8008a32:	f3bf 8f4f 	dsb	sy
 8008a36:	61fb      	str	r3, [r7, #28]
}
 8008a38:	bf00      	nop
 8008a3a:	e7fe      	b.n	8008a3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a42:	6850      	ldr	r0, [r2, #4]
 8008a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a46:	6892      	ldr	r2, [r2, #8]
 8008a48:	4611      	mov	r1, r2
 8008a4a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f2c0 80aa 	blt.w	8008ba8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5a:	695b      	ldr	r3, [r3, #20]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d004      	beq.n	8008a6a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a62:	3304      	adds	r3, #4
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7fe f9bb 	bl	8006de0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008a6a:	463b      	mov	r3, r7
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7ff ff6b 	bl	8008948 <prvSampleTimeNow>
 8008a72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b09      	cmp	r3, #9
 8008a78:	f200 8097 	bhi.w	8008baa <prvProcessReceivedCommands+0x19e>
 8008a7c:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <prvProcessReceivedCommands+0x78>)
 8008a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a82:	bf00      	nop
 8008a84:	08008aad 	.word	0x08008aad
 8008a88:	08008aad 	.word	0x08008aad
 8008a8c:	08008aad 	.word	0x08008aad
 8008a90:	08008b21 	.word	0x08008b21
 8008a94:	08008b35 	.word	0x08008b35
 8008a98:	08008b7f 	.word	0x08008b7f
 8008a9c:	08008aad 	.word	0x08008aad
 8008aa0:	08008aad 	.word	0x08008aad
 8008aa4:	08008b21 	.word	0x08008b21
 8008aa8:	08008b35 	.word	0x08008b35
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ab2:	f043 0301 	orr.w	r3, r3, #1
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	18d1      	adds	r1, r2, r3
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008acc:	f7ff ff5c 	bl	8008988 <prvInsertTimerInActiveList>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d069      	beq.n	8008baa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008adc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ae4:	f003 0304 	and.w	r3, r3, #4
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d05e      	beq.n	8008baa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008aec:	68ba      	ldr	r2, [r7, #8]
 8008aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	441a      	add	r2, r3
 8008af4:	2300      	movs	r3, #0
 8008af6:	9300      	str	r3, [sp, #0]
 8008af8:	2300      	movs	r3, #0
 8008afa:	2100      	movs	r1, #0
 8008afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008afe:	f7ff fe05 	bl	800870c <xTimerGenericCommand>
 8008b02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008b04:	6a3b      	ldr	r3, [r7, #32]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d14f      	bne.n	8008baa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	61bb      	str	r3, [r7, #24]
}
 8008b1c:	bf00      	nop
 8008b1e:	e7fe      	b.n	8008b1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b26:	f023 0301 	bic.w	r3, r3, #1
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008b32:	e03a      	b.n	8008baa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b3a:	f043 0301 	orr.w	r3, r3, #1
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008b46:	68ba      	ldr	r2, [r7, #8]
 8008b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10a      	bne.n	8008b6a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b58:	f383 8811 	msr	BASEPRI, r3
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	617b      	str	r3, [r7, #20]
}
 8008b66:	bf00      	nop
 8008b68:	e7fe      	b.n	8008b68 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6c:	699a      	ldr	r2, [r3, #24]
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b70:	18d1      	adds	r1, r2, r3
 8008b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b78:	f7ff ff06 	bl	8008988 <prvInsertTimerInActiveList>
					break;
 8008b7c:	e015      	b.n	8008baa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b84:	f003 0302 	and.w	r3, r3, #2
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d103      	bne.n	8008b94 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008b8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b8e:	f000 fbdf 	bl	8009350 <vPortFree>
 8008b92:	e00a      	b.n	8008baa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b9a:	f023 0301 	bic.w	r3, r3, #1
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008ba6:	e000      	b.n	8008baa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008ba8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008baa:	4b08      	ldr	r3, [pc, #32]	; (8008bcc <prvProcessReceivedCommands+0x1c0>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	1d39      	adds	r1, r7, #4
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fe fbdc 	bl	8007370 <xQueueReceive>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f47f af2a 	bne.w	8008a14 <prvProcessReceivedCommands+0x8>
	}
}
 8008bc0:	bf00      	nop
 8008bc2:	bf00      	nop
 8008bc4:	3730      	adds	r7, #48	; 0x30
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	20001538 	.word	0x20001538

08008bd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b088      	sub	sp, #32
 8008bd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008bd6:	e048      	b.n	8008c6a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008bd8:	4b2d      	ldr	r3, [pc, #180]	; (8008c90 <prvSwitchTimerLists+0xc0>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008be2:	4b2b      	ldr	r3, [pc, #172]	; (8008c90 <prvSwitchTimerLists+0xc0>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	3304      	adds	r3, #4
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7fe f8f5 	bl	8006de0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c04:	f003 0304 	and.w	r3, r3, #4
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d02e      	beq.n	8008c6a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	4413      	add	r3, r2
 8008c14:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d90e      	bls.n	8008c3c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c2a:	4b19      	ldr	r3, [pc, #100]	; (8008c90 <prvSwitchTimerLists+0xc0>)
 8008c2c:	681a      	ldr	r2, [r3, #0]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	3304      	adds	r3, #4
 8008c32:	4619      	mov	r1, r3
 8008c34:	4610      	mov	r0, r2
 8008c36:	f7fe f89a 	bl	8006d6e <vListInsert>
 8008c3a:	e016      	b.n	8008c6a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	9300      	str	r3, [sp, #0]
 8008c40:	2300      	movs	r3, #0
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	2100      	movs	r1, #0
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f7ff fd60 	bl	800870c <xTimerGenericCommand>
 8008c4c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d10a      	bne.n	8008c6a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	603b      	str	r3, [r7, #0]
}
 8008c66:	bf00      	nop
 8008c68:	e7fe      	b.n	8008c68 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c6a:	4b09      	ldr	r3, [pc, #36]	; (8008c90 <prvSwitchTimerLists+0xc0>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1b1      	bne.n	8008bd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008c74:	4b06      	ldr	r3, [pc, #24]	; (8008c90 <prvSwitchTimerLists+0xc0>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008c7a:	4b06      	ldr	r3, [pc, #24]	; (8008c94 <prvSwitchTimerLists+0xc4>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a04      	ldr	r2, [pc, #16]	; (8008c90 <prvSwitchTimerLists+0xc0>)
 8008c80:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008c82:	4a04      	ldr	r2, [pc, #16]	; (8008c94 <prvSwitchTimerLists+0xc4>)
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	6013      	str	r3, [r2, #0]
}
 8008c88:	bf00      	nop
 8008c8a:	3718      	adds	r7, #24
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	20001530 	.word	0x20001530
 8008c94:	20001534 	.word	0x20001534

08008c98 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008c9e:	f000 f969 	bl	8008f74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008ca2:	4b15      	ldr	r3, [pc, #84]	; (8008cf8 <prvCheckForValidListAndQueue+0x60>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d120      	bne.n	8008cec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008caa:	4814      	ldr	r0, [pc, #80]	; (8008cfc <prvCheckForValidListAndQueue+0x64>)
 8008cac:	f7fe f80e 	bl	8006ccc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008cb0:	4813      	ldr	r0, [pc, #76]	; (8008d00 <prvCheckForValidListAndQueue+0x68>)
 8008cb2:	f7fe f80b 	bl	8006ccc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008cb6:	4b13      	ldr	r3, [pc, #76]	; (8008d04 <prvCheckForValidListAndQueue+0x6c>)
 8008cb8:	4a10      	ldr	r2, [pc, #64]	; (8008cfc <prvCheckForValidListAndQueue+0x64>)
 8008cba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008cbc:	4b12      	ldr	r3, [pc, #72]	; (8008d08 <prvCheckForValidListAndQueue+0x70>)
 8008cbe:	4a10      	ldr	r2, [pc, #64]	; (8008d00 <prvCheckForValidListAndQueue+0x68>)
 8008cc0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	4b11      	ldr	r3, [pc, #68]	; (8008d0c <prvCheckForValidListAndQueue+0x74>)
 8008cc8:	4a11      	ldr	r2, [pc, #68]	; (8008d10 <prvCheckForValidListAndQueue+0x78>)
 8008cca:	2110      	movs	r1, #16
 8008ccc:	200a      	movs	r0, #10
 8008cce:	f7fe f919 	bl	8006f04 <xQueueGenericCreateStatic>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	4a08      	ldr	r2, [pc, #32]	; (8008cf8 <prvCheckForValidListAndQueue+0x60>)
 8008cd6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008cd8:	4b07      	ldr	r3, [pc, #28]	; (8008cf8 <prvCheckForValidListAndQueue+0x60>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d005      	beq.n	8008cec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ce0:	4b05      	ldr	r3, [pc, #20]	; (8008cf8 <prvCheckForValidListAndQueue+0x60>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	490b      	ldr	r1, [pc, #44]	; (8008d14 <prvCheckForValidListAndQueue+0x7c>)
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fe fd32 	bl	8007750 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008cec:	f000 f972 	bl	8008fd4 <vPortExitCritical>
}
 8008cf0:	bf00      	nop
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	20001538 	.word	0x20001538
 8008cfc:	20001508 	.word	0x20001508
 8008d00:	2000151c 	.word	0x2000151c
 8008d04:	20001530 	.word	0x20001530
 8008d08:	20001534 	.word	0x20001534
 8008d0c:	200015e4 	.word	0x200015e4
 8008d10:	20001544 	.word	0x20001544
 8008d14:	0800c6c8 	.word	0x0800c6c8

08008d18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	3b04      	subs	r3, #4
 8008d28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008d30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	3b04      	subs	r3, #4
 8008d36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	f023 0201 	bic.w	r2, r3, #1
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	3b04      	subs	r3, #4
 8008d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008d48:	4a0c      	ldr	r2, [pc, #48]	; (8008d7c <pxPortInitialiseStack+0x64>)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	3b14      	subs	r3, #20
 8008d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008d54:	687a      	ldr	r2, [r7, #4]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	3b04      	subs	r3, #4
 8008d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f06f 0202 	mvn.w	r2, #2
 8008d66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	3b20      	subs	r3, #32
 8008d6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3714      	adds	r7, #20
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	08008d81 	.word	0x08008d81

08008d80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d86:	2300      	movs	r3, #0
 8008d88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d8a:	4b12      	ldr	r3, [pc, #72]	; (8008dd4 <prvTaskExitError+0x54>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d92:	d00a      	beq.n	8008daa <prvTaskExitError+0x2a>
	__asm volatile
 8008d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	60fb      	str	r3, [r7, #12]
}
 8008da6:	bf00      	nop
 8008da8:	e7fe      	b.n	8008da8 <prvTaskExitError+0x28>
	__asm volatile
 8008daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dae:	f383 8811 	msr	BASEPRI, r3
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	60bb      	str	r3, [r7, #8]
}
 8008dbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008dbe:	bf00      	nop
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d0fc      	beq.n	8008dc0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008dc6:	bf00      	nop
 8008dc8:	bf00      	nop
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr
 8008dd4:	2000000c 	.word	0x2000000c
	...

08008de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008de0:	4b07      	ldr	r3, [pc, #28]	; (8008e00 <pxCurrentTCBConst2>)
 8008de2:	6819      	ldr	r1, [r3, #0]
 8008de4:	6808      	ldr	r0, [r1, #0]
 8008de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dea:	f380 8809 	msr	PSP, r0
 8008dee:	f3bf 8f6f 	isb	sy
 8008df2:	f04f 0000 	mov.w	r0, #0
 8008df6:	f380 8811 	msr	BASEPRI, r0
 8008dfa:	4770      	bx	lr
 8008dfc:	f3af 8000 	nop.w

08008e00 <pxCurrentTCBConst2>:
 8008e00:	20001008 	.word	0x20001008
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e04:	bf00      	nop
 8008e06:	bf00      	nop

08008e08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e08:	4808      	ldr	r0, [pc, #32]	; (8008e2c <prvPortStartFirstTask+0x24>)
 8008e0a:	6800      	ldr	r0, [r0, #0]
 8008e0c:	6800      	ldr	r0, [r0, #0]
 8008e0e:	f380 8808 	msr	MSP, r0
 8008e12:	f04f 0000 	mov.w	r0, #0
 8008e16:	f380 8814 	msr	CONTROL, r0
 8008e1a:	b662      	cpsie	i
 8008e1c:	b661      	cpsie	f
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	df00      	svc	0
 8008e28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008e2a:	bf00      	nop
 8008e2c:	e000ed08 	.word	0xe000ed08

08008e30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b086      	sub	sp, #24
 8008e34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e36:	4b46      	ldr	r3, [pc, #280]	; (8008f50 <xPortStartScheduler+0x120>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a46      	ldr	r2, [pc, #280]	; (8008f54 <xPortStartScheduler+0x124>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d10a      	bne.n	8008e56 <xPortStartScheduler+0x26>
	__asm volatile
 8008e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e44:	f383 8811 	msr	BASEPRI, r3
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	613b      	str	r3, [r7, #16]
}
 8008e52:	bf00      	nop
 8008e54:	e7fe      	b.n	8008e54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e56:	4b3e      	ldr	r3, [pc, #248]	; (8008f50 <xPortStartScheduler+0x120>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a3f      	ldr	r2, [pc, #252]	; (8008f58 <xPortStartScheduler+0x128>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d10a      	bne.n	8008e76 <xPortStartScheduler+0x46>
	__asm volatile
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	60fb      	str	r3, [r7, #12]
}
 8008e72:	bf00      	nop
 8008e74:	e7fe      	b.n	8008e74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e76:	4b39      	ldr	r3, [pc, #228]	; (8008f5c <xPortStartScheduler+0x12c>)
 8008e78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	22ff      	movs	r2, #255	; 0xff
 8008e86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e90:	78fb      	ldrb	r3, [r7, #3]
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008e98:	b2da      	uxtb	r2, r3
 8008e9a:	4b31      	ldr	r3, [pc, #196]	; (8008f60 <xPortStartScheduler+0x130>)
 8008e9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e9e:	4b31      	ldr	r3, [pc, #196]	; (8008f64 <xPortStartScheduler+0x134>)
 8008ea0:	2207      	movs	r2, #7
 8008ea2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ea4:	e009      	b.n	8008eba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008ea6:	4b2f      	ldr	r3, [pc, #188]	; (8008f64 <xPortStartScheduler+0x134>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	4a2d      	ldr	r2, [pc, #180]	; (8008f64 <xPortStartScheduler+0x134>)
 8008eae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008eb0:	78fb      	ldrb	r3, [r7, #3]
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	005b      	lsls	r3, r3, #1
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008eba:	78fb      	ldrb	r3, [r7, #3]
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec2:	2b80      	cmp	r3, #128	; 0x80
 8008ec4:	d0ef      	beq.n	8008ea6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ec6:	4b27      	ldr	r3, [pc, #156]	; (8008f64 <xPortStartScheduler+0x134>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f1c3 0307 	rsb	r3, r3, #7
 8008ece:	2b04      	cmp	r3, #4
 8008ed0:	d00a      	beq.n	8008ee8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	60bb      	str	r3, [r7, #8]
}
 8008ee4:	bf00      	nop
 8008ee6:	e7fe      	b.n	8008ee6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ee8:	4b1e      	ldr	r3, [pc, #120]	; (8008f64 <xPortStartScheduler+0x134>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	021b      	lsls	r3, r3, #8
 8008eee:	4a1d      	ldr	r2, [pc, #116]	; (8008f64 <xPortStartScheduler+0x134>)
 8008ef0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ef2:	4b1c      	ldr	r3, [pc, #112]	; (8008f64 <xPortStartScheduler+0x134>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008efa:	4a1a      	ldr	r2, [pc, #104]	; (8008f64 <xPortStartScheduler+0x134>)
 8008efc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	b2da      	uxtb	r2, r3
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f06:	4b18      	ldr	r3, [pc, #96]	; (8008f68 <xPortStartScheduler+0x138>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a17      	ldr	r2, [pc, #92]	; (8008f68 <xPortStartScheduler+0x138>)
 8008f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f12:	4b15      	ldr	r3, [pc, #84]	; (8008f68 <xPortStartScheduler+0x138>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a14      	ldr	r2, [pc, #80]	; (8008f68 <xPortStartScheduler+0x138>)
 8008f18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f1e:	f000 f8dd 	bl	80090dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008f22:	4b12      	ldr	r3, [pc, #72]	; (8008f6c <xPortStartScheduler+0x13c>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008f28:	f000 f8fc 	bl	8009124 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f2c:	4b10      	ldr	r3, [pc, #64]	; (8008f70 <xPortStartScheduler+0x140>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a0f      	ldr	r2, [pc, #60]	; (8008f70 <xPortStartScheduler+0x140>)
 8008f32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008f36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008f38:	f7ff ff66 	bl	8008e08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008f3c:	f7ff f838 	bl	8007fb0 <vTaskSwitchContext>
	prvTaskExitError();
 8008f40:	f7ff ff1e 	bl	8008d80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3718      	adds	r7, #24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	e000ed00 	.word	0xe000ed00
 8008f54:	410fc271 	.word	0x410fc271
 8008f58:	410fc270 	.word	0x410fc270
 8008f5c:	e000e400 	.word	0xe000e400
 8008f60:	20001634 	.word	0x20001634
 8008f64:	20001638 	.word	0x20001638
 8008f68:	e000ed20 	.word	0xe000ed20
 8008f6c:	2000000c 	.word	0x2000000c
 8008f70:	e000ef34 	.word	0xe000ef34

08008f74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
	__asm volatile
 8008f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7e:	f383 8811 	msr	BASEPRI, r3
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	607b      	str	r3, [r7, #4]
}
 8008f8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f8e:	4b0f      	ldr	r3, [pc, #60]	; (8008fcc <vPortEnterCritical+0x58>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	3301      	adds	r3, #1
 8008f94:	4a0d      	ldr	r2, [pc, #52]	; (8008fcc <vPortEnterCritical+0x58>)
 8008f96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f98:	4b0c      	ldr	r3, [pc, #48]	; (8008fcc <vPortEnterCritical+0x58>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d10f      	bne.n	8008fc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008fa0:	4b0b      	ldr	r3, [pc, #44]	; (8008fd0 <vPortEnterCritical+0x5c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00a      	beq.n	8008fc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fae:	f383 8811 	msr	BASEPRI, r3
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	f3bf 8f4f 	dsb	sy
 8008fba:	603b      	str	r3, [r7, #0]
}
 8008fbc:	bf00      	nop
 8008fbe:	e7fe      	b.n	8008fbe <vPortEnterCritical+0x4a>
	}
}
 8008fc0:	bf00      	nop
 8008fc2:	370c      	adds	r7, #12
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr
 8008fcc:	2000000c 	.word	0x2000000c
 8008fd0:	e000ed04 	.word	0xe000ed04

08008fd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008fda:	4b12      	ldr	r3, [pc, #72]	; (8009024 <vPortExitCritical+0x50>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d10a      	bne.n	8008ff8 <vPortExitCritical+0x24>
	__asm volatile
 8008fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe6:	f383 8811 	msr	BASEPRI, r3
 8008fea:	f3bf 8f6f 	isb	sy
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	607b      	str	r3, [r7, #4]
}
 8008ff4:	bf00      	nop
 8008ff6:	e7fe      	b.n	8008ff6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ff8:	4b0a      	ldr	r3, [pc, #40]	; (8009024 <vPortExitCritical+0x50>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	4a09      	ldr	r2, [pc, #36]	; (8009024 <vPortExitCritical+0x50>)
 8009000:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009002:	4b08      	ldr	r3, [pc, #32]	; (8009024 <vPortExitCritical+0x50>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d105      	bne.n	8009016 <vPortExitCritical+0x42>
 800900a:	2300      	movs	r3, #0
 800900c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	f383 8811 	msr	BASEPRI, r3
}
 8009014:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009016:	bf00      	nop
 8009018:	370c      	adds	r7, #12
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	2000000c 	.word	0x2000000c
	...

08009030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009030:	f3ef 8009 	mrs	r0, PSP
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	4b15      	ldr	r3, [pc, #84]	; (8009090 <pxCurrentTCBConst>)
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	f01e 0f10 	tst.w	lr, #16
 8009040:	bf08      	it	eq
 8009042:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009046:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904a:	6010      	str	r0, [r2, #0]
 800904c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009050:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009054:	f380 8811 	msr	BASEPRI, r0
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f7fe ffa6 	bl	8007fb0 <vTaskSwitchContext>
 8009064:	f04f 0000 	mov.w	r0, #0
 8009068:	f380 8811 	msr	BASEPRI, r0
 800906c:	bc09      	pop	{r0, r3}
 800906e:	6819      	ldr	r1, [r3, #0]
 8009070:	6808      	ldr	r0, [r1, #0]
 8009072:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009076:	f01e 0f10 	tst.w	lr, #16
 800907a:	bf08      	it	eq
 800907c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009080:	f380 8809 	msr	PSP, r0
 8009084:	f3bf 8f6f 	isb	sy
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	f3af 8000 	nop.w

08009090 <pxCurrentTCBConst>:
 8009090:	20001008 	.word	0x20001008
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009094:	bf00      	nop
 8009096:	bf00      	nop

08009098 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	607b      	str	r3, [r7, #4]
}
 80090b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80090b2:	f7fe fec3 	bl	8007e3c <xTaskIncrementTick>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d003      	beq.n	80090c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80090bc:	4b06      	ldr	r3, [pc, #24]	; (80090d8 <xPortSysTickHandler+0x40>)
 80090be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090c2:	601a      	str	r2, [r3, #0]
 80090c4:	2300      	movs	r3, #0
 80090c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	f383 8811 	msr	BASEPRI, r3
}
 80090ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80090d0:	bf00      	nop
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	e000ed04 	.word	0xe000ed04

080090dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80090dc:	b480      	push	{r7}
 80090de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80090e0:	4b0b      	ldr	r3, [pc, #44]	; (8009110 <vPortSetupTimerInterrupt+0x34>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80090e6:	4b0b      	ldr	r3, [pc, #44]	; (8009114 <vPortSetupTimerInterrupt+0x38>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80090ec:	4b0a      	ldr	r3, [pc, #40]	; (8009118 <vPortSetupTimerInterrupt+0x3c>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a0a      	ldr	r2, [pc, #40]	; (800911c <vPortSetupTimerInterrupt+0x40>)
 80090f2:	fba2 2303 	umull	r2, r3, r2, r3
 80090f6:	099b      	lsrs	r3, r3, #6
 80090f8:	4a09      	ldr	r2, [pc, #36]	; (8009120 <vPortSetupTimerInterrupt+0x44>)
 80090fa:	3b01      	subs	r3, #1
 80090fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80090fe:	4b04      	ldr	r3, [pc, #16]	; (8009110 <vPortSetupTimerInterrupt+0x34>)
 8009100:	2207      	movs	r2, #7
 8009102:	601a      	str	r2, [r3, #0]
}
 8009104:	bf00      	nop
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	e000e010 	.word	0xe000e010
 8009114:	e000e018 	.word	0xe000e018
 8009118:	20000000 	.word	0x20000000
 800911c:	10624dd3 	.word	0x10624dd3
 8009120:	e000e014 	.word	0xe000e014

08009124 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009124:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009134 <vPortEnableVFP+0x10>
 8009128:	6801      	ldr	r1, [r0, #0]
 800912a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800912e:	6001      	str	r1, [r0, #0]
 8009130:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009132:	bf00      	nop
 8009134:	e000ed88 	.word	0xe000ed88

08009138 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800913e:	f3ef 8305 	mrs	r3, IPSR
 8009142:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2b0f      	cmp	r3, #15
 8009148:	d914      	bls.n	8009174 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800914a:	4a17      	ldr	r2, [pc, #92]	; (80091a8 <vPortValidateInterruptPriority+0x70>)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4413      	add	r3, r2
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009154:	4b15      	ldr	r3, [pc, #84]	; (80091ac <vPortValidateInterruptPriority+0x74>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	7afa      	ldrb	r2, [r7, #11]
 800915a:	429a      	cmp	r2, r3
 800915c:	d20a      	bcs.n	8009174 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800915e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009162:	f383 8811 	msr	BASEPRI, r3
 8009166:	f3bf 8f6f 	isb	sy
 800916a:	f3bf 8f4f 	dsb	sy
 800916e:	607b      	str	r3, [r7, #4]
}
 8009170:	bf00      	nop
 8009172:	e7fe      	b.n	8009172 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009174:	4b0e      	ldr	r3, [pc, #56]	; (80091b0 <vPortValidateInterruptPriority+0x78>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800917c:	4b0d      	ldr	r3, [pc, #52]	; (80091b4 <vPortValidateInterruptPriority+0x7c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	429a      	cmp	r2, r3
 8009182:	d90a      	bls.n	800919a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	603b      	str	r3, [r7, #0]
}
 8009196:	bf00      	nop
 8009198:	e7fe      	b.n	8009198 <vPortValidateInterruptPriority+0x60>
	}
 800919a:	bf00      	nop
 800919c:	3714      	adds	r7, #20
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	e000e3f0 	.word	0xe000e3f0
 80091ac:	20001634 	.word	0x20001634
 80091b0:	e000ed0c 	.word	0xe000ed0c
 80091b4:	20001638 	.word	0x20001638

080091b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b08a      	sub	sp, #40	; 0x28
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80091c0:	2300      	movs	r3, #0
 80091c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80091c4:	f7fe fd7e 	bl	8007cc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80091c8:	4b5b      	ldr	r3, [pc, #364]	; (8009338 <pvPortMalloc+0x180>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d101      	bne.n	80091d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80091d0:	f000 f920 	bl	8009414 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80091d4:	4b59      	ldr	r3, [pc, #356]	; (800933c <pvPortMalloc+0x184>)
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4013      	ands	r3, r2
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f040 8093 	bne.w	8009308 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d01d      	beq.n	8009224 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80091e8:	2208      	movs	r2, #8
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	4413      	add	r3, r2
 80091ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f003 0307 	and.w	r3, r3, #7
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d014      	beq.n	8009224 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f023 0307 	bic.w	r3, r3, #7
 8009200:	3308      	adds	r3, #8
 8009202:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f003 0307 	and.w	r3, r3, #7
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00a      	beq.n	8009224 <pvPortMalloc+0x6c>
	__asm volatile
 800920e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009212:	f383 8811 	msr	BASEPRI, r3
 8009216:	f3bf 8f6f 	isb	sy
 800921a:	f3bf 8f4f 	dsb	sy
 800921e:	617b      	str	r3, [r7, #20]
}
 8009220:	bf00      	nop
 8009222:	e7fe      	b.n	8009222 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d06e      	beq.n	8009308 <pvPortMalloc+0x150>
 800922a:	4b45      	ldr	r3, [pc, #276]	; (8009340 <pvPortMalloc+0x188>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	429a      	cmp	r2, r3
 8009232:	d869      	bhi.n	8009308 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009234:	4b43      	ldr	r3, [pc, #268]	; (8009344 <pvPortMalloc+0x18c>)
 8009236:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009238:	4b42      	ldr	r3, [pc, #264]	; (8009344 <pvPortMalloc+0x18c>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800923e:	e004      	b.n	800924a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800924a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	429a      	cmp	r2, r3
 8009252:	d903      	bls.n	800925c <pvPortMalloc+0xa4>
 8009254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1f1      	bne.n	8009240 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800925c:	4b36      	ldr	r3, [pc, #216]	; (8009338 <pvPortMalloc+0x180>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009262:	429a      	cmp	r2, r3
 8009264:	d050      	beq.n	8009308 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009266:	6a3b      	ldr	r3, [r7, #32]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2208      	movs	r2, #8
 800926c:	4413      	add	r3, r2
 800926e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	6a3b      	ldr	r3, [r7, #32]
 8009276:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	1ad2      	subs	r2, r2, r3
 8009280:	2308      	movs	r3, #8
 8009282:	005b      	lsls	r3, r3, #1
 8009284:	429a      	cmp	r2, r3
 8009286:	d91f      	bls.n	80092c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4413      	add	r3, r2
 800928e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	f003 0307 	and.w	r3, r3, #7
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00a      	beq.n	80092b0 <pvPortMalloc+0xf8>
	__asm volatile
 800929a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	613b      	str	r3, [r7, #16]
}
 80092ac:	bf00      	nop
 80092ae:	e7fe      	b.n	80092ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	685a      	ldr	r2, [r3, #4]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	1ad2      	subs	r2, r2, r3
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	687a      	ldr	r2, [r7, #4]
 80092c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80092c2:	69b8      	ldr	r0, [r7, #24]
 80092c4:	f000 f908 	bl	80094d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80092c8:	4b1d      	ldr	r3, [pc, #116]	; (8009340 <pvPortMalloc+0x188>)
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	4a1b      	ldr	r2, [pc, #108]	; (8009340 <pvPortMalloc+0x188>)
 80092d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80092d6:	4b1a      	ldr	r3, [pc, #104]	; (8009340 <pvPortMalloc+0x188>)
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	4b1b      	ldr	r3, [pc, #108]	; (8009348 <pvPortMalloc+0x190>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d203      	bcs.n	80092ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80092e2:	4b17      	ldr	r3, [pc, #92]	; (8009340 <pvPortMalloc+0x188>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	4a18      	ldr	r2, [pc, #96]	; (8009348 <pvPortMalloc+0x190>)
 80092e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80092ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ec:	685a      	ldr	r2, [r3, #4]
 80092ee:	4b13      	ldr	r3, [pc, #76]	; (800933c <pvPortMalloc+0x184>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	431a      	orrs	r2, r3
 80092f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	2200      	movs	r2, #0
 80092fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80092fe:	4b13      	ldr	r3, [pc, #76]	; (800934c <pvPortMalloc+0x194>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	3301      	adds	r3, #1
 8009304:	4a11      	ldr	r2, [pc, #68]	; (800934c <pvPortMalloc+0x194>)
 8009306:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009308:	f7fe fcea 	bl	8007ce0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	f003 0307 	and.w	r3, r3, #7
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00a      	beq.n	800932c <pvPortMalloc+0x174>
	__asm volatile
 8009316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931a:	f383 8811 	msr	BASEPRI, r3
 800931e:	f3bf 8f6f 	isb	sy
 8009322:	f3bf 8f4f 	dsb	sy
 8009326:	60fb      	str	r3, [r7, #12]
}
 8009328:	bf00      	nop
 800932a:	e7fe      	b.n	800932a <pvPortMalloc+0x172>
	return pvReturn;
 800932c:	69fb      	ldr	r3, [r7, #28]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3728      	adds	r7, #40	; 0x28
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	20005244 	.word	0x20005244
 800933c:	20005258 	.word	0x20005258
 8009340:	20005248 	.word	0x20005248
 8009344:	2000523c 	.word	0x2000523c
 8009348:	2000524c 	.word	0x2000524c
 800934c:	20005250 	.word	0x20005250

08009350 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d04d      	beq.n	80093fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009362:	2308      	movs	r3, #8
 8009364:	425b      	negs	r3, r3
 8009366:	697a      	ldr	r2, [r7, #20]
 8009368:	4413      	add	r3, r2
 800936a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	685a      	ldr	r2, [r3, #4]
 8009374:	4b24      	ldr	r3, [pc, #144]	; (8009408 <vPortFree+0xb8>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4013      	ands	r3, r2
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10a      	bne.n	8009394 <vPortFree+0x44>
	__asm volatile
 800937e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	60fb      	str	r3, [r7, #12]
}
 8009390:	bf00      	nop
 8009392:	e7fe      	b.n	8009392 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00a      	beq.n	80093b2 <vPortFree+0x62>
	__asm volatile
 800939c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	60bb      	str	r3, [r7, #8]
}
 80093ae:	bf00      	nop
 80093b0:	e7fe      	b.n	80093b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	4b14      	ldr	r3, [pc, #80]	; (8009408 <vPortFree+0xb8>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4013      	ands	r3, r2
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d01e      	beq.n	80093fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d11a      	bne.n	80093fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	685a      	ldr	r2, [r3, #4]
 80093cc:	4b0e      	ldr	r3, [pc, #56]	; (8009408 <vPortFree+0xb8>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	43db      	mvns	r3, r3
 80093d2:	401a      	ands	r2, r3
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80093d8:	f7fe fc74 	bl	8007cc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	685a      	ldr	r2, [r3, #4]
 80093e0:	4b0a      	ldr	r3, [pc, #40]	; (800940c <vPortFree+0xbc>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4413      	add	r3, r2
 80093e6:	4a09      	ldr	r2, [pc, #36]	; (800940c <vPortFree+0xbc>)
 80093e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80093ea:	6938      	ldr	r0, [r7, #16]
 80093ec:	f000 f874 	bl	80094d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80093f0:	4b07      	ldr	r3, [pc, #28]	; (8009410 <vPortFree+0xc0>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	3301      	adds	r3, #1
 80093f6:	4a06      	ldr	r2, [pc, #24]	; (8009410 <vPortFree+0xc0>)
 80093f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80093fa:	f7fe fc71 	bl	8007ce0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80093fe:	bf00      	nop
 8009400:	3718      	adds	r7, #24
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	20005258 	.word	0x20005258
 800940c:	20005248 	.word	0x20005248
 8009410:	20005254 	.word	0x20005254

08009414 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800941a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800941e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009420:	4b27      	ldr	r3, [pc, #156]	; (80094c0 <prvHeapInit+0xac>)
 8009422:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f003 0307 	and.w	r3, r3, #7
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00c      	beq.n	8009448 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	3307      	adds	r3, #7
 8009432:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f023 0307 	bic.w	r3, r3, #7
 800943a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	4a1f      	ldr	r2, [pc, #124]	; (80094c0 <prvHeapInit+0xac>)
 8009444:	4413      	add	r3, r2
 8009446:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800944c:	4a1d      	ldr	r2, [pc, #116]	; (80094c4 <prvHeapInit+0xb0>)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009452:	4b1c      	ldr	r3, [pc, #112]	; (80094c4 <prvHeapInit+0xb0>)
 8009454:	2200      	movs	r2, #0
 8009456:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	4413      	add	r3, r2
 800945e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009460:	2208      	movs	r2, #8
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	1a9b      	subs	r3, r3, r2
 8009466:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f023 0307 	bic.w	r3, r3, #7
 800946e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	4a15      	ldr	r2, [pc, #84]	; (80094c8 <prvHeapInit+0xb4>)
 8009474:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009476:	4b14      	ldr	r3, [pc, #80]	; (80094c8 <prvHeapInit+0xb4>)
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2200      	movs	r2, #0
 800947c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800947e:	4b12      	ldr	r3, [pc, #72]	; (80094c8 <prvHeapInit+0xb4>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2200      	movs	r2, #0
 8009484:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	1ad2      	subs	r2, r2, r3
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009494:	4b0c      	ldr	r3, [pc, #48]	; (80094c8 <prvHeapInit+0xb4>)
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	4a0a      	ldr	r2, [pc, #40]	; (80094cc <prvHeapInit+0xb8>)
 80094a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	4a09      	ldr	r2, [pc, #36]	; (80094d0 <prvHeapInit+0xbc>)
 80094aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80094ac:	4b09      	ldr	r3, [pc, #36]	; (80094d4 <prvHeapInit+0xc0>)
 80094ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80094b2:	601a      	str	r2, [r3, #0]
}
 80094b4:	bf00      	nop
 80094b6:	3714      	adds	r7, #20
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr
 80094c0:	2000163c 	.word	0x2000163c
 80094c4:	2000523c 	.word	0x2000523c
 80094c8:	20005244 	.word	0x20005244
 80094cc:	2000524c 	.word	0x2000524c
 80094d0:	20005248 	.word	0x20005248
 80094d4:	20005258 	.word	0x20005258

080094d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80094e0:	4b28      	ldr	r3, [pc, #160]	; (8009584 <prvInsertBlockIntoFreeList+0xac>)
 80094e2:	60fb      	str	r3, [r7, #12]
 80094e4:	e002      	b.n	80094ec <prvInsertBlockIntoFreeList+0x14>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d8f7      	bhi.n	80094e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	4413      	add	r3, r2
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	429a      	cmp	r2, r3
 8009506:	d108      	bne.n	800951a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	441a      	add	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	68ba      	ldr	r2, [r7, #8]
 8009524:	441a      	add	r2, r3
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	429a      	cmp	r2, r3
 800952c:	d118      	bne.n	8009560 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	4b15      	ldr	r3, [pc, #84]	; (8009588 <prvInsertBlockIntoFreeList+0xb0>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	429a      	cmp	r2, r3
 8009538:	d00d      	beq.n	8009556 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	685a      	ldr	r2, [r3, #4]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	441a      	add	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	e008      	b.n	8009568 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009556:	4b0c      	ldr	r3, [pc, #48]	; (8009588 <prvInsertBlockIntoFreeList+0xb0>)
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	e003      	b.n	8009568 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009568:	68fa      	ldr	r2, [r7, #12]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	429a      	cmp	r2, r3
 800956e:	d002      	beq.n	8009576 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009576:	bf00      	nop
 8009578:	3714      	adds	r7, #20
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	2000523c 	.word	0x2000523c
 8009588:	20005244 	.word	0x20005244

0800958c <__cxa_pure_virtual>:
 800958c:	b508      	push	{r3, lr}
 800958e:	f000 f80d 	bl	80095ac <_ZSt9terminatev>

08009592 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009592:	b508      	push	{r3, lr}
 8009594:	4780      	blx	r0
 8009596:	f000 f80e 	bl	80095b6 <abort>
	...

0800959c <_ZSt13get_terminatev>:
 800959c:	4b02      	ldr	r3, [pc, #8]	; (80095a8 <_ZSt13get_terminatev+0xc>)
 800959e:	6818      	ldr	r0, [r3, #0]
 80095a0:	f3bf 8f5b 	dmb	ish
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop
 80095a8:	20000010 	.word	0x20000010

080095ac <_ZSt9terminatev>:
 80095ac:	b508      	push	{r3, lr}
 80095ae:	f7ff fff5 	bl	800959c <_ZSt13get_terminatev>
 80095b2:	f7ff ffee 	bl	8009592 <_ZN10__cxxabiv111__terminateEPFvvE>

080095b6 <abort>:
 80095b6:	b508      	push	{r3, lr}
 80095b8:	2006      	movs	r0, #6
 80095ba:	f000 ff15 	bl	800a3e8 <raise>
 80095be:	2001      	movs	r0, #1
 80095c0:	f7f8 f8f2 	bl	80017a8 <_exit>

080095c4 <__errno>:
 80095c4:	4b01      	ldr	r3, [pc, #4]	; (80095cc <__errno+0x8>)
 80095c6:	6818      	ldr	r0, [r3, #0]
 80095c8:	4770      	bx	lr
 80095ca:	bf00      	nop
 80095cc:	20000014 	.word	0x20000014

080095d0 <std>:
 80095d0:	2300      	movs	r3, #0
 80095d2:	b510      	push	{r4, lr}
 80095d4:	4604      	mov	r4, r0
 80095d6:	e9c0 3300 	strd	r3, r3, [r0]
 80095da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095de:	6083      	str	r3, [r0, #8]
 80095e0:	8181      	strh	r1, [r0, #12]
 80095e2:	6643      	str	r3, [r0, #100]	; 0x64
 80095e4:	81c2      	strh	r2, [r0, #14]
 80095e6:	6183      	str	r3, [r0, #24]
 80095e8:	4619      	mov	r1, r3
 80095ea:	2208      	movs	r2, #8
 80095ec:	305c      	adds	r0, #92	; 0x5c
 80095ee:	f000 f93d 	bl	800986c <memset>
 80095f2:	4b05      	ldr	r3, [pc, #20]	; (8009608 <std+0x38>)
 80095f4:	6263      	str	r3, [r4, #36]	; 0x24
 80095f6:	4b05      	ldr	r3, [pc, #20]	; (800960c <std+0x3c>)
 80095f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80095fa:	4b05      	ldr	r3, [pc, #20]	; (8009610 <std+0x40>)
 80095fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095fe:	4b05      	ldr	r3, [pc, #20]	; (8009614 <std+0x44>)
 8009600:	6224      	str	r4, [r4, #32]
 8009602:	6323      	str	r3, [r4, #48]	; 0x30
 8009604:	bd10      	pop	{r4, pc}
 8009606:	bf00      	nop
 8009608:	0800a461 	.word	0x0800a461
 800960c:	0800a483 	.word	0x0800a483
 8009610:	0800a4bb 	.word	0x0800a4bb
 8009614:	0800a4df 	.word	0x0800a4df

08009618 <_cleanup_r>:
 8009618:	4901      	ldr	r1, [pc, #4]	; (8009620 <_cleanup_r+0x8>)
 800961a:	f000 b8af 	b.w	800977c <_fwalk_reent>
 800961e:	bf00      	nop
 8009620:	0800b365 	.word	0x0800b365

08009624 <__sfmoreglue>:
 8009624:	b570      	push	{r4, r5, r6, lr}
 8009626:	1e4a      	subs	r2, r1, #1
 8009628:	2568      	movs	r5, #104	; 0x68
 800962a:	4355      	muls	r5, r2
 800962c:	460e      	mov	r6, r1
 800962e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009632:	f000 f973 	bl	800991c <_malloc_r>
 8009636:	4604      	mov	r4, r0
 8009638:	b140      	cbz	r0, 800964c <__sfmoreglue+0x28>
 800963a:	2100      	movs	r1, #0
 800963c:	e9c0 1600 	strd	r1, r6, [r0]
 8009640:	300c      	adds	r0, #12
 8009642:	60a0      	str	r0, [r4, #8]
 8009644:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009648:	f000 f910 	bl	800986c <memset>
 800964c:	4620      	mov	r0, r4
 800964e:	bd70      	pop	{r4, r5, r6, pc}

08009650 <__sfp_lock_acquire>:
 8009650:	4801      	ldr	r0, [pc, #4]	; (8009658 <__sfp_lock_acquire+0x8>)
 8009652:	f000 b8d8 	b.w	8009806 <__retarget_lock_acquire_recursive>
 8009656:	bf00      	nop
 8009658:	2000543c 	.word	0x2000543c

0800965c <__sfp_lock_release>:
 800965c:	4801      	ldr	r0, [pc, #4]	; (8009664 <__sfp_lock_release+0x8>)
 800965e:	f000 b8d3 	b.w	8009808 <__retarget_lock_release_recursive>
 8009662:	bf00      	nop
 8009664:	2000543c 	.word	0x2000543c

08009668 <__sinit_lock_acquire>:
 8009668:	4801      	ldr	r0, [pc, #4]	; (8009670 <__sinit_lock_acquire+0x8>)
 800966a:	f000 b8cc 	b.w	8009806 <__retarget_lock_acquire_recursive>
 800966e:	bf00      	nop
 8009670:	20005437 	.word	0x20005437

08009674 <__sinit_lock_release>:
 8009674:	4801      	ldr	r0, [pc, #4]	; (800967c <__sinit_lock_release+0x8>)
 8009676:	f000 b8c7 	b.w	8009808 <__retarget_lock_release_recursive>
 800967a:	bf00      	nop
 800967c:	20005437 	.word	0x20005437

08009680 <__sinit>:
 8009680:	b510      	push	{r4, lr}
 8009682:	4604      	mov	r4, r0
 8009684:	f7ff fff0 	bl	8009668 <__sinit_lock_acquire>
 8009688:	69a3      	ldr	r3, [r4, #24]
 800968a:	b11b      	cbz	r3, 8009694 <__sinit+0x14>
 800968c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009690:	f7ff bff0 	b.w	8009674 <__sinit_lock_release>
 8009694:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009698:	6523      	str	r3, [r4, #80]	; 0x50
 800969a:	4b13      	ldr	r3, [pc, #76]	; (80096e8 <__sinit+0x68>)
 800969c:	4a13      	ldr	r2, [pc, #76]	; (80096ec <__sinit+0x6c>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80096a2:	42a3      	cmp	r3, r4
 80096a4:	bf04      	itt	eq
 80096a6:	2301      	moveq	r3, #1
 80096a8:	61a3      	streq	r3, [r4, #24]
 80096aa:	4620      	mov	r0, r4
 80096ac:	f000 f820 	bl	80096f0 <__sfp>
 80096b0:	6060      	str	r0, [r4, #4]
 80096b2:	4620      	mov	r0, r4
 80096b4:	f000 f81c 	bl	80096f0 <__sfp>
 80096b8:	60a0      	str	r0, [r4, #8]
 80096ba:	4620      	mov	r0, r4
 80096bc:	f000 f818 	bl	80096f0 <__sfp>
 80096c0:	2200      	movs	r2, #0
 80096c2:	60e0      	str	r0, [r4, #12]
 80096c4:	2104      	movs	r1, #4
 80096c6:	6860      	ldr	r0, [r4, #4]
 80096c8:	f7ff ff82 	bl	80095d0 <std>
 80096cc:	68a0      	ldr	r0, [r4, #8]
 80096ce:	2201      	movs	r2, #1
 80096d0:	2109      	movs	r1, #9
 80096d2:	f7ff ff7d 	bl	80095d0 <std>
 80096d6:	68e0      	ldr	r0, [r4, #12]
 80096d8:	2202      	movs	r2, #2
 80096da:	2112      	movs	r1, #18
 80096dc:	f7ff ff78 	bl	80095d0 <std>
 80096e0:	2301      	movs	r3, #1
 80096e2:	61a3      	str	r3, [r4, #24]
 80096e4:	e7d2      	b.n	800968c <__sinit+0xc>
 80096e6:	bf00      	nop
 80096e8:	0800c804 	.word	0x0800c804
 80096ec:	08009619 	.word	0x08009619

080096f0 <__sfp>:
 80096f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f2:	4607      	mov	r7, r0
 80096f4:	f7ff ffac 	bl	8009650 <__sfp_lock_acquire>
 80096f8:	4b1e      	ldr	r3, [pc, #120]	; (8009774 <__sfp+0x84>)
 80096fa:	681e      	ldr	r6, [r3, #0]
 80096fc:	69b3      	ldr	r3, [r6, #24]
 80096fe:	b913      	cbnz	r3, 8009706 <__sfp+0x16>
 8009700:	4630      	mov	r0, r6
 8009702:	f7ff ffbd 	bl	8009680 <__sinit>
 8009706:	3648      	adds	r6, #72	; 0x48
 8009708:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800970c:	3b01      	subs	r3, #1
 800970e:	d503      	bpl.n	8009718 <__sfp+0x28>
 8009710:	6833      	ldr	r3, [r6, #0]
 8009712:	b30b      	cbz	r3, 8009758 <__sfp+0x68>
 8009714:	6836      	ldr	r6, [r6, #0]
 8009716:	e7f7      	b.n	8009708 <__sfp+0x18>
 8009718:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800971c:	b9d5      	cbnz	r5, 8009754 <__sfp+0x64>
 800971e:	4b16      	ldr	r3, [pc, #88]	; (8009778 <__sfp+0x88>)
 8009720:	60e3      	str	r3, [r4, #12]
 8009722:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009726:	6665      	str	r5, [r4, #100]	; 0x64
 8009728:	f000 f86c 	bl	8009804 <__retarget_lock_init_recursive>
 800972c:	f7ff ff96 	bl	800965c <__sfp_lock_release>
 8009730:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009734:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009738:	6025      	str	r5, [r4, #0]
 800973a:	61a5      	str	r5, [r4, #24]
 800973c:	2208      	movs	r2, #8
 800973e:	4629      	mov	r1, r5
 8009740:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009744:	f000 f892 	bl	800986c <memset>
 8009748:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800974c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009750:	4620      	mov	r0, r4
 8009752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009754:	3468      	adds	r4, #104	; 0x68
 8009756:	e7d9      	b.n	800970c <__sfp+0x1c>
 8009758:	2104      	movs	r1, #4
 800975a:	4638      	mov	r0, r7
 800975c:	f7ff ff62 	bl	8009624 <__sfmoreglue>
 8009760:	4604      	mov	r4, r0
 8009762:	6030      	str	r0, [r6, #0]
 8009764:	2800      	cmp	r0, #0
 8009766:	d1d5      	bne.n	8009714 <__sfp+0x24>
 8009768:	f7ff ff78 	bl	800965c <__sfp_lock_release>
 800976c:	230c      	movs	r3, #12
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	e7ee      	b.n	8009750 <__sfp+0x60>
 8009772:	bf00      	nop
 8009774:	0800c804 	.word	0x0800c804
 8009778:	ffff0001 	.word	0xffff0001

0800977c <_fwalk_reent>:
 800977c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009780:	4606      	mov	r6, r0
 8009782:	4688      	mov	r8, r1
 8009784:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009788:	2700      	movs	r7, #0
 800978a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800978e:	f1b9 0901 	subs.w	r9, r9, #1
 8009792:	d505      	bpl.n	80097a0 <_fwalk_reent+0x24>
 8009794:	6824      	ldr	r4, [r4, #0]
 8009796:	2c00      	cmp	r4, #0
 8009798:	d1f7      	bne.n	800978a <_fwalk_reent+0xe>
 800979a:	4638      	mov	r0, r7
 800979c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097a0:	89ab      	ldrh	r3, [r5, #12]
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d907      	bls.n	80097b6 <_fwalk_reent+0x3a>
 80097a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097aa:	3301      	adds	r3, #1
 80097ac:	d003      	beq.n	80097b6 <_fwalk_reent+0x3a>
 80097ae:	4629      	mov	r1, r5
 80097b0:	4630      	mov	r0, r6
 80097b2:	47c0      	blx	r8
 80097b4:	4307      	orrs	r7, r0
 80097b6:	3568      	adds	r5, #104	; 0x68
 80097b8:	e7e9      	b.n	800978e <_fwalk_reent+0x12>
	...

080097bc <__libc_init_array>:
 80097bc:	b570      	push	{r4, r5, r6, lr}
 80097be:	4d0d      	ldr	r5, [pc, #52]	; (80097f4 <__libc_init_array+0x38>)
 80097c0:	4c0d      	ldr	r4, [pc, #52]	; (80097f8 <__libc_init_array+0x3c>)
 80097c2:	1b64      	subs	r4, r4, r5
 80097c4:	10a4      	asrs	r4, r4, #2
 80097c6:	2600      	movs	r6, #0
 80097c8:	42a6      	cmp	r6, r4
 80097ca:	d109      	bne.n	80097e0 <__libc_init_array+0x24>
 80097cc:	4d0b      	ldr	r5, [pc, #44]	; (80097fc <__libc_init_array+0x40>)
 80097ce:	4c0c      	ldr	r4, [pc, #48]	; (8009800 <__libc_init_array+0x44>)
 80097d0:	f002 fe20 	bl	800c414 <_init>
 80097d4:	1b64      	subs	r4, r4, r5
 80097d6:	10a4      	asrs	r4, r4, #2
 80097d8:	2600      	movs	r6, #0
 80097da:	42a6      	cmp	r6, r4
 80097dc:	d105      	bne.n	80097ea <__libc_init_array+0x2e>
 80097de:	bd70      	pop	{r4, r5, r6, pc}
 80097e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80097e4:	4798      	blx	r3
 80097e6:	3601      	adds	r6, #1
 80097e8:	e7ee      	b.n	80097c8 <__libc_init_array+0xc>
 80097ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80097ee:	4798      	blx	r3
 80097f0:	3601      	adds	r6, #1
 80097f2:	e7f2      	b.n	80097da <__libc_init_array+0x1e>
 80097f4:	0800cb90 	.word	0x0800cb90
 80097f8:	0800cb90 	.word	0x0800cb90
 80097fc:	0800cb90 	.word	0x0800cb90
 8009800:	0800cb98 	.word	0x0800cb98

08009804 <__retarget_lock_init_recursive>:
 8009804:	4770      	bx	lr

08009806 <__retarget_lock_acquire_recursive>:
 8009806:	4770      	bx	lr

08009808 <__retarget_lock_release_recursive>:
 8009808:	4770      	bx	lr
	...

0800980c <malloc>:
 800980c:	4b02      	ldr	r3, [pc, #8]	; (8009818 <malloc+0xc>)
 800980e:	4601      	mov	r1, r0
 8009810:	6818      	ldr	r0, [r3, #0]
 8009812:	f000 b883 	b.w	800991c <_malloc_r>
 8009816:	bf00      	nop
 8009818:	20000014 	.word	0x20000014

0800981c <memcpy>:
 800981c:	440a      	add	r2, r1
 800981e:	4291      	cmp	r1, r2
 8009820:	f100 33ff 	add.w	r3, r0, #4294967295
 8009824:	d100      	bne.n	8009828 <memcpy+0xc>
 8009826:	4770      	bx	lr
 8009828:	b510      	push	{r4, lr}
 800982a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800982e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009832:	4291      	cmp	r1, r2
 8009834:	d1f9      	bne.n	800982a <memcpy+0xe>
 8009836:	bd10      	pop	{r4, pc}

08009838 <memmove>:
 8009838:	4288      	cmp	r0, r1
 800983a:	b510      	push	{r4, lr}
 800983c:	eb01 0402 	add.w	r4, r1, r2
 8009840:	d902      	bls.n	8009848 <memmove+0x10>
 8009842:	4284      	cmp	r4, r0
 8009844:	4623      	mov	r3, r4
 8009846:	d807      	bhi.n	8009858 <memmove+0x20>
 8009848:	1e43      	subs	r3, r0, #1
 800984a:	42a1      	cmp	r1, r4
 800984c:	d008      	beq.n	8009860 <memmove+0x28>
 800984e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009852:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009856:	e7f8      	b.n	800984a <memmove+0x12>
 8009858:	4402      	add	r2, r0
 800985a:	4601      	mov	r1, r0
 800985c:	428a      	cmp	r2, r1
 800985e:	d100      	bne.n	8009862 <memmove+0x2a>
 8009860:	bd10      	pop	{r4, pc}
 8009862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800986a:	e7f7      	b.n	800985c <memmove+0x24>

0800986c <memset>:
 800986c:	4402      	add	r2, r0
 800986e:	4603      	mov	r3, r0
 8009870:	4293      	cmp	r3, r2
 8009872:	d100      	bne.n	8009876 <memset+0xa>
 8009874:	4770      	bx	lr
 8009876:	f803 1b01 	strb.w	r1, [r3], #1
 800987a:	e7f9      	b.n	8009870 <memset+0x4>

0800987c <_free_r>:
 800987c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800987e:	2900      	cmp	r1, #0
 8009880:	d048      	beq.n	8009914 <_free_r+0x98>
 8009882:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009886:	9001      	str	r0, [sp, #4]
 8009888:	2b00      	cmp	r3, #0
 800988a:	f1a1 0404 	sub.w	r4, r1, #4
 800988e:	bfb8      	it	lt
 8009890:	18e4      	addlt	r4, r4, r3
 8009892:	f001 fddd 	bl	800b450 <__malloc_lock>
 8009896:	4a20      	ldr	r2, [pc, #128]	; (8009918 <_free_r+0x9c>)
 8009898:	9801      	ldr	r0, [sp, #4]
 800989a:	6813      	ldr	r3, [r2, #0]
 800989c:	4615      	mov	r5, r2
 800989e:	b933      	cbnz	r3, 80098ae <_free_r+0x32>
 80098a0:	6063      	str	r3, [r4, #4]
 80098a2:	6014      	str	r4, [r2, #0]
 80098a4:	b003      	add	sp, #12
 80098a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098aa:	f001 bdd7 	b.w	800b45c <__malloc_unlock>
 80098ae:	42a3      	cmp	r3, r4
 80098b0:	d90b      	bls.n	80098ca <_free_r+0x4e>
 80098b2:	6821      	ldr	r1, [r4, #0]
 80098b4:	1862      	adds	r2, r4, r1
 80098b6:	4293      	cmp	r3, r2
 80098b8:	bf04      	itt	eq
 80098ba:	681a      	ldreq	r2, [r3, #0]
 80098bc:	685b      	ldreq	r3, [r3, #4]
 80098be:	6063      	str	r3, [r4, #4]
 80098c0:	bf04      	itt	eq
 80098c2:	1852      	addeq	r2, r2, r1
 80098c4:	6022      	streq	r2, [r4, #0]
 80098c6:	602c      	str	r4, [r5, #0]
 80098c8:	e7ec      	b.n	80098a4 <_free_r+0x28>
 80098ca:	461a      	mov	r2, r3
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	b10b      	cbz	r3, 80098d4 <_free_r+0x58>
 80098d0:	42a3      	cmp	r3, r4
 80098d2:	d9fa      	bls.n	80098ca <_free_r+0x4e>
 80098d4:	6811      	ldr	r1, [r2, #0]
 80098d6:	1855      	adds	r5, r2, r1
 80098d8:	42a5      	cmp	r5, r4
 80098da:	d10b      	bne.n	80098f4 <_free_r+0x78>
 80098dc:	6824      	ldr	r4, [r4, #0]
 80098de:	4421      	add	r1, r4
 80098e0:	1854      	adds	r4, r2, r1
 80098e2:	42a3      	cmp	r3, r4
 80098e4:	6011      	str	r1, [r2, #0]
 80098e6:	d1dd      	bne.n	80098a4 <_free_r+0x28>
 80098e8:	681c      	ldr	r4, [r3, #0]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	6053      	str	r3, [r2, #4]
 80098ee:	4421      	add	r1, r4
 80098f0:	6011      	str	r1, [r2, #0]
 80098f2:	e7d7      	b.n	80098a4 <_free_r+0x28>
 80098f4:	d902      	bls.n	80098fc <_free_r+0x80>
 80098f6:	230c      	movs	r3, #12
 80098f8:	6003      	str	r3, [r0, #0]
 80098fa:	e7d3      	b.n	80098a4 <_free_r+0x28>
 80098fc:	6825      	ldr	r5, [r4, #0]
 80098fe:	1961      	adds	r1, r4, r5
 8009900:	428b      	cmp	r3, r1
 8009902:	bf04      	itt	eq
 8009904:	6819      	ldreq	r1, [r3, #0]
 8009906:	685b      	ldreq	r3, [r3, #4]
 8009908:	6063      	str	r3, [r4, #4]
 800990a:	bf04      	itt	eq
 800990c:	1949      	addeq	r1, r1, r5
 800990e:	6021      	streq	r1, [r4, #0]
 8009910:	6054      	str	r4, [r2, #4]
 8009912:	e7c7      	b.n	80098a4 <_free_r+0x28>
 8009914:	b003      	add	sp, #12
 8009916:	bd30      	pop	{r4, r5, pc}
 8009918:	2000525c 	.word	0x2000525c

0800991c <_malloc_r>:
 800991c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991e:	1ccd      	adds	r5, r1, #3
 8009920:	f025 0503 	bic.w	r5, r5, #3
 8009924:	3508      	adds	r5, #8
 8009926:	2d0c      	cmp	r5, #12
 8009928:	bf38      	it	cc
 800992a:	250c      	movcc	r5, #12
 800992c:	2d00      	cmp	r5, #0
 800992e:	4606      	mov	r6, r0
 8009930:	db01      	blt.n	8009936 <_malloc_r+0x1a>
 8009932:	42a9      	cmp	r1, r5
 8009934:	d903      	bls.n	800993e <_malloc_r+0x22>
 8009936:	230c      	movs	r3, #12
 8009938:	6033      	str	r3, [r6, #0]
 800993a:	2000      	movs	r0, #0
 800993c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800993e:	f001 fd87 	bl	800b450 <__malloc_lock>
 8009942:	4921      	ldr	r1, [pc, #132]	; (80099c8 <_malloc_r+0xac>)
 8009944:	680a      	ldr	r2, [r1, #0]
 8009946:	4614      	mov	r4, r2
 8009948:	b99c      	cbnz	r4, 8009972 <_malloc_r+0x56>
 800994a:	4f20      	ldr	r7, [pc, #128]	; (80099cc <_malloc_r+0xb0>)
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	b923      	cbnz	r3, 800995a <_malloc_r+0x3e>
 8009950:	4621      	mov	r1, r4
 8009952:	4630      	mov	r0, r6
 8009954:	f000 fd10 	bl	800a378 <_sbrk_r>
 8009958:	6038      	str	r0, [r7, #0]
 800995a:	4629      	mov	r1, r5
 800995c:	4630      	mov	r0, r6
 800995e:	f000 fd0b 	bl	800a378 <_sbrk_r>
 8009962:	1c43      	adds	r3, r0, #1
 8009964:	d123      	bne.n	80099ae <_malloc_r+0x92>
 8009966:	230c      	movs	r3, #12
 8009968:	6033      	str	r3, [r6, #0]
 800996a:	4630      	mov	r0, r6
 800996c:	f001 fd76 	bl	800b45c <__malloc_unlock>
 8009970:	e7e3      	b.n	800993a <_malloc_r+0x1e>
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	1b5b      	subs	r3, r3, r5
 8009976:	d417      	bmi.n	80099a8 <_malloc_r+0x8c>
 8009978:	2b0b      	cmp	r3, #11
 800997a:	d903      	bls.n	8009984 <_malloc_r+0x68>
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	441c      	add	r4, r3
 8009980:	6025      	str	r5, [r4, #0]
 8009982:	e004      	b.n	800998e <_malloc_r+0x72>
 8009984:	6863      	ldr	r3, [r4, #4]
 8009986:	42a2      	cmp	r2, r4
 8009988:	bf0c      	ite	eq
 800998a:	600b      	streq	r3, [r1, #0]
 800998c:	6053      	strne	r3, [r2, #4]
 800998e:	4630      	mov	r0, r6
 8009990:	f001 fd64 	bl	800b45c <__malloc_unlock>
 8009994:	f104 000b 	add.w	r0, r4, #11
 8009998:	1d23      	adds	r3, r4, #4
 800999a:	f020 0007 	bic.w	r0, r0, #7
 800999e:	1ac2      	subs	r2, r0, r3
 80099a0:	d0cc      	beq.n	800993c <_malloc_r+0x20>
 80099a2:	1a1b      	subs	r3, r3, r0
 80099a4:	50a3      	str	r3, [r4, r2]
 80099a6:	e7c9      	b.n	800993c <_malloc_r+0x20>
 80099a8:	4622      	mov	r2, r4
 80099aa:	6864      	ldr	r4, [r4, #4]
 80099ac:	e7cc      	b.n	8009948 <_malloc_r+0x2c>
 80099ae:	1cc4      	adds	r4, r0, #3
 80099b0:	f024 0403 	bic.w	r4, r4, #3
 80099b4:	42a0      	cmp	r0, r4
 80099b6:	d0e3      	beq.n	8009980 <_malloc_r+0x64>
 80099b8:	1a21      	subs	r1, r4, r0
 80099ba:	4630      	mov	r0, r6
 80099bc:	f000 fcdc 	bl	800a378 <_sbrk_r>
 80099c0:	3001      	adds	r0, #1
 80099c2:	d1dd      	bne.n	8009980 <_malloc_r+0x64>
 80099c4:	e7cf      	b.n	8009966 <_malloc_r+0x4a>
 80099c6:	bf00      	nop
 80099c8:	2000525c 	.word	0x2000525c
 80099cc:	20005260 	.word	0x20005260

080099d0 <__cvt>:
 80099d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099d4:	ec55 4b10 	vmov	r4, r5, d0
 80099d8:	2d00      	cmp	r5, #0
 80099da:	460e      	mov	r6, r1
 80099dc:	4619      	mov	r1, r3
 80099de:	462b      	mov	r3, r5
 80099e0:	bfbb      	ittet	lt
 80099e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80099e6:	461d      	movlt	r5, r3
 80099e8:	2300      	movge	r3, #0
 80099ea:	232d      	movlt	r3, #45	; 0x2d
 80099ec:	700b      	strb	r3, [r1, #0]
 80099ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80099f4:	4691      	mov	r9, r2
 80099f6:	f023 0820 	bic.w	r8, r3, #32
 80099fa:	bfbc      	itt	lt
 80099fc:	4622      	movlt	r2, r4
 80099fe:	4614      	movlt	r4, r2
 8009a00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a04:	d005      	beq.n	8009a12 <__cvt+0x42>
 8009a06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009a0a:	d100      	bne.n	8009a0e <__cvt+0x3e>
 8009a0c:	3601      	adds	r6, #1
 8009a0e:	2102      	movs	r1, #2
 8009a10:	e000      	b.n	8009a14 <__cvt+0x44>
 8009a12:	2103      	movs	r1, #3
 8009a14:	ab03      	add	r3, sp, #12
 8009a16:	9301      	str	r3, [sp, #4]
 8009a18:	ab02      	add	r3, sp, #8
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	ec45 4b10 	vmov	d0, r4, r5
 8009a20:	4653      	mov	r3, sl
 8009a22:	4632      	mov	r2, r6
 8009a24:	f000 fe2c 	bl	800a680 <_dtoa_r>
 8009a28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009a2c:	4607      	mov	r7, r0
 8009a2e:	d102      	bne.n	8009a36 <__cvt+0x66>
 8009a30:	f019 0f01 	tst.w	r9, #1
 8009a34:	d022      	beq.n	8009a7c <__cvt+0xac>
 8009a36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009a3a:	eb07 0906 	add.w	r9, r7, r6
 8009a3e:	d110      	bne.n	8009a62 <__cvt+0x92>
 8009a40:	783b      	ldrb	r3, [r7, #0]
 8009a42:	2b30      	cmp	r3, #48	; 0x30
 8009a44:	d10a      	bne.n	8009a5c <__cvt+0x8c>
 8009a46:	2200      	movs	r2, #0
 8009a48:	2300      	movs	r3, #0
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	4629      	mov	r1, r5
 8009a4e:	f7f7 f85b 	bl	8000b08 <__aeabi_dcmpeq>
 8009a52:	b918      	cbnz	r0, 8009a5c <__cvt+0x8c>
 8009a54:	f1c6 0601 	rsb	r6, r6, #1
 8009a58:	f8ca 6000 	str.w	r6, [sl]
 8009a5c:	f8da 3000 	ldr.w	r3, [sl]
 8009a60:	4499      	add	r9, r3
 8009a62:	2200      	movs	r2, #0
 8009a64:	2300      	movs	r3, #0
 8009a66:	4620      	mov	r0, r4
 8009a68:	4629      	mov	r1, r5
 8009a6a:	f7f7 f84d 	bl	8000b08 <__aeabi_dcmpeq>
 8009a6e:	b108      	cbz	r0, 8009a74 <__cvt+0xa4>
 8009a70:	f8cd 900c 	str.w	r9, [sp, #12]
 8009a74:	2230      	movs	r2, #48	; 0x30
 8009a76:	9b03      	ldr	r3, [sp, #12]
 8009a78:	454b      	cmp	r3, r9
 8009a7a:	d307      	bcc.n	8009a8c <__cvt+0xbc>
 8009a7c:	9b03      	ldr	r3, [sp, #12]
 8009a7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a80:	1bdb      	subs	r3, r3, r7
 8009a82:	4638      	mov	r0, r7
 8009a84:	6013      	str	r3, [r2, #0]
 8009a86:	b004      	add	sp, #16
 8009a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a8c:	1c59      	adds	r1, r3, #1
 8009a8e:	9103      	str	r1, [sp, #12]
 8009a90:	701a      	strb	r2, [r3, #0]
 8009a92:	e7f0      	b.n	8009a76 <__cvt+0xa6>

08009a94 <__exponent>:
 8009a94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a96:	4603      	mov	r3, r0
 8009a98:	2900      	cmp	r1, #0
 8009a9a:	bfb8      	it	lt
 8009a9c:	4249      	neglt	r1, r1
 8009a9e:	f803 2b02 	strb.w	r2, [r3], #2
 8009aa2:	bfb4      	ite	lt
 8009aa4:	222d      	movlt	r2, #45	; 0x2d
 8009aa6:	222b      	movge	r2, #43	; 0x2b
 8009aa8:	2909      	cmp	r1, #9
 8009aaa:	7042      	strb	r2, [r0, #1]
 8009aac:	dd2a      	ble.n	8009b04 <__exponent+0x70>
 8009aae:	f10d 0407 	add.w	r4, sp, #7
 8009ab2:	46a4      	mov	ip, r4
 8009ab4:	270a      	movs	r7, #10
 8009ab6:	46a6      	mov	lr, r4
 8009ab8:	460a      	mov	r2, r1
 8009aba:	fb91 f6f7 	sdiv	r6, r1, r7
 8009abe:	fb07 1516 	mls	r5, r7, r6, r1
 8009ac2:	3530      	adds	r5, #48	; 0x30
 8009ac4:	2a63      	cmp	r2, #99	; 0x63
 8009ac6:	f104 34ff 	add.w	r4, r4, #4294967295
 8009aca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009ace:	4631      	mov	r1, r6
 8009ad0:	dcf1      	bgt.n	8009ab6 <__exponent+0x22>
 8009ad2:	3130      	adds	r1, #48	; 0x30
 8009ad4:	f1ae 0502 	sub.w	r5, lr, #2
 8009ad8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009adc:	1c44      	adds	r4, r0, #1
 8009ade:	4629      	mov	r1, r5
 8009ae0:	4561      	cmp	r1, ip
 8009ae2:	d30a      	bcc.n	8009afa <__exponent+0x66>
 8009ae4:	f10d 0209 	add.w	r2, sp, #9
 8009ae8:	eba2 020e 	sub.w	r2, r2, lr
 8009aec:	4565      	cmp	r5, ip
 8009aee:	bf88      	it	hi
 8009af0:	2200      	movhi	r2, #0
 8009af2:	4413      	add	r3, r2
 8009af4:	1a18      	subs	r0, r3, r0
 8009af6:	b003      	add	sp, #12
 8009af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009afa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009afe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009b02:	e7ed      	b.n	8009ae0 <__exponent+0x4c>
 8009b04:	2330      	movs	r3, #48	; 0x30
 8009b06:	3130      	adds	r1, #48	; 0x30
 8009b08:	7083      	strb	r3, [r0, #2]
 8009b0a:	70c1      	strb	r1, [r0, #3]
 8009b0c:	1d03      	adds	r3, r0, #4
 8009b0e:	e7f1      	b.n	8009af4 <__exponent+0x60>

08009b10 <_printf_float>:
 8009b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b14:	ed2d 8b02 	vpush	{d8}
 8009b18:	b08d      	sub	sp, #52	; 0x34
 8009b1a:	460c      	mov	r4, r1
 8009b1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009b20:	4616      	mov	r6, r2
 8009b22:	461f      	mov	r7, r3
 8009b24:	4605      	mov	r5, r0
 8009b26:	f001 fc6b 	bl	800b400 <_localeconv_r>
 8009b2a:	f8d0 a000 	ldr.w	sl, [r0]
 8009b2e:	4650      	mov	r0, sl
 8009b30:	f7f6 fb6e 	bl	8000210 <strlen>
 8009b34:	2300      	movs	r3, #0
 8009b36:	930a      	str	r3, [sp, #40]	; 0x28
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	9305      	str	r3, [sp, #20]
 8009b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009b44:	3307      	adds	r3, #7
 8009b46:	f023 0307 	bic.w	r3, r3, #7
 8009b4a:	f103 0208 	add.w	r2, r3, #8
 8009b4e:	f8c8 2000 	str.w	r2, [r8]
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009b5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009b5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009b62:	9307      	str	r3, [sp, #28]
 8009b64:	f8cd 8018 	str.w	r8, [sp, #24]
 8009b68:	ee08 0a10 	vmov	s16, r0
 8009b6c:	4b9f      	ldr	r3, [pc, #636]	; (8009dec <_printf_float+0x2dc>)
 8009b6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b72:	f04f 32ff 	mov.w	r2, #4294967295
 8009b76:	f7f6 fff9 	bl	8000b6c <__aeabi_dcmpun>
 8009b7a:	bb88      	cbnz	r0, 8009be0 <_printf_float+0xd0>
 8009b7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b80:	4b9a      	ldr	r3, [pc, #616]	; (8009dec <_printf_float+0x2dc>)
 8009b82:	f04f 32ff 	mov.w	r2, #4294967295
 8009b86:	f7f6 ffd3 	bl	8000b30 <__aeabi_dcmple>
 8009b8a:	bb48      	cbnz	r0, 8009be0 <_printf_float+0xd0>
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	2300      	movs	r3, #0
 8009b90:	4640      	mov	r0, r8
 8009b92:	4649      	mov	r1, r9
 8009b94:	f7f6 ffc2 	bl	8000b1c <__aeabi_dcmplt>
 8009b98:	b110      	cbz	r0, 8009ba0 <_printf_float+0x90>
 8009b9a:	232d      	movs	r3, #45	; 0x2d
 8009b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ba0:	4b93      	ldr	r3, [pc, #588]	; (8009df0 <_printf_float+0x2e0>)
 8009ba2:	4894      	ldr	r0, [pc, #592]	; (8009df4 <_printf_float+0x2e4>)
 8009ba4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009ba8:	bf94      	ite	ls
 8009baa:	4698      	movls	r8, r3
 8009bac:	4680      	movhi	r8, r0
 8009bae:	2303      	movs	r3, #3
 8009bb0:	6123      	str	r3, [r4, #16]
 8009bb2:	9b05      	ldr	r3, [sp, #20]
 8009bb4:	f023 0204 	bic.w	r2, r3, #4
 8009bb8:	6022      	str	r2, [r4, #0]
 8009bba:	f04f 0900 	mov.w	r9, #0
 8009bbe:	9700      	str	r7, [sp, #0]
 8009bc0:	4633      	mov	r3, r6
 8009bc2:	aa0b      	add	r2, sp, #44	; 0x2c
 8009bc4:	4621      	mov	r1, r4
 8009bc6:	4628      	mov	r0, r5
 8009bc8:	f000 f9d8 	bl	8009f7c <_printf_common>
 8009bcc:	3001      	adds	r0, #1
 8009bce:	f040 8090 	bne.w	8009cf2 <_printf_float+0x1e2>
 8009bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd6:	b00d      	add	sp, #52	; 0x34
 8009bd8:	ecbd 8b02 	vpop	{d8}
 8009bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be0:	4642      	mov	r2, r8
 8009be2:	464b      	mov	r3, r9
 8009be4:	4640      	mov	r0, r8
 8009be6:	4649      	mov	r1, r9
 8009be8:	f7f6 ffc0 	bl	8000b6c <__aeabi_dcmpun>
 8009bec:	b140      	cbz	r0, 8009c00 <_printf_float+0xf0>
 8009bee:	464b      	mov	r3, r9
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	bfbc      	itt	lt
 8009bf4:	232d      	movlt	r3, #45	; 0x2d
 8009bf6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009bfa:	487f      	ldr	r0, [pc, #508]	; (8009df8 <_printf_float+0x2e8>)
 8009bfc:	4b7f      	ldr	r3, [pc, #508]	; (8009dfc <_printf_float+0x2ec>)
 8009bfe:	e7d1      	b.n	8009ba4 <_printf_float+0x94>
 8009c00:	6863      	ldr	r3, [r4, #4]
 8009c02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009c06:	9206      	str	r2, [sp, #24]
 8009c08:	1c5a      	adds	r2, r3, #1
 8009c0a:	d13f      	bne.n	8009c8c <_printf_float+0x17c>
 8009c0c:	2306      	movs	r3, #6
 8009c0e:	6063      	str	r3, [r4, #4]
 8009c10:	9b05      	ldr	r3, [sp, #20]
 8009c12:	6861      	ldr	r1, [r4, #4]
 8009c14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009c18:	2300      	movs	r3, #0
 8009c1a:	9303      	str	r3, [sp, #12]
 8009c1c:	ab0a      	add	r3, sp, #40	; 0x28
 8009c1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009c22:	ab09      	add	r3, sp, #36	; 0x24
 8009c24:	ec49 8b10 	vmov	d0, r8, r9
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	6022      	str	r2, [r4, #0]
 8009c2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009c30:	4628      	mov	r0, r5
 8009c32:	f7ff fecd 	bl	80099d0 <__cvt>
 8009c36:	9b06      	ldr	r3, [sp, #24]
 8009c38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c3a:	2b47      	cmp	r3, #71	; 0x47
 8009c3c:	4680      	mov	r8, r0
 8009c3e:	d108      	bne.n	8009c52 <_printf_float+0x142>
 8009c40:	1cc8      	adds	r0, r1, #3
 8009c42:	db02      	blt.n	8009c4a <_printf_float+0x13a>
 8009c44:	6863      	ldr	r3, [r4, #4]
 8009c46:	4299      	cmp	r1, r3
 8009c48:	dd41      	ble.n	8009cce <_printf_float+0x1be>
 8009c4a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009c4e:	fa5f fb8b 	uxtb.w	fp, fp
 8009c52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c56:	d820      	bhi.n	8009c9a <_printf_float+0x18a>
 8009c58:	3901      	subs	r1, #1
 8009c5a:	465a      	mov	r2, fp
 8009c5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c60:	9109      	str	r1, [sp, #36]	; 0x24
 8009c62:	f7ff ff17 	bl	8009a94 <__exponent>
 8009c66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c68:	1813      	adds	r3, r2, r0
 8009c6a:	2a01      	cmp	r2, #1
 8009c6c:	4681      	mov	r9, r0
 8009c6e:	6123      	str	r3, [r4, #16]
 8009c70:	dc02      	bgt.n	8009c78 <_printf_float+0x168>
 8009c72:	6822      	ldr	r2, [r4, #0]
 8009c74:	07d2      	lsls	r2, r2, #31
 8009c76:	d501      	bpl.n	8009c7c <_printf_float+0x16c>
 8009c78:	3301      	adds	r3, #1
 8009c7a:	6123      	str	r3, [r4, #16]
 8009c7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d09c      	beq.n	8009bbe <_printf_float+0xae>
 8009c84:	232d      	movs	r3, #45	; 0x2d
 8009c86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c8a:	e798      	b.n	8009bbe <_printf_float+0xae>
 8009c8c:	9a06      	ldr	r2, [sp, #24]
 8009c8e:	2a47      	cmp	r2, #71	; 0x47
 8009c90:	d1be      	bne.n	8009c10 <_printf_float+0x100>
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d1bc      	bne.n	8009c10 <_printf_float+0x100>
 8009c96:	2301      	movs	r3, #1
 8009c98:	e7b9      	b.n	8009c0e <_printf_float+0xfe>
 8009c9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009c9e:	d118      	bne.n	8009cd2 <_printf_float+0x1c2>
 8009ca0:	2900      	cmp	r1, #0
 8009ca2:	6863      	ldr	r3, [r4, #4]
 8009ca4:	dd0b      	ble.n	8009cbe <_printf_float+0x1ae>
 8009ca6:	6121      	str	r1, [r4, #16]
 8009ca8:	b913      	cbnz	r3, 8009cb0 <_printf_float+0x1a0>
 8009caa:	6822      	ldr	r2, [r4, #0]
 8009cac:	07d0      	lsls	r0, r2, #31
 8009cae:	d502      	bpl.n	8009cb6 <_printf_float+0x1a6>
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	440b      	add	r3, r1
 8009cb4:	6123      	str	r3, [r4, #16]
 8009cb6:	65a1      	str	r1, [r4, #88]	; 0x58
 8009cb8:	f04f 0900 	mov.w	r9, #0
 8009cbc:	e7de      	b.n	8009c7c <_printf_float+0x16c>
 8009cbe:	b913      	cbnz	r3, 8009cc6 <_printf_float+0x1b6>
 8009cc0:	6822      	ldr	r2, [r4, #0]
 8009cc2:	07d2      	lsls	r2, r2, #31
 8009cc4:	d501      	bpl.n	8009cca <_printf_float+0x1ba>
 8009cc6:	3302      	adds	r3, #2
 8009cc8:	e7f4      	b.n	8009cb4 <_printf_float+0x1a4>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e7f2      	b.n	8009cb4 <_printf_float+0x1a4>
 8009cce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cd4:	4299      	cmp	r1, r3
 8009cd6:	db05      	blt.n	8009ce4 <_printf_float+0x1d4>
 8009cd8:	6823      	ldr	r3, [r4, #0]
 8009cda:	6121      	str	r1, [r4, #16]
 8009cdc:	07d8      	lsls	r0, r3, #31
 8009cde:	d5ea      	bpl.n	8009cb6 <_printf_float+0x1a6>
 8009ce0:	1c4b      	adds	r3, r1, #1
 8009ce2:	e7e7      	b.n	8009cb4 <_printf_float+0x1a4>
 8009ce4:	2900      	cmp	r1, #0
 8009ce6:	bfd4      	ite	le
 8009ce8:	f1c1 0202 	rsble	r2, r1, #2
 8009cec:	2201      	movgt	r2, #1
 8009cee:	4413      	add	r3, r2
 8009cf0:	e7e0      	b.n	8009cb4 <_printf_float+0x1a4>
 8009cf2:	6823      	ldr	r3, [r4, #0]
 8009cf4:	055a      	lsls	r2, r3, #21
 8009cf6:	d407      	bmi.n	8009d08 <_printf_float+0x1f8>
 8009cf8:	6923      	ldr	r3, [r4, #16]
 8009cfa:	4642      	mov	r2, r8
 8009cfc:	4631      	mov	r1, r6
 8009cfe:	4628      	mov	r0, r5
 8009d00:	47b8      	blx	r7
 8009d02:	3001      	adds	r0, #1
 8009d04:	d12c      	bne.n	8009d60 <_printf_float+0x250>
 8009d06:	e764      	b.n	8009bd2 <_printf_float+0xc2>
 8009d08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009d0c:	f240 80e0 	bls.w	8009ed0 <_printf_float+0x3c0>
 8009d10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d14:	2200      	movs	r2, #0
 8009d16:	2300      	movs	r3, #0
 8009d18:	f7f6 fef6 	bl	8000b08 <__aeabi_dcmpeq>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d034      	beq.n	8009d8a <_printf_float+0x27a>
 8009d20:	4a37      	ldr	r2, [pc, #220]	; (8009e00 <_printf_float+0x2f0>)
 8009d22:	2301      	movs	r3, #1
 8009d24:	4631      	mov	r1, r6
 8009d26:	4628      	mov	r0, r5
 8009d28:	47b8      	blx	r7
 8009d2a:	3001      	adds	r0, #1
 8009d2c:	f43f af51 	beq.w	8009bd2 <_printf_float+0xc2>
 8009d30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d34:	429a      	cmp	r2, r3
 8009d36:	db02      	blt.n	8009d3e <_printf_float+0x22e>
 8009d38:	6823      	ldr	r3, [r4, #0]
 8009d3a:	07d8      	lsls	r0, r3, #31
 8009d3c:	d510      	bpl.n	8009d60 <_printf_float+0x250>
 8009d3e:	ee18 3a10 	vmov	r3, s16
 8009d42:	4652      	mov	r2, sl
 8009d44:	4631      	mov	r1, r6
 8009d46:	4628      	mov	r0, r5
 8009d48:	47b8      	blx	r7
 8009d4a:	3001      	adds	r0, #1
 8009d4c:	f43f af41 	beq.w	8009bd2 <_printf_float+0xc2>
 8009d50:	f04f 0800 	mov.w	r8, #0
 8009d54:	f104 091a 	add.w	r9, r4, #26
 8009d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d5a:	3b01      	subs	r3, #1
 8009d5c:	4543      	cmp	r3, r8
 8009d5e:	dc09      	bgt.n	8009d74 <_printf_float+0x264>
 8009d60:	6823      	ldr	r3, [r4, #0]
 8009d62:	079b      	lsls	r3, r3, #30
 8009d64:	f100 8105 	bmi.w	8009f72 <_printf_float+0x462>
 8009d68:	68e0      	ldr	r0, [r4, #12]
 8009d6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d6c:	4298      	cmp	r0, r3
 8009d6e:	bfb8      	it	lt
 8009d70:	4618      	movlt	r0, r3
 8009d72:	e730      	b.n	8009bd6 <_printf_float+0xc6>
 8009d74:	2301      	movs	r3, #1
 8009d76:	464a      	mov	r2, r9
 8009d78:	4631      	mov	r1, r6
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	47b8      	blx	r7
 8009d7e:	3001      	adds	r0, #1
 8009d80:	f43f af27 	beq.w	8009bd2 <_printf_float+0xc2>
 8009d84:	f108 0801 	add.w	r8, r8, #1
 8009d88:	e7e6      	b.n	8009d58 <_printf_float+0x248>
 8009d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	dc39      	bgt.n	8009e04 <_printf_float+0x2f4>
 8009d90:	4a1b      	ldr	r2, [pc, #108]	; (8009e00 <_printf_float+0x2f0>)
 8009d92:	2301      	movs	r3, #1
 8009d94:	4631      	mov	r1, r6
 8009d96:	4628      	mov	r0, r5
 8009d98:	47b8      	blx	r7
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	f43f af19 	beq.w	8009bd2 <_printf_float+0xc2>
 8009da0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009da4:	4313      	orrs	r3, r2
 8009da6:	d102      	bne.n	8009dae <_printf_float+0x29e>
 8009da8:	6823      	ldr	r3, [r4, #0]
 8009daa:	07d9      	lsls	r1, r3, #31
 8009dac:	d5d8      	bpl.n	8009d60 <_printf_float+0x250>
 8009dae:	ee18 3a10 	vmov	r3, s16
 8009db2:	4652      	mov	r2, sl
 8009db4:	4631      	mov	r1, r6
 8009db6:	4628      	mov	r0, r5
 8009db8:	47b8      	blx	r7
 8009dba:	3001      	adds	r0, #1
 8009dbc:	f43f af09 	beq.w	8009bd2 <_printf_float+0xc2>
 8009dc0:	f04f 0900 	mov.w	r9, #0
 8009dc4:	f104 0a1a 	add.w	sl, r4, #26
 8009dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dca:	425b      	negs	r3, r3
 8009dcc:	454b      	cmp	r3, r9
 8009dce:	dc01      	bgt.n	8009dd4 <_printf_float+0x2c4>
 8009dd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dd2:	e792      	b.n	8009cfa <_printf_float+0x1ea>
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	4652      	mov	r2, sl
 8009dd8:	4631      	mov	r1, r6
 8009dda:	4628      	mov	r0, r5
 8009ddc:	47b8      	blx	r7
 8009dde:	3001      	adds	r0, #1
 8009de0:	f43f aef7 	beq.w	8009bd2 <_printf_float+0xc2>
 8009de4:	f109 0901 	add.w	r9, r9, #1
 8009de8:	e7ee      	b.n	8009dc8 <_printf_float+0x2b8>
 8009dea:	bf00      	nop
 8009dec:	7fefffff 	.word	0x7fefffff
 8009df0:	0800c808 	.word	0x0800c808
 8009df4:	0800c80c 	.word	0x0800c80c
 8009df8:	0800c814 	.word	0x0800c814
 8009dfc:	0800c810 	.word	0x0800c810
 8009e00:	0800c818 	.word	0x0800c818
 8009e04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	bfa8      	it	ge
 8009e0c:	461a      	movge	r2, r3
 8009e0e:	2a00      	cmp	r2, #0
 8009e10:	4691      	mov	r9, r2
 8009e12:	dc37      	bgt.n	8009e84 <_printf_float+0x374>
 8009e14:	f04f 0b00 	mov.w	fp, #0
 8009e18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e1c:	f104 021a 	add.w	r2, r4, #26
 8009e20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e22:	9305      	str	r3, [sp, #20]
 8009e24:	eba3 0309 	sub.w	r3, r3, r9
 8009e28:	455b      	cmp	r3, fp
 8009e2a:	dc33      	bgt.n	8009e94 <_printf_float+0x384>
 8009e2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e30:	429a      	cmp	r2, r3
 8009e32:	db3b      	blt.n	8009eac <_printf_float+0x39c>
 8009e34:	6823      	ldr	r3, [r4, #0]
 8009e36:	07da      	lsls	r2, r3, #31
 8009e38:	d438      	bmi.n	8009eac <_printf_float+0x39c>
 8009e3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e3c:	9b05      	ldr	r3, [sp, #20]
 8009e3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e40:	1ad3      	subs	r3, r2, r3
 8009e42:	eba2 0901 	sub.w	r9, r2, r1
 8009e46:	4599      	cmp	r9, r3
 8009e48:	bfa8      	it	ge
 8009e4a:	4699      	movge	r9, r3
 8009e4c:	f1b9 0f00 	cmp.w	r9, #0
 8009e50:	dc35      	bgt.n	8009ebe <_printf_float+0x3ae>
 8009e52:	f04f 0800 	mov.w	r8, #0
 8009e56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e5a:	f104 0a1a 	add.w	sl, r4, #26
 8009e5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e62:	1a9b      	subs	r3, r3, r2
 8009e64:	eba3 0309 	sub.w	r3, r3, r9
 8009e68:	4543      	cmp	r3, r8
 8009e6a:	f77f af79 	ble.w	8009d60 <_printf_float+0x250>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	4652      	mov	r2, sl
 8009e72:	4631      	mov	r1, r6
 8009e74:	4628      	mov	r0, r5
 8009e76:	47b8      	blx	r7
 8009e78:	3001      	adds	r0, #1
 8009e7a:	f43f aeaa 	beq.w	8009bd2 <_printf_float+0xc2>
 8009e7e:	f108 0801 	add.w	r8, r8, #1
 8009e82:	e7ec      	b.n	8009e5e <_printf_float+0x34e>
 8009e84:	4613      	mov	r3, r2
 8009e86:	4631      	mov	r1, r6
 8009e88:	4642      	mov	r2, r8
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	47b8      	blx	r7
 8009e8e:	3001      	adds	r0, #1
 8009e90:	d1c0      	bne.n	8009e14 <_printf_float+0x304>
 8009e92:	e69e      	b.n	8009bd2 <_printf_float+0xc2>
 8009e94:	2301      	movs	r3, #1
 8009e96:	4631      	mov	r1, r6
 8009e98:	4628      	mov	r0, r5
 8009e9a:	9205      	str	r2, [sp, #20]
 8009e9c:	47b8      	blx	r7
 8009e9e:	3001      	adds	r0, #1
 8009ea0:	f43f ae97 	beq.w	8009bd2 <_printf_float+0xc2>
 8009ea4:	9a05      	ldr	r2, [sp, #20]
 8009ea6:	f10b 0b01 	add.w	fp, fp, #1
 8009eaa:	e7b9      	b.n	8009e20 <_printf_float+0x310>
 8009eac:	ee18 3a10 	vmov	r3, s16
 8009eb0:	4652      	mov	r2, sl
 8009eb2:	4631      	mov	r1, r6
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	47b8      	blx	r7
 8009eb8:	3001      	adds	r0, #1
 8009eba:	d1be      	bne.n	8009e3a <_printf_float+0x32a>
 8009ebc:	e689      	b.n	8009bd2 <_printf_float+0xc2>
 8009ebe:	9a05      	ldr	r2, [sp, #20]
 8009ec0:	464b      	mov	r3, r9
 8009ec2:	4442      	add	r2, r8
 8009ec4:	4631      	mov	r1, r6
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	47b8      	blx	r7
 8009eca:	3001      	adds	r0, #1
 8009ecc:	d1c1      	bne.n	8009e52 <_printf_float+0x342>
 8009ece:	e680      	b.n	8009bd2 <_printf_float+0xc2>
 8009ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ed2:	2a01      	cmp	r2, #1
 8009ed4:	dc01      	bgt.n	8009eda <_printf_float+0x3ca>
 8009ed6:	07db      	lsls	r3, r3, #31
 8009ed8:	d538      	bpl.n	8009f4c <_printf_float+0x43c>
 8009eda:	2301      	movs	r3, #1
 8009edc:	4642      	mov	r2, r8
 8009ede:	4631      	mov	r1, r6
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	47b8      	blx	r7
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	f43f ae74 	beq.w	8009bd2 <_printf_float+0xc2>
 8009eea:	ee18 3a10 	vmov	r3, s16
 8009eee:	4652      	mov	r2, sl
 8009ef0:	4631      	mov	r1, r6
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	47b8      	blx	r7
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	f43f ae6b 	beq.w	8009bd2 <_printf_float+0xc2>
 8009efc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f00:	2200      	movs	r2, #0
 8009f02:	2300      	movs	r3, #0
 8009f04:	f7f6 fe00 	bl	8000b08 <__aeabi_dcmpeq>
 8009f08:	b9d8      	cbnz	r0, 8009f42 <_printf_float+0x432>
 8009f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f0c:	f108 0201 	add.w	r2, r8, #1
 8009f10:	3b01      	subs	r3, #1
 8009f12:	4631      	mov	r1, r6
 8009f14:	4628      	mov	r0, r5
 8009f16:	47b8      	blx	r7
 8009f18:	3001      	adds	r0, #1
 8009f1a:	d10e      	bne.n	8009f3a <_printf_float+0x42a>
 8009f1c:	e659      	b.n	8009bd2 <_printf_float+0xc2>
 8009f1e:	2301      	movs	r3, #1
 8009f20:	4652      	mov	r2, sl
 8009f22:	4631      	mov	r1, r6
 8009f24:	4628      	mov	r0, r5
 8009f26:	47b8      	blx	r7
 8009f28:	3001      	adds	r0, #1
 8009f2a:	f43f ae52 	beq.w	8009bd2 <_printf_float+0xc2>
 8009f2e:	f108 0801 	add.w	r8, r8, #1
 8009f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f34:	3b01      	subs	r3, #1
 8009f36:	4543      	cmp	r3, r8
 8009f38:	dcf1      	bgt.n	8009f1e <_printf_float+0x40e>
 8009f3a:	464b      	mov	r3, r9
 8009f3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f40:	e6dc      	b.n	8009cfc <_printf_float+0x1ec>
 8009f42:	f04f 0800 	mov.w	r8, #0
 8009f46:	f104 0a1a 	add.w	sl, r4, #26
 8009f4a:	e7f2      	b.n	8009f32 <_printf_float+0x422>
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	4642      	mov	r2, r8
 8009f50:	e7df      	b.n	8009f12 <_printf_float+0x402>
 8009f52:	2301      	movs	r3, #1
 8009f54:	464a      	mov	r2, r9
 8009f56:	4631      	mov	r1, r6
 8009f58:	4628      	mov	r0, r5
 8009f5a:	47b8      	blx	r7
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	f43f ae38 	beq.w	8009bd2 <_printf_float+0xc2>
 8009f62:	f108 0801 	add.w	r8, r8, #1
 8009f66:	68e3      	ldr	r3, [r4, #12]
 8009f68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009f6a:	1a5b      	subs	r3, r3, r1
 8009f6c:	4543      	cmp	r3, r8
 8009f6e:	dcf0      	bgt.n	8009f52 <_printf_float+0x442>
 8009f70:	e6fa      	b.n	8009d68 <_printf_float+0x258>
 8009f72:	f04f 0800 	mov.w	r8, #0
 8009f76:	f104 0919 	add.w	r9, r4, #25
 8009f7a:	e7f4      	b.n	8009f66 <_printf_float+0x456>

08009f7c <_printf_common>:
 8009f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f80:	4616      	mov	r6, r2
 8009f82:	4699      	mov	r9, r3
 8009f84:	688a      	ldr	r2, [r1, #8]
 8009f86:	690b      	ldr	r3, [r1, #16]
 8009f88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	bfb8      	it	lt
 8009f90:	4613      	movlt	r3, r2
 8009f92:	6033      	str	r3, [r6, #0]
 8009f94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f98:	4607      	mov	r7, r0
 8009f9a:	460c      	mov	r4, r1
 8009f9c:	b10a      	cbz	r2, 8009fa2 <_printf_common+0x26>
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	6033      	str	r3, [r6, #0]
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	0699      	lsls	r1, r3, #26
 8009fa6:	bf42      	ittt	mi
 8009fa8:	6833      	ldrmi	r3, [r6, #0]
 8009faa:	3302      	addmi	r3, #2
 8009fac:	6033      	strmi	r3, [r6, #0]
 8009fae:	6825      	ldr	r5, [r4, #0]
 8009fb0:	f015 0506 	ands.w	r5, r5, #6
 8009fb4:	d106      	bne.n	8009fc4 <_printf_common+0x48>
 8009fb6:	f104 0a19 	add.w	sl, r4, #25
 8009fba:	68e3      	ldr	r3, [r4, #12]
 8009fbc:	6832      	ldr	r2, [r6, #0]
 8009fbe:	1a9b      	subs	r3, r3, r2
 8009fc0:	42ab      	cmp	r3, r5
 8009fc2:	dc26      	bgt.n	800a012 <_printf_common+0x96>
 8009fc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fc8:	1e13      	subs	r3, r2, #0
 8009fca:	6822      	ldr	r2, [r4, #0]
 8009fcc:	bf18      	it	ne
 8009fce:	2301      	movne	r3, #1
 8009fd0:	0692      	lsls	r2, r2, #26
 8009fd2:	d42b      	bmi.n	800a02c <_printf_common+0xb0>
 8009fd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fd8:	4649      	mov	r1, r9
 8009fda:	4638      	mov	r0, r7
 8009fdc:	47c0      	blx	r8
 8009fde:	3001      	adds	r0, #1
 8009fe0:	d01e      	beq.n	800a020 <_printf_common+0xa4>
 8009fe2:	6823      	ldr	r3, [r4, #0]
 8009fe4:	68e5      	ldr	r5, [r4, #12]
 8009fe6:	6832      	ldr	r2, [r6, #0]
 8009fe8:	f003 0306 	and.w	r3, r3, #6
 8009fec:	2b04      	cmp	r3, #4
 8009fee:	bf08      	it	eq
 8009ff0:	1aad      	subeq	r5, r5, r2
 8009ff2:	68a3      	ldr	r3, [r4, #8]
 8009ff4:	6922      	ldr	r2, [r4, #16]
 8009ff6:	bf0c      	ite	eq
 8009ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ffc:	2500      	movne	r5, #0
 8009ffe:	4293      	cmp	r3, r2
 800a000:	bfc4      	itt	gt
 800a002:	1a9b      	subgt	r3, r3, r2
 800a004:	18ed      	addgt	r5, r5, r3
 800a006:	2600      	movs	r6, #0
 800a008:	341a      	adds	r4, #26
 800a00a:	42b5      	cmp	r5, r6
 800a00c:	d11a      	bne.n	800a044 <_printf_common+0xc8>
 800a00e:	2000      	movs	r0, #0
 800a010:	e008      	b.n	800a024 <_printf_common+0xa8>
 800a012:	2301      	movs	r3, #1
 800a014:	4652      	mov	r2, sl
 800a016:	4649      	mov	r1, r9
 800a018:	4638      	mov	r0, r7
 800a01a:	47c0      	blx	r8
 800a01c:	3001      	adds	r0, #1
 800a01e:	d103      	bne.n	800a028 <_printf_common+0xac>
 800a020:	f04f 30ff 	mov.w	r0, #4294967295
 800a024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a028:	3501      	adds	r5, #1
 800a02a:	e7c6      	b.n	8009fba <_printf_common+0x3e>
 800a02c:	18e1      	adds	r1, r4, r3
 800a02e:	1c5a      	adds	r2, r3, #1
 800a030:	2030      	movs	r0, #48	; 0x30
 800a032:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a036:	4422      	add	r2, r4
 800a038:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a03c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a040:	3302      	adds	r3, #2
 800a042:	e7c7      	b.n	8009fd4 <_printf_common+0x58>
 800a044:	2301      	movs	r3, #1
 800a046:	4622      	mov	r2, r4
 800a048:	4649      	mov	r1, r9
 800a04a:	4638      	mov	r0, r7
 800a04c:	47c0      	blx	r8
 800a04e:	3001      	adds	r0, #1
 800a050:	d0e6      	beq.n	800a020 <_printf_common+0xa4>
 800a052:	3601      	adds	r6, #1
 800a054:	e7d9      	b.n	800a00a <_printf_common+0x8e>
	...

0800a058 <_printf_i>:
 800a058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a05c:	460c      	mov	r4, r1
 800a05e:	4691      	mov	r9, r2
 800a060:	7e27      	ldrb	r7, [r4, #24]
 800a062:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a064:	2f78      	cmp	r7, #120	; 0x78
 800a066:	4680      	mov	r8, r0
 800a068:	469a      	mov	sl, r3
 800a06a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a06e:	d807      	bhi.n	800a080 <_printf_i+0x28>
 800a070:	2f62      	cmp	r7, #98	; 0x62
 800a072:	d80a      	bhi.n	800a08a <_printf_i+0x32>
 800a074:	2f00      	cmp	r7, #0
 800a076:	f000 80d8 	beq.w	800a22a <_printf_i+0x1d2>
 800a07a:	2f58      	cmp	r7, #88	; 0x58
 800a07c:	f000 80a3 	beq.w	800a1c6 <_printf_i+0x16e>
 800a080:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a084:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a088:	e03a      	b.n	800a100 <_printf_i+0xa8>
 800a08a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a08e:	2b15      	cmp	r3, #21
 800a090:	d8f6      	bhi.n	800a080 <_printf_i+0x28>
 800a092:	a001      	add	r0, pc, #4	; (adr r0, 800a098 <_printf_i+0x40>)
 800a094:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a098:	0800a0f1 	.word	0x0800a0f1
 800a09c:	0800a105 	.word	0x0800a105
 800a0a0:	0800a081 	.word	0x0800a081
 800a0a4:	0800a081 	.word	0x0800a081
 800a0a8:	0800a081 	.word	0x0800a081
 800a0ac:	0800a081 	.word	0x0800a081
 800a0b0:	0800a105 	.word	0x0800a105
 800a0b4:	0800a081 	.word	0x0800a081
 800a0b8:	0800a081 	.word	0x0800a081
 800a0bc:	0800a081 	.word	0x0800a081
 800a0c0:	0800a081 	.word	0x0800a081
 800a0c4:	0800a211 	.word	0x0800a211
 800a0c8:	0800a135 	.word	0x0800a135
 800a0cc:	0800a1f3 	.word	0x0800a1f3
 800a0d0:	0800a081 	.word	0x0800a081
 800a0d4:	0800a081 	.word	0x0800a081
 800a0d8:	0800a233 	.word	0x0800a233
 800a0dc:	0800a081 	.word	0x0800a081
 800a0e0:	0800a135 	.word	0x0800a135
 800a0e4:	0800a081 	.word	0x0800a081
 800a0e8:	0800a081 	.word	0x0800a081
 800a0ec:	0800a1fb 	.word	0x0800a1fb
 800a0f0:	680b      	ldr	r3, [r1, #0]
 800a0f2:	1d1a      	adds	r2, r3, #4
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	600a      	str	r2, [r1, #0]
 800a0f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a0fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a100:	2301      	movs	r3, #1
 800a102:	e0a3      	b.n	800a24c <_printf_i+0x1f4>
 800a104:	6825      	ldr	r5, [r4, #0]
 800a106:	6808      	ldr	r0, [r1, #0]
 800a108:	062e      	lsls	r6, r5, #24
 800a10a:	f100 0304 	add.w	r3, r0, #4
 800a10e:	d50a      	bpl.n	800a126 <_printf_i+0xce>
 800a110:	6805      	ldr	r5, [r0, #0]
 800a112:	600b      	str	r3, [r1, #0]
 800a114:	2d00      	cmp	r5, #0
 800a116:	da03      	bge.n	800a120 <_printf_i+0xc8>
 800a118:	232d      	movs	r3, #45	; 0x2d
 800a11a:	426d      	negs	r5, r5
 800a11c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a120:	485e      	ldr	r0, [pc, #376]	; (800a29c <_printf_i+0x244>)
 800a122:	230a      	movs	r3, #10
 800a124:	e019      	b.n	800a15a <_printf_i+0x102>
 800a126:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a12a:	6805      	ldr	r5, [r0, #0]
 800a12c:	600b      	str	r3, [r1, #0]
 800a12e:	bf18      	it	ne
 800a130:	b22d      	sxthne	r5, r5
 800a132:	e7ef      	b.n	800a114 <_printf_i+0xbc>
 800a134:	680b      	ldr	r3, [r1, #0]
 800a136:	6825      	ldr	r5, [r4, #0]
 800a138:	1d18      	adds	r0, r3, #4
 800a13a:	6008      	str	r0, [r1, #0]
 800a13c:	0628      	lsls	r0, r5, #24
 800a13e:	d501      	bpl.n	800a144 <_printf_i+0xec>
 800a140:	681d      	ldr	r5, [r3, #0]
 800a142:	e002      	b.n	800a14a <_printf_i+0xf2>
 800a144:	0669      	lsls	r1, r5, #25
 800a146:	d5fb      	bpl.n	800a140 <_printf_i+0xe8>
 800a148:	881d      	ldrh	r5, [r3, #0]
 800a14a:	4854      	ldr	r0, [pc, #336]	; (800a29c <_printf_i+0x244>)
 800a14c:	2f6f      	cmp	r7, #111	; 0x6f
 800a14e:	bf0c      	ite	eq
 800a150:	2308      	moveq	r3, #8
 800a152:	230a      	movne	r3, #10
 800a154:	2100      	movs	r1, #0
 800a156:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a15a:	6866      	ldr	r6, [r4, #4]
 800a15c:	60a6      	str	r6, [r4, #8]
 800a15e:	2e00      	cmp	r6, #0
 800a160:	bfa2      	ittt	ge
 800a162:	6821      	ldrge	r1, [r4, #0]
 800a164:	f021 0104 	bicge.w	r1, r1, #4
 800a168:	6021      	strge	r1, [r4, #0]
 800a16a:	b90d      	cbnz	r5, 800a170 <_printf_i+0x118>
 800a16c:	2e00      	cmp	r6, #0
 800a16e:	d04d      	beq.n	800a20c <_printf_i+0x1b4>
 800a170:	4616      	mov	r6, r2
 800a172:	fbb5 f1f3 	udiv	r1, r5, r3
 800a176:	fb03 5711 	mls	r7, r3, r1, r5
 800a17a:	5dc7      	ldrb	r7, [r0, r7]
 800a17c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a180:	462f      	mov	r7, r5
 800a182:	42bb      	cmp	r3, r7
 800a184:	460d      	mov	r5, r1
 800a186:	d9f4      	bls.n	800a172 <_printf_i+0x11a>
 800a188:	2b08      	cmp	r3, #8
 800a18a:	d10b      	bne.n	800a1a4 <_printf_i+0x14c>
 800a18c:	6823      	ldr	r3, [r4, #0]
 800a18e:	07df      	lsls	r7, r3, #31
 800a190:	d508      	bpl.n	800a1a4 <_printf_i+0x14c>
 800a192:	6923      	ldr	r3, [r4, #16]
 800a194:	6861      	ldr	r1, [r4, #4]
 800a196:	4299      	cmp	r1, r3
 800a198:	bfde      	ittt	le
 800a19a:	2330      	movle	r3, #48	; 0x30
 800a19c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a1a0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a1a4:	1b92      	subs	r2, r2, r6
 800a1a6:	6122      	str	r2, [r4, #16]
 800a1a8:	f8cd a000 	str.w	sl, [sp]
 800a1ac:	464b      	mov	r3, r9
 800a1ae:	aa03      	add	r2, sp, #12
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	4640      	mov	r0, r8
 800a1b4:	f7ff fee2 	bl	8009f7c <_printf_common>
 800a1b8:	3001      	adds	r0, #1
 800a1ba:	d14c      	bne.n	800a256 <_printf_i+0x1fe>
 800a1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c0:	b004      	add	sp, #16
 800a1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1c6:	4835      	ldr	r0, [pc, #212]	; (800a29c <_printf_i+0x244>)
 800a1c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a1cc:	6823      	ldr	r3, [r4, #0]
 800a1ce:	680e      	ldr	r6, [r1, #0]
 800a1d0:	061f      	lsls	r7, r3, #24
 800a1d2:	f856 5b04 	ldr.w	r5, [r6], #4
 800a1d6:	600e      	str	r6, [r1, #0]
 800a1d8:	d514      	bpl.n	800a204 <_printf_i+0x1ac>
 800a1da:	07d9      	lsls	r1, r3, #31
 800a1dc:	bf44      	itt	mi
 800a1de:	f043 0320 	orrmi.w	r3, r3, #32
 800a1e2:	6023      	strmi	r3, [r4, #0]
 800a1e4:	b91d      	cbnz	r5, 800a1ee <_printf_i+0x196>
 800a1e6:	6823      	ldr	r3, [r4, #0]
 800a1e8:	f023 0320 	bic.w	r3, r3, #32
 800a1ec:	6023      	str	r3, [r4, #0]
 800a1ee:	2310      	movs	r3, #16
 800a1f0:	e7b0      	b.n	800a154 <_printf_i+0xfc>
 800a1f2:	6823      	ldr	r3, [r4, #0]
 800a1f4:	f043 0320 	orr.w	r3, r3, #32
 800a1f8:	6023      	str	r3, [r4, #0]
 800a1fa:	2378      	movs	r3, #120	; 0x78
 800a1fc:	4828      	ldr	r0, [pc, #160]	; (800a2a0 <_printf_i+0x248>)
 800a1fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a202:	e7e3      	b.n	800a1cc <_printf_i+0x174>
 800a204:	065e      	lsls	r6, r3, #25
 800a206:	bf48      	it	mi
 800a208:	b2ad      	uxthmi	r5, r5
 800a20a:	e7e6      	b.n	800a1da <_printf_i+0x182>
 800a20c:	4616      	mov	r6, r2
 800a20e:	e7bb      	b.n	800a188 <_printf_i+0x130>
 800a210:	680b      	ldr	r3, [r1, #0]
 800a212:	6826      	ldr	r6, [r4, #0]
 800a214:	6960      	ldr	r0, [r4, #20]
 800a216:	1d1d      	adds	r5, r3, #4
 800a218:	600d      	str	r5, [r1, #0]
 800a21a:	0635      	lsls	r5, r6, #24
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	d501      	bpl.n	800a224 <_printf_i+0x1cc>
 800a220:	6018      	str	r0, [r3, #0]
 800a222:	e002      	b.n	800a22a <_printf_i+0x1d2>
 800a224:	0671      	lsls	r1, r6, #25
 800a226:	d5fb      	bpl.n	800a220 <_printf_i+0x1c8>
 800a228:	8018      	strh	r0, [r3, #0]
 800a22a:	2300      	movs	r3, #0
 800a22c:	6123      	str	r3, [r4, #16]
 800a22e:	4616      	mov	r6, r2
 800a230:	e7ba      	b.n	800a1a8 <_printf_i+0x150>
 800a232:	680b      	ldr	r3, [r1, #0]
 800a234:	1d1a      	adds	r2, r3, #4
 800a236:	600a      	str	r2, [r1, #0]
 800a238:	681e      	ldr	r6, [r3, #0]
 800a23a:	6862      	ldr	r2, [r4, #4]
 800a23c:	2100      	movs	r1, #0
 800a23e:	4630      	mov	r0, r6
 800a240:	f7f5 ffee 	bl	8000220 <memchr>
 800a244:	b108      	cbz	r0, 800a24a <_printf_i+0x1f2>
 800a246:	1b80      	subs	r0, r0, r6
 800a248:	6060      	str	r0, [r4, #4]
 800a24a:	6863      	ldr	r3, [r4, #4]
 800a24c:	6123      	str	r3, [r4, #16]
 800a24e:	2300      	movs	r3, #0
 800a250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a254:	e7a8      	b.n	800a1a8 <_printf_i+0x150>
 800a256:	6923      	ldr	r3, [r4, #16]
 800a258:	4632      	mov	r2, r6
 800a25a:	4649      	mov	r1, r9
 800a25c:	4640      	mov	r0, r8
 800a25e:	47d0      	blx	sl
 800a260:	3001      	adds	r0, #1
 800a262:	d0ab      	beq.n	800a1bc <_printf_i+0x164>
 800a264:	6823      	ldr	r3, [r4, #0]
 800a266:	079b      	lsls	r3, r3, #30
 800a268:	d413      	bmi.n	800a292 <_printf_i+0x23a>
 800a26a:	68e0      	ldr	r0, [r4, #12]
 800a26c:	9b03      	ldr	r3, [sp, #12]
 800a26e:	4298      	cmp	r0, r3
 800a270:	bfb8      	it	lt
 800a272:	4618      	movlt	r0, r3
 800a274:	e7a4      	b.n	800a1c0 <_printf_i+0x168>
 800a276:	2301      	movs	r3, #1
 800a278:	4632      	mov	r2, r6
 800a27a:	4649      	mov	r1, r9
 800a27c:	4640      	mov	r0, r8
 800a27e:	47d0      	blx	sl
 800a280:	3001      	adds	r0, #1
 800a282:	d09b      	beq.n	800a1bc <_printf_i+0x164>
 800a284:	3501      	adds	r5, #1
 800a286:	68e3      	ldr	r3, [r4, #12]
 800a288:	9903      	ldr	r1, [sp, #12]
 800a28a:	1a5b      	subs	r3, r3, r1
 800a28c:	42ab      	cmp	r3, r5
 800a28e:	dcf2      	bgt.n	800a276 <_printf_i+0x21e>
 800a290:	e7eb      	b.n	800a26a <_printf_i+0x212>
 800a292:	2500      	movs	r5, #0
 800a294:	f104 0619 	add.w	r6, r4, #25
 800a298:	e7f5      	b.n	800a286 <_printf_i+0x22e>
 800a29a:	bf00      	nop
 800a29c:	0800c81a 	.word	0x0800c81a
 800a2a0:	0800c82b 	.word	0x0800c82b

0800a2a4 <cleanup_glue>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	460c      	mov	r4, r1
 800a2a8:	6809      	ldr	r1, [r1, #0]
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	b109      	cbz	r1, 800a2b2 <cleanup_glue+0xe>
 800a2ae:	f7ff fff9 	bl	800a2a4 <cleanup_glue>
 800a2b2:	4621      	mov	r1, r4
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2ba:	f7ff badf 	b.w	800987c <_free_r>
	...

0800a2c0 <_reclaim_reent>:
 800a2c0:	4b2c      	ldr	r3, [pc, #176]	; (800a374 <_reclaim_reent+0xb4>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4283      	cmp	r3, r0
 800a2c6:	b570      	push	{r4, r5, r6, lr}
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	d051      	beq.n	800a370 <_reclaim_reent+0xb0>
 800a2cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a2ce:	b143      	cbz	r3, 800a2e2 <_reclaim_reent+0x22>
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d14a      	bne.n	800a36c <_reclaim_reent+0xac>
 800a2d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2d8:	6819      	ldr	r1, [r3, #0]
 800a2da:	b111      	cbz	r1, 800a2e2 <_reclaim_reent+0x22>
 800a2dc:	4620      	mov	r0, r4
 800a2de:	f7ff facd 	bl	800987c <_free_r>
 800a2e2:	6961      	ldr	r1, [r4, #20]
 800a2e4:	b111      	cbz	r1, 800a2ec <_reclaim_reent+0x2c>
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	f7ff fac8 	bl	800987c <_free_r>
 800a2ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a2ee:	b111      	cbz	r1, 800a2f6 <_reclaim_reent+0x36>
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	f7ff fac3 	bl	800987c <_free_r>
 800a2f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a2f8:	b111      	cbz	r1, 800a300 <_reclaim_reent+0x40>
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f7ff fabe 	bl	800987c <_free_r>
 800a300:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a302:	b111      	cbz	r1, 800a30a <_reclaim_reent+0x4a>
 800a304:	4620      	mov	r0, r4
 800a306:	f7ff fab9 	bl	800987c <_free_r>
 800a30a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a30c:	b111      	cbz	r1, 800a314 <_reclaim_reent+0x54>
 800a30e:	4620      	mov	r0, r4
 800a310:	f7ff fab4 	bl	800987c <_free_r>
 800a314:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a316:	b111      	cbz	r1, 800a31e <_reclaim_reent+0x5e>
 800a318:	4620      	mov	r0, r4
 800a31a:	f7ff faaf 	bl	800987c <_free_r>
 800a31e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a320:	b111      	cbz	r1, 800a328 <_reclaim_reent+0x68>
 800a322:	4620      	mov	r0, r4
 800a324:	f7ff faaa 	bl	800987c <_free_r>
 800a328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a32a:	b111      	cbz	r1, 800a332 <_reclaim_reent+0x72>
 800a32c:	4620      	mov	r0, r4
 800a32e:	f7ff faa5 	bl	800987c <_free_r>
 800a332:	69a3      	ldr	r3, [r4, #24]
 800a334:	b1e3      	cbz	r3, 800a370 <_reclaim_reent+0xb0>
 800a336:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a338:	4620      	mov	r0, r4
 800a33a:	4798      	blx	r3
 800a33c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a33e:	b1b9      	cbz	r1, 800a370 <_reclaim_reent+0xb0>
 800a340:	4620      	mov	r0, r4
 800a342:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a346:	f7ff bfad 	b.w	800a2a4 <cleanup_glue>
 800a34a:	5949      	ldr	r1, [r1, r5]
 800a34c:	b941      	cbnz	r1, 800a360 <_reclaim_reent+0xa0>
 800a34e:	3504      	adds	r5, #4
 800a350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a352:	2d80      	cmp	r5, #128	; 0x80
 800a354:	68d9      	ldr	r1, [r3, #12]
 800a356:	d1f8      	bne.n	800a34a <_reclaim_reent+0x8a>
 800a358:	4620      	mov	r0, r4
 800a35a:	f7ff fa8f 	bl	800987c <_free_r>
 800a35e:	e7ba      	b.n	800a2d6 <_reclaim_reent+0x16>
 800a360:	680e      	ldr	r6, [r1, #0]
 800a362:	4620      	mov	r0, r4
 800a364:	f7ff fa8a 	bl	800987c <_free_r>
 800a368:	4631      	mov	r1, r6
 800a36a:	e7ef      	b.n	800a34c <_reclaim_reent+0x8c>
 800a36c:	2500      	movs	r5, #0
 800a36e:	e7ef      	b.n	800a350 <_reclaim_reent+0x90>
 800a370:	bd70      	pop	{r4, r5, r6, pc}
 800a372:	bf00      	nop
 800a374:	20000014 	.word	0x20000014

0800a378 <_sbrk_r>:
 800a378:	b538      	push	{r3, r4, r5, lr}
 800a37a:	4d06      	ldr	r5, [pc, #24]	; (800a394 <_sbrk_r+0x1c>)
 800a37c:	2300      	movs	r3, #0
 800a37e:	4604      	mov	r4, r0
 800a380:	4608      	mov	r0, r1
 800a382:	602b      	str	r3, [r5, #0]
 800a384:	f7f7 fa88 	bl	8001898 <_sbrk>
 800a388:	1c43      	adds	r3, r0, #1
 800a38a:	d102      	bne.n	800a392 <_sbrk_r+0x1a>
 800a38c:	682b      	ldr	r3, [r5, #0]
 800a38e:	b103      	cbz	r3, 800a392 <_sbrk_r+0x1a>
 800a390:	6023      	str	r3, [r4, #0]
 800a392:	bd38      	pop	{r3, r4, r5, pc}
 800a394:	20005440 	.word	0x20005440

0800a398 <_raise_r>:
 800a398:	291f      	cmp	r1, #31
 800a39a:	b538      	push	{r3, r4, r5, lr}
 800a39c:	4604      	mov	r4, r0
 800a39e:	460d      	mov	r5, r1
 800a3a0:	d904      	bls.n	800a3ac <_raise_r+0x14>
 800a3a2:	2316      	movs	r3, #22
 800a3a4:	6003      	str	r3, [r0, #0]
 800a3a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a3aa:	bd38      	pop	{r3, r4, r5, pc}
 800a3ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a3ae:	b112      	cbz	r2, 800a3b6 <_raise_r+0x1e>
 800a3b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a3b4:	b94b      	cbnz	r3, 800a3ca <_raise_r+0x32>
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	f000 f830 	bl	800a41c <_getpid_r>
 800a3bc:	462a      	mov	r2, r5
 800a3be:	4601      	mov	r1, r0
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3c6:	f000 b817 	b.w	800a3f8 <_kill_r>
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d00a      	beq.n	800a3e4 <_raise_r+0x4c>
 800a3ce:	1c59      	adds	r1, r3, #1
 800a3d0:	d103      	bne.n	800a3da <_raise_r+0x42>
 800a3d2:	2316      	movs	r3, #22
 800a3d4:	6003      	str	r3, [r0, #0]
 800a3d6:	2001      	movs	r0, #1
 800a3d8:	e7e7      	b.n	800a3aa <_raise_r+0x12>
 800a3da:	2400      	movs	r4, #0
 800a3dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	4798      	blx	r3
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	e7e0      	b.n	800a3aa <_raise_r+0x12>

0800a3e8 <raise>:
 800a3e8:	4b02      	ldr	r3, [pc, #8]	; (800a3f4 <raise+0xc>)
 800a3ea:	4601      	mov	r1, r0
 800a3ec:	6818      	ldr	r0, [r3, #0]
 800a3ee:	f7ff bfd3 	b.w	800a398 <_raise_r>
 800a3f2:	bf00      	nop
 800a3f4:	20000014 	.word	0x20000014

0800a3f8 <_kill_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	4d07      	ldr	r5, [pc, #28]	; (800a418 <_kill_r+0x20>)
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	4604      	mov	r4, r0
 800a400:	4608      	mov	r0, r1
 800a402:	4611      	mov	r1, r2
 800a404:	602b      	str	r3, [r5, #0]
 800a406:	f7f7 f9bf 	bl	8001788 <_kill>
 800a40a:	1c43      	adds	r3, r0, #1
 800a40c:	d102      	bne.n	800a414 <_kill_r+0x1c>
 800a40e:	682b      	ldr	r3, [r5, #0]
 800a410:	b103      	cbz	r3, 800a414 <_kill_r+0x1c>
 800a412:	6023      	str	r3, [r4, #0]
 800a414:	bd38      	pop	{r3, r4, r5, pc}
 800a416:	bf00      	nop
 800a418:	20005440 	.word	0x20005440

0800a41c <_getpid_r>:
 800a41c:	f7f7 b9ac 	b.w	8001778 <_getpid>

0800a420 <siprintf>:
 800a420:	b40e      	push	{r1, r2, r3}
 800a422:	b500      	push	{lr}
 800a424:	b09c      	sub	sp, #112	; 0x70
 800a426:	ab1d      	add	r3, sp, #116	; 0x74
 800a428:	9002      	str	r0, [sp, #8]
 800a42a:	9006      	str	r0, [sp, #24]
 800a42c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a430:	4809      	ldr	r0, [pc, #36]	; (800a458 <siprintf+0x38>)
 800a432:	9107      	str	r1, [sp, #28]
 800a434:	9104      	str	r1, [sp, #16]
 800a436:	4909      	ldr	r1, [pc, #36]	; (800a45c <siprintf+0x3c>)
 800a438:	f853 2b04 	ldr.w	r2, [r3], #4
 800a43c:	9105      	str	r1, [sp, #20]
 800a43e:	6800      	ldr	r0, [r0, #0]
 800a440:	9301      	str	r3, [sp, #4]
 800a442:	a902      	add	r1, sp, #8
 800a444:	f001 fc1e 	bl	800bc84 <_svfiprintf_r>
 800a448:	9b02      	ldr	r3, [sp, #8]
 800a44a:	2200      	movs	r2, #0
 800a44c:	701a      	strb	r2, [r3, #0]
 800a44e:	b01c      	add	sp, #112	; 0x70
 800a450:	f85d eb04 	ldr.w	lr, [sp], #4
 800a454:	b003      	add	sp, #12
 800a456:	4770      	bx	lr
 800a458:	20000014 	.word	0x20000014
 800a45c:	ffff0208 	.word	0xffff0208

0800a460 <__sread>:
 800a460:	b510      	push	{r4, lr}
 800a462:	460c      	mov	r4, r1
 800a464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a468:	f001 fe66 	bl	800c138 <_read_r>
 800a46c:	2800      	cmp	r0, #0
 800a46e:	bfab      	itete	ge
 800a470:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a472:	89a3      	ldrhlt	r3, [r4, #12]
 800a474:	181b      	addge	r3, r3, r0
 800a476:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a47a:	bfac      	ite	ge
 800a47c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a47e:	81a3      	strhlt	r3, [r4, #12]
 800a480:	bd10      	pop	{r4, pc}

0800a482 <__swrite>:
 800a482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a486:	461f      	mov	r7, r3
 800a488:	898b      	ldrh	r3, [r1, #12]
 800a48a:	05db      	lsls	r3, r3, #23
 800a48c:	4605      	mov	r5, r0
 800a48e:	460c      	mov	r4, r1
 800a490:	4616      	mov	r6, r2
 800a492:	d505      	bpl.n	800a4a0 <__swrite+0x1e>
 800a494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a498:	2302      	movs	r3, #2
 800a49a:	2200      	movs	r2, #0
 800a49c:	f000 ffb4 	bl	800b408 <_lseek_r>
 800a4a0:	89a3      	ldrh	r3, [r4, #12]
 800a4a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4aa:	81a3      	strh	r3, [r4, #12]
 800a4ac:	4632      	mov	r2, r6
 800a4ae:	463b      	mov	r3, r7
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b6:	f000 b817 	b.w	800a4e8 <_write_r>

0800a4ba <__sseek>:
 800a4ba:	b510      	push	{r4, lr}
 800a4bc:	460c      	mov	r4, r1
 800a4be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c2:	f000 ffa1 	bl	800b408 <_lseek_r>
 800a4c6:	1c43      	adds	r3, r0, #1
 800a4c8:	89a3      	ldrh	r3, [r4, #12]
 800a4ca:	bf15      	itete	ne
 800a4cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a4d6:	81a3      	strheq	r3, [r4, #12]
 800a4d8:	bf18      	it	ne
 800a4da:	81a3      	strhne	r3, [r4, #12]
 800a4dc:	bd10      	pop	{r4, pc}

0800a4de <__sclose>:
 800a4de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e2:	f000 b831 	b.w	800a548 <_close_r>
	...

0800a4e8 <_write_r>:
 800a4e8:	b538      	push	{r3, r4, r5, lr}
 800a4ea:	4d07      	ldr	r5, [pc, #28]	; (800a508 <_write_r+0x20>)
 800a4ec:	4604      	mov	r4, r0
 800a4ee:	4608      	mov	r0, r1
 800a4f0:	4611      	mov	r1, r2
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	602a      	str	r2, [r5, #0]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	f7f7 f97d 	bl	80017f6 <_write>
 800a4fc:	1c43      	adds	r3, r0, #1
 800a4fe:	d102      	bne.n	800a506 <_write_r+0x1e>
 800a500:	682b      	ldr	r3, [r5, #0]
 800a502:	b103      	cbz	r3, 800a506 <_write_r+0x1e>
 800a504:	6023      	str	r3, [r4, #0]
 800a506:	bd38      	pop	{r3, r4, r5, pc}
 800a508:	20005440 	.word	0x20005440

0800a50c <__assert_func>:
 800a50c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a50e:	4614      	mov	r4, r2
 800a510:	461a      	mov	r2, r3
 800a512:	4b09      	ldr	r3, [pc, #36]	; (800a538 <__assert_func+0x2c>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	4605      	mov	r5, r0
 800a518:	68d8      	ldr	r0, [r3, #12]
 800a51a:	b14c      	cbz	r4, 800a530 <__assert_func+0x24>
 800a51c:	4b07      	ldr	r3, [pc, #28]	; (800a53c <__assert_func+0x30>)
 800a51e:	9100      	str	r1, [sp, #0]
 800a520:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a524:	4906      	ldr	r1, [pc, #24]	; (800a540 <__assert_func+0x34>)
 800a526:	462b      	mov	r3, r5
 800a528:	f000 ff58 	bl	800b3dc <fiprintf>
 800a52c:	f7ff f843 	bl	80095b6 <abort>
 800a530:	4b04      	ldr	r3, [pc, #16]	; (800a544 <__assert_func+0x38>)
 800a532:	461c      	mov	r4, r3
 800a534:	e7f3      	b.n	800a51e <__assert_func+0x12>
 800a536:	bf00      	nop
 800a538:	20000014 	.word	0x20000014
 800a53c:	0800c83c 	.word	0x0800c83c
 800a540:	0800c849 	.word	0x0800c849
 800a544:	0800c877 	.word	0x0800c877

0800a548 <_close_r>:
 800a548:	b538      	push	{r3, r4, r5, lr}
 800a54a:	4d06      	ldr	r5, [pc, #24]	; (800a564 <_close_r+0x1c>)
 800a54c:	2300      	movs	r3, #0
 800a54e:	4604      	mov	r4, r0
 800a550:	4608      	mov	r0, r1
 800a552:	602b      	str	r3, [r5, #0]
 800a554:	f7f7 f96b 	bl	800182e <_close>
 800a558:	1c43      	adds	r3, r0, #1
 800a55a:	d102      	bne.n	800a562 <_close_r+0x1a>
 800a55c:	682b      	ldr	r3, [r5, #0]
 800a55e:	b103      	cbz	r3, 800a562 <_close_r+0x1a>
 800a560:	6023      	str	r3, [r4, #0]
 800a562:	bd38      	pop	{r3, r4, r5, pc}
 800a564:	20005440 	.word	0x20005440

0800a568 <quorem>:
 800a568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56c:	6903      	ldr	r3, [r0, #16]
 800a56e:	690c      	ldr	r4, [r1, #16]
 800a570:	42a3      	cmp	r3, r4
 800a572:	4607      	mov	r7, r0
 800a574:	f2c0 8081 	blt.w	800a67a <quorem+0x112>
 800a578:	3c01      	subs	r4, #1
 800a57a:	f101 0814 	add.w	r8, r1, #20
 800a57e:	f100 0514 	add.w	r5, r0, #20
 800a582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a586:	9301      	str	r3, [sp, #4]
 800a588:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a58c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a590:	3301      	adds	r3, #1
 800a592:	429a      	cmp	r2, r3
 800a594:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a598:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a59c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5a0:	d331      	bcc.n	800a606 <quorem+0x9e>
 800a5a2:	f04f 0e00 	mov.w	lr, #0
 800a5a6:	4640      	mov	r0, r8
 800a5a8:	46ac      	mov	ip, r5
 800a5aa:	46f2      	mov	sl, lr
 800a5ac:	f850 2b04 	ldr.w	r2, [r0], #4
 800a5b0:	b293      	uxth	r3, r2
 800a5b2:	fb06 e303 	mla	r3, r6, r3, lr
 800a5b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	ebaa 0303 	sub.w	r3, sl, r3
 800a5c0:	0c12      	lsrs	r2, r2, #16
 800a5c2:	f8dc a000 	ldr.w	sl, [ip]
 800a5c6:	fb06 e202 	mla	r2, r6, r2, lr
 800a5ca:	fa13 f38a 	uxtah	r3, r3, sl
 800a5ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a5d2:	fa1f fa82 	uxth.w	sl, r2
 800a5d6:	f8dc 2000 	ldr.w	r2, [ip]
 800a5da:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a5de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5e8:	4581      	cmp	r9, r0
 800a5ea:	f84c 3b04 	str.w	r3, [ip], #4
 800a5ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a5f2:	d2db      	bcs.n	800a5ac <quorem+0x44>
 800a5f4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a5f8:	b92b      	cbnz	r3, 800a606 <quorem+0x9e>
 800a5fa:	9b01      	ldr	r3, [sp, #4]
 800a5fc:	3b04      	subs	r3, #4
 800a5fe:	429d      	cmp	r5, r3
 800a600:	461a      	mov	r2, r3
 800a602:	d32e      	bcc.n	800a662 <quorem+0xfa>
 800a604:	613c      	str	r4, [r7, #16]
 800a606:	4638      	mov	r0, r7
 800a608:	f001 f9ac 	bl	800b964 <__mcmp>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	db24      	blt.n	800a65a <quorem+0xf2>
 800a610:	3601      	adds	r6, #1
 800a612:	4628      	mov	r0, r5
 800a614:	f04f 0c00 	mov.w	ip, #0
 800a618:	f858 2b04 	ldr.w	r2, [r8], #4
 800a61c:	f8d0 e000 	ldr.w	lr, [r0]
 800a620:	b293      	uxth	r3, r2
 800a622:	ebac 0303 	sub.w	r3, ip, r3
 800a626:	0c12      	lsrs	r2, r2, #16
 800a628:	fa13 f38e 	uxtah	r3, r3, lr
 800a62c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a630:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a634:	b29b      	uxth	r3, r3
 800a636:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a63a:	45c1      	cmp	r9, r8
 800a63c:	f840 3b04 	str.w	r3, [r0], #4
 800a640:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a644:	d2e8      	bcs.n	800a618 <quorem+0xb0>
 800a646:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a64a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a64e:	b922      	cbnz	r2, 800a65a <quorem+0xf2>
 800a650:	3b04      	subs	r3, #4
 800a652:	429d      	cmp	r5, r3
 800a654:	461a      	mov	r2, r3
 800a656:	d30a      	bcc.n	800a66e <quorem+0x106>
 800a658:	613c      	str	r4, [r7, #16]
 800a65a:	4630      	mov	r0, r6
 800a65c:	b003      	add	sp, #12
 800a65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a662:	6812      	ldr	r2, [r2, #0]
 800a664:	3b04      	subs	r3, #4
 800a666:	2a00      	cmp	r2, #0
 800a668:	d1cc      	bne.n	800a604 <quorem+0x9c>
 800a66a:	3c01      	subs	r4, #1
 800a66c:	e7c7      	b.n	800a5fe <quorem+0x96>
 800a66e:	6812      	ldr	r2, [r2, #0]
 800a670:	3b04      	subs	r3, #4
 800a672:	2a00      	cmp	r2, #0
 800a674:	d1f0      	bne.n	800a658 <quorem+0xf0>
 800a676:	3c01      	subs	r4, #1
 800a678:	e7eb      	b.n	800a652 <quorem+0xea>
 800a67a:	2000      	movs	r0, #0
 800a67c:	e7ee      	b.n	800a65c <quorem+0xf4>
	...

0800a680 <_dtoa_r>:
 800a680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a684:	ed2d 8b02 	vpush	{d8}
 800a688:	ec57 6b10 	vmov	r6, r7, d0
 800a68c:	b095      	sub	sp, #84	; 0x54
 800a68e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a690:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a694:	9105      	str	r1, [sp, #20]
 800a696:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a69a:	4604      	mov	r4, r0
 800a69c:	9209      	str	r2, [sp, #36]	; 0x24
 800a69e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a6a0:	b975      	cbnz	r5, 800a6c0 <_dtoa_r+0x40>
 800a6a2:	2010      	movs	r0, #16
 800a6a4:	f7ff f8b2 	bl	800980c <malloc>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	6260      	str	r0, [r4, #36]	; 0x24
 800a6ac:	b920      	cbnz	r0, 800a6b8 <_dtoa_r+0x38>
 800a6ae:	4bb2      	ldr	r3, [pc, #712]	; (800a978 <_dtoa_r+0x2f8>)
 800a6b0:	21ea      	movs	r1, #234	; 0xea
 800a6b2:	48b2      	ldr	r0, [pc, #712]	; (800a97c <_dtoa_r+0x2fc>)
 800a6b4:	f7ff ff2a 	bl	800a50c <__assert_func>
 800a6b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a6bc:	6005      	str	r5, [r0, #0]
 800a6be:	60c5      	str	r5, [r0, #12]
 800a6c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6c2:	6819      	ldr	r1, [r3, #0]
 800a6c4:	b151      	cbz	r1, 800a6dc <_dtoa_r+0x5c>
 800a6c6:	685a      	ldr	r2, [r3, #4]
 800a6c8:	604a      	str	r2, [r1, #4]
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	4093      	lsls	r3, r2
 800a6ce:	608b      	str	r3, [r1, #8]
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f000 ff09 	bl	800b4e8 <_Bfree>
 800a6d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6d8:	2200      	movs	r2, #0
 800a6da:	601a      	str	r2, [r3, #0]
 800a6dc:	1e3b      	subs	r3, r7, #0
 800a6de:	bfb9      	ittee	lt
 800a6e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a6e4:	9303      	strlt	r3, [sp, #12]
 800a6e6:	2300      	movge	r3, #0
 800a6e8:	f8c8 3000 	strge.w	r3, [r8]
 800a6ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a6f0:	4ba3      	ldr	r3, [pc, #652]	; (800a980 <_dtoa_r+0x300>)
 800a6f2:	bfbc      	itt	lt
 800a6f4:	2201      	movlt	r2, #1
 800a6f6:	f8c8 2000 	strlt.w	r2, [r8]
 800a6fa:	ea33 0309 	bics.w	r3, r3, r9
 800a6fe:	d11b      	bne.n	800a738 <_dtoa_r+0xb8>
 800a700:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a702:	f242 730f 	movw	r3, #9999	; 0x270f
 800a706:	6013      	str	r3, [r2, #0]
 800a708:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a70c:	4333      	orrs	r3, r6
 800a70e:	f000 857a 	beq.w	800b206 <_dtoa_r+0xb86>
 800a712:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a714:	b963      	cbnz	r3, 800a730 <_dtoa_r+0xb0>
 800a716:	4b9b      	ldr	r3, [pc, #620]	; (800a984 <_dtoa_r+0x304>)
 800a718:	e024      	b.n	800a764 <_dtoa_r+0xe4>
 800a71a:	4b9b      	ldr	r3, [pc, #620]	; (800a988 <_dtoa_r+0x308>)
 800a71c:	9300      	str	r3, [sp, #0]
 800a71e:	3308      	adds	r3, #8
 800a720:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a722:	6013      	str	r3, [r2, #0]
 800a724:	9800      	ldr	r0, [sp, #0]
 800a726:	b015      	add	sp, #84	; 0x54
 800a728:	ecbd 8b02 	vpop	{d8}
 800a72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a730:	4b94      	ldr	r3, [pc, #592]	; (800a984 <_dtoa_r+0x304>)
 800a732:	9300      	str	r3, [sp, #0]
 800a734:	3303      	adds	r3, #3
 800a736:	e7f3      	b.n	800a720 <_dtoa_r+0xa0>
 800a738:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a73c:	2200      	movs	r2, #0
 800a73e:	ec51 0b17 	vmov	r0, r1, d7
 800a742:	2300      	movs	r3, #0
 800a744:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a748:	f7f6 f9de 	bl	8000b08 <__aeabi_dcmpeq>
 800a74c:	4680      	mov	r8, r0
 800a74e:	b158      	cbz	r0, 800a768 <_dtoa_r+0xe8>
 800a750:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a752:	2301      	movs	r3, #1
 800a754:	6013      	str	r3, [r2, #0]
 800a756:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f000 8551 	beq.w	800b200 <_dtoa_r+0xb80>
 800a75e:	488b      	ldr	r0, [pc, #556]	; (800a98c <_dtoa_r+0x30c>)
 800a760:	6018      	str	r0, [r3, #0]
 800a762:	1e43      	subs	r3, r0, #1
 800a764:	9300      	str	r3, [sp, #0]
 800a766:	e7dd      	b.n	800a724 <_dtoa_r+0xa4>
 800a768:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a76c:	aa12      	add	r2, sp, #72	; 0x48
 800a76e:	a913      	add	r1, sp, #76	; 0x4c
 800a770:	4620      	mov	r0, r4
 800a772:	f001 f99b 	bl	800baac <__d2b>
 800a776:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a77a:	4683      	mov	fp, r0
 800a77c:	2d00      	cmp	r5, #0
 800a77e:	d07c      	beq.n	800a87a <_dtoa_r+0x1fa>
 800a780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a782:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a786:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a78a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a78e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a792:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a796:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a79a:	4b7d      	ldr	r3, [pc, #500]	; (800a990 <_dtoa_r+0x310>)
 800a79c:	2200      	movs	r2, #0
 800a79e:	4630      	mov	r0, r6
 800a7a0:	4639      	mov	r1, r7
 800a7a2:	f7f5 fd91 	bl	80002c8 <__aeabi_dsub>
 800a7a6:	a36e      	add	r3, pc, #440	; (adr r3, 800a960 <_dtoa_r+0x2e0>)
 800a7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ac:	f7f5 ff44 	bl	8000638 <__aeabi_dmul>
 800a7b0:	a36d      	add	r3, pc, #436	; (adr r3, 800a968 <_dtoa_r+0x2e8>)
 800a7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b6:	f7f5 fd89 	bl	80002cc <__adddf3>
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	4628      	mov	r0, r5
 800a7be:	460f      	mov	r7, r1
 800a7c0:	f7f5 fed0 	bl	8000564 <__aeabi_i2d>
 800a7c4:	a36a      	add	r3, pc, #424	; (adr r3, 800a970 <_dtoa_r+0x2f0>)
 800a7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ca:	f7f5 ff35 	bl	8000638 <__aeabi_dmul>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	f7f5 fd79 	bl	80002cc <__adddf3>
 800a7da:	4606      	mov	r6, r0
 800a7dc:	460f      	mov	r7, r1
 800a7de:	f7f6 f9db 	bl	8000b98 <__aeabi_d2iz>
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	4682      	mov	sl, r0
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	4630      	mov	r0, r6
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	f7f6 f996 	bl	8000b1c <__aeabi_dcmplt>
 800a7f0:	b148      	cbz	r0, 800a806 <_dtoa_r+0x186>
 800a7f2:	4650      	mov	r0, sl
 800a7f4:	f7f5 feb6 	bl	8000564 <__aeabi_i2d>
 800a7f8:	4632      	mov	r2, r6
 800a7fa:	463b      	mov	r3, r7
 800a7fc:	f7f6 f984 	bl	8000b08 <__aeabi_dcmpeq>
 800a800:	b908      	cbnz	r0, 800a806 <_dtoa_r+0x186>
 800a802:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a806:	f1ba 0f16 	cmp.w	sl, #22
 800a80a:	d854      	bhi.n	800a8b6 <_dtoa_r+0x236>
 800a80c:	4b61      	ldr	r3, [pc, #388]	; (800a994 <_dtoa_r+0x314>)
 800a80e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a81a:	f7f6 f97f 	bl	8000b1c <__aeabi_dcmplt>
 800a81e:	2800      	cmp	r0, #0
 800a820:	d04b      	beq.n	800a8ba <_dtoa_r+0x23a>
 800a822:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a826:	2300      	movs	r3, #0
 800a828:	930e      	str	r3, [sp, #56]	; 0x38
 800a82a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a82c:	1b5d      	subs	r5, r3, r5
 800a82e:	1e6b      	subs	r3, r5, #1
 800a830:	9304      	str	r3, [sp, #16]
 800a832:	bf43      	ittte	mi
 800a834:	2300      	movmi	r3, #0
 800a836:	f1c5 0801 	rsbmi	r8, r5, #1
 800a83a:	9304      	strmi	r3, [sp, #16]
 800a83c:	f04f 0800 	movpl.w	r8, #0
 800a840:	f1ba 0f00 	cmp.w	sl, #0
 800a844:	db3b      	blt.n	800a8be <_dtoa_r+0x23e>
 800a846:	9b04      	ldr	r3, [sp, #16]
 800a848:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a84c:	4453      	add	r3, sl
 800a84e:	9304      	str	r3, [sp, #16]
 800a850:	2300      	movs	r3, #0
 800a852:	9306      	str	r3, [sp, #24]
 800a854:	9b05      	ldr	r3, [sp, #20]
 800a856:	2b09      	cmp	r3, #9
 800a858:	d869      	bhi.n	800a92e <_dtoa_r+0x2ae>
 800a85a:	2b05      	cmp	r3, #5
 800a85c:	bfc4      	itt	gt
 800a85e:	3b04      	subgt	r3, #4
 800a860:	9305      	strgt	r3, [sp, #20]
 800a862:	9b05      	ldr	r3, [sp, #20]
 800a864:	f1a3 0302 	sub.w	r3, r3, #2
 800a868:	bfcc      	ite	gt
 800a86a:	2500      	movgt	r5, #0
 800a86c:	2501      	movle	r5, #1
 800a86e:	2b03      	cmp	r3, #3
 800a870:	d869      	bhi.n	800a946 <_dtoa_r+0x2c6>
 800a872:	e8df f003 	tbb	[pc, r3]
 800a876:	4e2c      	.short	0x4e2c
 800a878:	5a4c      	.short	0x5a4c
 800a87a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a87e:	441d      	add	r5, r3
 800a880:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a884:	2b20      	cmp	r3, #32
 800a886:	bfc1      	itttt	gt
 800a888:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a88c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a890:	fa09 f303 	lslgt.w	r3, r9, r3
 800a894:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a898:	bfda      	itte	le
 800a89a:	f1c3 0320 	rsble	r3, r3, #32
 800a89e:	fa06 f003 	lslle.w	r0, r6, r3
 800a8a2:	4318      	orrgt	r0, r3
 800a8a4:	f7f5 fe4e 	bl	8000544 <__aeabi_ui2d>
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a8b0:	3d01      	subs	r5, #1
 800a8b2:	9310      	str	r3, [sp, #64]	; 0x40
 800a8b4:	e771      	b.n	800a79a <_dtoa_r+0x11a>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	e7b6      	b.n	800a828 <_dtoa_r+0x1a8>
 800a8ba:	900e      	str	r0, [sp, #56]	; 0x38
 800a8bc:	e7b5      	b.n	800a82a <_dtoa_r+0x1aa>
 800a8be:	f1ca 0300 	rsb	r3, sl, #0
 800a8c2:	9306      	str	r3, [sp, #24]
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	eba8 080a 	sub.w	r8, r8, sl
 800a8ca:	930d      	str	r3, [sp, #52]	; 0x34
 800a8cc:	e7c2      	b.n	800a854 <_dtoa_r+0x1d4>
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	9308      	str	r3, [sp, #32]
 800a8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	dc39      	bgt.n	800a94c <_dtoa_r+0x2cc>
 800a8d8:	f04f 0901 	mov.w	r9, #1
 800a8dc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a8e0:	464b      	mov	r3, r9
 800a8e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a8e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	6042      	str	r2, [r0, #4]
 800a8ec:	2204      	movs	r2, #4
 800a8ee:	f102 0614 	add.w	r6, r2, #20
 800a8f2:	429e      	cmp	r6, r3
 800a8f4:	6841      	ldr	r1, [r0, #4]
 800a8f6:	d92f      	bls.n	800a958 <_dtoa_r+0x2d8>
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f000 fdb5 	bl	800b468 <_Balloc>
 800a8fe:	9000      	str	r0, [sp, #0]
 800a900:	2800      	cmp	r0, #0
 800a902:	d14b      	bne.n	800a99c <_dtoa_r+0x31c>
 800a904:	4b24      	ldr	r3, [pc, #144]	; (800a998 <_dtoa_r+0x318>)
 800a906:	4602      	mov	r2, r0
 800a908:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a90c:	e6d1      	b.n	800a6b2 <_dtoa_r+0x32>
 800a90e:	2301      	movs	r3, #1
 800a910:	e7de      	b.n	800a8d0 <_dtoa_r+0x250>
 800a912:	2300      	movs	r3, #0
 800a914:	9308      	str	r3, [sp, #32]
 800a916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a918:	eb0a 0903 	add.w	r9, sl, r3
 800a91c:	f109 0301 	add.w	r3, r9, #1
 800a920:	2b01      	cmp	r3, #1
 800a922:	9301      	str	r3, [sp, #4]
 800a924:	bfb8      	it	lt
 800a926:	2301      	movlt	r3, #1
 800a928:	e7dd      	b.n	800a8e6 <_dtoa_r+0x266>
 800a92a:	2301      	movs	r3, #1
 800a92c:	e7f2      	b.n	800a914 <_dtoa_r+0x294>
 800a92e:	2501      	movs	r5, #1
 800a930:	2300      	movs	r3, #0
 800a932:	9305      	str	r3, [sp, #20]
 800a934:	9508      	str	r5, [sp, #32]
 800a936:	f04f 39ff 	mov.w	r9, #4294967295
 800a93a:	2200      	movs	r2, #0
 800a93c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a940:	2312      	movs	r3, #18
 800a942:	9209      	str	r2, [sp, #36]	; 0x24
 800a944:	e7cf      	b.n	800a8e6 <_dtoa_r+0x266>
 800a946:	2301      	movs	r3, #1
 800a948:	9308      	str	r3, [sp, #32]
 800a94a:	e7f4      	b.n	800a936 <_dtoa_r+0x2b6>
 800a94c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a950:	f8cd 9004 	str.w	r9, [sp, #4]
 800a954:	464b      	mov	r3, r9
 800a956:	e7c6      	b.n	800a8e6 <_dtoa_r+0x266>
 800a958:	3101      	adds	r1, #1
 800a95a:	6041      	str	r1, [r0, #4]
 800a95c:	0052      	lsls	r2, r2, #1
 800a95e:	e7c6      	b.n	800a8ee <_dtoa_r+0x26e>
 800a960:	636f4361 	.word	0x636f4361
 800a964:	3fd287a7 	.word	0x3fd287a7
 800a968:	8b60c8b3 	.word	0x8b60c8b3
 800a96c:	3fc68a28 	.word	0x3fc68a28
 800a970:	509f79fb 	.word	0x509f79fb
 800a974:	3fd34413 	.word	0x3fd34413
 800a978:	0800c986 	.word	0x0800c986
 800a97c:	0800c99d 	.word	0x0800c99d
 800a980:	7ff00000 	.word	0x7ff00000
 800a984:	0800c982 	.word	0x0800c982
 800a988:	0800c979 	.word	0x0800c979
 800a98c:	0800c819 	.word	0x0800c819
 800a990:	3ff80000 	.word	0x3ff80000
 800a994:	0800caa0 	.word	0x0800caa0
 800a998:	0800c9fc 	.word	0x0800c9fc
 800a99c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a99e:	9a00      	ldr	r2, [sp, #0]
 800a9a0:	601a      	str	r2, [r3, #0]
 800a9a2:	9b01      	ldr	r3, [sp, #4]
 800a9a4:	2b0e      	cmp	r3, #14
 800a9a6:	f200 80ad 	bhi.w	800ab04 <_dtoa_r+0x484>
 800a9aa:	2d00      	cmp	r5, #0
 800a9ac:	f000 80aa 	beq.w	800ab04 <_dtoa_r+0x484>
 800a9b0:	f1ba 0f00 	cmp.w	sl, #0
 800a9b4:	dd36      	ble.n	800aa24 <_dtoa_r+0x3a4>
 800a9b6:	4ac3      	ldr	r2, [pc, #780]	; (800acc4 <_dtoa_r+0x644>)
 800a9b8:	f00a 030f 	and.w	r3, sl, #15
 800a9bc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a9c0:	ed93 7b00 	vldr	d7, [r3]
 800a9c4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a9c8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a9cc:	eeb0 8a47 	vmov.f32	s16, s14
 800a9d0:	eef0 8a67 	vmov.f32	s17, s15
 800a9d4:	d016      	beq.n	800aa04 <_dtoa_r+0x384>
 800a9d6:	4bbc      	ldr	r3, [pc, #752]	; (800acc8 <_dtoa_r+0x648>)
 800a9d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a9dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9e0:	f7f5 ff54 	bl	800088c <__aeabi_ddiv>
 800a9e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9e8:	f007 070f 	and.w	r7, r7, #15
 800a9ec:	2503      	movs	r5, #3
 800a9ee:	4eb6      	ldr	r6, [pc, #728]	; (800acc8 <_dtoa_r+0x648>)
 800a9f0:	b957      	cbnz	r7, 800aa08 <_dtoa_r+0x388>
 800a9f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9f6:	ec53 2b18 	vmov	r2, r3, d8
 800a9fa:	f7f5 ff47 	bl	800088c <__aeabi_ddiv>
 800a9fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa02:	e029      	b.n	800aa58 <_dtoa_r+0x3d8>
 800aa04:	2502      	movs	r5, #2
 800aa06:	e7f2      	b.n	800a9ee <_dtoa_r+0x36e>
 800aa08:	07f9      	lsls	r1, r7, #31
 800aa0a:	d508      	bpl.n	800aa1e <_dtoa_r+0x39e>
 800aa0c:	ec51 0b18 	vmov	r0, r1, d8
 800aa10:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa14:	f7f5 fe10 	bl	8000638 <__aeabi_dmul>
 800aa18:	ec41 0b18 	vmov	d8, r0, r1
 800aa1c:	3501      	adds	r5, #1
 800aa1e:	107f      	asrs	r7, r7, #1
 800aa20:	3608      	adds	r6, #8
 800aa22:	e7e5      	b.n	800a9f0 <_dtoa_r+0x370>
 800aa24:	f000 80a6 	beq.w	800ab74 <_dtoa_r+0x4f4>
 800aa28:	f1ca 0600 	rsb	r6, sl, #0
 800aa2c:	4ba5      	ldr	r3, [pc, #660]	; (800acc4 <_dtoa_r+0x644>)
 800aa2e:	4fa6      	ldr	r7, [pc, #664]	; (800acc8 <_dtoa_r+0x648>)
 800aa30:	f006 020f 	and.w	r2, r6, #15
 800aa34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa40:	f7f5 fdfa 	bl	8000638 <__aeabi_dmul>
 800aa44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa48:	1136      	asrs	r6, r6, #4
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	2502      	movs	r5, #2
 800aa4e:	2e00      	cmp	r6, #0
 800aa50:	f040 8085 	bne.w	800ab5e <_dtoa_r+0x4de>
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1d2      	bne.n	800a9fe <_dtoa_r+0x37e>
 800aa58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	f000 808c 	beq.w	800ab78 <_dtoa_r+0x4f8>
 800aa60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aa64:	4b99      	ldr	r3, [pc, #612]	; (800accc <_dtoa_r+0x64c>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	4630      	mov	r0, r6
 800aa6a:	4639      	mov	r1, r7
 800aa6c:	f7f6 f856 	bl	8000b1c <__aeabi_dcmplt>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	f000 8081 	beq.w	800ab78 <_dtoa_r+0x4f8>
 800aa76:	9b01      	ldr	r3, [sp, #4]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d07d      	beq.n	800ab78 <_dtoa_r+0x4f8>
 800aa7c:	f1b9 0f00 	cmp.w	r9, #0
 800aa80:	dd3c      	ble.n	800aafc <_dtoa_r+0x47c>
 800aa82:	f10a 33ff 	add.w	r3, sl, #4294967295
 800aa86:	9307      	str	r3, [sp, #28]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	4b91      	ldr	r3, [pc, #580]	; (800acd0 <_dtoa_r+0x650>)
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	4639      	mov	r1, r7
 800aa90:	f7f5 fdd2 	bl	8000638 <__aeabi_dmul>
 800aa94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa98:	3501      	adds	r5, #1
 800aa9a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800aa9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	f7f5 fd5e 	bl	8000564 <__aeabi_i2d>
 800aaa8:	4632      	mov	r2, r6
 800aaaa:	463b      	mov	r3, r7
 800aaac:	f7f5 fdc4 	bl	8000638 <__aeabi_dmul>
 800aab0:	4b88      	ldr	r3, [pc, #544]	; (800acd4 <_dtoa_r+0x654>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	f7f5 fc0a 	bl	80002cc <__adddf3>
 800aab8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800aabc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aac0:	9303      	str	r3, [sp, #12]
 800aac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d15c      	bne.n	800ab82 <_dtoa_r+0x502>
 800aac8:	4b83      	ldr	r3, [pc, #524]	; (800acd8 <_dtoa_r+0x658>)
 800aaca:	2200      	movs	r2, #0
 800aacc:	4630      	mov	r0, r6
 800aace:	4639      	mov	r1, r7
 800aad0:	f7f5 fbfa 	bl	80002c8 <__aeabi_dsub>
 800aad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aad8:	4606      	mov	r6, r0
 800aada:	460f      	mov	r7, r1
 800aadc:	f7f6 f83c 	bl	8000b58 <__aeabi_dcmpgt>
 800aae0:	2800      	cmp	r0, #0
 800aae2:	f040 8296 	bne.w	800b012 <_dtoa_r+0x992>
 800aae6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800aaea:	4630      	mov	r0, r6
 800aaec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aaf0:	4639      	mov	r1, r7
 800aaf2:	f7f6 f813 	bl	8000b1c <__aeabi_dcmplt>
 800aaf6:	2800      	cmp	r0, #0
 800aaf8:	f040 8288 	bne.w	800b00c <_dtoa_r+0x98c>
 800aafc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ab00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f2c0 8158 	blt.w	800adbc <_dtoa_r+0x73c>
 800ab0c:	f1ba 0f0e 	cmp.w	sl, #14
 800ab10:	f300 8154 	bgt.w	800adbc <_dtoa_r+0x73c>
 800ab14:	4b6b      	ldr	r3, [pc, #428]	; (800acc4 <_dtoa_r+0x644>)
 800ab16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ab1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f280 80e3 	bge.w	800acec <_dtoa_r+0x66c>
 800ab26:	9b01      	ldr	r3, [sp, #4]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f300 80df 	bgt.w	800acec <_dtoa_r+0x66c>
 800ab2e:	f040 826d 	bne.w	800b00c <_dtoa_r+0x98c>
 800ab32:	4b69      	ldr	r3, [pc, #420]	; (800acd8 <_dtoa_r+0x658>)
 800ab34:	2200      	movs	r2, #0
 800ab36:	4640      	mov	r0, r8
 800ab38:	4649      	mov	r1, r9
 800ab3a:	f7f5 fd7d 	bl	8000638 <__aeabi_dmul>
 800ab3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab42:	f7f5 ffff 	bl	8000b44 <__aeabi_dcmpge>
 800ab46:	9e01      	ldr	r6, [sp, #4]
 800ab48:	4637      	mov	r7, r6
 800ab4a:	2800      	cmp	r0, #0
 800ab4c:	f040 8243 	bne.w	800afd6 <_dtoa_r+0x956>
 800ab50:	9d00      	ldr	r5, [sp, #0]
 800ab52:	2331      	movs	r3, #49	; 0x31
 800ab54:	f805 3b01 	strb.w	r3, [r5], #1
 800ab58:	f10a 0a01 	add.w	sl, sl, #1
 800ab5c:	e23f      	b.n	800afde <_dtoa_r+0x95e>
 800ab5e:	07f2      	lsls	r2, r6, #31
 800ab60:	d505      	bpl.n	800ab6e <_dtoa_r+0x4ee>
 800ab62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab66:	f7f5 fd67 	bl	8000638 <__aeabi_dmul>
 800ab6a:	3501      	adds	r5, #1
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	1076      	asrs	r6, r6, #1
 800ab70:	3708      	adds	r7, #8
 800ab72:	e76c      	b.n	800aa4e <_dtoa_r+0x3ce>
 800ab74:	2502      	movs	r5, #2
 800ab76:	e76f      	b.n	800aa58 <_dtoa_r+0x3d8>
 800ab78:	9b01      	ldr	r3, [sp, #4]
 800ab7a:	f8cd a01c 	str.w	sl, [sp, #28]
 800ab7e:	930c      	str	r3, [sp, #48]	; 0x30
 800ab80:	e78d      	b.n	800aa9e <_dtoa_r+0x41e>
 800ab82:	9900      	ldr	r1, [sp, #0]
 800ab84:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ab86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab88:	4b4e      	ldr	r3, [pc, #312]	; (800acc4 <_dtoa_r+0x644>)
 800ab8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab8e:	4401      	add	r1, r0
 800ab90:	9102      	str	r1, [sp, #8]
 800ab92:	9908      	ldr	r1, [sp, #32]
 800ab94:	eeb0 8a47 	vmov.f32	s16, s14
 800ab98:	eef0 8a67 	vmov.f32	s17, s15
 800ab9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aba0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aba4:	2900      	cmp	r1, #0
 800aba6:	d045      	beq.n	800ac34 <_dtoa_r+0x5b4>
 800aba8:	494c      	ldr	r1, [pc, #304]	; (800acdc <_dtoa_r+0x65c>)
 800abaa:	2000      	movs	r0, #0
 800abac:	f7f5 fe6e 	bl	800088c <__aeabi_ddiv>
 800abb0:	ec53 2b18 	vmov	r2, r3, d8
 800abb4:	f7f5 fb88 	bl	80002c8 <__aeabi_dsub>
 800abb8:	9d00      	ldr	r5, [sp, #0]
 800abba:	ec41 0b18 	vmov	d8, r0, r1
 800abbe:	4639      	mov	r1, r7
 800abc0:	4630      	mov	r0, r6
 800abc2:	f7f5 ffe9 	bl	8000b98 <__aeabi_d2iz>
 800abc6:	900c      	str	r0, [sp, #48]	; 0x30
 800abc8:	f7f5 fccc 	bl	8000564 <__aeabi_i2d>
 800abcc:	4602      	mov	r2, r0
 800abce:	460b      	mov	r3, r1
 800abd0:	4630      	mov	r0, r6
 800abd2:	4639      	mov	r1, r7
 800abd4:	f7f5 fb78 	bl	80002c8 <__aeabi_dsub>
 800abd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800abda:	3330      	adds	r3, #48	; 0x30
 800abdc:	f805 3b01 	strb.w	r3, [r5], #1
 800abe0:	ec53 2b18 	vmov	r2, r3, d8
 800abe4:	4606      	mov	r6, r0
 800abe6:	460f      	mov	r7, r1
 800abe8:	f7f5 ff98 	bl	8000b1c <__aeabi_dcmplt>
 800abec:	2800      	cmp	r0, #0
 800abee:	d165      	bne.n	800acbc <_dtoa_r+0x63c>
 800abf0:	4632      	mov	r2, r6
 800abf2:	463b      	mov	r3, r7
 800abf4:	4935      	ldr	r1, [pc, #212]	; (800accc <_dtoa_r+0x64c>)
 800abf6:	2000      	movs	r0, #0
 800abf8:	f7f5 fb66 	bl	80002c8 <__aeabi_dsub>
 800abfc:	ec53 2b18 	vmov	r2, r3, d8
 800ac00:	f7f5 ff8c 	bl	8000b1c <__aeabi_dcmplt>
 800ac04:	2800      	cmp	r0, #0
 800ac06:	f040 80b9 	bne.w	800ad7c <_dtoa_r+0x6fc>
 800ac0a:	9b02      	ldr	r3, [sp, #8]
 800ac0c:	429d      	cmp	r5, r3
 800ac0e:	f43f af75 	beq.w	800aafc <_dtoa_r+0x47c>
 800ac12:	4b2f      	ldr	r3, [pc, #188]	; (800acd0 <_dtoa_r+0x650>)
 800ac14:	ec51 0b18 	vmov	r0, r1, d8
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f7f5 fd0d 	bl	8000638 <__aeabi_dmul>
 800ac1e:	4b2c      	ldr	r3, [pc, #176]	; (800acd0 <_dtoa_r+0x650>)
 800ac20:	ec41 0b18 	vmov	d8, r0, r1
 800ac24:	2200      	movs	r2, #0
 800ac26:	4630      	mov	r0, r6
 800ac28:	4639      	mov	r1, r7
 800ac2a:	f7f5 fd05 	bl	8000638 <__aeabi_dmul>
 800ac2e:	4606      	mov	r6, r0
 800ac30:	460f      	mov	r7, r1
 800ac32:	e7c4      	b.n	800abbe <_dtoa_r+0x53e>
 800ac34:	ec51 0b17 	vmov	r0, r1, d7
 800ac38:	f7f5 fcfe 	bl	8000638 <__aeabi_dmul>
 800ac3c:	9b02      	ldr	r3, [sp, #8]
 800ac3e:	9d00      	ldr	r5, [sp, #0]
 800ac40:	930c      	str	r3, [sp, #48]	; 0x30
 800ac42:	ec41 0b18 	vmov	d8, r0, r1
 800ac46:	4639      	mov	r1, r7
 800ac48:	4630      	mov	r0, r6
 800ac4a:	f7f5 ffa5 	bl	8000b98 <__aeabi_d2iz>
 800ac4e:	9011      	str	r0, [sp, #68]	; 0x44
 800ac50:	f7f5 fc88 	bl	8000564 <__aeabi_i2d>
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	4630      	mov	r0, r6
 800ac5a:	4639      	mov	r1, r7
 800ac5c:	f7f5 fb34 	bl	80002c8 <__aeabi_dsub>
 800ac60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ac62:	3330      	adds	r3, #48	; 0x30
 800ac64:	f805 3b01 	strb.w	r3, [r5], #1
 800ac68:	9b02      	ldr	r3, [sp, #8]
 800ac6a:	429d      	cmp	r5, r3
 800ac6c:	4606      	mov	r6, r0
 800ac6e:	460f      	mov	r7, r1
 800ac70:	f04f 0200 	mov.w	r2, #0
 800ac74:	d134      	bne.n	800ace0 <_dtoa_r+0x660>
 800ac76:	4b19      	ldr	r3, [pc, #100]	; (800acdc <_dtoa_r+0x65c>)
 800ac78:	ec51 0b18 	vmov	r0, r1, d8
 800ac7c:	f7f5 fb26 	bl	80002cc <__adddf3>
 800ac80:	4602      	mov	r2, r0
 800ac82:	460b      	mov	r3, r1
 800ac84:	4630      	mov	r0, r6
 800ac86:	4639      	mov	r1, r7
 800ac88:	f7f5 ff66 	bl	8000b58 <__aeabi_dcmpgt>
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	d175      	bne.n	800ad7c <_dtoa_r+0x6fc>
 800ac90:	ec53 2b18 	vmov	r2, r3, d8
 800ac94:	4911      	ldr	r1, [pc, #68]	; (800acdc <_dtoa_r+0x65c>)
 800ac96:	2000      	movs	r0, #0
 800ac98:	f7f5 fb16 	bl	80002c8 <__aeabi_dsub>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	4630      	mov	r0, r6
 800aca2:	4639      	mov	r1, r7
 800aca4:	f7f5 ff3a 	bl	8000b1c <__aeabi_dcmplt>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	f43f af27 	beq.w	800aafc <_dtoa_r+0x47c>
 800acae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800acb0:	1e6b      	subs	r3, r5, #1
 800acb2:	930c      	str	r3, [sp, #48]	; 0x30
 800acb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800acb8:	2b30      	cmp	r3, #48	; 0x30
 800acba:	d0f8      	beq.n	800acae <_dtoa_r+0x62e>
 800acbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800acc0:	e04a      	b.n	800ad58 <_dtoa_r+0x6d8>
 800acc2:	bf00      	nop
 800acc4:	0800caa0 	.word	0x0800caa0
 800acc8:	0800ca78 	.word	0x0800ca78
 800accc:	3ff00000 	.word	0x3ff00000
 800acd0:	40240000 	.word	0x40240000
 800acd4:	401c0000 	.word	0x401c0000
 800acd8:	40140000 	.word	0x40140000
 800acdc:	3fe00000 	.word	0x3fe00000
 800ace0:	4baf      	ldr	r3, [pc, #700]	; (800afa0 <_dtoa_r+0x920>)
 800ace2:	f7f5 fca9 	bl	8000638 <__aeabi_dmul>
 800ace6:	4606      	mov	r6, r0
 800ace8:	460f      	mov	r7, r1
 800acea:	e7ac      	b.n	800ac46 <_dtoa_r+0x5c6>
 800acec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800acf0:	9d00      	ldr	r5, [sp, #0]
 800acf2:	4642      	mov	r2, r8
 800acf4:	464b      	mov	r3, r9
 800acf6:	4630      	mov	r0, r6
 800acf8:	4639      	mov	r1, r7
 800acfa:	f7f5 fdc7 	bl	800088c <__aeabi_ddiv>
 800acfe:	f7f5 ff4b 	bl	8000b98 <__aeabi_d2iz>
 800ad02:	9002      	str	r0, [sp, #8]
 800ad04:	f7f5 fc2e 	bl	8000564 <__aeabi_i2d>
 800ad08:	4642      	mov	r2, r8
 800ad0a:	464b      	mov	r3, r9
 800ad0c:	f7f5 fc94 	bl	8000638 <__aeabi_dmul>
 800ad10:	4602      	mov	r2, r0
 800ad12:	460b      	mov	r3, r1
 800ad14:	4630      	mov	r0, r6
 800ad16:	4639      	mov	r1, r7
 800ad18:	f7f5 fad6 	bl	80002c8 <__aeabi_dsub>
 800ad1c:	9e02      	ldr	r6, [sp, #8]
 800ad1e:	9f01      	ldr	r7, [sp, #4]
 800ad20:	3630      	adds	r6, #48	; 0x30
 800ad22:	f805 6b01 	strb.w	r6, [r5], #1
 800ad26:	9e00      	ldr	r6, [sp, #0]
 800ad28:	1bae      	subs	r6, r5, r6
 800ad2a:	42b7      	cmp	r7, r6
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	460b      	mov	r3, r1
 800ad30:	d137      	bne.n	800ada2 <_dtoa_r+0x722>
 800ad32:	f7f5 facb 	bl	80002cc <__adddf3>
 800ad36:	4642      	mov	r2, r8
 800ad38:	464b      	mov	r3, r9
 800ad3a:	4606      	mov	r6, r0
 800ad3c:	460f      	mov	r7, r1
 800ad3e:	f7f5 ff0b 	bl	8000b58 <__aeabi_dcmpgt>
 800ad42:	b9c8      	cbnz	r0, 800ad78 <_dtoa_r+0x6f8>
 800ad44:	4642      	mov	r2, r8
 800ad46:	464b      	mov	r3, r9
 800ad48:	4630      	mov	r0, r6
 800ad4a:	4639      	mov	r1, r7
 800ad4c:	f7f5 fedc 	bl	8000b08 <__aeabi_dcmpeq>
 800ad50:	b110      	cbz	r0, 800ad58 <_dtoa_r+0x6d8>
 800ad52:	9b02      	ldr	r3, [sp, #8]
 800ad54:	07d9      	lsls	r1, r3, #31
 800ad56:	d40f      	bmi.n	800ad78 <_dtoa_r+0x6f8>
 800ad58:	4620      	mov	r0, r4
 800ad5a:	4659      	mov	r1, fp
 800ad5c:	f000 fbc4 	bl	800b4e8 <_Bfree>
 800ad60:	2300      	movs	r3, #0
 800ad62:	702b      	strb	r3, [r5, #0]
 800ad64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad66:	f10a 0001 	add.w	r0, sl, #1
 800ad6a:	6018      	str	r0, [r3, #0]
 800ad6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	f43f acd8 	beq.w	800a724 <_dtoa_r+0xa4>
 800ad74:	601d      	str	r5, [r3, #0]
 800ad76:	e4d5      	b.n	800a724 <_dtoa_r+0xa4>
 800ad78:	f8cd a01c 	str.w	sl, [sp, #28]
 800ad7c:	462b      	mov	r3, r5
 800ad7e:	461d      	mov	r5, r3
 800ad80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad84:	2a39      	cmp	r2, #57	; 0x39
 800ad86:	d108      	bne.n	800ad9a <_dtoa_r+0x71a>
 800ad88:	9a00      	ldr	r2, [sp, #0]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d1f7      	bne.n	800ad7e <_dtoa_r+0x6fe>
 800ad8e:	9a07      	ldr	r2, [sp, #28]
 800ad90:	9900      	ldr	r1, [sp, #0]
 800ad92:	3201      	adds	r2, #1
 800ad94:	9207      	str	r2, [sp, #28]
 800ad96:	2230      	movs	r2, #48	; 0x30
 800ad98:	700a      	strb	r2, [r1, #0]
 800ad9a:	781a      	ldrb	r2, [r3, #0]
 800ad9c:	3201      	adds	r2, #1
 800ad9e:	701a      	strb	r2, [r3, #0]
 800ada0:	e78c      	b.n	800acbc <_dtoa_r+0x63c>
 800ada2:	4b7f      	ldr	r3, [pc, #508]	; (800afa0 <_dtoa_r+0x920>)
 800ada4:	2200      	movs	r2, #0
 800ada6:	f7f5 fc47 	bl	8000638 <__aeabi_dmul>
 800adaa:	2200      	movs	r2, #0
 800adac:	2300      	movs	r3, #0
 800adae:	4606      	mov	r6, r0
 800adb0:	460f      	mov	r7, r1
 800adb2:	f7f5 fea9 	bl	8000b08 <__aeabi_dcmpeq>
 800adb6:	2800      	cmp	r0, #0
 800adb8:	d09b      	beq.n	800acf2 <_dtoa_r+0x672>
 800adba:	e7cd      	b.n	800ad58 <_dtoa_r+0x6d8>
 800adbc:	9a08      	ldr	r2, [sp, #32]
 800adbe:	2a00      	cmp	r2, #0
 800adc0:	f000 80c4 	beq.w	800af4c <_dtoa_r+0x8cc>
 800adc4:	9a05      	ldr	r2, [sp, #20]
 800adc6:	2a01      	cmp	r2, #1
 800adc8:	f300 80a8 	bgt.w	800af1c <_dtoa_r+0x89c>
 800adcc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800adce:	2a00      	cmp	r2, #0
 800add0:	f000 80a0 	beq.w	800af14 <_dtoa_r+0x894>
 800add4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800add8:	9e06      	ldr	r6, [sp, #24]
 800adda:	4645      	mov	r5, r8
 800addc:	9a04      	ldr	r2, [sp, #16]
 800adde:	2101      	movs	r1, #1
 800ade0:	441a      	add	r2, r3
 800ade2:	4620      	mov	r0, r4
 800ade4:	4498      	add	r8, r3
 800ade6:	9204      	str	r2, [sp, #16]
 800ade8:	f000 fc3a 	bl	800b660 <__i2b>
 800adec:	4607      	mov	r7, r0
 800adee:	2d00      	cmp	r5, #0
 800adf0:	dd0b      	ble.n	800ae0a <_dtoa_r+0x78a>
 800adf2:	9b04      	ldr	r3, [sp, #16]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	dd08      	ble.n	800ae0a <_dtoa_r+0x78a>
 800adf8:	42ab      	cmp	r3, r5
 800adfa:	9a04      	ldr	r2, [sp, #16]
 800adfc:	bfa8      	it	ge
 800adfe:	462b      	movge	r3, r5
 800ae00:	eba8 0803 	sub.w	r8, r8, r3
 800ae04:	1aed      	subs	r5, r5, r3
 800ae06:	1ad3      	subs	r3, r2, r3
 800ae08:	9304      	str	r3, [sp, #16]
 800ae0a:	9b06      	ldr	r3, [sp, #24]
 800ae0c:	b1fb      	cbz	r3, 800ae4e <_dtoa_r+0x7ce>
 800ae0e:	9b08      	ldr	r3, [sp, #32]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 809f 	beq.w	800af54 <_dtoa_r+0x8d4>
 800ae16:	2e00      	cmp	r6, #0
 800ae18:	dd11      	ble.n	800ae3e <_dtoa_r+0x7be>
 800ae1a:	4639      	mov	r1, r7
 800ae1c:	4632      	mov	r2, r6
 800ae1e:	4620      	mov	r0, r4
 800ae20:	f000 fcda 	bl	800b7d8 <__pow5mult>
 800ae24:	465a      	mov	r2, fp
 800ae26:	4601      	mov	r1, r0
 800ae28:	4607      	mov	r7, r0
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f000 fc2e 	bl	800b68c <__multiply>
 800ae30:	4659      	mov	r1, fp
 800ae32:	9007      	str	r0, [sp, #28]
 800ae34:	4620      	mov	r0, r4
 800ae36:	f000 fb57 	bl	800b4e8 <_Bfree>
 800ae3a:	9b07      	ldr	r3, [sp, #28]
 800ae3c:	469b      	mov	fp, r3
 800ae3e:	9b06      	ldr	r3, [sp, #24]
 800ae40:	1b9a      	subs	r2, r3, r6
 800ae42:	d004      	beq.n	800ae4e <_dtoa_r+0x7ce>
 800ae44:	4659      	mov	r1, fp
 800ae46:	4620      	mov	r0, r4
 800ae48:	f000 fcc6 	bl	800b7d8 <__pow5mult>
 800ae4c:	4683      	mov	fp, r0
 800ae4e:	2101      	movs	r1, #1
 800ae50:	4620      	mov	r0, r4
 800ae52:	f000 fc05 	bl	800b660 <__i2b>
 800ae56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	4606      	mov	r6, r0
 800ae5c:	dd7c      	ble.n	800af58 <_dtoa_r+0x8d8>
 800ae5e:	461a      	mov	r2, r3
 800ae60:	4601      	mov	r1, r0
 800ae62:	4620      	mov	r0, r4
 800ae64:	f000 fcb8 	bl	800b7d8 <__pow5mult>
 800ae68:	9b05      	ldr	r3, [sp, #20]
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	4606      	mov	r6, r0
 800ae6e:	dd76      	ble.n	800af5e <_dtoa_r+0x8de>
 800ae70:	2300      	movs	r3, #0
 800ae72:	9306      	str	r3, [sp, #24]
 800ae74:	6933      	ldr	r3, [r6, #16]
 800ae76:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ae7a:	6918      	ldr	r0, [r3, #16]
 800ae7c:	f000 fba0 	bl	800b5c0 <__hi0bits>
 800ae80:	f1c0 0020 	rsb	r0, r0, #32
 800ae84:	9b04      	ldr	r3, [sp, #16]
 800ae86:	4418      	add	r0, r3
 800ae88:	f010 001f 	ands.w	r0, r0, #31
 800ae8c:	f000 8086 	beq.w	800af9c <_dtoa_r+0x91c>
 800ae90:	f1c0 0320 	rsb	r3, r0, #32
 800ae94:	2b04      	cmp	r3, #4
 800ae96:	dd7f      	ble.n	800af98 <_dtoa_r+0x918>
 800ae98:	f1c0 001c 	rsb	r0, r0, #28
 800ae9c:	9b04      	ldr	r3, [sp, #16]
 800ae9e:	4403      	add	r3, r0
 800aea0:	4480      	add	r8, r0
 800aea2:	4405      	add	r5, r0
 800aea4:	9304      	str	r3, [sp, #16]
 800aea6:	f1b8 0f00 	cmp.w	r8, #0
 800aeaa:	dd05      	ble.n	800aeb8 <_dtoa_r+0x838>
 800aeac:	4659      	mov	r1, fp
 800aeae:	4642      	mov	r2, r8
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f000 fceb 	bl	800b88c <__lshift>
 800aeb6:	4683      	mov	fp, r0
 800aeb8:	9b04      	ldr	r3, [sp, #16]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	dd05      	ble.n	800aeca <_dtoa_r+0x84a>
 800aebe:	4631      	mov	r1, r6
 800aec0:	461a      	mov	r2, r3
 800aec2:	4620      	mov	r0, r4
 800aec4:	f000 fce2 	bl	800b88c <__lshift>
 800aec8:	4606      	mov	r6, r0
 800aeca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d069      	beq.n	800afa4 <_dtoa_r+0x924>
 800aed0:	4631      	mov	r1, r6
 800aed2:	4658      	mov	r0, fp
 800aed4:	f000 fd46 	bl	800b964 <__mcmp>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	da63      	bge.n	800afa4 <_dtoa_r+0x924>
 800aedc:	2300      	movs	r3, #0
 800aede:	4659      	mov	r1, fp
 800aee0:	220a      	movs	r2, #10
 800aee2:	4620      	mov	r0, r4
 800aee4:	f000 fb22 	bl	800b52c <__multadd>
 800aee8:	9b08      	ldr	r3, [sp, #32]
 800aeea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aeee:	4683      	mov	fp, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f000 818f 	beq.w	800b214 <_dtoa_r+0xb94>
 800aef6:	4639      	mov	r1, r7
 800aef8:	2300      	movs	r3, #0
 800aefa:	220a      	movs	r2, #10
 800aefc:	4620      	mov	r0, r4
 800aefe:	f000 fb15 	bl	800b52c <__multadd>
 800af02:	f1b9 0f00 	cmp.w	r9, #0
 800af06:	4607      	mov	r7, r0
 800af08:	f300 808e 	bgt.w	800b028 <_dtoa_r+0x9a8>
 800af0c:	9b05      	ldr	r3, [sp, #20]
 800af0e:	2b02      	cmp	r3, #2
 800af10:	dc50      	bgt.n	800afb4 <_dtoa_r+0x934>
 800af12:	e089      	b.n	800b028 <_dtoa_r+0x9a8>
 800af14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800af16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af1a:	e75d      	b.n	800add8 <_dtoa_r+0x758>
 800af1c:	9b01      	ldr	r3, [sp, #4]
 800af1e:	1e5e      	subs	r6, r3, #1
 800af20:	9b06      	ldr	r3, [sp, #24]
 800af22:	42b3      	cmp	r3, r6
 800af24:	bfbf      	itttt	lt
 800af26:	9b06      	ldrlt	r3, [sp, #24]
 800af28:	9606      	strlt	r6, [sp, #24]
 800af2a:	1af2      	sublt	r2, r6, r3
 800af2c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800af2e:	bfb6      	itet	lt
 800af30:	189b      	addlt	r3, r3, r2
 800af32:	1b9e      	subge	r6, r3, r6
 800af34:	930d      	strlt	r3, [sp, #52]	; 0x34
 800af36:	9b01      	ldr	r3, [sp, #4]
 800af38:	bfb8      	it	lt
 800af3a:	2600      	movlt	r6, #0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	bfb5      	itete	lt
 800af40:	eba8 0503 	sublt.w	r5, r8, r3
 800af44:	9b01      	ldrge	r3, [sp, #4]
 800af46:	2300      	movlt	r3, #0
 800af48:	4645      	movge	r5, r8
 800af4a:	e747      	b.n	800addc <_dtoa_r+0x75c>
 800af4c:	9e06      	ldr	r6, [sp, #24]
 800af4e:	9f08      	ldr	r7, [sp, #32]
 800af50:	4645      	mov	r5, r8
 800af52:	e74c      	b.n	800adee <_dtoa_r+0x76e>
 800af54:	9a06      	ldr	r2, [sp, #24]
 800af56:	e775      	b.n	800ae44 <_dtoa_r+0x7c4>
 800af58:	9b05      	ldr	r3, [sp, #20]
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	dc18      	bgt.n	800af90 <_dtoa_r+0x910>
 800af5e:	9b02      	ldr	r3, [sp, #8]
 800af60:	b9b3      	cbnz	r3, 800af90 <_dtoa_r+0x910>
 800af62:	9b03      	ldr	r3, [sp, #12]
 800af64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af68:	b9a3      	cbnz	r3, 800af94 <_dtoa_r+0x914>
 800af6a:	9b03      	ldr	r3, [sp, #12]
 800af6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af70:	0d1b      	lsrs	r3, r3, #20
 800af72:	051b      	lsls	r3, r3, #20
 800af74:	b12b      	cbz	r3, 800af82 <_dtoa_r+0x902>
 800af76:	9b04      	ldr	r3, [sp, #16]
 800af78:	3301      	adds	r3, #1
 800af7a:	9304      	str	r3, [sp, #16]
 800af7c:	f108 0801 	add.w	r8, r8, #1
 800af80:	2301      	movs	r3, #1
 800af82:	9306      	str	r3, [sp, #24]
 800af84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af86:	2b00      	cmp	r3, #0
 800af88:	f47f af74 	bne.w	800ae74 <_dtoa_r+0x7f4>
 800af8c:	2001      	movs	r0, #1
 800af8e:	e779      	b.n	800ae84 <_dtoa_r+0x804>
 800af90:	2300      	movs	r3, #0
 800af92:	e7f6      	b.n	800af82 <_dtoa_r+0x902>
 800af94:	9b02      	ldr	r3, [sp, #8]
 800af96:	e7f4      	b.n	800af82 <_dtoa_r+0x902>
 800af98:	d085      	beq.n	800aea6 <_dtoa_r+0x826>
 800af9a:	4618      	mov	r0, r3
 800af9c:	301c      	adds	r0, #28
 800af9e:	e77d      	b.n	800ae9c <_dtoa_r+0x81c>
 800afa0:	40240000 	.word	0x40240000
 800afa4:	9b01      	ldr	r3, [sp, #4]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	dc38      	bgt.n	800b01c <_dtoa_r+0x99c>
 800afaa:	9b05      	ldr	r3, [sp, #20]
 800afac:	2b02      	cmp	r3, #2
 800afae:	dd35      	ble.n	800b01c <_dtoa_r+0x99c>
 800afb0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800afb4:	f1b9 0f00 	cmp.w	r9, #0
 800afb8:	d10d      	bne.n	800afd6 <_dtoa_r+0x956>
 800afba:	4631      	mov	r1, r6
 800afbc:	464b      	mov	r3, r9
 800afbe:	2205      	movs	r2, #5
 800afc0:	4620      	mov	r0, r4
 800afc2:	f000 fab3 	bl	800b52c <__multadd>
 800afc6:	4601      	mov	r1, r0
 800afc8:	4606      	mov	r6, r0
 800afca:	4658      	mov	r0, fp
 800afcc:	f000 fcca 	bl	800b964 <__mcmp>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	f73f adbd 	bgt.w	800ab50 <_dtoa_r+0x4d0>
 800afd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afd8:	9d00      	ldr	r5, [sp, #0]
 800afda:	ea6f 0a03 	mvn.w	sl, r3
 800afde:	f04f 0800 	mov.w	r8, #0
 800afe2:	4631      	mov	r1, r6
 800afe4:	4620      	mov	r0, r4
 800afe6:	f000 fa7f 	bl	800b4e8 <_Bfree>
 800afea:	2f00      	cmp	r7, #0
 800afec:	f43f aeb4 	beq.w	800ad58 <_dtoa_r+0x6d8>
 800aff0:	f1b8 0f00 	cmp.w	r8, #0
 800aff4:	d005      	beq.n	800b002 <_dtoa_r+0x982>
 800aff6:	45b8      	cmp	r8, r7
 800aff8:	d003      	beq.n	800b002 <_dtoa_r+0x982>
 800affa:	4641      	mov	r1, r8
 800affc:	4620      	mov	r0, r4
 800affe:	f000 fa73 	bl	800b4e8 <_Bfree>
 800b002:	4639      	mov	r1, r7
 800b004:	4620      	mov	r0, r4
 800b006:	f000 fa6f 	bl	800b4e8 <_Bfree>
 800b00a:	e6a5      	b.n	800ad58 <_dtoa_r+0x6d8>
 800b00c:	2600      	movs	r6, #0
 800b00e:	4637      	mov	r7, r6
 800b010:	e7e1      	b.n	800afd6 <_dtoa_r+0x956>
 800b012:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b014:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b018:	4637      	mov	r7, r6
 800b01a:	e599      	b.n	800ab50 <_dtoa_r+0x4d0>
 800b01c:	9b08      	ldr	r3, [sp, #32]
 800b01e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	f000 80fd 	beq.w	800b222 <_dtoa_r+0xba2>
 800b028:	2d00      	cmp	r5, #0
 800b02a:	dd05      	ble.n	800b038 <_dtoa_r+0x9b8>
 800b02c:	4639      	mov	r1, r7
 800b02e:	462a      	mov	r2, r5
 800b030:	4620      	mov	r0, r4
 800b032:	f000 fc2b 	bl	800b88c <__lshift>
 800b036:	4607      	mov	r7, r0
 800b038:	9b06      	ldr	r3, [sp, #24]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d05c      	beq.n	800b0f8 <_dtoa_r+0xa78>
 800b03e:	6879      	ldr	r1, [r7, #4]
 800b040:	4620      	mov	r0, r4
 800b042:	f000 fa11 	bl	800b468 <_Balloc>
 800b046:	4605      	mov	r5, r0
 800b048:	b928      	cbnz	r0, 800b056 <_dtoa_r+0x9d6>
 800b04a:	4b80      	ldr	r3, [pc, #512]	; (800b24c <_dtoa_r+0xbcc>)
 800b04c:	4602      	mov	r2, r0
 800b04e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b052:	f7ff bb2e 	b.w	800a6b2 <_dtoa_r+0x32>
 800b056:	693a      	ldr	r2, [r7, #16]
 800b058:	3202      	adds	r2, #2
 800b05a:	0092      	lsls	r2, r2, #2
 800b05c:	f107 010c 	add.w	r1, r7, #12
 800b060:	300c      	adds	r0, #12
 800b062:	f7fe fbdb 	bl	800981c <memcpy>
 800b066:	2201      	movs	r2, #1
 800b068:	4629      	mov	r1, r5
 800b06a:	4620      	mov	r0, r4
 800b06c:	f000 fc0e 	bl	800b88c <__lshift>
 800b070:	9b00      	ldr	r3, [sp, #0]
 800b072:	3301      	adds	r3, #1
 800b074:	9301      	str	r3, [sp, #4]
 800b076:	9b00      	ldr	r3, [sp, #0]
 800b078:	444b      	add	r3, r9
 800b07a:	9307      	str	r3, [sp, #28]
 800b07c:	9b02      	ldr	r3, [sp, #8]
 800b07e:	f003 0301 	and.w	r3, r3, #1
 800b082:	46b8      	mov	r8, r7
 800b084:	9306      	str	r3, [sp, #24]
 800b086:	4607      	mov	r7, r0
 800b088:	9b01      	ldr	r3, [sp, #4]
 800b08a:	4631      	mov	r1, r6
 800b08c:	3b01      	subs	r3, #1
 800b08e:	4658      	mov	r0, fp
 800b090:	9302      	str	r3, [sp, #8]
 800b092:	f7ff fa69 	bl	800a568 <quorem>
 800b096:	4603      	mov	r3, r0
 800b098:	3330      	adds	r3, #48	; 0x30
 800b09a:	9004      	str	r0, [sp, #16]
 800b09c:	4641      	mov	r1, r8
 800b09e:	4658      	mov	r0, fp
 800b0a0:	9308      	str	r3, [sp, #32]
 800b0a2:	f000 fc5f 	bl	800b964 <__mcmp>
 800b0a6:	463a      	mov	r2, r7
 800b0a8:	4681      	mov	r9, r0
 800b0aa:	4631      	mov	r1, r6
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	f000 fc75 	bl	800b99c <__mdiff>
 800b0b2:	68c2      	ldr	r2, [r0, #12]
 800b0b4:	9b08      	ldr	r3, [sp, #32]
 800b0b6:	4605      	mov	r5, r0
 800b0b8:	bb02      	cbnz	r2, 800b0fc <_dtoa_r+0xa7c>
 800b0ba:	4601      	mov	r1, r0
 800b0bc:	4658      	mov	r0, fp
 800b0be:	f000 fc51 	bl	800b964 <__mcmp>
 800b0c2:	9b08      	ldr	r3, [sp, #32]
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	4629      	mov	r1, r5
 800b0c8:	4620      	mov	r0, r4
 800b0ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b0ce:	f000 fa0b 	bl	800b4e8 <_Bfree>
 800b0d2:	9b05      	ldr	r3, [sp, #20]
 800b0d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0d6:	9d01      	ldr	r5, [sp, #4]
 800b0d8:	ea43 0102 	orr.w	r1, r3, r2
 800b0dc:	9b06      	ldr	r3, [sp, #24]
 800b0de:	430b      	orrs	r3, r1
 800b0e0:	9b08      	ldr	r3, [sp, #32]
 800b0e2:	d10d      	bne.n	800b100 <_dtoa_r+0xa80>
 800b0e4:	2b39      	cmp	r3, #57	; 0x39
 800b0e6:	d029      	beq.n	800b13c <_dtoa_r+0xabc>
 800b0e8:	f1b9 0f00 	cmp.w	r9, #0
 800b0ec:	dd01      	ble.n	800b0f2 <_dtoa_r+0xa72>
 800b0ee:	9b04      	ldr	r3, [sp, #16]
 800b0f0:	3331      	adds	r3, #49	; 0x31
 800b0f2:	9a02      	ldr	r2, [sp, #8]
 800b0f4:	7013      	strb	r3, [r2, #0]
 800b0f6:	e774      	b.n	800afe2 <_dtoa_r+0x962>
 800b0f8:	4638      	mov	r0, r7
 800b0fa:	e7b9      	b.n	800b070 <_dtoa_r+0x9f0>
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	e7e2      	b.n	800b0c6 <_dtoa_r+0xa46>
 800b100:	f1b9 0f00 	cmp.w	r9, #0
 800b104:	db06      	blt.n	800b114 <_dtoa_r+0xa94>
 800b106:	9905      	ldr	r1, [sp, #20]
 800b108:	ea41 0909 	orr.w	r9, r1, r9
 800b10c:	9906      	ldr	r1, [sp, #24]
 800b10e:	ea59 0101 	orrs.w	r1, r9, r1
 800b112:	d120      	bne.n	800b156 <_dtoa_r+0xad6>
 800b114:	2a00      	cmp	r2, #0
 800b116:	ddec      	ble.n	800b0f2 <_dtoa_r+0xa72>
 800b118:	4659      	mov	r1, fp
 800b11a:	2201      	movs	r2, #1
 800b11c:	4620      	mov	r0, r4
 800b11e:	9301      	str	r3, [sp, #4]
 800b120:	f000 fbb4 	bl	800b88c <__lshift>
 800b124:	4631      	mov	r1, r6
 800b126:	4683      	mov	fp, r0
 800b128:	f000 fc1c 	bl	800b964 <__mcmp>
 800b12c:	2800      	cmp	r0, #0
 800b12e:	9b01      	ldr	r3, [sp, #4]
 800b130:	dc02      	bgt.n	800b138 <_dtoa_r+0xab8>
 800b132:	d1de      	bne.n	800b0f2 <_dtoa_r+0xa72>
 800b134:	07da      	lsls	r2, r3, #31
 800b136:	d5dc      	bpl.n	800b0f2 <_dtoa_r+0xa72>
 800b138:	2b39      	cmp	r3, #57	; 0x39
 800b13a:	d1d8      	bne.n	800b0ee <_dtoa_r+0xa6e>
 800b13c:	9a02      	ldr	r2, [sp, #8]
 800b13e:	2339      	movs	r3, #57	; 0x39
 800b140:	7013      	strb	r3, [r2, #0]
 800b142:	462b      	mov	r3, r5
 800b144:	461d      	mov	r5, r3
 800b146:	3b01      	subs	r3, #1
 800b148:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b14c:	2a39      	cmp	r2, #57	; 0x39
 800b14e:	d050      	beq.n	800b1f2 <_dtoa_r+0xb72>
 800b150:	3201      	adds	r2, #1
 800b152:	701a      	strb	r2, [r3, #0]
 800b154:	e745      	b.n	800afe2 <_dtoa_r+0x962>
 800b156:	2a00      	cmp	r2, #0
 800b158:	dd03      	ble.n	800b162 <_dtoa_r+0xae2>
 800b15a:	2b39      	cmp	r3, #57	; 0x39
 800b15c:	d0ee      	beq.n	800b13c <_dtoa_r+0xabc>
 800b15e:	3301      	adds	r3, #1
 800b160:	e7c7      	b.n	800b0f2 <_dtoa_r+0xa72>
 800b162:	9a01      	ldr	r2, [sp, #4]
 800b164:	9907      	ldr	r1, [sp, #28]
 800b166:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b16a:	428a      	cmp	r2, r1
 800b16c:	d02a      	beq.n	800b1c4 <_dtoa_r+0xb44>
 800b16e:	4659      	mov	r1, fp
 800b170:	2300      	movs	r3, #0
 800b172:	220a      	movs	r2, #10
 800b174:	4620      	mov	r0, r4
 800b176:	f000 f9d9 	bl	800b52c <__multadd>
 800b17a:	45b8      	cmp	r8, r7
 800b17c:	4683      	mov	fp, r0
 800b17e:	f04f 0300 	mov.w	r3, #0
 800b182:	f04f 020a 	mov.w	r2, #10
 800b186:	4641      	mov	r1, r8
 800b188:	4620      	mov	r0, r4
 800b18a:	d107      	bne.n	800b19c <_dtoa_r+0xb1c>
 800b18c:	f000 f9ce 	bl	800b52c <__multadd>
 800b190:	4680      	mov	r8, r0
 800b192:	4607      	mov	r7, r0
 800b194:	9b01      	ldr	r3, [sp, #4]
 800b196:	3301      	adds	r3, #1
 800b198:	9301      	str	r3, [sp, #4]
 800b19a:	e775      	b.n	800b088 <_dtoa_r+0xa08>
 800b19c:	f000 f9c6 	bl	800b52c <__multadd>
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	4680      	mov	r8, r0
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	220a      	movs	r2, #10
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	f000 f9bf 	bl	800b52c <__multadd>
 800b1ae:	4607      	mov	r7, r0
 800b1b0:	e7f0      	b.n	800b194 <_dtoa_r+0xb14>
 800b1b2:	f1b9 0f00 	cmp.w	r9, #0
 800b1b6:	9a00      	ldr	r2, [sp, #0]
 800b1b8:	bfcc      	ite	gt
 800b1ba:	464d      	movgt	r5, r9
 800b1bc:	2501      	movle	r5, #1
 800b1be:	4415      	add	r5, r2
 800b1c0:	f04f 0800 	mov.w	r8, #0
 800b1c4:	4659      	mov	r1, fp
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	9301      	str	r3, [sp, #4]
 800b1cc:	f000 fb5e 	bl	800b88c <__lshift>
 800b1d0:	4631      	mov	r1, r6
 800b1d2:	4683      	mov	fp, r0
 800b1d4:	f000 fbc6 	bl	800b964 <__mcmp>
 800b1d8:	2800      	cmp	r0, #0
 800b1da:	dcb2      	bgt.n	800b142 <_dtoa_r+0xac2>
 800b1dc:	d102      	bne.n	800b1e4 <_dtoa_r+0xb64>
 800b1de:	9b01      	ldr	r3, [sp, #4]
 800b1e0:	07db      	lsls	r3, r3, #31
 800b1e2:	d4ae      	bmi.n	800b142 <_dtoa_r+0xac2>
 800b1e4:	462b      	mov	r3, r5
 800b1e6:	461d      	mov	r5, r3
 800b1e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1ec:	2a30      	cmp	r2, #48	; 0x30
 800b1ee:	d0fa      	beq.n	800b1e6 <_dtoa_r+0xb66>
 800b1f0:	e6f7      	b.n	800afe2 <_dtoa_r+0x962>
 800b1f2:	9a00      	ldr	r2, [sp, #0]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d1a5      	bne.n	800b144 <_dtoa_r+0xac4>
 800b1f8:	f10a 0a01 	add.w	sl, sl, #1
 800b1fc:	2331      	movs	r3, #49	; 0x31
 800b1fe:	e779      	b.n	800b0f4 <_dtoa_r+0xa74>
 800b200:	4b13      	ldr	r3, [pc, #76]	; (800b250 <_dtoa_r+0xbd0>)
 800b202:	f7ff baaf 	b.w	800a764 <_dtoa_r+0xe4>
 800b206:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b208:	2b00      	cmp	r3, #0
 800b20a:	f47f aa86 	bne.w	800a71a <_dtoa_r+0x9a>
 800b20e:	4b11      	ldr	r3, [pc, #68]	; (800b254 <_dtoa_r+0xbd4>)
 800b210:	f7ff baa8 	b.w	800a764 <_dtoa_r+0xe4>
 800b214:	f1b9 0f00 	cmp.w	r9, #0
 800b218:	dc03      	bgt.n	800b222 <_dtoa_r+0xba2>
 800b21a:	9b05      	ldr	r3, [sp, #20]
 800b21c:	2b02      	cmp	r3, #2
 800b21e:	f73f aec9 	bgt.w	800afb4 <_dtoa_r+0x934>
 800b222:	9d00      	ldr	r5, [sp, #0]
 800b224:	4631      	mov	r1, r6
 800b226:	4658      	mov	r0, fp
 800b228:	f7ff f99e 	bl	800a568 <quorem>
 800b22c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b230:	f805 3b01 	strb.w	r3, [r5], #1
 800b234:	9a00      	ldr	r2, [sp, #0]
 800b236:	1aaa      	subs	r2, r5, r2
 800b238:	4591      	cmp	r9, r2
 800b23a:	ddba      	ble.n	800b1b2 <_dtoa_r+0xb32>
 800b23c:	4659      	mov	r1, fp
 800b23e:	2300      	movs	r3, #0
 800b240:	220a      	movs	r2, #10
 800b242:	4620      	mov	r0, r4
 800b244:	f000 f972 	bl	800b52c <__multadd>
 800b248:	4683      	mov	fp, r0
 800b24a:	e7eb      	b.n	800b224 <_dtoa_r+0xba4>
 800b24c:	0800c9fc 	.word	0x0800c9fc
 800b250:	0800c818 	.word	0x0800c818
 800b254:	0800c979 	.word	0x0800c979

0800b258 <__sflush_r>:
 800b258:	898a      	ldrh	r2, [r1, #12]
 800b25a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b25e:	4605      	mov	r5, r0
 800b260:	0710      	lsls	r0, r2, #28
 800b262:	460c      	mov	r4, r1
 800b264:	d458      	bmi.n	800b318 <__sflush_r+0xc0>
 800b266:	684b      	ldr	r3, [r1, #4]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	dc05      	bgt.n	800b278 <__sflush_r+0x20>
 800b26c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b26e:	2b00      	cmp	r3, #0
 800b270:	dc02      	bgt.n	800b278 <__sflush_r+0x20>
 800b272:	2000      	movs	r0, #0
 800b274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b278:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b27a:	2e00      	cmp	r6, #0
 800b27c:	d0f9      	beq.n	800b272 <__sflush_r+0x1a>
 800b27e:	2300      	movs	r3, #0
 800b280:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b284:	682f      	ldr	r7, [r5, #0]
 800b286:	602b      	str	r3, [r5, #0]
 800b288:	d032      	beq.n	800b2f0 <__sflush_r+0x98>
 800b28a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b28c:	89a3      	ldrh	r3, [r4, #12]
 800b28e:	075a      	lsls	r2, r3, #29
 800b290:	d505      	bpl.n	800b29e <__sflush_r+0x46>
 800b292:	6863      	ldr	r3, [r4, #4]
 800b294:	1ac0      	subs	r0, r0, r3
 800b296:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b298:	b10b      	cbz	r3, 800b29e <__sflush_r+0x46>
 800b29a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b29c:	1ac0      	subs	r0, r0, r3
 800b29e:	2300      	movs	r3, #0
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b2a4:	6a21      	ldr	r1, [r4, #32]
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	47b0      	blx	r6
 800b2aa:	1c43      	adds	r3, r0, #1
 800b2ac:	89a3      	ldrh	r3, [r4, #12]
 800b2ae:	d106      	bne.n	800b2be <__sflush_r+0x66>
 800b2b0:	6829      	ldr	r1, [r5, #0]
 800b2b2:	291d      	cmp	r1, #29
 800b2b4:	d82c      	bhi.n	800b310 <__sflush_r+0xb8>
 800b2b6:	4a2a      	ldr	r2, [pc, #168]	; (800b360 <__sflush_r+0x108>)
 800b2b8:	40ca      	lsrs	r2, r1
 800b2ba:	07d6      	lsls	r6, r2, #31
 800b2bc:	d528      	bpl.n	800b310 <__sflush_r+0xb8>
 800b2be:	2200      	movs	r2, #0
 800b2c0:	6062      	str	r2, [r4, #4]
 800b2c2:	04d9      	lsls	r1, r3, #19
 800b2c4:	6922      	ldr	r2, [r4, #16]
 800b2c6:	6022      	str	r2, [r4, #0]
 800b2c8:	d504      	bpl.n	800b2d4 <__sflush_r+0x7c>
 800b2ca:	1c42      	adds	r2, r0, #1
 800b2cc:	d101      	bne.n	800b2d2 <__sflush_r+0x7a>
 800b2ce:	682b      	ldr	r3, [r5, #0]
 800b2d0:	b903      	cbnz	r3, 800b2d4 <__sflush_r+0x7c>
 800b2d2:	6560      	str	r0, [r4, #84]	; 0x54
 800b2d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2d6:	602f      	str	r7, [r5, #0]
 800b2d8:	2900      	cmp	r1, #0
 800b2da:	d0ca      	beq.n	800b272 <__sflush_r+0x1a>
 800b2dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2e0:	4299      	cmp	r1, r3
 800b2e2:	d002      	beq.n	800b2ea <__sflush_r+0x92>
 800b2e4:	4628      	mov	r0, r5
 800b2e6:	f7fe fac9 	bl	800987c <_free_r>
 800b2ea:	2000      	movs	r0, #0
 800b2ec:	6360      	str	r0, [r4, #52]	; 0x34
 800b2ee:	e7c1      	b.n	800b274 <__sflush_r+0x1c>
 800b2f0:	6a21      	ldr	r1, [r4, #32]
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	4628      	mov	r0, r5
 800b2f6:	47b0      	blx	r6
 800b2f8:	1c41      	adds	r1, r0, #1
 800b2fa:	d1c7      	bne.n	800b28c <__sflush_r+0x34>
 800b2fc:	682b      	ldr	r3, [r5, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d0c4      	beq.n	800b28c <__sflush_r+0x34>
 800b302:	2b1d      	cmp	r3, #29
 800b304:	d001      	beq.n	800b30a <__sflush_r+0xb2>
 800b306:	2b16      	cmp	r3, #22
 800b308:	d101      	bne.n	800b30e <__sflush_r+0xb6>
 800b30a:	602f      	str	r7, [r5, #0]
 800b30c:	e7b1      	b.n	800b272 <__sflush_r+0x1a>
 800b30e:	89a3      	ldrh	r3, [r4, #12]
 800b310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b314:	81a3      	strh	r3, [r4, #12]
 800b316:	e7ad      	b.n	800b274 <__sflush_r+0x1c>
 800b318:	690f      	ldr	r7, [r1, #16]
 800b31a:	2f00      	cmp	r7, #0
 800b31c:	d0a9      	beq.n	800b272 <__sflush_r+0x1a>
 800b31e:	0793      	lsls	r3, r2, #30
 800b320:	680e      	ldr	r6, [r1, #0]
 800b322:	bf08      	it	eq
 800b324:	694b      	ldreq	r3, [r1, #20]
 800b326:	600f      	str	r7, [r1, #0]
 800b328:	bf18      	it	ne
 800b32a:	2300      	movne	r3, #0
 800b32c:	eba6 0807 	sub.w	r8, r6, r7
 800b330:	608b      	str	r3, [r1, #8]
 800b332:	f1b8 0f00 	cmp.w	r8, #0
 800b336:	dd9c      	ble.n	800b272 <__sflush_r+0x1a>
 800b338:	6a21      	ldr	r1, [r4, #32]
 800b33a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b33c:	4643      	mov	r3, r8
 800b33e:	463a      	mov	r2, r7
 800b340:	4628      	mov	r0, r5
 800b342:	47b0      	blx	r6
 800b344:	2800      	cmp	r0, #0
 800b346:	dc06      	bgt.n	800b356 <__sflush_r+0xfe>
 800b348:	89a3      	ldrh	r3, [r4, #12]
 800b34a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b34e:	81a3      	strh	r3, [r4, #12]
 800b350:	f04f 30ff 	mov.w	r0, #4294967295
 800b354:	e78e      	b.n	800b274 <__sflush_r+0x1c>
 800b356:	4407      	add	r7, r0
 800b358:	eba8 0800 	sub.w	r8, r8, r0
 800b35c:	e7e9      	b.n	800b332 <__sflush_r+0xda>
 800b35e:	bf00      	nop
 800b360:	20400001 	.word	0x20400001

0800b364 <_fflush_r>:
 800b364:	b538      	push	{r3, r4, r5, lr}
 800b366:	690b      	ldr	r3, [r1, #16]
 800b368:	4605      	mov	r5, r0
 800b36a:	460c      	mov	r4, r1
 800b36c:	b913      	cbnz	r3, 800b374 <_fflush_r+0x10>
 800b36e:	2500      	movs	r5, #0
 800b370:	4628      	mov	r0, r5
 800b372:	bd38      	pop	{r3, r4, r5, pc}
 800b374:	b118      	cbz	r0, 800b37e <_fflush_r+0x1a>
 800b376:	6983      	ldr	r3, [r0, #24]
 800b378:	b90b      	cbnz	r3, 800b37e <_fflush_r+0x1a>
 800b37a:	f7fe f981 	bl	8009680 <__sinit>
 800b37e:	4b14      	ldr	r3, [pc, #80]	; (800b3d0 <_fflush_r+0x6c>)
 800b380:	429c      	cmp	r4, r3
 800b382:	d11b      	bne.n	800b3bc <_fflush_r+0x58>
 800b384:	686c      	ldr	r4, [r5, #4]
 800b386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d0ef      	beq.n	800b36e <_fflush_r+0xa>
 800b38e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b390:	07d0      	lsls	r0, r2, #31
 800b392:	d404      	bmi.n	800b39e <_fflush_r+0x3a>
 800b394:	0599      	lsls	r1, r3, #22
 800b396:	d402      	bmi.n	800b39e <_fflush_r+0x3a>
 800b398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b39a:	f7fe fa34 	bl	8009806 <__retarget_lock_acquire_recursive>
 800b39e:	4628      	mov	r0, r5
 800b3a0:	4621      	mov	r1, r4
 800b3a2:	f7ff ff59 	bl	800b258 <__sflush_r>
 800b3a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3a8:	07da      	lsls	r2, r3, #31
 800b3aa:	4605      	mov	r5, r0
 800b3ac:	d4e0      	bmi.n	800b370 <_fflush_r+0xc>
 800b3ae:	89a3      	ldrh	r3, [r4, #12]
 800b3b0:	059b      	lsls	r3, r3, #22
 800b3b2:	d4dd      	bmi.n	800b370 <_fflush_r+0xc>
 800b3b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3b6:	f7fe fa27 	bl	8009808 <__retarget_lock_release_recursive>
 800b3ba:	e7d9      	b.n	800b370 <_fflush_r+0xc>
 800b3bc:	4b05      	ldr	r3, [pc, #20]	; (800b3d4 <_fflush_r+0x70>)
 800b3be:	429c      	cmp	r4, r3
 800b3c0:	d101      	bne.n	800b3c6 <_fflush_r+0x62>
 800b3c2:	68ac      	ldr	r4, [r5, #8]
 800b3c4:	e7df      	b.n	800b386 <_fflush_r+0x22>
 800b3c6:	4b04      	ldr	r3, [pc, #16]	; (800b3d8 <_fflush_r+0x74>)
 800b3c8:	429c      	cmp	r4, r3
 800b3ca:	bf08      	it	eq
 800b3cc:	68ec      	ldreq	r4, [r5, #12]
 800b3ce:	e7da      	b.n	800b386 <_fflush_r+0x22>
 800b3d0:	0800c7c4 	.word	0x0800c7c4
 800b3d4:	0800c7e4 	.word	0x0800c7e4
 800b3d8:	0800c7a4 	.word	0x0800c7a4

0800b3dc <fiprintf>:
 800b3dc:	b40e      	push	{r1, r2, r3}
 800b3de:	b503      	push	{r0, r1, lr}
 800b3e0:	4601      	mov	r1, r0
 800b3e2:	ab03      	add	r3, sp, #12
 800b3e4:	4805      	ldr	r0, [pc, #20]	; (800b3fc <fiprintf+0x20>)
 800b3e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3ea:	6800      	ldr	r0, [r0, #0]
 800b3ec:	9301      	str	r3, [sp, #4]
 800b3ee:	f000 fd73 	bl	800bed8 <_vfiprintf_r>
 800b3f2:	b002      	add	sp, #8
 800b3f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3f8:	b003      	add	sp, #12
 800b3fa:	4770      	bx	lr
 800b3fc:	20000014 	.word	0x20000014

0800b400 <_localeconv_r>:
 800b400:	4800      	ldr	r0, [pc, #0]	; (800b404 <_localeconv_r+0x4>)
 800b402:	4770      	bx	lr
 800b404:	20000168 	.word	0x20000168

0800b408 <_lseek_r>:
 800b408:	b538      	push	{r3, r4, r5, lr}
 800b40a:	4d07      	ldr	r5, [pc, #28]	; (800b428 <_lseek_r+0x20>)
 800b40c:	4604      	mov	r4, r0
 800b40e:	4608      	mov	r0, r1
 800b410:	4611      	mov	r1, r2
 800b412:	2200      	movs	r2, #0
 800b414:	602a      	str	r2, [r5, #0]
 800b416:	461a      	mov	r2, r3
 800b418:	f7f6 fa30 	bl	800187c <_lseek>
 800b41c:	1c43      	adds	r3, r0, #1
 800b41e:	d102      	bne.n	800b426 <_lseek_r+0x1e>
 800b420:	682b      	ldr	r3, [r5, #0]
 800b422:	b103      	cbz	r3, 800b426 <_lseek_r+0x1e>
 800b424:	6023      	str	r3, [r4, #0]
 800b426:	bd38      	pop	{r3, r4, r5, pc}
 800b428:	20005440 	.word	0x20005440

0800b42c <__ascii_mbtowc>:
 800b42c:	b082      	sub	sp, #8
 800b42e:	b901      	cbnz	r1, 800b432 <__ascii_mbtowc+0x6>
 800b430:	a901      	add	r1, sp, #4
 800b432:	b142      	cbz	r2, 800b446 <__ascii_mbtowc+0x1a>
 800b434:	b14b      	cbz	r3, 800b44a <__ascii_mbtowc+0x1e>
 800b436:	7813      	ldrb	r3, [r2, #0]
 800b438:	600b      	str	r3, [r1, #0]
 800b43a:	7812      	ldrb	r2, [r2, #0]
 800b43c:	1e10      	subs	r0, r2, #0
 800b43e:	bf18      	it	ne
 800b440:	2001      	movne	r0, #1
 800b442:	b002      	add	sp, #8
 800b444:	4770      	bx	lr
 800b446:	4610      	mov	r0, r2
 800b448:	e7fb      	b.n	800b442 <__ascii_mbtowc+0x16>
 800b44a:	f06f 0001 	mvn.w	r0, #1
 800b44e:	e7f8      	b.n	800b442 <__ascii_mbtowc+0x16>

0800b450 <__malloc_lock>:
 800b450:	4801      	ldr	r0, [pc, #4]	; (800b458 <__malloc_lock+0x8>)
 800b452:	f7fe b9d8 	b.w	8009806 <__retarget_lock_acquire_recursive>
 800b456:	bf00      	nop
 800b458:	20005438 	.word	0x20005438

0800b45c <__malloc_unlock>:
 800b45c:	4801      	ldr	r0, [pc, #4]	; (800b464 <__malloc_unlock+0x8>)
 800b45e:	f7fe b9d3 	b.w	8009808 <__retarget_lock_release_recursive>
 800b462:	bf00      	nop
 800b464:	20005438 	.word	0x20005438

0800b468 <_Balloc>:
 800b468:	b570      	push	{r4, r5, r6, lr}
 800b46a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b46c:	4604      	mov	r4, r0
 800b46e:	460d      	mov	r5, r1
 800b470:	b976      	cbnz	r6, 800b490 <_Balloc+0x28>
 800b472:	2010      	movs	r0, #16
 800b474:	f7fe f9ca 	bl	800980c <malloc>
 800b478:	4602      	mov	r2, r0
 800b47a:	6260      	str	r0, [r4, #36]	; 0x24
 800b47c:	b920      	cbnz	r0, 800b488 <_Balloc+0x20>
 800b47e:	4b18      	ldr	r3, [pc, #96]	; (800b4e0 <_Balloc+0x78>)
 800b480:	4818      	ldr	r0, [pc, #96]	; (800b4e4 <_Balloc+0x7c>)
 800b482:	2166      	movs	r1, #102	; 0x66
 800b484:	f7ff f842 	bl	800a50c <__assert_func>
 800b488:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b48c:	6006      	str	r6, [r0, #0]
 800b48e:	60c6      	str	r6, [r0, #12]
 800b490:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b492:	68f3      	ldr	r3, [r6, #12]
 800b494:	b183      	cbz	r3, 800b4b8 <_Balloc+0x50>
 800b496:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b498:	68db      	ldr	r3, [r3, #12]
 800b49a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b49e:	b9b8      	cbnz	r0, 800b4d0 <_Balloc+0x68>
 800b4a0:	2101      	movs	r1, #1
 800b4a2:	fa01 f605 	lsl.w	r6, r1, r5
 800b4a6:	1d72      	adds	r2, r6, #5
 800b4a8:	0092      	lsls	r2, r2, #2
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f000 fb5a 	bl	800bb64 <_calloc_r>
 800b4b0:	b160      	cbz	r0, 800b4cc <_Balloc+0x64>
 800b4b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b4b6:	e00e      	b.n	800b4d6 <_Balloc+0x6e>
 800b4b8:	2221      	movs	r2, #33	; 0x21
 800b4ba:	2104      	movs	r1, #4
 800b4bc:	4620      	mov	r0, r4
 800b4be:	f000 fb51 	bl	800bb64 <_calloc_r>
 800b4c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4c4:	60f0      	str	r0, [r6, #12]
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1e4      	bne.n	800b496 <_Balloc+0x2e>
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	bd70      	pop	{r4, r5, r6, pc}
 800b4d0:	6802      	ldr	r2, [r0, #0]
 800b4d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b4dc:	e7f7      	b.n	800b4ce <_Balloc+0x66>
 800b4de:	bf00      	nop
 800b4e0:	0800c986 	.word	0x0800c986
 800b4e4:	0800ca17 	.word	0x0800ca17

0800b4e8 <_Bfree>:
 800b4e8:	b570      	push	{r4, r5, r6, lr}
 800b4ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b4ec:	4605      	mov	r5, r0
 800b4ee:	460c      	mov	r4, r1
 800b4f0:	b976      	cbnz	r6, 800b510 <_Bfree+0x28>
 800b4f2:	2010      	movs	r0, #16
 800b4f4:	f7fe f98a 	bl	800980c <malloc>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	6268      	str	r0, [r5, #36]	; 0x24
 800b4fc:	b920      	cbnz	r0, 800b508 <_Bfree+0x20>
 800b4fe:	4b09      	ldr	r3, [pc, #36]	; (800b524 <_Bfree+0x3c>)
 800b500:	4809      	ldr	r0, [pc, #36]	; (800b528 <_Bfree+0x40>)
 800b502:	218a      	movs	r1, #138	; 0x8a
 800b504:	f7ff f802 	bl	800a50c <__assert_func>
 800b508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b50c:	6006      	str	r6, [r0, #0]
 800b50e:	60c6      	str	r6, [r0, #12]
 800b510:	b13c      	cbz	r4, 800b522 <_Bfree+0x3a>
 800b512:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b514:	6862      	ldr	r2, [r4, #4]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b51c:	6021      	str	r1, [r4, #0]
 800b51e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b522:	bd70      	pop	{r4, r5, r6, pc}
 800b524:	0800c986 	.word	0x0800c986
 800b528:	0800ca17 	.word	0x0800ca17

0800b52c <__multadd>:
 800b52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b530:	690e      	ldr	r6, [r1, #16]
 800b532:	4607      	mov	r7, r0
 800b534:	4698      	mov	r8, r3
 800b536:	460c      	mov	r4, r1
 800b538:	f101 0014 	add.w	r0, r1, #20
 800b53c:	2300      	movs	r3, #0
 800b53e:	6805      	ldr	r5, [r0, #0]
 800b540:	b2a9      	uxth	r1, r5
 800b542:	fb02 8101 	mla	r1, r2, r1, r8
 800b546:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b54a:	0c2d      	lsrs	r5, r5, #16
 800b54c:	fb02 c505 	mla	r5, r2, r5, ip
 800b550:	b289      	uxth	r1, r1
 800b552:	3301      	adds	r3, #1
 800b554:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b558:	429e      	cmp	r6, r3
 800b55a:	f840 1b04 	str.w	r1, [r0], #4
 800b55e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b562:	dcec      	bgt.n	800b53e <__multadd+0x12>
 800b564:	f1b8 0f00 	cmp.w	r8, #0
 800b568:	d022      	beq.n	800b5b0 <__multadd+0x84>
 800b56a:	68a3      	ldr	r3, [r4, #8]
 800b56c:	42b3      	cmp	r3, r6
 800b56e:	dc19      	bgt.n	800b5a4 <__multadd+0x78>
 800b570:	6861      	ldr	r1, [r4, #4]
 800b572:	4638      	mov	r0, r7
 800b574:	3101      	adds	r1, #1
 800b576:	f7ff ff77 	bl	800b468 <_Balloc>
 800b57a:	4605      	mov	r5, r0
 800b57c:	b928      	cbnz	r0, 800b58a <__multadd+0x5e>
 800b57e:	4602      	mov	r2, r0
 800b580:	4b0d      	ldr	r3, [pc, #52]	; (800b5b8 <__multadd+0x8c>)
 800b582:	480e      	ldr	r0, [pc, #56]	; (800b5bc <__multadd+0x90>)
 800b584:	21b5      	movs	r1, #181	; 0xb5
 800b586:	f7fe ffc1 	bl	800a50c <__assert_func>
 800b58a:	6922      	ldr	r2, [r4, #16]
 800b58c:	3202      	adds	r2, #2
 800b58e:	f104 010c 	add.w	r1, r4, #12
 800b592:	0092      	lsls	r2, r2, #2
 800b594:	300c      	adds	r0, #12
 800b596:	f7fe f941 	bl	800981c <memcpy>
 800b59a:	4621      	mov	r1, r4
 800b59c:	4638      	mov	r0, r7
 800b59e:	f7ff ffa3 	bl	800b4e8 <_Bfree>
 800b5a2:	462c      	mov	r4, r5
 800b5a4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b5a8:	3601      	adds	r6, #1
 800b5aa:	f8c3 8014 	str.w	r8, [r3, #20]
 800b5ae:	6126      	str	r6, [r4, #16]
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b6:	bf00      	nop
 800b5b8:	0800c9fc 	.word	0x0800c9fc
 800b5bc:	0800ca17 	.word	0x0800ca17

0800b5c0 <__hi0bits>:
 800b5c0:	0c03      	lsrs	r3, r0, #16
 800b5c2:	041b      	lsls	r3, r3, #16
 800b5c4:	b9d3      	cbnz	r3, 800b5fc <__hi0bits+0x3c>
 800b5c6:	0400      	lsls	r0, r0, #16
 800b5c8:	2310      	movs	r3, #16
 800b5ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b5ce:	bf04      	itt	eq
 800b5d0:	0200      	lsleq	r0, r0, #8
 800b5d2:	3308      	addeq	r3, #8
 800b5d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b5d8:	bf04      	itt	eq
 800b5da:	0100      	lsleq	r0, r0, #4
 800b5dc:	3304      	addeq	r3, #4
 800b5de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b5e2:	bf04      	itt	eq
 800b5e4:	0080      	lsleq	r0, r0, #2
 800b5e6:	3302      	addeq	r3, #2
 800b5e8:	2800      	cmp	r0, #0
 800b5ea:	db05      	blt.n	800b5f8 <__hi0bits+0x38>
 800b5ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b5f0:	f103 0301 	add.w	r3, r3, #1
 800b5f4:	bf08      	it	eq
 800b5f6:	2320      	moveq	r3, #32
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	4770      	bx	lr
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	e7e4      	b.n	800b5ca <__hi0bits+0xa>

0800b600 <__lo0bits>:
 800b600:	6803      	ldr	r3, [r0, #0]
 800b602:	f013 0207 	ands.w	r2, r3, #7
 800b606:	4601      	mov	r1, r0
 800b608:	d00b      	beq.n	800b622 <__lo0bits+0x22>
 800b60a:	07da      	lsls	r2, r3, #31
 800b60c:	d424      	bmi.n	800b658 <__lo0bits+0x58>
 800b60e:	0798      	lsls	r0, r3, #30
 800b610:	bf49      	itett	mi
 800b612:	085b      	lsrmi	r3, r3, #1
 800b614:	089b      	lsrpl	r3, r3, #2
 800b616:	2001      	movmi	r0, #1
 800b618:	600b      	strmi	r3, [r1, #0]
 800b61a:	bf5c      	itt	pl
 800b61c:	600b      	strpl	r3, [r1, #0]
 800b61e:	2002      	movpl	r0, #2
 800b620:	4770      	bx	lr
 800b622:	b298      	uxth	r0, r3
 800b624:	b9b0      	cbnz	r0, 800b654 <__lo0bits+0x54>
 800b626:	0c1b      	lsrs	r3, r3, #16
 800b628:	2010      	movs	r0, #16
 800b62a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b62e:	bf04      	itt	eq
 800b630:	0a1b      	lsreq	r3, r3, #8
 800b632:	3008      	addeq	r0, #8
 800b634:	071a      	lsls	r2, r3, #28
 800b636:	bf04      	itt	eq
 800b638:	091b      	lsreq	r3, r3, #4
 800b63a:	3004      	addeq	r0, #4
 800b63c:	079a      	lsls	r2, r3, #30
 800b63e:	bf04      	itt	eq
 800b640:	089b      	lsreq	r3, r3, #2
 800b642:	3002      	addeq	r0, #2
 800b644:	07da      	lsls	r2, r3, #31
 800b646:	d403      	bmi.n	800b650 <__lo0bits+0x50>
 800b648:	085b      	lsrs	r3, r3, #1
 800b64a:	f100 0001 	add.w	r0, r0, #1
 800b64e:	d005      	beq.n	800b65c <__lo0bits+0x5c>
 800b650:	600b      	str	r3, [r1, #0]
 800b652:	4770      	bx	lr
 800b654:	4610      	mov	r0, r2
 800b656:	e7e8      	b.n	800b62a <__lo0bits+0x2a>
 800b658:	2000      	movs	r0, #0
 800b65a:	4770      	bx	lr
 800b65c:	2020      	movs	r0, #32
 800b65e:	4770      	bx	lr

0800b660 <__i2b>:
 800b660:	b510      	push	{r4, lr}
 800b662:	460c      	mov	r4, r1
 800b664:	2101      	movs	r1, #1
 800b666:	f7ff feff 	bl	800b468 <_Balloc>
 800b66a:	4602      	mov	r2, r0
 800b66c:	b928      	cbnz	r0, 800b67a <__i2b+0x1a>
 800b66e:	4b05      	ldr	r3, [pc, #20]	; (800b684 <__i2b+0x24>)
 800b670:	4805      	ldr	r0, [pc, #20]	; (800b688 <__i2b+0x28>)
 800b672:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b676:	f7fe ff49 	bl	800a50c <__assert_func>
 800b67a:	2301      	movs	r3, #1
 800b67c:	6144      	str	r4, [r0, #20]
 800b67e:	6103      	str	r3, [r0, #16]
 800b680:	bd10      	pop	{r4, pc}
 800b682:	bf00      	nop
 800b684:	0800c9fc 	.word	0x0800c9fc
 800b688:	0800ca17 	.word	0x0800ca17

0800b68c <__multiply>:
 800b68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b690:	4614      	mov	r4, r2
 800b692:	690a      	ldr	r2, [r1, #16]
 800b694:	6923      	ldr	r3, [r4, #16]
 800b696:	429a      	cmp	r2, r3
 800b698:	bfb8      	it	lt
 800b69a:	460b      	movlt	r3, r1
 800b69c:	460d      	mov	r5, r1
 800b69e:	bfbc      	itt	lt
 800b6a0:	4625      	movlt	r5, r4
 800b6a2:	461c      	movlt	r4, r3
 800b6a4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b6a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b6ac:	68ab      	ldr	r3, [r5, #8]
 800b6ae:	6869      	ldr	r1, [r5, #4]
 800b6b0:	eb0a 0709 	add.w	r7, sl, r9
 800b6b4:	42bb      	cmp	r3, r7
 800b6b6:	b085      	sub	sp, #20
 800b6b8:	bfb8      	it	lt
 800b6ba:	3101      	addlt	r1, #1
 800b6bc:	f7ff fed4 	bl	800b468 <_Balloc>
 800b6c0:	b930      	cbnz	r0, 800b6d0 <__multiply+0x44>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	4b42      	ldr	r3, [pc, #264]	; (800b7d0 <__multiply+0x144>)
 800b6c6:	4843      	ldr	r0, [pc, #268]	; (800b7d4 <__multiply+0x148>)
 800b6c8:	f240 115d 	movw	r1, #349	; 0x15d
 800b6cc:	f7fe ff1e 	bl	800a50c <__assert_func>
 800b6d0:	f100 0614 	add.w	r6, r0, #20
 800b6d4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b6d8:	4633      	mov	r3, r6
 800b6da:	2200      	movs	r2, #0
 800b6dc:	4543      	cmp	r3, r8
 800b6de:	d31e      	bcc.n	800b71e <__multiply+0x92>
 800b6e0:	f105 0c14 	add.w	ip, r5, #20
 800b6e4:	f104 0314 	add.w	r3, r4, #20
 800b6e8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b6ec:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b6f0:	9202      	str	r2, [sp, #8]
 800b6f2:	ebac 0205 	sub.w	r2, ip, r5
 800b6f6:	3a15      	subs	r2, #21
 800b6f8:	f022 0203 	bic.w	r2, r2, #3
 800b6fc:	3204      	adds	r2, #4
 800b6fe:	f105 0115 	add.w	r1, r5, #21
 800b702:	458c      	cmp	ip, r1
 800b704:	bf38      	it	cc
 800b706:	2204      	movcc	r2, #4
 800b708:	9201      	str	r2, [sp, #4]
 800b70a:	9a02      	ldr	r2, [sp, #8]
 800b70c:	9303      	str	r3, [sp, #12]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d808      	bhi.n	800b724 <__multiply+0x98>
 800b712:	2f00      	cmp	r7, #0
 800b714:	dc55      	bgt.n	800b7c2 <__multiply+0x136>
 800b716:	6107      	str	r7, [r0, #16]
 800b718:	b005      	add	sp, #20
 800b71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b71e:	f843 2b04 	str.w	r2, [r3], #4
 800b722:	e7db      	b.n	800b6dc <__multiply+0x50>
 800b724:	f8b3 a000 	ldrh.w	sl, [r3]
 800b728:	f1ba 0f00 	cmp.w	sl, #0
 800b72c:	d020      	beq.n	800b770 <__multiply+0xe4>
 800b72e:	f105 0e14 	add.w	lr, r5, #20
 800b732:	46b1      	mov	r9, r6
 800b734:	2200      	movs	r2, #0
 800b736:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b73a:	f8d9 b000 	ldr.w	fp, [r9]
 800b73e:	b2a1      	uxth	r1, r4
 800b740:	fa1f fb8b 	uxth.w	fp, fp
 800b744:	fb0a b101 	mla	r1, sl, r1, fp
 800b748:	4411      	add	r1, r2
 800b74a:	f8d9 2000 	ldr.w	r2, [r9]
 800b74e:	0c24      	lsrs	r4, r4, #16
 800b750:	0c12      	lsrs	r2, r2, #16
 800b752:	fb0a 2404 	mla	r4, sl, r4, r2
 800b756:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b75a:	b289      	uxth	r1, r1
 800b75c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b760:	45f4      	cmp	ip, lr
 800b762:	f849 1b04 	str.w	r1, [r9], #4
 800b766:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b76a:	d8e4      	bhi.n	800b736 <__multiply+0xaa>
 800b76c:	9901      	ldr	r1, [sp, #4]
 800b76e:	5072      	str	r2, [r6, r1]
 800b770:	9a03      	ldr	r2, [sp, #12]
 800b772:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b776:	3304      	adds	r3, #4
 800b778:	f1b9 0f00 	cmp.w	r9, #0
 800b77c:	d01f      	beq.n	800b7be <__multiply+0x132>
 800b77e:	6834      	ldr	r4, [r6, #0]
 800b780:	f105 0114 	add.w	r1, r5, #20
 800b784:	46b6      	mov	lr, r6
 800b786:	f04f 0a00 	mov.w	sl, #0
 800b78a:	880a      	ldrh	r2, [r1, #0]
 800b78c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b790:	fb09 b202 	mla	r2, r9, r2, fp
 800b794:	4492      	add	sl, r2
 800b796:	b2a4      	uxth	r4, r4
 800b798:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b79c:	f84e 4b04 	str.w	r4, [lr], #4
 800b7a0:	f851 4b04 	ldr.w	r4, [r1], #4
 800b7a4:	f8be 2000 	ldrh.w	r2, [lr]
 800b7a8:	0c24      	lsrs	r4, r4, #16
 800b7aa:	fb09 2404 	mla	r4, r9, r4, r2
 800b7ae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b7b2:	458c      	cmp	ip, r1
 800b7b4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b7b8:	d8e7      	bhi.n	800b78a <__multiply+0xfe>
 800b7ba:	9a01      	ldr	r2, [sp, #4]
 800b7bc:	50b4      	str	r4, [r6, r2]
 800b7be:	3604      	adds	r6, #4
 800b7c0:	e7a3      	b.n	800b70a <__multiply+0x7e>
 800b7c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1a5      	bne.n	800b716 <__multiply+0x8a>
 800b7ca:	3f01      	subs	r7, #1
 800b7cc:	e7a1      	b.n	800b712 <__multiply+0x86>
 800b7ce:	bf00      	nop
 800b7d0:	0800c9fc 	.word	0x0800c9fc
 800b7d4:	0800ca17 	.word	0x0800ca17

0800b7d8 <__pow5mult>:
 800b7d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7dc:	4615      	mov	r5, r2
 800b7de:	f012 0203 	ands.w	r2, r2, #3
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	460f      	mov	r7, r1
 800b7e6:	d007      	beq.n	800b7f8 <__pow5mult+0x20>
 800b7e8:	4c25      	ldr	r4, [pc, #148]	; (800b880 <__pow5mult+0xa8>)
 800b7ea:	3a01      	subs	r2, #1
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7f2:	f7ff fe9b 	bl	800b52c <__multadd>
 800b7f6:	4607      	mov	r7, r0
 800b7f8:	10ad      	asrs	r5, r5, #2
 800b7fa:	d03d      	beq.n	800b878 <__pow5mult+0xa0>
 800b7fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b7fe:	b97c      	cbnz	r4, 800b820 <__pow5mult+0x48>
 800b800:	2010      	movs	r0, #16
 800b802:	f7fe f803 	bl	800980c <malloc>
 800b806:	4602      	mov	r2, r0
 800b808:	6270      	str	r0, [r6, #36]	; 0x24
 800b80a:	b928      	cbnz	r0, 800b818 <__pow5mult+0x40>
 800b80c:	4b1d      	ldr	r3, [pc, #116]	; (800b884 <__pow5mult+0xac>)
 800b80e:	481e      	ldr	r0, [pc, #120]	; (800b888 <__pow5mult+0xb0>)
 800b810:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b814:	f7fe fe7a 	bl	800a50c <__assert_func>
 800b818:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b81c:	6004      	str	r4, [r0, #0]
 800b81e:	60c4      	str	r4, [r0, #12]
 800b820:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b824:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b828:	b94c      	cbnz	r4, 800b83e <__pow5mult+0x66>
 800b82a:	f240 2171 	movw	r1, #625	; 0x271
 800b82e:	4630      	mov	r0, r6
 800b830:	f7ff ff16 	bl	800b660 <__i2b>
 800b834:	2300      	movs	r3, #0
 800b836:	f8c8 0008 	str.w	r0, [r8, #8]
 800b83a:	4604      	mov	r4, r0
 800b83c:	6003      	str	r3, [r0, #0]
 800b83e:	f04f 0900 	mov.w	r9, #0
 800b842:	07eb      	lsls	r3, r5, #31
 800b844:	d50a      	bpl.n	800b85c <__pow5mult+0x84>
 800b846:	4639      	mov	r1, r7
 800b848:	4622      	mov	r2, r4
 800b84a:	4630      	mov	r0, r6
 800b84c:	f7ff ff1e 	bl	800b68c <__multiply>
 800b850:	4639      	mov	r1, r7
 800b852:	4680      	mov	r8, r0
 800b854:	4630      	mov	r0, r6
 800b856:	f7ff fe47 	bl	800b4e8 <_Bfree>
 800b85a:	4647      	mov	r7, r8
 800b85c:	106d      	asrs	r5, r5, #1
 800b85e:	d00b      	beq.n	800b878 <__pow5mult+0xa0>
 800b860:	6820      	ldr	r0, [r4, #0]
 800b862:	b938      	cbnz	r0, 800b874 <__pow5mult+0x9c>
 800b864:	4622      	mov	r2, r4
 800b866:	4621      	mov	r1, r4
 800b868:	4630      	mov	r0, r6
 800b86a:	f7ff ff0f 	bl	800b68c <__multiply>
 800b86e:	6020      	str	r0, [r4, #0]
 800b870:	f8c0 9000 	str.w	r9, [r0]
 800b874:	4604      	mov	r4, r0
 800b876:	e7e4      	b.n	800b842 <__pow5mult+0x6a>
 800b878:	4638      	mov	r0, r7
 800b87a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b87e:	bf00      	nop
 800b880:	0800cb68 	.word	0x0800cb68
 800b884:	0800c986 	.word	0x0800c986
 800b888:	0800ca17 	.word	0x0800ca17

0800b88c <__lshift>:
 800b88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b890:	460c      	mov	r4, r1
 800b892:	6849      	ldr	r1, [r1, #4]
 800b894:	6923      	ldr	r3, [r4, #16]
 800b896:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b89a:	68a3      	ldr	r3, [r4, #8]
 800b89c:	4607      	mov	r7, r0
 800b89e:	4691      	mov	r9, r2
 800b8a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b8a4:	f108 0601 	add.w	r6, r8, #1
 800b8a8:	42b3      	cmp	r3, r6
 800b8aa:	db0b      	blt.n	800b8c4 <__lshift+0x38>
 800b8ac:	4638      	mov	r0, r7
 800b8ae:	f7ff fddb 	bl	800b468 <_Balloc>
 800b8b2:	4605      	mov	r5, r0
 800b8b4:	b948      	cbnz	r0, 800b8ca <__lshift+0x3e>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	4b28      	ldr	r3, [pc, #160]	; (800b95c <__lshift+0xd0>)
 800b8ba:	4829      	ldr	r0, [pc, #164]	; (800b960 <__lshift+0xd4>)
 800b8bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b8c0:	f7fe fe24 	bl	800a50c <__assert_func>
 800b8c4:	3101      	adds	r1, #1
 800b8c6:	005b      	lsls	r3, r3, #1
 800b8c8:	e7ee      	b.n	800b8a8 <__lshift+0x1c>
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	f100 0114 	add.w	r1, r0, #20
 800b8d0:	f100 0210 	add.w	r2, r0, #16
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	4553      	cmp	r3, sl
 800b8d8:	db33      	blt.n	800b942 <__lshift+0xb6>
 800b8da:	6920      	ldr	r0, [r4, #16]
 800b8dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8e0:	f104 0314 	add.w	r3, r4, #20
 800b8e4:	f019 091f 	ands.w	r9, r9, #31
 800b8e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8f0:	d02b      	beq.n	800b94a <__lshift+0xbe>
 800b8f2:	f1c9 0e20 	rsb	lr, r9, #32
 800b8f6:	468a      	mov	sl, r1
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	6818      	ldr	r0, [r3, #0]
 800b8fc:	fa00 f009 	lsl.w	r0, r0, r9
 800b900:	4302      	orrs	r2, r0
 800b902:	f84a 2b04 	str.w	r2, [sl], #4
 800b906:	f853 2b04 	ldr.w	r2, [r3], #4
 800b90a:	459c      	cmp	ip, r3
 800b90c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b910:	d8f3      	bhi.n	800b8fa <__lshift+0x6e>
 800b912:	ebac 0304 	sub.w	r3, ip, r4
 800b916:	3b15      	subs	r3, #21
 800b918:	f023 0303 	bic.w	r3, r3, #3
 800b91c:	3304      	adds	r3, #4
 800b91e:	f104 0015 	add.w	r0, r4, #21
 800b922:	4584      	cmp	ip, r0
 800b924:	bf38      	it	cc
 800b926:	2304      	movcc	r3, #4
 800b928:	50ca      	str	r2, [r1, r3]
 800b92a:	b10a      	cbz	r2, 800b930 <__lshift+0xa4>
 800b92c:	f108 0602 	add.w	r6, r8, #2
 800b930:	3e01      	subs	r6, #1
 800b932:	4638      	mov	r0, r7
 800b934:	612e      	str	r6, [r5, #16]
 800b936:	4621      	mov	r1, r4
 800b938:	f7ff fdd6 	bl	800b4e8 <_Bfree>
 800b93c:	4628      	mov	r0, r5
 800b93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b942:	f842 0f04 	str.w	r0, [r2, #4]!
 800b946:	3301      	adds	r3, #1
 800b948:	e7c5      	b.n	800b8d6 <__lshift+0x4a>
 800b94a:	3904      	subs	r1, #4
 800b94c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b950:	f841 2f04 	str.w	r2, [r1, #4]!
 800b954:	459c      	cmp	ip, r3
 800b956:	d8f9      	bhi.n	800b94c <__lshift+0xc0>
 800b958:	e7ea      	b.n	800b930 <__lshift+0xa4>
 800b95a:	bf00      	nop
 800b95c:	0800c9fc 	.word	0x0800c9fc
 800b960:	0800ca17 	.word	0x0800ca17

0800b964 <__mcmp>:
 800b964:	b530      	push	{r4, r5, lr}
 800b966:	6902      	ldr	r2, [r0, #16]
 800b968:	690c      	ldr	r4, [r1, #16]
 800b96a:	1b12      	subs	r2, r2, r4
 800b96c:	d10e      	bne.n	800b98c <__mcmp+0x28>
 800b96e:	f100 0314 	add.w	r3, r0, #20
 800b972:	3114      	adds	r1, #20
 800b974:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b978:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b97c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b980:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b984:	42a5      	cmp	r5, r4
 800b986:	d003      	beq.n	800b990 <__mcmp+0x2c>
 800b988:	d305      	bcc.n	800b996 <__mcmp+0x32>
 800b98a:	2201      	movs	r2, #1
 800b98c:	4610      	mov	r0, r2
 800b98e:	bd30      	pop	{r4, r5, pc}
 800b990:	4283      	cmp	r3, r0
 800b992:	d3f3      	bcc.n	800b97c <__mcmp+0x18>
 800b994:	e7fa      	b.n	800b98c <__mcmp+0x28>
 800b996:	f04f 32ff 	mov.w	r2, #4294967295
 800b99a:	e7f7      	b.n	800b98c <__mcmp+0x28>

0800b99c <__mdiff>:
 800b99c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a0:	460c      	mov	r4, r1
 800b9a2:	4606      	mov	r6, r0
 800b9a4:	4611      	mov	r1, r2
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	4617      	mov	r7, r2
 800b9aa:	f7ff ffdb 	bl	800b964 <__mcmp>
 800b9ae:	1e05      	subs	r5, r0, #0
 800b9b0:	d110      	bne.n	800b9d4 <__mdiff+0x38>
 800b9b2:	4629      	mov	r1, r5
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	f7ff fd57 	bl	800b468 <_Balloc>
 800b9ba:	b930      	cbnz	r0, 800b9ca <__mdiff+0x2e>
 800b9bc:	4b39      	ldr	r3, [pc, #228]	; (800baa4 <__mdiff+0x108>)
 800b9be:	4602      	mov	r2, r0
 800b9c0:	f240 2132 	movw	r1, #562	; 0x232
 800b9c4:	4838      	ldr	r0, [pc, #224]	; (800baa8 <__mdiff+0x10c>)
 800b9c6:	f7fe fda1 	bl	800a50c <__assert_func>
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d4:	bfa4      	itt	ge
 800b9d6:	463b      	movge	r3, r7
 800b9d8:	4627      	movge	r7, r4
 800b9da:	4630      	mov	r0, r6
 800b9dc:	6879      	ldr	r1, [r7, #4]
 800b9de:	bfa6      	itte	ge
 800b9e0:	461c      	movge	r4, r3
 800b9e2:	2500      	movge	r5, #0
 800b9e4:	2501      	movlt	r5, #1
 800b9e6:	f7ff fd3f 	bl	800b468 <_Balloc>
 800b9ea:	b920      	cbnz	r0, 800b9f6 <__mdiff+0x5a>
 800b9ec:	4b2d      	ldr	r3, [pc, #180]	; (800baa4 <__mdiff+0x108>)
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b9f4:	e7e6      	b.n	800b9c4 <__mdiff+0x28>
 800b9f6:	693e      	ldr	r6, [r7, #16]
 800b9f8:	60c5      	str	r5, [r0, #12]
 800b9fa:	6925      	ldr	r5, [r4, #16]
 800b9fc:	f107 0114 	add.w	r1, r7, #20
 800ba00:	f104 0914 	add.w	r9, r4, #20
 800ba04:	f100 0e14 	add.w	lr, r0, #20
 800ba08:	f107 0210 	add.w	r2, r7, #16
 800ba0c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ba10:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ba14:	46f2      	mov	sl, lr
 800ba16:	2700      	movs	r7, #0
 800ba18:	f859 3b04 	ldr.w	r3, [r9], #4
 800ba1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ba20:	fa1f f883 	uxth.w	r8, r3
 800ba24:	fa17 f78b 	uxtah	r7, r7, fp
 800ba28:	0c1b      	lsrs	r3, r3, #16
 800ba2a:	eba7 0808 	sub.w	r8, r7, r8
 800ba2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ba32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ba36:	fa1f f888 	uxth.w	r8, r8
 800ba3a:	141f      	asrs	r7, r3, #16
 800ba3c:	454d      	cmp	r5, r9
 800ba3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ba42:	f84a 3b04 	str.w	r3, [sl], #4
 800ba46:	d8e7      	bhi.n	800ba18 <__mdiff+0x7c>
 800ba48:	1b2b      	subs	r3, r5, r4
 800ba4a:	3b15      	subs	r3, #21
 800ba4c:	f023 0303 	bic.w	r3, r3, #3
 800ba50:	3304      	adds	r3, #4
 800ba52:	3415      	adds	r4, #21
 800ba54:	42a5      	cmp	r5, r4
 800ba56:	bf38      	it	cc
 800ba58:	2304      	movcc	r3, #4
 800ba5a:	4419      	add	r1, r3
 800ba5c:	4473      	add	r3, lr
 800ba5e:	469e      	mov	lr, r3
 800ba60:	460d      	mov	r5, r1
 800ba62:	4565      	cmp	r5, ip
 800ba64:	d30e      	bcc.n	800ba84 <__mdiff+0xe8>
 800ba66:	f10c 0203 	add.w	r2, ip, #3
 800ba6a:	1a52      	subs	r2, r2, r1
 800ba6c:	f022 0203 	bic.w	r2, r2, #3
 800ba70:	3903      	subs	r1, #3
 800ba72:	458c      	cmp	ip, r1
 800ba74:	bf38      	it	cc
 800ba76:	2200      	movcc	r2, #0
 800ba78:	441a      	add	r2, r3
 800ba7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ba7e:	b17b      	cbz	r3, 800baa0 <__mdiff+0x104>
 800ba80:	6106      	str	r6, [r0, #16]
 800ba82:	e7a5      	b.n	800b9d0 <__mdiff+0x34>
 800ba84:	f855 8b04 	ldr.w	r8, [r5], #4
 800ba88:	fa17 f488 	uxtah	r4, r7, r8
 800ba8c:	1422      	asrs	r2, r4, #16
 800ba8e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ba92:	b2a4      	uxth	r4, r4
 800ba94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ba98:	f84e 4b04 	str.w	r4, [lr], #4
 800ba9c:	1417      	asrs	r7, r2, #16
 800ba9e:	e7e0      	b.n	800ba62 <__mdiff+0xc6>
 800baa0:	3e01      	subs	r6, #1
 800baa2:	e7ea      	b.n	800ba7a <__mdiff+0xde>
 800baa4:	0800c9fc 	.word	0x0800c9fc
 800baa8:	0800ca17 	.word	0x0800ca17

0800baac <__d2b>:
 800baac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bab0:	4689      	mov	r9, r1
 800bab2:	2101      	movs	r1, #1
 800bab4:	ec57 6b10 	vmov	r6, r7, d0
 800bab8:	4690      	mov	r8, r2
 800baba:	f7ff fcd5 	bl	800b468 <_Balloc>
 800babe:	4604      	mov	r4, r0
 800bac0:	b930      	cbnz	r0, 800bad0 <__d2b+0x24>
 800bac2:	4602      	mov	r2, r0
 800bac4:	4b25      	ldr	r3, [pc, #148]	; (800bb5c <__d2b+0xb0>)
 800bac6:	4826      	ldr	r0, [pc, #152]	; (800bb60 <__d2b+0xb4>)
 800bac8:	f240 310a 	movw	r1, #778	; 0x30a
 800bacc:	f7fe fd1e 	bl	800a50c <__assert_func>
 800bad0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bad4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bad8:	bb35      	cbnz	r5, 800bb28 <__d2b+0x7c>
 800bada:	2e00      	cmp	r6, #0
 800badc:	9301      	str	r3, [sp, #4]
 800bade:	d028      	beq.n	800bb32 <__d2b+0x86>
 800bae0:	4668      	mov	r0, sp
 800bae2:	9600      	str	r6, [sp, #0]
 800bae4:	f7ff fd8c 	bl	800b600 <__lo0bits>
 800bae8:	9900      	ldr	r1, [sp, #0]
 800baea:	b300      	cbz	r0, 800bb2e <__d2b+0x82>
 800baec:	9a01      	ldr	r2, [sp, #4]
 800baee:	f1c0 0320 	rsb	r3, r0, #32
 800baf2:	fa02 f303 	lsl.w	r3, r2, r3
 800baf6:	430b      	orrs	r3, r1
 800baf8:	40c2      	lsrs	r2, r0
 800bafa:	6163      	str	r3, [r4, #20]
 800bafc:	9201      	str	r2, [sp, #4]
 800bafe:	9b01      	ldr	r3, [sp, #4]
 800bb00:	61a3      	str	r3, [r4, #24]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	bf14      	ite	ne
 800bb06:	2202      	movne	r2, #2
 800bb08:	2201      	moveq	r2, #1
 800bb0a:	6122      	str	r2, [r4, #16]
 800bb0c:	b1d5      	cbz	r5, 800bb44 <__d2b+0x98>
 800bb0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bb12:	4405      	add	r5, r0
 800bb14:	f8c9 5000 	str.w	r5, [r9]
 800bb18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bb1c:	f8c8 0000 	str.w	r0, [r8]
 800bb20:	4620      	mov	r0, r4
 800bb22:	b003      	add	sp, #12
 800bb24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb2c:	e7d5      	b.n	800bada <__d2b+0x2e>
 800bb2e:	6161      	str	r1, [r4, #20]
 800bb30:	e7e5      	b.n	800bafe <__d2b+0x52>
 800bb32:	a801      	add	r0, sp, #4
 800bb34:	f7ff fd64 	bl	800b600 <__lo0bits>
 800bb38:	9b01      	ldr	r3, [sp, #4]
 800bb3a:	6163      	str	r3, [r4, #20]
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	6122      	str	r2, [r4, #16]
 800bb40:	3020      	adds	r0, #32
 800bb42:	e7e3      	b.n	800bb0c <__d2b+0x60>
 800bb44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb4c:	f8c9 0000 	str.w	r0, [r9]
 800bb50:	6918      	ldr	r0, [r3, #16]
 800bb52:	f7ff fd35 	bl	800b5c0 <__hi0bits>
 800bb56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb5a:	e7df      	b.n	800bb1c <__d2b+0x70>
 800bb5c:	0800c9fc 	.word	0x0800c9fc
 800bb60:	0800ca17 	.word	0x0800ca17

0800bb64 <_calloc_r>:
 800bb64:	b513      	push	{r0, r1, r4, lr}
 800bb66:	434a      	muls	r2, r1
 800bb68:	4611      	mov	r1, r2
 800bb6a:	9201      	str	r2, [sp, #4]
 800bb6c:	f7fd fed6 	bl	800991c <_malloc_r>
 800bb70:	4604      	mov	r4, r0
 800bb72:	b118      	cbz	r0, 800bb7c <_calloc_r+0x18>
 800bb74:	9a01      	ldr	r2, [sp, #4]
 800bb76:	2100      	movs	r1, #0
 800bb78:	f7fd fe78 	bl	800986c <memset>
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	b002      	add	sp, #8
 800bb80:	bd10      	pop	{r4, pc}

0800bb82 <_realloc_r>:
 800bb82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb84:	4607      	mov	r7, r0
 800bb86:	4614      	mov	r4, r2
 800bb88:	460e      	mov	r6, r1
 800bb8a:	b921      	cbnz	r1, 800bb96 <_realloc_r+0x14>
 800bb8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bb90:	4611      	mov	r1, r2
 800bb92:	f7fd bec3 	b.w	800991c <_malloc_r>
 800bb96:	b922      	cbnz	r2, 800bba2 <_realloc_r+0x20>
 800bb98:	f7fd fe70 	bl	800987c <_free_r>
 800bb9c:	4625      	mov	r5, r4
 800bb9e:	4628      	mov	r0, r5
 800bba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bba2:	f000 fc0d 	bl	800c3c0 <_malloc_usable_size_r>
 800bba6:	42a0      	cmp	r0, r4
 800bba8:	d20f      	bcs.n	800bbca <_realloc_r+0x48>
 800bbaa:	4621      	mov	r1, r4
 800bbac:	4638      	mov	r0, r7
 800bbae:	f7fd feb5 	bl	800991c <_malloc_r>
 800bbb2:	4605      	mov	r5, r0
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	d0f2      	beq.n	800bb9e <_realloc_r+0x1c>
 800bbb8:	4631      	mov	r1, r6
 800bbba:	4622      	mov	r2, r4
 800bbbc:	f7fd fe2e 	bl	800981c <memcpy>
 800bbc0:	4631      	mov	r1, r6
 800bbc2:	4638      	mov	r0, r7
 800bbc4:	f7fd fe5a 	bl	800987c <_free_r>
 800bbc8:	e7e9      	b.n	800bb9e <_realloc_r+0x1c>
 800bbca:	4635      	mov	r5, r6
 800bbcc:	e7e7      	b.n	800bb9e <_realloc_r+0x1c>

0800bbce <__ssputs_r>:
 800bbce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbd2:	688e      	ldr	r6, [r1, #8]
 800bbd4:	429e      	cmp	r6, r3
 800bbd6:	4682      	mov	sl, r0
 800bbd8:	460c      	mov	r4, r1
 800bbda:	4690      	mov	r8, r2
 800bbdc:	461f      	mov	r7, r3
 800bbde:	d838      	bhi.n	800bc52 <__ssputs_r+0x84>
 800bbe0:	898a      	ldrh	r2, [r1, #12]
 800bbe2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bbe6:	d032      	beq.n	800bc4e <__ssputs_r+0x80>
 800bbe8:	6825      	ldr	r5, [r4, #0]
 800bbea:	6909      	ldr	r1, [r1, #16]
 800bbec:	eba5 0901 	sub.w	r9, r5, r1
 800bbf0:	6965      	ldr	r5, [r4, #20]
 800bbf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	444b      	add	r3, r9
 800bbfe:	106d      	asrs	r5, r5, #1
 800bc00:	429d      	cmp	r5, r3
 800bc02:	bf38      	it	cc
 800bc04:	461d      	movcc	r5, r3
 800bc06:	0553      	lsls	r3, r2, #21
 800bc08:	d531      	bpl.n	800bc6e <__ssputs_r+0xa0>
 800bc0a:	4629      	mov	r1, r5
 800bc0c:	f7fd fe86 	bl	800991c <_malloc_r>
 800bc10:	4606      	mov	r6, r0
 800bc12:	b950      	cbnz	r0, 800bc2a <__ssputs_r+0x5c>
 800bc14:	230c      	movs	r3, #12
 800bc16:	f8ca 3000 	str.w	r3, [sl]
 800bc1a:	89a3      	ldrh	r3, [r4, #12]
 800bc1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc20:	81a3      	strh	r3, [r4, #12]
 800bc22:	f04f 30ff 	mov.w	r0, #4294967295
 800bc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc2a:	6921      	ldr	r1, [r4, #16]
 800bc2c:	464a      	mov	r2, r9
 800bc2e:	f7fd fdf5 	bl	800981c <memcpy>
 800bc32:	89a3      	ldrh	r3, [r4, #12]
 800bc34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc3c:	81a3      	strh	r3, [r4, #12]
 800bc3e:	6126      	str	r6, [r4, #16]
 800bc40:	6165      	str	r5, [r4, #20]
 800bc42:	444e      	add	r6, r9
 800bc44:	eba5 0509 	sub.w	r5, r5, r9
 800bc48:	6026      	str	r6, [r4, #0]
 800bc4a:	60a5      	str	r5, [r4, #8]
 800bc4c:	463e      	mov	r6, r7
 800bc4e:	42be      	cmp	r6, r7
 800bc50:	d900      	bls.n	800bc54 <__ssputs_r+0x86>
 800bc52:	463e      	mov	r6, r7
 800bc54:	4632      	mov	r2, r6
 800bc56:	6820      	ldr	r0, [r4, #0]
 800bc58:	4641      	mov	r1, r8
 800bc5a:	f7fd fded 	bl	8009838 <memmove>
 800bc5e:	68a3      	ldr	r3, [r4, #8]
 800bc60:	6822      	ldr	r2, [r4, #0]
 800bc62:	1b9b      	subs	r3, r3, r6
 800bc64:	4432      	add	r2, r6
 800bc66:	60a3      	str	r3, [r4, #8]
 800bc68:	6022      	str	r2, [r4, #0]
 800bc6a:	2000      	movs	r0, #0
 800bc6c:	e7db      	b.n	800bc26 <__ssputs_r+0x58>
 800bc6e:	462a      	mov	r2, r5
 800bc70:	f7ff ff87 	bl	800bb82 <_realloc_r>
 800bc74:	4606      	mov	r6, r0
 800bc76:	2800      	cmp	r0, #0
 800bc78:	d1e1      	bne.n	800bc3e <__ssputs_r+0x70>
 800bc7a:	6921      	ldr	r1, [r4, #16]
 800bc7c:	4650      	mov	r0, sl
 800bc7e:	f7fd fdfd 	bl	800987c <_free_r>
 800bc82:	e7c7      	b.n	800bc14 <__ssputs_r+0x46>

0800bc84 <_svfiprintf_r>:
 800bc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc88:	4698      	mov	r8, r3
 800bc8a:	898b      	ldrh	r3, [r1, #12]
 800bc8c:	061b      	lsls	r3, r3, #24
 800bc8e:	b09d      	sub	sp, #116	; 0x74
 800bc90:	4607      	mov	r7, r0
 800bc92:	460d      	mov	r5, r1
 800bc94:	4614      	mov	r4, r2
 800bc96:	d50e      	bpl.n	800bcb6 <_svfiprintf_r+0x32>
 800bc98:	690b      	ldr	r3, [r1, #16]
 800bc9a:	b963      	cbnz	r3, 800bcb6 <_svfiprintf_r+0x32>
 800bc9c:	2140      	movs	r1, #64	; 0x40
 800bc9e:	f7fd fe3d 	bl	800991c <_malloc_r>
 800bca2:	6028      	str	r0, [r5, #0]
 800bca4:	6128      	str	r0, [r5, #16]
 800bca6:	b920      	cbnz	r0, 800bcb2 <_svfiprintf_r+0x2e>
 800bca8:	230c      	movs	r3, #12
 800bcaa:	603b      	str	r3, [r7, #0]
 800bcac:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb0:	e0d1      	b.n	800be56 <_svfiprintf_r+0x1d2>
 800bcb2:	2340      	movs	r3, #64	; 0x40
 800bcb4:	616b      	str	r3, [r5, #20]
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	9309      	str	r3, [sp, #36]	; 0x24
 800bcba:	2320      	movs	r3, #32
 800bcbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcc0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcc4:	2330      	movs	r3, #48	; 0x30
 800bcc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800be70 <_svfiprintf_r+0x1ec>
 800bcca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bcce:	f04f 0901 	mov.w	r9, #1
 800bcd2:	4623      	mov	r3, r4
 800bcd4:	469a      	mov	sl, r3
 800bcd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcda:	b10a      	cbz	r2, 800bce0 <_svfiprintf_r+0x5c>
 800bcdc:	2a25      	cmp	r2, #37	; 0x25
 800bcde:	d1f9      	bne.n	800bcd4 <_svfiprintf_r+0x50>
 800bce0:	ebba 0b04 	subs.w	fp, sl, r4
 800bce4:	d00b      	beq.n	800bcfe <_svfiprintf_r+0x7a>
 800bce6:	465b      	mov	r3, fp
 800bce8:	4622      	mov	r2, r4
 800bcea:	4629      	mov	r1, r5
 800bcec:	4638      	mov	r0, r7
 800bcee:	f7ff ff6e 	bl	800bbce <__ssputs_r>
 800bcf2:	3001      	adds	r0, #1
 800bcf4:	f000 80aa 	beq.w	800be4c <_svfiprintf_r+0x1c8>
 800bcf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcfa:	445a      	add	r2, fp
 800bcfc:	9209      	str	r2, [sp, #36]	; 0x24
 800bcfe:	f89a 3000 	ldrb.w	r3, [sl]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	f000 80a2 	beq.w	800be4c <_svfiprintf_r+0x1c8>
 800bd08:	2300      	movs	r3, #0
 800bd0a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd12:	f10a 0a01 	add.w	sl, sl, #1
 800bd16:	9304      	str	r3, [sp, #16]
 800bd18:	9307      	str	r3, [sp, #28]
 800bd1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd1e:	931a      	str	r3, [sp, #104]	; 0x68
 800bd20:	4654      	mov	r4, sl
 800bd22:	2205      	movs	r2, #5
 800bd24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd28:	4851      	ldr	r0, [pc, #324]	; (800be70 <_svfiprintf_r+0x1ec>)
 800bd2a:	f7f4 fa79 	bl	8000220 <memchr>
 800bd2e:	9a04      	ldr	r2, [sp, #16]
 800bd30:	b9d8      	cbnz	r0, 800bd6a <_svfiprintf_r+0xe6>
 800bd32:	06d0      	lsls	r0, r2, #27
 800bd34:	bf44      	itt	mi
 800bd36:	2320      	movmi	r3, #32
 800bd38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd3c:	0711      	lsls	r1, r2, #28
 800bd3e:	bf44      	itt	mi
 800bd40:	232b      	movmi	r3, #43	; 0x2b
 800bd42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd46:	f89a 3000 	ldrb.w	r3, [sl]
 800bd4a:	2b2a      	cmp	r3, #42	; 0x2a
 800bd4c:	d015      	beq.n	800bd7a <_svfiprintf_r+0xf6>
 800bd4e:	9a07      	ldr	r2, [sp, #28]
 800bd50:	4654      	mov	r4, sl
 800bd52:	2000      	movs	r0, #0
 800bd54:	f04f 0c0a 	mov.w	ip, #10
 800bd58:	4621      	mov	r1, r4
 800bd5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd5e:	3b30      	subs	r3, #48	; 0x30
 800bd60:	2b09      	cmp	r3, #9
 800bd62:	d94e      	bls.n	800be02 <_svfiprintf_r+0x17e>
 800bd64:	b1b0      	cbz	r0, 800bd94 <_svfiprintf_r+0x110>
 800bd66:	9207      	str	r2, [sp, #28]
 800bd68:	e014      	b.n	800bd94 <_svfiprintf_r+0x110>
 800bd6a:	eba0 0308 	sub.w	r3, r0, r8
 800bd6e:	fa09 f303 	lsl.w	r3, r9, r3
 800bd72:	4313      	orrs	r3, r2
 800bd74:	9304      	str	r3, [sp, #16]
 800bd76:	46a2      	mov	sl, r4
 800bd78:	e7d2      	b.n	800bd20 <_svfiprintf_r+0x9c>
 800bd7a:	9b03      	ldr	r3, [sp, #12]
 800bd7c:	1d19      	adds	r1, r3, #4
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	9103      	str	r1, [sp, #12]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	bfbb      	ittet	lt
 800bd86:	425b      	neglt	r3, r3
 800bd88:	f042 0202 	orrlt.w	r2, r2, #2
 800bd8c:	9307      	strge	r3, [sp, #28]
 800bd8e:	9307      	strlt	r3, [sp, #28]
 800bd90:	bfb8      	it	lt
 800bd92:	9204      	strlt	r2, [sp, #16]
 800bd94:	7823      	ldrb	r3, [r4, #0]
 800bd96:	2b2e      	cmp	r3, #46	; 0x2e
 800bd98:	d10c      	bne.n	800bdb4 <_svfiprintf_r+0x130>
 800bd9a:	7863      	ldrb	r3, [r4, #1]
 800bd9c:	2b2a      	cmp	r3, #42	; 0x2a
 800bd9e:	d135      	bne.n	800be0c <_svfiprintf_r+0x188>
 800bda0:	9b03      	ldr	r3, [sp, #12]
 800bda2:	1d1a      	adds	r2, r3, #4
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	9203      	str	r2, [sp, #12]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	bfb8      	it	lt
 800bdac:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdb0:	3402      	adds	r4, #2
 800bdb2:	9305      	str	r3, [sp, #20]
 800bdb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800be80 <_svfiprintf_r+0x1fc>
 800bdb8:	7821      	ldrb	r1, [r4, #0]
 800bdba:	2203      	movs	r2, #3
 800bdbc:	4650      	mov	r0, sl
 800bdbe:	f7f4 fa2f 	bl	8000220 <memchr>
 800bdc2:	b140      	cbz	r0, 800bdd6 <_svfiprintf_r+0x152>
 800bdc4:	2340      	movs	r3, #64	; 0x40
 800bdc6:	eba0 000a 	sub.w	r0, r0, sl
 800bdca:	fa03 f000 	lsl.w	r0, r3, r0
 800bdce:	9b04      	ldr	r3, [sp, #16]
 800bdd0:	4303      	orrs	r3, r0
 800bdd2:	3401      	adds	r4, #1
 800bdd4:	9304      	str	r3, [sp, #16]
 800bdd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdda:	4826      	ldr	r0, [pc, #152]	; (800be74 <_svfiprintf_r+0x1f0>)
 800bddc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bde0:	2206      	movs	r2, #6
 800bde2:	f7f4 fa1d 	bl	8000220 <memchr>
 800bde6:	2800      	cmp	r0, #0
 800bde8:	d038      	beq.n	800be5c <_svfiprintf_r+0x1d8>
 800bdea:	4b23      	ldr	r3, [pc, #140]	; (800be78 <_svfiprintf_r+0x1f4>)
 800bdec:	bb1b      	cbnz	r3, 800be36 <_svfiprintf_r+0x1b2>
 800bdee:	9b03      	ldr	r3, [sp, #12]
 800bdf0:	3307      	adds	r3, #7
 800bdf2:	f023 0307 	bic.w	r3, r3, #7
 800bdf6:	3308      	adds	r3, #8
 800bdf8:	9303      	str	r3, [sp, #12]
 800bdfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdfc:	4433      	add	r3, r6
 800bdfe:	9309      	str	r3, [sp, #36]	; 0x24
 800be00:	e767      	b.n	800bcd2 <_svfiprintf_r+0x4e>
 800be02:	fb0c 3202 	mla	r2, ip, r2, r3
 800be06:	460c      	mov	r4, r1
 800be08:	2001      	movs	r0, #1
 800be0a:	e7a5      	b.n	800bd58 <_svfiprintf_r+0xd4>
 800be0c:	2300      	movs	r3, #0
 800be0e:	3401      	adds	r4, #1
 800be10:	9305      	str	r3, [sp, #20]
 800be12:	4619      	mov	r1, r3
 800be14:	f04f 0c0a 	mov.w	ip, #10
 800be18:	4620      	mov	r0, r4
 800be1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be1e:	3a30      	subs	r2, #48	; 0x30
 800be20:	2a09      	cmp	r2, #9
 800be22:	d903      	bls.n	800be2c <_svfiprintf_r+0x1a8>
 800be24:	2b00      	cmp	r3, #0
 800be26:	d0c5      	beq.n	800bdb4 <_svfiprintf_r+0x130>
 800be28:	9105      	str	r1, [sp, #20]
 800be2a:	e7c3      	b.n	800bdb4 <_svfiprintf_r+0x130>
 800be2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800be30:	4604      	mov	r4, r0
 800be32:	2301      	movs	r3, #1
 800be34:	e7f0      	b.n	800be18 <_svfiprintf_r+0x194>
 800be36:	ab03      	add	r3, sp, #12
 800be38:	9300      	str	r3, [sp, #0]
 800be3a:	462a      	mov	r2, r5
 800be3c:	4b0f      	ldr	r3, [pc, #60]	; (800be7c <_svfiprintf_r+0x1f8>)
 800be3e:	a904      	add	r1, sp, #16
 800be40:	4638      	mov	r0, r7
 800be42:	f7fd fe65 	bl	8009b10 <_printf_float>
 800be46:	1c42      	adds	r2, r0, #1
 800be48:	4606      	mov	r6, r0
 800be4a:	d1d6      	bne.n	800bdfa <_svfiprintf_r+0x176>
 800be4c:	89ab      	ldrh	r3, [r5, #12]
 800be4e:	065b      	lsls	r3, r3, #25
 800be50:	f53f af2c 	bmi.w	800bcac <_svfiprintf_r+0x28>
 800be54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be56:	b01d      	add	sp, #116	; 0x74
 800be58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be5c:	ab03      	add	r3, sp, #12
 800be5e:	9300      	str	r3, [sp, #0]
 800be60:	462a      	mov	r2, r5
 800be62:	4b06      	ldr	r3, [pc, #24]	; (800be7c <_svfiprintf_r+0x1f8>)
 800be64:	a904      	add	r1, sp, #16
 800be66:	4638      	mov	r0, r7
 800be68:	f7fe f8f6 	bl	800a058 <_printf_i>
 800be6c:	e7eb      	b.n	800be46 <_svfiprintf_r+0x1c2>
 800be6e:	bf00      	nop
 800be70:	0800cb74 	.word	0x0800cb74
 800be74:	0800cb7e 	.word	0x0800cb7e
 800be78:	08009b11 	.word	0x08009b11
 800be7c:	0800bbcf 	.word	0x0800bbcf
 800be80:	0800cb7a 	.word	0x0800cb7a

0800be84 <__sfputc_r>:
 800be84:	6893      	ldr	r3, [r2, #8]
 800be86:	3b01      	subs	r3, #1
 800be88:	2b00      	cmp	r3, #0
 800be8a:	b410      	push	{r4}
 800be8c:	6093      	str	r3, [r2, #8]
 800be8e:	da08      	bge.n	800bea2 <__sfputc_r+0x1e>
 800be90:	6994      	ldr	r4, [r2, #24]
 800be92:	42a3      	cmp	r3, r4
 800be94:	db01      	blt.n	800be9a <__sfputc_r+0x16>
 800be96:	290a      	cmp	r1, #10
 800be98:	d103      	bne.n	800bea2 <__sfputc_r+0x1e>
 800be9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be9e:	f000 b95d 	b.w	800c15c <__swbuf_r>
 800bea2:	6813      	ldr	r3, [r2, #0]
 800bea4:	1c58      	adds	r0, r3, #1
 800bea6:	6010      	str	r0, [r2, #0]
 800bea8:	7019      	strb	r1, [r3, #0]
 800beaa:	4608      	mov	r0, r1
 800beac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800beb0:	4770      	bx	lr

0800beb2 <__sfputs_r>:
 800beb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beb4:	4606      	mov	r6, r0
 800beb6:	460f      	mov	r7, r1
 800beb8:	4614      	mov	r4, r2
 800beba:	18d5      	adds	r5, r2, r3
 800bebc:	42ac      	cmp	r4, r5
 800bebe:	d101      	bne.n	800bec4 <__sfputs_r+0x12>
 800bec0:	2000      	movs	r0, #0
 800bec2:	e007      	b.n	800bed4 <__sfputs_r+0x22>
 800bec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bec8:	463a      	mov	r2, r7
 800beca:	4630      	mov	r0, r6
 800becc:	f7ff ffda 	bl	800be84 <__sfputc_r>
 800bed0:	1c43      	adds	r3, r0, #1
 800bed2:	d1f3      	bne.n	800bebc <__sfputs_r+0xa>
 800bed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bed8 <_vfiprintf_r>:
 800bed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bedc:	460d      	mov	r5, r1
 800bede:	b09d      	sub	sp, #116	; 0x74
 800bee0:	4614      	mov	r4, r2
 800bee2:	4698      	mov	r8, r3
 800bee4:	4606      	mov	r6, r0
 800bee6:	b118      	cbz	r0, 800bef0 <_vfiprintf_r+0x18>
 800bee8:	6983      	ldr	r3, [r0, #24]
 800beea:	b90b      	cbnz	r3, 800bef0 <_vfiprintf_r+0x18>
 800beec:	f7fd fbc8 	bl	8009680 <__sinit>
 800bef0:	4b89      	ldr	r3, [pc, #548]	; (800c118 <_vfiprintf_r+0x240>)
 800bef2:	429d      	cmp	r5, r3
 800bef4:	d11b      	bne.n	800bf2e <_vfiprintf_r+0x56>
 800bef6:	6875      	ldr	r5, [r6, #4]
 800bef8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800befa:	07d9      	lsls	r1, r3, #31
 800befc:	d405      	bmi.n	800bf0a <_vfiprintf_r+0x32>
 800befe:	89ab      	ldrh	r3, [r5, #12]
 800bf00:	059a      	lsls	r2, r3, #22
 800bf02:	d402      	bmi.n	800bf0a <_vfiprintf_r+0x32>
 800bf04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf06:	f7fd fc7e 	bl	8009806 <__retarget_lock_acquire_recursive>
 800bf0a:	89ab      	ldrh	r3, [r5, #12]
 800bf0c:	071b      	lsls	r3, r3, #28
 800bf0e:	d501      	bpl.n	800bf14 <_vfiprintf_r+0x3c>
 800bf10:	692b      	ldr	r3, [r5, #16]
 800bf12:	b9eb      	cbnz	r3, 800bf50 <_vfiprintf_r+0x78>
 800bf14:	4629      	mov	r1, r5
 800bf16:	4630      	mov	r0, r6
 800bf18:	f000 f980 	bl	800c21c <__swsetup_r>
 800bf1c:	b1c0      	cbz	r0, 800bf50 <_vfiprintf_r+0x78>
 800bf1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf20:	07dc      	lsls	r4, r3, #31
 800bf22:	d50e      	bpl.n	800bf42 <_vfiprintf_r+0x6a>
 800bf24:	f04f 30ff 	mov.w	r0, #4294967295
 800bf28:	b01d      	add	sp, #116	; 0x74
 800bf2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf2e:	4b7b      	ldr	r3, [pc, #492]	; (800c11c <_vfiprintf_r+0x244>)
 800bf30:	429d      	cmp	r5, r3
 800bf32:	d101      	bne.n	800bf38 <_vfiprintf_r+0x60>
 800bf34:	68b5      	ldr	r5, [r6, #8]
 800bf36:	e7df      	b.n	800bef8 <_vfiprintf_r+0x20>
 800bf38:	4b79      	ldr	r3, [pc, #484]	; (800c120 <_vfiprintf_r+0x248>)
 800bf3a:	429d      	cmp	r5, r3
 800bf3c:	bf08      	it	eq
 800bf3e:	68f5      	ldreq	r5, [r6, #12]
 800bf40:	e7da      	b.n	800bef8 <_vfiprintf_r+0x20>
 800bf42:	89ab      	ldrh	r3, [r5, #12]
 800bf44:	0598      	lsls	r0, r3, #22
 800bf46:	d4ed      	bmi.n	800bf24 <_vfiprintf_r+0x4c>
 800bf48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf4a:	f7fd fc5d 	bl	8009808 <__retarget_lock_release_recursive>
 800bf4e:	e7e9      	b.n	800bf24 <_vfiprintf_r+0x4c>
 800bf50:	2300      	movs	r3, #0
 800bf52:	9309      	str	r3, [sp, #36]	; 0x24
 800bf54:	2320      	movs	r3, #32
 800bf56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf5e:	2330      	movs	r3, #48	; 0x30
 800bf60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c124 <_vfiprintf_r+0x24c>
 800bf64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf68:	f04f 0901 	mov.w	r9, #1
 800bf6c:	4623      	mov	r3, r4
 800bf6e:	469a      	mov	sl, r3
 800bf70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf74:	b10a      	cbz	r2, 800bf7a <_vfiprintf_r+0xa2>
 800bf76:	2a25      	cmp	r2, #37	; 0x25
 800bf78:	d1f9      	bne.n	800bf6e <_vfiprintf_r+0x96>
 800bf7a:	ebba 0b04 	subs.w	fp, sl, r4
 800bf7e:	d00b      	beq.n	800bf98 <_vfiprintf_r+0xc0>
 800bf80:	465b      	mov	r3, fp
 800bf82:	4622      	mov	r2, r4
 800bf84:	4629      	mov	r1, r5
 800bf86:	4630      	mov	r0, r6
 800bf88:	f7ff ff93 	bl	800beb2 <__sfputs_r>
 800bf8c:	3001      	adds	r0, #1
 800bf8e:	f000 80aa 	beq.w	800c0e6 <_vfiprintf_r+0x20e>
 800bf92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf94:	445a      	add	r2, fp
 800bf96:	9209      	str	r2, [sp, #36]	; 0x24
 800bf98:	f89a 3000 	ldrb.w	r3, [sl]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f000 80a2 	beq.w	800c0e6 <_vfiprintf_r+0x20e>
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfac:	f10a 0a01 	add.w	sl, sl, #1
 800bfb0:	9304      	str	r3, [sp, #16]
 800bfb2:	9307      	str	r3, [sp, #28]
 800bfb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfb8:	931a      	str	r3, [sp, #104]	; 0x68
 800bfba:	4654      	mov	r4, sl
 800bfbc:	2205      	movs	r2, #5
 800bfbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfc2:	4858      	ldr	r0, [pc, #352]	; (800c124 <_vfiprintf_r+0x24c>)
 800bfc4:	f7f4 f92c 	bl	8000220 <memchr>
 800bfc8:	9a04      	ldr	r2, [sp, #16]
 800bfca:	b9d8      	cbnz	r0, 800c004 <_vfiprintf_r+0x12c>
 800bfcc:	06d1      	lsls	r1, r2, #27
 800bfce:	bf44      	itt	mi
 800bfd0:	2320      	movmi	r3, #32
 800bfd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfd6:	0713      	lsls	r3, r2, #28
 800bfd8:	bf44      	itt	mi
 800bfda:	232b      	movmi	r3, #43	; 0x2b
 800bfdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfe0:	f89a 3000 	ldrb.w	r3, [sl]
 800bfe4:	2b2a      	cmp	r3, #42	; 0x2a
 800bfe6:	d015      	beq.n	800c014 <_vfiprintf_r+0x13c>
 800bfe8:	9a07      	ldr	r2, [sp, #28]
 800bfea:	4654      	mov	r4, sl
 800bfec:	2000      	movs	r0, #0
 800bfee:	f04f 0c0a 	mov.w	ip, #10
 800bff2:	4621      	mov	r1, r4
 800bff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bff8:	3b30      	subs	r3, #48	; 0x30
 800bffa:	2b09      	cmp	r3, #9
 800bffc:	d94e      	bls.n	800c09c <_vfiprintf_r+0x1c4>
 800bffe:	b1b0      	cbz	r0, 800c02e <_vfiprintf_r+0x156>
 800c000:	9207      	str	r2, [sp, #28]
 800c002:	e014      	b.n	800c02e <_vfiprintf_r+0x156>
 800c004:	eba0 0308 	sub.w	r3, r0, r8
 800c008:	fa09 f303 	lsl.w	r3, r9, r3
 800c00c:	4313      	orrs	r3, r2
 800c00e:	9304      	str	r3, [sp, #16]
 800c010:	46a2      	mov	sl, r4
 800c012:	e7d2      	b.n	800bfba <_vfiprintf_r+0xe2>
 800c014:	9b03      	ldr	r3, [sp, #12]
 800c016:	1d19      	adds	r1, r3, #4
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	9103      	str	r1, [sp, #12]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	bfbb      	ittet	lt
 800c020:	425b      	neglt	r3, r3
 800c022:	f042 0202 	orrlt.w	r2, r2, #2
 800c026:	9307      	strge	r3, [sp, #28]
 800c028:	9307      	strlt	r3, [sp, #28]
 800c02a:	bfb8      	it	lt
 800c02c:	9204      	strlt	r2, [sp, #16]
 800c02e:	7823      	ldrb	r3, [r4, #0]
 800c030:	2b2e      	cmp	r3, #46	; 0x2e
 800c032:	d10c      	bne.n	800c04e <_vfiprintf_r+0x176>
 800c034:	7863      	ldrb	r3, [r4, #1]
 800c036:	2b2a      	cmp	r3, #42	; 0x2a
 800c038:	d135      	bne.n	800c0a6 <_vfiprintf_r+0x1ce>
 800c03a:	9b03      	ldr	r3, [sp, #12]
 800c03c:	1d1a      	adds	r2, r3, #4
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	9203      	str	r2, [sp, #12]
 800c042:	2b00      	cmp	r3, #0
 800c044:	bfb8      	it	lt
 800c046:	f04f 33ff 	movlt.w	r3, #4294967295
 800c04a:	3402      	adds	r4, #2
 800c04c:	9305      	str	r3, [sp, #20]
 800c04e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c134 <_vfiprintf_r+0x25c>
 800c052:	7821      	ldrb	r1, [r4, #0]
 800c054:	2203      	movs	r2, #3
 800c056:	4650      	mov	r0, sl
 800c058:	f7f4 f8e2 	bl	8000220 <memchr>
 800c05c:	b140      	cbz	r0, 800c070 <_vfiprintf_r+0x198>
 800c05e:	2340      	movs	r3, #64	; 0x40
 800c060:	eba0 000a 	sub.w	r0, r0, sl
 800c064:	fa03 f000 	lsl.w	r0, r3, r0
 800c068:	9b04      	ldr	r3, [sp, #16]
 800c06a:	4303      	orrs	r3, r0
 800c06c:	3401      	adds	r4, #1
 800c06e:	9304      	str	r3, [sp, #16]
 800c070:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c074:	482c      	ldr	r0, [pc, #176]	; (800c128 <_vfiprintf_r+0x250>)
 800c076:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c07a:	2206      	movs	r2, #6
 800c07c:	f7f4 f8d0 	bl	8000220 <memchr>
 800c080:	2800      	cmp	r0, #0
 800c082:	d03f      	beq.n	800c104 <_vfiprintf_r+0x22c>
 800c084:	4b29      	ldr	r3, [pc, #164]	; (800c12c <_vfiprintf_r+0x254>)
 800c086:	bb1b      	cbnz	r3, 800c0d0 <_vfiprintf_r+0x1f8>
 800c088:	9b03      	ldr	r3, [sp, #12]
 800c08a:	3307      	adds	r3, #7
 800c08c:	f023 0307 	bic.w	r3, r3, #7
 800c090:	3308      	adds	r3, #8
 800c092:	9303      	str	r3, [sp, #12]
 800c094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c096:	443b      	add	r3, r7
 800c098:	9309      	str	r3, [sp, #36]	; 0x24
 800c09a:	e767      	b.n	800bf6c <_vfiprintf_r+0x94>
 800c09c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0a0:	460c      	mov	r4, r1
 800c0a2:	2001      	movs	r0, #1
 800c0a4:	e7a5      	b.n	800bff2 <_vfiprintf_r+0x11a>
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	3401      	adds	r4, #1
 800c0aa:	9305      	str	r3, [sp, #20]
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	f04f 0c0a 	mov.w	ip, #10
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0b8:	3a30      	subs	r2, #48	; 0x30
 800c0ba:	2a09      	cmp	r2, #9
 800c0bc:	d903      	bls.n	800c0c6 <_vfiprintf_r+0x1ee>
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d0c5      	beq.n	800c04e <_vfiprintf_r+0x176>
 800c0c2:	9105      	str	r1, [sp, #20]
 800c0c4:	e7c3      	b.n	800c04e <_vfiprintf_r+0x176>
 800c0c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e7f0      	b.n	800c0b2 <_vfiprintf_r+0x1da>
 800c0d0:	ab03      	add	r3, sp, #12
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	462a      	mov	r2, r5
 800c0d6:	4b16      	ldr	r3, [pc, #88]	; (800c130 <_vfiprintf_r+0x258>)
 800c0d8:	a904      	add	r1, sp, #16
 800c0da:	4630      	mov	r0, r6
 800c0dc:	f7fd fd18 	bl	8009b10 <_printf_float>
 800c0e0:	4607      	mov	r7, r0
 800c0e2:	1c78      	adds	r0, r7, #1
 800c0e4:	d1d6      	bne.n	800c094 <_vfiprintf_r+0x1bc>
 800c0e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0e8:	07d9      	lsls	r1, r3, #31
 800c0ea:	d405      	bmi.n	800c0f8 <_vfiprintf_r+0x220>
 800c0ec:	89ab      	ldrh	r3, [r5, #12]
 800c0ee:	059a      	lsls	r2, r3, #22
 800c0f0:	d402      	bmi.n	800c0f8 <_vfiprintf_r+0x220>
 800c0f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0f4:	f7fd fb88 	bl	8009808 <__retarget_lock_release_recursive>
 800c0f8:	89ab      	ldrh	r3, [r5, #12]
 800c0fa:	065b      	lsls	r3, r3, #25
 800c0fc:	f53f af12 	bmi.w	800bf24 <_vfiprintf_r+0x4c>
 800c100:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c102:	e711      	b.n	800bf28 <_vfiprintf_r+0x50>
 800c104:	ab03      	add	r3, sp, #12
 800c106:	9300      	str	r3, [sp, #0]
 800c108:	462a      	mov	r2, r5
 800c10a:	4b09      	ldr	r3, [pc, #36]	; (800c130 <_vfiprintf_r+0x258>)
 800c10c:	a904      	add	r1, sp, #16
 800c10e:	4630      	mov	r0, r6
 800c110:	f7fd ffa2 	bl	800a058 <_printf_i>
 800c114:	e7e4      	b.n	800c0e0 <_vfiprintf_r+0x208>
 800c116:	bf00      	nop
 800c118:	0800c7c4 	.word	0x0800c7c4
 800c11c:	0800c7e4 	.word	0x0800c7e4
 800c120:	0800c7a4 	.word	0x0800c7a4
 800c124:	0800cb74 	.word	0x0800cb74
 800c128:	0800cb7e 	.word	0x0800cb7e
 800c12c:	08009b11 	.word	0x08009b11
 800c130:	0800beb3 	.word	0x0800beb3
 800c134:	0800cb7a 	.word	0x0800cb7a

0800c138 <_read_r>:
 800c138:	b538      	push	{r3, r4, r5, lr}
 800c13a:	4d07      	ldr	r5, [pc, #28]	; (800c158 <_read_r+0x20>)
 800c13c:	4604      	mov	r4, r0
 800c13e:	4608      	mov	r0, r1
 800c140:	4611      	mov	r1, r2
 800c142:	2200      	movs	r2, #0
 800c144:	602a      	str	r2, [r5, #0]
 800c146:	461a      	mov	r2, r3
 800c148:	f7f5 fb38 	bl	80017bc <_read>
 800c14c:	1c43      	adds	r3, r0, #1
 800c14e:	d102      	bne.n	800c156 <_read_r+0x1e>
 800c150:	682b      	ldr	r3, [r5, #0]
 800c152:	b103      	cbz	r3, 800c156 <_read_r+0x1e>
 800c154:	6023      	str	r3, [r4, #0]
 800c156:	bd38      	pop	{r3, r4, r5, pc}
 800c158:	20005440 	.word	0x20005440

0800c15c <__swbuf_r>:
 800c15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c15e:	460e      	mov	r6, r1
 800c160:	4614      	mov	r4, r2
 800c162:	4605      	mov	r5, r0
 800c164:	b118      	cbz	r0, 800c16e <__swbuf_r+0x12>
 800c166:	6983      	ldr	r3, [r0, #24]
 800c168:	b90b      	cbnz	r3, 800c16e <__swbuf_r+0x12>
 800c16a:	f7fd fa89 	bl	8009680 <__sinit>
 800c16e:	4b21      	ldr	r3, [pc, #132]	; (800c1f4 <__swbuf_r+0x98>)
 800c170:	429c      	cmp	r4, r3
 800c172:	d12b      	bne.n	800c1cc <__swbuf_r+0x70>
 800c174:	686c      	ldr	r4, [r5, #4]
 800c176:	69a3      	ldr	r3, [r4, #24]
 800c178:	60a3      	str	r3, [r4, #8]
 800c17a:	89a3      	ldrh	r3, [r4, #12]
 800c17c:	071a      	lsls	r2, r3, #28
 800c17e:	d52f      	bpl.n	800c1e0 <__swbuf_r+0x84>
 800c180:	6923      	ldr	r3, [r4, #16]
 800c182:	b36b      	cbz	r3, 800c1e0 <__swbuf_r+0x84>
 800c184:	6923      	ldr	r3, [r4, #16]
 800c186:	6820      	ldr	r0, [r4, #0]
 800c188:	1ac0      	subs	r0, r0, r3
 800c18a:	6963      	ldr	r3, [r4, #20]
 800c18c:	b2f6      	uxtb	r6, r6
 800c18e:	4283      	cmp	r3, r0
 800c190:	4637      	mov	r7, r6
 800c192:	dc04      	bgt.n	800c19e <__swbuf_r+0x42>
 800c194:	4621      	mov	r1, r4
 800c196:	4628      	mov	r0, r5
 800c198:	f7ff f8e4 	bl	800b364 <_fflush_r>
 800c19c:	bb30      	cbnz	r0, 800c1ec <__swbuf_r+0x90>
 800c19e:	68a3      	ldr	r3, [r4, #8]
 800c1a0:	3b01      	subs	r3, #1
 800c1a2:	60a3      	str	r3, [r4, #8]
 800c1a4:	6823      	ldr	r3, [r4, #0]
 800c1a6:	1c5a      	adds	r2, r3, #1
 800c1a8:	6022      	str	r2, [r4, #0]
 800c1aa:	701e      	strb	r6, [r3, #0]
 800c1ac:	6963      	ldr	r3, [r4, #20]
 800c1ae:	3001      	adds	r0, #1
 800c1b0:	4283      	cmp	r3, r0
 800c1b2:	d004      	beq.n	800c1be <__swbuf_r+0x62>
 800c1b4:	89a3      	ldrh	r3, [r4, #12]
 800c1b6:	07db      	lsls	r3, r3, #31
 800c1b8:	d506      	bpl.n	800c1c8 <__swbuf_r+0x6c>
 800c1ba:	2e0a      	cmp	r6, #10
 800c1bc:	d104      	bne.n	800c1c8 <__swbuf_r+0x6c>
 800c1be:	4621      	mov	r1, r4
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	f7ff f8cf 	bl	800b364 <_fflush_r>
 800c1c6:	b988      	cbnz	r0, 800c1ec <__swbuf_r+0x90>
 800c1c8:	4638      	mov	r0, r7
 800c1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1cc:	4b0a      	ldr	r3, [pc, #40]	; (800c1f8 <__swbuf_r+0x9c>)
 800c1ce:	429c      	cmp	r4, r3
 800c1d0:	d101      	bne.n	800c1d6 <__swbuf_r+0x7a>
 800c1d2:	68ac      	ldr	r4, [r5, #8]
 800c1d4:	e7cf      	b.n	800c176 <__swbuf_r+0x1a>
 800c1d6:	4b09      	ldr	r3, [pc, #36]	; (800c1fc <__swbuf_r+0xa0>)
 800c1d8:	429c      	cmp	r4, r3
 800c1da:	bf08      	it	eq
 800c1dc:	68ec      	ldreq	r4, [r5, #12]
 800c1de:	e7ca      	b.n	800c176 <__swbuf_r+0x1a>
 800c1e0:	4621      	mov	r1, r4
 800c1e2:	4628      	mov	r0, r5
 800c1e4:	f000 f81a 	bl	800c21c <__swsetup_r>
 800c1e8:	2800      	cmp	r0, #0
 800c1ea:	d0cb      	beq.n	800c184 <__swbuf_r+0x28>
 800c1ec:	f04f 37ff 	mov.w	r7, #4294967295
 800c1f0:	e7ea      	b.n	800c1c8 <__swbuf_r+0x6c>
 800c1f2:	bf00      	nop
 800c1f4:	0800c7c4 	.word	0x0800c7c4
 800c1f8:	0800c7e4 	.word	0x0800c7e4
 800c1fc:	0800c7a4 	.word	0x0800c7a4

0800c200 <__ascii_wctomb>:
 800c200:	b149      	cbz	r1, 800c216 <__ascii_wctomb+0x16>
 800c202:	2aff      	cmp	r2, #255	; 0xff
 800c204:	bf85      	ittet	hi
 800c206:	238a      	movhi	r3, #138	; 0x8a
 800c208:	6003      	strhi	r3, [r0, #0]
 800c20a:	700a      	strbls	r2, [r1, #0]
 800c20c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c210:	bf98      	it	ls
 800c212:	2001      	movls	r0, #1
 800c214:	4770      	bx	lr
 800c216:	4608      	mov	r0, r1
 800c218:	4770      	bx	lr
	...

0800c21c <__swsetup_r>:
 800c21c:	4b32      	ldr	r3, [pc, #200]	; (800c2e8 <__swsetup_r+0xcc>)
 800c21e:	b570      	push	{r4, r5, r6, lr}
 800c220:	681d      	ldr	r5, [r3, #0]
 800c222:	4606      	mov	r6, r0
 800c224:	460c      	mov	r4, r1
 800c226:	b125      	cbz	r5, 800c232 <__swsetup_r+0x16>
 800c228:	69ab      	ldr	r3, [r5, #24]
 800c22a:	b913      	cbnz	r3, 800c232 <__swsetup_r+0x16>
 800c22c:	4628      	mov	r0, r5
 800c22e:	f7fd fa27 	bl	8009680 <__sinit>
 800c232:	4b2e      	ldr	r3, [pc, #184]	; (800c2ec <__swsetup_r+0xd0>)
 800c234:	429c      	cmp	r4, r3
 800c236:	d10f      	bne.n	800c258 <__swsetup_r+0x3c>
 800c238:	686c      	ldr	r4, [r5, #4]
 800c23a:	89a3      	ldrh	r3, [r4, #12]
 800c23c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c240:	0719      	lsls	r1, r3, #28
 800c242:	d42c      	bmi.n	800c29e <__swsetup_r+0x82>
 800c244:	06dd      	lsls	r5, r3, #27
 800c246:	d411      	bmi.n	800c26c <__swsetup_r+0x50>
 800c248:	2309      	movs	r3, #9
 800c24a:	6033      	str	r3, [r6, #0]
 800c24c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c250:	81a3      	strh	r3, [r4, #12]
 800c252:	f04f 30ff 	mov.w	r0, #4294967295
 800c256:	e03e      	b.n	800c2d6 <__swsetup_r+0xba>
 800c258:	4b25      	ldr	r3, [pc, #148]	; (800c2f0 <__swsetup_r+0xd4>)
 800c25a:	429c      	cmp	r4, r3
 800c25c:	d101      	bne.n	800c262 <__swsetup_r+0x46>
 800c25e:	68ac      	ldr	r4, [r5, #8]
 800c260:	e7eb      	b.n	800c23a <__swsetup_r+0x1e>
 800c262:	4b24      	ldr	r3, [pc, #144]	; (800c2f4 <__swsetup_r+0xd8>)
 800c264:	429c      	cmp	r4, r3
 800c266:	bf08      	it	eq
 800c268:	68ec      	ldreq	r4, [r5, #12]
 800c26a:	e7e6      	b.n	800c23a <__swsetup_r+0x1e>
 800c26c:	0758      	lsls	r0, r3, #29
 800c26e:	d512      	bpl.n	800c296 <__swsetup_r+0x7a>
 800c270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c272:	b141      	cbz	r1, 800c286 <__swsetup_r+0x6a>
 800c274:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c278:	4299      	cmp	r1, r3
 800c27a:	d002      	beq.n	800c282 <__swsetup_r+0x66>
 800c27c:	4630      	mov	r0, r6
 800c27e:	f7fd fafd 	bl	800987c <_free_r>
 800c282:	2300      	movs	r3, #0
 800c284:	6363      	str	r3, [r4, #52]	; 0x34
 800c286:	89a3      	ldrh	r3, [r4, #12]
 800c288:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c28c:	81a3      	strh	r3, [r4, #12]
 800c28e:	2300      	movs	r3, #0
 800c290:	6063      	str	r3, [r4, #4]
 800c292:	6923      	ldr	r3, [r4, #16]
 800c294:	6023      	str	r3, [r4, #0]
 800c296:	89a3      	ldrh	r3, [r4, #12]
 800c298:	f043 0308 	orr.w	r3, r3, #8
 800c29c:	81a3      	strh	r3, [r4, #12]
 800c29e:	6923      	ldr	r3, [r4, #16]
 800c2a0:	b94b      	cbnz	r3, 800c2b6 <__swsetup_r+0x9a>
 800c2a2:	89a3      	ldrh	r3, [r4, #12]
 800c2a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c2a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2ac:	d003      	beq.n	800c2b6 <__swsetup_r+0x9a>
 800c2ae:	4621      	mov	r1, r4
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	f000 f845 	bl	800c340 <__smakebuf_r>
 800c2b6:	89a0      	ldrh	r0, [r4, #12]
 800c2b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2bc:	f010 0301 	ands.w	r3, r0, #1
 800c2c0:	d00a      	beq.n	800c2d8 <__swsetup_r+0xbc>
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	60a3      	str	r3, [r4, #8]
 800c2c6:	6963      	ldr	r3, [r4, #20]
 800c2c8:	425b      	negs	r3, r3
 800c2ca:	61a3      	str	r3, [r4, #24]
 800c2cc:	6923      	ldr	r3, [r4, #16]
 800c2ce:	b943      	cbnz	r3, 800c2e2 <__swsetup_r+0xc6>
 800c2d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c2d4:	d1ba      	bne.n	800c24c <__swsetup_r+0x30>
 800c2d6:	bd70      	pop	{r4, r5, r6, pc}
 800c2d8:	0781      	lsls	r1, r0, #30
 800c2da:	bf58      	it	pl
 800c2dc:	6963      	ldrpl	r3, [r4, #20]
 800c2de:	60a3      	str	r3, [r4, #8]
 800c2e0:	e7f4      	b.n	800c2cc <__swsetup_r+0xb0>
 800c2e2:	2000      	movs	r0, #0
 800c2e4:	e7f7      	b.n	800c2d6 <__swsetup_r+0xba>
 800c2e6:	bf00      	nop
 800c2e8:	20000014 	.word	0x20000014
 800c2ec:	0800c7c4 	.word	0x0800c7c4
 800c2f0:	0800c7e4 	.word	0x0800c7e4
 800c2f4:	0800c7a4 	.word	0x0800c7a4

0800c2f8 <__swhatbuf_r>:
 800c2f8:	b570      	push	{r4, r5, r6, lr}
 800c2fa:	460e      	mov	r6, r1
 800c2fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c300:	2900      	cmp	r1, #0
 800c302:	b096      	sub	sp, #88	; 0x58
 800c304:	4614      	mov	r4, r2
 800c306:	461d      	mov	r5, r3
 800c308:	da07      	bge.n	800c31a <__swhatbuf_r+0x22>
 800c30a:	2300      	movs	r3, #0
 800c30c:	602b      	str	r3, [r5, #0]
 800c30e:	89b3      	ldrh	r3, [r6, #12]
 800c310:	061a      	lsls	r2, r3, #24
 800c312:	d410      	bmi.n	800c336 <__swhatbuf_r+0x3e>
 800c314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c318:	e00e      	b.n	800c338 <__swhatbuf_r+0x40>
 800c31a:	466a      	mov	r2, sp
 800c31c:	f000 f858 	bl	800c3d0 <_fstat_r>
 800c320:	2800      	cmp	r0, #0
 800c322:	dbf2      	blt.n	800c30a <__swhatbuf_r+0x12>
 800c324:	9a01      	ldr	r2, [sp, #4]
 800c326:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c32a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c32e:	425a      	negs	r2, r3
 800c330:	415a      	adcs	r2, r3
 800c332:	602a      	str	r2, [r5, #0]
 800c334:	e7ee      	b.n	800c314 <__swhatbuf_r+0x1c>
 800c336:	2340      	movs	r3, #64	; 0x40
 800c338:	2000      	movs	r0, #0
 800c33a:	6023      	str	r3, [r4, #0]
 800c33c:	b016      	add	sp, #88	; 0x58
 800c33e:	bd70      	pop	{r4, r5, r6, pc}

0800c340 <__smakebuf_r>:
 800c340:	898b      	ldrh	r3, [r1, #12]
 800c342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c344:	079d      	lsls	r5, r3, #30
 800c346:	4606      	mov	r6, r0
 800c348:	460c      	mov	r4, r1
 800c34a:	d507      	bpl.n	800c35c <__smakebuf_r+0x1c>
 800c34c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	6123      	str	r3, [r4, #16]
 800c354:	2301      	movs	r3, #1
 800c356:	6163      	str	r3, [r4, #20]
 800c358:	b002      	add	sp, #8
 800c35a:	bd70      	pop	{r4, r5, r6, pc}
 800c35c:	ab01      	add	r3, sp, #4
 800c35e:	466a      	mov	r2, sp
 800c360:	f7ff ffca 	bl	800c2f8 <__swhatbuf_r>
 800c364:	9900      	ldr	r1, [sp, #0]
 800c366:	4605      	mov	r5, r0
 800c368:	4630      	mov	r0, r6
 800c36a:	f7fd fad7 	bl	800991c <_malloc_r>
 800c36e:	b948      	cbnz	r0, 800c384 <__smakebuf_r+0x44>
 800c370:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c374:	059a      	lsls	r2, r3, #22
 800c376:	d4ef      	bmi.n	800c358 <__smakebuf_r+0x18>
 800c378:	f023 0303 	bic.w	r3, r3, #3
 800c37c:	f043 0302 	orr.w	r3, r3, #2
 800c380:	81a3      	strh	r3, [r4, #12]
 800c382:	e7e3      	b.n	800c34c <__smakebuf_r+0xc>
 800c384:	4b0d      	ldr	r3, [pc, #52]	; (800c3bc <__smakebuf_r+0x7c>)
 800c386:	62b3      	str	r3, [r6, #40]	; 0x28
 800c388:	89a3      	ldrh	r3, [r4, #12]
 800c38a:	6020      	str	r0, [r4, #0]
 800c38c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c390:	81a3      	strh	r3, [r4, #12]
 800c392:	9b00      	ldr	r3, [sp, #0]
 800c394:	6163      	str	r3, [r4, #20]
 800c396:	9b01      	ldr	r3, [sp, #4]
 800c398:	6120      	str	r0, [r4, #16]
 800c39a:	b15b      	cbz	r3, 800c3b4 <__smakebuf_r+0x74>
 800c39c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3a0:	4630      	mov	r0, r6
 800c3a2:	f000 f827 	bl	800c3f4 <_isatty_r>
 800c3a6:	b128      	cbz	r0, 800c3b4 <__smakebuf_r+0x74>
 800c3a8:	89a3      	ldrh	r3, [r4, #12]
 800c3aa:	f023 0303 	bic.w	r3, r3, #3
 800c3ae:	f043 0301 	orr.w	r3, r3, #1
 800c3b2:	81a3      	strh	r3, [r4, #12]
 800c3b4:	89a0      	ldrh	r0, [r4, #12]
 800c3b6:	4305      	orrs	r5, r0
 800c3b8:	81a5      	strh	r5, [r4, #12]
 800c3ba:	e7cd      	b.n	800c358 <__smakebuf_r+0x18>
 800c3bc:	08009619 	.word	0x08009619

0800c3c0 <_malloc_usable_size_r>:
 800c3c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3c4:	1f18      	subs	r0, r3, #4
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	bfbc      	itt	lt
 800c3ca:	580b      	ldrlt	r3, [r1, r0]
 800c3cc:	18c0      	addlt	r0, r0, r3
 800c3ce:	4770      	bx	lr

0800c3d0 <_fstat_r>:
 800c3d0:	b538      	push	{r3, r4, r5, lr}
 800c3d2:	4d07      	ldr	r5, [pc, #28]	; (800c3f0 <_fstat_r+0x20>)
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	4604      	mov	r4, r0
 800c3d8:	4608      	mov	r0, r1
 800c3da:	4611      	mov	r1, r2
 800c3dc:	602b      	str	r3, [r5, #0]
 800c3de:	f7f5 fa32 	bl	8001846 <_fstat>
 800c3e2:	1c43      	adds	r3, r0, #1
 800c3e4:	d102      	bne.n	800c3ec <_fstat_r+0x1c>
 800c3e6:	682b      	ldr	r3, [r5, #0]
 800c3e8:	b103      	cbz	r3, 800c3ec <_fstat_r+0x1c>
 800c3ea:	6023      	str	r3, [r4, #0]
 800c3ec:	bd38      	pop	{r3, r4, r5, pc}
 800c3ee:	bf00      	nop
 800c3f0:	20005440 	.word	0x20005440

0800c3f4 <_isatty_r>:
 800c3f4:	b538      	push	{r3, r4, r5, lr}
 800c3f6:	4d06      	ldr	r5, [pc, #24]	; (800c410 <_isatty_r+0x1c>)
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	4608      	mov	r0, r1
 800c3fe:	602b      	str	r3, [r5, #0]
 800c400:	f7f5 fa31 	bl	8001866 <_isatty>
 800c404:	1c43      	adds	r3, r0, #1
 800c406:	d102      	bne.n	800c40e <_isatty_r+0x1a>
 800c408:	682b      	ldr	r3, [r5, #0]
 800c40a:	b103      	cbz	r3, 800c40e <_isatty_r+0x1a>
 800c40c:	6023      	str	r3, [r4, #0]
 800c40e:	bd38      	pop	{r3, r4, r5, pc}
 800c410:	20005440 	.word	0x20005440

0800c414 <_init>:
 800c414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c416:	bf00      	nop
 800c418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c41a:	bc08      	pop	{r3}
 800c41c:	469e      	mov	lr, r3
 800c41e:	4770      	bx	lr

0800c420 <_fini>:
 800c420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c422:	bf00      	nop
 800c424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c426:	bc08      	pop	{r3}
 800c428:	469e      	mov	lr, r3
 800c42a:	4770      	bx	lr
