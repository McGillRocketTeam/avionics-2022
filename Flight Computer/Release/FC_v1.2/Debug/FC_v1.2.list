
FC_v1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffc4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000016d8  08010198  08010198  00020198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011870  08011870  00030254  2**0
                  CONTENTS
  4 .ARM          00000008  08011870  08011870  00021870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011878  08011878  00030254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08011878  08011878  00021878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011880  08011880  00021880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  08011884  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e48  20000254  08011ad8  00030254  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000509c  08011ad8  0003509c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 12 .debug_info   00043940  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006013  00000000  00000000  00073bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028d0  00000000  00000000  00079bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002740  00000000  00000000  0007c4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ae47  00000000  00000000  0007ebe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002927e  00000000  00000000  00089a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2f05  00000000  00000000  000b2cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a5bb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c8f8  00000000  00000000  001a5c08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000254 	.word	0x20000254
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801017c 	.word	0x0801017c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000258 	.word	0x20000258
 800020c:	0801017c 	.word	0x0801017c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295
 8000c26:	f000 b9b9 	b.w	8000f9c <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f84d 	bl	8000cd8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f840 	bl	8000cd8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f82f 	bl	8000cd8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f821 	bl	8000cd8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96e 	b.w	8000f9c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8083 	bne.w	8000dee <__udivmoddi4+0x116>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d947      	bls.n	8000d7e <__udivmoddi4+0xa6>
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b142      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	f1c2 0020 	rsb	r0, r2, #32
 8000cf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	4097      	lsls	r7, r2
 8000d00:	ea40 0c01 	orr.w	ip, r0, r1
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d10:	fa1f fe87 	uxth.w	lr, r7
 8000d14:	fb08 c116 	mls	r1, r8, r6, ip
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 8119 	bcs.w	8000f60 <__udivmoddi4+0x288>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8116 	bls.w	8000f60 <__udivmoddi4+0x288>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8105 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f240 8102 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d60:	3802      	subs	r0, #2
 8000d62:	443c      	add	r4, r7
 8000d64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	b902      	cbnz	r2, 8000d82 <__udivmoddi4+0xaa>
 8000d80:	deff      	udf	#255	; 0xff
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d150      	bne.n	8000e2c <__udivmoddi4+0x154>
 8000d8a:	1bcb      	subs	r3, r1, r7
 8000d8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d90:	fa1f f887 	uxth.w	r8, r7
 8000d94:	2601      	movs	r6, #1
 8000d96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d9a:	0c21      	lsrs	r1, r4, #16
 8000d9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb08 f30c 	mul.w	r3, r8, ip
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0xe2>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	f200 80e9 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x10c>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x10a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80d9 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e7bf      	b.n	8000d6e <__udivmoddi4+0x96>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0x12e>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80b1 	beq.w	8000f5a <__udivmoddi4+0x282>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x1cc>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0x140>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80b8 	bhi.w	8000f88 <__udivmoddi4+0x2b0>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	468c      	mov	ip, r1
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0a8      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000e26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f603 	lsr.w	r6, r0, r3
 8000e34:	4097      	lsls	r7, r2
 8000e36:	fa01 f002 	lsl.w	r0, r1, r2
 8000e3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3e:	40d9      	lsrs	r1, r3
 8000e40:	4330      	orrs	r0, r6
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e48:	fa1f f887 	uxth.w	r8, r7
 8000e4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e54:	fb06 f108 	mul.w	r1, r6, r8
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x19c>
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e66:	f080 808d 	bcs.w	8000f84 <__udivmoddi4+0x2ac>
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	f240 808a 	bls.w	8000f84 <__udivmoddi4+0x2ac>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	443b      	add	r3, r7
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b281      	uxth	r1, r0
 8000e78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e84:	fb00 f308 	mul.w	r3, r0, r8
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x1c4>
 8000e8c:	1879      	adds	r1, r7, r1
 8000e8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e92:	d273      	bcs.n	8000f7c <__udivmoddi4+0x2a4>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d971      	bls.n	8000f7c <__udivmoddi4+0x2a4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4439      	add	r1, r7
 8000e9c:	1acb      	subs	r3, r1, r3
 8000e9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ea2:	e778      	b.n	8000d96 <__udivmoddi4+0xbe>
 8000ea4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ea8:	fa03 f406 	lsl.w	r4, r3, r6
 8000eac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eb0:	431c      	orrs	r4, r3
 8000eb2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ebe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	0c3b      	lsrs	r3, r7, #16
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fa1f f884 	uxth.w	r8, r4
 8000ece:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ed6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eda:	458a      	cmp	sl, r1
 8000edc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x220>
 8000ee6:	1861      	adds	r1, r4, r1
 8000ee8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eec:	d248      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000eee:	458a      	cmp	sl, r1
 8000ef0:	d946      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000ef2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef6:	4421      	add	r1, r4
 8000ef8:	eba1 010a 	sub.w	r1, r1, sl
 8000efc:	b2bf      	uxth	r7, r7
 8000efe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f0a:	fb00 f808 	mul.w	r8, r0, r8
 8000f0e:	45b8      	cmp	r8, r7
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x24a>
 8000f12:	19e7      	adds	r7, r4, r7
 8000f14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f18:	d22e      	bcs.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1a:	45b8      	cmp	r8, r7
 8000f1c:	d92c      	bls.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4427      	add	r7, r4
 8000f22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f26:	eba7 0708 	sub.w	r7, r7, r8
 8000f2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2e:	454f      	cmp	r7, r9
 8000f30:	46c6      	mov	lr, r8
 8000f32:	4649      	mov	r1, r9
 8000f34:	d31a      	bcc.n	8000f6c <__udivmoddi4+0x294>
 8000f36:	d017      	beq.n	8000f68 <__udivmoddi4+0x290>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x27a>
 8000f3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f46:	40f2      	lsrs	r2, r6
 8000f48:	ea4c 0202 	orr.w	r2, ip, r2
 8000f4c:	40f7      	lsrs	r7, r6
 8000f4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f52:	2600      	movs	r6, #0
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e70b      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6fd      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f68:	4543      	cmp	r3, r8
 8000f6a:	d2e5      	bcs.n	8000f38 <__udivmoddi4+0x260>
 8000f6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f70:	eb69 0104 	sbc.w	r1, r9, r4
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7df      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e7d2      	b.n	8000f22 <__udivmoddi4+0x24a>
 8000f7c:	4660      	mov	r0, ip
 8000f7e:	e78d      	b.n	8000e9c <__udivmoddi4+0x1c4>
 8000f80:	4681      	mov	r9, r0
 8000f82:	e7b9      	b.n	8000ef8 <__udivmoddi4+0x220>
 8000f84:	4666      	mov	r6, ip
 8000f86:	e775      	b.n	8000e74 <__udivmoddi4+0x19c>
 8000f88:	4630      	mov	r0, r6
 8000f8a:	e74a      	b.n	8000e22 <__udivmoddi4+0x14a>
 8000f8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f90:	4439      	add	r1, r7
 8000f92:	e713      	b.n	8000dbc <__udivmoddi4+0xe4>
 8000f94:	3802      	subs	r0, #2
 8000f96:	443c      	add	r4, r7
 8000f98:	e724      	b.n	8000de4 <__udivmoddi4+0x10c>
 8000f9a:	bf00      	nop

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	b0a3      	sub	sp, #140	; 0x8c
 8000fa4:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa6:	f003 ff29 	bl	8004dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000faa:	f000 f89b 	bl	80010e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fae:	f000 f9e1 	bl	8001374 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fb2:	f000 f8fb 	bl	80011ac <MX_I2C1_Init>
  MX_RTC_Init();
 8000fb6:	f000 f927 	bl	8001208 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000fba:	f000 f9b1 	bl	8001320 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  checkForI2CDevices(huart3,hi2c1);
 8000fbe:	4e38      	ldr	r6, [pc, #224]	; (80010a0 <main+0x100>)
 8000fc0:	4a38      	ldr	r2, [pc, #224]	; (80010a4 <main+0x104>)
 8000fc2:	ab0d      	add	r3, sp, #52	; 0x34
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	2254      	movs	r2, #84	; 0x54
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f00b f827 	bl	800c01c <memcpy>
 8000fce:	466d      	mov	r5, sp
 8000fd0:	f106 0410 	add.w	r4, r6, #16
 8000fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe0:	6823      	ldr	r3, [r4, #0]
 8000fe2:	602b      	str	r3, [r5, #0]
 8000fe4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000fe8:	f000 fef6 	bl	8001dd8 <checkForI2CDevices>

  /*
   * For Iridium:
   * -Set the project as c++
   */
   wakingUp = MRT_Static_Iridium_Setup(huart3);
 8000fec:	4e2c      	ldr	r6, [pc, #176]	; (80010a0 <main+0x100>)
 8000fee:	466d      	mov	r5, sp
 8000ff0:	f106 0410 	add.w	r4, r6, #16
 8000ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	602b      	str	r3, [r5, #0]
 8001004:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001008:	f003 f812 	bl	8004030 <MRT_Static_Iridium_Setup>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf14      	ite	ne
 8001012:	2301      	movne	r3, #1
 8001014:	2300      	moveq	r3, #0
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <main+0x108>)
 800101a:	701a      	strb	r2, [r3, #0]

  /*
   * For ISM330DLC
   *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
   */
   setup(&dev_ctx);
 800101c:	4823      	ldr	r0, [pc, #140]	; (80010ac <main+0x10c>)
 800101e:	f000 f9f9 	bl	8001414 <setup>
   * -Define what you want in the alarms callback functions (check the .h file)
   * -(Optional) Setup alarm A and the clock time in .ioc
   * The rest have been taken care of
   * You can access the flag of both alarm A and B with the variables flagA and flagB
   */
  MRT_SetupRTOS(huart3,10);
 8001022:	4e1f      	ldr	r6, [pc, #124]	; (80010a0 <main+0x100>)
 8001024:	230a      	movs	r3, #10
 8001026:	930d      	str	r3, [sp, #52]	; 0x34
 8001028:	466d      	mov	r5, sp
 800102a:	f106 0410 	add.w	r4, r6, #16
 800102e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	602b      	str	r3, [r5, #0]
 800103e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001042:	f003 fdb9 	bl	8004bb8 <MRT_SetupRTOS>

  HAL_UART_Transmit(&huart3,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	2213      	movs	r2, #19
 800104c:	4918      	ldr	r1, [pc, #96]	; (80010b0 <main+0x110>)
 800104e:	4814      	ldr	r0, [pc, #80]	; (80010a0 <main+0x100>)
 8001050:	f007 fc3f 	bl	80088d2 <HAL_UART_Transmit>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001054:	f007 ff4a 	bl	8008eec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 8001058:	4a16      	ldr	r2, [pc, #88]	; (80010b4 <main+0x114>)
 800105a:	2100      	movs	r1, #0
 800105c:	4816      	ldr	r0, [pc, #88]	; (80010b8 <main+0x118>)
 800105e:	f007 ff8f 	bl	8008f80 <osThreadNew>
 8001062:	4603      	mov	r3, r0
 8001064:	4a15      	ldr	r2, [pc, #84]	; (80010bc <main+0x11c>)
 8001066:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 8001068:	4a15      	ldr	r2, [pc, #84]	; (80010c0 <main+0x120>)
 800106a:	2100      	movs	r1, #0
 800106c:	4815      	ldr	r0, [pc, #84]	; (80010c4 <main+0x124>)
 800106e:	f007 ff87 	bl	8008f80 <osThreadNew>
 8001072:	4603      	mov	r3, r0
 8001074:	4a14      	ldr	r2, [pc, #80]	; (80010c8 <main+0x128>)
 8001076:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 8001078:	4a14      	ldr	r2, [pc, #80]	; (80010cc <main+0x12c>)
 800107a:	2100      	movs	r1, #0
 800107c:	4814      	ldr	r0, [pc, #80]	; (80010d0 <main+0x130>)
 800107e:	f007 ff7f 	bl	8008f80 <osThreadNew>
 8001082:	4603      	mov	r3, r0
 8001084:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <main+0x134>)
 8001086:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion0 */
  Propulsion0Handle = osThreadNew(StartPropulsion0, NULL, &Propulsion0_attributes);
 8001088:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <main+0x138>)
 800108a:	2100      	movs	r1, #0
 800108c:	4813      	ldr	r0, [pc, #76]	; (80010dc <main+0x13c>)
 800108e:	f007 ff77 	bl	8008f80 <osThreadNew>
 8001092:	4603      	mov	r3, r0
 8001094:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <main+0x140>)
 8001096:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001098:	f007 ff4c 	bl	8008f34 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800109c:	e7fe      	b.n	800109c <main+0xfc>
 800109e:	bf00      	nop
 80010a0:	20004ed8 	.word	0x20004ed8
 80010a4:	20004f2c 	.word	0x20004f2c
 80010a8:	20004ed4 	.word	0x20004ed4
 80010ac:	20004ec8 	.word	0x20004ec8
 80010b0:	080101c8 	.word	0x080101c8
 80010b4:	08011210 	.word	0x08011210
 80010b8:	08001651 	.word	0x08001651
 80010bc:	20004fac 	.word	0x20004fac
 80010c0:	08011234 	.word	0x08011234
 80010c4:	08001831 	.word	0x08001831
 80010c8:	20004fb0 	.word	0x20004fb0
 80010cc:	08011258 	.word	0x08011258
 80010d0:	080018a9 	.word	0x080018a9
 80010d4:	20004fb4 	.word	0x20004fb4
 80010d8:	0801127c 	.word	0x0801127c
 80010dc:	080018b5 	.word	0x080018b5
 80010e0:	20004f84 	.word	0x20004f84

080010e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b094      	sub	sp, #80	; 0x50
 80010e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	2234      	movs	r2, #52	; 0x34
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f00a ffba 	bl	800c06c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	4b25      	ldr	r3, [pc, #148]	; (80011a4 <SystemClock_Config+0xc0>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	4a24      	ldr	r2, [pc, #144]	; (80011a4 <SystemClock_Config+0xc0>)
 8001112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001116:	6413      	str	r3, [r2, #64]	; 0x40
 8001118:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <SystemClock_Config+0xc0>)
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001124:	2300      	movs	r3, #0
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	4b1f      	ldr	r3, [pc, #124]	; (80011a8 <SystemClock_Config+0xc4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001130:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <SystemClock_Config+0xc4>)
 8001132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <SystemClock_Config+0xc4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001144:	230a      	movs	r3, #10
 8001146:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001148:	2300      	movs	r3, #0
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114c:	2301      	movs	r3, #1
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001150:	2310      	movs	r3, #16
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001154:	2301      	movs	r3, #1
 8001156:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001158:	2300      	movs	r3, #0
 800115a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800115c:	f107 031c 	add.w	r3, r7, #28
 8001160:	4618      	mov	r0, r3
 8001162:	f006 f915 	bl	8007390 <HAL_RCC_OscConfig>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800116c:	f000 fbba 	bl	80018e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001170:	230f      	movs	r3, #15
 8001172:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800117c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001180:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f005 fad7 	bl	8006740 <HAL_RCC_ClockConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001198:	f000 fba4 	bl	80018e4 <Error_Handler>
  }
}
 800119c:	bf00      	nop
 800119e:	3750      	adds	r7, #80	; 0x50
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40007000 	.word	0x40007000

080011ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_I2C1_Init+0x50>)
 80011b2:	4a13      	ldr	r2, [pc, #76]	; (8001200 <MX_I2C1_Init+0x54>)
 80011b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <MX_I2C1_Init+0x50>)
 80011b8:	4a12      	ldr	r2, [pc, #72]	; (8001204 <MX_I2C1_Init+0x58>)
 80011ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_I2C1_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	; (80011fc <MX_I2C1_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <MX_I2C1_Init+0x50>)
 80011ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <MX_I2C1_Init+0x50>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <MX_I2C1_Init+0x50>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011dc:	4b07      	ldr	r3, [pc, #28]	; (80011fc <MX_I2C1_Init+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <MX_I2C1_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e8:	4804      	ldr	r0, [pc, #16]	; (80011fc <MX_I2C1_Init+0x50>)
 80011ea:	f004 f947 	bl	800547c <HAL_I2C_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011f4:	f000 fb76 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20004f2c 	.word	0x20004f2c
 8001200:	40005400 	.word	0x40005400
 8001204:	000186a0 	.word	0x000186a0

08001208 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b090      	sub	sp, #64	; 0x40
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800120e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800121e:	2300      	movs	r3, #0
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001222:	463b      	mov	r3, r7
 8001224:	2228      	movs	r2, #40	; 0x28
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f00a ff1f 	bl	800c06c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800122e:	4b3a      	ldr	r3, [pc, #232]	; (8001318 <MX_RTC_Init+0x110>)
 8001230:	4a3a      	ldr	r2, [pc, #232]	; (800131c <MX_RTC_Init+0x114>)
 8001232:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001234:	4b38      	ldr	r3, [pc, #224]	; (8001318 <MX_RTC_Init+0x110>)
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800123a:	4b37      	ldr	r3, [pc, #220]	; (8001318 <MX_RTC_Init+0x110>)
 800123c:	227f      	movs	r2, #127	; 0x7f
 800123e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001240:	4b35      	ldr	r3, [pc, #212]	; (8001318 <MX_RTC_Init+0x110>)
 8001242:	22ff      	movs	r2, #255	; 0xff
 8001244:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001246:	4b34      	ldr	r3, [pc, #208]	; (8001318 <MX_RTC_Init+0x110>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800124c:	4b32      	ldr	r3, [pc, #200]	; (8001318 <MX_RTC_Init+0x110>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001252:	4b31      	ldr	r3, [pc, #196]	; (8001318 <MX_RTC_Init+0x110>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001258:	482f      	ldr	r0, [pc, #188]	; (8001318 <MX_RTC_Init+0x110>)
 800125a:	f006 fb37 	bl	80078cc <HAL_RTC_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001264:	f000 fb3e 	bl	80018e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001268:	2300      	movs	r3, #0
 800126a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800126e:	2300      	movs	r3, #0
 8001270:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001274:	2300      	movs	r3, #0
 8001276:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800127a:	2300      	movs	r3, #0
 800127c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800127e:	2300      	movs	r3, #0
 8001280:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001282:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001286:	2201      	movs	r2, #1
 8001288:	4619      	mov	r1, r3
 800128a:	4823      	ldr	r0, [pc, #140]	; (8001318 <MX_RTC_Init+0x110>)
 800128c:	f006 fbaf 	bl	80079ee <HAL_RTC_SetTime>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8001296:	f000 fb25 	bl	80018e4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800129a:	2301      	movs	r3, #1
 800129c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80012a0:	2301      	movs	r3, #1
 80012a2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80012a6:	2301      	movs	r3, #1
 80012a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80012b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b6:	2201      	movs	r2, #1
 80012b8:	4619      	mov	r1, r3
 80012ba:	4817      	ldr	r0, [pc, #92]	; (8001318 <MX_RTC_Init+0x110>)
 80012bc:	f006 fc54 	bl	8007b68 <HAL_RTC_SetDate>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80012c6:	f000 fb0d 	bl	80018e4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x30;
 80012d2:	2330      	movs	r3, #48	; 0x30
 80012d4:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80012ee:	2301      	movs	r3, #1
 80012f0:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80012f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80012fa:	463b      	mov	r3, r7
 80012fc:	2201      	movs	r2, #1
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_RTC_Init+0x110>)
 8001302:	f006 fcd9 	bl	8007cb8 <HAL_RTC_SetAlarm_IT>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800130c:	f000 faea 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	3740      	adds	r7, #64	; 0x40
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20004f8c 	.word	0x20004f8c
 800131c:	40002800 	.word	0x40002800

08001320 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_USART3_UART_Init+0x4c>)
 8001326:	4a12      	ldr	r2, [pc, #72]	; (8001370 <MX_USART3_UART_Init+0x50>)
 8001328:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <MX_USART3_UART_Init+0x4c>)
 800132c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001330:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_USART3_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_USART3_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_USART3_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_USART3_UART_Init+0x4c>)
 8001346:	220c      	movs	r2, #12
 8001348:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_USART3_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_USART3_UART_Init+0x4c>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_USART3_UART_Init+0x4c>)
 8001358:	f007 fa6e 	bl	8008838 <HAL_UART_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001362:	f000 fabf 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20004ed8 	.word	0x20004ed8
 8001370:	40004800 	.word	0x40004800

08001374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	4b1f      	ldr	r3, [pc, #124]	; (800140c <MX_GPIO_Init+0x98>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a1e      	ldr	r2, [pc, #120]	; (800140c <MX_GPIO_Init+0x98>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <MX_GPIO_Init+0x98>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <MX_GPIO_Init+0x98>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a17      	ldr	r2, [pc, #92]	; (800140c <MX_GPIO_Init+0x98>)
 80013b0:	f043 0308 	orr.w	r3, r3, #8
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <MX_GPIO_Init+0x98>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_GPIO_Init+0x98>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a10      	ldr	r2, [pc, #64]	; (800140c <MX_GPIO_Init+0x98>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_GPIO_Init+0x98>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILTIN_GPIO_Port, BUILTIN_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2120      	movs	r1, #32
 80013e2:	480b      	ldr	r0, [pc, #44]	; (8001410 <MX_GPIO_Init+0x9c>)
 80013e4:	f004 f830 	bl	8005448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUILTIN_Pin */
  GPIO_InitStruct.Pin = BUILTIN_Pin;
 80013e8:	2320      	movs	r3, #32
 80013ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUILTIN_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	4619      	mov	r1, r3
 80013fe:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_GPIO_Init+0x9c>)
 8001400:	f003 fe76 	bl	80050f0 <HAL_GPIO_Init>

}
 8001404:	bf00      	nop
 8001406:	3720      	adds	r7, #32
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	40020000 	.word	0x40020000

08001414 <setup>:

/* USER CODE BEGIN 4 */

void setup(stmdev_ctx_t *dev_ctx)
	{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart3,"LISM330DLC Setup Starts\n\r", 27, HAL_MAX_DELAY);
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
 8001420:	221b      	movs	r2, #27
 8001422:	492c      	ldr	r1, [pc, #176]	; (80014d4 <setup+0xc0>)
 8001424:	482c      	ldr	r0, [pc, #176]	; (80014d8 <setup+0xc4>)
 8001426:	f007 fa54 	bl	80088d2 <HAL_UART_Transmit>
	  /* Initialize mems driver interface */
	  dev_ctx->write_reg = write;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a2b      	ldr	r2, [pc, #172]	; (80014dc <setup+0xc8>)
 800142e:	601a      	str	r2, [r3, #0]
	  dev_ctx->read_reg = read;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a2b      	ldr	r2, [pc, #172]	; (80014e0 <setup+0xcc>)
 8001434:	605a      	str	r2, [r3, #4]
	  dev_ctx->handle = &SENSOR_BUS;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a2a      	ldr	r2, [pc, #168]	; (80014e4 <setup+0xd0>)
 800143a:	609a      	str	r2, [r3, #8]
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 800143c:	200a      	movs	r0, #10
 800143e:	f003 fd1f 	bl	8004e80 <HAL_Delay>
	  /* Check device ID */
	  ism330dlc_device_id_get(dev_ctx, &whoamI);
 8001442:	4929      	ldr	r1, [pc, #164]	; (80014e8 <setup+0xd4>)
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 fef4 	bl	8002232 <ism330dlc_device_id_get>

	  	  HAL_UART_Transmit(&huart3,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	2215      	movs	r2, #21
 8001450:	4926      	ldr	r1, [pc, #152]	; (80014ec <setup+0xd8>)
 8001452:	4821      	ldr	r0, [pc, #132]	; (80014d8 <setup+0xc4>)
 8001454:	f007 fa3d 	bl	80088d2 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3,whoamI, 2, HAL_MAX_DELAY);
		  HAL_UART_Transmit(&huart3,"\n\rProgram Terminated\n\r", 26, HAL_MAX_DELAY);
		  while(1);
	  }
	  */
	  	  HAL_UART_Transmit(&huart3,"OK\n\r", 6, HAL_MAX_DELAY);
 8001458:	f04f 33ff 	mov.w	r3, #4294967295
 800145c:	2206      	movs	r2, #6
 800145e:	4924      	ldr	r1, [pc, #144]	; (80014f0 <setup+0xdc>)
 8001460:	481d      	ldr	r0, [pc, #116]	; (80014d8 <setup+0xc4>)
 8001462:	f007 fa36 	bl	80088d2 <HAL_UART_Transmit>

	  /* Restore default configuration */
	  ism330dlc_reset_set(dev_ctx, PROPERTY_ENABLE);
 8001466:	2101      	movs	r1, #1
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fef3 	bl	8002254 <ism330dlc_reset_set>

	  do {
		ism330dlc_reset_get(dev_ctx, &rst);
 800146e:	4921      	ldr	r1, [pc, #132]	; (80014f4 <setup+0xe0>)
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 ff15 	bl	80022a0 <ism330dlc_reset_get>
	  } while (rst);
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <setup+0xe0>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f7      	bne.n	800146e <setup+0x5a>


	  /* Enable Block Data Update */
	    ism330dlc_block_data_update_set(dev_ctx, PROPERTY_ENABLE);
 800147e:	2101      	movs	r1, #1
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 fe31 	bl	80020e8 <ism330dlc_block_data_update_set>
	    /* Set Output Data Rate */
	    ism330dlc_xl_data_rate_set(dev_ctx, ISM330DLC_XL_ODR_12Hz5);
 8001486:	2101      	movs	r1, #1
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 fdbb 	bl	8002004 <ism330dlc_xl_data_rate_set>
	    ism330dlc_gy_data_rate_set(dev_ctx, ISM330DLC_GY_ODR_12Hz5);
 800148e:	2101      	movs	r1, #1
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 fe03 	bl	800209c <ism330dlc_gy_data_rate_set>
	    /* Set full scale */
	    ism330dlc_xl_full_scale_set(dev_ctx, ISM330DLC_2g);
 8001496:	2100      	movs	r1, #0
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 fd8d 	bl	8001fb8 <ism330dlc_xl_full_scale_set>
	    ism330dlc_gy_full_scale_set(dev_ctx, ISM330DLC_2000dps);
 800149e:	2106      	movs	r1, #6
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 fdd5 	bl	8002050 <ism330dlc_gy_full_scale_set>
	    /* Configure filtering chain(No aux interface) */
	    /* Accelerometer - analog filter */
	    ism330dlc_xl_filter_analog_set(dev_ctx, ISM330DLC_XL_ANA_BW_400Hz);
 80014a6:	2101      	movs	r1, #1
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 ff12 	bl	80022d2 <ism330dlc_xl_filter_analog_set>
	    /* Accelerometer - LPF1 path ( LPF2 not used )*/
	    //ism330dlc_xl_lp1_bandwidth_set(dev_ctx, ISM330DLC_XL_LP1_ODR_DIV_4);
	    /* Accelerometer - LPF1 + LPF2 path */
	    ism330dlc_xl_lp2_bandwidth_set(dev_ctx,
 80014ae:	2111      	movs	r1, #17
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 ff34 	bl	800231e <ism330dlc_xl_lp2_bandwidth_set>
	                                   ISM330DLC_XL_LOW_NOISE_LP_ODR_DIV_100);
	    /* Accelerometer - High Pass / Slope path */
	    //ism330dlc_xl_reference_mode_set(&dev_ctx, PROPERTY_DISABLE);
	    //ism330dlc_xl_hp_bandwidth_set(&dev_ctx, ISM330DLC_XL_HP_ODR_DIV_100);
	    /* Gyroscope - filtering chain */
	    ism330dlc_gy_band_pass_set(dev_ctx, ISM330DLC_HP_260mHz_LP1_STRONG);
 80014b6:	21a8      	movs	r1, #168	; 0xa8
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f000 ff67 	bl	800238c <ism330dlc_gy_band_pass_set>
	    HAL_UART_Transmit(&huart3,"LISM330DLC Setup Ends\n\r", 25, HAL_MAX_DELAY);
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	2219      	movs	r2, #25
 80014c4:	490c      	ldr	r1, [pc, #48]	; (80014f8 <setup+0xe4>)
 80014c6:	4804      	ldr	r0, [pc, #16]	; (80014d8 <setup+0xc4>)
 80014c8:	f007 fa03 	bl	80088d2 <HAL_UART_Transmit>
	}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	080101dc 	.word	0x080101dc
 80014d8:	20004ed8 	.word	0x20004ed8
 80014dc:	080015db 	.word	0x080015db
 80014e0:	08001615 	.word	0x08001615
 80014e4:	20004f2c 	.word	0x20004f2c
 80014e8:	20000270 	.word	0x20000270
 80014ec:	080101f8 	.word	0x080101f8
 80014f0:	08010210 	.word	0x08010210
 80014f4:	20000271 	.word	0x20000271
 80014f8:	08010218 	.word	0x08010218

080014fc <ISM330DLC_getAcceleration>:


			/*
			 * Get acceleration values
			 */
			void ISM330DLC_getAcceleration(int16_t data_raw_acceleration[3],float acceleration_mg[3],stmdev_ctx_t *dev_ctx){
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b087      	sub	sp, #28
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
					ism330dlc_reg_t reg; //For some reason, this one has to be in the loop
					ism330dlc_status_reg_get(dev_ctx, &reg.status_reg);
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	4619      	mov	r1, r3
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 fe10 	bl	8002134 <ism330dlc_status_reg_get>

					if (reg.status_reg.gda) {
 8001514:	7d3b      	ldrb	r3, [r7, #20]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d02e      	beq.n	800157e <ISM330DLC_getAcceleration+0x82>
					/* Read magnetic field data */
					memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001520:	2206      	movs	r2, #6
 8001522:	2100      	movs	r1, #0
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f00a fda1 	bl	800c06c <memset>
			        ism330dlc_acceleration_raw_get(dev_ctx, data_raw_acceleration);
 800152a:	68f9      	ldr	r1, [r7, #12]
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 fe35 	bl	800219c <ism330dlc_acceleration_raw_get>
			        acceleration_mg[0] = ism330dlc_from_fs2g_to_mg(
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001538:	4618      	mov	r0, r3
 800153a:	f000 fd09 	bl	8001f50 <ism330dlc_from_fs2g_to_mg>
 800153e:	eef0 7a40 	vmov.f32	s15, s0
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	edc3 7a00 	vstr	s15, [r3]
			                               data_raw_acceleration[0]);
			        acceleration_mg[1] = ism330dlc_from_fs2g_to_mg(
			                               data_raw_acceleration[1]);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	3302      	adds	r3, #2
			        acceleration_mg[1] = ism330dlc_from_fs2g_to_mg(
 800154c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	1d1c      	adds	r4, r3, #4
 8001554:	4610      	mov	r0, r2
 8001556:	f000 fcfb 	bl	8001f50 <ism330dlc_from_fs2g_to_mg>
 800155a:	eef0 7a40 	vmov.f32	s15, s0
 800155e:	edc4 7a00 	vstr	s15, [r4]
			        acceleration_mg[2] = ism330dlc_from_fs2g_to_mg(
			                               data_raw_acceleration[2]);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	3304      	adds	r3, #4
			        acceleration_mg[2] = ism330dlc_from_fs2g_to_mg(
 8001566:	f9b3 2000 	ldrsh.w	r2, [r3]
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	f103 0408 	add.w	r4, r3, #8
 8001570:	4610      	mov	r0, r2
 8001572:	f000 fced 	bl	8001f50 <ism330dlc_from_fs2g_to_mg>
 8001576:	eef0 7a40 	vmov.f32	s15, s0
 800157a:	edc4 7a00 	vstr	s15, [r4]
			      }

			}
 800157e:	bf00      	nop
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd90      	pop	{r4, r7, pc}

08001586 <ISM330DLC_getTemperature>:


			/*
			 * Get temperature value
			 */
			void ISM330DLC_getTemperature(int16_t data_raw_temperature[1],float temperature_degC[1],stmdev_ctx_t *dev_ctx){
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
				ism330dlc_reg_t reg; //For some reason, this one has to be in the loop
				ism330dlc_status_reg_get(dev_ctx, &reg.status_reg);
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4619      	mov	r1, r3
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 fdcb 	bl	8002134 <ism330dlc_status_reg_get>
				if (reg.status_reg.tda) {
 800159e:	7d3b      	ldrb	r3, [r7, #20]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d013      	beq.n	80015d2 <ISM330DLC_getTemperature+0x4c>
					//Read temperature data
					memset(data_raw_temperature, 0x00, sizeof(int16_t));
 80015aa:	2202      	movs	r2, #2
 80015ac:	2100      	movs	r1, #0
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f00a fd5c 	bl	800c06c <memset>
					ism330dlc_temperature_raw_get(dev_ctx, data_raw_temperature);
 80015b4:	68f9      	ldr	r1, [r7, #12]
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 fdcd 	bl	8002156 <ism330dlc_temperature_raw_get>
					temperature_degC[0] = ism330dlc_from_lsb_to_celsius(data_raw_temperature[0]);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 fcdc 	bl	8001f80 <ism330dlc_from_lsb_to_celsius>
 80015c8:	eef0 7a40 	vmov.f32	s15, s0
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	edc3 7a00 	vstr	s15, [r3]
				}
			}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b088      	sub	sp, #32
 80015de:	af04      	add	r7, sp, #16
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	461a      	mov	r2, r3
 80015e6:	460b      	mov	r3, r1
 80015e8:	72fb      	strb	r3, [r7, #11]
 80015ea:	4613      	mov	r3, r2
 80015ec:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, ISM330DLC_I2C_ADD_L, reg,
 80015ee:	7afb      	ldrb	r3, [r7, #11]
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f6:	9302      	str	r3, [sp, #8]
 80015f8:	893b      	ldrh	r3, [r7, #8]
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2301      	movs	r3, #1
 8001602:	21d5      	movs	r1, #213	; 0xd5
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f004 f87d 	bl	8005704 <HAL_I2C_Mem_Write>
                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
  return 0;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af04      	add	r7, sp, #16
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	607a      	str	r2, [r7, #4]
 800161e:	461a      	mov	r2, r3
 8001620:	460b      	mov	r3, r1
 8001622:	72fb      	strb	r3, [r7, #11]
 8001624:	4613      	mov	r3, r2
 8001626:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, ISM330DLC_I2C_ADD_L, reg,
 8001628:	7afb      	ldrb	r3, [r7, #11]
 800162a:	b29a      	uxth	r2, r3
 800162c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001630:	9302      	str	r3, [sp, #8]
 8001632:	893b      	ldrh	r3, [r7, #8]
 8001634:	9301      	str	r3, [sp, #4]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2301      	movs	r3, #1
 800163c:	21d5      	movs	r1, #213	; 0xd5
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f004 f95a 	bl	80058f8 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
	...

08001650 <StartEjection1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 8001650:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001654:	b088      	sub	sp, #32
 8001656:	af04      	add	r7, sp, #16
 8001658:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	//Add thread id to the list
	threadID[1]=osThreadGetId();
 800165a:	f007 fd23 	bl	80090a4 <osThreadGetId>
 800165e:	4603      	mov	r3, r0
 8001660:	4a60      	ldr	r2, [pc, #384]	; (80017e4 <StartEjection1+0x194>)
 8001662:	6053      	str	r3, [r2, #4]

	if (wakingUp) osThreadExit();
 8001664:	4b60      	ldr	r3, [pc, #384]	; (80017e8 <StartEjection1+0x198>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <StartEjection1+0x20>
 800166c:	f007 fd25 	bl	80090ba <osThreadExit>

	uint8_t pressure;
	uint8_t altitude;
	char* buffer = (char*) pvPortMalloc(TX_BUF_DIM);
 8001670:	2032      	movs	r0, #50	; 0x32
 8001672:	f00a f861 	bl	800b738 <pvPortMalloc>
 8001676:	60f8      	str	r0, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  sensorsPolling = true;
 8001678:	4b5c      	ldr	r3, [pc, #368]	; (80017ec <StartEjection1+0x19c>)
 800167a:	2201      	movs	r2, #1
 800167c:	701a      	strb	r2, [r3, #0]

	  //https://stackoverflow.com/questions/38782389/freertos-stm32-thread-memory-overflow-with-malloc
	  //https://nadler.com/embedded/newlibAndFreeRTOS.html


	  memset(buffer, 0, TX_BUF_DIM);
 800167e:	2232      	movs	r2, #50	; 0x32
 8001680:	2100      	movs	r1, #0
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f00a fcf2 	bl	800c06c <memset>
	  ISM330DLC_getTemperature(data_raw_temperature,temperature_degC,&dev_ctx);
 8001688:	4a59      	ldr	r2, [pc, #356]	; (80017f0 <StartEjection1+0x1a0>)
 800168a:	495a      	ldr	r1, [pc, #360]	; (80017f4 <StartEjection1+0x1a4>)
 800168c:	485a      	ldr	r0, [pc, #360]	; (80017f8 <StartEjection1+0x1a8>)
 800168e:	f7ff ff7a 	bl	8001586 <ISM330DLC_getTemperature>
	  sprintf((char *)buffer, "Temperature [degC]:%6.2f\r\n", temperature_degC[0] );sprintf((char *)buffer, "Temperature [degC]:%f\r\n", temperature_degC[0] );
 8001692:	4b58      	ldr	r3, [pc, #352]	; (80017f4 <StartEjection1+0x1a4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7fe ff86 	bl	80005a8 <__aeabi_f2d>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4956      	ldr	r1, [pc, #344]	; (80017fc <StartEjection1+0x1ac>)
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f00b fd3a 	bl	800d11c <siprintf>
 80016a8:	4b52      	ldr	r3, [pc, #328]	; (80017f4 <StartEjection1+0x1a4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff7b 	bl	80005a8 <__aeabi_f2d>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4952      	ldr	r1, [pc, #328]	; (8001800 <StartEjection1+0x1b0>)
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f00b fd2f 	bl	800d11c <siprintf>
	  HAL_UART_Transmit(&huart3, buffer, strlen(buffer), HAL_MAX_DELAY);
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f7fe fdb0 	bl	8000224 <strlen>
 80016c4:	4603      	mov	r3, r0
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
 80016cc:	68f9      	ldr	r1, [r7, #12]
 80016ce:	484d      	ldr	r0, [pc, #308]	; (8001804 <StartEjection1+0x1b4>)
 80016d0:	f007 f8ff 	bl	80088d2 <HAL_UART_Transmit>

	  pressure = ((uint8_t) temperature_degC[0]);
 80016d4:	4b47      	ldr	r3, [pc, #284]	; (80017f4 <StartEjection1+0x1a4>)
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016de:	edc7 7a00 	vstr	s15, [r7]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	72fb      	strb	r3, [r7, #11]

	  sensorsPolling = false;
 80016e6:	4b41      	ldr	r3, [pc, #260]	; (80017ec <StartEjection1+0x19c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]


	  if (MIN_APOGEE < pressure && MAX_APOGEE > pressure){
 80016ec:	4b46      	ldr	r3, [pc, #280]	; (8001808 <StartEjection1+0x1b8>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	7afa      	ldrb	r2, [r7, #11]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d971      	bls.n	80017da <StartEjection1+0x18a>
 80016f6:	4b45      	ldr	r3, [pc, #276]	; (800180c <StartEjection1+0x1bc>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	7afa      	ldrb	r2, [r7, #11]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d26c      	bcs.n	80017da <StartEjection1+0x18a>


		  //Eject drogue (PG11/PG12)
		  HAL_UART_Transmit(&huart3, "Eject Drogue\r\n", 15, HAL_MAX_DELAY);
 8001700:	f04f 33ff 	mov.w	r3, #4294967295
 8001704:	220f      	movs	r2, #15
 8001706:	4942      	ldr	r1, [pc, #264]	; (8001810 <StartEjection1+0x1c0>)
 8001708:	483e      	ldr	r0, [pc, #248]	; (8001804 <StartEjection1+0x1b4>)
 800170a:	f007 f8e2 	bl	80088d2 <HAL_UART_Transmit>


		  for(;;){

			  memset(buffer, 0, TX_BUF_DIM);
 800170e:	2232      	movs	r2, #50	; 0x32
 8001710:	2100      	movs	r1, #0
 8001712:	68f8      	ldr	r0, [r7, #12]
 8001714:	f00a fcaa 	bl	800c06c <memset>
			  ISM330DLC_getAcceleration(data_raw_acceleration,acceleration_mg,&dev_ctx);
 8001718:	4a35      	ldr	r2, [pc, #212]	; (80017f0 <StartEjection1+0x1a0>)
 800171a:	493e      	ldr	r1, [pc, #248]	; (8001814 <StartEjection1+0x1c4>)
 800171c:	483e      	ldr	r0, [pc, #248]	; (8001818 <StartEjection1+0x1c8>)
 800171e:	f7ff feed 	bl	80014fc <ISM330DLC_getAcceleration>
			  sprintf((char *)buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8001722:	4b3c      	ldr	r3, [pc, #240]	; (8001814 <StartEjection1+0x1c4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7fe ff3e 	bl	80005a8 <__aeabi_f2d>
 800172c:	4680      	mov	r8, r0
 800172e:	4689      	mov	r9, r1
 8001730:	4b38      	ldr	r3, [pc, #224]	; (8001814 <StartEjection1+0x1c4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe ff37 	bl	80005a8 <__aeabi_f2d>
 800173a:	4604      	mov	r4, r0
 800173c:	460d      	mov	r5, r1
 800173e:	4b35      	ldr	r3, [pc, #212]	; (8001814 <StartEjection1+0x1c4>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe ff30 	bl	80005a8 <__aeabi_f2d>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001750:	e9cd 4500 	strd	r4, r5, [sp]
 8001754:	4642      	mov	r2, r8
 8001756:	464b      	mov	r3, r9
 8001758:	4930      	ldr	r1, [pc, #192]	; (800181c <StartEjection1+0x1cc>)
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f00b fcde 	bl	800d11c <siprintf>
			  HAL_UART_Transmit(&huart3, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001760:	68f8      	ldr	r0, [r7, #12]
 8001762:	f7fe fd5f 	bl	8000224 <strlen>
 8001766:	4603      	mov	r3, r0
 8001768:	b29a      	uxth	r2, r3
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	68f9      	ldr	r1, [r7, #12]
 8001770:	4824      	ldr	r0, [pc, #144]	; (8001804 <StartEjection1+0x1b4>)
 8001772:	f007 f8ae 	bl	80088d2 <HAL_UART_Transmit>

			  altitude = acceleration_mg[0];
 8001776:	4b27      	ldr	r3, [pc, #156]	; (8001814 <StartEjection1+0x1c4>)
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001780:	edc7 7a00 	vstr	s15, [r7]
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	72bb      	strb	r3, [r7, #10]

			  //We reached main deployment altitude
			  if (altitude>DEPLOY_ALT_MIN && altitude<DEPLOY_ALT_MAX){
 8001788:	4b25      	ldr	r3, [pc, #148]	; (8001820 <StartEjection1+0x1d0>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	7aba      	ldrb	r2, [r7, #10]
 800178e:	429a      	cmp	r2, r3
 8001790:	d91f      	bls.n	80017d2 <StartEjection1+0x182>
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <StartEjection1+0x1d4>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	7aba      	ldrb	r2, [r7, #10]
 8001798:	429a      	cmp	r2, r3
 800179a:	d21a      	bcs.n	80017d2 <StartEjection1+0x182>

				  //Free buffer
				  vPortFree(buffer);
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f00a f897 	bl	800b8d0 <vPortFree>

				  //Eject main ()
				  HAL_UART_Transmit(&huart3, "Eject Main\r\n", 13, HAL_MAX_DELAY);
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	220d      	movs	r2, #13
 80017a8:	491f      	ldr	r1, [pc, #124]	; (8001828 <StartEjection1+0x1d8>)
 80017aa:	4816      	ldr	r0, [pc, #88]	; (8001804 <StartEjection1+0x1b4>)
 80017ac:	f007 f891 	bl	80088d2 <HAL_UART_Transmit>

				  for(;;){

					  sensorsPolling = true;
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <StartEjection1+0x19c>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
					  //Poll altitude
					  sensorsPolling = false;
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <StartEjection1+0x19c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	701a      	strb	r2, [r3, #0]

					  if (altitude < GROUND_LEVEL)  osThreadExit();
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <StartEjection1+0x1dc>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	7aba      	ldrb	r2, [r7, #10]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d201      	bcs.n	80017ca <StartEjection1+0x17a>
 80017c6:	f007 fc78 	bl	80090ba <osThreadExit>

					  osDelay(100);
 80017ca:	2064      	movs	r0, #100	; 0x64
 80017cc:	f007 fc7b 	bl	80090c6 <osDelay>
					  sensorsPolling = true;
 80017d0:	e7ee      	b.n	80017b0 <StartEjection1+0x160>
				  }
			  }

			  osDelay(100);
 80017d2:	2064      	movs	r0, #100	; 0x64
 80017d4:	f007 fc77 	bl	80090c6 <osDelay>
			  memset(buffer, 0, TX_BUF_DIM);
 80017d8:	e799      	b.n	800170e <StartEjection1+0xbe>
		  }
	  }

    osDelay(100);
 80017da:	2064      	movs	r0, #100	; 0x64
 80017dc:	f007 fc73 	bl	80090c6 <osDelay>
  {
 80017e0:	e74a      	b.n	8001678 <StartEjection1+0x28>
 80017e2:	bf00      	nop
 80017e4:	20004f1c 	.word	0x20004f1c
 80017e8:	20004ed4 	.word	0x20004ed4
 80017ec:	20004f88 	.word	0x20004f88
 80017f0:	20004ec8 	.word	0x20004ec8
 80017f4:	2000028c 	.word	0x2000028c
 80017f8:	20000288 	.word	0x20000288
 80017fc:	08010230 	.word	0x08010230
 8001800:	0801024c 	.word	0x0801024c
 8001804:	20004ed8 	.word	0x20004ed8
 8001808:	20000000 	.word	0x20000000
 800180c:	20000001 	.word	0x20000001
 8001810:	08010264 	.word	0x08010264
 8001814:	2000027c 	.word	0x2000027c
 8001818:	20000274 	.word	0x20000274
 800181c:	08010274 	.word	0x08010274
 8001820:	20000002 	.word	0x20000002
 8001824:	20000003 	.word	0x20000003
 8001828:	0801029c 	.word	0x0801029c
 800182c:	20000004 	.word	0x20000004

08001830 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadID[2]=osThreadGetId();
 8001838:	f007 fc34 	bl	80090a4 <osThreadGetId>
 800183c:	4603      	mov	r3, r0
 800183e:	4a14      	ldr	r2, [pc, #80]	; (8001890 <StartTelemetry2+0x60>)
 8001840:	6093      	str	r3, [r2, #8]

  /* Infinite loop */
  for(;;)
  {
	  //Poll sensor data in other thread
	  while(sensorsPolling){osDelay(1);}
 8001842:	e002      	b.n	800184a <StartTelemetry2+0x1a>
 8001844:	2001      	movs	r0, #1
 8001846:	f007 fc3e 	bl	80090c6 <osDelay>
 800184a:	4b12      	ldr	r3, [pc, #72]	; (8001894 <StartTelemetry2+0x64>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f8      	bne.n	8001844 <StartTelemetry2+0x14>
		  dataWriting = true;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <StartTelemetry2+0x68>)
 8001854:	2201      	movs	r2, #1
 8001856:	701a      	strb	r2, [r3, #0]


		  //Radio send

		  //Iridium send
		  MRT_Static_Iridium_getTime();
 8001858:	f002 fc2c 	bl	80040b4 <MRT_Static_Iridium_getTime>

		  //Check if it's sleep time
		  if (flagA==1){
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <StartTelemetry2+0x6c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d106      	bne.n	8001872 <StartTelemetry2+0x42>
			  MRT_Static_Iridium_Shutdown();
 8001864:	f002 fc0e 	bl	8004084 <MRT_Static_Iridium_Shutdown>

			  MRT_StandByMode(SLEEP_TIME);
 8001868:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <StartTelemetry2+0x70>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f003 fa7d 	bl	8004d6c <MRT_StandByMode>
		  }
		  dataWriting = false;
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <StartTelemetry2+0x68>)
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]

    osDelay(1000/DATA_FREQ);
 8001878:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <StartTelemetry2+0x74>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001882:	fb93 f3f2 	sdiv	r3, r3, r2
 8001886:	4618      	mov	r0, r3
 8001888:	f007 fc1d 	bl	80090c6 <osDelay>
	  while(sensorsPolling){osDelay(1);}
 800188c:	e7dd      	b.n	800184a <StartTelemetry2+0x1a>
 800188e:	bf00      	nop
 8001890:	20004f1c 	.word	0x20004f1c
 8001894:	20004f88 	.word	0x20004f88
 8001898:	20004f80 	.word	0x20004f80
 800189c:	200004c4 	.word	0x200004c4
 80018a0:	20000005 	.word	0x20000005
 80018a4:	20000006 	.word	0x20000006

080018a8 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	osThreadExit();
 80018b0:	f007 fc03 	bl	80090ba <osThreadExit>

080018b4 <StartPropulsion0>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion0 */
void StartPropulsion0(void *argument)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion0 */

	osThreadExit();
 80018bc:	f007 fbfd 	bl	80090ba <osThreadExit>

080018c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d101      	bne.n	80018d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018d2:	f003 fab5 	bl	8004e40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40001000 	.word	0x40001000

080018e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e8:	b672      	cpsid	i
}
 80018ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ec:	e7fe      	b.n	80018ec <Error_Handler+0x8>
	...

080018f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	4b12      	ldr	r3, [pc, #72]	; (8001944 <HAL_MspInit+0x54>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	4a11      	ldr	r2, [pc, #68]	; (8001944 <HAL_MspInit+0x54>)
 8001900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001904:	6453      	str	r3, [r2, #68]	; 0x44
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_MspInit+0x54>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190e:	607b      	str	r3, [r7, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	603b      	str	r3, [r7, #0]
 8001916:	4b0b      	ldr	r3, [pc, #44]	; (8001944 <HAL_MspInit+0x54>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <HAL_MspInit+0x54>)
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001920:	6413      	str	r3, [r2, #64]	; 0x40
 8001922:	4b08      	ldr	r3, [pc, #32]	; (8001944 <HAL_MspInit+0x54>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	210f      	movs	r1, #15
 8001932:	f06f 0001 	mvn.w	r0, #1
 8001936:	f003 fba3 	bl	8005080 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800

08001948 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a19      	ldr	r2, [pc, #100]	; (80019cc <HAL_I2C_MspInit+0x84>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d12c      	bne.n	80019c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <HAL_I2C_MspInit+0x88>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a17      	ldr	r2, [pc, #92]	; (80019d0 <HAL_I2C_MspInit+0x88>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_I2C_MspInit+0x88>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001986:	f44f 7340 	mov.w	r3, #768	; 0x300
 800198a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800198c:	2312      	movs	r3, #18
 800198e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	2303      	movs	r3, #3
 8001996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001998:	2304      	movs	r3, #4
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4619      	mov	r1, r3
 80019a2:	480c      	ldr	r0, [pc, #48]	; (80019d4 <HAL_I2C_MspInit+0x8c>)
 80019a4:	f003 fba4 	bl	80050f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_I2C_MspInit+0x88>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <HAL_I2C_MspInit+0x88>)
 80019b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019b6:	6413      	str	r3, [r2, #64]	; 0x40
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <HAL_I2C_MspInit+0x88>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019c4:	bf00      	nop
 80019c6:	3728      	adds	r7, #40	; 0x28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40005400 	.word	0x40005400
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40020400 	.word	0x40020400

080019d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b09a      	sub	sp, #104	; 0x68
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019e0:	f107 030c 	add.w	r3, r7, #12
 80019e4:	225c      	movs	r2, #92	; 0x5c
 80019e6:	2100      	movs	r1, #0
 80019e8:	4618      	mov	r0, r3
 80019ea:	f00a fb3f 	bl	800c06c <memset>
  if(hrtc->Instance==RTC)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a10      	ldr	r2, [pc, #64]	; (8001a34 <HAL_RTC_MspInit+0x5c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d119      	bne.n	8001a2c <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019f8:	2320      	movs	r3, #32
 80019fa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80019fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a00:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	4618      	mov	r0, r3
 8001a08:	f004 ffe6 	bl	80069d8 <HAL_RCCEx_PeriphCLKConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001a12:	f7ff ff67 	bl	80018e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <HAL_RTC_MspInit+0x60>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2105      	movs	r1, #5
 8001a20:	2029      	movs	r0, #41	; 0x29
 8001a22:	f003 fb2d 	bl	8005080 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001a26:	2029      	movs	r0, #41	; 0x29
 8001a28:	f003 fb46 	bl	80050b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a2c:	bf00      	nop
 8001a2e:	3768      	adds	r7, #104	; 0x68
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40002800 	.word	0x40002800
 8001a38:	42470e3c 	.word	0x42470e3c

08001a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a19      	ldr	r2, [pc, #100]	; (8001ac0 <HAL_UART_MspInit+0x84>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d12c      	bne.n	8001ab8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <HAL_UART_MspInit+0x88>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <HAL_UART_MspInit+0x88>)
 8001a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <HAL_UART_MspInit+0x88>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_UART_MspInit+0x88>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	4a10      	ldr	r2, [pc, #64]	; (8001ac4 <HAL_UART_MspInit+0x88>)
 8001a84:	f043 0308 	orr.w	r3, r3, #8
 8001a88:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_UART_MspInit+0x88>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001aa8:	2307      	movs	r3, #7
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <HAL_UART_MspInit+0x8c>)
 8001ab4:	f003 fb1c 	bl	80050f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ab8:	bf00      	nop
 8001aba:	3728      	adds	r7, #40	; 0x28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40004800 	.word	0x40004800
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020c00 	.word	0x40020c00

08001acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08c      	sub	sp, #48	; 0x30
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	2036      	movs	r0, #54	; 0x36
 8001ae2:	f003 facd 	bl	8005080 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001ae6:	2036      	movs	r0, #54	; 0x36
 8001ae8:	f003 fae6 	bl	80050b8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <HAL_InitTick+0xa4>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af4:	4a1e      	ldr	r2, [pc, #120]	; (8001b70 <HAL_InitTick+0xa4>)
 8001af6:	f043 0310 	orr.w	r3, r3, #16
 8001afa:	6413      	str	r3, [r2, #64]	; 0x40
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <HAL_InitTick+0xa4>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	f003 0310 	and.w	r3, r3, #16
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b08:	f107 0210 	add.w	r2, r7, #16
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f004 ff2e 	bl	8006974 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b18:	f004 ff04 	bl	8006924 <HAL_RCC_GetPCLK1Freq>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b24:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <HAL_InitTick+0xa8>)
 8001b26:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2a:	0c9b      	lsrs	r3, r3, #18
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <HAL_InitTick+0xac>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <HAL_InitTick+0xb0>)
 8001b34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <HAL_InitTick+0xac>)
 8001b38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b3c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b3e:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <HAL_InitTick+0xac>)
 8001b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b42:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <HAL_InitTick+0xac>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_InitTick+0xac>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b50:	4809      	ldr	r0, [pc, #36]	; (8001b78 <HAL_InitTick+0xac>)
 8001b52:	f006 fbc3 	bl	80082dc <HAL_TIM_Base_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d104      	bne.n	8001b66 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001b5c:	4806      	ldr	r0, [pc, #24]	; (8001b78 <HAL_InitTick+0xac>)
 8001b5e:	f006 fc17 	bl	8008390 <HAL_TIM_Base_Start_IT>
 8001b62:	4603      	mov	r3, r0
 8001b64:	e000      	b.n	8001b68 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3730      	adds	r7, #48	; 0x30
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40023800 	.word	0x40023800
 8001b74:	431bde83 	.word	0x431bde83
 8001b78:	20004fb8 	.word	0x20004fb8
 8001b7c:	40001000 	.word	0x40001000

08001b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <NMI_Handler+0x4>

08001b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <HardFault_Handler+0x4>

08001b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <MemManage_Handler+0x4>

08001b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <BusFault_Handler+0x4>

08001b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <UsageFault_Handler+0x4>

08001b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <RTC_Alarm_IRQHandler+0x10>)
 8001bb2:	f006 f9b9 	bl	8007f28 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20004f8c 	.word	0x20004f8c

08001bc0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <TIM6_DAC_IRQHandler+0x10>)
 8001bc6:	f006 fc53 	bl	8008470 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20004fb8 	.word	0x20004fb8

08001bd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
	return 1;
 8001bd8:	2301      	movs	r3, #1
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <_kill>:

int _kill(int pid, int sig)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bee:	f009 ffc3 	bl	800bb78 <__errno>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2216      	movs	r2, #22
 8001bf6:	601a      	str	r2, [r3, #0]
	return -1;
 8001bf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <_exit>:

void _exit (int status)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff ffe7 	bl	8001be4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c16:	e7fe      	b.n	8001c16 <_exit+0x12>

08001c18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	e00a      	b.n	8001c40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c2a:	f3af 8000 	nop.w
 8001c2e:	4601      	mov	r1, r0
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	1c5a      	adds	r2, r3, #1
 8001c34:	60ba      	str	r2, [r7, #8]
 8001c36:	b2ca      	uxtb	r2, r1
 8001c38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	dbf0      	blt.n	8001c2a <_read+0x12>
	}

return len;
 8001c48:	687b      	ldr	r3, [r7, #4]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	e009      	b.n	8001c78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	60ba      	str	r2, [r7, #8]
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	3301      	adds	r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	dbf1      	blt.n	8001c64 <_write+0x12>
	}
	return len;
 8001c80:	687b      	ldr	r3, [r7, #4]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <_close>:

int _close(int file)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
	return -1;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cb2:	605a      	str	r2, [r3, #4]
	return 0;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <_isatty>:

int _isatty(int file)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
	return 1;
 8001cca:	2301      	movs	r3, #1
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cfc:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <_sbrk+0x5c>)
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <_sbrk+0x60>)
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <_sbrk+0x64>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d102      	bne.n	8001d16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <_sbrk+0x64>)
 8001d12:	4a12      	ldr	r2, [pc, #72]	; (8001d5c <_sbrk+0x68>)
 8001d14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d16:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <_sbrk+0x64>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d207      	bcs.n	8001d34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d24:	f009 ff28 	bl	800bb78 <__errno>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	220c      	movs	r2, #12
 8001d2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d32:	e009      	b.n	8001d48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <_sbrk+0x64>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <_sbrk+0x64>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <_sbrk+0x64>)
 8001d44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d46:	68fb      	ldr	r3, [r7, #12]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20020000 	.word	0x20020000
 8001d54:	00000400 	.word	0x00000400
 8001d58:	20000294 	.word	0x20000294
 8001d5c:	200050a0 	.word	0x200050a0

08001d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <SystemInit+0x20>)
 8001d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d6a:	4a05      	ldr	r2, [pc, #20]	; (8001d80 <SystemInit+0x20>)
 8001d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dbc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d88:	480d      	ldr	r0, [pc, #52]	; (8001dc0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d8a:	490e      	ldr	r1, [pc, #56]	; (8001dc4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d8c:	4a0e      	ldr	r2, [pc, #56]	; (8001dc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d90:	e002      	b.n	8001d98 <LoopCopyDataInit>

08001d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d96:	3304      	adds	r3, #4

08001d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d9c:	d3f9      	bcc.n	8001d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9e:	4a0b      	ldr	r2, [pc, #44]	; (8001dcc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001da0:	4c0b      	ldr	r4, [pc, #44]	; (8001dd0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da4:	e001      	b.n	8001daa <LoopFillZerobss>

08001da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da8:	3204      	adds	r2, #4

08001daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dac:	d3fb      	bcc.n	8001da6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dae:	f7ff ffd7 	bl	8001d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001db2:	f009 ffdd 	bl	800bd70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001db6:	f7ff f8f3 	bl	8000fa0 <main>
  bx  lr    
 8001dba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc4:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8001dc8:	08011884 	.word	0x08011884
  ldr r2, =_sbss
 8001dcc:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8001dd0:	2000509c 	.word	0x2000509c

08001dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dd4:	e7fe      	b.n	8001dd4 <ADC_IRQHandler>
	...

08001dd8 <checkForI2CDevices>:
 *      Author: Jacoby
 */
#include <stm32f4xx_hal.h>


void checkForI2CDevices(UART_HandleTypeDef uart, I2C_HandleTypeDef I2C ){
 8001dd8:	b084      	sub	sp, #16
 8001dda:	b5b0      	push	{r4, r5, r7, lr}
 8001ddc:	b092      	sub	sp, #72	; 0x48
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001de4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t Buffer[25] = {0};
 8001de8:	2300      	movs	r3, #0
 8001dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
 8001dfc:	751a      	strb	r2, [r3, #20]
	uint8_t Space[] = " - ";
 8001dfe:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <checkForI2CDevices+0x108>)
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 8001e02:	4b38      	ldr	r3, [pc, #224]	; (8001ee4 <checkForI2CDevices+0x10c>)
 8001e04:	f107 040c 	add.w	r4, r7, #12
 8001e08:	461d      	mov	r5, r3
 8001e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e0e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e12:	c403      	stmia	r4!, {r0, r1}
 8001e14:	8022      	strh	r2, [r4, #0]
	uint8_t EndMSG[] = "Done! \r\n\r\n";
 8001e16:	4a34      	ldr	r2, [pc, #208]	; (8001ee8 <checkForI2CDevices+0x110>)
 8001e18:	463b      	mov	r3, r7
 8001e1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e1c:	c303      	stmia	r3!, {r0, r1}
 8001e1e:	801a      	strh	r2, [r3, #0]
 8001e20:	3302      	adds	r3, #2
 8001e22:	0c12      	lsrs	r2, r2, #16
 8001e24:	701a      	strb	r2, [r3, #0]

    uint8_t i = 0, ret;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    HAL_Delay(1000);
 8001e2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e30:	f003 f826 	bl	8004e80 <HAL_Delay>

    /*-[ I2C Bus Scanning ]-*/
    HAL_UART_Transmit(&uart, StartMSG, sizeof(StartMSG), HAL_MAX_DELAY);
 8001e34:	f107 010c 	add.w	r1, r7, #12
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3c:	221a      	movs	r2, #26
 8001e3e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001e42:	f006 fd46 	bl	80088d2 <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 8001e46:	2301      	movs	r3, #1
 8001e48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001e4c:	e035      	b.n	8001eba <checkForI2CDevices+0xe2>
    {
        ret = HAL_I2C_IsDeviceReady(&I2C, (uint16_t)(i<<1), 3, 5);
 8001e4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	b299      	uxth	r1, r3
 8001e58:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8001e5c:	2305      	movs	r3, #5
 8001e5e:	2203      	movs	r2, #3
 8001e60:	f003 ff70 	bl	8005d44 <HAL_I2C_IsDeviceReady>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        if (ret != HAL_OK) /* No ACK Received At That Address */
 8001e6a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <checkForI2CDevices+0xae>
        {
            HAL_UART_Transmit(&uart, Space, sizeof(Space), HAL_MAX_DELAY);
 8001e72:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7a:	2204      	movs	r2, #4
 8001e7c:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001e80:	f006 fd27 	bl	80088d2 <HAL_UART_Transmit>
 8001e84:	e014      	b.n	8001eb0 <checkForI2CDevices+0xd8>
        }
        else if(ret == HAL_OK)
 8001e86:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d110      	bne.n	8001eb0 <checkForI2CDevices+0xd8>
        {
            sprintf(Buffer, "0x%X", i);
 8001e8e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001e92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e96:	4915      	ldr	r1, [pc, #84]	; (8001eec <checkForI2CDevices+0x114>)
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f00b f93f 	bl	800d11c <siprintf>
            HAL_UART_Transmit(&uart, Buffer, sizeof(Buffer), HAL_MAX_DELAY);
 8001e9e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea6:	2219      	movs	r2, #25
 8001ea8:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001eac:	f006 fd11 	bl	80088d2 <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 8001eb0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001eba:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	dac5      	bge.n	8001e4e <checkForI2CDevices+0x76>
        }
    }
    HAL_UART_Transmit(&uart, EndMSG, sizeof(EndMSG), HAL_MAX_DELAY);
 8001ec2:	4639      	mov	r1, r7
 8001ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec8:	220b      	movs	r2, #11
 8001eca:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001ece:	f006 fd00 	bl	80088d2 <HAL_UART_Transmit>
    /*--[ Scanning Done ]--*/

}
 8001ed2:	bf00      	nop
 8001ed4:	3748      	adds	r7, #72	; 0x48
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001edc:	b004      	add	sp, #16
 8001ede:	4770      	bx	lr
 8001ee0:	00202d20 	.word	0x00202d20
 8001ee4:	080102b4 	.word	0x080102b4
 8001ee8:	080102d0 	.word	0x080102d0
 8001eec:	080102ac 	.word	0x080102ac

08001ef0 <ism330dlc_read_reg>:
  *
  */
int32_t ism330dlc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b087      	sub	sp, #28
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	461a      	mov	r2, r3
 8001efc:	460b      	mov	r3, r1
 8001efe:	72fb      	strb	r3, [r7, #11]
 8001f00:	4613      	mov	r3, r2
 8001f02:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	685c      	ldr	r4, [r3, #4]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6898      	ldr	r0, [r3, #8]
 8001f0c:	893b      	ldrh	r3, [r7, #8]
 8001f0e:	7af9      	ldrb	r1, [r7, #11]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	47a0      	blx	r4
 8001f14:	6178      	str	r0, [r7, #20]

  return ret;
 8001f16:	697b      	ldr	r3, [r7, #20]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	371c      	adds	r7, #28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd90      	pop	{r4, r7, pc}

08001f20 <ism330dlc_write_reg>:
  *
  */
int32_t ism330dlc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	72fb      	strb	r3, [r7, #11]
 8001f30:	4613      	mov	r3, r2
 8001f32:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681c      	ldr	r4, [r3, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6898      	ldr	r0, [r3, #8]
 8001f3c:	893b      	ldrh	r3, [r7, #8]
 8001f3e:	7af9      	ldrb	r1, [r7, #11]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	47a0      	blx	r4
 8001f44:	6178      	str	r0, [r7, #20]

  return ret;
 8001f46:	697b      	ldr	r3, [r7, #20]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd90      	pop	{r4, r7, pc}

08001f50 <ism330dlc_from_fs2g_to_mg>:
  * @{
  *
  */

float_t ism330dlc_from_fs2g_to_mg(int16_t lsb)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8001f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f5e:	ee07 3a90 	vmov	s15, r3
 8001f62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f66:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001f7c <ism330dlc_from_fs2g_to_mg+0x2c>
 8001f6a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	3d79db23 	.word	0x3d79db23

08001f80 <ism330dlc_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 70.0f);
}

float_t ism330dlc_from_lsb_to_celsius(int16_t lsb)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8001f8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f8e:	ee07 3a90 	vmov	s15, r3
 8001f92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f96:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001fb4 <ism330dlc_from_lsb_to_celsius+0x34>
 8001f9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f9e:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001fa2:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	43800000 	.word	0x43800000

08001fb8 <ism330dlc_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    ism330dlc_fs_xl_t val)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 8001fc4:	f107 0208 	add.w	r2, r7, #8
 8001fc8:	2301      	movs	r3, #1
 8001fca:	2110      	movs	r1, #16
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ff8f 	bl	8001ef0 <ism330dlc_read_reg>
 8001fd2:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10f      	bne.n	8001ffa <ism330dlc_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	7a3b      	ldrb	r3, [r7, #8]
 8001fe4:	f362 0383 	bfi	r3, r2, #2, #2
 8001fe8:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL1_XL,
 8001fea:	f107 0208 	add.w	r2, r7, #8
 8001fee:	2301      	movs	r3, #1
 8001ff0:	2110      	movs	r1, #16
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff ff94 	bl	8001f20 <ism330dlc_write_reg>
 8001ff8:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <ism330dlc_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   ism330dlc_odr_xl_t val)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 8002010:	f107 0208 	add.w	r2, r7, #8
 8002014:	2301      	movs	r3, #1
 8002016:	2110      	movs	r1, #16
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff ff69 	bl	8001ef0 <ism330dlc_read_reg>
 800201e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10f      	bne.n	8002046 <ism330dlc_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8002026:	78fb      	ldrb	r3, [r7, #3]
 8002028:	f003 030f 	and.w	r3, r3, #15
 800202c:	b2da      	uxtb	r2, r3
 800202e:	7a3b      	ldrb	r3, [r7, #8]
 8002030:	f362 1307 	bfi	r3, r2, #4, #4
 8002034:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL1_XL,
 8002036:	f107 0208 	add.w	r2, r7, #8
 800203a:	2301      	movs	r3, #1
 800203c:	2110      	movs	r1, #16
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ff6e 	bl	8001f20 <ism330dlc_write_reg>
 8002044:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8002046:	68fb      	ldr	r3, [r7, #12]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <ism330dlc_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_gy_full_scale_set(stmdev_ctx_t *ctx,
                                    ism330dlc_fs_g_t val)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800205c:	f107 0208 	add.w	r2, r7, #8
 8002060:	2301      	movs	r3, #1
 8002062:	2111      	movs	r1, #17
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff43 	bl	8001ef0 <ism330dlc_read_reg>
 800206a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10f      	bne.n	8002092 <ism330dlc_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	b2da      	uxtb	r2, r3
 800207a:	7a3b      	ldrb	r3, [r7, #8]
 800207c:	f362 0343 	bfi	r3, r2, #1, #3
 8002080:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002082:	f107 0208 	add.w	r2, r7, #8
 8002086:	2301      	movs	r3, #1
 8002088:	2111      	movs	r1, #17
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff ff48 	bl	8001f20 <ism330dlc_write_reg>
 8002090:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002092:	68fb      	ldr	r3, [r7, #12]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3710      	adds	r7, #16
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <ism330dlc_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_gy_data_rate_set(stmdev_ctx_t *ctx,
                                   ism330dlc_odr_g_t val)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80020a8:	f107 0208 	add.w	r2, r7, #8
 80020ac:	2301      	movs	r3, #1
 80020ae:	2111      	movs	r1, #17
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff1d 	bl	8001ef0 <ism330dlc_read_reg>
 80020b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10f      	bne.n	80020de <ism330dlc_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	f003 030f 	and.w	r3, r3, #15
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	7a3b      	ldrb	r3, [r7, #8]
 80020c8:	f362 1307 	bfi	r3, r2, #4, #4
 80020cc:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80020ce:	f107 0208 	add.w	r2, r7, #8
 80020d2:	2301      	movs	r3, #1
 80020d4:	2111      	movs	r1, #17
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff ff22 	bl	8001f20 <ism330dlc_write_reg>
 80020dc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80020de:	68fb      	ldr	r3, [r7, #12]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <ism330dlc_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_block_data_update_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	460b      	mov	r3, r1
 80020f2:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80020f4:	f107 0208 	add.w	r2, r7, #8
 80020f8:	2301      	movs	r3, #1
 80020fa:	2112      	movs	r1, #18
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff fef7 	bl	8001ef0 <ism330dlc_read_reg>
 8002102:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10f      	bne.n	800212a <ism330dlc_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	b2da      	uxtb	r2, r3
 8002112:	7a3b      	ldrb	r3, [r7, #8]
 8002114:	f362 1386 	bfi	r3, r2, #6, #1
 8002118:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800211a:	f107 0208 	add.w	r2, r7, #8
 800211e:	2301      	movs	r3, #1
 8002120:	2112      	movs	r1, #18
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff fefc 	bl	8001f20 <ism330dlc_write_reg>
 8002128:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800212a:	68fb      	ldr	r3, [r7, #12]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <ism330dlc_status_reg_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_status_reg_get(stmdev_ctx_t *ctx,
                                 ism330dlc_status_reg_t *val)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_STATUS_REG, (uint8_t *) val, 1);
 800213e:	2301      	movs	r3, #1
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	211e      	movs	r1, #30
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff fed3 	bl	8001ef0 <ism330dlc_read_reg>
 800214a:	60f8      	str	r0, [r7, #12]

  return ret;
 800214c:	68fb      	ldr	r3, [r7, #12]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <ism330dlc_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_OUT_TEMP_L, buff, 2);
 8002160:	f107 0208 	add.w	r2, r7, #8
 8002164:	2302      	movs	r3, #2
 8002166:	2120      	movs	r1, #32
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff fec1 	bl	8001ef0 <ism330dlc_read_reg>
 800216e:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8002170:	7a7b      	ldrb	r3, [r7, #9]
 8002172:	b21a      	sxth	r2, r3
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800217e:	b29b      	uxth	r3, r3
 8002180:	021b      	lsls	r3, r3, #8
 8002182:	b29a      	uxth	r2, r3
 8002184:	7a3b      	ldrb	r3, [r7, #8]
 8002186:	b29b      	uxth	r3, r3
 8002188:	4413      	add	r3, r2
 800218a:	b29b      	uxth	r3, r3
 800218c:	b21a      	sxth	r2, r3
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	801a      	strh	r2, [r3, #0]

  return ret;
 8002192:	68fb      	ldr	r3, [r7, #12]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <ism330dlc_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_OUTX_L_XL, buff, 6);
 80021a6:	f107 020c 	add.w	r2, r7, #12
 80021aa:	2306      	movs	r3, #6
 80021ac:	2128      	movs	r1, #40	; 0x28
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff fe9e 	bl	8001ef0 <ism330dlc_read_reg>
 80021b4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80021b6:	7b7b      	ldrb	r3, [r7, #13]
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	7b3b      	ldrb	r3, [r7, #12]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	b21a      	sxth	r2, r3
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80021d8:	7bfa      	ldrb	r2, [r7, #15]
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	3302      	adds	r3, #2
 80021de:	b212      	sxth	r2, r2
 80021e0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	3302      	adds	r3, #2
 80021e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	7bbb      	ldrb	r3, [r7, #14]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	4413      	add	r3, r2
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	3302      	adds	r3, #2
 80021fc:	b212      	sxth	r2, r2
 80021fe:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002200:	7c7a      	ldrb	r2, [r7, #17]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	3304      	adds	r3, #4
 8002206:	b212      	sxth	r2, r2
 8002208:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	3304      	adds	r3, #4
 800220e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002212:	b29b      	uxth	r3, r3
 8002214:	021b      	lsls	r3, r3, #8
 8002216:	b29a      	uxth	r2, r3
 8002218:	7c3b      	ldrb	r3, [r7, #16]
 800221a:	b29b      	uxth	r3, r3
 800221c:	4413      	add	r3, r2
 800221e:	b29a      	uxth	r2, r3
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	3304      	adds	r3, #4
 8002224:	b212      	sxth	r2, r2
 8002226:	801a      	strh	r2, [r3, #0]

  return ret;
 8002228:	697b      	ldr	r3, [r7, #20]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <ism330dlc_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_WHO_AM_I, buff, 1);
 800223c:	2301      	movs	r3, #1
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	210f      	movs	r1, #15
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff fe54 	bl	8001ef0 <ism330dlc_read_reg>
 8002248:	60f8      	str	r0, [r7, #12]

  return ret;
 800224a:	68fb      	ldr	r3, [r7, #12]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <ism330dlc_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	460b      	mov	r3, r1
 800225e:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002260:	f107 0208 	add.w	r2, r7, #8
 8002264:	2301      	movs	r3, #1
 8002266:	2112      	movs	r1, #18
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff fe41 	bl	8001ef0 <ism330dlc_read_reg>
 800226e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10f      	bne.n	8002296 <ism330dlc_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8002276:	78fb      	ldrb	r3, [r7, #3]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	b2da      	uxtb	r2, r3
 800227e:	7a3b      	ldrb	r3, [r7, #8]
 8002280:	f362 0300 	bfi	r3, r2, #0, #1
 8002284:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002286:	f107 0208 	add.w	r2, r7, #8
 800228a:	2301      	movs	r3, #1
 800228c:	2112      	movs	r1, #18
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff fe46 	bl	8001f20 <ism330dlc_write_reg>
 8002294:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002296:	68fb      	ldr	r3, [r7, #12]
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <ism330dlc_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  ism330dlc_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80022aa:	f107 0208 	add.w	r2, r7, #8
 80022ae:	2301      	movs	r3, #1
 80022b0:	2112      	movs	r1, #18
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff fe1c 	bl	8001ef0 <ism330dlc_read_reg>
 80022b8:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 80022ba:	7a3b      	ldrb	r3, [r7, #8]
 80022bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	701a      	strb	r2, [r3, #0]

  return ret;
 80022c8:	68fb      	ldr	r3, [r7, #12]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <ism330dlc_xl_filter_analog_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_filter_analog_set(stmdev_ctx_t *ctx,
                                       ism330dlc_bw0_xl_t val)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	460b      	mov	r3, r1
 80022dc:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 80022de:	f107 0208 	add.w	r2, r7, #8
 80022e2:	2301      	movs	r3, #1
 80022e4:	2110      	movs	r1, #16
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff fe02 	bl	8001ef0 <ism330dlc_read_reg>
 80022ec:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10f      	bne.n	8002314 <ism330dlc_xl_filter_analog_set+0x42>
  {
    ctrl1_xl.bw0_xl = (uint8_t) val;
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	b2da      	uxtb	r2, r3
 80022fc:	7a3b      	ldrb	r3, [r7, #8]
 80022fe:	f362 0300 	bfi	r3, r2, #0, #1
 8002302:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL1_XL,
 8002304:	f107 0208 	add.w	r2, r7, #8
 8002308:	2301      	movs	r3, #1
 800230a:	2110      	movs	r1, #16
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff fe07 	bl	8001f20 <ism330dlc_write_reg>
 8002312:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8002314:	68fb      	ldr	r3, [r7, #12]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <ism330dlc_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                       ism330dlc_input_composite_t val)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b084      	sub	sp, #16
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl8_xl_t ctrl8_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL8_XL,
 800232a:	f107 0208 	add.w	r2, r7, #8
 800232e:	2301      	movs	r3, #1
 8002330:	2117      	movs	r1, #23
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff fddc 	bl	8001ef0 <ism330dlc_read_reg>
 8002338:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl8_xl, 1);

  if (ret == 0)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d120      	bne.n	8002382 <ism330dlc_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	b2da      	uxtb	r2, r3
 800234a:	7a3b      	ldrb	r3, [r7, #8]
 800234c:	f362 03c3 	bfi	r3, r2, #3, #1
 8002350:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	b2da      	uxtb	r2, r3
 800235a:	7a3b      	ldrb	r3, [r7, #8]
 800235c:	f362 1346 	bfi	r3, r2, #5, #2
 8002360:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 8002362:	7a3b      	ldrb	r3, [r7, #8]
 8002364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002368:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 800236a:	7a3b      	ldrb	r3, [r7, #8]
 800236c:	f36f 0382 	bfc	r3, #2, #1
 8002370:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL8_XL,
 8002372:	f107 0208 	add.w	r2, r7, #8
 8002376:	2301      	movs	r3, #1
 8002378:	2117      	movs	r1, #23
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff fdd0 	bl	8001f20 <ism330dlc_write_reg>
 8002380:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 8002382:	68fb      	ldr	r3, [r7, #12]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <ism330dlc_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_gy_band_pass_set(stmdev_ctx_t *ctx,
                                   ism330dlc_lpf1_sel_g_t val)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl4_c_t ctrl4_c;
  ism330dlc_ctrl6_c_t ctrl6_c;
  ism330dlc_ctrl7_g_t ctrl7_g;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8002398:	f107 0208 	add.w	r2, r7, #8
 800239c:	2301      	movs	r3, #1
 800239e:	2116      	movs	r1, #22
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff fda5 	bl	8001ef0 <ism330dlc_read_reg>
 80023a6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d157      	bne.n	800245e <ism330dlc_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 80023ae:	78fb      	ldrb	r3, [r7, #3]
 80023b0:	091b      	lsrs	r3, r3, #4
 80023b2:	f003 0303 	and.w	r3, r3, #3
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	7a3b      	ldrb	r3, [r7, #8]
 80023ba:	f362 1305 	bfi	r3, r2, #4, #2
 80023be:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	09db      	lsrs	r3, r3, #7
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	7a3b      	ldrb	r3, [r7, #8]
 80023ce:	f362 1386 	bfi	r3, r2, #6, #1
 80023d2:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80023d4:	f107 0208 	add.w	r2, r7, #8
 80023d8:	2301      	movs	r3, #1
 80023da:	2116      	movs	r1, #22
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff fd9f 	bl	8001f20 <ism330dlc_write_reg>
 80023e2:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d139      	bne.n	800245e <ism330dlc_gy_band_pass_set+0xd2>
    {
      ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 80023ea:	f107 020c 	add.w	r2, r7, #12
 80023ee:	2301      	movs	r3, #1
 80023f0:	2115      	movs	r1, #21
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff fd7c 	bl	8001ef0 <ism330dlc_read_reg>
 80023f8:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d12e      	bne.n	800245e <ism330dlc_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	b2da      	uxtb	r2, r3
 8002408:	7b3b      	ldrb	r3, [r7, #12]
 800240a:	f362 0301 	bfi	r3, r2, #0, #2
 800240e:	733b      	strb	r3, [r7, #12]
        ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL6_C,
 8002410:	f107 020c 	add.w	r2, r7, #12
 8002414:	2301      	movs	r3, #1
 8002416:	2115      	movs	r1, #21
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff fd81 	bl	8001f20 <ism330dlc_write_reg>
 800241e:	6178      	str	r0, [r7, #20]
                                  (uint8_t *)&ctrl6_c, 1);

        if (ret == 0)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d11b      	bne.n	800245e <ism330dlc_gy_band_pass_set+0xd2>
        {
          ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL4_C,
 8002426:	f107 0210 	add.w	r2, r7, #16
 800242a:	2301      	movs	r3, #1
 800242c:	2113      	movs	r1, #19
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff fd5e 	bl	8001ef0 <ism330dlc_read_reg>
 8002434:	6178      	str	r0, [r7, #20]
                                   (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d110      	bne.n	800245e <ism330dlc_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	08db      	lsrs	r3, r3, #3
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	b2da      	uxtb	r2, r3
 8002446:	7c3b      	ldrb	r3, [r7, #16]
 8002448:	f362 0341 	bfi	r3, r2, #1, #1
 800244c:	743b      	strb	r3, [r7, #16]
            ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL4_C,
 800244e:	f107 0210 	add.w	r2, r7, #16
 8002452:	2301      	movs	r3, #1
 8002454:	2113      	movs	r1, #19
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7ff fd62 	bl	8001f20 <ism330dlc_write_reg>
 800245c:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 800245e:	697b      	ldr	r3, [r7, #20]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	4611      	mov	r1, r2
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	4798      	blx	r3
 8002482:	4603      	mov	r3, r0
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
 8002490:	2301      	movs	r3, #1
 8002492:	4618      	mov	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	460b      	mov	r3, r1
 80024a6:	70fb      	strb	r3, [r7, #3]
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	70fb      	strb	r3, [r7, #3]
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <_ZN10IridiumSBD5beginEv>:



// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 80024de:	2309      	movs	r3, #9
 80024e0:	e01b      	b.n	800251a <_ZN10IridiumSBD5beginEv+0x4e>

   this->reentrant = true;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalBegin();
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fa76 	bl	80029dc <_ZN10IridiumSBD13internalBeginEv>
 80024f0:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00b      	beq.n	8002518 <_ZN10IridiumSBD5beginEv+0x4c>
   {
      if (this->useSerial)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <_ZN10IridiumSBD5beginEv+0x44>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 fdb4 	bl	8003078 <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 8002510:	2100      	movs	r1, #0
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 fcf6 	bl	8002f04 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8002518:	68fb      	ldr	r3, [r7, #12]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <_ZN10IridiumSBD5sleepEv>:
   return ret;
}

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 8002534:	2309      	movs	r3, #9
 8002536:	e028      	b.n	800258a <_ZN10IridiumSBD5sleepEv+0x68>

   if (this->useSerial && (this->sleepPin == -1))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800253e:	2b00      	cmp	r3, #0
 8002540:	d007      	beq.n	8002552 <_ZN10IridiumSBD5sleepEv+0x30>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800254c:	d101      	bne.n	8002552 <_ZN10IridiumSBD5sleepEv+0x30>
      return ISBD_NO_SLEEP_PIN;
 800254e:	230b      	movs	r3, #11
 8002550:	e01b      	b.n	800258a <_ZN10IridiumSBD5sleepEv+0x68>

   this->reentrant = true;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalSleep();
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fbc8 	bl	8002cf0 <_ZN10IridiumSBD13internalSleepEv>
 8002560:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   if (ret == ISBD_SUCCESS)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10b      	bne.n	8002588 <_ZN10IridiumSBD5sleepEv+0x66>
   {
      if (this->useSerial)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <_ZN10IridiumSBD5sleepEv+0x5e>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 fd7c 	bl	8003078 <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 8002580:	2100      	movs	r1, #0
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 fcbe 	bl	8002f04 <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8002588:	68fb      	ldr	r3, [r7, #12]
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	460b      	mov	r3, r1
 800259c:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
   if (enable)
 80025a6:	78fb      	ldrb	r3, [r7, #3]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00e      	beq.n	80025ca <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
   {
      this->ringAsserted = false;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025ba:	f083 0301 	eor.w	r3, r3, #1
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
      {
        clearRingIndicator();
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f9b3 	bl	8002930 <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <_ZN10IridiumSBD13getSystemTimeER2tm>:

   return ret;
}

int IridiumSBD::getSystemTime(struct tm &tm)
{
 80025d4:	b5b0      	push	{r4, r5, r7, lr}
 80025d6:	b09c      	sub	sp, #112	; 0x70
 80025d8:	af02      	add	r7, sp, #8
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 80025de:	2301      	movs	r3, #1
 80025e0:	2201      	movs	r2, #1
 80025e2:	493f      	ldr	r1, [pc, #252]	; (80026e0 <_ZN10IridiumSBD13getSystemTimeER2tm+0x10c>)
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 fd55 	bl	8003094 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 80025ea:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025ee:	4b3d      	ldr	r3, [pc, #244]	; (80026e4 <_ZN10IridiumSBD13getSystemTimeER2tm+0x110>)
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	4b3d      	ldr	r3, [pc, #244]	; (80026e8 <_ZN10IridiumSBD13getSystemTimeER2tm+0x114>)
 80025f4:	2218      	movs	r2, #24
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fb8c 	bl	8002d14 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f083 0301 	eor.w	r3, r3, #1
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <_ZN10IridiumSBD13getSystemTimeER2tm+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 fc49 	bl	8002ea0 <_ZN10IridiumSBD9cancelledEv>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <_ZN10IridiumSBD13getSystemTimeER2tm+0x44>
 8002614:	2304      	movs	r3, #4
 8002616:	e05e      	b.n	80026d6 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>
 8002618:	2303      	movs	r3, #3
 800261a:	e05c      	b.n	80026d6 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   if (!isxdigit(msstmResponseBuf[0]))
 800261c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002620:	4618      	mov	r0, r3
 8002622:	f009 fbc9 	bl	800bdb8 <isxdigit>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <_ZN10IridiumSBD13getSystemTimeER2tm+0x5c>
      return ISBD_NO_NETWORK;
 800262c:	230c      	movs	r3, #12
 800262e:	e052      	b.n	80026d6 <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   // Latest epoch began at May 11, 2014, at 14:23:55 UTC.
   struct tm epoch_start;
   epoch_start.tm_year = 2014 - 1900;
 8002630:	2372      	movs	r3, #114	; 0x72
 8002632:	62bb      	str	r3, [r7, #40]	; 0x28
   epoch_start.tm_mon = 5 - 1;
 8002634:	2304      	movs	r3, #4
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
   epoch_start.tm_mday = 11;
 8002638:	230b      	movs	r3, #11
 800263a:	623b      	str	r3, [r7, #32]
   epoch_start.tm_hour = 14;
 800263c:	230e      	movs	r3, #14
 800263e:	61fb      	str	r3, [r7, #28]
   epoch_start.tm_min = 23;
 8002640:	2317      	movs	r3, #23
 8002642:	61bb      	str	r3, [r7, #24]
   epoch_start.tm_sec = 55;
 8002644:	2337      	movs	r3, #55	; 0x37
 8002646:	617b      	str	r3, [r7, #20]

   unsigned long ticks_since_epoch = strtoul(msstmResponseBuf, NULL, 16);
 8002648:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800264c:	2210      	movs	r2, #16
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f00a fee7 	bl	800d424 <strtoul>
 8002656:	6678      	str	r0, [r7, #100]	; 0x64
      seconds less than the equivalent ticks_since_epoch. Subtract that away and
      we'll be left with a small number that won't overflow when we scale by 90/1000.

      Many thanks to Scott Weldon for this suggestion.
   */
   unsigned long secs_since_epoch = (ticks_since_epoch / 1000) * 90;
 8002658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800265a:	4a24      	ldr	r2, [pc, #144]	; (80026ec <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 800265c:	fba2 2303 	umull	r2, r3, r2, r3
 8002660:	099b      	lsrs	r3, r3, #6
 8002662:	225a      	movs	r2, #90	; 0x5a
 8002664:	fb02 f303 	mul.w	r3, r2, r3
 8002668:	663b      	str	r3, [r7, #96]	; 0x60
   unsigned long small_ticks = ticks_since_epoch - (secs_since_epoch / 90) * 1000;
 800266a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800266c:	085b      	lsrs	r3, r3, #1
 800266e:	4a20      	ldr	r2, [pc, #128]	; (80026f0 <_ZN10IridiumSBD13getSystemTimeER2tm+0x11c>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	095b      	lsrs	r3, r3, #5
 8002676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800267a:	fb02 f303 	mul.w	r3, r2, r3
 800267e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	65fb      	str	r3, [r7, #92]	; 0x5c
   secs_since_epoch += small_ticks * 90 / 1000;
 8002684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002686:	225a      	movs	r2, #90	; 0x5a
 8002688:	fb02 f303 	mul.w	r3, r2, r3
 800268c:	4a17      	ldr	r2, [pc, #92]	; (80026ec <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	099b      	lsrs	r3, r3, #6
 8002694:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002696:	4413      	add	r3, r2
 8002698:	663b      	str	r3, [r7, #96]	; 0x60

   time_t epoch_time = mktime(&epoch_start);
 800269a:	f107 0314 	add.w	r3, r7, #20
 800269e:	4618      	mov	r0, r3
 80026a0:	f009 fdc4 	bl	800c22c <mktime>
 80026a4:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
   time_t now = epoch_time + secs_since_epoch;
 80026a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026aa:	4618      	mov	r0, r3
 80026ac:	f04f 0100 	mov.w	r1, #0
 80026b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80026b4:	1884      	adds	r4, r0, r2
 80026b6:	eb41 0503 	adc.w	r5, r1, r3
 80026ba:	e9c7 4502 	strd	r4, r5, [r7, #8]
   memcpy(&tm, localtime(&now), sizeof tm);
 80026be:	f107 0308 	add.w	r3, r7, #8
 80026c2:	4618      	mov	r0, r3
 80026c4:	f009 fb80 	bl	800bdc8 <localtime>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2224      	movs	r2, #36	; 0x24
 80026cc:	4619      	mov	r1, r3
 80026ce:	6838      	ldr	r0, [r7, #0]
 80026d0:	f009 fca4 	bl	800c01c <memcpy>
   return ISBD_SUCCESS;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3768      	adds	r7, #104	; 0x68
 80026da:	46bd      	mov	sp, r7
 80026dc:	bdb0      	pop	{r4, r5, r7, pc}
 80026de:	bf00      	nop
 80026e0:	08010304 	.word	0x08010304
 80026e4:	0801031c 	.word	0x0801031c
 80026e8:	08010310 	.word	0x08010310
 80026ec:	10624dd3 	.word	0x10624dd3
 80026f0:	b60b60b7 	.word	0xb60b60b7

080026f4 <_ZN10IridiumSBD18getFirmwareVersionEPcj>:

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b07      	cmp	r3, #7
 8002704:	d801      	bhi.n	800270a <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 8002706:	2308      	movs	r3, #8
 8002708:	e01e      	b.n	8002748 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 800270a:	2301      	movs	r3, #1
 800270c:	2201      	movs	r2, #1
 800270e:	4910      	ldr	r1, [pc, #64]	; (8002750 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f000 fcbf 	bl	8003094 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 faf7 	bl	8002d14 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8002726:	4603      	mov	r3, r0
 8002728:	f083 0301 	eor.w	r3, r3, #1
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d009      	beq.n	8002746 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 fbb4 	bl	8002ea0 <_ZN10IridiumSBD9cancelledEv>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 800273e:	2304      	movs	r3, #4
 8002740:	e002      	b.n	8002748 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 8002742:	2303      	movs	r3, #3
 8002744:	e000      	b.n	8002748 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	08010324 	.word	0x08010324
 8002754:	0801031c 	.word	0x0801031c
 8002758:	08010330 	.word	0x08010330

0800275c <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800276e:	2b00      	cmp	r3, #0
 8002770:	d004      	beq.n	800277c <_ZN10IridiumSBD21enableSuperCapChargerEb+0x20>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8002772:	4918      	ldr	r1, [pc, #96]	; (80027d4 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 fd35 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 800277a:	e028      	b.n	80027ce <_ZN10IridiumSBD21enableSuperCapChargerEb+0x72>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f001 f813 	bl	80037a8 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00b      	beq.n	80027a0 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x44>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 8002794:	4313      	orrs	r3, r2
 8002796:	b2da      	uxtb	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800279e:	e00f      	b.n	80027c0 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80027a6:	b25a      	sxtb	r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80027ae:	b25b      	sxtb	r3, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	b25b      	sxtb	r3, r3
 80027b4:	4013      	ands	r3, r2
 80027b6:	b25b      	sxtb	r3, r3
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80027c6:	4619      	mov	r1, r3
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f001 f828 	bl	800381e <_ZN10IridiumSBD11set9603pinsEh>
}
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	0801034c 	.word	0x0801034c

080027d8 <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d005      	beq.n	80027f6 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1e>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 80027ea:	4912      	ldr	r1, [pc, #72]	; (8002834 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 fcf9 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 80027f2:	2300      	movs	r3, #0
 80027f4:	e01a      	b.n	800282c <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 ffd6 	bl	80037a8 <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8002808:	4013      	ands	r3, r2
 800280a:	b2da      	uxtb	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf14      	ite	ne
 800281c:	2301      	movne	r3, #1
 800281e:	2300      	moveq	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  {
    return(true);
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }
  else
  {
    return(false);
 800282a:	2300      	movs	r3, #0
  }
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	08010398 	.word	0x08010398

08002838 <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800284a:	2b00      	cmp	r3, #0
 800284c:	d004      	beq.n	8002858 <_ZN10IridiumSBD16enable9603NpowerEb+0x20>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 800284e:	4918      	ldr	r1, [pc, #96]	; (80028b0 <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 fcc7 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8002856:	e028      	b.n	80028aa <_ZN10IridiumSBD16enable9603NpowerEb+0x72>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 ffa5 	bl	80037a8 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00b      	beq.n	800287c <_ZN10IridiumSBD16enable9603NpowerEb+0x44>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8002870:	4313      	orrs	r3, r2
 8002872:	b2da      	uxtb	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800287a:	e00f      	b.n	800289c <_ZN10IridiumSBD16enable9603NpowerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8002882:	b25a      	sxtb	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 800288a:	b25b      	sxtb	r3, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	b25b      	sxtb	r3, r3
 8002890:	4013      	ands	r3, r2
 8002892:	b25b      	sxtb	r3, r3
 8002894:	b2da      	uxtb	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80028a2:	4619      	mov	r1, r3
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 ffba 	bl	800381e <_ZN10IridiumSBD11set9603pinsEh>
}
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	080103e4 	.word	0x080103e4

080028b4 <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d004      	beq.n	80028d4 <_ZN10IridiumSBD10enable9603Eb+0x20>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 80028ca:	4918      	ldr	r1, [pc, #96]	; (800292c <_ZN10IridiumSBD10enable9603Eb+0x78>)
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fc89 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 80028d2:	e028      	b.n	8002926 <_ZN10IridiumSBD10enable9603Eb+0x72>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 ff67 	bl	80037a8 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00b      	beq.n	80028f8 <_ZN10IridiumSBD10enable9603Eb+0x44>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 80028ec:	4313      	orrs	r3, r2
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80028f6:	e00f      	b.n	8002918 <_ZN10IridiumSBD10enable9603Eb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80028fe:	b25a      	sxtb	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8002906:	b25b      	sxtb	r3, r3
 8002908:	43db      	mvns	r3, r3
 800290a:	b25b      	sxtb	r3, r3
 800290c:	4013      	ands	r3, r2
 800290e:	b25b      	sxtb	r3, r3
 8002910:	b2da      	uxtb	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800291e:	4619      	mov	r1, r3
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 ff7c 	bl	800381e <_ZN10IridiumSBD11set9603pinsEh>
}
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	0801042c 	.word	0x0801042c

08002930 <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800293e:	2b00      	cmp	r3, #0
 8002940:	d004      	beq.n	800294c <_ZN10IridiumSBD18clearRingIndicatorEv+0x1c>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 8002942:	4913      	ldr	r1, [pc, #76]	; (8002990 <_ZN10IridiumSBD18clearRingIndicatorEv+0x60>)
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fc4d 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 800294a:	e01d      	b.n	8002988 <_ZN10IridiumSBD18clearRingIndicatorEv+0x58>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 ff2b 	bl	80037a8 <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8002958:	b25a      	sxtb	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8002960:	b25b      	sxtb	r3, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	b25b      	sxtb	r3, r3
 8002966:	4013      	ands	r3, r2
 8002968:	b25b      	sxtb	r3, r3
 800296a:	b2da      	uxtb	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  set9603pins(IO_REGISTER); // Update the pins
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8002978:	4619      	mov	r1, r3
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 ff4f 	bl	800381e <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
}
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	080104fc 	.word	0x080104fc

08002994 <_ZN10IridiumSBD11isConnectedEv>:

//Returns true if the I2C device is connected
//Always returns true for serial
//boolean IridiumSBD::isConnected() TODO
bool IridiumSBD::isConnected()
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <_ZN10IridiumSBD11isConnectedEv+0x16>
   {
		return true;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e013      	b.n	80029d2 <_ZN10IridiumSBD11isConnectedEv+0x3e>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029b4:	4619      	mov	r1, r3
 80029b6:	4610      	mov	r0, r2
 80029b8:	f001 fc9c 	bl	80042f4 <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 fce1 	bl	8004388 <_ZN7TwoWire15endTransmissionEv>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf0c      	ite	eq
 80029cc:	2301      	moveq	r3, #1
 80029ce:	2300      	movne	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
   }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b090      	sub	sp, #64	; 0x40
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 80029e4:	49b1      	ldr	r1, [pc, #708]	; (8002cac <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fbfc 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80029f2:	f083 0301 	eor.w	r3, r3, #1
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e150      	b.n	8002ca2 <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (!this->useSerial) // If we are using I2C
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a06:	f083 0301 	eor.w	r3, r3, #1
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <_ZN10IridiumSBD13internalBeginEv+0x40>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fec9 	bl	80037a8 <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 fdee 	bl	80035f8 <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fa70 	bl	8002f04 <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 8002a24:	2300      	movs	r3, #0
 8002a26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 8002a2a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 8002a30:	f002 fa1a 	bl	8004e68 <HAL_GetTick>
 8002a34:	62b8      	str	r0, [r7, #40]	; 0x28
 8002a36:	f002 fa17 	bl	8004e68 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a42:	429a      	cmp	r2, r3
 8002a44:	bf8c      	ite	hi
 8002a46:	2301      	movhi	r3, #1
 8002a48:	2300      	movls	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <_ZN10IridiumSBD13internalBeginEv+0x84>
      if (cancelled())
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fa25 	bl	8002ea0 <_ZN10IridiumSBD9cancelledEv>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0ec      	beq.n	8002a36 <_ZN10IridiumSBD13internalBeginEv+0x5a>
         return ISBD_CANCELLED;
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	e120      	b.n	8002ca2 <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (this->useSerial) // If we are using Serial
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <_ZN10IridiumSBD13internalBeginEv+0x94>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 faf6 	bl	800305c <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 8002a70:	f002 f9fa 	bl	8004e68 <HAL_GetTick>
 8002a74:	6278      	str	r0, [r7, #36]	; 0x24
 8002a76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002a7a:	f083 0301 	eor.w	r3, r3, #1
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d010      	beq.n	8002aa6 <_ZN10IridiumSBD13internalBeginEv+0xca>
 8002a84:	f002 f9f0 	bl	8004e68 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	1ad2      	subs	r2, r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a94:	4619      	mov	r1, r3
 8002a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a9a:	fb03 f301 	mul.w	r3, r3, r1
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d201      	bcs.n	8002aa6 <_ZN10IridiumSBD13internalBeginEv+0xca>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <_ZN10IridiumSBD13internalBeginEv+0xcc>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d018      	beq.n	8002ade <_ZN10IridiumSBD13internalBeginEv+0x102>
   {
      send(F("AT\r"));
 8002aac:	2301      	movs	r3, #1
 8002aae:	2201      	movs	r2, #1
 8002ab0:	497f      	ldr	r1, [pc, #508]	; (8002cb0 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 faee 	bl	8003094 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 8002ab8:	4b7e      	ldr	r3, [pc, #504]	; (8002cb4 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	2300      	movs	r3, #0
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f926 	bl	8002d14 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f9e6 	bl	8002ea0 <_ZN10IridiumSBD9cancelledEv>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0cd      	beq.n	8002a76 <_ZN10IridiumSBD13internalBeginEv+0x9a>
         return ISBD_CANCELLED;
 8002ada:	2304      	movs	r3, #4
 8002adc:	e0e1      	b.n	8002ca2 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   if (!modemAlive)
 8002ade:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ae2:	f083 0301 	eor.w	r3, r3, #1
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <_ZN10IridiumSBD13internalBeginEv+0x11c>
   {
      diagprint(F("No modem detected.\r\n"));
 8002aec:	4972      	ldr	r1, [pc, #456]	; (8002cb8 <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fb78 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 8002af4:	2305      	movs	r3, #5
 8002af6:	e0d4      	b.n	8002ca2 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 8002af8:	4a70      	ldr	r2, [pc, #448]	; (8002cbc <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 8002afa:	f107 0310 	add.w	r3, r7, #16
 8002afe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 8002b04:	2300      	movs	r3, #0
 8002b06:	633b      	str	r3, [r7, #48]	; 0x30
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	dc26      	bgt.n	8002b5c <_ZN10IridiumSBD13internalBeginEv+0x180>
   {
      send(strings[i]);
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002b16:	4413      	add	r3, r2
 8002b18:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fb12 	bl	8003148 <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 8002b24:	4b63      	ldr	r3, [pc, #396]	; (8002cb4 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f8f0 	bl	8002d14 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f083 0301 	eor.w	r3, r3, #1
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d009      	beq.n	8002b54 <_ZN10IridiumSBD13internalBeginEv+0x178>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f9ad 	bl	8002ea0 <_ZN10IridiumSBD9cancelledEv>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <_ZN10IridiumSBD13internalBeginEv+0x174>
 8002b4c:	2304      	movs	r3, #4
 8002b4e:	e0a8      	b.n	8002ca2 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8002b50:	2303      	movs	r3, #3
 8002b52:	e0a6      	b.n	8002ca2 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   for (int i=0; i<3; ++i)
 8002b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b56:	3301      	adds	r3, #1
 8002b58:	633b      	str	r3, [r7, #48]	; 0x30
 8002b5a:	e7d5      	b.n	8002b08 <_ZN10IridiumSBD13internalBeginEv+0x12c>
   }

   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 8002b5c:	4958      	ldr	r1, [pc, #352]	; (8002cc0 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fb40 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <_ZN10IridiumSBD13internalBeginEv+0x196>
 8002b6e:	4b55      	ldr	r3, [pc, #340]	; (8002cc4 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8002b70:	e000      	b.n	8002b74 <_ZN10IridiumSBD13internalBeginEv+0x198>
 8002b72:	4b55      	ldr	r3, [pc, #340]	; (8002cc8 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8002b74:	4619      	mov	r1, r3
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fb34 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8002b7c:	4953      	ldr	r1, [pc, #332]	; (8002ccc <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 fb30 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d004      	beq.n	8002b98 <_ZN10IridiumSBD13internalBeginEv+0x1bc>
 8002b8e:	2101      	movs	r1, #1
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff fcfe 	bl	8002592 <_ZN10IridiumSBD16enableRingAlertsEb>
 8002b96:	e00a      	b.n	8002bae <_ZN10IridiumSBD13internalBeginEv+0x1d2>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b9e:	f083 0301 	eor.w	r3, r3, #1
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d002      	beq.n	8002bae <_ZN10IridiumSBD13internalBeginEv+0x1d2>
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff fec1 	bl	8002930 <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <_ZN10IridiumSBD13internalBeginEv+0x1e0>
 8002bb8:	4945      	ldr	r1, [pc, #276]	; (8002cd0 <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 8002bba:	e000      	b.n	8002bbe <_ZN10IridiumSBD13internalBeginEv+0x1e2>
 8002bbc:	4945      	ldr	r1, [pc, #276]	; (8002cd4 <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fa66 	bl	8003094 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse())
 8002bc8:	4b3a      	ldr	r3, [pc, #232]	; (8002cb4 <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f89e 	bl	8002d14 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f083 0301 	eor.w	r3, r3, #1
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d009      	beq.n	8002bf8 <_ZN10IridiumSBD13internalBeginEv+0x21c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f95b 	bl	8002ea0 <_ZN10IridiumSBD9cancelledEv>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <_ZN10IridiumSBD13internalBeginEv+0x218>
 8002bf0:	2304      	movs	r3, #4
 8002bf2:	e056      	b.n	8002ca2 <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e054      	b.n	8002ca2 <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 8002bf8:	f107 0308 	add.w	r3, r7, #8
 8002bfc:	2208      	movs	r2, #8
 8002bfe:	4619      	mov	r1, r3
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff fd77 	bl	80026f4 <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 8002c06:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d008      	beq.n	8002c20 <_ZN10IridiumSBD13internalBeginEv+0x244>
   {
      diagprint(F("Unknown FW version\r\n"));
 8002c0e:	4932      	ldr	r1, [pc, #200]	; (8002cd8 <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fae7 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002c1e:	e027      	b.n	8002c70 <_ZN10IridiumSBD13internalBeginEv+0x294>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 8002c20:	492e      	ldr	r1, [pc, #184]	; (8002cdc <_ZN10IridiumSBD13internalBeginEv+0x300>)
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 fade 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8002c28:	f107 0308 	add.w	r3, r7, #8
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fafe 	bl	8003230 <_ZN10IridiumSBD9diagprintEPKc>
 8002c34:	492a      	ldr	r1, [pc, #168]	; (8002ce0 <_ZN10IridiumSBD13internalBeginEv+0x304>)
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fad4 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 8002c3c:	7a3b      	ldrb	r3, [r7, #8]
 8002c3e:	2b54      	cmp	r3, #84	; 0x54
 8002c40:	d116      	bne.n	8002c70 <_ZN10IridiumSBD13internalBeginEv+0x294>
 8002c42:	7a7b      	ldrb	r3, [r7, #9]
 8002c44:	2b41      	cmp	r3, #65	; 0x41
 8002c46:	d113      	bne.n	8002c70 <_ZN10IridiumSBD13internalBeginEv+0x294>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 8002c48:	f107 0308 	add.w	r3, r7, #8
 8002c4c:	3302      	adds	r3, #2
 8002c4e:	220a      	movs	r2, #10
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f00a fbe6 	bl	800d424 <strtoul>
 8002c58:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8002c60:	4293      	cmp	r3, r2
 8002c62:	bf94      	ite	ls
 8002c64:	2301      	movls	r3, #1
 8002c66:	2300      	movhi	r3, #0
 8002c68:	b2da      	uxtb	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 8002c70:	491c      	ldr	r1, [pc, #112]	; (8002ce4 <_ZN10IridiumSBD13internalBeginEv+0x308>)
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fab6 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <_ZN10IridiumSBD13internalBeginEv+0x2aa>
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8002c84:	e000      	b.n	8002c88 <_ZN10IridiumSBD13internalBeginEv+0x2ac>
 8002c86:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8002c88:	4619      	mov	r1, r3
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 faaa 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8002c90:	4915      	ldr	r1, [pc, #84]	; (8002ce8 <_ZN10IridiumSBD13internalBeginEv+0x30c>)
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 faa6 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 8002c98:	4914      	ldr	r1, [pc, #80]	; (8002cec <_ZN10IridiumSBD13internalBeginEv+0x310>)
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 faa2 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3738      	adds	r7, #56	; 0x38
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	0801061c 	.word	0x0801061c
 8002cb0:	08010634 	.word	0x08010634
 8002cb4:	0801031c 	.word	0x0801031c
 8002cb8:	08010638 	.word	0x08010638
 8002cbc:	0801070c 	.word	0x0801070c
 8002cc0:	08010650 	.word	0x08010650
 8002cc4:	08010660 	.word	0x08010660
 8002cc8:	08010664 	.word	0x08010664
 8002ccc:	0801066c 	.word	0x0801066c
 8002cd0:	08010678 	.word	0x08010678
 8002cd4:	08010688 	.word	0x08010688
 8002cd8:	08010698 	.word	0x08010698
 8002cdc:	080106b0 	.word	0x080106b0
 8002ce0:	080106c8 	.word	0x080106c8
 8002ce4:	080106cc 	.word	0x080106cc
 8002ce8:	080106e0 	.word	0x080106e0
 8002cec:	080106f0 	.word	0x080106f0

08002cf0 <_ZN10IridiumSBD13internalSleepEv>:
   okToProceed = isxdigit(msstmResponseBuf[0]);
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 8002d02:	230a      	movs	r3, #10
 8002d04:	e000      	b.n	8002d08 <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b08b      	sub	sp, #44	; 0x2c
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 8002d22:	495d      	ldr	r1, [pc, #372]	; (8002e98 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x184>)
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 fa5d 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 8002d2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 fa7f 	bl	8003230 <_ZN10IridiumSBD9diagprintEPKc>
   HAL_UART_Transmit(&(this->uart),(uint8_t*) terminator, strlen(terminator), HAL_MAX_DELAY); //TODO doesn't print otherwise
 8002d32:	68fc      	ldr	r4, [r7, #12]
 8002d34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d36:	f7fd fa75 	bl	8000224 <strlen>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d44:	4620      	mov	r0, r4
 8002d46:	f005 fdc4 	bl	80088d2 <HAL_UART_Transmit>
   diagprint(F("\r\n"));
 8002d4a:	4954      	ldr	r1, [pc, #336]	; (8002e9c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x188>)
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fa49 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x50>
      memset(response, 0, responseSize);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	68b8      	ldr	r0, [r7, #8]
 8002d60:	f009 f984 	bl	800c06c <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 8002d64:	2300      	movs	r3, #0
 8002d66:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 8002d68:	2300      	movs	r3, #0
 8002d6a:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x62>
 8002d72:	2300      	movs	r3, #0
 8002d74:	e000      	b.n	8002d78 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x64>
 8002d76:	2302      	movs	r3, #2
 8002d78:	61fb      	str	r3, [r7, #28]
   //consoleprint(F("<< ")); //TODO If we comment out this it looks cleaner in the serial
   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 8002d7a:	f002 f875 	bl	8004e68 <HAL_GetTick>
 8002d7e:	61b8      	str	r0, [r7, #24]
 8002d80:	f002 f872 	bl	8004e68 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	1ad2      	subs	r2, r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d90:	4619      	mov	r1, r3
 8002d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d96:	fb03 f301 	mul.w	r3, r3, r1
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	bf34      	ite	cc
 8002d9e:	2301      	movcc	r3, #1
 8002da0:	2300      	movcs	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d072      	beq.n	8002e8e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17a>
   {
      if (cancelled())
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 f879 	bl	8002ea0 <_ZN10IridiumSBD9cancelledEv>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
         return false;
 8002db4:	2300      	movs	r3, #0
 8002db6:	e06b      	b.n	8002e90 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>

      while (filteredavailable() > 0)
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 fbbb 	bl	8003534 <_ZN10IridiumSBD17filteredavailableEv>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bfcc      	ite	gt
 8002dc4:	2301      	movgt	r3, #1
 8002dc6:	2300      	movle	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0d8      	beq.n	8002d80 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x6c>
      {
         char c = filteredread();
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f000 fbcc 	bl	800356c <_ZN10IridiumSBD12filteredreadEv>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d03b      	beq.n	8002e56 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
         {
            switch (promptState)
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xd8>
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d01d      	beq.n	8002e26 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x112>
 8002dea:	e034      	b.n	8002e56 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	4413      	add	r3, r2
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	7dfa      	ldrb	r2, [r7, #23]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d10b      	bne.n	8002e12 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfe>
               {
                  ++matchPromptPos;
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	4413      	add	r3, r2
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d121      	bne.n	8002e50 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
                     promptState = GATHERING_RESPONSE;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 8002e10:	e01e      	b.n	8002e50 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	7dfa      	ldrb	r2, [r7, #23]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d101      	bne.n	8002e20 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10c>
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e000      	b.n	8002e22 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10e>
 8002e20:	2300      	movs	r3, #0
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 8002e24:	e014      	b.n	8002e50 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d013      	beq.n	8002e54 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
               {
                  if (c == '\r' || responseSize < 2)
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	2b0d      	cmp	r3, #13
 8002e30:	d002      	beq.n	8002e38 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x124>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	dc02      	bgt.n	8002e3e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 8002e3c:	e00a      	b.n	8002e54 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
                     *response++ = c;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	60ba      	str	r2, [r7, #8]
 8002e44:	7dfa      	ldrb	r2, [r7, #23]
 8002e46:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	607b      	str	r3, [r7, #4]
               break;
 8002e4e:	e001      	b.n	8002e54 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
               break;
 8002e50:	bf00      	nop
 8002e52:	e000      	b.n	8002e56 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
               break;
 8002e54:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 8002e56:	6a3b      	ldr	r3, [r7, #32]
 8002e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e5a:	4413      	add	r3, r2
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	7dfa      	ldrb	r2, [r7, #23]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d10a      	bne.n	8002e7a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x166>
         {
            ++matchTerminatorPos;
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	3301      	adds	r3, #1
 8002e68:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e6e:	4413      	add	r3, r2
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1a0      	bne.n	8002db8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
               return true;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e00a      	b.n	8002e90 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 8002e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	7dfa      	ldrb	r2, [r7, #23]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d101      	bne.n	8002e88 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x174>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x176>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 8002e8c:	e794      	b.n	8002db8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	372c      	adds	r7, #44	; 0x2c
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd90      	pop	{r4, r7, pc}
 8002e98:	08010850 	.word	0x08010850
 8002e9c:	080106c8 	.word	0x080106c8

08002ea0 <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d019      	beq.n	8002ee6 <_ZN10IridiumSBD9cancelledEv+0x46>
   {
	   //TODO For some reason when using digitalRead here it didn't work so simply replaced with HAL function
	   //if ((ringPin != -1) && digitalRead(ringPin) == LOW)
	     if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d008      	beq.n	8002ed0 <_ZN10IridiumSBD9cancelledEv+0x30>
 8002ebe:	2110      	movs	r1, #16
 8002ec0:	480e      	ldr	r0, [pc, #56]	; (8002efc <_ZN10IridiumSBD9cancelledEv+0x5c>)
 8002ec2:	f002 faa9 	bl	8005418 <HAL_GPIO_ReadPin>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <_ZN10IridiumSBD9cancelledEv+0x30>
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e000      	b.n	8002ed2 <_ZN10IridiumSBD9cancelledEv+0x32>
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d007      	beq.n	8002ee6 <_ZN10IridiumSBD9cancelledEv+0x46>
	  {
         ringAsserted = true;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		 diagprint(F("ringPin seen!\r\n"));
 8002ede:	4908      	ldr	r1, [pc, #32]	; (8002f00 <_ZN10IridiumSBD9cancelledEv+0x60>)
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f97f 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 8002ee6:	f7ff fad1 	bl	800248c <_Z12ISBDCallbackv>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f083 0301 	eor.w	r3, r3, #1
 8002ef0:	b2db      	uxtb	r3, r3
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40020800 	.word	0x40020800
 8002f00:	08010868 	.word	0x08010868

08002f04 <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	f083 0301 	eor.w	r3, r3, #1
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

   if (this->useSerial)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d011      	beq.n	8002f4c <_ZN10IridiumSBD5powerEb+0x48>
   {
      if (this->sleepPin == -1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f32:	d04c      	beq.n	8002fce <_ZN10IridiumSBD5powerEb+0xca>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <_ZN10IridiumSBD5powerEb+0x48>
          {
             configureSleepPin();
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f84e 	bl	8002fe0 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
          }
      }
   }

   if (on)
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d018      	beq.n	8002f84 <_ZN10IridiumSBD5powerEb+0x80>
   {
      diagprint(F("Powering on modem...\r\n"));
 8002f52:	4921      	ldr	r1, [pc, #132]	; (8002fd8 <_ZN10IridiumSBD5powerEb+0xd4>)
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f945 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d004      	beq.n	8002f6e <_ZN10IridiumSBD5powerEb+0x6a>
      {
         setSleepPin(HIGH); // HIGH = awake
 8002f64:	2101      	movs	r1, #1
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f850 	bl	800300c <_ZN10IridiumSBD11setSleepPinEh>
 8002f6c:	e003      	b.n	8002f76 <_ZN10IridiumSBD5powerEb+0x72>
      }
      else
      {
         enable9603(true);
 8002f6e:	2101      	movs	r1, #1
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff fc9f 	bl	80028b4 <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 8002f76:	f001 ff77 	bl	8004e68 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8002f82:	e025      	b.n	8002fd0 <_ZN10IridiumSBD5powerEb+0xcc>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 8002f84:	f001 ff70 	bl	8004e68 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002f9a:	d205      	bcs.n	8002fa8 <_ZN10IridiumSBD5powerEb+0xa4>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f001 ff6c 	bl	8004e80 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 8002fa8:	490c      	ldr	r1, [pc, #48]	; (8002fdc <_ZN10IridiumSBD5powerEb+0xd8>)
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f91a 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d004      	beq.n	8002fc4 <_ZN10IridiumSBD5powerEb+0xc0>
      {
         setSleepPin(LOW); // LOW = asleep
 8002fba:	2100      	movs	r1, #0
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f825 	bl	800300c <_ZN10IridiumSBD11setSleepPinEh>
 8002fc2:	e005      	b.n	8002fd0 <_ZN10IridiumSBD5powerEb+0xcc>
      }
      else
      {
         enable9603(false);
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff fc74 	bl	80028b4 <_ZN10IridiumSBD10enable9603Eb>
 8002fcc:	e000      	b.n	8002fd0 <_ZN10IridiumSBD5powerEb+0xcc>
         return;
 8002fce:	bf00      	nop
      }
   }
}
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	080108bc 	.word	0x080108bc
 8002fdc:	080108d4 	.word	0x080108d4

08002fe0 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
	//pinMode(this->sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2108      	movs	r1, #8
 8002fec:	4805      	ldr	r0, [pc, #20]	; (8003004 <_ZN10IridiumSBD17configureSleepPinEv+0x24>)
 8002fee:	f000 fed3 	bl	8003d98 <_Z10st_pinModeP12GPIO_TypeDefhi>
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 8002ff2:	4905      	ldr	r1, [pc, #20]	; (8003008 <_ZN10IridiumSBD17configureSleepPinEv+0x28>)
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f8f5 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40020800 	.word	0x40020800
 8003008:	080108ec 	.word	0x080108ec

0800300c <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 8003018:	2201      	movs	r2, #1
 800301a:	2108      	movs	r1, #8
 800301c:	480b      	ldr	r0, [pc, #44]	; (800304c <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 800301e:	f002 fa13 	bl	8005448 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 8003022:	490b      	ldr	r1, [pc, #44]	; (8003050 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f8dd 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 800302a:	78fb      	ldrb	r3, [r7, #3]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d104      	bne.n	800303a <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 8003030:	4908      	ldr	r1, [pc, #32]	; (8003054 <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f8d6 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8003038:	e003      	b.n	8003042 <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 800303a:	4907      	ldr	r1, [pc, #28]	; (8003058 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f8d1 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40020800 	.word	0x40020800
 8003050:	08010918 	.word	0x08010918
 8003054:	08010934 	.word	0x08010934
 8003058:	0801093c 	.word	0x0801093c

0800305c <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 8003064:	4903      	ldr	r1, [pc, #12]	; (8003074 <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f8bc 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800306c:	bf00      	nop
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	08010944 	.word	0x08010944

08003078 <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 8003080:	4903      	ldr	r1, [pc, #12]	; (8003090 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f8ae 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8003088:	bf00      	nop
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	08010964 	.word	0x08010964

08003094 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	4611      	mov	r1, r2
 80030a0:	461a      	mov	r2, r3
 80030a2:	460b      	mov	r3, r1
 80030a4:	71fb      	strb	r3, [r7, #7]
 80030a6:	4613      	mov	r3, r2
 80030a8:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 80030b0:	4922      	ldr	r1, [pc, #136]	; (800313c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa8>)
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f8de 	bl	8003274 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	68f8      	ldr	r0, [r7, #12]
 80030bc:	f000 f8da 	bl	8003274 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 80030c0:	79bb      	ldrb	r3, [r7, #6]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 80030c6:	491e      	ldr	r1, [pc, #120]	; (8003140 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 f8d3 	bl	8003274 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d006      	beq.n	80030e6 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x52>
   {
      stream->print(str);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	4618      	mov	r0, r3
 80030e0:	f001 f83c 	bl	800415c <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 80030e4:	e025      	b.n	8003132 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030f0:	4619      	mov	r1, r3
 80030f2:	4610      	mov	r0, r2
 80030f4:	f001 f8fe 	bl	80042f4 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fc:	21ff      	movs	r1, #255	; 0xff
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff f9b2 	bl	8002468 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	4618      	mov	r0, r3
 800310c:	f001 f826 	bl	800415c <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003114:	4618      	mov	r0, r3
 8003116:	f001 f937 	bl	8004388 <_ZN7TwoWire15endTransmissionEv>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
         diagprint(F("I2C write was not successful!\r\n"));
 800312a:	4906      	ldr	r1, [pc, #24]	; (8003144 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb0>)
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 f859 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	08010980 	.word	0x08010980
 8003140:	080106c8 	.word	0x080106c8
 8003144:	08010748 	.word	0x08010748

08003148 <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 8003152:	4921      	ldr	r1, [pc, #132]	; (80031d8 <_ZN10IridiumSBD4sendEPKc+0x90>)
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f88d 	bl	8003274 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 800315a:	6839      	ldr	r1, [r7, #0]
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f8af 	bl	80032c0 <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 8003162:	491e      	ldr	r1, [pc, #120]	; (80031dc <_ZN10IridiumSBD4sendEPKc+0x94>)
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f885 	bl	8003274 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003170:	2b00      	cmp	r3, #0
 8003172:	d006      	beq.n	8003182 <_ZN10IridiumSBD4sendEPKc+0x3a>
   {
      stream->print(str);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003178:	6839      	ldr	r1, [r7, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fffc 	bl	8004178 <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 8003180:	e025      	b.n	80031ce <_ZN10IridiumSBD4sendEPKc+0x86>
      wireport->beginTransmission((uint8_t)deviceaddress);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800318c:	4619      	mov	r1, r3
 800318e:	4610      	mov	r0, r2
 8003190:	f001 f8b0 	bl	80042f4 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003198:	21ff      	movs	r1, #255	; 0xff
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff f964 	bl	8002468 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a4:	6839      	ldr	r1, [r7, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 ffe6 	bl	8004178 <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b0:	4618      	mov	r0, r3
 80031b2:	f001 f8e9 	bl	8004388 <_ZN7TwoWire15endTransmissionEv>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	bf14      	ite	ne
 80031bc:	2301      	movne	r3, #1
 80031be:	2300      	moveq	r3, #0
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <_ZN10IridiumSBD4sendEPKc+0x86>
         diagprint(F("I2C write was not successful!\r\n"));
 80031c6:	4906      	ldr	r1, [pc, #24]	; (80031e0 <_ZN10IridiumSBD4sendEPKc+0x98>)
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f80b 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80031ce:	bf00      	nop
 80031d0:	3708      	adds	r7, #8
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	08010980 	.word	0x08010980
 80031dc:	080106c8 	.word	0x080106c8
 80031e0:	08010748 	.word	0x08010748

080031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:
         diagprint(F("I2C write was not successful!\r\n"));
   }
}

void IridiumSBD::diagprint(FlashString str)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	1c5a      	adds	r2, r3, #1
 80031f6:	60fa      	str	r2, [r7, #12]
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 80031fc:	7afb      	ldrb	r3, [r7, #11]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 8003202:	7afb      	ldrb	r3, [r7, #11]
 8003204:	4619      	mov	r1, r3
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff f954 	bl	80024b4 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 800320c:	e7f1      	b.n	80031f2 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 800320e:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*)str), HAL_MAX_DELAY);
 8003210:	687c      	ldr	r4, [r7, #4]
 8003212:	6838      	ldr	r0, [r7, #0]
 8003214:	f7fd f806 	bl	8000224 <strlen>
 8003218:	4603      	mov	r3, r0
 800321a:	b29a      	uxth	r2, r3
 800321c:	f04f 33ff 	mov.w	r3, #4294967295
 8003220:	6839      	ldr	r1, [r7, #0]
 8003222:	4620      	mov	r0, r4
 8003224:	f005 fb55 	bl	80088d2 <HAL_UART_Transmit>
}
 8003228:	bf00      	nop
 800322a:	3714      	adds	r7, #20
 800322c:	46bd      	mov	sp, r7
 800322e:	bd90      	pop	{r4, r7, pc}

08003230 <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 8003230:	b590      	push	{r4, r7, lr}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
   while (*str)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d008      	beq.n	8003254 <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	603a      	str	r2, [r7, #0]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	4619      	mov	r1, r3
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff f931 	bl	80024b4 <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 8003252:	e7f2      	b.n	800323a <_ZN10IridiumSBD9diagprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8003254:	687c      	ldr	r4, [r7, #4]
 8003256:	6838      	ldr	r0, [r7, #0]
 8003258:	f7fc ffe4 	bl	8000224 <strlen>
 800325c:	4603      	mov	r3, r0
 800325e:	b29a      	uxth	r2, r3
 8003260:	f04f 33ff 	mov.w	r3, #4294967295
 8003264:	6839      	ldr	r1, [r7, #0]
 8003266:	4620      	mov	r0, r4
 8003268:	f005 fb33 	bl	80088d2 <HAL_UART_Transmit>
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	bd90      	pop	{r4, r7, pc}

08003274 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:
   diagprint(str); //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(FlashString str)
{
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	60fa      	str	r2, [r7, #12]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 800328c:	7afb      	ldrb	r3, [r7, #11]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 8003292:	7afb      	ldrb	r3, [r7, #11]
 8003294:	4619      	mov	r1, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff f900 	bl	800249c <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 800329c:	e7f1      	b.n	8003282 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 800329e:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*) str), HAL_MAX_DELAY);
 80032a0:	687c      	ldr	r4, [r7, #4]
 80032a2:	6838      	ldr	r0, [r7, #0]
 80032a4:	f7fc ffbe 	bl	8000224 <strlen>
 80032a8:	4603      	mov	r3, r0
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	f04f 33ff 	mov.w	r3, #4294967295
 80032b0:	6839      	ldr	r1, [r7, #0]
 80032b2:	4620      	mov	r0, r4
 80032b4:	f005 fb0d 	bl	80088d2 <HAL_UART_Transmit>
}
 80032b8:	bf00      	nop
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd90      	pop	{r4, r7, pc}

080032c0 <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 80032c0:	b590      	push	{r4, r7, lr}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
   while (*str)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d008      	beq.n	80032e4 <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	603a      	str	r2, [r7, #0]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	4619      	mov	r1, r3
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff f8dd 	bl	800249c <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 80032e2:	e7f2      	b.n	80032ca <_ZN10IridiumSBD12consoleprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 80032e4:	687c      	ldr	r4, [r7, #4]
 80032e6:	6838      	ldr	r0, [r7, #0]
 80032e8:	f7fc ff9c 	bl	8000224 <strlen>
 80032ec:	4603      	mov	r3, r0
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	f04f 33ff 	mov.w	r3, #4294967295
 80032f4:	6839      	ldr	r1, [r7, #0]
 80032f6:	4620      	mov	r0, r4
 80032f8:	f005 faeb 	bl	80088d2 <HAL_UART_Transmit>
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bd90      	pop	{r4, r7, pc}

08003304 <_ZN10IridiumSBD12consoleprintEc>:
   //consoleprint((const char*) str);
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(char c)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	4619      	mov	r1, r3
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff f8c1 	bl	800249c <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 800331a:	bf00      	nop
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
   diagprint(F("SBDRING alert seen!\r\n"));
 8003334:	4903      	ldr	r1, [pc, #12]	; (8003344 <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7ff ff54 	bl	80031e4 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800333c:	bf00      	nop
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	08010988 	.word	0x08010988

08003348 <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003356:	f083 0301 	eor.w	r3, r3, #1
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d002      	beq.n	8003366 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 f949 	bl	80035f8 <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00b      	beq.n	8003388 <_ZN10IridiumSBD13filterSBDRINGEv+0x40>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3308      	adds	r3, #8
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4610      	mov	r0, r2
 8003380:	4798      	blx	r3
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	dc0d      	bgt.n	80033a4 <_ZN10IridiumSBD13filterSBDRINGEv+0x5c>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800338e:	f083 0301 	eor.w	r3, r3, #1
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00d      	beq.n	80033b4 <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 fa67 	bl	800386c <_ZN10IridiumSBD15i2cSerAvailableEv>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	dd07      	ble.n	80033b4 <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ae:	d101      	bne.n	80033b4 <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <_ZN10IridiumSBD13filterSBDRINGEv+0x6e>
 80033b4:	2300      	movs	r3, #0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80b6 	beq.w	8003528 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e0>
   {
      char c;
      if (this->useSerial)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00b      	beq.n	80033de <_ZN10IridiumSBD13filterSBDRINGEv+0x96>
      {
         c = stream->read();
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	330c      	adds	r3, #12
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4610      	mov	r0, r2
 80033d6:	4798      	blx	r3
 80033d8:	4603      	mov	r3, r0
 80033da:	73fb      	strb	r3, [r7, #15]
 80033dc:	e004      	b.n	80033e8 <_ZN10IridiumSBD13filterSBDRINGEv+0xa0>
      }
      else
      {
         c = i2cSerRead();
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fa5e 	bl	80038a0 <_ZN10IridiumSBD10i2cSerReadEv>
 80033e4:	4603      	mov	r3, r0
 80033e6:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
 80033ea:	4619      	mov	r1, r3
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff ff89 	bl	8003304 <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 808d 	beq.w	800351a <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	7bfa      	ldrb	r2, [r7, #15]
 800340a:	429a      	cmp	r2, r3
 800340c:	f040 8085 	bne.w	800351a <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
      {
         ++head;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
         if (*head == 0)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10d      	bne.n	8003446 <_ZN10IridiumSBD13filterSBDRINGEv+0xfe>
         {
            SBDRINGSeen();
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7ff ff7a 	bl	8003324 <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a3f      	ldr	r2, [pc, #252]	; (8003530 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e8>)
 8003434:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 8003444:	e06e      	b.n	8003524 <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 8003446:	f001 fd0f 	bl	8004e68 <HAL_GetTick>
 800344a:	60b8      	str	r0, [r7, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00b      	beq.n	800346e <_ZN10IridiumSBD13filterSBDRINGEv+0x126>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3308      	adds	r3, #8
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4610      	mov	r0, r2
 8003466:	4798      	blx	r3
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00d      	beq.n	800348a <_ZN10IridiumSBD13filterSBDRINGEv+0x142>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003474:	f083 0301 	eor.w	r3, r3, #1
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00e      	beq.n	800349c <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f9f4 	bl	800386c <_ZN10IridiumSBD15i2cSerAvailableEv>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d108      	bne.n	800349c <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 800348a:	f001 fced 	bl	8004e68 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b09      	cmp	r3, #9
 8003496:	d801      	bhi.n	800349c <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <_ZN10IridiumSBD13filterSBDRINGEv+0x156>
 800349c:	2300      	movs	r3, #0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d000      	beq.n	80034a4 <_ZN10IridiumSBD13filterSBDRINGEv+0x15c>
 80034a2:	e7d3      	b.n	800344c <_ZN10IridiumSBD13filterSBDRINGEv+0x104>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034aa:	f083 0301 	eor.w	r3, r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d002      	beq.n	80034ba <_ZN10IridiumSBD13filterSBDRINGEv+0x172>
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f89f 	bl	80035f8 <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00b      	beq.n	80034dc <_ZN10IridiumSBD13filterSBDRINGEv+0x194>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3308      	adds	r3, #8
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4610      	mov	r0, r2
 80034d4:	4798      	blx	r3
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00d      	beq.n	80034f8 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b0>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034e2:	f083 0301 	eor.w	r3, r3, #1
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d007      	beq.n	80034fc <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f9bd 	bl	800386c <_ZN10IridiumSBD15i2cSerAvailableEv>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <_ZN10IridiumSBD13filterSBDRINGEv+0x1b6>
 80034fc:	2300      	movs	r3, #0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d010      	beq.n	8003524 <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
               --head;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003508:	1e5a      	subs	r2, r3, #1
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
               nextChar = c;
 8003510:	7bfa      	ldrb	r2, [r7, #15]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
         }
 8003518:	e004      	b.n	8003524 <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
      }
      else
      {
         nextChar = c;
 800351a:	7bfa      	ldrb	r2, [r7, #15]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8003522:	e720      	b.n	8003366 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
         }
 8003524:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 8003526:	e71e      	b.n	8003366 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
      }
   }
}
 8003528:	bf00      	nop
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	080112b8 	.word	0x080112b8

08003534 <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ff03 	bl	8003348 <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 8003556:	f1b2 3fff 	cmp.w	r2, #4294967295
 800355a:	d001      	beq.n	8003560 <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 800355c:	2201      	movs	r2, #1
 800355e:	e000      	b.n	8003562 <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 8003560:	2200      	movs	r2, #0
 8003562:	4413      	add	r3, r2
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	f7ff fee7 	bl	8003348 <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003586:	429a      	cmp	r2, r3
 8003588:	d91c      	bls.n	80035c4 <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003590:	1c59      	adds	r1, r3, #1
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d109      	bne.n	80035c0 <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a11      	ldr	r2, [pc, #68]	; (80035f4 <_ZN10IridiumSBD12filteredreadEv+0x88>)
 80035b0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      return c;
 80035c0:	7bbb      	ldrb	r3, [r7, #14]
 80035c2:	e012      	b.n	80035ea <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80035ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ce:	d00a      	beq.n	80035e6 <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80035d6:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f04f 32ff 	mov.w	r2, #4294967295
 80035de:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      return c;
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	e001      	b.n	80035ea <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 80035e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	080112b8 	.word	0x080112b8

080035f8 <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 8003600:	f001 fc32 	bl	8004e68 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 8003614:	4293      	cmp	r3, r2
 8003616:	bf2c      	ite	cs
 8003618:	2301      	movcs	r3, #1
 800361a:	2300      	movcc	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 80be 	beq.w	80037a0 <_ZN10IridiumSBD13check9603dataEv+0x1a8>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003632:	4619      	mov	r1, r3
 8003634:	4610      	mov	r0, r2
 8003636:	f000 fe5d 	bl	80042f4 <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800363e:	21fd      	movs	r1, #253	; 0xfd
 8003640:	4618      	mov	r0, r3
 8003642:	f7fe ff11 	bl	8002468 <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fe9c 	bl	8004388 <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800365a:	2202      	movs	r2, #2
 800365c:	4619      	mov	r1, r3
 800365e:	f000 fe36 	bl	80042ce <_ZN7TwoWire11requestFromEhh>
 8003662:	4603      	mov	r3, r0
 8003664:	2b02      	cmp	r3, #2
 8003666:	bf0c      	ite	eq
 8003668:	2301      	moveq	r3, #1
 800366a:	2300      	movne	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d01d      	beq.n	80036ae <_ZN10IridiumSBD13check9603dataEv+0xb6>
    {
      uint8_t msb = wireport->read();
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	330c      	adds	r3, #12
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4610      	mov	r0, r2
 8003682:	4798      	blx	r3
 8003684:	4603      	mov	r3, r0
 8003686:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	330c      	adds	r3, #12
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4610      	mov	r0, r2
 8003698:	4798      	blx	r3
 800369a:	4603      	mov	r3, r0
 800369c:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 800369e:	7b7b      	ldrb	r3, [r7, #13]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	b21a      	sxth	r2, r3
 80036a4:	7b3b      	ldrb	r3, [r7, #12]
 80036a6:	b21b      	sxth	r3, r3
 80036a8:	4313      	orrs	r3, r2
 80036aa:	b21b      	sxth	r3, r3
 80036ac:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 80036ae:	89fb      	ldrh	r3, [r7, #14]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d06f      	beq.n	8003794 <_ZN10IridiumSBD13check9603dataEv+0x19c>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036be:	4619      	mov	r1, r3
 80036c0:	4610      	mov	r0, r2
 80036c2:	f000 fe17 	bl	80042f4 <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	21ff      	movs	r1, #255	; 0xff
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fe fecb 	bl	8002468 <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fe56 	bl	8004388 <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 80036dc:	89fb      	ldrh	r3, [r7, #14]
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d92d      	bls.n	800373e <_ZN10IridiumSBD13check9603dataEv+0x146>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 80036ec:	2300      	movs	r3, #0
 80036ee:	2208      	movs	r2, #8
 80036f0:	f000 fdb2 	bl	8004258 <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3308      	adds	r3, #8
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4610      	mov	r0, r2
 8003704:	4798      	blx	r3
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00f      	beq.n	8003736 <_ZN10IridiumSBD13check9603dataEv+0x13e>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	330c      	adds	r3, #12
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4610      	mov	r0, r2
 8003726:	4798      	blx	r3
 8003728:	4603      	mov	r3, r0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	4619      	mov	r1, r3
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f8e2 	bl	80038f8 <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 8003734:	e7de      	b.n	80036f4 <_ZN10IridiumSBD13check9603dataEv+0xfc>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 8003736:	89fb      	ldrh	r3, [r7, #14]
 8003738:	3b08      	subs	r3, #8
 800373a:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 800373c:	e7ce      	b.n	80036dc <_ZN10IridiumSBD13check9603dataEv+0xe4>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003748:	89fa      	ldrh	r2, [r7, #14]
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	4619      	mov	r1, r3
 800374e:	f000 fdbe 	bl	80042ce <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	3308      	adds	r3, #8
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4610      	mov	r0, r2
 8003762:	4798      	blx	r3
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	bf14      	ite	ne
 800376a:	2301      	movne	r3, #1
 800376c:	2300      	moveq	r3, #0
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00f      	beq.n	8003794 <_ZN10IridiumSBD13check9603dataEv+0x19c>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	330c      	adds	r3, #12
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4610      	mov	r0, r2
 8003784:	4798      	blx	r3
 8003786:	4603      	mov	r3, r0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	4619      	mov	r1, r3
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f8b3 	bl	80038f8 <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 8003792:	e7de      	b.n	8003752 <_ZN10IridiumSBD13check9603dataEv+0x15a>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 8003794:	f001 fb68 	bl	8004e68 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  }
}
 80037a0:	bf00      	nop
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037ba:	4619      	mov	r1, r3
 80037bc:	4610      	mov	r0, r2
 80037be:	f000 fd99 	bl	80042f4 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c6:	2110      	movs	r1, #16
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fe fe4d 	bl	8002468 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fdd8 	bl	8004388 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037e2:	2201      	movs	r2, #1
 80037e4:	4619      	mov	r1, r3
 80037e6:	f000 fd72 	bl	80042ce <_ZN7TwoWire11requestFromEhh>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	bf0c      	ite	eq
 80037f0:	2301      	moveq	r3, #1
 80037f2:	2300      	movne	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00d      	beq.n	8003816 <_ZN10IridiumSBD13check9603pinsEv+0x6e>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	330c      	adds	r3, #12
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4610      	mov	r0, r2
 800380a:	4798      	blx	r3
 800380c:	4603      	mov	r3, r0
 800380e:	b2da      	uxtb	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	460b      	mov	r3, r1
 8003828:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003834:	4619      	mov	r1, r3
 8003836:	4610      	mov	r0, r2
 8003838:	f000 fd5c 	bl	80042f4 <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003840:	2110      	movs	r1, #16
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe fe10 	bl	8002468 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	78f9      	ldrb	r1, [r7, #3]
 8003856:	4610      	mov	r0, r2
 8003858:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fd92 	bl	8004388 <_ZN7TwoWire15endTransmissionEv>
}
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800387a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	425a      	negs	r2, r3
 8003888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800388c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003890:	bf58      	it	pl
 8003892:	4253      	negpl	r3, r2
}
 8003894:	4618      	mov	r0, r3
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d102      	bne.n	80038be <_ZN10IridiumSBD10i2cSerReadEv+0x1e>
    return -1;
 80038b8:	f04f 33ff 	mov.w	r3, #4294967295
 80038bc:	e016      	b.n	80038ec <_ZN10IridiumSBD10i2cSerReadEv+0x4c>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	4413      	add	r3, r2
 80038c8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80038cc:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038d4:	3301      	adds	r3, #1
 80038d6:	425a      	negs	r2, r3
 80038d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038dc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80038e0:	bf58      	it	pl
 80038e2:	4253      	negpl	r3, r2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  return d;
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	460b      	mov	r3, r1
 8003902:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800390a:	3301      	adds	r3, #1
 800390c:	425a      	negs	r2, r3
 800390e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003912:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003916:	bf58      	it	pl
 8003918:	4253      	negpl	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	429a      	cmp	r2, r3
 8003926:	d00b      	beq.n	8003940 <_ZN10IridiumSBD10i2cSerPokeEc+0x48>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4413      	add	r3, r2
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    i2c_ser_buffer_tail = next;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef>:
	#endif
}


//uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart,POWERPROFILE profile){ TODO
uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart){
 800394c:	b084      	sub	sp, #16
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	f107 001c 	add.w	r0, r7, #28
 800395a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->uart = huart;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4618      	mov	r0, r3
 8003962:	f107 031c 	add.w	r3, r7, #28
 8003966:	2244      	movs	r2, #68	; 0x44
 8003968:	4619      	mov	r1, r3
 800396a:	f008 fb57 	bl	800c01c <memcpy>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nSetting up the Iridium 9603N\r\n", 32, HAL_MAX_DELAY);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f04f 33ff 	mov.w	r3, #4294967295
 8003974:	2220      	movs	r2, #32
 8003976:	4962      	ldr	r1, [pc, #392]	; (8003b00 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1b4>)
 8003978:	f004 ffab 	bl	80088d2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Checking for the device...", 28, HAL_MAX_DELAY);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f04f 33ff 	mov.w	r3, #4294967295
 8003982:	221c      	movs	r2, #28
 8003984:	495f      	ldr	r1, [pc, #380]	; (8003b04 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1b8>)
 8003986:	f004 ffa4 	bl	80088d2 <HAL_UART_Transmit>
	while(!this->isConnected()){
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff f802 	bl	8002994 <_ZN10IridiumSBD11isConnectedEv>
 8003990:	4603      	mov	r3, r0
 8003992:	f083 0301 	eor.w	r3, r3, #1
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d02c      	beq.n	80039f6 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0xaa>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Check if the device is connected. Trying again in\r\n", 53, HAL_MAX_DELAY);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f04f 33ff 	mov.w	r3, #4294967295
 80039a2:	2235      	movs	r2, #53	; 0x35
 80039a4:	4958      	ldr	r1, [pc, #352]	; (8003b08 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1bc>)
 80039a6:	f004 ff94 	bl	80088d2 <HAL_UART_Transmit>
		HAL_Delay(500);
 80039aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039ae:	f001 fa67 	bl	8004e80 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r3", 3, HAL_MAX_DELAY);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f04f 33ff 	mov.w	r3, #4294967295
 80039b8:	2203      	movs	r2, #3
 80039ba:	4954      	ldr	r1, [pc, #336]	; (8003b0c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c0>)
 80039bc:	f004 ff89 	bl	80088d2 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80039c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039c4:	f001 fa5c 	bl	8004e80 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r2", 3, HAL_MAX_DELAY);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f04f 33ff 	mov.w	r3, #4294967295
 80039ce:	2203      	movs	r2, #3
 80039d0:	494f      	ldr	r1, [pc, #316]	; (8003b10 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c4>)
 80039d2:	f004 ff7e 	bl	80088d2 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80039d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039da:	f001 fa51 	bl	8004e80 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r1\r\n", 7, HAL_MAX_DELAY);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f04f 33ff 	mov.w	r3, #4294967295
 80039e4:	2207      	movs	r2, #7
 80039e6:	494b      	ldr	r1, [pc, #300]	; (8003b14 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c8>)
 80039e8:	f004 ff73 	bl	80088d2 <HAL_UART_Transmit>
		HAL_Delay(1000);
 80039ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039f0:	f001 fa46 	bl	8004e80 <HAL_Delay>
	while(!this->isConnected()){
 80039f4:	e7c9      	b.n	800398a <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x3e>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f04f 33ff 	mov.w	r3, #4294967295
 80039fc:	2206      	movs	r2, #6
 80039fe:	4946      	ldr	r1, [pc, #280]	; (8003b18 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8003a00:	f004 ff67 	bl	80088d2 <HAL_UART_Transmit>

	//Activate the superchargers
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Activating the superchargers...", 31, HAL_MAX_DELAY);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f04f 33ff 	mov.w	r3, #4294967295
 8003a0a:	221f      	movs	r2, #31
 8003a0c:	4943      	ldr	r1, [pc, #268]	; (8003b1c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d0>)
 8003a0e:	f004 ff60 	bl	80088d2 <HAL_UART_Transmit>
	this->enableSuperCapCharger(true);
 8003a12:	2101      	movs	r1, #1
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7fe fea1 	bl	800275c <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a20:	2206      	movs	r2, #6
 8003a22:	493d      	ldr	r1, [pc, #244]	; (8003b18 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8003a24:	f004 ff55 	bl	80088d2 <HAL_UART_Transmit>


	//Wait for the supercapacitors to charge
	//int start=millis();
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Waiting for the supercapacitors to charge...", 44, HAL_MAX_DELAY);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a2e:	222c      	movs	r2, #44	; 0x2c
 8003a30:	493b      	ldr	r1, [pc, #236]	; (8003b20 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d4>)
 8003a32:	f004 ff4e 	bl	80088d2 <HAL_UART_Transmit>
	while (!this->checkSuperCapCharger()){
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fe fece 	bl	80027d8 <_ZN10IridiumSBD20checkSuperCapChargerEv>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f083 0301 	eor.w	r3, r3, #1
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x106>
		HAL_Delay(333);
 8003a48:	f240 104d 	movw	r0, #333	; 0x14d
 8003a4c:	f001 fa18 	bl	8004e80 <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 8003a50:	e7f1      	b.n	8003a36 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0xea>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f04f 33ff 	mov.w	r3, #4294967295
 8003a58:	2206      	movs	r2, #6
 8003a5a:	492f      	ldr	r1, [pc, #188]	; (8003b18 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8003a5c:	f004 ff39 	bl	80088d2 <HAL_UART_Transmit>


	//Enable power for the 9603N
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Enabling 9603N power...", 23, HAL_MAX_DELAY);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f04f 33ff 	mov.w	r3, #4294967295
 8003a66:	2217      	movs	r2, #23
 8003a68:	492e      	ldr	r1, [pc, #184]	; (8003b24 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d8>)
 8003a6a:	f004 ff32 	bl	80088d2 <HAL_UART_Transmit>
	this->enable9603Npower(true);
 8003a6e:	2101      	movs	r1, #1
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f7fe fee1 	bl	8002838 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7c:	2206      	movs	r2, #6
 8003a7e:	4926      	ldr	r1, [pc, #152]	; (8003b18 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8003a80:	f004 ff27 	bl	80088d2 <HAL_UART_Transmit>
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Starting Modem...", 17, HAL_MAX_DELAY);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8a:	2211      	movs	r2, #17
 8003a8c:	4926      	ldr	r1, [pc, #152]	; (8003b28 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1dc>)
 8003a8e:	f004 ff20 	bl	80088d2 <HAL_UART_Transmit>
	//this->setPowerProfile(profile);
	int err = this->begin();
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fe fd1a 	bl	80024cc <_ZN10IridiumSBD5beginEv>
 8003a98:	60f8      	str	r0, [r7, #12]
	if (err != ISBD_SUCCESS)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d015      	beq.n	8003acc <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x180>
	  {
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Failed: ", 8, HAL_MAX_DELAY);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003aa6:	2208      	movs	r2, #8
 8003aa8:	4920      	ldr	r1, [pc, #128]	; (8003b2c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e0>)
 8003aaa:	f004 ff12 	bl	80088d2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) err, 4, HAL_MAX_DELAY);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	68f9      	ldr	r1, [r7, #12]
 8003ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	f004 ff0b 	bl	80088d2 <HAL_UART_Transmit>
		this->MRT_Iridium_ErrorMessage(err);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f8b0 	bl	8003c28 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>

	    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e011      	b.n	8003af0 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1a4>
	  }
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "...OK\r\n", 7, HAL_MAX_DELAY);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad2:	2207      	movs	r2, #7
 8003ad4:	4916      	ldr	r1, [pc, #88]	; (8003b30 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e4>)
 8003ad6:	f004 fefc 	bl	80088d2 <HAL_UART_Transmit>

	//Setup default IMEI to 000000000000000 (no IMEI)
	IMEI="000000000000000";
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a15      	ldr	r2, [pc, #84]	; (8003b34 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e8>)
 8003ade:	645a      	str	r2, [r3, #68]	; 0x44

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "End of setup\r\n\r\n", 16, HAL_MAX_DELAY);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	4913      	ldr	r1, [pc, #76]	; (8003b38 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1ec>)
 8003aea:	f004 fef2 	bl	80088d2 <HAL_UART_Transmit>

	return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003afa:	b004      	add	sp, #16
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	08010a08 	.word	0x08010a08
 8003b04:	08010a2c 	.word	0x08010a2c
 8003b08:	08010a48 	.word	0x08010a48
 8003b0c:	08010a7c 	.word	0x08010a7c
 8003b10:	08010a80 	.word	0x08010a80
 8003b14:	08010a84 	.word	0x08010a84
 8003b18:	0801031c 	.word	0x0801031c
 8003b1c:	08010a8c 	.word	0x08010a8c
 8003b20:	08010aac 	.word	0x08010aac
 8003b24:	08010adc 	.word	0x08010adc
 8003b28:	08010af4 	.word	0x08010af4
 8003b2c:	08010b08 	.word	0x08010b08
 8003b30:	08010b14 	.word	0x08010b14
 8003b34:	08010b1c 	.word	0x08010b1c
 8003b38:	08010b2c 	.word	0x08010b2c

08003b3c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 8003b3c:	b590      	push	{r4, r7, lr}
 8003b3e:	b08b      	sub	sp, #44	; 0x2c
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nShutting down the Iridium\r\n", 29, HAL_MAX_DELAY);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4a:	221d      	movs	r2, #29
 8003b4c:	492f      	ldr	r1, [pc, #188]	; (8003c0c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd0>)
 8003b4e:	f004 fec0 	bl	80088d2 <HAL_UART_Transmit>

	// Power down the modem
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Putting the 9603N to sleep...", 29, HAL_MAX_DELAY);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f04f 33ff 	mov.w	r3, #4294967295
 8003b58:	221d      	movs	r2, #29
 8003b5a:	492d      	ldr	r1, [pc, #180]	; (8003c10 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd4>)
 8003b5c:	f004 feb9 	bl	80088d2 <HAL_UART_Transmit>
	int err = this->sleep();
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7fe fcde 	bl	8002522 <_ZN10IridiumSBD5sleepEv>
 8003b66:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d017      	beq.n	8003b9e <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x62>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 8003b6e:	f107 0308 	add.w	r3, r7, #8
 8003b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b74:	4927      	ldr	r1, [pc, #156]	; (8003c14 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd8>)
 8003b76:	4618      	mov	r0, r3
 8003b78:	f009 fad0 	bl	800d11c <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8003b7c:	687c      	ldr	r4, [r7, #4]
 8003b7e:	f107 0308 	add.w	r3, r7, #8
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fc fb4e 	bl	8000224 <strlen>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	f107 0108 	add.w	r1, r7, #8
 8003b90:	f04f 33ff 	mov.w	r3, #4294967295
 8003b94:	4620      	mov	r0, r4
 8003b96:	f004 fe9c 	bl	80088d2 <HAL_UART_Transmit>
		return false;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e032      	b.n	8003c04 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xc8>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba4:	2204      	movs	r2, #4
 8003ba6:	491c      	ldr	r1, [pc, #112]	; (8003c18 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8003ba8:	f004 fe93 	bl	80088d2 <HAL_UART_Transmit>

	// Disable 9603N power
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling 9603N power...", 24, HAL_MAX_DELAY);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb2:	2218      	movs	r2, #24
 8003bb4:	4919      	ldr	r1, [pc, #100]	; (8003c1c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe0>)
 8003bb6:	f004 fe8c 	bl	80088d2 <HAL_UART_Transmit>
	this->enable9603Npower(false);
 8003bba:	2100      	movs	r1, #0
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7fe fe3b 	bl	8002838 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc8:	2204      	movs	r2, #4
 8003bca:	4913      	ldr	r1, [pc, #76]	; (8003c18 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8003bcc:	f004 fe81 	bl	80088d2 <HAL_UART_Transmit>

	// Disable the supercapacitor charger
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling the supercapacitor charger...", 39, HAL_MAX_DELAY);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd6:	2227      	movs	r2, #39	; 0x27
 8003bd8:	4911      	ldr	r1, [pc, #68]	; (8003c20 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe4>)
 8003bda:	f004 fe7a 	bl	80088d2 <HAL_UART_Transmit>
	this->enableSuperCapCharger(false);
 8003bde:	2100      	movs	r1, #0
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7fe fdbb 	bl	800275c <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bec:	2204      	movs	r2, #4
 8003bee:	490a      	ldr	r1, [pc, #40]	; (8003c18 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8003bf0:	f004 fe6f 	bl	80088d2 <HAL_UART_Transmit>

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Iridium successfully shutdown\r\n", 32, HAL_MAX_DELAY);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	4909      	ldr	r1, [pc, #36]	; (8003c24 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe8>)
 8003bfe:	f004 fe68 	bl	80088d2 <HAL_UART_Transmit>
	return true;
 8003c02:	2301      	movs	r3, #1
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	372c      	adds	r7, #44	; 0x2c
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd90      	pop	{r4, r7, pc}
 8003c0c:	08010b40 	.word	0x08010b40
 8003c10:	08010b60 	.word	0x08010b60
 8003c14:	08010b80 	.word	0x08010b80
 8003c18:	0801031c 	.word	0x0801031c
 8003c1c:	08010b9c 	.word	0x08010b9c
 8003c20:	08010bb8 	.word	0x08010bb8
 8003c24:	08010be0 	.word	0x08010be0

08003c28 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>:



void IridiumSBD::MRT_Iridium_ErrorMessage(uint8_t error){
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nError:\t", 12, HAL_MAX_DELAY);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3a:	220c      	movs	r2, #12
 8003c3c:	4948      	ldr	r1, [pc, #288]	; (8003d60 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x138>)
 8003c3e:	f004 fe48 	bl	80088d2 <HAL_UART_Transmit>
	if (error == ISBD_ALREADY_AWAKE){
 8003c42:	78fb      	ldrb	r3, [r7, #3]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d107      	bne.n	8003c58 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x30>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Already Awake\r\n", 17, HAL_MAX_DELAY);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4e:	2211      	movs	r2, #17
 8003c50:	4944      	ldr	r1, [pc, #272]	; (8003d64 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x13c>)
 8003c52:	f004 fe3e 	bl	80088d2 <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
	}
	else{
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
	}
}
 8003c56:	e07f      	b.n	8003d58 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SERIAL_FAILURE){
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d107      	bne.n	8003c6e <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x46>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Serial Failure\r\n", 18, HAL_MAX_DELAY);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f04f 33ff 	mov.w	r3, #4294967295
 8003c64:	2212      	movs	r2, #18
 8003c66:	4940      	ldr	r1, [pc, #256]	; (8003d68 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x140>)
 8003c68:	f004 fe33 	bl	80088d2 <HAL_UART_Transmit>
}
 8003c6c:	e074      	b.n	8003d58 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_PROTOCOL_ERROR){
 8003c6e:	78fb      	ldrb	r3, [r7, #3]
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	d107      	bne.n	8003c84 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x5c>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Protocol Error\r\n", 18, HAL_MAX_DELAY);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f04f 33ff 	mov.w	r3, #4294967295
 8003c7a:	2212      	movs	r2, #18
 8003c7c:	493b      	ldr	r1, [pc, #236]	; (8003d6c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x144>)
 8003c7e:	f004 fe28 	bl	80088d2 <HAL_UART_Transmit>
}
 8003c82:	e069      	b.n	8003d58 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_CANCELLED){
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d107      	bne.n	8003c9a <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x72>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nCancelled", 13, HAL_MAX_DELAY);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c90:	220d      	movs	r2, #13
 8003c92:	4937      	ldr	r1, [pc, #220]	; (8003d70 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x148>)
 8003c94:	f004 fe1d 	bl	80088d2 <HAL_UART_Transmit>
}
 8003c98:	e05e      	b.n	8003d58 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_MODEM_DETECTED){
 8003c9a:	78fb      	ldrb	r3, [r7, #3]
 8003c9c:	2b05      	cmp	r3, #5
 8003c9e:	d107      	bne.n	8003cb0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x88>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nNo modem detected: check wiring.", 36, HAL_MAX_DELAY);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca6:	2224      	movs	r2, #36	; 0x24
 8003ca8:	4932      	ldr	r1, [pc, #200]	; (8003d74 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x14c>)
 8003caa:	f004 fe12 	bl	80088d2 <HAL_UART_Transmit>
}
 8003cae:	e053      	b.n	8003d58 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	2b06      	cmp	r3, #6
 8003cb4:	d107      	bne.n	8003cc6 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x9e>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "SDBIX Fatal Error\r\n", 21, HAL_MAX_DELAY);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cbc:	2215      	movs	r2, #21
 8003cbe:	492e      	ldr	r1, [pc, #184]	; (8003d78 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x150>)
 8003cc0:	f004 fe07 	bl	80088d2 <HAL_UART_Transmit>
}
 8003cc4:	e048      	b.n	8003d58 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 8003cc6:	78fb      	ldrb	r3, [r7, #3]
 8003cc8:	2b07      	cmp	r3, #7
 8003cca:	d107      	bne.n	8003cdc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xb4>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Send-Receive Timeout\r\n", 24, HAL_MAX_DELAY);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f04f 33ff 	mov.w	r3, #4294967295
 8003cd2:	2218      	movs	r2, #24
 8003cd4:	4929      	ldr	r1, [pc, #164]	; (8003d7c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x154>)
 8003cd6:	f004 fdfc 	bl	80088d2 <HAL_UART_Transmit>
}
 8003cda:	e03d      	b.n	8003d58 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_RX_OVERFLOW){
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d107      	bne.n	8003cf2 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xca>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "RX Overflow\r\n", 15, HAL_MAX_DELAY);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce8:	220f      	movs	r2, #15
 8003cea:	4925      	ldr	r1, [pc, #148]	; (8003d80 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x158>)
 8003cec:	f004 fdf1 	bl	80088d2 <HAL_UART_Transmit>
}
 8003cf0:	e032      	b.n	8003d58 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_REENTRANT){
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	2b09      	cmp	r3, #9
 8003cf6:	d107      	bne.n	8003d08 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe0>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "REENTRANT\r\n", 13, HAL_MAX_DELAY);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003cfe:	220d      	movs	r2, #13
 8003d00:	4920      	ldr	r1, [pc, #128]	; (8003d84 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x15c>)
 8003d02:	f004 fde6 	bl	80088d2 <HAL_UART_Transmit>
}
 8003d06:	e027      	b.n	8003d58 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_IS_ASLEEP){
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	2b0a      	cmp	r3, #10
 8003d0c:	d107      	bne.n	8003d1e <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf6>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Is Asleep\r\n", 13, HAL_MAX_DELAY);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f04f 33ff 	mov.w	r3, #4294967295
 8003d14:	220d      	movs	r2, #13
 8003d16:	491c      	ldr	r1, [pc, #112]	; (8003d88 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x160>)
 8003d18:	f004 fddb 	bl	80088d2 <HAL_UART_Transmit>
}
 8003d1c:	e01c      	b.n	8003d58 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_SLEEP_PIN){
 8003d1e:	78fb      	ldrb	r3, [r7, #3]
 8003d20:	2b0b      	cmp	r3, #11
 8003d22:	d107      	bne.n	8003d34 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x10c>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "No Sleep Pin\r\n", 16, HAL_MAX_DELAY);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2a:	2210      	movs	r2, #16
 8003d2c:	4917      	ldr	r1, [pc, #92]	; (8003d8c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x164>)
 8003d2e:	f004 fdd0 	bl	80088d2 <HAL_UART_Transmit>
}
 8003d32:	e011      	b.n	8003d58 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if(error == 20){
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	2b14      	cmp	r3, #20
 8003d38:	d107      	bne.n	8003d4a <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x122>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d40:	2216      	movs	r2, #22
 8003d42:	4913      	ldr	r1, [pc, #76]	; (8003d90 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x168>)
 8003d44:	f004 fdc5 	bl	80088d2 <HAL_UART_Transmit>
}
 8003d48:	e006      	b.n	8003d58 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d50:	220b      	movs	r2, #11
 8003d52:	4910      	ldr	r1, [pc, #64]	; (8003d94 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x16c>)
 8003d54:	f004 fdbd 	bl	80088d2 <HAL_UART_Transmit>
}
 8003d58:	bf00      	nop
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	08010c00 	.word	0x08010c00
 8003d64:	08010c0c 	.word	0x08010c0c
 8003d68:	08010c1c 	.word	0x08010c1c
 8003d6c:	08010c30 	.word	0x08010c30
 8003d70:	08010c44 	.word	0x08010c44
 8003d74:	08010c50 	.word	0x08010c50
 8003d78:	08010c74 	.word	0x08010c74
 8003d7c:	08010c88 	.word	0x08010c88
 8003d80:	08010ca0 	.word	0x08010ca0
 8003d84:	08010cb0 	.word	0x08010cb0
 8003d88:	08010cbc 	.word	0x08010cbc
 8003d8c:	08010cc8 	.word	0x08010cc8
 8003d90:	08010cd8 	.word	0x08010cd8
 8003d94:	08010cf0 	.word	0x08010cf0

08003d98 <_Z10st_pinModeP12GPIO_TypeDefhi>:


//Define a version of pinMode for st to convert arduino's pinMode with macro
void st_pinMode(GPIO_TypeDef* PIN_NAME_GPIO_Port,uint8_t PIN_NAME_Pin,int i){
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08a      	sub	sp, #40	; 0x28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	460b      	mov	r3, r1
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	72fb      	strb	r3, [r7, #11]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da6:	f107 0314 	add.w	r3, r7, #20
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	609a      	str	r2, [r3, #8]
 8003db2:	60da      	str	r2, [r3, #12]
 8003db4:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pin Output Level */
	if (i==1){
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d106      	bne.n	8003dca <_Z10st_pinModeP12GPIO_TypeDefhi+0x32>
		HAL_GPIO_WritePin(PIN_NAME_GPIO_Port, PIN_NAME_Pin, GPIO_PIN_RESET);
 8003dbc:	7afb      	ldrb	r3, [r7, #11]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f001 fb3f 	bl	8005448 <HAL_GPIO_WritePin>
	}
	/*Configure GPIO pin */
	GPIO_InitStruct.Pin = PIN_NAME_Pin;
 8003dca:	7afb      	ldrb	r3, [r7, #11]
 8003dcc:	617b      	str	r3, [r7, #20]
	if (i==1) {
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d102      	bne.n	8003dda <_Z10st_pinModeP12GPIO_TypeDefhi+0x42>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	61bb      	str	r3, [r7, #24]
 8003dd8:	e001      	b.n	8003dde <_Z10st_pinModeP12GPIO_TypeDefhi+0x46>
	}
	else{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61bb      	str	r3, [r7, #24]
	}
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de2:	2300      	movs	r3, #0
 8003de4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(PIN_NAME_GPIO_Port, &GPIO_InitStruct);
 8003de6:	f107 0314 	add.w	r3, r7, #20
 8003dea:	4619      	mov	r1, r3
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f001 f97f 	bl	80050f0 <HAL_GPIO_Init>
}
 8003df2:	bf00      	nop
 8003df4:	3728      	adds	r7, #40	; 0x28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>:


/*
 * This function requests the time
 */
boolean IridiumSBD::MRT_Iridium_getTime(void){
 8003dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dfe:	b0a1      	sub	sp, #132	; 0x84
 8003e00:	af04      	add	r7, sp, #16
 8003e02:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nRetrieving time\r\n", 20, HAL_MAX_DELAY);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0a:	2214      	movs	r2, #20
 8003e0c:	4928      	ldr	r1, [pc, #160]	; (8003eb0 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xb4>)
 8003e0e:	f004 fd60 	bl	80088d2 <HAL_UART_Transmit>
	struct tm t; // struct tm is defined in time.h
	int err = this->getSystemTime(t); // Ask the 9603N for the system time
 8003e12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e16:	4619      	mov	r1, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7fe fbdb 	bl	80025d4 <_ZN10IridiumSBD13getSystemTimeER2tm>
 8003e1e:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (err == ISBD_SUCCESS) // Was it successful?
 8003e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d125      	bne.n	8003e72 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x76>
	    {
		char buf[61];
		sprintf(buf, "\r\n<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 8003e26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		sprintf(buf, "\r\n<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 8003e28:	f203 756c 	addw	r5, r3, #1900	; 0x76c
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 8003e2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		sprintf(buf, "\r\n<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 8003e2e:	1c5e      	adds	r6, r3, #1
 8003e30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e34:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003e36:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003e38:	f107 0408 	add.w	r4, r7, #8
 8003e3c:	9003      	str	r0, [sp, #12]
 8003e3e:	9102      	str	r1, [sp, #8]
 8003e40:	9201      	str	r2, [sp, #4]
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	4633      	mov	r3, r6
 8003e46:	462a      	mov	r2, r5
 8003e48:	491a      	ldr	r1, [pc, #104]	; (8003eb4 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xb8>)
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f009 f966 	bl	800d11c <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) buf, strlen(buf), HAL_MAX_DELAY);
 8003e50:	687c      	ldr	r4, [r7, #4]
 8003e52:	f107 0308 	add.w	r3, r7, #8
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fc f9e4 	bl	8000224 <strlen>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	f107 0108 	add.w	r1, r7, #8
 8003e64:	f04f 33ff 	mov.w	r3, #4294967295
 8003e68:	4620      	mov	r0, r4
 8003e6a:	f004 fd32 	bl	80088d2 <HAL_UART_Transmit>
		return true;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e019      	b.n	8003ea6 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xaa>
	}

	else if (err == ISBD_NO_NETWORK) // Did it fail because the 9603N has not yet seen the network?
 8003e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e74:	2b0c      	cmp	r3, #12
 8003e76:	d108      	bne.n	8003e8a <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x8e>
	     {
	  	 HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nNo network detected.\r\n", 28, HAL_MAX_DELAY);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e7e:	221c      	movs	r2, #28
 8003e80:	490d      	ldr	r1, [pc, #52]	; (8003eb8 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xbc>)
 8003e82:	f004 fd26 	bl	80088d2 <HAL_UART_Transmit>
	   	 return false;
 8003e86:	2300      	movs	r3, #0
 8003e88:	e00d      	b.n	8003ea6 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xaa>
	}

	else
	    {
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nUnexpected Error ", 21, HAL_MAX_DELAY);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e90:	2215      	movs	r2, #21
 8003e92:	490a      	ldr	r1, [pc, #40]	; (8003ebc <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xc0>)
 8003e94:	f004 fd1d 	bl	80088d2 <HAL_UART_Transmit>
		this->MRT_Iridium_ErrorMessage(err);
 8003e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff fec2 	bl	8003c28 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 8003ea4:	2300      	movs	r3, #0
	}
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3774      	adds	r7, #116	; 0x74
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	08010e10 	.word	0x08010e10
 8003eb4:	08010e24 	.word	0x08010e24
 8003eb8:	08010e5c 	.word	0x08010e5c
 8003ebc:	08010e78 	.word	0x08010e78

08003ec0 <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);
   }
   */

   IridiumSBD(TwoWire &wirePort = Wire, uint8_t deviceAddress = 0x63)
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	71fb      	strb	r3, [r7, #7]
   {
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2205      	movs	r2, #5
 8003eda:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2204      	movs	r2, #4
 8003ef2:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2208      	movs	r2, #8
 8003efa:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2210      	movs	r2, #16
 8003f02:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2240      	movs	r2, #64	; 0x40
 8003f12:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
      useSerial = false;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      wireport = &wirePort;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	64da      	str	r2, [r3, #76]	; 0x4c
      deviceaddress = deviceAddress;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	79fa      	ldrb	r2, [r7, #7]
 8003f28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	221e      	movs	r2, #30
 8003f30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	221e      	movs	r2, #30
 8003f38:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f42:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	22f0      	movs	r2, #240	; 0xf0
 8003f4a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
      remainingMessages = -1;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f04f 32ff 	mov.w	r2, #4294967295
 8003f54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
      asleep = true;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
      reentrant = false;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
      sleepPin = -1;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
      sleepPinConfigured = false;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
      ringPin = -1;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f80:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
      msstmWorkaroundRequested = false;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      ringAlertsEnabled = true;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
      ringAsserted = false;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      lastPowerOnTime = 0UL;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
      head = SBDRING;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	4a0d      	ldr	r2, [pc, #52]	; (8003fdc <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 8003fa8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      tail = SBDRING;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4a0b      	ldr	r2, [pc, #44]	; (8003fdc <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 8003fb0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
      nextChar = -1;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fba:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      i2c_ser_buffer_tail = 0;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      i2c_ser_buffer_head = 0;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   }
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	080112b8 	.word	0x080112b8

08003fe0 <MRT_Static_Iridium_Constructor>:
#endif

static IridiumSBD *E_T = NULL;


void MRT_Static_Iridium_Constructor(){
 8003fe0:	b598      	push	{r3, r4, r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
	if (E_T==NULL){
 8003fe4:	4b08      	ldr	r3, [pc, #32]	; (8004008 <MRT_Static_Iridium_Constructor+0x28>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10b      	bne.n	8004004 <MRT_Static_Iridium_Constructor+0x24>
		E_T = new IridiumSBD();
 8003fec:	20e4      	movs	r0, #228	; 0xe4
 8003fee:	f007 fd8d 	bl	800bb0c <_Znwj>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	461c      	mov	r4, r3
 8003ff6:	2263      	movs	r2, #99	; 0x63
 8003ff8:	4904      	ldr	r1, [pc, #16]	; (800400c <MRT_Static_Iridium_Constructor+0x2c>)
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	f7ff ff60 	bl	8003ec0 <_ZN10IridiumSBDC1ER7TwoWireh>
 8004000:	4b01      	ldr	r3, [pc, #4]	; (8004008 <MRT_Static_Iridium_Constructor+0x28>)
 8004002:	601c      	str	r4, [r3, #0]
	}
}
 8004004:	bf00      	nop
 8004006:	bd98      	pop	{r3, r4, r7, pc}
 8004008:	20000298 	.word	0x20000298
 800400c:	2000029c 	.word	0x2000029c

08004010 <MRT_Static_Iridium_Destructor>:

void MRT_Static_Iridium_Destructor(){
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
	if (E_T!=NULL){
 8004014:	4b05      	ldr	r3, [pc, #20]	; (800402c <MRT_Static_Iridium_Destructor+0x1c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <MRT_Static_Iridium_Destructor+0x12>
		E_T = NULL;
 800401c:	4b03      	ldr	r3, [pc, #12]	; (800402c <MRT_Static_Iridium_Destructor+0x1c>)
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
	}
}
 8004022:	bf00      	nop
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	20000298 	.word	0x20000298

08004030 <MRT_Static_Iridium_Setup>:


uint8_t MRT_Static_Iridium_Setup(UART_HandleTypeDef huart){
 8004030:	b084      	sub	sp, #16
 8004032:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004034:	b08f      	sub	sp, #60	; 0x3c
 8004036:	af0e      	add	r7, sp, #56	; 0x38
 8004038:	f107 0418 	add.w	r4, r7, #24
 800403c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MRT_Static_Iridium_Constructor();
 8004040:	f7ff ffce 	bl	8003fe0 <MRT_Static_Iridium_Constructor>
	return E_T->MRT_Iridium_setup(huart);
 8004044:	4b0e      	ldr	r3, [pc, #56]	; (8004080 <MRT_Static_Iridium_Setup+0x50>)
 8004046:	681e      	ldr	r6, [r3, #0]
 8004048:	466d      	mov	r5, sp
 800404a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800404e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004056:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004058:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800405a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800405e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004062:	f107 0318 	add.w	r3, r7, #24
 8004066:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004068:	4630      	mov	r0, r6
 800406a:	f7ff fc6f 	bl	800394c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef>
 800406e:	4603      	mov	r3, r0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3704      	adds	r7, #4
 8004074:	46bd      	mov	sp, r7
 8004076:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800407a:	b004      	add	sp, #16
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	20000298 	.word	0x20000298

08004084 <MRT_Static_Iridium_Shutdown>:

bool MRT_Static_Iridium_Shutdown(void){
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 800408a:	4b09      	ldr	r3, [pc, #36]	; (80040b0 <MRT_Static_Iridium_Shutdown+0x2c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff fd54 	bl	8003b3c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	bf14      	ite	ne
 800409a:	2301      	movne	r3, #1
 800409c:	2300      	moveq	r3, #0
 800409e:	71fb      	strb	r3, [r7, #7]
	MRT_Static_Iridium_Destructor();
 80040a0:	f7ff ffb6 	bl	8004010 <MRT_Static_Iridium_Destructor>
	return b;
 80040a4:	79fb      	ldrb	r3, [r7, #7]
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000298 	.word	0x20000298

080040b4 <MRT_Static_Iridium_getTime>:
bool MRT_Static_Iridium_NetworkAvailability(){
	return E_T->MRT_Iridium_NetworkAvailability();
}


bool MRT_Static_Iridium_getTime(void){
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getTime();
 80040b8:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <MRT_Static_Iridium_getTime+0x20>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff fe9d 	bl	8003dfc <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf14      	ite	ne
 80040c8:	2301      	movne	r3, #1
 80040ca:	2300      	moveq	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000298 	.word	0x20000298

080040d8 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80040d8:	b590      	push	{r4, r7, lr}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <_ZN5Print5writeEPKc+0x14>
 80040e8:	2300      	movs	r3, #0
 80040ea:	e00d      	b.n	8004108 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3304      	adds	r3, #4
 80040f2:	681c      	ldr	r4, [r3, #0]
 80040f4:	6838      	ldr	r0, [r7, #0]
 80040f6:	f7fc f895 	bl	8000224 <strlen>
 80040fa:	4603      	mov	r3, r0
 80040fc:	461a      	mov	r2, r3
 80040fe:	6839      	ldr	r1, [r7, #0]
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	47a0      	blx	r4
 8004104:	4603      	mov	r3, r0
 8004106:	bf00      	nop
    }
 8004108:	4618      	mov	r0, r3
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	bd90      	pop	{r4, r7, pc}

08004110 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	1e5a      	subs	r2, r3, #1
 8004124:	607a      	str	r2, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	bf14      	ite	ne
 800412a:	2301      	movne	r3, #1
 800412c:	2300      	moveq	r3, #0
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00e      	beq.n	8004152 <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	1c59      	adds	r1, r3, #1
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	4619      	mov	r1, r3
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	4790      	blx	r2
 8004148:	4602      	mov	r2, r0
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	4413      	add	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
  while (size--) {
 8004150:	e7e6      	b.n	8004120 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 8004152:	697b      	ldr	r3, [r7, #20]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 8004166:	6839      	ldr	r1, [r7, #0]
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f805 	bl	8004178 <_ZN5Print5printEPKc>
 800416e:	4603      	mov	r3, r0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  return write(str);
 8004182:	6839      	ldr	r1, [r7, #0]
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff ffa7 	bl	80040d8 <_ZN5Print5writeEPKc>
 800418a:	4603      	mov	r3, r0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	4a06      	ldr	r2, [pc, #24]	; (80041b8 <_ZN5PrintC1Ev+0x24>)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	605a      	str	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4618      	mov	r0, r3
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	080112cc 	.word	0x080112cc

080041bc <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff ffe4 	bl	8004194 <_ZN5PrintC1Ev>
 80041cc:	4a05      	ldr	r2, [pc, #20]	; (80041e4 <_ZN6StreamC1Ev+0x28>)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041d8:	609a      	str	r2, [r3, #8]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	080112fc 	.word	0x080112fc

080041e8 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff ffe1 	bl	80041bc <_ZN6StreamC1Ev>
 80041fa:	4a16      	ldr	r2, [pc, #88]	; (8004254 <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3390      	adds	r3, #144	; 0x90
 800420a:	2220      	movs	r2, #32
 800420c:	2100      	movs	r1, #0
 800420e:	4618      	mov	r0, r3
 8004210:	f007 ff2c 	bl	800c06c <memset>
  rxBufferIndex = 0;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4618      	mov	r0, r3
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	080112dc 	.word	0x080112dc

08004258 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af02      	add	r7, sp, #8
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	4608      	mov	r0, r1
 8004262:	4611      	mov	r1, r2
 8004264:	461a      	mov	r2, r3
 8004266:	4603      	mov	r3, r0
 8004268:	70fb      	strb	r3, [r7, #3]
 800426a:	460b      	mov	r3, r1
 800426c:	70bb      	strb	r3, [r7, #2]
 800426e:	4613      	mov	r3, r2
 8004270:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 fc24 	bl	8004ac0 <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 8004278:	78bb      	ldrb	r3, [r7, #2]
 800427a:	2b20      	cmp	r3, #32
 800427c:	d901      	bls.n	8004282 <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 800427e:	2320      	movs	r3, #32
 8004280:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	b2d9      	uxtb	r1, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800428e:	78b8      	ldrb	r0, [r7, #2]
 8004290:	787b      	ldrb	r3, [r7, #1]
 8004292:	9300      	str	r3, [sp, #0]
 8004294:	4603      	mov	r3, r0
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f9cf 	bl	800463a <_ZN7TwoWire15i2c_master_readEhPchh>
 800429c:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	da02      	bge.n	80042aa <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 80042a4:	2300      	movs	r3, #0
 80042a6:	73fb      	strb	r3, [r7, #15]
 80042a8:	e001      	b.n	80042ae <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	7bfa      	ldrb	r2, [r7, #15]
 80042ba:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 fbcc 	bl	8004a5c <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	460b      	mov	r3, r1
 80042d8:	70fb      	strb	r3, [r7, #3]
 80042da:	4613      	mov	r3, r2
 80042dc:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80042de:	78ba      	ldrb	r2, [r7, #2]
 80042e0:	78f9      	ldrb	r1, [r7, #3]
 80042e2:	2301      	movs	r3, #1
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ffb7 	bl	8004258 <_ZN7TwoWire11requestFromEhhh>
 80042ea:	4603      	mov	r3, r0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3708      	adds	r7, #8
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr

0800432a <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b086      	sub	sp, #24
 800432e:	af02      	add	r7, sp, #8
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	460b      	mov	r3, r1
 8004334:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 fbc2 	bl	8004ac0 <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	7c1b      	ldrb	r3, [r3, #16]
 8004340:	0059      	lsls	r1, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f103 0211 	add.w	r2, r3, #17
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800434e:	4618      	mov	r0, r3
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	4603      	mov	r3, r0
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fa00 	bl	800475c <_ZN7TwoWire16i2c_master_writeEiPKcii>
 800435c:	4603      	mov	r3, r0
 800435e:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fb6f 	bl	8004a5c <_ZN7TwoWire15enableInterruptEv>

  return ret;
 800437e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 8004390:	2101      	movs	r1, #1
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff ffc9 	bl	800432a <_ZN7TwoWire15endTransmissionEh>
 8004398:	4603      	mov	r3, r0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	460b      	mov	r3, r1
 80043ac:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01d      	beq.n	80043f4 <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80043be:	2b1f      	cmp	r3, #31
 80043c0:	d901      	bls.n	80043c6 <_ZN7TwoWire5writeEh+0x24>
      return 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	e028      	b.n	8004418 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043cc:	4619      	mov	r1, r3
 80043ce:	78fa      	ldrb	r2, [r7, #3]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	440b      	add	r3, r1
 80043d4:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043dc:	3301      	adds	r3, #1
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80043f2:	e010      	b.n	8004416 <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 fb63 	bl	8004ac0 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 80043fa:	1cfb      	adds	r3, r7, #3
 80043fc:	2201      	movs	r2, #1
 80043fe:	4619      	mov	r1, r3
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 fa95 	bl	8004930 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fb28 	bl	8004a5c <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	333c      	adds	r3, #60	; 0x3c
 8004410:	4618      	mov	r0, r3
 8004412:	f001 fdc5 	bl	8005fa0 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 8004416:	2301      	movs	r3, #1
}
 8004418:	4618      	mov	r0, r3
 800441a:	3708      	adds	r7, #8
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  if(transmitting){
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004432:	2b00      	cmp	r3, #0
 8004434:	d013      	beq.n	800445e <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 8004436:	2300      	movs	r3, #0
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	429a      	cmp	r2, r3
 8004440:	d21e      	bcs.n	8004480 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	440a      	add	r2, r1
 800444e:	7812      	ldrb	r2, [r2, #0]
 8004450:	4611      	mov	r1, r2
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	3301      	adds	r3, #1
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	e7ed      	b.n	800443a <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 fb2e 	bl	8004ac0 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	461a      	mov	r2, r3
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fa60 	bl	8004930 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 faf3 	bl	8004a5c <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	333c      	adds	r3, #60	; 0x3c
 800447a:	4618      	mov	r0, r3
 800447c:	f001 fd90 	bl	8005fa0 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 8004480:	687b      	ldr	r3, [r7, #4]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004498:	b2db      	uxtb	r3, r3
 800449a:	461a      	mov	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	1ad3      	subs	r3, r2, r3
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	370c      	adds	r7, #12
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b085      	sub	sp, #20
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  int value = -1;
 80044ba:	f04f 33ff 	mov.w	r3, #4294967295
 80044be:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	429a      	cmp	r2, r3
 80044d2:	bf34      	ite	cc
 80044d4:	2301      	movcc	r3, #1
 80044d6:	2300      	movcs	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d012      	beq.n	8004504 <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	461a      	mov	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4413      	add	r3, r2
 80044ec:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80044f0:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	3301      	adds	r3, #1
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 8004504:	68fb      	ldr	r3, [r7, #12]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 8004512:	b480      	push	{r7}
 8004514:	b085      	sub	sp, #20
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  int value = -1;
 800451a:	f04f 33ff 	mov.w	r3, #4294967295
 800451e:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004526:	b2da      	uxtb	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800452e:	b2db      	uxtb	r3, r3
 8004530:	429a      	cmp	r2, r3
 8004532:	bf34      	ite	cc
 8004534:	2301      	movcc	r3, #1
 8004536:	2300      	movcs	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d009      	beq.n	8004552 <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004544:	b2db      	uxtb	r3, r3
 8004546:	461a      	mov	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4413      	add	r3, r2
 800454c:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004550:	60fb      	str	r3, [r7, #12]
  }

  return value;
 8004552:	68fb      	ldr	r3, [r7, #12]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004580:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004586:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800458a:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 800458c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004590:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800459a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800459e:	bf0c      	ite	eq
 80045a0:	2301      	moveq	r3, #1
 80045a2:	2300      	movne	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00b      	beq.n	80045c2 <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1e5a      	subs	r2, r3, #1
 80045ae:	60fa      	str	r2, [r7, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bf0c      	ite	eq
 80045b4:	2301      	moveq	r3, #1
 80045b6:	2300      	movne	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0e9      	beq.n	8004592 <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 80045be:	2301      	movs	r3, #1
 80045c0:	e021      	b.n	8004606 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 80045ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045d2:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b01      	cmp	r3, #1
 80045e0:	bf14      	ite	ne
 80045e2:	2301      	movne	r3, #1
 80045e4:	2300      	moveq	r3, #0
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00b      	beq.n	8004604 <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	1e5a      	subs	r2, r3, #1
 80045f0:	60fa      	str	r2, [r7, #12]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	bf0c      	ite	eq
 80045f6:	2301      	moveq	r3, #1
 80045f8:	2300      	movne	r3, #0
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0e9      	beq.n	80045d4 <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800461e:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	601a      	str	r2, [r3, #0]

    return 0;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b08a      	sub	sp, #40	; 0x28
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	607a      	str	r2, [r7, #4]
 8004644:	461a      	mov	r2, r3
 8004646:	460b      	mov	r3, r1
 8004648:	72fb      	strb	r3, [r7, #11]
 800464a:	4613      	mov	r3, r2
 800464c:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004652:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f7ff ff8d 	bl	8004574 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 800465a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b01      	cmp	r3, #1
 800466c:	bf14      	ite	ne
 800466e:	2301      	movne	r3, #1
 8004670:	2300      	moveq	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 8004678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467a:	3b01      	subs	r3, #1
 800467c:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 800467e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1ed      	bne.n	8004660 <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 8004684:	f04f 33ff 	mov.w	r3, #4294967295
 8004688:	e064      	b.n	8004754 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 800468a:	7afb      	ldrb	r3, [r7, #11]
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	b2db      	uxtb	r3, r3
 8004692:	461a      	mov	r2, r3
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 8004698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800469c:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	bf14      	ite	ne
 80046ac:	2301      	movne	r3, #1
 80046ae:	2300      	moveq	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d008      	beq.n	80046c8 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	3b01      	subs	r3, #1
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1ed      	bne.n	800469e <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 80046c2:	f04f 33ff 	mov.w	r3, #4294967295
 80046c6:	e045      	b.n	8004754 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 80046c8:	2300      	movs	r3, #0
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	613b      	str	r3, [r7, #16]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	613b      	str	r3, [r7, #16]
 80046dc:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 80046de:	2300      	movs	r3, #0
 80046e0:	623b      	str	r3, [r7, #32]
 80046e2:	7abb      	ldrb	r3, [r7, #10]
 80046e4:	3b01      	subs	r3, #1
 80046e6:	6a3a      	ldr	r2, [r7, #32]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	da17      	bge.n	800471c <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 80046ec:	f107 0314 	add.w	r3, r7, #20
 80046f0:	2200      	movs	r2, #0
 80046f2:	4619      	mov	r1, r3
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f8a4 	bl	8004842 <_ZN7TwoWire20i2c_master_byte_readEPii>
 80046fa:	61b8      	str	r0, [r7, #24]
        if(ret)
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 8004702:	f04f 33ff 	mov.w	r3, #4294967295
 8004706:	e025      	b.n	8004754 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 8004708:	6979      	ldr	r1, [r7, #20]
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	4413      	add	r3, r2
 8004710:	b2ca      	uxtb	r2, r1
 8004712:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 8004714:	6a3b      	ldr	r3, [r7, #32]
 8004716:	3301      	adds	r3, #1
 8004718:	623b      	str	r3, [r7, #32]
 800471a:	e7e2      	b.n	80046e2 <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 800471c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f7ff ff74 	bl	8004612 <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 800472a:	f107 0314 	add.w	r3, r7, #20
 800472e:	2201      	movs	r2, #1
 8004730:	4619      	mov	r1, r3
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 f885 	bl	8004842 <_ZN7TwoWire20i2c_master_byte_readEPii>
 8004738:	61b8      	str	r0, [r7, #24]
    if(ret)
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d002      	beq.n	8004746 <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 8004740:	f04f 33ff 	mov.w	r3, #4294967295
 8004744:	e006      	b.n	8004754 <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 8004746:	6979      	ldr	r1, [r7, #20]
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	4413      	add	r3, r2
 800474e:	b2ca      	uxtb	r2, r1
 8004750:	701a      	strb	r2, [r3, #0]

    return length;
 8004752:	7abb      	ldrb	r3, [r7, #10]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3728      	adds	r7, #40	; 0x28
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476e:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f7ff feff 	bl	8004574 <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8004776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800477a:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b01      	cmp	r3, #1
 8004788:	bf14      	ite	ne
 800478a:	2301      	movne	r3, #1
 800478c:	2300      	moveq	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d007      	beq.n	80047a4 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	3b01      	subs	r3, #1
 8004798:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1ed      	bne.n	800477c <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 80047a0:	2304      	movs	r3, #4
 80047a2:	e04a      	b.n	800483a <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 80047b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047b4:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f003 0302 	and.w	r3, r3, #2
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	bf14      	ite	ne
 80047c4:	2301      	movne	r3, #1
 80047c6:	2300      	moveq	r3, #0
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d007      	beq.n	80047de <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1ed      	bne.n	80047b6 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 80047da:	2302      	movs	r3, #2
 80047dc:	e02d      	b.n	800483a <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	613b      	str	r3, [r7, #16]
 80047f2:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 80047f4:	2300      	movs	r3, #0
 80047f6:	61bb      	str	r3, [r7, #24]
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	da15      	bge.n	800482c <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	4413      	add	r3, r2
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	4619      	mov	r1, r3
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f000 f85a 	bl	80048c4 <_ZN7TwoWire21i2c_master_byte_writeEi>
 8004810:	4603      	mov	r3, r0
 8004812:	2b01      	cmp	r3, #1
 8004814:	bf14      	ite	ne
 8004816:	2301      	movne	r3, #1
 8004818:	2300      	moveq	r3, #0
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 8004820:	2303      	movs	r3, #3
 8004822:	e00a      	b.n	800483a <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	3301      	adds	r3, #1
 8004828:	61bb      	str	r3, [r7, #24]
 800482a:	e7e5      	b.n	80047f8 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 800482c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482e:	2b00      	cmp	r3, #0
 8004830:	d002      	beq.n	8004838 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 8004832:	68f8      	ldr	r0, [r7, #12]
 8004834:	f7ff feed 	bl	8004612 <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3720      	adds	r7, #32
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 8004842:	b480      	push	{r7}
 8004844:	b087      	sub	sp, #28
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004852:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d006      	beq.n	8004868 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	e005      	b.n	8004874 <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 8004874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004878:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004884:	2b40      	cmp	r3, #64	; 0x40
 8004886:	bf14      	ite	ne
 8004888:	2301      	movne	r3, #1
 800488a:	2300      	moveq	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00c      	beq.n	80048ac <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	1e5a      	subs	r2, r3, #1
 8004896:	617a      	str	r2, [r7, #20]
 8004898:	2b00      	cmp	r3, #0
 800489a:	bf0c      	ite	eq
 800489c:	2301      	moveq	r3, #1
 800489e:	2300      	movne	r3, #0
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0e9      	beq.n	800487a <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 80048a6:	f04f 33ff 	mov.w	r3, #4294967295
 80048aa:	e005      	b.n	80048b8 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	461a      	mov	r2, r3
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	601a      	str	r2, [r3, #0]

    return 0;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	371c      	adds	r7, #28
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d2:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	461a      	mov	r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 80048de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048e2:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ee:	2b80      	cmp	r3, #128	; 0x80
 80048f0:	d008      	beq.n	8004904 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d001      	beq.n	8004904 <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 8004900:	2301      	movs	r3, #1
 8004902:	e000      	b.n	8004906 <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8004904:	2300      	movs	r3, #0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00b      	beq.n	8004922 <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	1e5a      	subs	r2, r3, #1
 800490e:	60fa      	str	r2, [r7, #12]
 8004910:	2b00      	cmp	r3, #0
 8004912:	bf0c      	ite	eq
 8004914:	2301      	moveq	r3, #1
 8004916:	2300      	movne	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0e2      	beq.n	80048e4 <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 800491e:	2300      	movs	r3, #0
 8004920:	e000      	b.n	8004924 <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 8004922:	2301      	movs	r3, #1
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8004930:	b480      	push	{r7}
 8004932:	b089      	sub	sp, #36	; 0x24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004944:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	dd41      	ble.n	80049d0 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 800494c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004950:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800495c:	2b80      	cmp	r3, #128	; 0x80
 800495e:	bf14      	ite	ne
 8004960:	2301      	movne	r3, #1
 8004962:	2300      	moveq	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d008      	beq.n	800497c <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	3b01      	subs	r3, #1
 800496e:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1ed      	bne.n	8004952 <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8004976:	f04f 33ff 	mov.w	r3, #4294967295
 800497a:	e068      	b.n	8004a4e <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	60ba      	str	r2, [r7, #8]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	611a      	str	r2, [r3, #16]
        length--;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3b01      	subs	r3, #1
 800498e:	607b      	str	r3, [r7, #4]
        size++;
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	3301      	adds	r3, #1
 8004994:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d104      	bne.n	80049ae <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 80049aa:	2301      	movs	r3, #1
 80049ac:	e000      	b.n	80049b0 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 80049ae:	2300      	movs	r3, #0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0c8      	beq.n	8004946 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	60ba      	str	r2, [r7, #8]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	461a      	mov	r2, r3
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	611a      	str	r2, [r3, #16]
            length--;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3b01      	subs	r3, #1
 80049c6:	607b      	str	r3, [r7, #4]
            size++;
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	3301      	adds	r3, #1
 80049cc:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 80049ce:	e7ba      	b.n	8004946 <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 80049d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049d4:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e4:	bf14      	ite	ne
 80049e6:	2301      	movne	r3, #1
 80049e8:	2300      	moveq	r3, #0
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d008      	beq.n	8004a02 <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	3b01      	subs	r3, #1
 80049f4:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1ec      	bne.n	80049d6 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 80049fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004a00:	e025      	b.n	8004a4e <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a0a:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8004a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a10:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	bf0c      	ite	eq
 8004a20:	2301      	moveq	r3, #1
 8004a22:	2300      	movne	r3, #0
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d008      	beq.n	8004a3c <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1ed      	bne.n	8004a12 <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8004a36:	f04f 33ff 	mov.w	r3, #4294967295
 8004a3a:	e008      	b.n	8004a4e <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8004a4c:	69bb      	ldr	r3, [r7, #24]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3724      	adds	r7, #36	; 0x24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a68:	4a12      	ldr	r2, [pc, #72]	; (8004ab4 <_ZN7TwoWire15enableInterruptEv+0x58>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d106      	bne.n	8004a7c <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8004a6e:	2049      	movs	r0, #73	; 0x49
 8004a70:	f000 fb22 	bl	80050b8 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8004a74:	2048      	movs	r0, #72	; 0x48
 8004a76:	f000 fb1f 	bl	80050b8 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8004a7a:	e016      	b.n	8004aaa <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a80:	4a0d      	ldr	r2, [pc, #52]	; (8004ab8 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d106      	bne.n	8004a94 <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8004a86:	2022      	movs	r0, #34	; 0x22
 8004a88:	f000 fb16 	bl	80050b8 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004a8c:	2021      	movs	r0, #33	; 0x21
 8004a8e:	f000 fb13 	bl	80050b8 <HAL_NVIC_EnableIRQ>
}
 8004a92:	e00a      	b.n	8004aaa <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a98:	4a08      	ldr	r2, [pc, #32]	; (8004abc <_ZN7TwoWire15enableInterruptEv+0x60>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d105      	bne.n	8004aaa <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004a9e:	2020      	movs	r0, #32
 8004aa0:	f000 fb0a 	bl	80050b8 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004aa4:	201f      	movs	r0, #31
 8004aa6:	f000 fb07 	bl	80050b8 <HAL_NVIC_EnableIRQ>
}
 8004aaa:	bf00      	nop
 8004aac:	3708      	adds	r7, #8
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40005c00 	.word	0x40005c00
 8004ab8:	40005800 	.word	0x40005800
 8004abc:	40005400 	.word	0x40005400

08004ac0 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004acc:	4a12      	ldr	r2, [pc, #72]	; (8004b18 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d106      	bne.n	8004ae0 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8004ad2:	2049      	movs	r0, #73	; 0x49
 8004ad4:	f000 fafe 	bl	80050d4 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8004ad8:	2048      	movs	r0, #72	; 0x48
 8004ada:	f000 fafb 	bl	80050d4 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8004ade:	e016      	b.n	8004b0e <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae4:	4a0d      	ldr	r2, [pc, #52]	; (8004b1c <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d106      	bne.n	8004af8 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8004aea:	2022      	movs	r0, #34	; 0x22
 8004aec:	f000 faf2 	bl	80050d4 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8004af0:	2021      	movs	r0, #33	; 0x21
 8004af2:	f000 faef 	bl	80050d4 <HAL_NVIC_DisableIRQ>
}
 8004af6:	e00a      	b.n	8004b0e <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afc:	4a08      	ldr	r2, [pc, #32]	; (8004b20 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d105      	bne.n	8004b0e <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8004b02:	2020      	movs	r0, #32
 8004b04:	f000 fae6 	bl	80050d4 <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8004b08:	201f      	movs	r0, #31
 8004b0a:	f000 fae3 	bl	80050d4 <HAL_NVIC_DisableIRQ>
}
 8004b0e:	bf00      	nop
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	40005c00 	.word	0x40005c00
 8004b1c:	40005800 	.word	0x40005800
 8004b20:	40005400 	.word	0x40005400

08004b24 <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d110      	bne.n	8004b56 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d10b      	bne.n	8004b56 <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8004b3e:	4908      	ldr	r1, [pc, #32]	; (8004b60 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8004b40:	4808      	ldr	r0, [pc, #32]	; (8004b64 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004b42:	f7ff fb51 	bl	80041e8 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8004b46:	4908      	ldr	r1, [pc, #32]	; (8004b68 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8004b48:	4808      	ldr	r0, [pc, #32]	; (8004b6c <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004b4a:	f7ff fb4d 	bl	80041e8 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8004b4e:	4908      	ldr	r1, [pc, #32]	; (8004b70 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004b50:	4808      	ldr	r0, [pc, #32]	; (8004b74 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004b52:	f7ff fb49 	bl	80041e8 <_ZN7TwoWireC1EP11I2C_TypeDef>
 8004b56:	bf00      	nop
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	40005400 	.word	0x40005400
 8004b64:	2000029c 	.word	0x2000029c
 8004b68:	40005800 	.word	0x40005800
 8004b6c:	20000354 	.word	0x20000354
 8004b70:	40005c00 	.word	0x40005c00
 8004b74:	2000040c 	.word	0x2000040c

08004b78 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004b80:	2001      	movs	r0, #1
 8004b82:	f7ff ffcf 	bl	8004b24 <_Z41__static_initialization_and_destruction_0ii>
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <HAL_RTC_AlarmAEventCallback>:
RTC_TimeTypeDef sTime = {0};
RTC_DateTypeDef sDate = {0};
RTC_AlarmTypeDef sAlarm = {0};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 8004b90:	f04f 33ff 	mov.w	r3, #4294967295
 8004b94:	2208      	movs	r2, #8
 8004b96:	4905      	ldr	r1, [pc, #20]	; (8004bac <HAL_RTC_AlarmAEventCallback+0x24>)
 8004b98:	4805      	ldr	r0, [pc, #20]	; (8004bb0 <HAL_RTC_AlarmAEventCallback+0x28>)
 8004b9a:	f003 fe9a 	bl	80088d2 <HAL_UART_Transmit>
	flagA = 1;
 8004b9e:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <HAL_RTC_AlarmAEventCallback+0x2c>)
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	701a      	strb	r2, [r3, #0]
}
 8004ba4:	bf00      	nop
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	080110f8 	.word	0x080110f8
 8004bb0:	20005000 	.word	0x20005000
 8004bb4:	200004c4 	.word	0x200004c4

08004bb8 <MRT_SetupRTOS>:
}




bool MRT_SetupRTOS(UART_HandleTypeDef uart,uint8_t sleepT){
 8004bb8:	b084      	sub	sp, #16
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	f107 0c10 	add.w	ip, r7, #16
 8004bc4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 8004bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bcc:	2211      	movs	r2, #17
 8004bce:	490e      	ldr	r1, [pc, #56]	; (8004c08 <MRT_SetupRTOS+0x50>)
 8004bd0:	480e      	ldr	r0, [pc, #56]	; (8004c0c <MRT_SetupRTOS+0x54>)
 8004bd2:	f003 fe7e 	bl	80088d2 <HAL_UART_Transmit>
	rtos.huart = uart;
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <MRT_SetupRTOS+0x54>)
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f107 0310 	add.w	r3, r7, #16
 8004bde:	2244      	movs	r2, #68	; 0x44
 8004be0:	4619      	mov	r1, r3
 8004be2:	f007 fa1b 	bl	800c01c <memcpy>
	rtos.sleepTime = sleepT;
 8004be6:	4a09      	ldr	r2, [pc, #36]	; (8004c0c <MRT_SetupRTOS+0x54>)
 8004be8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8004bec:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	bool wakingUp = MRT_WUProcedure();
 8004bf0:	f000 f80e 	bl	8004c10 <MRT_WUProcedure>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	71fb      	strb	r3, [r7, #7]
	return wakingUp;
 8004bf8:	79fb      	ldrb	r3, [r7, #7]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c04:	b004      	add	sp, #16
 8004c06:	4770      	bx	lr
 8004c08:	08011110 	.word	0x08011110
 8004c0c:	20005000 	.word	0x20005000

08004c10 <MRT_WUProcedure>:



bool MRT_WUProcedure(void){
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0

	bool wakingUp = false;
 8004c16:	2300      	movs	r3, #0
 8004c18:	71fb      	strb	r3, [r7, #7]

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8004c1a:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <MRT_WUProcedure+0x5c>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d11b      	bne.n	8004c5e <MRT_WUProcedure+0x4e>
	{
		wakingUp = true;
 8004c26:	2301      	movs	r3, #1
 8004c28:	71fb      	strb	r3, [r7, #7]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8004c2a:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <MRT_WUProcedure+0x5c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a0f      	ldr	r2, [pc, #60]	; (8004c6c <MRT_WUProcedure+0x5c>)
 8004c30:	f043 0308 	orr.w	r3, r3, #8
 8004c34:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 8004c36:	4b0e      	ldr	r3, [pc, #56]	; (8004c70 <MRT_WUProcedure+0x60>)
 8004c38:	603b      	str	r3, [r7, #0]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8004c3a:	6838      	ldr	r0, [r7, #0]
 8004c3c:	f7fb faf2 	bl	8000224 <strlen>
 8004c40:	4603      	mov	r3, r0
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	f04f 33ff 	mov.w	r3, #4294967295
 8004c48:	6839      	ldr	r1, [r7, #0]
 8004c4a:	480a      	ldr	r0, [pc, #40]	; (8004c74 <MRT_WUProcedure+0x64>)
 8004c4c:	f003 fe41 	bl	80088d2 <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8004c50:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004c54:	f001 fd48 	bl	80066e8 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8004c58:	4807      	ldr	r0, [pc, #28]	; (8004c78 <MRT_WUProcedure+0x68>)
 8004c5a:	f003 fadd 	bl	8008218 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 8004c5e:	f000 f80d 	bl	8004c7c <MRT_ClearFlags>

	return wakingUp;
 8004c62:	79fb      	ldrb	r3, [r7, #7]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3708      	adds	r7, #8
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40007000 	.word	0x40007000
 8004c70:	08011124 	.word	0x08011124
 8004c74:	20005000 	.word	0x20005000
 8004c78:	20004f8c 	.word	0x20004f8c

08004c7c <MRT_ClearFlags>:

void MRT_ClearFlags(void){
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 8004c80:	f04f 33ff 	mov.w	r3, #4294967295
 8004c84:	2214      	movs	r2, #20
 8004c86:	4932      	ldr	r1, [pc, #200]	; (8004d50 <MRT_ClearFlags+0xd4>)
 8004c88:	4832      	ldr	r0, [pc, #200]	; (8004d54 <MRT_ClearFlags+0xd8>)
 8004c8a:	f003 fe22 	bl	80088d2 <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8004c8e:	4b32      	ldr	r3, [pc, #200]	; (8004d58 <MRT_ClearFlags+0xdc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	22ca      	movs	r2, #202	; 0xca
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24
 8004c96:	4b30      	ldr	r3, [pc, #192]	; (8004d58 <MRT_ClearFlags+0xdc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2253      	movs	r2, #83	; 0x53
 8004c9c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8004c9e:	e00f      	b.n	8004cc0 <MRT_ClearFlags+0x44>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 8004ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ca4:	2217      	movs	r2, #23
 8004ca6:	492d      	ldr	r1, [pc, #180]	; (8004d5c <MRT_ClearFlags+0xe0>)
 8004ca8:	482a      	ldr	r0, [pc, #168]	; (8004d54 <MRT_ClearFlags+0xd8>)
 8004caa:	f003 fe12 	bl	80088d2 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8004cae:	4b2a      	ldr	r3, [pc, #168]	; (8004d58 <MRT_ClearFlags+0xdc>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	4b28      	ldr	r3, [pc, #160]	; (8004d58 <MRT_ClearFlags+0xdc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004cbe:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8004cc0:	4b25      	ldr	r3, [pc, #148]	; (8004d58 <MRT_ClearFlags+0xdc>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e8      	bne.n	8004ca0 <MRT_ClearFlags+0x24>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004cce:	4b22      	ldr	r3, [pc, #136]	; (8004d58 <MRT_ClearFlags+0xdc>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	22ff      	movs	r2, #255	; 0xff
 8004cd4:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004cd6:	4b22      	ldr	r3, [pc, #136]	; (8004d60 <MRT_ClearFlags+0xe4>)
 8004cd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004cdc:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8004cde:	4b1e      	ldr	r3, [pc, #120]	; (8004d58 <MRT_ClearFlags+0xdc>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	22ca      	movs	r2, #202	; 0xca
 8004ce4:	625a      	str	r2, [r3, #36]	; 0x24
 8004ce6:	4b1c      	ldr	r3, [pc, #112]	; (8004d58 <MRT_ClearFlags+0xdc>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2253      	movs	r2, #83	; 0x53
 8004cec:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8004cee:	e00f      	b.n	8004d10 <MRT_ClearFlags+0x94>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 8004cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf4:	2217      	movs	r2, #23
 8004cf6:	491b      	ldr	r1, [pc, #108]	; (8004d64 <MRT_ClearFlags+0xe8>)
 8004cf8:	4816      	ldr	r0, [pc, #88]	; (8004d54 <MRT_ClearFlags+0xd8>)
 8004cfa:	f003 fdea 	bl	80088d2 <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8004cfe:	4b16      	ldr	r3, [pc, #88]	; (8004d58 <MRT_ClearFlags+0xdc>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	b2da      	uxtb	r2, r3
 8004d06:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <MRT_ClearFlags+0xdc>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004d0e:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8004d10:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <MRT_ClearFlags+0xdc>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1e8      	bne.n	8004cf0 <MRT_ClearFlags+0x74>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004d1e:	4b0e      	ldr	r3, [pc, #56]	; (8004d58 <MRT_ClearFlags+0xdc>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	22ff      	movs	r2, #255	; 0xff
 8004d24:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004d26:	4b0e      	ldr	r3, [pc, #56]	; (8004d60 <MRT_ClearFlags+0xe4>)
 8004d28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d2c:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8004d2e:	4b0e      	ldr	r3, [pc, #56]	; (8004d68 <MRT_ClearFlags+0xec>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a0d      	ldr	r2, [pc, #52]	; (8004d68 <MRT_ClearFlags+0xec>)
 8004d34:	f043 0304 	orr.w	r3, r3, #4
 8004d38:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8004d3a:	4b07      	ldr	r3, [pc, #28]	; (8004d58 <MRT_ClearFlags+0xdc>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <MRT_ClearFlags+0xdc>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004d4a:	60da      	str	r2, [r3, #12]
}
 8004d4c:	bf00      	nop
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	08011144 	.word	0x08011144
 8004d54:	20005000 	.word	0x20005000
 8004d58:	20004f8c 	.word	0x20004f8c
 8004d5c:	0801115c 	.word	0x0801115c
 8004d60:	40013c00 	.word	0x40013c00
 8004d64:	08011174 	.word	0x08011174
 8004d68:	40007000 	.word	0x40007000

08004d6c <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode( uint32_t seconds){
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b0a4      	sub	sp, #144	; 0x90
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),"\r\nStandByMode\r\n", 15, HAL_MAX_DELAY);
 8004d74:	f04f 33ff 	mov.w	r3, #4294967295
 8004d78:	220f      	movs	r2, #15
 8004d7a:	491b      	ldr	r1, [pc, #108]	; (8004de8 <MRT_StandByMode+0x7c>)
 8004d7c:	481b      	ldr	r0, [pc, #108]	; (8004dec <MRT_StandByMode+0x80>)
 8004d7e:	f003 fda8 	bl	80088d2 <HAL_UART_Transmit>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8004d82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004d86:	f001 fc9d 	bl	80066c4 <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_ClearFlags();
 8004d8a:	f7ff ff77 	bl	8004c7c <MRT_ClearFlags>

	//Setup RTC wake up timer
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTCW\r\n", 17, HAL_MAX_DELAY);
 8004d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d92:	2211      	movs	r2, #17
 8004d94:	4916      	ldr	r1, [pc, #88]	; (8004df0 <MRT_StandByMode+0x84>)
 8004d96:	4815      	ldr	r0, [pc, #84]	; (8004dec <MRT_StandByMode+0x80>)
 8004d98:	f003 fd9b 	bl	80088d2 <HAL_UART_Transmit>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds\r\n",seconds);
 8004d9c:	f107 0308 	add.w	r3, r7, #8
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	4914      	ldr	r1, [pc, #80]	; (8004df4 <MRT_StandByMode+0x88>)
 8004da4:	4618      	mov	r0, r3
 8004da6:	f008 f9b9 	bl	800d11c <siprintf>
	HAL_UART_Transmit(&(rtos.huart), msg,strlen(msg),HAL_MAX_DELAY);
 8004daa:	f107 0308 	add.w	r3, r7, #8
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fb fa38 	bl	8000224 <strlen>
 8004db4:	4603      	mov	r3, r0
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	f107 0108 	add.w	r1, r7, #8
 8004dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc0:	480a      	ldr	r0, [pc, #40]	; (8004dec <MRT_StandByMode+0x80>)
 8004dc2:	f003 fd86 	bl	80088d2 <HAL_UART_Transmit>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8004dc6:	2204      	movs	r2, #4
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	480b      	ldr	r0, [pc, #44]	; (8004df8 <MRT_StandByMode+0x8c>)
 8004dcc:	f003 f964 	bl	8008098 <HAL_RTCEx_SetWakeUpTimer_IT>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <MRT_StandByMode+0x6e>
	{
	  Error_Handler();
 8004dd6:	f7fc fd85 	bl	80018e4 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8004dda:	f001 fc99 	bl	8006710 <HAL_PWR_EnterSTANDBYMode>
}
 8004dde:	bf00      	nop
 8004de0:	3790      	adds	r7, #144	; 0x90
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	0801118c 	.word	0x0801118c
 8004dec:	20005000 	.word	0x20005000
 8004df0:	0801119c 	.word	0x0801119c
 8004df4:	080111b0 	.word	0x080111b0
 8004df8:	20004f8c 	.word	0x20004f8c

08004dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e00:	4b0e      	ldr	r3, [pc, #56]	; (8004e3c <HAL_Init+0x40>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a0d      	ldr	r2, [pc, #52]	; (8004e3c <HAL_Init+0x40>)
 8004e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <HAL_Init+0x40>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a0a      	ldr	r2, [pc, #40]	; (8004e3c <HAL_Init+0x40>)
 8004e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e18:	4b08      	ldr	r3, [pc, #32]	; (8004e3c <HAL_Init+0x40>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a07      	ldr	r2, [pc, #28]	; (8004e3c <HAL_Init+0x40>)
 8004e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e24:	2003      	movs	r0, #3
 8004e26:	f000 f920 	bl	800506a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e2a:	200f      	movs	r0, #15
 8004e2c:	f7fc fe4e 	bl	8001acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e30:	f7fc fd5e 	bl	80018f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40023c00 	.word	0x40023c00

08004e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e44:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <HAL_IncTick+0x20>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	461a      	mov	r2, r3
 8004e4a:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <HAL_IncTick+0x24>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4413      	add	r3, r2
 8004e50:	4a04      	ldr	r2, [pc, #16]	; (8004e64 <HAL_IncTick+0x24>)
 8004e52:	6013      	str	r3, [r2, #0]
}
 8004e54:	bf00      	nop
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	20000014 	.word	0x20000014
 8004e64:	20005048 	.word	0x20005048

08004e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8004e6c:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <HAL_GetTick+0x14>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	20005048 	.word	0x20005048

08004e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e88:	f7ff ffee 	bl	8004e68 <HAL_GetTick>
 8004e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e98:	d005      	beq.n	8004ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <HAL_Delay+0x44>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004ea6:	bf00      	nop
 8004ea8:	f7ff ffde 	bl	8004e68 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d8f7      	bhi.n	8004ea8 <HAL_Delay+0x28>
  {
  }
}
 8004eb8:	bf00      	nop
 8004eba:	bf00      	nop
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000014 	.word	0x20000014

08004ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f003 0307 	and.w	r3, r3, #7
 8004ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ed8:	4b0c      	ldr	r3, [pc, #48]	; (8004f0c <__NVIC_SetPriorityGrouping+0x44>)
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ede:	68ba      	ldr	r2, [r7, #8]
 8004ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004efa:	4a04      	ldr	r2, [pc, #16]	; (8004f0c <__NVIC_SetPriorityGrouping+0x44>)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	60d3      	str	r3, [r2, #12]
}
 8004f00:	bf00      	nop
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	e000ed00 	.word	0xe000ed00

08004f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f14:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <__NVIC_GetPriorityGrouping+0x18>)
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	0a1b      	lsrs	r3, r3, #8
 8004f1a:	f003 0307 	and.w	r3, r3, #7
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	e000ed00 	.word	0xe000ed00

08004f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4603      	mov	r3, r0
 8004f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	db0b      	blt.n	8004f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f3e:	79fb      	ldrb	r3, [r7, #7]
 8004f40:	f003 021f 	and.w	r2, r3, #31
 8004f44:	4907      	ldr	r1, [pc, #28]	; (8004f64 <__NVIC_EnableIRQ+0x38>)
 8004f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4a:	095b      	lsrs	r3, r3, #5
 8004f4c:	2001      	movs	r0, #1
 8004f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	e000e100 	.word	0xe000e100

08004f68 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	4603      	mov	r3, r0
 8004f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	db12      	blt.n	8004fa0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f7a:	79fb      	ldrb	r3, [r7, #7]
 8004f7c:	f003 021f 	and.w	r2, r3, #31
 8004f80:	490a      	ldr	r1, [pc, #40]	; (8004fac <__NVIC_DisableIRQ+0x44>)
 8004f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f86:	095b      	lsrs	r3, r3, #5
 8004f88:	2001      	movs	r0, #1
 8004f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f8e:	3320      	adds	r3, #32
 8004f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004f94:	f3bf 8f4f 	dsb	sy
}
 8004f98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f9a:	f3bf 8f6f 	isb	sy
}
 8004f9e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	e000e100 	.word	0xe000e100

08004fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	6039      	str	r1, [r7, #0]
 8004fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	db0a      	blt.n	8004fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	490c      	ldr	r1, [pc, #48]	; (8004ffc <__NVIC_SetPriority+0x4c>)
 8004fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fce:	0112      	lsls	r2, r2, #4
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fd8:	e00a      	b.n	8004ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	4908      	ldr	r1, [pc, #32]	; (8005000 <__NVIC_SetPriority+0x50>)
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	3b04      	subs	r3, #4
 8004fe8:	0112      	lsls	r2, r2, #4
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	440b      	add	r3, r1
 8004fee:	761a      	strb	r2, [r3, #24]
}
 8004ff0:	bf00      	nop
 8004ff2:	370c      	adds	r7, #12
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	e000e100 	.word	0xe000e100
 8005000:	e000ed00 	.word	0xe000ed00

08005004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005004:	b480      	push	{r7}
 8005006:	b089      	sub	sp, #36	; 0x24
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f1c3 0307 	rsb	r3, r3, #7
 800501e:	2b04      	cmp	r3, #4
 8005020:	bf28      	it	cs
 8005022:	2304      	movcs	r3, #4
 8005024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	3304      	adds	r3, #4
 800502a:	2b06      	cmp	r3, #6
 800502c:	d902      	bls.n	8005034 <NVIC_EncodePriority+0x30>
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	3b03      	subs	r3, #3
 8005032:	e000      	b.n	8005036 <NVIC_EncodePriority+0x32>
 8005034:	2300      	movs	r3, #0
 8005036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005038:	f04f 32ff 	mov.w	r2, #4294967295
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	43da      	mvns	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	401a      	ands	r2, r3
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800504c:	f04f 31ff 	mov.w	r1, #4294967295
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	fa01 f303 	lsl.w	r3, r1, r3
 8005056:	43d9      	mvns	r1, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800505c:	4313      	orrs	r3, r2
         );
}
 800505e:	4618      	mov	r0, r3
 8005060:	3724      	adds	r7, #36	; 0x24
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b082      	sub	sp, #8
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f7ff ff28 	bl	8004ec8 <__NVIC_SetPriorityGrouping>
}
 8005078:	bf00      	nop
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	4603      	mov	r3, r0
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005092:	f7ff ff3d 	bl	8004f10 <__NVIC_GetPriorityGrouping>
 8005096:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	68b9      	ldr	r1, [r7, #8]
 800509c:	6978      	ldr	r0, [r7, #20]
 800509e:	f7ff ffb1 	bl	8005004 <NVIC_EncodePriority>
 80050a2:	4602      	mov	r2, r0
 80050a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050a8:	4611      	mov	r1, r2
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff ff80 	bl	8004fb0 <__NVIC_SetPriority>
}
 80050b0:	bf00      	nop
 80050b2:	3718      	adds	r7, #24
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	4603      	mov	r3, r0
 80050c0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff ff30 	bl	8004f2c <__NVIC_EnableIRQ>
}
 80050cc:	bf00      	nop
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80050de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff ff40 	bl	8004f68 <__NVIC_DisableIRQ>
}
 80050e8:	bf00      	nop
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b089      	sub	sp, #36	; 0x24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80050fe:	2300      	movs	r3, #0
 8005100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005102:	2300      	movs	r3, #0
 8005104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005106:	2300      	movs	r3, #0
 8005108:	61fb      	str	r3, [r7, #28]
 800510a:	e165      	b.n	80053d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800510c:	2201      	movs	r2, #1
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	fa02 f303 	lsl.w	r3, r2, r3
 8005114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4013      	ands	r3, r2
 800511e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	429a      	cmp	r2, r3
 8005126:	f040 8154 	bne.w	80053d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f003 0303 	and.w	r3, r3, #3
 8005132:	2b01      	cmp	r3, #1
 8005134:	d005      	beq.n	8005142 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800513e:	2b02      	cmp	r3, #2
 8005140:	d130      	bne.n	80051a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	2203      	movs	r2, #3
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	43db      	mvns	r3, r3
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4013      	ands	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68da      	ldr	r2, [r3, #12]
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	fa02 f303 	lsl.w	r3, r2, r3
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	4313      	orrs	r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	69ba      	ldr	r2, [r7, #24]
 8005170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005178:	2201      	movs	r2, #1
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	fa02 f303 	lsl.w	r3, r2, r3
 8005180:	43db      	mvns	r3, r3
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	4013      	ands	r3, r2
 8005186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	f003 0201 	and.w	r2, r3, #1
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	fa02 f303 	lsl.w	r3, r2, r3
 8005198:	69ba      	ldr	r2, [r7, #24]
 800519a:	4313      	orrs	r3, r2
 800519c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f003 0303 	and.w	r3, r3, #3
 80051ac:	2b03      	cmp	r3, #3
 80051ae:	d017      	beq.n	80051e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	005b      	lsls	r3, r3, #1
 80051ba:	2203      	movs	r2, #3
 80051bc:	fa02 f303 	lsl.w	r3, r2, r3
 80051c0:	43db      	mvns	r3, r3
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	4013      	ands	r3, r2
 80051c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f003 0303 	and.w	r3, r3, #3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d123      	bne.n	8005234 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	08da      	lsrs	r2, r3, #3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3208      	adds	r2, #8
 80051f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	220f      	movs	r2, #15
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	43db      	mvns	r3, r3
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	4013      	ands	r3, r2
 800520e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	691a      	ldr	r2, [r3, #16]
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	fa02 f303 	lsl.w	r3, r2, r3
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	4313      	orrs	r3, r2
 8005224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	08da      	lsrs	r2, r3, #3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	3208      	adds	r2, #8
 800522e:	69b9      	ldr	r1, [r7, #24]
 8005230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	2203      	movs	r2, #3
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	43db      	mvns	r3, r3
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	4013      	ands	r3, r2
 800524a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f003 0203 	and.w	r2, r3, #3
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	4313      	orrs	r3, r2
 8005260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 80ae 	beq.w	80053d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005276:	2300      	movs	r3, #0
 8005278:	60fb      	str	r3, [r7, #12]
 800527a:	4b5d      	ldr	r3, [pc, #372]	; (80053f0 <HAL_GPIO_Init+0x300>)
 800527c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527e:	4a5c      	ldr	r2, [pc, #368]	; (80053f0 <HAL_GPIO_Init+0x300>)
 8005280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005284:	6453      	str	r3, [r2, #68]	; 0x44
 8005286:	4b5a      	ldr	r3, [pc, #360]	; (80053f0 <HAL_GPIO_Init+0x300>)
 8005288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800528e:	60fb      	str	r3, [r7, #12]
 8005290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005292:	4a58      	ldr	r2, [pc, #352]	; (80053f4 <HAL_GPIO_Init+0x304>)
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	089b      	lsrs	r3, r3, #2
 8005298:	3302      	adds	r3, #2
 800529a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800529e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	220f      	movs	r2, #15
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	43db      	mvns	r3, r3
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	4013      	ands	r3, r2
 80052b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a4f      	ldr	r2, [pc, #316]	; (80053f8 <HAL_GPIO_Init+0x308>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d025      	beq.n	800530a <HAL_GPIO_Init+0x21a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a4e      	ldr	r2, [pc, #312]	; (80053fc <HAL_GPIO_Init+0x30c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d01f      	beq.n	8005306 <HAL_GPIO_Init+0x216>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a4d      	ldr	r2, [pc, #308]	; (8005400 <HAL_GPIO_Init+0x310>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d019      	beq.n	8005302 <HAL_GPIO_Init+0x212>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a4c      	ldr	r2, [pc, #304]	; (8005404 <HAL_GPIO_Init+0x314>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d013      	beq.n	80052fe <HAL_GPIO_Init+0x20e>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a4b      	ldr	r2, [pc, #300]	; (8005408 <HAL_GPIO_Init+0x318>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00d      	beq.n	80052fa <HAL_GPIO_Init+0x20a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a4a      	ldr	r2, [pc, #296]	; (800540c <HAL_GPIO_Init+0x31c>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d007      	beq.n	80052f6 <HAL_GPIO_Init+0x206>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a49      	ldr	r2, [pc, #292]	; (8005410 <HAL_GPIO_Init+0x320>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d101      	bne.n	80052f2 <HAL_GPIO_Init+0x202>
 80052ee:	2306      	movs	r3, #6
 80052f0:	e00c      	b.n	800530c <HAL_GPIO_Init+0x21c>
 80052f2:	2307      	movs	r3, #7
 80052f4:	e00a      	b.n	800530c <HAL_GPIO_Init+0x21c>
 80052f6:	2305      	movs	r3, #5
 80052f8:	e008      	b.n	800530c <HAL_GPIO_Init+0x21c>
 80052fa:	2304      	movs	r3, #4
 80052fc:	e006      	b.n	800530c <HAL_GPIO_Init+0x21c>
 80052fe:	2303      	movs	r3, #3
 8005300:	e004      	b.n	800530c <HAL_GPIO_Init+0x21c>
 8005302:	2302      	movs	r3, #2
 8005304:	e002      	b.n	800530c <HAL_GPIO_Init+0x21c>
 8005306:	2301      	movs	r3, #1
 8005308:	e000      	b.n	800530c <HAL_GPIO_Init+0x21c>
 800530a:	2300      	movs	r3, #0
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	f002 0203 	and.w	r2, r2, #3
 8005312:	0092      	lsls	r2, r2, #2
 8005314:	4093      	lsls	r3, r2
 8005316:	69ba      	ldr	r2, [r7, #24]
 8005318:	4313      	orrs	r3, r2
 800531a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800531c:	4935      	ldr	r1, [pc, #212]	; (80053f4 <HAL_GPIO_Init+0x304>)
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	089b      	lsrs	r3, r3, #2
 8005322:	3302      	adds	r3, #2
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800532a:	4b3a      	ldr	r3, [pc, #232]	; (8005414 <HAL_GPIO_Init+0x324>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	43db      	mvns	r3, r3
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	4013      	ands	r3, r2
 8005338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800534e:	4a31      	ldr	r2, [pc, #196]	; (8005414 <HAL_GPIO_Init+0x324>)
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005354:	4b2f      	ldr	r3, [pc, #188]	; (8005414 <HAL_GPIO_Init+0x324>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	43db      	mvns	r3, r3
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	4013      	ands	r3, r2
 8005362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	4313      	orrs	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005378:	4a26      	ldr	r2, [pc, #152]	; (8005414 <HAL_GPIO_Init+0x324>)
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800537e:	4b25      	ldr	r3, [pc, #148]	; (8005414 <HAL_GPIO_Init+0x324>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	43db      	mvns	r3, r3
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	4013      	ands	r3, r2
 800538c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053a2:	4a1c      	ldr	r2, [pc, #112]	; (8005414 <HAL_GPIO_Init+0x324>)
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053a8:	4b1a      	ldr	r3, [pc, #104]	; (8005414 <HAL_GPIO_Init+0x324>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	43db      	mvns	r3, r3
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	4013      	ands	r3, r2
 80053b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053cc:	4a11      	ldr	r2, [pc, #68]	; (8005414 <HAL_GPIO_Init+0x324>)
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	3301      	adds	r3, #1
 80053d6:	61fb      	str	r3, [r7, #28]
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	2b0f      	cmp	r3, #15
 80053dc:	f67f ae96 	bls.w	800510c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80053e0:	bf00      	nop
 80053e2:	bf00      	nop
 80053e4:	3724      	adds	r7, #36	; 0x24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40023800 	.word	0x40023800
 80053f4:	40013800 	.word	0x40013800
 80053f8:	40020000 	.word	0x40020000
 80053fc:	40020400 	.word	0x40020400
 8005400:	40020800 	.word	0x40020800
 8005404:	40020c00 	.word	0x40020c00
 8005408:	40021000 	.word	0x40021000
 800540c:	40021400 	.word	0x40021400
 8005410:	40021800 	.word	0x40021800
 8005414:	40013c00 	.word	0x40013c00

08005418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	460b      	mov	r3, r1
 8005422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	887b      	ldrh	r3, [r7, #2]
 800542a:	4013      	ands	r3, r2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d002      	beq.n	8005436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005430:	2301      	movs	r3, #1
 8005432:	73fb      	strb	r3, [r7, #15]
 8005434:	e001      	b.n	800543a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005436:	2300      	movs	r3, #0
 8005438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800543a:	7bfb      	ldrb	r3, [r7, #15]
}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	460b      	mov	r3, r1
 8005452:	807b      	strh	r3, [r7, #2]
 8005454:	4613      	mov	r3, r2
 8005456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005458:	787b      	ldrb	r3, [r7, #1]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800545e:	887a      	ldrh	r2, [r7, #2]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005464:	e003      	b.n	800546e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005466:	887b      	ldrh	r3, [r7, #2]
 8005468:	041a      	lsls	r2, r3, #16
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	619a      	str	r2, [r3, #24]
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
	...

0800547c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d101      	bne.n	800548e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e12b      	b.n	80056e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7fc fa50 	bl	8001948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2224      	movs	r2, #36	; 0x24
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0201 	bic.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80054e0:	f001 fa20 	bl	8006924 <HAL_RCC_GetPCLK1Freq>
 80054e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	4a81      	ldr	r2, [pc, #516]	; (80056f0 <HAL_I2C_Init+0x274>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d807      	bhi.n	8005500 <HAL_I2C_Init+0x84>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4a80      	ldr	r2, [pc, #512]	; (80056f4 <HAL_I2C_Init+0x278>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	bf94      	ite	ls
 80054f8:	2301      	movls	r3, #1
 80054fa:	2300      	movhi	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	e006      	b.n	800550e <HAL_I2C_Init+0x92>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4a7d      	ldr	r2, [pc, #500]	; (80056f8 <HAL_I2C_Init+0x27c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	bf94      	ite	ls
 8005508:	2301      	movls	r3, #1
 800550a:	2300      	movhi	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e0e7      	b.n	80056e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4a78      	ldr	r2, [pc, #480]	; (80056fc <HAL_I2C_Init+0x280>)
 800551a:	fba2 2303 	umull	r2, r3, r2, r3
 800551e:	0c9b      	lsrs	r3, r3, #18
 8005520:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	430a      	orrs	r2, r1
 8005534:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	4a6a      	ldr	r2, [pc, #424]	; (80056f0 <HAL_I2C_Init+0x274>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d802      	bhi.n	8005550 <HAL_I2C_Init+0xd4>
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	3301      	adds	r3, #1
 800554e:	e009      	b.n	8005564 <HAL_I2C_Init+0xe8>
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005556:	fb02 f303 	mul.w	r3, r2, r3
 800555a:	4a69      	ldr	r2, [pc, #420]	; (8005700 <HAL_I2C_Init+0x284>)
 800555c:	fba2 2303 	umull	r2, r3, r2, r3
 8005560:	099b      	lsrs	r3, r3, #6
 8005562:	3301      	adds	r3, #1
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6812      	ldr	r2, [r2, #0]
 8005568:	430b      	orrs	r3, r1
 800556a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005576:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	495c      	ldr	r1, [pc, #368]	; (80056f0 <HAL_I2C_Init+0x274>)
 8005580:	428b      	cmp	r3, r1
 8005582:	d819      	bhi.n	80055b8 <HAL_I2C_Init+0x13c>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	1e59      	subs	r1, r3, #1
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005592:	1c59      	adds	r1, r3, #1
 8005594:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005598:	400b      	ands	r3, r1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00a      	beq.n	80055b4 <HAL_I2C_Init+0x138>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1e59      	subs	r1, r3, #1
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80055ac:	3301      	adds	r3, #1
 80055ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055b2:	e051      	b.n	8005658 <HAL_I2C_Init+0x1dc>
 80055b4:	2304      	movs	r3, #4
 80055b6:	e04f      	b.n	8005658 <HAL_I2C_Init+0x1dc>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d111      	bne.n	80055e4 <HAL_I2C_Init+0x168>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	1e58      	subs	r0, r3, #1
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6859      	ldr	r1, [r3, #4]
 80055c8:	460b      	mov	r3, r1
 80055ca:	005b      	lsls	r3, r3, #1
 80055cc:	440b      	add	r3, r1
 80055ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80055d2:	3301      	adds	r3, #1
 80055d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bf0c      	ite	eq
 80055dc:	2301      	moveq	r3, #1
 80055de:	2300      	movne	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	e012      	b.n	800560a <HAL_I2C_Init+0x18e>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	1e58      	subs	r0, r3, #1
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6859      	ldr	r1, [r3, #4]
 80055ec:	460b      	mov	r3, r1
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	440b      	add	r3, r1
 80055f2:	0099      	lsls	r1, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80055fa:	3301      	adds	r3, #1
 80055fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005600:	2b00      	cmp	r3, #0
 8005602:	bf0c      	ite	eq
 8005604:	2301      	moveq	r3, #1
 8005606:	2300      	movne	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <HAL_I2C_Init+0x196>
 800560e:	2301      	movs	r3, #1
 8005610:	e022      	b.n	8005658 <HAL_I2C_Init+0x1dc>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10e      	bne.n	8005638 <HAL_I2C_Init+0x1bc>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	1e58      	subs	r0, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6859      	ldr	r1, [r3, #4]
 8005622:	460b      	mov	r3, r1
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	440b      	add	r3, r1
 8005628:	fbb0 f3f3 	udiv	r3, r0, r3
 800562c:	3301      	adds	r3, #1
 800562e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005636:	e00f      	b.n	8005658 <HAL_I2C_Init+0x1dc>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	1e58      	subs	r0, r3, #1
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6859      	ldr	r1, [r3, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	0099      	lsls	r1, r3, #2
 8005648:	440b      	add	r3, r1
 800564a:	fbb0 f3f3 	udiv	r3, r0, r3
 800564e:	3301      	adds	r3, #1
 8005650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005654:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	6809      	ldr	r1, [r1, #0]
 800565c:	4313      	orrs	r3, r2
 800565e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69da      	ldr	r2, [r3, #28]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	431a      	orrs	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005686:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	6911      	ldr	r1, [r2, #16]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	68d2      	ldr	r2, [r2, #12]
 8005692:	4311      	orrs	r1, r2
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	6812      	ldr	r2, [r2, #0]
 8005698:	430b      	orrs	r3, r1
 800569a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695a      	ldr	r2, [r3, #20]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f042 0201 	orr.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	000186a0 	.word	0x000186a0
 80056f4:	001e847f 	.word	0x001e847f
 80056f8:	003d08ff 	.word	0x003d08ff
 80056fc:	431bde83 	.word	0x431bde83
 8005700:	10624dd3 	.word	0x10624dd3

08005704 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af02      	add	r7, sp, #8
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	4608      	mov	r0, r1
 800570e:	4611      	mov	r1, r2
 8005710:	461a      	mov	r2, r3
 8005712:	4603      	mov	r3, r0
 8005714:	817b      	strh	r3, [r7, #10]
 8005716:	460b      	mov	r3, r1
 8005718:	813b      	strh	r3, [r7, #8]
 800571a:	4613      	mov	r3, r2
 800571c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800571e:	f7ff fba3 	bl	8004e68 <HAL_GetTick>
 8005722:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b20      	cmp	r3, #32
 800572e:	f040 80d9 	bne.w	80058e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	2319      	movs	r3, #25
 8005738:	2201      	movs	r2, #1
 800573a:	496d      	ldr	r1, [pc, #436]	; (80058f0 <HAL_I2C_Mem_Write+0x1ec>)
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 fde3 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005748:	2302      	movs	r3, #2
 800574a:	e0cc      	b.n	80058e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005752:	2b01      	cmp	r3, #1
 8005754:	d101      	bne.n	800575a <HAL_I2C_Mem_Write+0x56>
 8005756:	2302      	movs	r3, #2
 8005758:	e0c5      	b.n	80058e6 <HAL_I2C_Mem_Write+0x1e2>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b01      	cmp	r3, #1
 800576e:	d007      	beq.n	8005780 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800578e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2221      	movs	r2, #33	; 0x21
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2240      	movs	r2, #64	; 0x40
 800579c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a3a      	ldr	r2, [r7, #32]
 80057aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4a4d      	ldr	r2, [pc, #308]	; (80058f4 <HAL_I2C_Mem_Write+0x1f0>)
 80057c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057c2:	88f8      	ldrh	r0, [r7, #6]
 80057c4:	893a      	ldrh	r2, [r7, #8]
 80057c6:	8979      	ldrh	r1, [r7, #10]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	9301      	str	r3, [sp, #4]
 80057cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	4603      	mov	r3, r0
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 fc1a 	bl	800600c <I2C_RequestMemoryWrite>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d052      	beq.n	8005884 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e081      	b.n	80058e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 fe64 	bl	80064b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00d      	beq.n	800580e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	2b04      	cmp	r3, #4
 80057f8:	d107      	bne.n	800580a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005808:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e06b      	b.n	80058e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	781a      	ldrb	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	1c5a      	adds	r2, r3, #1
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005834:	b29b      	uxth	r3, r3
 8005836:	3b01      	subs	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	f003 0304 	and.w	r3, r3, #4
 8005848:	2b04      	cmp	r3, #4
 800584a:	d11b      	bne.n	8005884 <HAL_I2C_Mem_Write+0x180>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005850:	2b00      	cmp	r3, #0
 8005852:	d017      	beq.n	8005884 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	781a      	ldrb	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	1c5a      	adds	r2, r3, #1
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800586e:	3b01      	subs	r3, #1
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587a:	b29b      	uxth	r3, r3
 800587c:	3b01      	subs	r3, #1
 800587e:	b29a      	uxth	r2, r3
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1aa      	bne.n	80057e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800588c:	697a      	ldr	r2, [r7, #20]
 800588e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 fe50 	bl	8006536 <I2C_WaitOnBTFFlagUntilTimeout>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00d      	beq.n	80058b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	d107      	bne.n	80058b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e016      	b.n	80058e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2220      	movs	r2, #32
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80058e0:	2300      	movs	r3, #0
 80058e2:	e000      	b.n	80058e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80058e4:	2302      	movs	r3, #2
  }
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	00100002 	.word	0x00100002
 80058f4:	ffff0000 	.word	0xffff0000

080058f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b08c      	sub	sp, #48	; 0x30
 80058fc:	af02      	add	r7, sp, #8
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	4608      	mov	r0, r1
 8005902:	4611      	mov	r1, r2
 8005904:	461a      	mov	r2, r3
 8005906:	4603      	mov	r3, r0
 8005908:	817b      	strh	r3, [r7, #10]
 800590a:	460b      	mov	r3, r1
 800590c:	813b      	strh	r3, [r7, #8]
 800590e:	4613      	mov	r3, r2
 8005910:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005912:	f7ff faa9 	bl	8004e68 <HAL_GetTick>
 8005916:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b20      	cmp	r3, #32
 8005922:	f040 8208 	bne.w	8005d36 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	2319      	movs	r3, #25
 800592c:	2201      	movs	r2, #1
 800592e:	497b      	ldr	r1, [pc, #492]	; (8005b1c <HAL_I2C_Mem_Read+0x224>)
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 fce9 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800593c:	2302      	movs	r3, #2
 800593e:	e1fb      	b.n	8005d38 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_I2C_Mem_Read+0x56>
 800594a:	2302      	movs	r3, #2
 800594c:	e1f4      	b.n	8005d38 <HAL_I2C_Mem_Read+0x440>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b01      	cmp	r3, #1
 8005962:	d007      	beq.n	8005974 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0201 	orr.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005982:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2222      	movs	r2, #34	; 0x22
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2240      	movs	r2, #64	; 0x40
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800599e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80059a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	4a5b      	ldr	r2, [pc, #364]	; (8005b20 <HAL_I2C_Mem_Read+0x228>)
 80059b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059b6:	88f8      	ldrh	r0, [r7, #6]
 80059b8:	893a      	ldrh	r2, [r7, #8]
 80059ba:	8979      	ldrh	r1, [r7, #10]
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	9301      	str	r3, [sp, #4]
 80059c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	4603      	mov	r3, r0
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f000 fbb6 	bl	8006138 <I2C_RequestMemoryRead>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d001      	beq.n	80059d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e1b0      	b.n	8005d38 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d113      	bne.n	8005a06 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059de:	2300      	movs	r3, #0
 80059e0:	623b      	str	r3, [r7, #32]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695b      	ldr	r3, [r3, #20]
 80059e8:	623b      	str	r3, [r7, #32]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	623b      	str	r3, [r7, #32]
 80059f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	e184      	b.n	8005d10 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d11b      	bne.n	8005a46 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a1e:	2300      	movs	r3, #0
 8005a20:	61fb      	str	r3, [r7, #28]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	61fb      	str	r3, [r7, #28]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	699b      	ldr	r3, [r3, #24]
 8005a30:	61fb      	str	r3, [r7, #28]
 8005a32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	e164      	b.n	8005d10 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d11b      	bne.n	8005a86 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61bb      	str	r3, [r7, #24]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	61bb      	str	r3, [r7, #24]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	61bb      	str	r3, [r7, #24]
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	e144      	b.n	8005d10 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a86:	2300      	movs	r3, #0
 8005a88:	617b      	str	r3, [r7, #20]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	617b      	str	r3, [r7, #20]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005a9c:	e138      	b.n	8005d10 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	f200 80f1 	bhi.w	8005c8a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d123      	bne.n	8005af8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 fd7f 	bl	80065b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d001      	beq.n	8005ac4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e139      	b.n	8005d38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	691a      	ldr	r2, [r3, #16]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	3b01      	subs	r3, #1
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005af6:	e10b      	b.n	8005d10 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d14e      	bne.n	8005b9e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b06:	2200      	movs	r2, #0
 8005b08:	4906      	ldr	r1, [pc, #24]	; (8005b24 <HAL_I2C_Mem_Read+0x22c>)
 8005b0a:	68f8      	ldr	r0, [r7, #12]
 8005b0c:	f000 fbfc 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d008      	beq.n	8005b28 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e10e      	b.n	8005d38 <HAL_I2C_Mem_Read+0x440>
 8005b1a:	bf00      	nop
 8005b1c:	00100002 	.word	0x00100002
 8005b20:	ffff0000 	.word	0xffff0000
 8005b24:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691a      	ldr	r2, [r3, #16]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b54:	3b01      	subs	r3, #1
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	3b01      	subs	r3, #1
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	691a      	ldr	r2, [r3, #16]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	b2d2      	uxtb	r2, r2
 8005b76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b86:	3b01      	subs	r3, #1
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	3b01      	subs	r3, #1
 8005b96:	b29a      	uxth	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b9c:	e0b8      	b.n	8005d10 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	4966      	ldr	r1, [pc, #408]	; (8005d40 <HAL_I2C_Mem_Read+0x448>)
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 fbad 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e0bf      	b.n	8005d38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	691a      	ldr	r2, [r3, #16]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be4:	3b01      	subs	r3, #1
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c00:	2200      	movs	r2, #0
 8005c02:	494f      	ldr	r1, [pc, #316]	; (8005d40 <HAL_I2C_Mem_Read+0x448>)
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 fb7f 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e091      	b.n	8005d38 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	1c5a      	adds	r2, r3, #1
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c40:	3b01      	subs	r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691a      	ldr	r2, [r3, #16]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c60:	b2d2      	uxtb	r2, r2
 8005c62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	3b01      	subs	r3, #1
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c88:	e042      	b.n	8005d10 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 fc92 	bl	80065b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e04c      	b.n	8005d38 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	691a      	ldr	r2, [r3, #16]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	b2d2      	uxtb	r2, r2
 8005caa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	f003 0304 	and.w	r3, r3, #4
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d118      	bne.n	8005d10 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	691a      	ldr	r2, [r3, #16]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	1c5a      	adds	r2, r3, #1
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f47f aec2 	bne.w	8005a9e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e000      	b.n	8005d38 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005d36:	2302      	movs	r3, #2
  }
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3728      	adds	r7, #40	; 0x28
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	00010004 	.word	0x00010004

08005d44 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08a      	sub	sp, #40	; 0x28
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	607a      	str	r2, [r7, #4]
 8005d4e:	603b      	str	r3, [r7, #0]
 8005d50:	460b      	mov	r3, r1
 8005d52:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005d54:	f7ff f888 	bl	8004e68 <HAL_GetTick>
 8005d58:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b20      	cmp	r3, #32
 8005d68:	f040 8111 	bne.w	8005f8e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d6c:	69fb      	ldr	r3, [r7, #28]
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	2319      	movs	r3, #25
 8005d72:	2201      	movs	r2, #1
 8005d74:	4988      	ldr	r1, [pc, #544]	; (8005f98 <HAL_I2C_IsDeviceReady+0x254>)
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 fac6 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005d82:	2302      	movs	r3, #2
 8005d84:	e104      	b.n	8005f90 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_I2C_IsDeviceReady+0x50>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e0fd      	b.n	8005f90 <HAL_I2C_IsDeviceReady+0x24c>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d007      	beq.n	8005dba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 0201 	orr.w	r2, r2, #1
 8005db8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2224      	movs	r2, #36	; 0x24
 8005dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4a70      	ldr	r2, [pc, #448]	; (8005f9c <HAL_I2C_IsDeviceReady+0x258>)
 8005ddc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005dec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	9300      	str	r3, [sp, #0]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 fa84 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00d      	beq.n	8005e22 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e14:	d103      	bne.n	8005e1e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e1c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e0b6      	b.n	8005f90 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e22:	897b      	ldrh	r3, [r7, #10]
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	461a      	mov	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e30:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005e32:	f7ff f819 	bl	8004e68 <HAL_GetTick>
 8005e36:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	bf0c      	ite	eq
 8005e46:	2301      	moveq	r3, #1
 8005e48:	2300      	movne	r3, #0
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e5c:	bf0c      	ite	eq
 8005e5e:	2301      	moveq	r3, #1
 8005e60:	2300      	movne	r3, #0
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005e66:	e025      	b.n	8005eb4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e68:	f7fe fffe 	bl	8004e68 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d302      	bcc.n	8005e7e <HAL_I2C_IsDeviceReady+0x13a>
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d103      	bne.n	8005e86 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	22a0      	movs	r2, #160	; 0xa0
 8005e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	bf0c      	ite	eq
 8005e94:	2301      	moveq	r3, #1
 8005e96:	2300      	movne	r3, #0
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eaa:	bf0c      	ite	eq
 8005eac:	2301      	moveq	r3, #1
 8005eae:	2300      	movne	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2ba0      	cmp	r3, #160	; 0xa0
 8005ebe:	d005      	beq.n	8005ecc <HAL_I2C_IsDeviceReady+0x188>
 8005ec0:	7dfb      	ldrb	r3, [r7, #23]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d102      	bne.n	8005ecc <HAL_I2C_IsDeviceReady+0x188>
 8005ec6:	7dbb      	ldrb	r3, [r7, #22]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d0cd      	beq.n	8005e68 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2220      	movs	r2, #32
 8005ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d129      	bne.n	8005f36 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ef0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	613b      	str	r3, [r7, #16]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	613b      	str	r3, [r7, #16]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	613b      	str	r3, [r7, #16]
 8005f06:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	2319      	movs	r3, #25
 8005f0e:	2201      	movs	r2, #1
 8005f10:	4921      	ldr	r1, [pc, #132]	; (8005f98 <HAL_I2C_IsDeviceReady+0x254>)
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 f9f8 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e036      	b.n	8005f90 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	e02c      	b.n	8005f90 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f44:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f4e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	2319      	movs	r3, #25
 8005f56:	2201      	movs	r2, #1
 8005f58:	490f      	ldr	r1, [pc, #60]	; (8005f98 <HAL_I2C_IsDeviceReady+0x254>)
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 f9d4 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e012      	b.n	8005f90 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	f4ff af32 	bcc.w	8005dde <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e000      	b.n	8005f90 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005f8e:	2302      	movs	r3, #2
  }
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3720      	adds	r7, #32
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	00100002 	.word	0x00100002
 8005f9c:	ffff0000 	.word	0xffff0000

08005fa0 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b20      	cmp	r3, #32
 8005fb2:	d124      	bne.n	8005ffe <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2228      	movs	r2, #40	; 0x28
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d007      	beq.n	8005fda <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0201 	orr.w	r2, r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fe8:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005ff8:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e000      	b.n	8006000 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8005ffe:	2302      	movs	r3, #2
  }
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b088      	sub	sp, #32
 8006010:	af02      	add	r7, sp, #8
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	4608      	mov	r0, r1
 8006016:	4611      	mov	r1, r2
 8006018:	461a      	mov	r2, r3
 800601a:	4603      	mov	r3, r0
 800601c:	817b      	strh	r3, [r7, #10]
 800601e:	460b      	mov	r3, r1
 8006020:	813b      	strh	r3, [r7, #8]
 8006022:	4613      	mov	r3, r2
 8006024:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006034:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	2200      	movs	r2, #0
 800603e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 f960 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00d      	beq.n	800606a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800605c:	d103      	bne.n	8006066 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006064:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e05f      	b.n	800612a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800606a:	897b      	ldrh	r3, [r7, #10]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	461a      	mov	r2, r3
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006078:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	6a3a      	ldr	r2, [r7, #32]
 800607e:	492d      	ldr	r1, [pc, #180]	; (8006134 <I2C_RequestMemoryWrite+0x128>)
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 f998 	bl	80063b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e04c      	b.n	800612a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006090:	2300      	movs	r3, #0
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	617b      	str	r3, [r7, #20]
 80060a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060a8:	6a39      	ldr	r1, [r7, #32]
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 fa02 	bl	80064b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00d      	beq.n	80060d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d107      	bne.n	80060ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e02b      	b.n	800612a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060d2:	88fb      	ldrh	r3, [r7, #6]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d105      	bne.n	80060e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060d8:	893b      	ldrh	r3, [r7, #8]
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	611a      	str	r2, [r3, #16]
 80060e2:	e021      	b.n	8006128 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80060e4:	893b      	ldrh	r3, [r7, #8]
 80060e6:	0a1b      	lsrs	r3, r3, #8
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f4:	6a39      	ldr	r1, [r7, #32]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 f9dc 	bl	80064b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00d      	beq.n	800611e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	2b04      	cmp	r3, #4
 8006108:	d107      	bne.n	800611a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006118:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e005      	b.n	800612a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800611e:	893b      	ldrh	r3, [r7, #8]
 8006120:	b2da      	uxtb	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	00010002 	.word	0x00010002

08006138 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b088      	sub	sp, #32
 800613c:	af02      	add	r7, sp, #8
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	4608      	mov	r0, r1
 8006142:	4611      	mov	r1, r2
 8006144:	461a      	mov	r2, r3
 8006146:	4603      	mov	r3, r0
 8006148:	817b      	strh	r3, [r7, #10]
 800614a:	460b      	mov	r3, r1
 800614c:	813b      	strh	r3, [r7, #8]
 800614e:	4613      	mov	r3, r2
 8006150:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006160:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006170:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	2200      	movs	r2, #0
 800617a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 f8c2 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00d      	beq.n	80061a6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006198:	d103      	bne.n	80061a2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e0aa      	b.n	80062fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061a6:	897b      	ldrh	r3, [r7, #10]
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	461a      	mov	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	6a3a      	ldr	r2, [r7, #32]
 80061ba:	4952      	ldr	r1, [pc, #328]	; (8006304 <I2C_RequestMemoryRead+0x1cc>)
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f000 f8fa 	bl	80063b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e097      	b.n	80062fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061cc:	2300      	movs	r3, #0
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	617b      	str	r3, [r7, #20]
 80061e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e4:	6a39      	ldr	r1, [r7, #32]
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 f964 	bl	80064b4 <I2C_WaitOnTXEFlagUntilTimeout>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00d      	beq.n	800620e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d107      	bne.n	800620a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006208:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e076      	b.n	80062fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800620e:	88fb      	ldrh	r3, [r7, #6]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d105      	bne.n	8006220 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006214:	893b      	ldrh	r3, [r7, #8]
 8006216:	b2da      	uxtb	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	611a      	str	r2, [r3, #16]
 800621e:	e021      	b.n	8006264 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006220:	893b      	ldrh	r3, [r7, #8]
 8006222:	0a1b      	lsrs	r3, r3, #8
 8006224:	b29b      	uxth	r3, r3
 8006226:	b2da      	uxtb	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800622e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006230:	6a39      	ldr	r1, [r7, #32]
 8006232:	68f8      	ldr	r0, [r7, #12]
 8006234:	f000 f93e 	bl	80064b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00d      	beq.n	800625a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006242:	2b04      	cmp	r3, #4
 8006244:	d107      	bne.n	8006256 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006254:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e050      	b.n	80062fc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800625a:	893b      	ldrh	r3, [r7, #8]
 800625c:	b2da      	uxtb	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006266:	6a39      	ldr	r1, [r7, #32]
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 f923 	bl	80064b4 <I2C_WaitOnTXEFlagUntilTimeout>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00d      	beq.n	8006290 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006278:	2b04      	cmp	r3, #4
 800627a:	d107      	bne.n	800628c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800628a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e035      	b.n	80062fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800629e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062ac:	68f8      	ldr	r0, [r7, #12]
 80062ae:	f000 f82b 	bl	8006308 <I2C_WaitOnFlagUntilTimeout>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00d      	beq.n	80062d4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c6:	d103      	bne.n	80062d0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e013      	b.n	80062fc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80062d4:	897b      	ldrh	r3, [r7, #10]
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	6a3a      	ldr	r2, [r7, #32]
 80062e8:	4906      	ldr	r1, [pc, #24]	; (8006304 <I2C_RequestMemoryRead+0x1cc>)
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 f863 	bl	80063b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e000      	b.n	80062fc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	00010002 	.word	0x00010002

08006308 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	603b      	str	r3, [r7, #0]
 8006314:	4613      	mov	r3, r2
 8006316:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006318:	e025      	b.n	8006366 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006320:	d021      	beq.n	8006366 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006322:	f7fe fda1 	bl	8004e68 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	429a      	cmp	r2, r3
 8006330:	d302      	bcc.n	8006338 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d116      	bne.n	8006366 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2220      	movs	r2, #32
 8006342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006352:	f043 0220 	orr.w	r2, r3, #32
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e023      	b.n	80063ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	0c1b      	lsrs	r3, r3, #16
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b01      	cmp	r3, #1
 800636e:	d10d      	bne.n	800638c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	43da      	mvns	r2, r3
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	4013      	ands	r3, r2
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	bf0c      	ite	eq
 8006382:	2301      	moveq	r3, #1
 8006384:	2300      	movne	r3, #0
 8006386:	b2db      	uxtb	r3, r3
 8006388:	461a      	mov	r2, r3
 800638a:	e00c      	b.n	80063a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	43da      	mvns	r2, r3
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	4013      	ands	r3, r2
 8006398:	b29b      	uxth	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	bf0c      	ite	eq
 800639e:	2301      	moveq	r3, #1
 80063a0:	2300      	movne	r3, #0
 80063a2:	b2db      	uxtb	r3, r3
 80063a4:	461a      	mov	r2, r3
 80063a6:	79fb      	ldrb	r3, [r7, #7]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d0b6      	beq.n	800631a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}

080063b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b084      	sub	sp, #16
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	60f8      	str	r0, [r7, #12]
 80063be:	60b9      	str	r1, [r7, #8]
 80063c0:	607a      	str	r2, [r7, #4]
 80063c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063c4:	e051      	b.n	800646a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063d4:	d123      	bne.n	800641e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2220      	movs	r2, #32
 80063fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	f043 0204 	orr.w	r2, r3, #4
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e046      	b.n	80064ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006424:	d021      	beq.n	800646a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006426:	f7fe fd1f 	bl	8004e68 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	429a      	cmp	r2, r3
 8006434:	d302      	bcc.n	800643c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d116      	bne.n	800646a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2220      	movs	r2, #32
 8006446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	f043 0220 	orr.w	r2, r3, #32
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e020      	b.n	80064ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	0c1b      	lsrs	r3, r3, #16
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b01      	cmp	r3, #1
 8006472:	d10c      	bne.n	800648e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	43da      	mvns	r2, r3
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	4013      	ands	r3, r2
 8006480:	b29b      	uxth	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	bf14      	ite	ne
 8006486:	2301      	movne	r3, #1
 8006488:	2300      	moveq	r3, #0
 800648a:	b2db      	uxtb	r3, r3
 800648c:	e00b      	b.n	80064a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	699b      	ldr	r3, [r3, #24]
 8006494:	43da      	mvns	r2, r3
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	4013      	ands	r3, r2
 800649a:	b29b      	uxth	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	bf14      	ite	ne
 80064a0:	2301      	movne	r3, #1
 80064a2:	2300      	moveq	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d18d      	bne.n	80063c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064c0:	e02d      	b.n	800651e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064c2:	68f8      	ldr	r0, [r7, #12]
 80064c4:	f000 f8ce 	bl	8006664 <I2C_IsAcknowledgeFailed>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e02d      	b.n	800652e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d8:	d021      	beq.n	800651e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064da:	f7fe fcc5 	bl	8004e68 <HAL_GetTick>
 80064de:	4602      	mov	r2, r0
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	1ad3      	subs	r3, r2, r3
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d302      	bcc.n	80064f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d116      	bne.n	800651e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	f043 0220 	orr.w	r2, r3, #32
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e007      	b.n	800652e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006528:	2b80      	cmp	r3, #128	; 0x80
 800652a:	d1ca      	bne.n	80064c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	60f8      	str	r0, [r7, #12]
 800653e:	60b9      	str	r1, [r7, #8]
 8006540:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006542:	e02d      	b.n	80065a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 f88d 	bl	8006664 <I2C_IsAcknowledgeFailed>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d001      	beq.n	8006554 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e02d      	b.n	80065b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655a:	d021      	beq.n	80065a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655c:	f7fe fc84 	bl	8004e68 <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	429a      	cmp	r2, r3
 800656a:	d302      	bcc.n	8006572 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d116      	bne.n	80065a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2220      	movs	r2, #32
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	f043 0220 	orr.w	r2, r3, #32
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e007      	b.n	80065b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	f003 0304 	and.w	r3, r3, #4
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	d1ca      	bne.n	8006544 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065c4:	e042      	b.n	800664c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	f003 0310 	and.w	r3, r3, #16
 80065d0:	2b10      	cmp	r3, #16
 80065d2:	d119      	bne.n	8006608 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f06f 0210 	mvn.w	r2, #16
 80065dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e029      	b.n	800665c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006608:	f7fe fc2e 	bl	8004e68 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	429a      	cmp	r2, r3
 8006616:	d302      	bcc.n	800661e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d116      	bne.n	800664c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2220      	movs	r2, #32
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006638:	f043 0220 	orr.w	r2, r3, #32
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e007      	b.n	800665c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006656:	2b40      	cmp	r3, #64	; 0x40
 8006658:	d1b5      	bne.n	80065c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800665a:	2300      	movs	r3, #0
}
 800665c:	4618      	mov	r0, r3
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006664:	b480      	push	{r7}
 8006666:	b083      	sub	sp, #12
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800667a:	d11b      	bne.n	80066b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006684:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2220      	movs	r2, #32
 8006690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a0:	f043 0204 	orr.w	r2, r3, #4
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e000      	b.n	80066b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
	...

080066c4 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 80066cc:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <HAL_PWR_EnableWakeUpPin+0x20>)
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	4904      	ldr	r1, [pc, #16]	; (80066e4 <HAL_PWR_EnableWakeUpPin+0x20>)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	604b      	str	r3, [r1, #4]
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	40007000 	.word	0x40007000

080066e8 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <HAL_PWR_DisableWakeUpPin+0x24>)
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	43db      	mvns	r3, r3
 80066f8:	4904      	ldr	r1, [pc, #16]	; (800670c <HAL_PWR_DisableWakeUpPin+0x24>)
 80066fa:	4013      	ands	r3, r2
 80066fc:	604b      	str	r3, [r1, #4]
}
 80066fe:	bf00      	nop
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	40007000 	.word	0x40007000

08006710 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8006710:	b480      	push	{r7}
 8006712:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8006714:	4b08      	ldr	r3, [pc, #32]	; (8006738 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a07      	ldr	r2, [pc, #28]	; (8006738 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800671a:	f043 0302 	orr.w	r3, r3, #2
 800671e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006720:	4b06      	ldr	r3, [pc, #24]	; (800673c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	4a05      	ldr	r2, [pc, #20]	; (800673c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8006726:	f043 0304 	orr.w	r3, r3, #4
 800672a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800672c:	bf30      	wfi
}
 800672e:	bf00      	nop
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	40007000 	.word	0x40007000
 800673c:	e000ed00 	.word	0xe000ed00

08006740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e0cc      	b.n	80068ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006754:	4b68      	ldr	r3, [pc, #416]	; (80068f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 030f 	and.w	r3, r3, #15
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	429a      	cmp	r2, r3
 8006760:	d90c      	bls.n	800677c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006762:	4b65      	ldr	r3, [pc, #404]	; (80068f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800676a:	4b63      	ldr	r3, [pc, #396]	; (80068f8 <HAL_RCC_ClockConfig+0x1b8>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 030f 	and.w	r3, r3, #15
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	429a      	cmp	r2, r3
 8006776:	d001      	beq.n	800677c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e0b8      	b.n	80068ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d020      	beq.n	80067ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d005      	beq.n	80067a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006794:	4b59      	ldr	r3, [pc, #356]	; (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	4a58      	ldr	r2, [pc, #352]	; (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 800679a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800679e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d005      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067ac:	4b53      	ldr	r3, [pc, #332]	; (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	4a52      	ldr	r2, [pc, #328]	; (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 80067b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067b8:	4b50      	ldr	r3, [pc, #320]	; (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	494d      	ldr	r1, [pc, #308]	; (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d044      	beq.n	8006860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d107      	bne.n	80067ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067de:	4b47      	ldr	r3, [pc, #284]	; (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d119      	bne.n	800681e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e07f      	b.n	80068ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d003      	beq.n	80067fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067fa:	2b03      	cmp	r3, #3
 80067fc:	d107      	bne.n	800680e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067fe:	4b3f      	ldr	r3, [pc, #252]	; (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d109      	bne.n	800681e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e06f      	b.n	80068ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800680e:	4b3b      	ldr	r3, [pc, #236]	; (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d101      	bne.n	800681e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e067      	b.n	80068ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800681e:	4b37      	ldr	r3, [pc, #220]	; (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f023 0203 	bic.w	r2, r3, #3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	4934      	ldr	r1, [pc, #208]	; (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 800682c:	4313      	orrs	r3, r2
 800682e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006830:	f7fe fb1a 	bl	8004e68 <HAL_GetTick>
 8006834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006836:	e00a      	b.n	800684e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006838:	f7fe fb16 	bl	8004e68 <HAL_GetTick>
 800683c:	4602      	mov	r2, r0
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	f241 3288 	movw	r2, #5000	; 0x1388
 8006846:	4293      	cmp	r3, r2
 8006848:	d901      	bls.n	800684e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e04f      	b.n	80068ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800684e:	4b2b      	ldr	r3, [pc, #172]	; (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 8006850:	689b      	ldr	r3, [r3, #8]
 8006852:	f003 020c 	and.w	r2, r3, #12
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	429a      	cmp	r2, r3
 800685e:	d1eb      	bne.n	8006838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006860:	4b25      	ldr	r3, [pc, #148]	; (80068f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 030f 	and.w	r3, r3, #15
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d20c      	bcs.n	8006888 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800686e:	4b22      	ldr	r3, [pc, #136]	; (80068f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006876:	4b20      	ldr	r3, [pc, #128]	; (80068f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 030f 	and.w	r3, r3, #15
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	429a      	cmp	r2, r3
 8006882:	d001      	beq.n	8006888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e032      	b.n	80068ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b00      	cmp	r3, #0
 8006892:	d008      	beq.n	80068a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006894:	4b19      	ldr	r3, [pc, #100]	; (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	4916      	ldr	r1, [pc, #88]	; (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 80068a2:	4313      	orrs	r3, r2
 80068a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d009      	beq.n	80068c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068b2:	4b12      	ldr	r3, [pc, #72]	; (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	490e      	ldr	r1, [pc, #56]	; (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068c6:	f000 fbb1 	bl	800702c <HAL_RCC_GetSysClockFreq>
 80068ca:	4602      	mov	r2, r0
 80068cc:	4b0b      	ldr	r3, [pc, #44]	; (80068fc <HAL_RCC_ClockConfig+0x1bc>)
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	091b      	lsrs	r3, r3, #4
 80068d2:	f003 030f 	and.w	r3, r3, #15
 80068d6:	490a      	ldr	r1, [pc, #40]	; (8006900 <HAL_RCC_ClockConfig+0x1c0>)
 80068d8:	5ccb      	ldrb	r3, [r1, r3]
 80068da:	fa22 f303 	lsr.w	r3, r2, r3
 80068de:	4a09      	ldr	r2, [pc, #36]	; (8006904 <HAL_RCC_ClockConfig+0x1c4>)
 80068e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068e2:	4b09      	ldr	r3, [pc, #36]	; (8006908 <HAL_RCC_ClockConfig+0x1c8>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fb f8f0 	bl	8001acc <HAL_InitTick>

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}
 80068f6:	bf00      	nop
 80068f8:	40023c00 	.word	0x40023c00
 80068fc:	40023800 	.word	0x40023800
 8006900:	080112a0 	.word	0x080112a0
 8006904:	2000000c 	.word	0x2000000c
 8006908:	20000010 	.word	0x20000010

0800690c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800690c:	b480      	push	{r7}
 800690e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006910:	4b03      	ldr	r3, [pc, #12]	; (8006920 <HAL_RCC_GetHCLKFreq+0x14>)
 8006912:	681b      	ldr	r3, [r3, #0]
}
 8006914:	4618      	mov	r0, r3
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	2000000c 	.word	0x2000000c

08006924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006928:	f7ff fff0 	bl	800690c <HAL_RCC_GetHCLKFreq>
 800692c:	4602      	mov	r2, r0
 800692e:	4b05      	ldr	r3, [pc, #20]	; (8006944 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	0a9b      	lsrs	r3, r3, #10
 8006934:	f003 0307 	and.w	r3, r3, #7
 8006938:	4903      	ldr	r1, [pc, #12]	; (8006948 <HAL_RCC_GetPCLK1Freq+0x24>)
 800693a:	5ccb      	ldrb	r3, [r1, r3]
 800693c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006940:	4618      	mov	r0, r3
 8006942:	bd80      	pop	{r7, pc}
 8006944:	40023800 	.word	0x40023800
 8006948:	080112b0 	.word	0x080112b0

0800694c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006950:	f7ff ffdc 	bl	800690c <HAL_RCC_GetHCLKFreq>
 8006954:	4602      	mov	r2, r0
 8006956:	4b05      	ldr	r3, [pc, #20]	; (800696c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	0b5b      	lsrs	r3, r3, #13
 800695c:	f003 0307 	and.w	r3, r3, #7
 8006960:	4903      	ldr	r1, [pc, #12]	; (8006970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006962:	5ccb      	ldrb	r3, [r1, r3]
 8006964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006968:	4618      	mov	r0, r3
 800696a:	bd80      	pop	{r7, pc}
 800696c:	40023800 	.word	0x40023800
 8006970:	080112b0 	.word	0x080112b0

08006974 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	220f      	movs	r2, #15
 8006982:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006984:	4b12      	ldr	r3, [pc, #72]	; (80069d0 <HAL_RCC_GetClockConfig+0x5c>)
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f003 0203 	and.w	r2, r3, #3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006990:	4b0f      	ldr	r3, [pc, #60]	; (80069d0 <HAL_RCC_GetClockConfig+0x5c>)
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800699c:	4b0c      	ldr	r3, [pc, #48]	; (80069d0 <HAL_RCC_GetClockConfig+0x5c>)
 800699e:	689b      	ldr	r3, [r3, #8]
 80069a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80069a8:	4b09      	ldr	r3, [pc, #36]	; (80069d0 <HAL_RCC_GetClockConfig+0x5c>)
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	08db      	lsrs	r3, r3, #3
 80069ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80069b6:	4b07      	ldr	r3, [pc, #28]	; (80069d4 <HAL_RCC_GetClockConfig+0x60>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 020f 	and.w	r2, r3, #15
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	601a      	str	r2, [r3, #0]
}
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	40023800 	.word	0x40023800
 80069d4:	40023c00 	.word	0x40023c00

080069d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b08c      	sub	sp, #48	; 0x30
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d010      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006a10:	4b6f      	ldr	r3, [pc, #444]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a16:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	496c      	ldr	r1, [pc, #432]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0302 	and.w	r3, r3, #2
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d010      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006a3e:	4b64      	ldr	r3, [pc, #400]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a44:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4c:	4960      	ldr	r1, [pc, #384]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d101      	bne.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d017      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a6c:	4b58      	ldr	r3, [pc, #352]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	4955      	ldr	r1, [pc, #340]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a8a:	d101      	bne.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d101      	bne.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0308 	and.w	r3, r3, #8
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d017      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006aa8:	4b49      	ldr	r3, [pc, #292]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab6:	4946      	ldr	r1, [pc, #280]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ac6:	d101      	bne.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0320 	and.w	r3, r3, #32
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f000 808a 	beq.w	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60bb      	str	r3, [r7, #8]
 8006aea:	4b39      	ldr	r3, [pc, #228]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	4a38      	ldr	r2, [pc, #224]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006af4:	6413      	str	r3, [r2, #64]	; 0x40
 8006af6:	4b36      	ldr	r3, [pc, #216]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006afe:	60bb      	str	r3, [r7, #8]
 8006b00:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b02:	4b34      	ldr	r3, [pc, #208]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a33      	ldr	r2, [pc, #204]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b0e:	f7fe f9ab 	bl	8004e68 <HAL_GetTick>
 8006b12:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b14:	e008      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b16:	f7fe f9a7 	bl	8004e68 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	2b02      	cmp	r3, #2
 8006b22:	d901      	bls.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e278      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b28:	4b2a      	ldr	r3, [pc, #168]	; (8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d0f0      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b34:	4b26      	ldr	r3, [pc, #152]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b3c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d02f      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b4c:	6a3a      	ldr	r2, [r7, #32]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d028      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b52:	4b1f      	ldr	r3, [pc, #124]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b5a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b5c:	4b1e      	ldr	r3, [pc, #120]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006b5e:	2201      	movs	r2, #1
 8006b60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b62:	4b1d      	ldr	r3, [pc, #116]	; (8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006b68:	4a19      	ldr	r2, [pc, #100]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b6e:	4b18      	ldr	r3, [pc, #96]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d114      	bne.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006b7a:	f7fe f975 	bl	8004e68 <HAL_GetTick>
 8006b7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b80:	e00a      	b.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b82:	f7fe f971 	bl	8004e68 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d901      	bls.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e240      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b98:	4b0d      	ldr	r3, [pc, #52]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d0ee      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bb0:	d114      	bne.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8006bb2:	4b07      	ldr	r3, [pc, #28]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bbe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bc6:	4902      	ldr	r1, [pc, #8]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	608b      	str	r3, [r1, #8]
 8006bcc:	e00c      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006bce:	bf00      	nop
 8006bd0:	40023800 	.word	0x40023800
 8006bd4:	40007000 	.word	0x40007000
 8006bd8:	42470e40 	.word	0x42470e40
 8006bdc:	4b4a      	ldr	r3, [pc, #296]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	4a49      	ldr	r2, [pc, #292]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006be2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006be6:	6093      	str	r3, [r2, #8]
 8006be8:	4b47      	ldr	r3, [pc, #284]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006bea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bf4:	4944      	ldr	r1, [pc, #272]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0310 	and.w	r3, r3, #16
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d004      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006c0c:	4b3f      	ldr	r3, [pc, #252]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006c0e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006c1c:	4b3a      	ldr	r3, [pc, #232]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c2a:	4937      	ldr	r1, [pc, #220]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00a      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006c3e:	4b32      	ldr	r3, [pc, #200]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c44:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c4c:	492e      	ldr	r1, [pc, #184]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d011      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006c60:	4b29      	ldr	r3, [pc, #164]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c66:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c6e:	4926      	ldr	r1, [pc, #152]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c7e:	d101      	bne.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006c80:	2301      	movs	r3, #1
 8006c82:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00a      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006c90:	4b1d      	ldr	r3, [pc, #116]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c9e:	491a      	ldr	r1, [pc, #104]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d011      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006cb2:	4b15      	ldr	r3, [pc, #84]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006cb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cb8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cc0:	4911      	ldr	r1, [pc, #68]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cd0:	d101      	bne.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d005      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ce4:	f040 80ff 	bne.w	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006ce8:	4b09      	ldr	r3, [pc, #36]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006cee:	f7fe f8bb 	bl	8004e68 <HAL_GetTick>
 8006cf2:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006cf4:	e00e      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006cf6:	f7fe f8b7 	bl	8004e68 <HAL_GetTick>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	1ad3      	subs	r3, r2, r3
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d907      	bls.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e188      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006d08:	40023800 	.word	0x40023800
 8006d0c:	424711e0 	.word	0x424711e0
 8006d10:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006d14:	4b7e      	ldr	r3, [pc, #504]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1ea      	bne.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d009      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d028      	beq.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d124      	bne.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006d48:	4b71      	ldr	r3, [pc, #452]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d4e:	0c1b      	lsrs	r3, r3, #16
 8006d50:	f003 0303 	and.w	r3, r3, #3
 8006d54:	3301      	adds	r3, #1
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006d5a:	4b6d      	ldr	r3, [pc, #436]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d60:	0e1b      	lsrs	r3, r3, #24
 8006d62:	f003 030f 	and.w	r3, r3, #15
 8006d66:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	019b      	lsls	r3, r3, #6
 8006d72:	431a      	orrs	r2, r3
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	085b      	lsrs	r3, r3, #1
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	041b      	lsls	r3, r3, #16
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	061b      	lsls	r3, r3, #24
 8006d82:	431a      	orrs	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	695b      	ldr	r3, [r3, #20]
 8006d88:	071b      	lsls	r3, r3, #28
 8006d8a:	4961      	ldr	r1, [pc, #388]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0304 	and.w	r3, r3, #4
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d004      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006da6:	d00a      	beq.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d035      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dbc:	d130      	bne.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006dbe:	4b54      	ldr	r3, [pc, #336]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dc4:	0c1b      	lsrs	r3, r3, #16
 8006dc6:	f003 0303 	and.w	r3, r3, #3
 8006dca:	3301      	adds	r3, #1
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006dd0:	4b4f      	ldr	r3, [pc, #316]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dd6:	0f1b      	lsrs	r3, r3, #28
 8006dd8:	f003 0307 	and.w	r3, r3, #7
 8006ddc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	019b      	lsls	r3, r3, #6
 8006de8:	431a      	orrs	r2, r3
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	085b      	lsrs	r3, r3, #1
 8006dee:	3b01      	subs	r3, #1
 8006df0:	041b      	lsls	r3, r3, #16
 8006df2:	431a      	orrs	r2, r3
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	061b      	lsls	r3, r3, #24
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	071b      	lsls	r3, r3, #28
 8006e00:	4943      	ldr	r1, [pc, #268]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006e08:	4b41      	ldr	r3, [pc, #260]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e0e:	f023 021f 	bic.w	r2, r3, #31
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e16:	3b01      	subs	r3, #1
 8006e18:	493d      	ldr	r1, [pc, #244]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d029      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e34:	d124      	bne.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006e36:	4b36      	ldr	r3, [pc, #216]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e3c:	0c1b      	lsrs	r3, r3, #16
 8006e3e:	f003 0303 	and.w	r3, r3, #3
 8006e42:	3301      	adds	r3, #1
 8006e44:	005b      	lsls	r3, r3, #1
 8006e46:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006e48:	4b31      	ldr	r3, [pc, #196]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e4e:	0f1b      	lsrs	r3, r3, #28
 8006e50:	f003 0307 	and.w	r3, r3, #7
 8006e54:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	019b      	lsls	r3, r3, #6
 8006e60:	431a      	orrs	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	085b      	lsrs	r3, r3, #1
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	041b      	lsls	r3, r3, #16
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	061b      	lsls	r3, r3, #24
 8006e72:	431a      	orrs	r2, r3
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	071b      	lsls	r3, r3, #28
 8006e78:	4925      	ldr	r1, [pc, #148]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d016      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	019b      	lsls	r3, r3, #6
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	085b      	lsrs	r3, r3, #1
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	041b      	lsls	r3, r3, #16
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	061b      	lsls	r3, r3, #24
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	071b      	lsls	r3, r3, #28
 8006eb2:	4917      	ldr	r1, [pc, #92]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006eba:	4b16      	ldr	r3, [pc, #88]	; (8006f14 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ec0:	f7fd ffd2 	bl	8004e68 <HAL_GetTick>
 8006ec4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ec6:	e008      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ec8:	f7fd ffce 	bl	8004e68 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e09f      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006eda:	4b0d      	ldr	r3, [pc, #52]	; (8006f10 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0f0      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8006ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	f040 8095 	bne.w	8007018 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006eee:	4b0a      	ldr	r3, [pc, #40]	; (8006f18 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ef4:	f7fd ffb8 	bl	8004e68 <HAL_GetTick>
 8006ef8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006efa:	e00f      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006efc:	f7fd ffb4 	bl	8004e68 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d908      	bls.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f0a:	2303      	movs	r3, #3
 8006f0c:	e085      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006f0e:	bf00      	nop
 8006f10:	40023800 	.word	0x40023800
 8006f14:	42470068 	.word	0x42470068
 8006f18:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006f1c:	4b41      	ldr	r3, [pc, #260]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f28:	d0e8      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f003 0304 	and.w	r3, r3, #4
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d009      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d02b      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d127      	bne.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8006f52:	4b34      	ldr	r3, [pc, #208]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f58:	0c1b      	lsrs	r3, r3, #16
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	3301      	adds	r3, #1
 8006f60:	005b      	lsls	r3, r3, #1
 8006f62:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	699a      	ldr	r2, [r3, #24]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	019b      	lsls	r3, r3, #6
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	085b      	lsrs	r3, r3, #1
 8006f74:	3b01      	subs	r3, #1
 8006f76:	041b      	lsls	r3, r3, #16
 8006f78:	431a      	orrs	r2, r3
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	061b      	lsls	r3, r3, #24
 8006f80:	4928      	ldr	r1, [pc, #160]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006f88:	4b26      	ldr	r3, [pc, #152]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f8e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f96:	3b01      	subs	r3, #1
 8006f98:	021b      	lsls	r3, r3, #8
 8006f9a:	4922      	ldr	r1, [pc, #136]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d01d      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x612>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fb6:	d118      	bne.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006fb8:	4b1a      	ldr	r3, [pc, #104]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fbe:	0e1b      	lsrs	r3, r3, #24
 8006fc0:	f003 030f 	and.w	r3, r3, #15
 8006fc4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699a      	ldr	r2, [r3, #24]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	69db      	ldr	r3, [r3, #28]
 8006fce:	019b      	lsls	r3, r3, #6
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	085b      	lsrs	r3, r3, #1
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	041b      	lsls	r3, r3, #16
 8006fdc:	431a      	orrs	r2, r3
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	061b      	lsls	r3, r3, #24
 8006fe2:	4910      	ldr	r1, [pc, #64]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006fea:	4b0f      	ldr	r3, [pc, #60]	; (8007028 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8006fec:	2201      	movs	r2, #1
 8006fee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ff0:	f7fd ff3a 	bl	8004e68 <HAL_GetTick>
 8006ff4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006ff6:	e008      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006ff8:	f7fd ff36 	bl	8004e68 <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	2b02      	cmp	r3, #2
 8007004:	d901      	bls.n	800700a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e007      	b.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800700a:	4b06      	ldr	r3, [pc, #24]	; (8007024 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007016:	d1ef      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3730      	adds	r7, #48	; 0x30
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40023800 	.word	0x40023800
 8007028:	42470070 	.word	0x42470070

0800702c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800702c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007030:	b088      	sub	sp, #32
 8007032:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007048:	4bce      	ldr	r3, [pc, #824]	; (8007384 <HAL_RCC_GetSysClockFreq+0x358>)
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f003 030c 	and.w	r3, r3, #12
 8007050:	2b0c      	cmp	r3, #12
 8007052:	f200 818d 	bhi.w	8007370 <HAL_RCC_GetSysClockFreq+0x344>
 8007056:	a201      	add	r2, pc, #4	; (adr r2, 800705c <HAL_RCC_GetSysClockFreq+0x30>)
 8007058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705c:	08007091 	.word	0x08007091
 8007060:	08007371 	.word	0x08007371
 8007064:	08007371 	.word	0x08007371
 8007068:	08007371 	.word	0x08007371
 800706c:	08007097 	.word	0x08007097
 8007070:	08007371 	.word	0x08007371
 8007074:	08007371 	.word	0x08007371
 8007078:	08007371 	.word	0x08007371
 800707c:	0800709d 	.word	0x0800709d
 8007080:	08007371 	.word	0x08007371
 8007084:	08007371 	.word	0x08007371
 8007088:	08007371 	.word	0x08007371
 800708c:	08007211 	.word	0x08007211
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007090:	4bbd      	ldr	r3, [pc, #756]	; (8007388 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007092:	61bb      	str	r3, [r7, #24]
       break;
 8007094:	e16f      	b.n	8007376 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007096:	4bbd      	ldr	r3, [pc, #756]	; (800738c <HAL_RCC_GetSysClockFreq+0x360>)
 8007098:	61bb      	str	r3, [r7, #24]
      break;
 800709a:	e16c      	b.n	8007376 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800709c:	4bb9      	ldr	r3, [pc, #740]	; (8007384 <HAL_RCC_GetSysClockFreq+0x358>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070a4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80070a6:	4bb7      	ldr	r3, [pc, #732]	; (8007384 <HAL_RCC_GetSysClockFreq+0x358>)
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d053      	beq.n	800715a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070b2:	4bb4      	ldr	r3, [pc, #720]	; (8007384 <HAL_RCC_GetSysClockFreq+0x358>)
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	099b      	lsrs	r3, r3, #6
 80070b8:	461a      	mov	r2, r3
 80070ba:	f04f 0300 	mov.w	r3, #0
 80070be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80070c2:	f04f 0100 	mov.w	r1, #0
 80070c6:	ea02 0400 	and.w	r4, r2, r0
 80070ca:	603c      	str	r4, [r7, #0]
 80070cc:	400b      	ands	r3, r1
 80070ce:	607b      	str	r3, [r7, #4]
 80070d0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80070d4:	4620      	mov	r0, r4
 80070d6:	4629      	mov	r1, r5
 80070d8:	f04f 0200 	mov.w	r2, #0
 80070dc:	f04f 0300 	mov.w	r3, #0
 80070e0:	014b      	lsls	r3, r1, #5
 80070e2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80070e6:	0142      	lsls	r2, r0, #5
 80070e8:	4610      	mov	r0, r2
 80070ea:	4619      	mov	r1, r3
 80070ec:	4623      	mov	r3, r4
 80070ee:	1ac0      	subs	r0, r0, r3
 80070f0:	462b      	mov	r3, r5
 80070f2:	eb61 0103 	sbc.w	r1, r1, r3
 80070f6:	f04f 0200 	mov.w	r2, #0
 80070fa:	f04f 0300 	mov.w	r3, #0
 80070fe:	018b      	lsls	r3, r1, #6
 8007100:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007104:	0182      	lsls	r2, r0, #6
 8007106:	1a12      	subs	r2, r2, r0
 8007108:	eb63 0301 	sbc.w	r3, r3, r1
 800710c:	f04f 0000 	mov.w	r0, #0
 8007110:	f04f 0100 	mov.w	r1, #0
 8007114:	00d9      	lsls	r1, r3, #3
 8007116:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800711a:	00d0      	lsls	r0, r2, #3
 800711c:	4602      	mov	r2, r0
 800711e:	460b      	mov	r3, r1
 8007120:	4621      	mov	r1, r4
 8007122:	1852      	adds	r2, r2, r1
 8007124:	4629      	mov	r1, r5
 8007126:	eb43 0101 	adc.w	r1, r3, r1
 800712a:	460b      	mov	r3, r1
 800712c:	f04f 0000 	mov.w	r0, #0
 8007130:	f04f 0100 	mov.w	r1, #0
 8007134:	0259      	lsls	r1, r3, #9
 8007136:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800713a:	0250      	lsls	r0, r2, #9
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	4610      	mov	r0, r2
 8007142:	4619      	mov	r1, r3
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	461a      	mov	r2, r3
 8007148:	f04f 0300 	mov.w	r3, #0
 800714c:	f7f9 fdac 	bl	8000ca8 <__aeabi_uldivmod>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4613      	mov	r3, r2
 8007156:	61fb      	str	r3, [r7, #28]
 8007158:	e04c      	b.n	80071f4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800715a:	4b8a      	ldr	r3, [pc, #552]	; (8007384 <HAL_RCC_GetSysClockFreq+0x358>)
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	099b      	lsrs	r3, r3, #6
 8007160:	461a      	mov	r2, r3
 8007162:	f04f 0300 	mov.w	r3, #0
 8007166:	f240 10ff 	movw	r0, #511	; 0x1ff
 800716a:	f04f 0100 	mov.w	r1, #0
 800716e:	ea02 0a00 	and.w	sl, r2, r0
 8007172:	ea03 0b01 	and.w	fp, r3, r1
 8007176:	4650      	mov	r0, sl
 8007178:	4659      	mov	r1, fp
 800717a:	f04f 0200 	mov.w	r2, #0
 800717e:	f04f 0300 	mov.w	r3, #0
 8007182:	014b      	lsls	r3, r1, #5
 8007184:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007188:	0142      	lsls	r2, r0, #5
 800718a:	4610      	mov	r0, r2
 800718c:	4619      	mov	r1, r3
 800718e:	ebb0 000a 	subs.w	r0, r0, sl
 8007192:	eb61 010b 	sbc.w	r1, r1, fp
 8007196:	f04f 0200 	mov.w	r2, #0
 800719a:	f04f 0300 	mov.w	r3, #0
 800719e:	018b      	lsls	r3, r1, #6
 80071a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80071a4:	0182      	lsls	r2, r0, #6
 80071a6:	1a12      	subs	r2, r2, r0
 80071a8:	eb63 0301 	sbc.w	r3, r3, r1
 80071ac:	f04f 0000 	mov.w	r0, #0
 80071b0:	f04f 0100 	mov.w	r1, #0
 80071b4:	00d9      	lsls	r1, r3, #3
 80071b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071ba:	00d0      	lsls	r0, r2, #3
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	eb12 020a 	adds.w	r2, r2, sl
 80071c4:	eb43 030b 	adc.w	r3, r3, fp
 80071c8:	f04f 0000 	mov.w	r0, #0
 80071cc:	f04f 0100 	mov.w	r1, #0
 80071d0:	0299      	lsls	r1, r3, #10
 80071d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80071d6:	0290      	lsls	r0, r2, #10
 80071d8:	4602      	mov	r2, r0
 80071da:	460b      	mov	r3, r1
 80071dc:	4610      	mov	r0, r2
 80071de:	4619      	mov	r1, r3
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	461a      	mov	r2, r3
 80071e4:	f04f 0300 	mov.w	r3, #0
 80071e8:	f7f9 fd5e 	bl	8000ca8 <__aeabi_uldivmod>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4613      	mov	r3, r2
 80071f2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80071f4:	4b63      	ldr	r3, [pc, #396]	; (8007384 <HAL_RCC_GetSysClockFreq+0x358>)
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	0c1b      	lsrs	r3, r3, #16
 80071fa:	f003 0303 	and.w	r3, r3, #3
 80071fe:	3301      	adds	r3, #1
 8007200:	005b      	lsls	r3, r3, #1
 8007202:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8007204:	69fa      	ldr	r2, [r7, #28]
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	fbb2 f3f3 	udiv	r3, r2, r3
 800720c:	61bb      	str	r3, [r7, #24]
      break;
 800720e:	e0b2      	b.n	8007376 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007210:	4b5c      	ldr	r3, [pc, #368]	; (8007384 <HAL_RCC_GetSysClockFreq+0x358>)
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007218:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800721a:	4b5a      	ldr	r3, [pc, #360]	; (8007384 <HAL_RCC_GetSysClockFreq+0x358>)
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d04d      	beq.n	80072c2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007226:	4b57      	ldr	r3, [pc, #348]	; (8007384 <HAL_RCC_GetSysClockFreq+0x358>)
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	099b      	lsrs	r3, r3, #6
 800722c:	461a      	mov	r2, r3
 800722e:	f04f 0300 	mov.w	r3, #0
 8007232:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007236:	f04f 0100 	mov.w	r1, #0
 800723a:	ea02 0800 	and.w	r8, r2, r0
 800723e:	ea03 0901 	and.w	r9, r3, r1
 8007242:	4640      	mov	r0, r8
 8007244:	4649      	mov	r1, r9
 8007246:	f04f 0200 	mov.w	r2, #0
 800724a:	f04f 0300 	mov.w	r3, #0
 800724e:	014b      	lsls	r3, r1, #5
 8007250:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007254:	0142      	lsls	r2, r0, #5
 8007256:	4610      	mov	r0, r2
 8007258:	4619      	mov	r1, r3
 800725a:	ebb0 0008 	subs.w	r0, r0, r8
 800725e:	eb61 0109 	sbc.w	r1, r1, r9
 8007262:	f04f 0200 	mov.w	r2, #0
 8007266:	f04f 0300 	mov.w	r3, #0
 800726a:	018b      	lsls	r3, r1, #6
 800726c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007270:	0182      	lsls	r2, r0, #6
 8007272:	1a12      	subs	r2, r2, r0
 8007274:	eb63 0301 	sbc.w	r3, r3, r1
 8007278:	f04f 0000 	mov.w	r0, #0
 800727c:	f04f 0100 	mov.w	r1, #0
 8007280:	00d9      	lsls	r1, r3, #3
 8007282:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007286:	00d0      	lsls	r0, r2, #3
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	eb12 0208 	adds.w	r2, r2, r8
 8007290:	eb43 0309 	adc.w	r3, r3, r9
 8007294:	f04f 0000 	mov.w	r0, #0
 8007298:	f04f 0100 	mov.w	r1, #0
 800729c:	0259      	lsls	r1, r3, #9
 800729e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80072a2:	0250      	lsls	r0, r2, #9
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4610      	mov	r0, r2
 80072aa:	4619      	mov	r1, r3
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	461a      	mov	r2, r3
 80072b0:	f04f 0300 	mov.w	r3, #0
 80072b4:	f7f9 fcf8 	bl	8000ca8 <__aeabi_uldivmod>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	4613      	mov	r3, r2
 80072be:	61fb      	str	r3, [r7, #28]
 80072c0:	e04a      	b.n	8007358 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072c2:	4b30      	ldr	r3, [pc, #192]	; (8007384 <HAL_RCC_GetSysClockFreq+0x358>)
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	099b      	lsrs	r3, r3, #6
 80072c8:	461a      	mov	r2, r3
 80072ca:	f04f 0300 	mov.w	r3, #0
 80072ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80072d2:	f04f 0100 	mov.w	r1, #0
 80072d6:	ea02 0400 	and.w	r4, r2, r0
 80072da:	ea03 0501 	and.w	r5, r3, r1
 80072de:	4620      	mov	r0, r4
 80072e0:	4629      	mov	r1, r5
 80072e2:	f04f 0200 	mov.w	r2, #0
 80072e6:	f04f 0300 	mov.w	r3, #0
 80072ea:	014b      	lsls	r3, r1, #5
 80072ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80072f0:	0142      	lsls	r2, r0, #5
 80072f2:	4610      	mov	r0, r2
 80072f4:	4619      	mov	r1, r3
 80072f6:	1b00      	subs	r0, r0, r4
 80072f8:	eb61 0105 	sbc.w	r1, r1, r5
 80072fc:	f04f 0200 	mov.w	r2, #0
 8007300:	f04f 0300 	mov.w	r3, #0
 8007304:	018b      	lsls	r3, r1, #6
 8007306:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800730a:	0182      	lsls	r2, r0, #6
 800730c:	1a12      	subs	r2, r2, r0
 800730e:	eb63 0301 	sbc.w	r3, r3, r1
 8007312:	f04f 0000 	mov.w	r0, #0
 8007316:	f04f 0100 	mov.w	r1, #0
 800731a:	00d9      	lsls	r1, r3, #3
 800731c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007320:	00d0      	lsls	r0, r2, #3
 8007322:	4602      	mov	r2, r0
 8007324:	460b      	mov	r3, r1
 8007326:	1912      	adds	r2, r2, r4
 8007328:	eb45 0303 	adc.w	r3, r5, r3
 800732c:	f04f 0000 	mov.w	r0, #0
 8007330:	f04f 0100 	mov.w	r1, #0
 8007334:	0299      	lsls	r1, r3, #10
 8007336:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800733a:	0290      	lsls	r0, r2, #10
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	4610      	mov	r0, r2
 8007342:	4619      	mov	r1, r3
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	461a      	mov	r2, r3
 8007348:	f04f 0300 	mov.w	r3, #0
 800734c:	f7f9 fcac 	bl	8000ca8 <__aeabi_uldivmod>
 8007350:	4602      	mov	r2, r0
 8007352:	460b      	mov	r3, r1
 8007354:	4613      	mov	r3, r2
 8007356:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007358:	4b0a      	ldr	r3, [pc, #40]	; (8007384 <HAL_RCC_GetSysClockFreq+0x358>)
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	0f1b      	lsrs	r3, r3, #28
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8007364:	69fa      	ldr	r2, [r7, #28]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	fbb2 f3f3 	udiv	r3, r2, r3
 800736c:	61bb      	str	r3, [r7, #24]
      break;
 800736e:	e002      	b.n	8007376 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007370:	4b05      	ldr	r3, [pc, #20]	; (8007388 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007372:	61bb      	str	r3, [r7, #24]
      break;
 8007374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007376:	69bb      	ldr	r3, [r7, #24]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3720      	adds	r7, #32
 800737c:	46bd      	mov	sp, r7
 800737e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007382:	bf00      	nop
 8007384:	40023800 	.word	0x40023800
 8007388:	00f42400 	.word	0x00f42400
 800738c:	007a1200 	.word	0x007a1200

08007390 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e28d      	b.n	80078be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 8083 	beq.w	80074b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80073b0:	4b94      	ldr	r3, [pc, #592]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f003 030c 	and.w	r3, r3, #12
 80073b8:	2b04      	cmp	r3, #4
 80073ba:	d019      	beq.n	80073f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80073bc:	4b91      	ldr	r3, [pc, #580]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80073c4:	2b08      	cmp	r3, #8
 80073c6:	d106      	bne.n	80073d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80073c8:	4b8e      	ldr	r3, [pc, #568]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073d4:	d00c      	beq.n	80073f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073d6:	4b8b      	ldr	r3, [pc, #556]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80073de:	2b0c      	cmp	r3, #12
 80073e0:	d112      	bne.n	8007408 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80073e2:	4b88      	ldr	r3, [pc, #544]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073ee:	d10b      	bne.n	8007408 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073f0:	4b84      	ldr	r3, [pc, #528]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d05b      	beq.n	80074b4 <HAL_RCC_OscConfig+0x124>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d157      	bne.n	80074b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e25a      	b.n	80078be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007410:	d106      	bne.n	8007420 <HAL_RCC_OscConfig+0x90>
 8007412:	4b7c      	ldr	r3, [pc, #496]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a7b      	ldr	r2, [pc, #492]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 8007418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800741c:	6013      	str	r3, [r2, #0]
 800741e:	e01d      	b.n	800745c <HAL_RCC_OscConfig+0xcc>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007428:	d10c      	bne.n	8007444 <HAL_RCC_OscConfig+0xb4>
 800742a:	4b76      	ldr	r3, [pc, #472]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a75      	ldr	r2, [pc, #468]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 8007430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007434:	6013      	str	r3, [r2, #0]
 8007436:	4b73      	ldr	r3, [pc, #460]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a72      	ldr	r2, [pc, #456]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 800743c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007440:	6013      	str	r3, [r2, #0]
 8007442:	e00b      	b.n	800745c <HAL_RCC_OscConfig+0xcc>
 8007444:	4b6f      	ldr	r3, [pc, #444]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a6e      	ldr	r2, [pc, #440]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 800744a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800744e:	6013      	str	r3, [r2, #0]
 8007450:	4b6c      	ldr	r3, [pc, #432]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a6b      	ldr	r2, [pc, #428]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 8007456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800745a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d013      	beq.n	800748c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007464:	f7fd fd00 	bl	8004e68 <HAL_GetTick>
 8007468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800746a:	e008      	b.n	800747e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800746c:	f7fd fcfc 	bl	8004e68 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	2b64      	cmp	r3, #100	; 0x64
 8007478:	d901      	bls.n	800747e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800747a:	2303      	movs	r3, #3
 800747c:	e21f      	b.n	80078be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800747e:	4b61      	ldr	r3, [pc, #388]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d0f0      	beq.n	800746c <HAL_RCC_OscConfig+0xdc>
 800748a:	e014      	b.n	80074b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800748c:	f7fd fcec 	bl	8004e68 <HAL_GetTick>
 8007490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007492:	e008      	b.n	80074a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007494:	f7fd fce8 	bl	8004e68 <HAL_GetTick>
 8007498:	4602      	mov	r2, r0
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	1ad3      	subs	r3, r2, r3
 800749e:	2b64      	cmp	r3, #100	; 0x64
 80074a0:	d901      	bls.n	80074a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e20b      	b.n	80078be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074a6:	4b57      	ldr	r3, [pc, #348]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d1f0      	bne.n	8007494 <HAL_RCC_OscConfig+0x104>
 80074b2:	e000      	b.n	80074b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f003 0302 	and.w	r3, r3, #2
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d06f      	beq.n	80075a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80074c2:	4b50      	ldr	r3, [pc, #320]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f003 030c 	and.w	r3, r3, #12
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d017      	beq.n	80074fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80074ce:	4b4d      	ldr	r3, [pc, #308]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80074d6:	2b08      	cmp	r3, #8
 80074d8:	d105      	bne.n	80074e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80074da:	4b4a      	ldr	r3, [pc, #296]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00b      	beq.n	80074fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074e6:	4b47      	ldr	r3, [pc, #284]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80074ee:	2b0c      	cmp	r3, #12
 80074f0:	d11c      	bne.n	800752c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80074f2:	4b44      	ldr	r3, [pc, #272]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d116      	bne.n	800752c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074fe:	4b41      	ldr	r3, [pc, #260]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b00      	cmp	r3, #0
 8007508:	d005      	beq.n	8007516 <HAL_RCC_OscConfig+0x186>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d001      	beq.n	8007516 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e1d3      	b.n	80078be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007516:	4b3b      	ldr	r3, [pc, #236]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	00db      	lsls	r3, r3, #3
 8007524:	4937      	ldr	r1, [pc, #220]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 8007526:	4313      	orrs	r3, r2
 8007528:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800752a:	e03a      	b.n	80075a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d020      	beq.n	8007576 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007534:	4b34      	ldr	r3, [pc, #208]	; (8007608 <HAL_RCC_OscConfig+0x278>)
 8007536:	2201      	movs	r2, #1
 8007538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800753a:	f7fd fc95 	bl	8004e68 <HAL_GetTick>
 800753e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007540:	e008      	b.n	8007554 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007542:	f7fd fc91 	bl	8004e68 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	2b02      	cmp	r3, #2
 800754e:	d901      	bls.n	8007554 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	e1b4      	b.n	80078be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007554:	4b2b      	ldr	r3, [pc, #172]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f003 0302 	and.w	r3, r3, #2
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0f0      	beq.n	8007542 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007560:	4b28      	ldr	r3, [pc, #160]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	4925      	ldr	r1, [pc, #148]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 8007570:	4313      	orrs	r3, r2
 8007572:	600b      	str	r3, [r1, #0]
 8007574:	e015      	b.n	80075a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007576:	4b24      	ldr	r3, [pc, #144]	; (8007608 <HAL_RCC_OscConfig+0x278>)
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800757c:	f7fd fc74 	bl	8004e68 <HAL_GetTick>
 8007580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007582:	e008      	b.n	8007596 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007584:	f7fd fc70 	bl	8004e68 <HAL_GetTick>
 8007588:	4602      	mov	r2, r0
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	2b02      	cmp	r3, #2
 8007590:	d901      	bls.n	8007596 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007592:	2303      	movs	r3, #3
 8007594:	e193      	b.n	80078be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007596:	4b1b      	ldr	r3, [pc, #108]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1f0      	bne.n	8007584 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0308 	and.w	r3, r3, #8
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d036      	beq.n	800761c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d016      	beq.n	80075e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075b6:	4b15      	ldr	r3, [pc, #84]	; (800760c <HAL_RCC_OscConfig+0x27c>)
 80075b8:	2201      	movs	r2, #1
 80075ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075bc:	f7fd fc54 	bl	8004e68 <HAL_GetTick>
 80075c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075c2:	e008      	b.n	80075d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075c4:	f7fd fc50 	bl	8004e68 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d901      	bls.n	80075d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e173      	b.n	80078be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075d6:	4b0b      	ldr	r3, [pc, #44]	; (8007604 <HAL_RCC_OscConfig+0x274>)
 80075d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075da:	f003 0302 	and.w	r3, r3, #2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d0f0      	beq.n	80075c4 <HAL_RCC_OscConfig+0x234>
 80075e2:	e01b      	b.n	800761c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80075e4:	4b09      	ldr	r3, [pc, #36]	; (800760c <HAL_RCC_OscConfig+0x27c>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075ea:	f7fd fc3d 	bl	8004e68 <HAL_GetTick>
 80075ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075f0:	e00e      	b.n	8007610 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075f2:	f7fd fc39 	bl	8004e68 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d907      	bls.n	8007610 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e15c      	b.n	80078be <HAL_RCC_OscConfig+0x52e>
 8007604:	40023800 	.word	0x40023800
 8007608:	42470000 	.word	0x42470000
 800760c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007610:	4b8a      	ldr	r3, [pc, #552]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 8007612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007614:	f003 0302 	and.w	r3, r3, #2
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1ea      	bne.n	80075f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0304 	and.w	r3, r3, #4
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 8097 	beq.w	8007758 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800762a:	2300      	movs	r3, #0
 800762c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800762e:	4b83      	ldr	r3, [pc, #524]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 8007630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10f      	bne.n	800765a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800763a:	2300      	movs	r3, #0
 800763c:	60bb      	str	r3, [r7, #8]
 800763e:	4b7f      	ldr	r3, [pc, #508]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	4a7e      	ldr	r2, [pc, #504]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 8007644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007648:	6413      	str	r3, [r2, #64]	; 0x40
 800764a:	4b7c      	ldr	r3, [pc, #496]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 800764c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007652:	60bb      	str	r3, [r7, #8]
 8007654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007656:	2301      	movs	r3, #1
 8007658:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800765a:	4b79      	ldr	r3, [pc, #484]	; (8007840 <HAL_RCC_OscConfig+0x4b0>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007662:	2b00      	cmp	r3, #0
 8007664:	d118      	bne.n	8007698 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007666:	4b76      	ldr	r3, [pc, #472]	; (8007840 <HAL_RCC_OscConfig+0x4b0>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a75      	ldr	r2, [pc, #468]	; (8007840 <HAL_RCC_OscConfig+0x4b0>)
 800766c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007672:	f7fd fbf9 	bl	8004e68 <HAL_GetTick>
 8007676:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007678:	e008      	b.n	800768c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800767a:	f7fd fbf5 	bl	8004e68 <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	2b02      	cmp	r3, #2
 8007686:	d901      	bls.n	800768c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e118      	b.n	80078be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800768c:	4b6c      	ldr	r3, [pc, #432]	; (8007840 <HAL_RCC_OscConfig+0x4b0>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007694:	2b00      	cmp	r3, #0
 8007696:	d0f0      	beq.n	800767a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d106      	bne.n	80076ae <HAL_RCC_OscConfig+0x31e>
 80076a0:	4b66      	ldr	r3, [pc, #408]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 80076a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076a4:	4a65      	ldr	r2, [pc, #404]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 80076a6:	f043 0301 	orr.w	r3, r3, #1
 80076aa:	6713      	str	r3, [r2, #112]	; 0x70
 80076ac:	e01c      	b.n	80076e8 <HAL_RCC_OscConfig+0x358>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	2b05      	cmp	r3, #5
 80076b4:	d10c      	bne.n	80076d0 <HAL_RCC_OscConfig+0x340>
 80076b6:	4b61      	ldr	r3, [pc, #388]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 80076b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ba:	4a60      	ldr	r2, [pc, #384]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 80076bc:	f043 0304 	orr.w	r3, r3, #4
 80076c0:	6713      	str	r3, [r2, #112]	; 0x70
 80076c2:	4b5e      	ldr	r3, [pc, #376]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 80076c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c6:	4a5d      	ldr	r2, [pc, #372]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 80076c8:	f043 0301 	orr.w	r3, r3, #1
 80076cc:	6713      	str	r3, [r2, #112]	; 0x70
 80076ce:	e00b      	b.n	80076e8 <HAL_RCC_OscConfig+0x358>
 80076d0:	4b5a      	ldr	r3, [pc, #360]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 80076d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076d4:	4a59      	ldr	r2, [pc, #356]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 80076d6:	f023 0301 	bic.w	r3, r3, #1
 80076da:	6713      	str	r3, [r2, #112]	; 0x70
 80076dc:	4b57      	ldr	r3, [pc, #348]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 80076de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076e0:	4a56      	ldr	r2, [pc, #344]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 80076e2:	f023 0304 	bic.w	r3, r3, #4
 80076e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d015      	beq.n	800771c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076f0:	f7fd fbba 	bl	8004e68 <HAL_GetTick>
 80076f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076f6:	e00a      	b.n	800770e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80076f8:	f7fd fbb6 	bl	8004e68 <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	f241 3288 	movw	r2, #5000	; 0x1388
 8007706:	4293      	cmp	r3, r2
 8007708:	d901      	bls.n	800770e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e0d7      	b.n	80078be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800770e:	4b4b      	ldr	r3, [pc, #300]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 8007710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007712:	f003 0302 	and.w	r3, r3, #2
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0ee      	beq.n	80076f8 <HAL_RCC_OscConfig+0x368>
 800771a:	e014      	b.n	8007746 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800771c:	f7fd fba4 	bl	8004e68 <HAL_GetTick>
 8007720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007722:	e00a      	b.n	800773a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007724:	f7fd fba0 	bl	8004e68 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007732:	4293      	cmp	r3, r2
 8007734:	d901      	bls.n	800773a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e0c1      	b.n	80078be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800773a:	4b40      	ldr	r3, [pc, #256]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 800773c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800773e:	f003 0302 	and.w	r3, r3, #2
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1ee      	bne.n	8007724 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007746:	7dfb      	ldrb	r3, [r7, #23]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d105      	bne.n	8007758 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800774c:	4b3b      	ldr	r3, [pc, #236]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 800774e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007750:	4a3a      	ldr	r2, [pc, #232]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 8007752:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007756:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	2b00      	cmp	r3, #0
 800775e:	f000 80ad 	beq.w	80078bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007762:	4b36      	ldr	r3, [pc, #216]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f003 030c 	and.w	r3, r3, #12
 800776a:	2b08      	cmp	r3, #8
 800776c:	d060      	beq.n	8007830 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	2b02      	cmp	r3, #2
 8007774:	d145      	bne.n	8007802 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007776:	4b33      	ldr	r3, [pc, #204]	; (8007844 <HAL_RCC_OscConfig+0x4b4>)
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800777c:	f7fd fb74 	bl	8004e68 <HAL_GetTick>
 8007780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007782:	e008      	b.n	8007796 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007784:	f7fd fb70 	bl	8004e68 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	2b02      	cmp	r3, #2
 8007790:	d901      	bls.n	8007796 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e093      	b.n	80078be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007796:	4b29      	ldr	r3, [pc, #164]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1f0      	bne.n	8007784 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	69da      	ldr	r2, [r3, #28]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	431a      	orrs	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	019b      	lsls	r3, r3, #6
 80077b2:	431a      	orrs	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b8:	085b      	lsrs	r3, r3, #1
 80077ba:	3b01      	subs	r3, #1
 80077bc:	041b      	lsls	r3, r3, #16
 80077be:	431a      	orrs	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c4:	061b      	lsls	r3, r3, #24
 80077c6:	431a      	orrs	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077cc:	071b      	lsls	r3, r3, #28
 80077ce:	491b      	ldr	r1, [pc, #108]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077d4:	4b1b      	ldr	r3, [pc, #108]	; (8007844 <HAL_RCC_OscConfig+0x4b4>)
 80077d6:	2201      	movs	r2, #1
 80077d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077da:	f7fd fb45 	bl	8004e68 <HAL_GetTick>
 80077de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077e0:	e008      	b.n	80077f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077e2:	f7fd fb41 	bl	8004e68 <HAL_GetTick>
 80077e6:	4602      	mov	r2, r0
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d901      	bls.n	80077f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e064      	b.n	80078be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077f4:	4b11      	ldr	r3, [pc, #68]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d0f0      	beq.n	80077e2 <HAL_RCC_OscConfig+0x452>
 8007800:	e05c      	b.n	80078bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007802:	4b10      	ldr	r3, [pc, #64]	; (8007844 <HAL_RCC_OscConfig+0x4b4>)
 8007804:	2200      	movs	r2, #0
 8007806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007808:	f7fd fb2e 	bl	8004e68 <HAL_GetTick>
 800780c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800780e:	e008      	b.n	8007822 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007810:	f7fd fb2a 	bl	8004e68 <HAL_GetTick>
 8007814:	4602      	mov	r2, r0
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	2b02      	cmp	r3, #2
 800781c:	d901      	bls.n	8007822 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800781e:	2303      	movs	r3, #3
 8007820:	e04d      	b.n	80078be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007822:	4b06      	ldr	r3, [pc, #24]	; (800783c <HAL_RCC_OscConfig+0x4ac>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1f0      	bne.n	8007810 <HAL_RCC_OscConfig+0x480>
 800782e:	e045      	b.n	80078bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d107      	bne.n	8007848 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e040      	b.n	80078be <HAL_RCC_OscConfig+0x52e>
 800783c:	40023800 	.word	0x40023800
 8007840:	40007000 	.word	0x40007000
 8007844:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007848:	4b1f      	ldr	r3, [pc, #124]	; (80078c8 <HAL_RCC_OscConfig+0x538>)
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d030      	beq.n	80078b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007860:	429a      	cmp	r2, r3
 8007862:	d129      	bne.n	80078b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800786e:	429a      	cmp	r2, r3
 8007870:	d122      	bne.n	80078b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007878:	4013      	ands	r3, r2
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800787e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007880:	4293      	cmp	r3, r2
 8007882:	d119      	bne.n	80078b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788e:	085b      	lsrs	r3, r3, #1
 8007890:	3b01      	subs	r3, #1
 8007892:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007894:	429a      	cmp	r2, r3
 8007896:	d10f      	bne.n	80078b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d107      	bne.n	80078b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d001      	beq.n	80078bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e000      	b.n	80078be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3718      	adds	r7, #24
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	40023800 	.word	0x40023800

080078cc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e083      	b.n	80079e6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	7f5b      	ldrb	r3, [r3, #29]
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d105      	bne.n	80078f4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7fa f872 	bl	80019d8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2202      	movs	r2, #2
 80078f8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	22ca      	movs	r2, #202	; 0xca
 8007900:	625a      	str	r2, [r3, #36]	; 0x24
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2253      	movs	r2, #83	; 0x53
 8007908:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fb7a 	bl	8008004 <RTC_EnterInitMode>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d008      	beq.n	8007928 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	22ff      	movs	r2, #255	; 0xff
 800791c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2204      	movs	r2, #4
 8007922:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e05e      	b.n	80079e6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	6812      	ldr	r2, [r2, #0]
 8007932:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800793a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6899      	ldr	r1, [r3, #8]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	431a      	orrs	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	431a      	orrs	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	68d2      	ldr	r2, [r2, #12]
 8007962:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6919      	ldr	r1, [r3, #16]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	041a      	lsls	r2, r3, #16
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68da      	ldr	r2, [r3, #12]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007986:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f003 0320 	and.w	r3, r3, #32
 8007992:	2b00      	cmp	r3, #0
 8007994:	d10e      	bne.n	80079b4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fb0c 	bl	8007fb4 <HAL_RTC_WaitForSynchro>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d008      	beq.n	80079b4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	22ff      	movs	r2, #255	; 0xff
 80079a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2204      	movs	r2, #4
 80079ae:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e018      	b.n	80079e6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80079c2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	699a      	ldr	r2, [r3, #24]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	430a      	orrs	r2, r1
 80079d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	22ff      	movs	r2, #255	; 0xff
 80079dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2201      	movs	r2, #1
 80079e2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80079e4:	2300      	movs	r3, #0
  }
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3708      	adds	r7, #8
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80079ee:	b590      	push	{r4, r7, lr}
 80079f0:	b087      	sub	sp, #28
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	60f8      	str	r0, [r7, #12]
 80079f6:	60b9      	str	r1, [r7, #8]
 80079f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	7f1b      	ldrb	r3, [r3, #28]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d101      	bne.n	8007a0a <HAL_RTC_SetTime+0x1c>
 8007a06:	2302      	movs	r3, #2
 8007a08:	e0aa      	b.n	8007b60 <HAL_RTC_SetTime+0x172>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2202      	movs	r2, #2
 8007a14:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d126      	bne.n	8007a6a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	689b      	ldr	r3, [r3, #8]
 8007a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d102      	bne.n	8007a30 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	4618      	mov	r0, r3
 8007a36:	f000 fb11 	bl	800805c <RTC_ByteToBcd2>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	785b      	ldrb	r3, [r3, #1]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 fb0a 	bl	800805c <RTC_ByteToBcd2>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007a4c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	789b      	ldrb	r3, [r3, #2]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 fb02 	bl	800805c <RTC_ByteToBcd2>
 8007a58:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007a5a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	78db      	ldrb	r3, [r3, #3]
 8007a62:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007a64:	4313      	orrs	r3, r2
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	e018      	b.n	8007a9c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d102      	bne.n	8007a7e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	785b      	ldrb	r3, [r3, #1]
 8007a88:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007a8a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007a90:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	78db      	ldrb	r3, [r3, #3]
 8007a96:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	22ca      	movs	r2, #202	; 0xca
 8007aa2:	625a      	str	r2, [r3, #36]	; 0x24
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2253      	movs	r2, #83	; 0x53
 8007aaa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f000 faa9 	bl	8008004 <RTC_EnterInitMode>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00b      	beq.n	8007ad0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	22ff      	movs	r2, #255	; 0xff
 8007abe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2204      	movs	r2, #4
 8007ac4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e047      	b.n	8007b60 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007ada:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007ade:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689a      	ldr	r2, [r3, #8]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007aee:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6899      	ldr	r1, [r3, #8]
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	68da      	ldr	r2, [r3, #12]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	431a      	orrs	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	430a      	orrs	r2, r1
 8007b06:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68da      	ldr	r2, [r3, #12]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b16:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	f003 0320 	and.w	r3, r3, #32
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d111      	bne.n	8007b4a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b26:	68f8      	ldr	r0, [r7, #12]
 8007b28:	f000 fa44 	bl	8007fb4 <HAL_RTC_WaitForSynchro>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00b      	beq.n	8007b4a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	22ff      	movs	r2, #255	; 0xff
 8007b38:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2204      	movs	r2, #4
 8007b3e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	e00a      	b.n	8007b60 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	22ff      	movs	r2, #255	; 0xff
 8007b50:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2201      	movs	r2, #1
 8007b56:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
  }
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	371c      	adds	r7, #28
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd90      	pop	{r4, r7, pc}

08007b68 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007b68:	b590      	push	{r4, r7, lr}
 8007b6a:	b087      	sub	sp, #28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007b74:	2300      	movs	r3, #0
 8007b76:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	7f1b      	ldrb	r3, [r3, #28]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d101      	bne.n	8007b84 <HAL_RTC_SetDate+0x1c>
 8007b80:	2302      	movs	r3, #2
 8007b82:	e094      	b.n	8007cae <HAL_RTC_SetDate+0x146>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2201      	movs	r2, #1
 8007b88:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10e      	bne.n	8007bb4 <HAL_RTC_SetDate+0x4c>
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	785b      	ldrb	r3, [r3, #1]
 8007b9a:	f003 0310 	and.w	r3, r3, #16
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d008      	beq.n	8007bb4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	785b      	ldrb	r3, [r3, #1]
 8007ba6:	f023 0310 	bic.w	r3, r3, #16
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	330a      	adds	r3, #10
 8007bae:	b2da      	uxtb	r2, r3
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d11c      	bne.n	8007bf4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	78db      	ldrb	r3, [r3, #3]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 fa4c 	bl	800805c <RTC_ByteToBcd2>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	785b      	ldrb	r3, [r3, #1]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 fa45 	bl	800805c <RTC_ByteToBcd2>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007bd6:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	789b      	ldrb	r3, [r3, #2]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 fa3d 	bl	800805c <RTC_ByteToBcd2>
 8007be2:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007be4:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	617b      	str	r3, [r7, #20]
 8007bf2:	e00e      	b.n	8007c12 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	78db      	ldrb	r3, [r3, #3]
 8007bf8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	785b      	ldrb	r3, [r3, #1]
 8007bfe:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007c00:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007c06:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	22ca      	movs	r2, #202	; 0xca
 8007c18:	625a      	str	r2, [r3, #36]	; 0x24
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2253      	movs	r2, #83	; 0x53
 8007c20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	f000 f9ee 	bl	8008004 <RTC_EnterInitMode>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00b      	beq.n	8007c46 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	22ff      	movs	r2, #255	; 0xff
 8007c34:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2204      	movs	r2, #4
 8007c3a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e033      	b.n	8007cae <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007c50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c54:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68da      	ldr	r2, [r3, #12]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c64:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f003 0320 	and.w	r3, r3, #32
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d111      	bne.n	8007c98 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 f99d 	bl	8007fb4 <HAL_RTC_WaitForSynchro>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00b      	beq.n	8007c98 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	22ff      	movs	r2, #255	; 0xff
 8007c86:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2204      	movs	r2, #4
 8007c8c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e00a      	b.n	8007cae <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	22ff      	movs	r2, #255	; 0xff
 8007c9e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007cac:	2300      	movs	r3, #0
  }
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	371c      	adds	r7, #28
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd90      	pop	{r4, r7, pc}
	...

08007cb8 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007cb8:	b590      	push	{r4, r7, lr}
 8007cba:	b089      	sub	sp, #36	; 0x24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	61fb      	str	r3, [r7, #28]
 8007cc8:	2300      	movs	r3, #0
 8007cca:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8007ccc:	4b93      	ldr	r3, [pc, #588]	; (8007f1c <HAL_RTC_SetAlarm_IT+0x264>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a93      	ldr	r2, [pc, #588]	; (8007f20 <HAL_RTC_SetAlarm_IT+0x268>)
 8007cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd6:	0adb      	lsrs	r3, r3, #11
 8007cd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007cdc:	fb02 f303 	mul.w	r3, r2, r3
 8007ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	7f1b      	ldrb	r3, [r3, #28]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d101      	bne.n	8007cee <HAL_RTC_SetAlarm_IT+0x36>
 8007cea:	2302      	movs	r3, #2
 8007cec:	e111      	b.n	8007f12 <HAL_RTC_SetAlarm_IT+0x25a>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2202      	movs	r2, #2
 8007cf8:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d137      	bne.n	8007d70 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d102      	bne.n	8007d14 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2200      	movs	r2, #0
 8007d12:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 f99f 	bl	800805c <RTC_ByteToBcd2>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	785b      	ldrb	r3, [r3, #1]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 f998 	bl	800805c <RTC_ByteToBcd2>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007d30:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	789b      	ldrb	r3, [r3, #2]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 f990 	bl	800805c <RTC_ByteToBcd2>
 8007d3c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007d3e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	78db      	ldrb	r3, [r3, #3]
 8007d46:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007d48:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 f982 	bl	800805c <RTC_ByteToBcd2>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007d5c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007d64:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	61fb      	str	r3, [r7, #28]
 8007d6e:	e023      	b.n	8007db8 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d102      	bne.n	8007d84 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2200      	movs	r2, #0
 8007d82:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	785b      	ldrb	r3, [r3, #1]
 8007d8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007d90:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007d96:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	78db      	ldrb	r3, [r3, #3]
 8007d9c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007d9e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007da6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007da8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007dae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007db4:	4313      	orrs	r3, r2
 8007db6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	685a      	ldr	r2, [r3, #4]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	699b      	ldr	r3, [r3, #24]
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	22ca      	movs	r2, #202	; 0xca
 8007dca:	625a      	str	r2, [r3, #36]	; 0x24
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2253      	movs	r2, #83	; 0x53
 8007dd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ddc:	d141      	bne.n	8007e62 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dec:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	b2da      	uxtb	r2, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007dfe:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	1e5a      	subs	r2, r3, #1
 8007e04:	617a      	str	r2, [r7, #20]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10b      	bne.n	8007e22 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	22ff      	movs	r2, #255	; 0xff
 8007e10:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2203      	movs	r2, #3
 8007e16:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e077      	b.n	8007f12 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d0e7      	beq.n	8007e00 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	69fa      	ldr	r2, [r7, #28]
 8007e36:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	689a      	ldr	r2, [r3, #8]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e4e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	689a      	ldr	r2, [r3, #8]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e5e:	609a      	str	r2, [r3, #8]
 8007e60:	e040      	b.n	8007ee4 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	689a      	ldr	r2, [r3, #8]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007e70:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007e82:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	1e5a      	subs	r2, r3, #1
 8007e88:	617a      	str	r2, [r7, #20]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10b      	bne.n	8007ea6 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	22ff      	movs	r2, #255	; 0xff
 8007e94:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2203      	movs	r2, #3
 8007e9a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e035      	b.n	8007f12 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	f003 0302 	and.w	r3, r3, #2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d0e7      	beq.n	8007e84 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	69fa      	ldr	r2, [r7, #28]
 8007eba:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	689a      	ldr	r2, [r3, #8]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ed2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689a      	ldr	r2, [r3, #8]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ee2:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007ee4:	4b0f      	ldr	r3, [pc, #60]	; (8007f24 <HAL_RTC_SetAlarm_IT+0x26c>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a0e      	ldr	r2, [pc, #56]	; (8007f24 <HAL_RTC_SetAlarm_IT+0x26c>)
 8007eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007eee:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8007ef0:	4b0c      	ldr	r3, [pc, #48]	; (8007f24 <HAL_RTC_SetAlarm_IT+0x26c>)
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	4a0b      	ldr	r2, [pc, #44]	; (8007f24 <HAL_RTC_SetAlarm_IT+0x26c>)
 8007ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007efa:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	22ff      	movs	r2, #255	; 0xff
 8007f02:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2201      	movs	r2, #1
 8007f08:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3724      	adds	r7, #36	; 0x24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd90      	pop	{r4, r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	2000000c 	.word	0x2000000c
 8007f20:	10624dd3 	.word	0x10624dd3
 8007f24:	40013c00 	.word	0x40013c00

08007f28 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d012      	beq.n	8007f64 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00b      	beq.n	8007f64 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7fc fe1b 	bl	8004b88 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007f62:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d012      	beq.n	8007f98 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00b      	beq.n	8007f98 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f000 f9a1 	bl	80082c8 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	b2da      	uxtb	r2, r3
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007f96:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007f98:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8007f9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007f9e:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	775a      	strb	r2, [r3, #29]
}
 8007fa6:	bf00      	nop
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	40013c00 	.word	0x40013c00

08007fb4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68da      	ldr	r2, [r3, #12]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007fce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007fd0:	f7fc ff4a 	bl	8004e68 <HAL_GetTick>
 8007fd4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007fd6:	e009      	b.n	8007fec <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007fd8:	f7fc ff46 	bl	8004e68 <HAL_GetTick>
 8007fdc:	4602      	mov	r2, r0
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fe6:	d901      	bls.n	8007fec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e007      	b.n	8007ffc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	f003 0320 	and.w	r3, r3, #32
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d0ee      	beq.n	8007fd8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b084      	sub	sp, #16
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800800c:	2300      	movs	r3, #0
 800800e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800801a:	2b00      	cmp	r3, #0
 800801c:	d119      	bne.n	8008052 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f04f 32ff 	mov.w	r2, #4294967295
 8008026:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008028:	f7fc ff1e 	bl	8004e68 <HAL_GetTick>
 800802c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800802e:	e009      	b.n	8008044 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008030:	f7fc ff1a 	bl	8004e68 <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800803e:	d901      	bls.n	8008044 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e007      	b.n	8008054 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804e:	2b00      	cmp	r3, #0
 8008050:	d0ee      	beq.n	8008030 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	4603      	mov	r3, r0
 8008064:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800806a:	e005      	b.n	8008078 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	3301      	adds	r3, #1
 8008070:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008072:	79fb      	ldrb	r3, [r7, #7]
 8008074:	3b0a      	subs	r3, #10
 8008076:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8008078:	79fb      	ldrb	r3, [r7, #7]
 800807a:	2b09      	cmp	r3, #9
 800807c:	d8f6      	bhi.n	800806c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	b2db      	uxtb	r3, r3
 8008082:	011b      	lsls	r3, r3, #4
 8008084:	b2da      	uxtb	r2, r3
 8008086:	79fb      	ldrb	r3, [r7, #7]
 8008088:	4313      	orrs	r3, r2
 800808a:	b2db      	uxtb	r3, r3
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	7f1b      	ldrb	r3, [r3, #28]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d101      	bne.n	80080b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 80080ac:	2302      	movs	r3, #2
 80080ae:	e0a6      	b.n	80081fe <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2201      	movs	r2, #1
 80080b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2202      	movs	r2, #2
 80080ba:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	22ca      	movs	r2, #202	; 0xca
 80080c2:	625a      	str	r2, [r3, #36]	; 0x24
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2253      	movs	r2, #83	; 0x53
 80080ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d022      	beq.n	8008120 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 80080da:	4b4c      	ldr	r3, [pc, #304]	; (800820c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a4c      	ldr	r2, [pc, #304]	; (8008210 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 80080e0:	fba2 2303 	umull	r2, r3, r2, r3
 80080e4:	0adb      	lsrs	r3, r3, #11
 80080e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80080ea:	fb02 f303 	mul.w	r3, r2, r3
 80080ee:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	1e5a      	subs	r2, r3, #1
 80080f4:	617a      	str	r2, [r7, #20]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d10b      	bne.n	8008112 <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	22ff      	movs	r2, #255	; 0xff
 8008100:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2203      	movs	r2, #3
 8008106:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2200      	movs	r2, #0
 800810c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e075      	b.n	80081fe <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f003 0304 	and.w	r3, r3, #4
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e7      	bne.n	80080f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689a      	ldr	r2, [r3, #8]
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800812e:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8008130:	4b36      	ldr	r3, [pc, #216]	; (800820c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a36      	ldr	r2, [pc, #216]	; (8008210 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8008136:	fba2 2303 	umull	r2, r3, r2, r3
 800813a:	0adb      	lsrs	r3, r3, #11
 800813c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008140:	fb02 f303 	mul.w	r3, r2, r3
 8008144:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	1e5a      	subs	r2, r3, #1
 800814a:	617a      	str	r2, [r7, #20]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10b      	bne.n	8008168 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	22ff      	movs	r2, #255	; 0xff
 8008156:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2203      	movs	r2, #3
 800815c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e04a      	b.n	80081fe <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	f003 0304 	and.w	r3, r3, #4
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0e7      	beq.n	8008146 <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	689a      	ldr	r2, [r3, #8]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f022 0207 	bic.w	r2, r2, #7
 800818c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	6899      	ldr	r1, [r3, #8]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	430a      	orrs	r2, r1
 800819c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800819e:	4b1d      	ldr	r3, [pc, #116]	; (8008214 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a1c      	ldr	r2, [pc, #112]	; (8008214 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80081a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80081a8:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 80081aa:	4b1a      	ldr	r3, [pc, #104]	; (8008214 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	4a19      	ldr	r2, [pc, #100]	; (8008214 <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80081b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80081b4:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80081c6:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	689a      	ldr	r2, [r3, #8]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081d6:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	689a      	ldr	r2, [r3, #8]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80081e6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	22ff      	movs	r2, #255	; 0xff
 80081ee:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2201      	movs	r2, #1
 80081f4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	371c      	adds	r7, #28
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	2000000c 	.word	0x2000000c
 8008210:	10624dd3 	.word	0x10624dd3
 8008214:	40013c00 	.word	0x40013c00

08008218 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008220:	2300      	movs	r3, #0
 8008222:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	7f1b      	ldrb	r3, [r3, #28]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d101      	bne.n	8008230 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 800822c:	2302      	movs	r3, #2
 800822e:	e047      	b.n	80082c0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2202      	movs	r2, #2
 800823a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	22ca      	movs	r2, #202	; 0xca
 8008242:	625a      	str	r2, [r3, #36]	; 0x24
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2253      	movs	r2, #83	; 0x53
 800824a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	689a      	ldr	r2, [r3, #8]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800825a:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689a      	ldr	r2, [r3, #8]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800826a:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800826c:	f7fc fdfc 	bl	8004e68 <HAL_GetTick>
 8008270:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8008272:	e013      	b.n	800829c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008274:	f7fc fdf8 	bl	8004e68 <HAL_GetTick>
 8008278:	4602      	mov	r2, r0
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008282:	d90b      	bls.n	800829c <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	22ff      	movs	r2, #255	; 0xff
 800828a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2203      	movs	r2, #3
 8008290:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	e011      	b.n	80082c0 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	f003 0304 	and.w	r3, r3, #4
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0e4      	beq.n	8008274 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	22ff      	movs	r2, #255	; 0xff
 80082b0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b082      	sub	sp, #8
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e041      	b.n	8008372 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d106      	bne.n	8008308 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f839 	bl	800837a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2202      	movs	r2, #2
 800830c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	3304      	adds	r3, #4
 8008318:	4619      	mov	r1, r3
 800831a:	4610      	mov	r0, r2
 800831c:	f000 f9d8 	bl	80086d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800837a:	b480      	push	{r7}
 800837c:	b083      	sub	sp, #12
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008382:	bf00      	nop
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
	...

08008390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008390:	b480      	push	{r7}
 8008392:	b085      	sub	sp, #20
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d001      	beq.n	80083a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e04e      	b.n	8008446 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2202      	movs	r2, #2
 80083ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68da      	ldr	r2, [r3, #12]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0201 	orr.w	r2, r2, #1
 80083be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a23      	ldr	r2, [pc, #140]	; (8008454 <HAL_TIM_Base_Start_IT+0xc4>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d022      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d2:	d01d      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a1f      	ldr	r2, [pc, #124]	; (8008458 <HAL_TIM_Base_Start_IT+0xc8>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d018      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a1e      	ldr	r2, [pc, #120]	; (800845c <HAL_TIM_Base_Start_IT+0xcc>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d013      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a1c      	ldr	r2, [pc, #112]	; (8008460 <HAL_TIM_Base_Start_IT+0xd0>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d00e      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a1b      	ldr	r2, [pc, #108]	; (8008464 <HAL_TIM_Base_Start_IT+0xd4>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d009      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a19      	ldr	r2, [pc, #100]	; (8008468 <HAL_TIM_Base_Start_IT+0xd8>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d004      	beq.n	8008410 <HAL_TIM_Base_Start_IT+0x80>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a18      	ldr	r2, [pc, #96]	; (800846c <HAL_TIM_Base_Start_IT+0xdc>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d111      	bne.n	8008434 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f003 0307 	and.w	r3, r3, #7
 800841a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2b06      	cmp	r3, #6
 8008420:	d010      	beq.n	8008444 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f042 0201 	orr.w	r2, r2, #1
 8008430:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008432:	e007      	b.n	8008444 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f042 0201 	orr.w	r2, r2, #1
 8008442:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	40010000 	.word	0x40010000
 8008458:	40000400 	.word	0x40000400
 800845c:	40000800 	.word	0x40000800
 8008460:	40000c00 	.word	0x40000c00
 8008464:	40010400 	.word	0x40010400
 8008468:	40014000 	.word	0x40014000
 800846c:	40001800 	.word	0x40001800

08008470 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b02      	cmp	r3, #2
 8008484:	d122      	bne.n	80084cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	2b02      	cmp	r3, #2
 8008492:	d11b      	bne.n	80084cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f06f 0202 	mvn.w	r2, #2
 800849c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2201      	movs	r2, #1
 80084a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	f003 0303 	and.w	r3, r3, #3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d003      	beq.n	80084ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f000 f8ee 	bl	8008694 <HAL_TIM_IC_CaptureCallback>
 80084b8:	e005      	b.n	80084c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f8e0 	bl	8008680 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f8f1 	bl	80086a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	f003 0304 	and.w	r3, r3, #4
 80084d6:	2b04      	cmp	r3, #4
 80084d8:	d122      	bne.n	8008520 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	f003 0304 	and.w	r3, r3, #4
 80084e4:	2b04      	cmp	r3, #4
 80084e6:	d11b      	bne.n	8008520 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f06f 0204 	mvn.w	r2, #4
 80084f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2202      	movs	r2, #2
 80084f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008502:	2b00      	cmp	r3, #0
 8008504:	d003      	beq.n	800850e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f8c4 	bl	8008694 <HAL_TIM_IC_CaptureCallback>
 800850c:	e005      	b.n	800851a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f8b6 	bl	8008680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 f8c7 	bl	80086a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	f003 0308 	and.w	r3, r3, #8
 800852a:	2b08      	cmp	r3, #8
 800852c:	d122      	bne.n	8008574 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	f003 0308 	and.w	r3, r3, #8
 8008538:	2b08      	cmp	r3, #8
 800853a:	d11b      	bne.n	8008574 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f06f 0208 	mvn.w	r2, #8
 8008544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2204      	movs	r2, #4
 800854a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	69db      	ldr	r3, [r3, #28]
 8008552:	f003 0303 	and.w	r3, r3, #3
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f89a 	bl	8008694 <HAL_TIM_IC_CaptureCallback>
 8008560:	e005      	b.n	800856e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f000 f88c 	bl	8008680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f89d 	bl	80086a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	f003 0310 	and.w	r3, r3, #16
 800857e:	2b10      	cmp	r3, #16
 8008580:	d122      	bne.n	80085c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	f003 0310 	and.w	r3, r3, #16
 800858c:	2b10      	cmp	r3, #16
 800858e:	d11b      	bne.n	80085c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f06f 0210 	mvn.w	r2, #16
 8008598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2208      	movs	r2, #8
 800859e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	69db      	ldr	r3, [r3, #28]
 80085a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d003      	beq.n	80085b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f870 	bl	8008694 <HAL_TIM_IC_CaptureCallback>
 80085b4:	e005      	b.n	80085c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f862 	bl	8008680 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f873 	bl	80086a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	691b      	ldr	r3, [r3, #16]
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d10e      	bne.n	80085f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d107      	bne.n	80085f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f06f 0201 	mvn.w	r2, #1
 80085ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f7f9 f966 	bl	80018c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085fe:	2b80      	cmp	r3, #128	; 0x80
 8008600:	d10e      	bne.n	8008620 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800860c:	2b80      	cmp	r3, #128	; 0x80
 800860e:	d107      	bne.n	8008620 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f902 	bl	8008824 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800862a:	2b40      	cmp	r3, #64	; 0x40
 800862c:	d10e      	bne.n	800864c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008638:	2b40      	cmp	r3, #64	; 0x40
 800863a:	d107      	bne.n	800864c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f838 	bl	80086bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	691b      	ldr	r3, [r3, #16]
 8008652:	f003 0320 	and.w	r3, r3, #32
 8008656:	2b20      	cmp	r3, #32
 8008658:	d10e      	bne.n	8008678 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	f003 0320 	and.w	r3, r3, #32
 8008664:	2b20      	cmp	r3, #32
 8008666:	d107      	bne.n	8008678 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f06f 0220 	mvn.w	r2, #32
 8008670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 f8cc 	bl	8008810 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008678:	bf00      	nop
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a40      	ldr	r2, [pc, #256]	; (80087e4 <TIM_Base_SetConfig+0x114>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d013      	beq.n	8008710 <TIM_Base_SetConfig+0x40>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ee:	d00f      	beq.n	8008710 <TIM_Base_SetConfig+0x40>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a3d      	ldr	r2, [pc, #244]	; (80087e8 <TIM_Base_SetConfig+0x118>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d00b      	beq.n	8008710 <TIM_Base_SetConfig+0x40>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a3c      	ldr	r2, [pc, #240]	; (80087ec <TIM_Base_SetConfig+0x11c>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d007      	beq.n	8008710 <TIM_Base_SetConfig+0x40>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a3b      	ldr	r2, [pc, #236]	; (80087f0 <TIM_Base_SetConfig+0x120>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d003      	beq.n	8008710 <TIM_Base_SetConfig+0x40>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a3a      	ldr	r2, [pc, #232]	; (80087f4 <TIM_Base_SetConfig+0x124>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d108      	bne.n	8008722 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	4313      	orrs	r3, r2
 8008720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a2f      	ldr	r2, [pc, #188]	; (80087e4 <TIM_Base_SetConfig+0x114>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d02b      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008730:	d027      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a2c      	ldr	r2, [pc, #176]	; (80087e8 <TIM_Base_SetConfig+0x118>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d023      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a2b      	ldr	r2, [pc, #172]	; (80087ec <TIM_Base_SetConfig+0x11c>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d01f      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a2a      	ldr	r2, [pc, #168]	; (80087f0 <TIM_Base_SetConfig+0x120>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d01b      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a29      	ldr	r2, [pc, #164]	; (80087f4 <TIM_Base_SetConfig+0x124>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d017      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a28      	ldr	r2, [pc, #160]	; (80087f8 <TIM_Base_SetConfig+0x128>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d013      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a27      	ldr	r2, [pc, #156]	; (80087fc <TIM_Base_SetConfig+0x12c>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d00f      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a26      	ldr	r2, [pc, #152]	; (8008800 <TIM_Base_SetConfig+0x130>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d00b      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a25      	ldr	r2, [pc, #148]	; (8008804 <TIM_Base_SetConfig+0x134>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d007      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a24      	ldr	r2, [pc, #144]	; (8008808 <TIM_Base_SetConfig+0x138>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d003      	beq.n	8008782 <TIM_Base_SetConfig+0xb2>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a23      	ldr	r2, [pc, #140]	; (800880c <TIM_Base_SetConfig+0x13c>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d108      	bne.n	8008794 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008788:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	4313      	orrs	r3, r2
 8008792:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	4313      	orrs	r3, r2
 80087a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	689a      	ldr	r2, [r3, #8]
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a0a      	ldr	r2, [pc, #40]	; (80087e4 <TIM_Base_SetConfig+0x114>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d003      	beq.n	80087c8 <TIM_Base_SetConfig+0xf8>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a0c      	ldr	r2, [pc, #48]	; (80087f4 <TIM_Base_SetConfig+0x124>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d103      	bne.n	80087d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	691a      	ldr	r2, [r3, #16]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	615a      	str	r2, [r3, #20]
}
 80087d6:	bf00      	nop
 80087d8:	3714      	adds	r7, #20
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	40010000 	.word	0x40010000
 80087e8:	40000400 	.word	0x40000400
 80087ec:	40000800 	.word	0x40000800
 80087f0:	40000c00 	.word	0x40000c00
 80087f4:	40010400 	.word	0x40010400
 80087f8:	40014000 	.word	0x40014000
 80087fc:	40014400 	.word	0x40014400
 8008800:	40014800 	.word	0x40014800
 8008804:	40001800 	.word	0x40001800
 8008808:	40001c00 	.word	0x40001c00
 800880c:	40002000 	.word	0x40002000

08008810 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d101      	bne.n	800884a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	e03f      	b.n	80088ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	d106      	bne.n	8008864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7f9 f8ec 	bl	8001a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2224      	movs	r2, #36	; 0x24
 8008868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	68da      	ldr	r2, [r3, #12]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800887a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f929 	bl	8008ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	691a      	ldr	r2, [r3, #16]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	695a      	ldr	r2, [r3, #20]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68da      	ldr	r2, [r3, #12]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80088b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2220      	movs	r2, #32
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2220      	movs	r2, #32
 80088c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b08a      	sub	sp, #40	; 0x28
 80088d6:	af02      	add	r7, sp, #8
 80088d8:	60f8      	str	r0, [r7, #12]
 80088da:	60b9      	str	r1, [r7, #8]
 80088dc:	603b      	str	r3, [r7, #0]
 80088de:	4613      	mov	r3, r2
 80088e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b20      	cmp	r3, #32
 80088f0:	d17c      	bne.n	80089ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d002      	beq.n	80088fe <HAL_UART_Transmit+0x2c>
 80088f8:	88fb      	ldrh	r3, [r7, #6]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e075      	b.n	80089ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008908:	2b01      	cmp	r3, #1
 800890a:	d101      	bne.n	8008910 <HAL_UART_Transmit+0x3e>
 800890c:	2302      	movs	r3, #2
 800890e:	e06e      	b.n	80089ee <HAL_UART_Transmit+0x11c>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2221      	movs	r2, #33	; 0x21
 8008922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008926:	f7fc fa9f 	bl	8004e68 <HAL_GetTick>
 800892a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	88fa      	ldrh	r2, [r7, #6]
 8008930:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	88fa      	ldrh	r2, [r7, #6]
 8008936:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008940:	d108      	bne.n	8008954 <HAL_UART_Transmit+0x82>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d104      	bne.n	8008954 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800894a:	2300      	movs	r3, #0
 800894c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	61bb      	str	r3, [r7, #24]
 8008952:	e003      	b.n	800895c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008958:	2300      	movs	r3, #0
 800895a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008964:	e02a      	b.n	80089bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	9300      	str	r3, [sp, #0]
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	2200      	movs	r2, #0
 800896e:	2180      	movs	r1, #128	; 0x80
 8008970:	68f8      	ldr	r0, [r7, #12]
 8008972:	f000 f840 	bl	80089f6 <UART_WaitOnFlagUntilTimeout>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d001      	beq.n	8008980 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800897c:	2303      	movs	r3, #3
 800897e:	e036      	b.n	80089ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10b      	bne.n	800899e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	881b      	ldrh	r3, [r3, #0]
 800898a:	461a      	mov	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008994:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	3302      	adds	r3, #2
 800899a:	61bb      	str	r3, [r7, #24]
 800899c:	e007      	b.n	80089ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	781a      	ldrb	r2, [r3, #0]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	3301      	adds	r3, #1
 80089ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	3b01      	subs	r3, #1
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1cf      	bne.n	8008966 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	9300      	str	r3, [sp, #0]
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	2200      	movs	r2, #0
 80089ce:	2140      	movs	r1, #64	; 0x40
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f000 f810 	bl	80089f6 <UART_WaitOnFlagUntilTimeout>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d001      	beq.n	80089e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e006      	b.n	80089ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2220      	movs	r2, #32
 80089e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80089e8:	2300      	movs	r3, #0
 80089ea:	e000      	b.n	80089ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80089ec:	2302      	movs	r3, #2
  }
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3720      	adds	r7, #32
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b090      	sub	sp, #64	; 0x40
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	60f8      	str	r0, [r7, #12]
 80089fe:	60b9      	str	r1, [r7, #8]
 8008a00:	603b      	str	r3, [r7, #0]
 8008a02:	4613      	mov	r3, r2
 8008a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a06:	e050      	b.n	8008aaa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0e:	d04c      	beq.n	8008aaa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d007      	beq.n	8008a26 <UART_WaitOnFlagUntilTimeout+0x30>
 8008a16:	f7fc fa27 	bl	8004e68 <HAL_GetTick>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	1ad3      	subs	r3, r2, r3
 8008a20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d241      	bcs.n	8008aaa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	330c      	adds	r3, #12
 8008a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a30:	e853 3f00 	ldrex	r3, [r3]
 8008a34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	330c      	adds	r3, #12
 8008a44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a46:	637a      	str	r2, [r7, #52]	; 0x34
 8008a48:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a4e:	e841 2300 	strex	r3, r2, [r1]
 8008a52:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d1e5      	bne.n	8008a26 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3314      	adds	r3, #20
 8008a60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	613b      	str	r3, [r7, #16]
   return(result);
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	f023 0301 	bic.w	r3, r3, #1
 8008a70:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3314      	adds	r3, #20
 8008a78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a7a:	623a      	str	r2, [r7, #32]
 8008a7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7e:	69f9      	ldr	r1, [r7, #28]
 8008a80:	6a3a      	ldr	r2, [r7, #32]
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1e5      	bne.n	8008a5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2220      	movs	r2, #32
 8008a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e00f      	b.n	8008aca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	bf0c      	ite	eq
 8008aba:	2301      	moveq	r3, #1
 8008abc:	2300      	movne	r3, #0
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	79fb      	ldrb	r3, [r7, #7]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d09f      	beq.n	8008a08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3740      	adds	r7, #64	; 0x40
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
	...

08008ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ad8:	b09f      	sub	sp, #124	; 0x7c
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aea:	68d9      	ldr	r1, [r3, #12]
 8008aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	ea40 0301 	orr.w	r3, r0, r1
 8008af4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008af8:	689a      	ldr	r2, [r3, #8]
 8008afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	431a      	orrs	r2, r3
 8008b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	431a      	orrs	r2, r3
 8008b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b18:	f021 010c 	bic.w	r1, r1, #12
 8008b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b22:	430b      	orrs	r3, r1
 8008b24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b32:	6999      	ldr	r1, [r3, #24]
 8008b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	ea40 0301 	orr.w	r3, r0, r1
 8008b3c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	4bc5      	ldr	r3, [pc, #788]	; (8008e58 <UART_SetConfig+0x384>)
 8008b44:	429a      	cmp	r2, r3
 8008b46:	d004      	beq.n	8008b52 <UART_SetConfig+0x7e>
 8008b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	4bc3      	ldr	r3, [pc, #780]	; (8008e5c <UART_SetConfig+0x388>)
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d103      	bne.n	8008b5a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b52:	f7fd fefb 	bl	800694c <HAL_RCC_GetPCLK2Freq>
 8008b56:	6778      	str	r0, [r7, #116]	; 0x74
 8008b58:	e002      	b.n	8008b60 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b5a:	f7fd fee3 	bl	8006924 <HAL_RCC_GetPCLK1Freq>
 8008b5e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b62:	69db      	ldr	r3, [r3, #28]
 8008b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b68:	f040 80b6 	bne.w	8008cd8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b6e:	461c      	mov	r4, r3
 8008b70:	f04f 0500 	mov.w	r5, #0
 8008b74:	4622      	mov	r2, r4
 8008b76:	462b      	mov	r3, r5
 8008b78:	1891      	adds	r1, r2, r2
 8008b7a:	6439      	str	r1, [r7, #64]	; 0x40
 8008b7c:	415b      	adcs	r3, r3
 8008b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8008b80:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008b84:	1912      	adds	r2, r2, r4
 8008b86:	eb45 0303 	adc.w	r3, r5, r3
 8008b8a:	f04f 0000 	mov.w	r0, #0
 8008b8e:	f04f 0100 	mov.w	r1, #0
 8008b92:	00d9      	lsls	r1, r3, #3
 8008b94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b98:	00d0      	lsls	r0, r2, #3
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	1911      	adds	r1, r2, r4
 8008ba0:	6639      	str	r1, [r7, #96]	; 0x60
 8008ba2:	416b      	adcs	r3, r5
 8008ba4:	667b      	str	r3, [r7, #100]	; 0x64
 8008ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	461a      	mov	r2, r3
 8008bac:	f04f 0300 	mov.w	r3, #0
 8008bb0:	1891      	adds	r1, r2, r2
 8008bb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008bb4:	415b      	adcs	r3, r3
 8008bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008bbc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008bc0:	f7f8 f872 	bl	8000ca8 <__aeabi_uldivmod>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4ba5      	ldr	r3, [pc, #660]	; (8008e60 <UART_SetConfig+0x38c>)
 8008bca:	fba3 2302 	umull	r2, r3, r3, r2
 8008bce:	095b      	lsrs	r3, r3, #5
 8008bd0:	011e      	lsls	r6, r3, #4
 8008bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bd4:	461c      	mov	r4, r3
 8008bd6:	f04f 0500 	mov.w	r5, #0
 8008bda:	4622      	mov	r2, r4
 8008bdc:	462b      	mov	r3, r5
 8008bde:	1891      	adds	r1, r2, r2
 8008be0:	6339      	str	r1, [r7, #48]	; 0x30
 8008be2:	415b      	adcs	r3, r3
 8008be4:	637b      	str	r3, [r7, #52]	; 0x34
 8008be6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008bea:	1912      	adds	r2, r2, r4
 8008bec:	eb45 0303 	adc.w	r3, r5, r3
 8008bf0:	f04f 0000 	mov.w	r0, #0
 8008bf4:	f04f 0100 	mov.w	r1, #0
 8008bf8:	00d9      	lsls	r1, r3, #3
 8008bfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008bfe:	00d0      	lsls	r0, r2, #3
 8008c00:	4602      	mov	r2, r0
 8008c02:	460b      	mov	r3, r1
 8008c04:	1911      	adds	r1, r2, r4
 8008c06:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c08:	416b      	adcs	r3, r5
 8008c0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	461a      	mov	r2, r3
 8008c12:	f04f 0300 	mov.w	r3, #0
 8008c16:	1891      	adds	r1, r2, r2
 8008c18:	62b9      	str	r1, [r7, #40]	; 0x28
 8008c1a:	415b      	adcs	r3, r3
 8008c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008c22:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008c26:	f7f8 f83f 	bl	8000ca8 <__aeabi_uldivmod>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4b8c      	ldr	r3, [pc, #560]	; (8008e60 <UART_SetConfig+0x38c>)
 8008c30:	fba3 1302 	umull	r1, r3, r3, r2
 8008c34:	095b      	lsrs	r3, r3, #5
 8008c36:	2164      	movs	r1, #100	; 0x64
 8008c38:	fb01 f303 	mul.w	r3, r1, r3
 8008c3c:	1ad3      	subs	r3, r2, r3
 8008c3e:	00db      	lsls	r3, r3, #3
 8008c40:	3332      	adds	r3, #50	; 0x32
 8008c42:	4a87      	ldr	r2, [pc, #540]	; (8008e60 <UART_SetConfig+0x38c>)
 8008c44:	fba2 2303 	umull	r2, r3, r2, r3
 8008c48:	095b      	lsrs	r3, r3, #5
 8008c4a:	005b      	lsls	r3, r3, #1
 8008c4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c50:	441e      	add	r6, r3
 8008c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c54:	4618      	mov	r0, r3
 8008c56:	f04f 0100 	mov.w	r1, #0
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	1894      	adds	r4, r2, r2
 8008c60:	623c      	str	r4, [r7, #32]
 8008c62:	415b      	adcs	r3, r3
 8008c64:	627b      	str	r3, [r7, #36]	; 0x24
 8008c66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008c6a:	1812      	adds	r2, r2, r0
 8008c6c:	eb41 0303 	adc.w	r3, r1, r3
 8008c70:	f04f 0400 	mov.w	r4, #0
 8008c74:	f04f 0500 	mov.w	r5, #0
 8008c78:	00dd      	lsls	r5, r3, #3
 8008c7a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008c7e:	00d4      	lsls	r4, r2, #3
 8008c80:	4622      	mov	r2, r4
 8008c82:	462b      	mov	r3, r5
 8008c84:	1814      	adds	r4, r2, r0
 8008c86:	653c      	str	r4, [r7, #80]	; 0x50
 8008c88:	414b      	adcs	r3, r1
 8008c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8008c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	461a      	mov	r2, r3
 8008c92:	f04f 0300 	mov.w	r3, #0
 8008c96:	1891      	adds	r1, r2, r2
 8008c98:	61b9      	str	r1, [r7, #24]
 8008c9a:	415b      	adcs	r3, r3
 8008c9c:	61fb      	str	r3, [r7, #28]
 8008c9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ca2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008ca6:	f7f7 ffff 	bl	8000ca8 <__aeabi_uldivmod>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	4b6c      	ldr	r3, [pc, #432]	; (8008e60 <UART_SetConfig+0x38c>)
 8008cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8008cb4:	095b      	lsrs	r3, r3, #5
 8008cb6:	2164      	movs	r1, #100	; 0x64
 8008cb8:	fb01 f303 	mul.w	r3, r1, r3
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	3332      	adds	r3, #50	; 0x32
 8008cc2:	4a67      	ldr	r2, [pc, #412]	; (8008e60 <UART_SetConfig+0x38c>)
 8008cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008cc8:	095b      	lsrs	r3, r3, #5
 8008cca:	f003 0207 	and.w	r2, r3, #7
 8008cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4432      	add	r2, r6
 8008cd4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008cd6:	e0b9      	b.n	8008e4c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cda:	461c      	mov	r4, r3
 8008cdc:	f04f 0500 	mov.w	r5, #0
 8008ce0:	4622      	mov	r2, r4
 8008ce2:	462b      	mov	r3, r5
 8008ce4:	1891      	adds	r1, r2, r2
 8008ce6:	6139      	str	r1, [r7, #16]
 8008ce8:	415b      	adcs	r3, r3
 8008cea:	617b      	str	r3, [r7, #20]
 8008cec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008cf0:	1912      	adds	r2, r2, r4
 8008cf2:	eb45 0303 	adc.w	r3, r5, r3
 8008cf6:	f04f 0000 	mov.w	r0, #0
 8008cfa:	f04f 0100 	mov.w	r1, #0
 8008cfe:	00d9      	lsls	r1, r3, #3
 8008d00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d04:	00d0      	lsls	r0, r2, #3
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	eb12 0804 	adds.w	r8, r2, r4
 8008d0e:	eb43 0905 	adc.w	r9, r3, r5
 8008d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f04f 0100 	mov.w	r1, #0
 8008d1c:	f04f 0200 	mov.w	r2, #0
 8008d20:	f04f 0300 	mov.w	r3, #0
 8008d24:	008b      	lsls	r3, r1, #2
 8008d26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d2a:	0082      	lsls	r2, r0, #2
 8008d2c:	4640      	mov	r0, r8
 8008d2e:	4649      	mov	r1, r9
 8008d30:	f7f7 ffba 	bl	8000ca8 <__aeabi_uldivmod>
 8008d34:	4602      	mov	r2, r0
 8008d36:	460b      	mov	r3, r1
 8008d38:	4b49      	ldr	r3, [pc, #292]	; (8008e60 <UART_SetConfig+0x38c>)
 8008d3a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d3e:	095b      	lsrs	r3, r3, #5
 8008d40:	011e      	lsls	r6, r3, #4
 8008d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d44:	4618      	mov	r0, r3
 8008d46:	f04f 0100 	mov.w	r1, #0
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	1894      	adds	r4, r2, r2
 8008d50:	60bc      	str	r4, [r7, #8]
 8008d52:	415b      	adcs	r3, r3
 8008d54:	60fb      	str	r3, [r7, #12]
 8008d56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d5a:	1812      	adds	r2, r2, r0
 8008d5c:	eb41 0303 	adc.w	r3, r1, r3
 8008d60:	f04f 0400 	mov.w	r4, #0
 8008d64:	f04f 0500 	mov.w	r5, #0
 8008d68:	00dd      	lsls	r5, r3, #3
 8008d6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008d6e:	00d4      	lsls	r4, r2, #3
 8008d70:	4622      	mov	r2, r4
 8008d72:	462b      	mov	r3, r5
 8008d74:	1814      	adds	r4, r2, r0
 8008d76:	64bc      	str	r4, [r7, #72]	; 0x48
 8008d78:	414b      	adcs	r3, r1
 8008d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f04f 0100 	mov.w	r1, #0
 8008d86:	f04f 0200 	mov.w	r2, #0
 8008d8a:	f04f 0300 	mov.w	r3, #0
 8008d8e:	008b      	lsls	r3, r1, #2
 8008d90:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008d94:	0082      	lsls	r2, r0, #2
 8008d96:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008d9a:	f7f7 ff85 	bl	8000ca8 <__aeabi_uldivmod>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	460b      	mov	r3, r1
 8008da2:	4b2f      	ldr	r3, [pc, #188]	; (8008e60 <UART_SetConfig+0x38c>)
 8008da4:	fba3 1302 	umull	r1, r3, r3, r2
 8008da8:	095b      	lsrs	r3, r3, #5
 8008daa:	2164      	movs	r1, #100	; 0x64
 8008dac:	fb01 f303 	mul.w	r3, r1, r3
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	011b      	lsls	r3, r3, #4
 8008db4:	3332      	adds	r3, #50	; 0x32
 8008db6:	4a2a      	ldr	r2, [pc, #168]	; (8008e60 <UART_SetConfig+0x38c>)
 8008db8:	fba2 2303 	umull	r2, r3, r2, r3
 8008dbc:	095b      	lsrs	r3, r3, #5
 8008dbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008dc2:	441e      	add	r6, r3
 8008dc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f04f 0100 	mov.w	r1, #0
 8008dcc:	4602      	mov	r2, r0
 8008dce:	460b      	mov	r3, r1
 8008dd0:	1894      	adds	r4, r2, r2
 8008dd2:	603c      	str	r4, [r7, #0]
 8008dd4:	415b      	adcs	r3, r3
 8008dd6:	607b      	str	r3, [r7, #4]
 8008dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ddc:	1812      	adds	r2, r2, r0
 8008dde:	eb41 0303 	adc.w	r3, r1, r3
 8008de2:	f04f 0400 	mov.w	r4, #0
 8008de6:	f04f 0500 	mov.w	r5, #0
 8008dea:	00dd      	lsls	r5, r3, #3
 8008dec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008df0:	00d4      	lsls	r4, r2, #3
 8008df2:	4622      	mov	r2, r4
 8008df4:	462b      	mov	r3, r5
 8008df6:	eb12 0a00 	adds.w	sl, r2, r0
 8008dfa:	eb43 0b01 	adc.w	fp, r3, r1
 8008dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f04f 0100 	mov.w	r1, #0
 8008e08:	f04f 0200 	mov.w	r2, #0
 8008e0c:	f04f 0300 	mov.w	r3, #0
 8008e10:	008b      	lsls	r3, r1, #2
 8008e12:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e16:	0082      	lsls	r2, r0, #2
 8008e18:	4650      	mov	r0, sl
 8008e1a:	4659      	mov	r1, fp
 8008e1c:	f7f7 ff44 	bl	8000ca8 <__aeabi_uldivmod>
 8008e20:	4602      	mov	r2, r0
 8008e22:	460b      	mov	r3, r1
 8008e24:	4b0e      	ldr	r3, [pc, #56]	; (8008e60 <UART_SetConfig+0x38c>)
 8008e26:	fba3 1302 	umull	r1, r3, r3, r2
 8008e2a:	095b      	lsrs	r3, r3, #5
 8008e2c:	2164      	movs	r1, #100	; 0x64
 8008e2e:	fb01 f303 	mul.w	r3, r1, r3
 8008e32:	1ad3      	subs	r3, r2, r3
 8008e34:	011b      	lsls	r3, r3, #4
 8008e36:	3332      	adds	r3, #50	; 0x32
 8008e38:	4a09      	ldr	r2, [pc, #36]	; (8008e60 <UART_SetConfig+0x38c>)
 8008e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e3e:	095b      	lsrs	r3, r3, #5
 8008e40:	f003 020f 	and.w	r2, r3, #15
 8008e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4432      	add	r2, r6
 8008e4a:	609a      	str	r2, [r3, #8]
}
 8008e4c:	bf00      	nop
 8008e4e:	377c      	adds	r7, #124	; 0x7c
 8008e50:	46bd      	mov	sp, r7
 8008e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e56:	bf00      	nop
 8008e58:	40011000 	.word	0x40011000
 8008e5c:	40011400 	.word	0x40011400
 8008e60:	51eb851f 	.word	0x51eb851f

08008e64 <__NVIC_SetPriority>:
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	6039      	str	r1, [r7, #0]
 8008e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	db0a      	blt.n	8008e8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	490c      	ldr	r1, [pc, #48]	; (8008eb0 <__NVIC_SetPriority+0x4c>)
 8008e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e82:	0112      	lsls	r2, r2, #4
 8008e84:	b2d2      	uxtb	r2, r2
 8008e86:	440b      	add	r3, r1
 8008e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008e8c:	e00a      	b.n	8008ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	4908      	ldr	r1, [pc, #32]	; (8008eb4 <__NVIC_SetPriority+0x50>)
 8008e94:	79fb      	ldrb	r3, [r7, #7]
 8008e96:	f003 030f 	and.w	r3, r3, #15
 8008e9a:	3b04      	subs	r3, #4
 8008e9c:	0112      	lsls	r2, r2, #4
 8008e9e:	b2d2      	uxtb	r2, r2
 8008ea0:	440b      	add	r3, r1
 8008ea2:	761a      	strb	r2, [r3, #24]
}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr
 8008eb0:	e000e100 	.word	0xe000e100
 8008eb4:	e000ed00 	.word	0xe000ed00

08008eb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008ebc:	4b05      	ldr	r3, [pc, #20]	; (8008ed4 <SysTick_Handler+0x1c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008ec0:	f001 fdba 	bl	800aa38 <xTaskGetSchedulerState>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d001      	beq.n	8008ece <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008eca:	f002 fba5 	bl	800b618 <xPortSysTickHandler>
  }
}
 8008ece:	bf00      	nop
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	e000e010 	.word	0xe000e010

08008ed8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008edc:	2100      	movs	r1, #0
 8008ede:	f06f 0004 	mvn.w	r0, #4
 8008ee2:	f7ff ffbf 	bl	8008e64 <__NVIC_SetPriority>
#endif
}
 8008ee6:	bf00      	nop
 8008ee8:	bd80      	pop	{r7, pc}
	...

08008eec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ef2:	f3ef 8305 	mrs	r3, IPSR
 8008ef6:	603b      	str	r3, [r7, #0]
  return(result);
 8008ef8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d003      	beq.n	8008f06 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008efe:	f06f 0305 	mvn.w	r3, #5
 8008f02:	607b      	str	r3, [r7, #4]
 8008f04:	e00c      	b.n	8008f20 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008f06:	4b0a      	ldr	r3, [pc, #40]	; (8008f30 <osKernelInitialize+0x44>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d105      	bne.n	8008f1a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008f0e:	4b08      	ldr	r3, [pc, #32]	; (8008f30 <osKernelInitialize+0x44>)
 8008f10:	2201      	movs	r2, #1
 8008f12:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	607b      	str	r3, [r7, #4]
 8008f18:	e002      	b.n	8008f20 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f20:	687b      	ldr	r3, [r7, #4]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	200004c8 	.word	0x200004c8

08008f34 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f3a:	f3ef 8305 	mrs	r3, IPSR
 8008f3e:	603b      	str	r3, [r7, #0]
  return(result);
 8008f40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008f46:	f06f 0305 	mvn.w	r3, #5
 8008f4a:	607b      	str	r3, [r7, #4]
 8008f4c:	e010      	b.n	8008f70 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008f4e:	4b0b      	ldr	r3, [pc, #44]	; (8008f7c <osKernelStart+0x48>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	2b01      	cmp	r3, #1
 8008f54:	d109      	bne.n	8008f6a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008f56:	f7ff ffbf 	bl	8008ed8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008f5a:	4b08      	ldr	r3, [pc, #32]	; (8008f7c <osKernelStart+0x48>)
 8008f5c:	2202      	movs	r2, #2
 8008f5e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008f60:	f001 f8fe 	bl	800a160 <vTaskStartScheduler>
      stat = osOK;
 8008f64:	2300      	movs	r3, #0
 8008f66:	607b      	str	r3, [r7, #4]
 8008f68:	e002      	b.n	8008f70 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f6e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008f70:	687b      	ldr	r3, [r7, #4]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	200004c8 	.word	0x200004c8

08008f80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b08e      	sub	sp, #56	; 0x38
 8008f84:	af04      	add	r7, sp, #16
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f90:	f3ef 8305 	mrs	r3, IPSR
 8008f94:	617b      	str	r3, [r7, #20]
  return(result);
 8008f96:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d17e      	bne.n	800909a <osThreadNew+0x11a>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d07b      	beq.n	800909a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008fa2:	2380      	movs	r3, #128	; 0x80
 8008fa4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008fa6:	2318      	movs	r3, #24
 8008fa8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008faa:	2300      	movs	r3, #0
 8008fac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008fae:	f04f 33ff 	mov.w	r3, #4294967295
 8008fb2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d045      	beq.n	8009046 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d002      	beq.n	8008fc8 <osThreadNew+0x48>
        name = attr->name;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d002      	beq.n	8008fd6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d008      	beq.n	8008fee <osThreadNew+0x6e>
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	2b38      	cmp	r3, #56	; 0x38
 8008fe0:	d805      	bhi.n	8008fee <osThreadNew+0x6e>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <osThreadNew+0x72>
        return (NULL);
 8008fee:	2300      	movs	r3, #0
 8008ff0:	e054      	b.n	800909c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	695b      	ldr	r3, [r3, #20]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d003      	beq.n	8009002 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	695b      	ldr	r3, [r3, #20]
 8008ffe:	089b      	lsrs	r3, r3, #2
 8009000:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00e      	beq.n	8009028 <osThreadNew+0xa8>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	2bbb      	cmp	r3, #187	; 0xbb
 8009010:	d90a      	bls.n	8009028 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009016:	2b00      	cmp	r3, #0
 8009018:	d006      	beq.n	8009028 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d002      	beq.n	8009028 <osThreadNew+0xa8>
        mem = 1;
 8009022:	2301      	movs	r3, #1
 8009024:	61bb      	str	r3, [r7, #24]
 8009026:	e010      	b.n	800904a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10c      	bne.n	800904a <osThreadNew+0xca>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d108      	bne.n	800904a <osThreadNew+0xca>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d104      	bne.n	800904a <osThreadNew+0xca>
          mem = 0;
 8009040:	2300      	movs	r3, #0
 8009042:	61bb      	str	r3, [r7, #24]
 8009044:	e001      	b.n	800904a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009046:	2300      	movs	r3, #0
 8009048:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d110      	bne.n	8009072 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009058:	9202      	str	r2, [sp, #8]
 800905a:	9301      	str	r3, [sp, #4]
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	9300      	str	r3, [sp, #0]
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	6a3a      	ldr	r2, [r7, #32]
 8009064:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f000 fe1c 	bl	8009ca4 <xTaskCreateStatic>
 800906c:	4603      	mov	r3, r0
 800906e:	613b      	str	r3, [r7, #16]
 8009070:	e013      	b.n	800909a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d110      	bne.n	800909a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009078:	6a3b      	ldr	r3, [r7, #32]
 800907a:	b29a      	uxth	r2, r3
 800907c:	f107 0310 	add.w	r3, r7, #16
 8009080:	9301      	str	r3, [sp, #4]
 8009082:	69fb      	ldr	r3, [r7, #28]
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 fe67 	bl	8009d5e <xTaskCreate>
 8009090:	4603      	mov	r3, r0
 8009092:	2b01      	cmp	r3, #1
 8009094:	d001      	beq.n	800909a <osThreadNew+0x11a>
            hTask = NULL;
 8009096:	2300      	movs	r3, #0
 8009098:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800909a:	693b      	ldr	r3, [r7, #16]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3728      	adds	r7, #40	; 0x28
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80090aa:	f001 fcb5 	bl	800aa18 <xTaskGetCurrentTaskHandle>
 80090ae:	6078      	str	r0, [r7, #4]

  return (id);
 80090b0:	687b      	ldr	r3, [r7, #4]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 80090ba:	b580      	push	{r7, lr}
 80090bc:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 80090be:	2000      	movs	r0, #0
 80090c0:	f000 ffa8 	bl	800a014 <vTaskDelete>
#endif
  for (;;);
 80090c4:	e7fe      	b.n	80090c4 <osThreadExit+0xa>

080090c6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b084      	sub	sp, #16
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090ce:	f3ef 8305 	mrs	r3, IPSR
 80090d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80090d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d003      	beq.n	80090e2 <osDelay+0x1c>
    stat = osErrorISR;
 80090da:	f06f 0305 	mvn.w	r3, #5
 80090de:	60fb      	str	r3, [r7, #12]
 80090e0:	e007      	b.n	80090f2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d002      	beq.n	80090f2 <osDelay+0x2c>
      vTaskDelay(ticks);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f001 f803 	bl	800a0f8 <vTaskDelay>
    }
  }

  return (stat);
 80090f2:	68fb      	ldr	r3, [r7, #12]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4a07      	ldr	r2, [pc, #28]	; (8009128 <vApplicationGetIdleTaskMemory+0x2c>)
 800910c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	4a06      	ldr	r2, [pc, #24]	; (800912c <vApplicationGetIdleTaskMemory+0x30>)
 8009112:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2280      	movs	r2, #128	; 0x80
 8009118:	601a      	str	r2, [r3, #0]
}
 800911a:	bf00      	nop
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	200004cc 	.word	0x200004cc
 800912c:	20000588 	.word	0x20000588

08009130 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	4a07      	ldr	r2, [pc, #28]	; (800915c <vApplicationGetTimerTaskMemory+0x2c>)
 8009140:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	4a06      	ldr	r2, [pc, #24]	; (8009160 <vApplicationGetTimerTaskMemory+0x30>)
 8009146:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800914e:	601a      	str	r2, [r3, #0]
}
 8009150:	bf00      	nop
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	20000788 	.word	0x20000788
 8009160:	20000844 	.word	0x20000844

08009164 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f103 0208 	add.w	r2, r3, #8
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f04f 32ff 	mov.w	r2, #4294967295
 800917c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f103 0208 	add.w	r2, r3, #8
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f103 0208 	add.w	r2, r3, #8
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80091b2:	bf00      	nop
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091be:	b480      	push	{r7}
 80091c0:	b085      	sub	sp, #20
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	689a      	ldr	r2, [r3, #8]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	1c5a      	adds	r2, r3, #1
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	601a      	str	r2, [r3, #0]
}
 80091fa:	bf00      	nop
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009206:	b480      	push	{r7}
 8009208:	b085      	sub	sp, #20
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
 800920e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800921c:	d103      	bne.n	8009226 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	60fb      	str	r3, [r7, #12]
 8009224:	e00c      	b.n	8009240 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3308      	adds	r3, #8
 800922a:	60fb      	str	r3, [r7, #12]
 800922c:	e002      	b.n	8009234 <vListInsert+0x2e>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	60fb      	str	r3, [r7, #12]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	429a      	cmp	r2, r3
 800923e:	d2f6      	bcs.n	800922e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	1c5a      	adds	r2, r3, #1
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	601a      	str	r2, [r3, #0]
}
 800926c:	bf00      	nop
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	6892      	ldr	r2, [r2, #8]
 800928e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	6852      	ldr	r2, [r2, #4]
 8009298:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d103      	bne.n	80092ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	689a      	ldr	r2, [r3, #8]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	1e5a      	subs	r2, r3, #1
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3714      	adds	r7, #20
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10a      	bne.n	80092f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80092e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80092f2:	bf00      	nop
 80092f4:	e7fe      	b.n	80092f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80092f6:	f002 f8fd 	bl	800b4f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009302:	68f9      	ldr	r1, [r7, #12]
 8009304:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009306:	fb01 f303 	mul.w	r3, r1, r3
 800930a:	441a      	add	r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009326:	3b01      	subs	r3, #1
 8009328:	68f9      	ldr	r1, [r7, #12]
 800932a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800932c:	fb01 f303 	mul.w	r3, r1, r3
 8009330:	441a      	add	r2, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	22ff      	movs	r2, #255	; 0xff
 800933a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	22ff      	movs	r2, #255	; 0xff
 8009342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d114      	bne.n	8009376 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d01a      	beq.n	800938a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	3310      	adds	r3, #16
 8009358:	4618      	mov	r0, r3
 800935a:	f001 f99b 	bl	800a694 <xTaskRemoveFromEventList>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d012      	beq.n	800938a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009364:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <xQueueGenericReset+0xcc>)
 8009366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800936a:	601a      	str	r2, [r3, #0]
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	e009      	b.n	800938a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3310      	adds	r3, #16
 800937a:	4618      	mov	r0, r3
 800937c:	f7ff fef2 	bl	8009164 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	3324      	adds	r3, #36	; 0x24
 8009384:	4618      	mov	r0, r3
 8009386:	f7ff feed 	bl	8009164 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800938a:	f002 f8e3 	bl	800b554 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800938e:	2301      	movs	r3, #1
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	e000ed04 	.word	0xe000ed04

0800939c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800939c:	b580      	push	{r7, lr}
 800939e:	b08e      	sub	sp, #56	; 0x38
 80093a0:	af02      	add	r7, sp, #8
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
 80093a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10a      	bne.n	80093c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80093c2:	bf00      	nop
 80093c4:	e7fe      	b.n	80093c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10a      	bne.n	80093e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093de:	bf00      	nop
 80093e0:	e7fe      	b.n	80093e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d002      	beq.n	80093ee <xQueueGenericCreateStatic+0x52>
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <xQueueGenericCreateStatic+0x56>
 80093ee:	2301      	movs	r3, #1
 80093f0:	e000      	b.n	80093f4 <xQueueGenericCreateStatic+0x58>
 80093f2:	2300      	movs	r3, #0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10a      	bne.n	800940e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	623b      	str	r3, [r7, #32]
}
 800940a:	bf00      	nop
 800940c:	e7fe      	b.n	800940c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d102      	bne.n	800941a <xQueueGenericCreateStatic+0x7e>
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d101      	bne.n	800941e <xQueueGenericCreateStatic+0x82>
 800941a:	2301      	movs	r3, #1
 800941c:	e000      	b.n	8009420 <xQueueGenericCreateStatic+0x84>
 800941e:	2300      	movs	r3, #0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10a      	bne.n	800943a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	61fb      	str	r3, [r7, #28]
}
 8009436:	bf00      	nop
 8009438:	e7fe      	b.n	8009438 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800943a:	2350      	movs	r3, #80	; 0x50
 800943c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b50      	cmp	r3, #80	; 0x50
 8009442:	d00a      	beq.n	800945a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	61bb      	str	r3, [r7, #24]
}
 8009456:	bf00      	nop
 8009458:	e7fe      	b.n	8009458 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800945a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00d      	beq.n	8009482 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009468:	2201      	movs	r2, #1
 800946a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800946e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	4613      	mov	r3, r2
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	68b9      	ldr	r1, [r7, #8]
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f000 f805 	bl	800948c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009484:	4618      	mov	r0, r3
 8009486:	3730      	adds	r7, #48	; 0x30
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
 8009498:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d103      	bne.n	80094a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	69ba      	ldr	r2, [r7, #24]
 80094a4:	601a      	str	r2, [r3, #0]
 80094a6:	e002      	b.n	80094ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80094ae:	69bb      	ldr	r3, [r7, #24]
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094ba:	2101      	movs	r1, #1
 80094bc:	69b8      	ldr	r0, [r7, #24]
 80094be:	f7ff ff05 	bl	80092cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	78fa      	ldrb	r2, [r7, #3]
 80094c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80094ca:	bf00      	nop
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
	...

080094d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b08e      	sub	sp, #56	; 0x38
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]
 80094e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80094e2:	2300      	movs	r3, #0
 80094e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80094ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10a      	bne.n	8009506 <xQueueGenericSend+0x32>
	__asm volatile
 80094f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f4:	f383 8811 	msr	BASEPRI, r3
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009502:	bf00      	nop
 8009504:	e7fe      	b.n	8009504 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d103      	bne.n	8009514 <xQueueGenericSend+0x40>
 800950c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <xQueueGenericSend+0x44>
 8009514:	2301      	movs	r3, #1
 8009516:	e000      	b.n	800951a <xQueueGenericSend+0x46>
 8009518:	2300      	movs	r3, #0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10a      	bne.n	8009534 <xQueueGenericSend+0x60>
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009530:	bf00      	nop
 8009532:	e7fe      	b.n	8009532 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	2b02      	cmp	r3, #2
 8009538:	d103      	bne.n	8009542 <xQueueGenericSend+0x6e>
 800953a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800953e:	2b01      	cmp	r3, #1
 8009540:	d101      	bne.n	8009546 <xQueueGenericSend+0x72>
 8009542:	2301      	movs	r3, #1
 8009544:	e000      	b.n	8009548 <xQueueGenericSend+0x74>
 8009546:	2300      	movs	r3, #0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10a      	bne.n	8009562 <xQueueGenericSend+0x8e>
	__asm volatile
 800954c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	623b      	str	r3, [r7, #32]
}
 800955e:	bf00      	nop
 8009560:	e7fe      	b.n	8009560 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009562:	f001 fa69 	bl	800aa38 <xTaskGetSchedulerState>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d102      	bne.n	8009572 <xQueueGenericSend+0x9e>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <xQueueGenericSend+0xa2>
 8009572:	2301      	movs	r3, #1
 8009574:	e000      	b.n	8009578 <xQueueGenericSend+0xa4>
 8009576:	2300      	movs	r3, #0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10a      	bne.n	8009592 <xQueueGenericSend+0xbe>
	__asm volatile
 800957c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	61fb      	str	r3, [r7, #28]
}
 800958e:	bf00      	nop
 8009590:	e7fe      	b.n	8009590 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009592:	f001 ffaf 	bl	800b4f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800959a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800959e:	429a      	cmp	r2, r3
 80095a0:	d302      	bcc.n	80095a8 <xQueueGenericSend+0xd4>
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	d129      	bne.n	80095fc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095a8:	683a      	ldr	r2, [r7, #0]
 80095aa:	68b9      	ldr	r1, [r7, #8]
 80095ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095ae:	f000 fa0b 	bl	80099c8 <prvCopyDataToQueue>
 80095b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d010      	beq.n	80095de <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095be:	3324      	adds	r3, #36	; 0x24
 80095c0:	4618      	mov	r0, r3
 80095c2:	f001 f867 	bl	800a694 <xTaskRemoveFromEventList>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d013      	beq.n	80095f4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80095cc:	4b3f      	ldr	r3, [pc, #252]	; (80096cc <xQueueGenericSend+0x1f8>)
 80095ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095d2:	601a      	str	r2, [r3, #0]
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	e00a      	b.n	80095f4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80095de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d007      	beq.n	80095f4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80095e4:	4b39      	ldr	r3, [pc, #228]	; (80096cc <xQueueGenericSend+0x1f8>)
 80095e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ea:	601a      	str	r2, [r3, #0]
 80095ec:	f3bf 8f4f 	dsb	sy
 80095f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80095f4:	f001 ffae 	bl	800b554 <vPortExitCritical>
				return pdPASS;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e063      	b.n	80096c4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d103      	bne.n	800960a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009602:	f001 ffa7 	bl	800b554 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009606:	2300      	movs	r3, #0
 8009608:	e05c      	b.n	80096c4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800960a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800960c:	2b00      	cmp	r3, #0
 800960e:	d106      	bne.n	800961e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009610:	f107 0314 	add.w	r3, r7, #20
 8009614:	4618      	mov	r0, r3
 8009616:	f001 f8a1 	bl	800a75c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800961a:	2301      	movs	r3, #1
 800961c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800961e:	f001 ff99 	bl	800b554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009622:	f000 fe0d 	bl	800a240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009626:	f001 ff65 	bl	800b4f4 <vPortEnterCritical>
 800962a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009630:	b25b      	sxtb	r3, r3
 8009632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009636:	d103      	bne.n	8009640 <xQueueGenericSend+0x16c>
 8009638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800963a:	2200      	movs	r2, #0
 800963c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009642:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009646:	b25b      	sxtb	r3, r3
 8009648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964c:	d103      	bne.n	8009656 <xQueueGenericSend+0x182>
 800964e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009650:	2200      	movs	r2, #0
 8009652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009656:	f001 ff7d 	bl	800b554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800965a:	1d3a      	adds	r2, r7, #4
 800965c:	f107 0314 	add.w	r3, r7, #20
 8009660:	4611      	mov	r1, r2
 8009662:	4618      	mov	r0, r3
 8009664:	f001 f890 	bl	800a788 <xTaskCheckForTimeOut>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d124      	bne.n	80096b8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800966e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009670:	f000 faa2 	bl	8009bb8 <prvIsQueueFull>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d018      	beq.n	80096ac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800967a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967c:	3310      	adds	r3, #16
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	4611      	mov	r1, r2
 8009682:	4618      	mov	r0, r3
 8009684:	f000 ffb6 	bl	800a5f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800968a:	f000 fa2d 	bl	8009ae8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800968e:	f000 fde5 	bl	800a25c <xTaskResumeAll>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	f47f af7c 	bne.w	8009592 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800969a:	4b0c      	ldr	r3, [pc, #48]	; (80096cc <xQueueGenericSend+0x1f8>)
 800969c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096a0:	601a      	str	r2, [r3, #0]
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	e772      	b.n	8009592 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80096ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096ae:	f000 fa1b 	bl	8009ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096b2:	f000 fdd3 	bl	800a25c <xTaskResumeAll>
 80096b6:	e76c      	b.n	8009592 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80096b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096ba:	f000 fa15 	bl	8009ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096be:	f000 fdcd 	bl	800a25c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80096c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3738      	adds	r7, #56	; 0x38
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	e000ed04 	.word	0xe000ed04

080096d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b090      	sub	sp, #64	; 0x40
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
 80096dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80096e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10a      	bne.n	80096fe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80096e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ec:	f383 8811 	msr	BASEPRI, r3
 80096f0:	f3bf 8f6f 	isb	sy
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096fa:	bf00      	nop
 80096fc:	e7fe      	b.n	80096fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d103      	bne.n	800970c <xQueueGenericSendFromISR+0x3c>
 8009704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009708:	2b00      	cmp	r3, #0
 800970a:	d101      	bne.n	8009710 <xQueueGenericSendFromISR+0x40>
 800970c:	2301      	movs	r3, #1
 800970e:	e000      	b.n	8009712 <xQueueGenericSendFromISR+0x42>
 8009710:	2300      	movs	r3, #0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10a      	bne.n	800972c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009728:	bf00      	nop
 800972a:	e7fe      	b.n	800972a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	2b02      	cmp	r3, #2
 8009730:	d103      	bne.n	800973a <xQueueGenericSendFromISR+0x6a>
 8009732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009736:	2b01      	cmp	r3, #1
 8009738:	d101      	bne.n	800973e <xQueueGenericSendFromISR+0x6e>
 800973a:	2301      	movs	r3, #1
 800973c:	e000      	b.n	8009740 <xQueueGenericSendFromISR+0x70>
 800973e:	2300      	movs	r3, #0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d10a      	bne.n	800975a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009748:	f383 8811 	msr	BASEPRI, r3
 800974c:	f3bf 8f6f 	isb	sy
 8009750:	f3bf 8f4f 	dsb	sy
 8009754:	623b      	str	r3, [r7, #32]
}
 8009756:	bf00      	nop
 8009758:	e7fe      	b.n	8009758 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800975a:	f001 ffad 	bl	800b6b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800975e:	f3ef 8211 	mrs	r2, BASEPRI
 8009762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009766:	f383 8811 	msr	BASEPRI, r3
 800976a:	f3bf 8f6f 	isb	sy
 800976e:	f3bf 8f4f 	dsb	sy
 8009772:	61fa      	str	r2, [r7, #28]
 8009774:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009776:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009778:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800977a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800977e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009782:	429a      	cmp	r2, r3
 8009784:	d302      	bcc.n	800978c <xQueueGenericSendFromISR+0xbc>
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	2b02      	cmp	r3, #2
 800978a:	d12f      	bne.n	80097ec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800978c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	68b9      	ldr	r1, [r7, #8]
 80097a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80097a2:	f000 f911 	bl	80099c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80097a6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80097aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ae:	d112      	bne.n	80097d6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d016      	beq.n	80097e6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ba:	3324      	adds	r3, #36	; 0x24
 80097bc:	4618      	mov	r0, r3
 80097be:	f000 ff69 	bl	800a694 <xTaskRemoveFromEventList>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00e      	beq.n	80097e6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00b      	beq.n	80097e6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2201      	movs	r2, #1
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	e007      	b.n	80097e6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097d6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80097da:	3301      	adds	r3, #1
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	b25a      	sxtb	r2, r3
 80097e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80097e6:	2301      	movs	r3, #1
 80097e8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80097ea:	e001      	b.n	80097f0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80097ec:	2300      	movs	r3, #0
 80097ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097fa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3740      	adds	r7, #64	; 0x40
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
	...

08009808 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b08c      	sub	sp, #48	; 0x30
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009814:	2300      	movs	r3, #0
 8009816:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10a      	bne.n	8009838 <xQueueReceive+0x30>
	__asm volatile
 8009822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009826:	f383 8811 	msr	BASEPRI, r3
 800982a:	f3bf 8f6f 	isb	sy
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	623b      	str	r3, [r7, #32]
}
 8009834:	bf00      	nop
 8009836:	e7fe      	b.n	8009836 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d103      	bne.n	8009846 <xQueueReceive+0x3e>
 800983e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009842:	2b00      	cmp	r3, #0
 8009844:	d101      	bne.n	800984a <xQueueReceive+0x42>
 8009846:	2301      	movs	r3, #1
 8009848:	e000      	b.n	800984c <xQueueReceive+0x44>
 800984a:	2300      	movs	r3, #0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d10a      	bne.n	8009866 <xQueueReceive+0x5e>
	__asm volatile
 8009850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009854:	f383 8811 	msr	BASEPRI, r3
 8009858:	f3bf 8f6f 	isb	sy
 800985c:	f3bf 8f4f 	dsb	sy
 8009860:	61fb      	str	r3, [r7, #28]
}
 8009862:	bf00      	nop
 8009864:	e7fe      	b.n	8009864 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009866:	f001 f8e7 	bl	800aa38 <xTaskGetSchedulerState>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d102      	bne.n	8009876 <xQueueReceive+0x6e>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d101      	bne.n	800987a <xQueueReceive+0x72>
 8009876:	2301      	movs	r3, #1
 8009878:	e000      	b.n	800987c <xQueueReceive+0x74>
 800987a:	2300      	movs	r3, #0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d10a      	bne.n	8009896 <xQueueReceive+0x8e>
	__asm volatile
 8009880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009884:	f383 8811 	msr	BASEPRI, r3
 8009888:	f3bf 8f6f 	isb	sy
 800988c:	f3bf 8f4f 	dsb	sy
 8009890:	61bb      	str	r3, [r7, #24]
}
 8009892:	bf00      	nop
 8009894:	e7fe      	b.n	8009894 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009896:	f001 fe2d 	bl	800b4f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800989a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d01f      	beq.n	80098e6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098a6:	68b9      	ldr	r1, [r7, #8]
 80098a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098aa:	f000 f8f7 	bl	8009a9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b0:	1e5a      	subs	r2, r3, #1
 80098b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00f      	beq.n	80098de <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c0:	3310      	adds	r3, #16
 80098c2:	4618      	mov	r0, r3
 80098c4:	f000 fee6 	bl	800a694 <xTaskRemoveFromEventList>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d007      	beq.n	80098de <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098ce:	4b3d      	ldr	r3, [pc, #244]	; (80099c4 <xQueueReceive+0x1bc>)
 80098d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098d4:	601a      	str	r2, [r3, #0]
 80098d6:	f3bf 8f4f 	dsb	sy
 80098da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098de:	f001 fe39 	bl	800b554 <vPortExitCritical>
				return pdPASS;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e069      	b.n	80099ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d103      	bne.n	80098f4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098ec:	f001 fe32 	bl	800b554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80098f0:	2300      	movs	r3, #0
 80098f2:	e062      	b.n	80099ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d106      	bne.n	8009908 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098fa:	f107 0310 	add.w	r3, r7, #16
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 ff2c 	bl	800a75c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009904:	2301      	movs	r3, #1
 8009906:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009908:	f001 fe24 	bl	800b554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800990c:	f000 fc98 	bl	800a240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009910:	f001 fdf0 	bl	800b4f4 <vPortEnterCritical>
 8009914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009916:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800991a:	b25b      	sxtb	r3, r3
 800991c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009920:	d103      	bne.n	800992a <xQueueReceive+0x122>
 8009922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009924:	2200      	movs	r2, #0
 8009926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800992a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009930:	b25b      	sxtb	r3, r3
 8009932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009936:	d103      	bne.n	8009940 <xQueueReceive+0x138>
 8009938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993a:	2200      	movs	r2, #0
 800993c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009940:	f001 fe08 	bl	800b554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009944:	1d3a      	adds	r2, r7, #4
 8009946:	f107 0310 	add.w	r3, r7, #16
 800994a:	4611      	mov	r1, r2
 800994c:	4618      	mov	r0, r3
 800994e:	f000 ff1b 	bl	800a788 <xTaskCheckForTimeOut>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d123      	bne.n	80099a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009958:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800995a:	f000 f917 	bl	8009b8c <prvIsQueueEmpty>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d017      	beq.n	8009994 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009966:	3324      	adds	r3, #36	; 0x24
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	4611      	mov	r1, r2
 800996c:	4618      	mov	r0, r3
 800996e:	f000 fe41 	bl	800a5f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009974:	f000 f8b8 	bl	8009ae8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009978:	f000 fc70 	bl	800a25c <xTaskResumeAll>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d189      	bne.n	8009896 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009982:	4b10      	ldr	r3, [pc, #64]	; (80099c4 <xQueueReceive+0x1bc>)
 8009984:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009988:	601a      	str	r2, [r3, #0]
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	f3bf 8f6f 	isb	sy
 8009992:	e780      	b.n	8009896 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009996:	f000 f8a7 	bl	8009ae8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800999a:	f000 fc5f 	bl	800a25c <xTaskResumeAll>
 800999e:	e77a      	b.n	8009896 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80099a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099a2:	f000 f8a1 	bl	8009ae8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099a6:	f000 fc59 	bl	800a25c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ac:	f000 f8ee 	bl	8009b8c <prvIsQueueEmpty>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	f43f af6f 	beq.w	8009896 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80099b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3730      	adds	r7, #48	; 0x30
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	e000ed04 	.word	0xe000ed04

080099c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099d4:	2300      	movs	r3, #0
 80099d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d10d      	bne.n	8009a02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d14d      	bne.n	8009a8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	689b      	ldr	r3, [r3, #8]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f001 f83e 	bl	800aa74 <xTaskPriorityDisinherit>
 80099f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	609a      	str	r2, [r3, #8]
 8009a00:	e043      	b.n	8009a8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d119      	bne.n	8009a3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6858      	ldr	r0, [r3, #4]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a10:	461a      	mov	r2, r3
 8009a12:	68b9      	ldr	r1, [r7, #8]
 8009a14:	f002 fb02 	bl	800c01c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a20:	441a      	add	r2, r3
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	685a      	ldr	r2, [r3, #4]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d32b      	bcc.n	8009a8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	605a      	str	r2, [r3, #4]
 8009a3a:	e026      	b.n	8009a8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	68d8      	ldr	r0, [r3, #12]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a44:	461a      	mov	r2, r3
 8009a46:	68b9      	ldr	r1, [r7, #8]
 8009a48:	f002 fae8 	bl	800c01c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	68da      	ldr	r2, [r3, #12]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a54:	425b      	negs	r3, r3
 8009a56:	441a      	add	r2, r3
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	68da      	ldr	r2, [r3, #12]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d207      	bcs.n	8009a78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	689a      	ldr	r2, [r3, #8]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a70:	425b      	negs	r3, r3
 8009a72:	441a      	add	r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b02      	cmp	r3, #2
 8009a7c:	d105      	bne.n	8009a8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d002      	beq.n	8009a8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	3b01      	subs	r3, #1
 8009a88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	1c5a      	adds	r2, r3, #1
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009a92:	697b      	ldr	r3, [r7, #20]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d018      	beq.n	8009ae0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68da      	ldr	r2, [r3, #12]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab6:	441a      	add	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68da      	ldr	r2, [r3, #12]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	689b      	ldr	r3, [r3, #8]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d303      	bcc.n	8009ad0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	68d9      	ldr	r1, [r3, #12]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad8:	461a      	mov	r2, r3
 8009ada:	6838      	ldr	r0, [r7, #0]
 8009adc:	f002 fa9e 	bl	800c01c <memcpy>
	}
}
 8009ae0:	bf00      	nop
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009af0:	f001 fd00 	bl	800b4f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009afa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009afc:	e011      	b.n	8009b22 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d012      	beq.n	8009b2c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	3324      	adds	r3, #36	; 0x24
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f000 fdc2 	bl	800a694 <xTaskRemoveFromEventList>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d001      	beq.n	8009b1a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b16:	f000 fe99 	bl	800a84c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b1a:	7bfb      	ldrb	r3, [r7, #15]
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	dce9      	bgt.n	8009afe <prvUnlockQueue+0x16>
 8009b2a:	e000      	b.n	8009b2e <prvUnlockQueue+0x46>
					break;
 8009b2c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	22ff      	movs	r2, #255	; 0xff
 8009b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009b36:	f001 fd0d 	bl	800b554 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b3a:	f001 fcdb 	bl	800b4f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b44:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b46:	e011      	b.n	8009b6c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d012      	beq.n	8009b76 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	3310      	adds	r3, #16
 8009b54:	4618      	mov	r0, r3
 8009b56:	f000 fd9d 	bl	800a694 <xTaskRemoveFromEventList>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b60:	f000 fe74 	bl	800a84c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b64:	7bbb      	ldrb	r3, [r7, #14]
 8009b66:	3b01      	subs	r3, #1
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	dce9      	bgt.n	8009b48 <prvUnlockQueue+0x60>
 8009b74:	e000      	b.n	8009b78 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b76:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	22ff      	movs	r2, #255	; 0xff
 8009b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009b80:	f001 fce8 	bl	800b554 <vPortExitCritical>
}
 8009b84:	bf00      	nop
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b94:	f001 fcae 	bl	800b4f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d102      	bne.n	8009ba6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	e001      	b.n	8009baa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009baa:	f001 fcd3 	bl	800b554 <vPortExitCritical>

	return xReturn;
 8009bae:	68fb      	ldr	r3, [r7, #12]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009bc0:	f001 fc98 	bl	800b4f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d102      	bne.n	8009bd6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	e001      	b.n	8009bda <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bda:	f001 fcbb 	bl	800b554 <vPortExitCritical>

	return xReturn;
 8009bde:	68fb      	ldr	r3, [r7, #12]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	60fb      	str	r3, [r7, #12]
 8009bf6:	e014      	b.n	8009c22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009bf8:	4a0f      	ldr	r2, [pc, #60]	; (8009c38 <vQueueAddToRegistry+0x50>)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10b      	bne.n	8009c1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009c04:	490c      	ldr	r1, [pc, #48]	; (8009c38 <vQueueAddToRegistry+0x50>)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	683a      	ldr	r2, [r7, #0]
 8009c0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009c0e:	4a0a      	ldr	r2, [pc, #40]	; (8009c38 <vQueueAddToRegistry+0x50>)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	00db      	lsls	r3, r3, #3
 8009c14:	4413      	add	r3, r2
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c1a:	e006      	b.n	8009c2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	60fb      	str	r3, [r7, #12]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2b07      	cmp	r3, #7
 8009c26:	d9e7      	bls.n	8009bf8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c28:	bf00      	nop
 8009c2a:	bf00      	nop
 8009c2c:	3714      	adds	r7, #20
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	2000504c 	.word	0x2000504c

08009c3c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c4c:	f001 fc52 	bl	800b4f4 <vPortEnterCritical>
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c56:	b25b      	sxtb	r3, r3
 8009c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c5c:	d103      	bne.n	8009c66 <vQueueWaitForMessageRestricted+0x2a>
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c6c:	b25b      	sxtb	r3, r3
 8009c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c72:	d103      	bne.n	8009c7c <vQueueWaitForMessageRestricted+0x40>
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c7c:	f001 fc6a 	bl	800b554 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d106      	bne.n	8009c96 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	3324      	adds	r3, #36	; 0x24
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	68b9      	ldr	r1, [r7, #8]
 8009c90:	4618      	mov	r0, r3
 8009c92:	f000 fcd3 	bl	800a63c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c96:	6978      	ldr	r0, [r7, #20]
 8009c98:	f7ff ff26 	bl	8009ae8 <prvUnlockQueue>
	}
 8009c9c:	bf00      	nop
 8009c9e:	3718      	adds	r7, #24
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b08e      	sub	sp, #56	; 0x38
 8009ca8:	af04      	add	r7, sp, #16
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
 8009cb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10a      	bne.n	8009cce <xTaskCreateStatic+0x2a>
	__asm volatile
 8009cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	623b      	str	r3, [r7, #32]
}
 8009cca:	bf00      	nop
 8009ccc:	e7fe      	b.n	8009ccc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10a      	bne.n	8009cea <xTaskCreateStatic+0x46>
	__asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	61fb      	str	r3, [r7, #28]
}
 8009ce6:	bf00      	nop
 8009ce8:	e7fe      	b.n	8009ce8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009cea:	23bc      	movs	r3, #188	; 0xbc
 8009cec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	2bbc      	cmp	r3, #188	; 0xbc
 8009cf2:	d00a      	beq.n	8009d0a <xTaskCreateStatic+0x66>
	__asm volatile
 8009cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf8:	f383 8811 	msr	BASEPRI, r3
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	61bb      	str	r3, [r7, #24]
}
 8009d06:	bf00      	nop
 8009d08:	e7fe      	b.n	8009d08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d01e      	beq.n	8009d50 <xTaskCreateStatic+0xac>
 8009d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d01b      	beq.n	8009d50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d24:	2202      	movs	r2, #2
 8009d26:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	9303      	str	r3, [sp, #12]
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d30:	9302      	str	r3, [sp, #8]
 8009d32:	f107 0314 	add.w	r3, r7, #20
 8009d36:	9301      	str	r3, [sp, #4]
 8009d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3a:	9300      	str	r3, [sp, #0]
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	68b9      	ldr	r1, [r7, #8]
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f000 f850 	bl	8009de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d4a:	f000 f8f3 	bl	8009f34 <prvAddNewTaskToReadyList>
 8009d4e:	e001      	b.n	8009d54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009d50:	2300      	movs	r3, #0
 8009d52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d54:	697b      	ldr	r3, [r7, #20]
	}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3728      	adds	r7, #40	; 0x28
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b08c      	sub	sp, #48	; 0x30
 8009d62:	af04      	add	r7, sp, #16
 8009d64:	60f8      	str	r0, [r7, #12]
 8009d66:	60b9      	str	r1, [r7, #8]
 8009d68:	603b      	str	r3, [r7, #0]
 8009d6a:	4613      	mov	r3, r2
 8009d6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d6e:	88fb      	ldrh	r3, [r7, #6]
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	4618      	mov	r0, r3
 8009d74:	f001 fce0 	bl	800b738 <pvPortMalloc>
 8009d78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00e      	beq.n	8009d9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d80:	20bc      	movs	r0, #188	; 0xbc
 8009d82:	f001 fcd9 	bl	800b738 <pvPortMalloc>
 8009d86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d003      	beq.n	8009d96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	697a      	ldr	r2, [r7, #20]
 8009d92:	631a      	str	r2, [r3, #48]	; 0x30
 8009d94:	e005      	b.n	8009da2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d96:	6978      	ldr	r0, [r7, #20]
 8009d98:	f001 fd9a 	bl	800b8d0 <vPortFree>
 8009d9c:	e001      	b.n	8009da2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d017      	beq.n	8009dd8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009da8:	69fb      	ldr	r3, [r7, #28]
 8009daa:	2200      	movs	r2, #0
 8009dac:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009db0:	88fa      	ldrh	r2, [r7, #6]
 8009db2:	2300      	movs	r3, #0
 8009db4:	9303      	str	r3, [sp, #12]
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	9302      	str	r3, [sp, #8]
 8009dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbc:	9301      	str	r3, [sp, #4]
 8009dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc0:	9300      	str	r3, [sp, #0]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	68b9      	ldr	r1, [r7, #8]
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f000 f80e 	bl	8009de8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009dcc:	69f8      	ldr	r0, [r7, #28]
 8009dce:	f000 f8b1 	bl	8009f34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	61bb      	str	r3, [r7, #24]
 8009dd6:	e002      	b.n	8009dde <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ddc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009dde:	69bb      	ldr	r3, [r7, #24]
	}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3720      	adds	r7, #32
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b088      	sub	sp, #32
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
 8009df4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	461a      	mov	r2, r3
 8009e00:	21a5      	movs	r1, #165	; 0xa5
 8009e02:	f002 f933 	bl	800c06c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009e10:	3b01      	subs	r3, #1
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4413      	add	r3, r2
 8009e16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	f023 0307 	bic.w	r3, r3, #7
 8009e1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	f003 0307 	and.w	r3, r3, #7
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00a      	beq.n	8009e40 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2e:	f383 8811 	msr	BASEPRI, r3
 8009e32:	f3bf 8f6f 	isb	sy
 8009e36:	f3bf 8f4f 	dsb	sy
 8009e3a:	617b      	str	r3, [r7, #20]
}
 8009e3c:	bf00      	nop
 8009e3e:	e7fe      	b.n	8009e3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d01f      	beq.n	8009e86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e46:	2300      	movs	r3, #0
 8009e48:	61fb      	str	r3, [r7, #28]
 8009e4a:	e012      	b.n	8009e72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e4c:	68ba      	ldr	r2, [r7, #8]
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	4413      	add	r3, r2
 8009e52:	7819      	ldrb	r1, [r3, #0]
 8009e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	4413      	add	r3, r2
 8009e5a:	3334      	adds	r3, #52	; 0x34
 8009e5c:	460a      	mov	r2, r1
 8009e5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e60:	68ba      	ldr	r2, [r7, #8]
 8009e62:	69fb      	ldr	r3, [r7, #28]
 8009e64:	4413      	add	r3, r2
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d006      	beq.n	8009e7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	61fb      	str	r3, [r7, #28]
 8009e72:	69fb      	ldr	r3, [r7, #28]
 8009e74:	2b0f      	cmp	r3, #15
 8009e76:	d9e9      	bls.n	8009e4c <prvInitialiseNewTask+0x64>
 8009e78:	e000      	b.n	8009e7c <prvInitialiseNewTask+0x94>
			{
				break;
 8009e7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e84:	e003      	b.n	8009e8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e90:	2b37      	cmp	r3, #55	; 0x37
 8009e92:	d901      	bls.n	8009e98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e94:	2337      	movs	r3, #55	; 0x37
 8009e96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ea2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	3304      	adds	r3, #4
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7ff f978 	bl	80091a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb6:	3318      	adds	r3, #24
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7ff f973 	bl	80091a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ec2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ecc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ed2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee6:	3354      	adds	r3, #84	; 0x54
 8009ee8:	2260      	movs	r2, #96	; 0x60
 8009eea:	2100      	movs	r1, #0
 8009eec:	4618      	mov	r0, r3
 8009eee:	f002 f8bd 	bl	800c06c <memset>
 8009ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef4:	4a0c      	ldr	r2, [pc, #48]	; (8009f28 <prvInitialiseNewTask+0x140>)
 8009ef6:	659a      	str	r2, [r3, #88]	; 0x58
 8009ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efa:	4a0c      	ldr	r2, [pc, #48]	; (8009f2c <prvInitialiseNewTask+0x144>)
 8009efc:	65da      	str	r2, [r3, #92]	; 0x5c
 8009efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f00:	4a0b      	ldr	r2, [pc, #44]	; (8009f30 <prvInitialiseNewTask+0x148>)
 8009f02:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f04:	683a      	ldr	r2, [r7, #0]
 8009f06:	68f9      	ldr	r1, [r7, #12]
 8009f08:	69b8      	ldr	r0, [r7, #24]
 8009f0a:	f001 f9c3 	bl	800b294 <pxPortInitialiseStack>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f12:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d002      	beq.n	8009f20 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f1e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f20:	bf00      	nop
 8009f22:	3720      	adds	r7, #32
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	08011334 	.word	0x08011334
 8009f2c:	08011354 	.word	0x08011354
 8009f30:	08011314 	.word	0x08011314

08009f34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f3c:	f001 fada 	bl	800b4f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f40:	4b2d      	ldr	r3, [pc, #180]	; (8009ff8 <prvAddNewTaskToReadyList+0xc4>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	3301      	adds	r3, #1
 8009f46:	4a2c      	ldr	r2, [pc, #176]	; (8009ff8 <prvAddNewTaskToReadyList+0xc4>)
 8009f48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f4a:	4b2c      	ldr	r3, [pc, #176]	; (8009ffc <prvAddNewTaskToReadyList+0xc8>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d109      	bne.n	8009f66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f52:	4a2a      	ldr	r2, [pc, #168]	; (8009ffc <prvAddNewTaskToReadyList+0xc8>)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f58:	4b27      	ldr	r3, [pc, #156]	; (8009ff8 <prvAddNewTaskToReadyList+0xc4>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d110      	bne.n	8009f82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f60:	f000 fc98 	bl	800a894 <prvInitialiseTaskLists>
 8009f64:	e00d      	b.n	8009f82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f66:	4b26      	ldr	r3, [pc, #152]	; (800a000 <prvAddNewTaskToReadyList+0xcc>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d109      	bne.n	8009f82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f6e:	4b23      	ldr	r3, [pc, #140]	; (8009ffc <prvAddNewTaskToReadyList+0xc8>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d802      	bhi.n	8009f82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f7c:	4a1f      	ldr	r2, [pc, #124]	; (8009ffc <prvAddNewTaskToReadyList+0xc8>)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f82:	4b20      	ldr	r3, [pc, #128]	; (800a004 <prvAddNewTaskToReadyList+0xd0>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	3301      	adds	r3, #1
 8009f88:	4a1e      	ldr	r2, [pc, #120]	; (800a004 <prvAddNewTaskToReadyList+0xd0>)
 8009f8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f8c:	4b1d      	ldr	r3, [pc, #116]	; (800a004 <prvAddNewTaskToReadyList+0xd0>)
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f98:	4b1b      	ldr	r3, [pc, #108]	; (800a008 <prvAddNewTaskToReadyList+0xd4>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d903      	bls.n	8009fa8 <prvAddNewTaskToReadyList+0x74>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa4:	4a18      	ldr	r2, [pc, #96]	; (800a008 <prvAddNewTaskToReadyList+0xd4>)
 8009fa6:	6013      	str	r3, [r2, #0]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fac:	4613      	mov	r3, r2
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	4413      	add	r3, r2
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	4a15      	ldr	r2, [pc, #84]	; (800a00c <prvAddNewTaskToReadyList+0xd8>)
 8009fb6:	441a      	add	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	3304      	adds	r3, #4
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	4610      	mov	r0, r2
 8009fc0:	f7ff f8fd 	bl	80091be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009fc4:	f001 fac6 	bl	800b554 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009fc8:	4b0d      	ldr	r3, [pc, #52]	; (800a000 <prvAddNewTaskToReadyList+0xcc>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00e      	beq.n	8009fee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009fd0:	4b0a      	ldr	r3, [pc, #40]	; (8009ffc <prvAddNewTaskToReadyList+0xc8>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d207      	bcs.n	8009fee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009fde:	4b0c      	ldr	r3, [pc, #48]	; (800a010 <prvAddNewTaskToReadyList+0xdc>)
 8009fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fe4:	601a      	str	r2, [r3, #0]
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fee:	bf00      	nop
 8009ff0:	3708      	adds	r7, #8
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	20001118 	.word	0x20001118
 8009ffc:	20000c44 	.word	0x20000c44
 800a000:	20001124 	.word	0x20001124
 800a004:	20001134 	.word	0x20001134
 800a008:	20001120 	.word	0x20001120
 800a00c:	20000c48 	.word	0x20000c48
 800a010:	e000ed04 	.word	0xe000ed04

0800a014 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a01c:	f001 fa6a 	bl	800b4f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d102      	bne.n	800a02c <vTaskDelete+0x18>
 800a026:	4b2c      	ldr	r3, [pc, #176]	; (800a0d8 <vTaskDelete+0xc4>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	e000      	b.n	800a02e <vTaskDelete+0x1a>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	3304      	adds	r3, #4
 800a034:	4618      	mov	r0, r3
 800a036:	f7ff f91f 	bl	8009278 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d004      	beq.n	800a04c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	3318      	adds	r3, #24
 800a046:	4618      	mov	r0, r3
 800a048:	f7ff f916 	bl	8009278 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800a04c:	4b23      	ldr	r3, [pc, #140]	; (800a0dc <vTaskDelete+0xc8>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	3301      	adds	r3, #1
 800a052:	4a22      	ldr	r2, [pc, #136]	; (800a0dc <vTaskDelete+0xc8>)
 800a054:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800a056:	4b20      	ldr	r3, [pc, #128]	; (800a0d8 <vTaskDelete+0xc4>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	429a      	cmp	r2, r3
 800a05e:	d10b      	bne.n	800a078 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	3304      	adds	r3, #4
 800a064:	4619      	mov	r1, r3
 800a066:	481e      	ldr	r0, [pc, #120]	; (800a0e0 <vTaskDelete+0xcc>)
 800a068:	f7ff f8a9 	bl	80091be <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800a06c:	4b1d      	ldr	r3, [pc, #116]	; (800a0e4 <vTaskDelete+0xd0>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	3301      	adds	r3, #1
 800a072:	4a1c      	ldr	r2, [pc, #112]	; (800a0e4 <vTaskDelete+0xd0>)
 800a074:	6013      	str	r3, [r2, #0]
 800a076:	e009      	b.n	800a08c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800a078:	4b1b      	ldr	r3, [pc, #108]	; (800a0e8 <vTaskDelete+0xd4>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	3b01      	subs	r3, #1
 800a07e:	4a1a      	ldr	r2, [pc, #104]	; (800a0e8 <vTaskDelete+0xd4>)
 800a080:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f000 fc74 	bl	800a970 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800a088:	f000 fca6 	bl	800a9d8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800a08c:	f001 fa62 	bl	800b554 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800a090:	4b16      	ldr	r3, [pc, #88]	; (800a0ec <vTaskDelete+0xd8>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d01b      	beq.n	800a0d0 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800a098:	4b0f      	ldr	r3, [pc, #60]	; (800a0d8 <vTaskDelete+0xc4>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d116      	bne.n	800a0d0 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800a0a2:	4b13      	ldr	r3, [pc, #76]	; (800a0f0 <vTaskDelete+0xdc>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00a      	beq.n	800a0c0 <vTaskDelete+0xac>
	__asm volatile
 800a0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ae:	f383 8811 	msr	BASEPRI, r3
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	60bb      	str	r3, [r7, #8]
}
 800a0bc:	bf00      	nop
 800a0be:	e7fe      	b.n	800a0be <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800a0c0:	4b0c      	ldr	r3, [pc, #48]	; (800a0f4 <vTaskDelete+0xe0>)
 800a0c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0c6:	601a      	str	r2, [r3, #0]
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a0d0:	bf00      	nop
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	20000c44 	.word	0x20000c44
 800a0dc:	20001134 	.word	0x20001134
 800a0e0:	200010ec 	.word	0x200010ec
 800a0e4:	20001100 	.word	0x20001100
 800a0e8:	20001118 	.word	0x20001118
 800a0ec:	20001124 	.word	0x20001124
 800a0f0:	20001140 	.word	0x20001140
 800a0f4:	e000ed04 	.word	0xe000ed04

0800a0f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b084      	sub	sp, #16
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a100:	2300      	movs	r3, #0
 800a102:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d017      	beq.n	800a13a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a10a:	4b13      	ldr	r3, [pc, #76]	; (800a158 <vTaskDelay+0x60>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00a      	beq.n	800a128 <vTaskDelay+0x30>
	__asm volatile
 800a112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a116:	f383 8811 	msr	BASEPRI, r3
 800a11a:	f3bf 8f6f 	isb	sy
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	60bb      	str	r3, [r7, #8]
}
 800a124:	bf00      	nop
 800a126:	e7fe      	b.n	800a126 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a128:	f000 f88a 	bl	800a240 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a12c:	2100      	movs	r1, #0
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fd0e 	bl	800ab50 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a134:	f000 f892 	bl	800a25c <xTaskResumeAll>
 800a138:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d107      	bne.n	800a150 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a140:	4b06      	ldr	r3, [pc, #24]	; (800a15c <vTaskDelay+0x64>)
 800a142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a146:	601a      	str	r2, [r3, #0]
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a150:	bf00      	nop
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	20001140 	.word	0x20001140
 800a15c:	e000ed04 	.word	0xe000ed04

0800a160 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b08a      	sub	sp, #40	; 0x28
 800a164:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a166:	2300      	movs	r3, #0
 800a168:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a16a:	2300      	movs	r3, #0
 800a16c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a16e:	463a      	mov	r2, r7
 800a170:	1d39      	adds	r1, r7, #4
 800a172:	f107 0308 	add.w	r3, r7, #8
 800a176:	4618      	mov	r0, r3
 800a178:	f7fe ffc0 	bl	80090fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a17c:	6839      	ldr	r1, [r7, #0]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	9202      	str	r2, [sp, #8]
 800a184:	9301      	str	r3, [sp, #4]
 800a186:	2300      	movs	r3, #0
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	2300      	movs	r3, #0
 800a18c:	460a      	mov	r2, r1
 800a18e:	4924      	ldr	r1, [pc, #144]	; (800a220 <vTaskStartScheduler+0xc0>)
 800a190:	4824      	ldr	r0, [pc, #144]	; (800a224 <vTaskStartScheduler+0xc4>)
 800a192:	f7ff fd87 	bl	8009ca4 <xTaskCreateStatic>
 800a196:	4603      	mov	r3, r0
 800a198:	4a23      	ldr	r2, [pc, #140]	; (800a228 <vTaskStartScheduler+0xc8>)
 800a19a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a19c:	4b22      	ldr	r3, [pc, #136]	; (800a228 <vTaskStartScheduler+0xc8>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d002      	beq.n	800a1aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	617b      	str	r3, [r7, #20]
 800a1a8:	e001      	b.n	800a1ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d102      	bne.n	800a1ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a1b4:	f000 fd20 	bl	800abf8 <xTimerCreateTimerTask>
 800a1b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d11b      	bne.n	800a1f8 <vTaskStartScheduler+0x98>
	__asm volatile
 800a1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c4:	f383 8811 	msr	BASEPRI, r3
 800a1c8:	f3bf 8f6f 	isb	sy
 800a1cc:	f3bf 8f4f 	dsb	sy
 800a1d0:	613b      	str	r3, [r7, #16]
}
 800a1d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a1d4:	4b15      	ldr	r3, [pc, #84]	; (800a22c <vTaskStartScheduler+0xcc>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	3354      	adds	r3, #84	; 0x54
 800a1da:	4a15      	ldr	r2, [pc, #84]	; (800a230 <vTaskStartScheduler+0xd0>)
 800a1dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a1de:	4b15      	ldr	r3, [pc, #84]	; (800a234 <vTaskStartScheduler+0xd4>)
 800a1e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a1e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a1e6:	4b14      	ldr	r3, [pc, #80]	; (800a238 <vTaskStartScheduler+0xd8>)
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a1ec:	4b13      	ldr	r3, [pc, #76]	; (800a23c <vTaskStartScheduler+0xdc>)
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a1f2:	f001 f8dd 	bl	800b3b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a1f6:	e00e      	b.n	800a216 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1fe:	d10a      	bne.n	800a216 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a204:	f383 8811 	msr	BASEPRI, r3
 800a208:	f3bf 8f6f 	isb	sy
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	60fb      	str	r3, [r7, #12]
}
 800a212:	bf00      	nop
 800a214:	e7fe      	b.n	800a214 <vTaskStartScheduler+0xb4>
}
 800a216:	bf00      	nop
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	080111ec 	.word	0x080111ec
 800a224:	0800a865 	.word	0x0800a865
 800a228:	2000113c 	.word	0x2000113c
 800a22c:	20000c44 	.word	0x20000c44
 800a230:	20000020 	.word	0x20000020
 800a234:	20001138 	.word	0x20001138
 800a238:	20001124 	.word	0x20001124
 800a23c:	2000111c 	.word	0x2000111c

0800a240 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a240:	b480      	push	{r7}
 800a242:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a244:	4b04      	ldr	r3, [pc, #16]	; (800a258 <vTaskSuspendAll+0x18>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	3301      	adds	r3, #1
 800a24a:	4a03      	ldr	r2, [pc, #12]	; (800a258 <vTaskSuspendAll+0x18>)
 800a24c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a24e:	bf00      	nop
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr
 800a258:	20001140 	.word	0x20001140

0800a25c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a262:	2300      	movs	r3, #0
 800a264:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a266:	2300      	movs	r3, #0
 800a268:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a26a:	4b42      	ldr	r3, [pc, #264]	; (800a374 <xTaskResumeAll+0x118>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10a      	bne.n	800a288 <xTaskResumeAll+0x2c>
	__asm volatile
 800a272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a276:	f383 8811 	msr	BASEPRI, r3
 800a27a:	f3bf 8f6f 	isb	sy
 800a27e:	f3bf 8f4f 	dsb	sy
 800a282:	603b      	str	r3, [r7, #0]
}
 800a284:	bf00      	nop
 800a286:	e7fe      	b.n	800a286 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a288:	f001 f934 	bl	800b4f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a28c:	4b39      	ldr	r3, [pc, #228]	; (800a374 <xTaskResumeAll+0x118>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	3b01      	subs	r3, #1
 800a292:	4a38      	ldr	r2, [pc, #224]	; (800a374 <xTaskResumeAll+0x118>)
 800a294:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a296:	4b37      	ldr	r3, [pc, #220]	; (800a374 <xTaskResumeAll+0x118>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d162      	bne.n	800a364 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a29e:	4b36      	ldr	r3, [pc, #216]	; (800a378 <xTaskResumeAll+0x11c>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d05e      	beq.n	800a364 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2a6:	e02f      	b.n	800a308 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2a8:	4b34      	ldr	r3, [pc, #208]	; (800a37c <xTaskResumeAll+0x120>)
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	3318      	adds	r3, #24
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f7fe ffdf 	bl	8009278 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	3304      	adds	r3, #4
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7fe ffda 	bl	8009278 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2c8:	4b2d      	ldr	r3, [pc, #180]	; (800a380 <xTaskResumeAll+0x124>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d903      	bls.n	800a2d8 <xTaskResumeAll+0x7c>
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d4:	4a2a      	ldr	r2, [pc, #168]	; (800a380 <xTaskResumeAll+0x124>)
 800a2d6:	6013      	str	r3, [r2, #0]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2dc:	4613      	mov	r3, r2
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	4413      	add	r3, r2
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	4a27      	ldr	r2, [pc, #156]	; (800a384 <xTaskResumeAll+0x128>)
 800a2e6:	441a      	add	r2, r3
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	4610      	mov	r0, r2
 800a2f0:	f7fe ff65 	bl	80091be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f8:	4b23      	ldr	r3, [pc, #140]	; (800a388 <xTaskResumeAll+0x12c>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fe:	429a      	cmp	r2, r3
 800a300:	d302      	bcc.n	800a308 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a302:	4b22      	ldr	r3, [pc, #136]	; (800a38c <xTaskResumeAll+0x130>)
 800a304:	2201      	movs	r2, #1
 800a306:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a308:	4b1c      	ldr	r3, [pc, #112]	; (800a37c <xTaskResumeAll+0x120>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d1cb      	bne.n	800a2a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d001      	beq.n	800a31a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a316:	f000 fb5f 	bl	800a9d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a31a:	4b1d      	ldr	r3, [pc, #116]	; (800a390 <xTaskResumeAll+0x134>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d010      	beq.n	800a348 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a326:	f000 f847 	bl	800a3b8 <xTaskIncrementTick>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d002      	beq.n	800a336 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a330:	4b16      	ldr	r3, [pc, #88]	; (800a38c <xTaskResumeAll+0x130>)
 800a332:	2201      	movs	r2, #1
 800a334:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	3b01      	subs	r3, #1
 800a33a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d1f1      	bne.n	800a326 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a342:	4b13      	ldr	r3, [pc, #76]	; (800a390 <xTaskResumeAll+0x134>)
 800a344:	2200      	movs	r2, #0
 800a346:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a348:	4b10      	ldr	r3, [pc, #64]	; (800a38c <xTaskResumeAll+0x130>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d009      	beq.n	800a364 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a350:	2301      	movs	r3, #1
 800a352:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a354:	4b0f      	ldr	r3, [pc, #60]	; (800a394 <xTaskResumeAll+0x138>)
 800a356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a35a:	601a      	str	r2, [r3, #0]
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a364:	f001 f8f6 	bl	800b554 <vPortExitCritical>

	return xAlreadyYielded;
 800a368:	68bb      	ldr	r3, [r7, #8]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	20001140 	.word	0x20001140
 800a378:	20001118 	.word	0x20001118
 800a37c:	200010d8 	.word	0x200010d8
 800a380:	20001120 	.word	0x20001120
 800a384:	20000c48 	.word	0x20000c48
 800a388:	20000c44 	.word	0x20000c44
 800a38c:	2000112c 	.word	0x2000112c
 800a390:	20001128 	.word	0x20001128
 800a394:	e000ed04 	.word	0xe000ed04

0800a398 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a39e:	4b05      	ldr	r3, [pc, #20]	; (800a3b4 <xTaskGetTickCount+0x1c>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a3a4:	687b      	ldr	r3, [r7, #4]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	370c      	adds	r7, #12
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr
 800a3b2:	bf00      	nop
 800a3b4:	2000111c 	.word	0x2000111c

0800a3b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b086      	sub	sp, #24
 800a3bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3c2:	4b4f      	ldr	r3, [pc, #316]	; (800a500 <xTaskIncrementTick+0x148>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f040 808f 	bne.w	800a4ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a3cc:	4b4d      	ldr	r3, [pc, #308]	; (800a504 <xTaskIncrementTick+0x14c>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a3d4:	4a4b      	ldr	r2, [pc, #300]	; (800a504 <xTaskIncrementTick+0x14c>)
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d120      	bne.n	800a422 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a3e0:	4b49      	ldr	r3, [pc, #292]	; (800a508 <xTaskIncrementTick+0x150>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00a      	beq.n	800a400 <xTaskIncrementTick+0x48>
	__asm volatile
 800a3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ee:	f383 8811 	msr	BASEPRI, r3
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	603b      	str	r3, [r7, #0]
}
 800a3fc:	bf00      	nop
 800a3fe:	e7fe      	b.n	800a3fe <xTaskIncrementTick+0x46>
 800a400:	4b41      	ldr	r3, [pc, #260]	; (800a508 <xTaskIncrementTick+0x150>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	60fb      	str	r3, [r7, #12]
 800a406:	4b41      	ldr	r3, [pc, #260]	; (800a50c <xTaskIncrementTick+0x154>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a3f      	ldr	r2, [pc, #252]	; (800a508 <xTaskIncrementTick+0x150>)
 800a40c:	6013      	str	r3, [r2, #0]
 800a40e:	4a3f      	ldr	r2, [pc, #252]	; (800a50c <xTaskIncrementTick+0x154>)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6013      	str	r3, [r2, #0]
 800a414:	4b3e      	ldr	r3, [pc, #248]	; (800a510 <xTaskIncrementTick+0x158>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	3301      	adds	r3, #1
 800a41a:	4a3d      	ldr	r2, [pc, #244]	; (800a510 <xTaskIncrementTick+0x158>)
 800a41c:	6013      	str	r3, [r2, #0]
 800a41e:	f000 fadb 	bl	800a9d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a422:	4b3c      	ldr	r3, [pc, #240]	; (800a514 <xTaskIncrementTick+0x15c>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	693a      	ldr	r2, [r7, #16]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d349      	bcc.n	800a4c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a42c:	4b36      	ldr	r3, [pc, #216]	; (800a508 <xTaskIncrementTick+0x150>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d104      	bne.n	800a440 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a436:	4b37      	ldr	r3, [pc, #220]	; (800a514 <xTaskIncrementTick+0x15c>)
 800a438:	f04f 32ff 	mov.w	r2, #4294967295
 800a43c:	601a      	str	r2, [r3, #0]
					break;
 800a43e:	e03f      	b.n	800a4c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a440:	4b31      	ldr	r3, [pc, #196]	; (800a508 <xTaskIncrementTick+0x150>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a450:	693a      	ldr	r2, [r7, #16]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	429a      	cmp	r2, r3
 800a456:	d203      	bcs.n	800a460 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a458:	4a2e      	ldr	r2, [pc, #184]	; (800a514 <xTaskIncrementTick+0x15c>)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a45e:	e02f      	b.n	800a4c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	3304      	adds	r3, #4
 800a464:	4618      	mov	r0, r3
 800a466:	f7fe ff07 	bl	8009278 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d004      	beq.n	800a47c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	3318      	adds	r3, #24
 800a476:	4618      	mov	r0, r3
 800a478:	f7fe fefe 	bl	8009278 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a480:	4b25      	ldr	r3, [pc, #148]	; (800a518 <xTaskIncrementTick+0x160>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	429a      	cmp	r2, r3
 800a486:	d903      	bls.n	800a490 <xTaskIncrementTick+0xd8>
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48c:	4a22      	ldr	r2, [pc, #136]	; (800a518 <xTaskIncrementTick+0x160>)
 800a48e:	6013      	str	r3, [r2, #0]
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a494:	4613      	mov	r3, r2
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	4413      	add	r3, r2
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	4a1f      	ldr	r2, [pc, #124]	; (800a51c <xTaskIncrementTick+0x164>)
 800a49e:	441a      	add	r2, r3
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	3304      	adds	r3, #4
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4610      	mov	r0, r2
 800a4a8:	f7fe fe89 	bl	80091be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4b0:	4b1b      	ldr	r3, [pc, #108]	; (800a520 <xTaskIncrementTick+0x168>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d3b8      	bcc.n	800a42c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4be:	e7b5      	b.n	800a42c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a4c0:	4b17      	ldr	r3, [pc, #92]	; (800a520 <xTaskIncrementTick+0x168>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c6:	4915      	ldr	r1, [pc, #84]	; (800a51c <xTaskIncrementTick+0x164>)
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4413      	add	r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	440b      	add	r3, r1
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d901      	bls.n	800a4dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a4dc:	4b11      	ldr	r3, [pc, #68]	; (800a524 <xTaskIncrementTick+0x16c>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d007      	beq.n	800a4f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	617b      	str	r3, [r7, #20]
 800a4e8:	e004      	b.n	800a4f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a4ea:	4b0f      	ldr	r3, [pc, #60]	; (800a528 <xTaskIncrementTick+0x170>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	4a0d      	ldr	r2, [pc, #52]	; (800a528 <xTaskIncrementTick+0x170>)
 800a4f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a4f4:	697b      	ldr	r3, [r7, #20]
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3718      	adds	r7, #24
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	20001140 	.word	0x20001140
 800a504:	2000111c 	.word	0x2000111c
 800a508:	200010d0 	.word	0x200010d0
 800a50c:	200010d4 	.word	0x200010d4
 800a510:	20001130 	.word	0x20001130
 800a514:	20001138 	.word	0x20001138
 800a518:	20001120 	.word	0x20001120
 800a51c:	20000c48 	.word	0x20000c48
 800a520:	20000c44 	.word	0x20000c44
 800a524:	2000112c 	.word	0x2000112c
 800a528:	20001128 	.word	0x20001128

0800a52c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a52c:	b480      	push	{r7}
 800a52e:	b085      	sub	sp, #20
 800a530:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a532:	4b2a      	ldr	r3, [pc, #168]	; (800a5dc <vTaskSwitchContext+0xb0>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a53a:	4b29      	ldr	r3, [pc, #164]	; (800a5e0 <vTaskSwitchContext+0xb4>)
 800a53c:	2201      	movs	r2, #1
 800a53e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a540:	e046      	b.n	800a5d0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a542:	4b27      	ldr	r3, [pc, #156]	; (800a5e0 <vTaskSwitchContext+0xb4>)
 800a544:	2200      	movs	r2, #0
 800a546:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a548:	4b26      	ldr	r3, [pc, #152]	; (800a5e4 <vTaskSwitchContext+0xb8>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	60fb      	str	r3, [r7, #12]
 800a54e:	e010      	b.n	800a572 <vTaskSwitchContext+0x46>
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d10a      	bne.n	800a56c <vTaskSwitchContext+0x40>
	__asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55a:	f383 8811 	msr	BASEPRI, r3
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	607b      	str	r3, [r7, #4]
}
 800a568:	bf00      	nop
 800a56a:	e7fe      	b.n	800a56a <vTaskSwitchContext+0x3e>
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	3b01      	subs	r3, #1
 800a570:	60fb      	str	r3, [r7, #12]
 800a572:	491d      	ldr	r1, [pc, #116]	; (800a5e8 <vTaskSwitchContext+0xbc>)
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	4613      	mov	r3, r2
 800a578:	009b      	lsls	r3, r3, #2
 800a57a:	4413      	add	r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	440b      	add	r3, r1
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d0e4      	beq.n	800a550 <vTaskSwitchContext+0x24>
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	4613      	mov	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4a15      	ldr	r2, [pc, #84]	; (800a5e8 <vTaskSwitchContext+0xbc>)
 800a592:	4413      	add	r3, r2
 800a594:	60bb      	str	r3, [r7, #8]
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	685a      	ldr	r2, [r3, #4]
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	605a      	str	r2, [r3, #4]
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	685a      	ldr	r2, [r3, #4]
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	3308      	adds	r3, #8
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d104      	bne.n	800a5b6 <vTaskSwitchContext+0x8a>
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	685a      	ldr	r2, [r3, #4]
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	605a      	str	r2, [r3, #4]
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	685b      	ldr	r3, [r3, #4]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	4a0b      	ldr	r2, [pc, #44]	; (800a5ec <vTaskSwitchContext+0xc0>)
 800a5be:	6013      	str	r3, [r2, #0]
 800a5c0:	4a08      	ldr	r2, [pc, #32]	; (800a5e4 <vTaskSwitchContext+0xb8>)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a5c6:	4b09      	ldr	r3, [pc, #36]	; (800a5ec <vTaskSwitchContext+0xc0>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	3354      	adds	r3, #84	; 0x54
 800a5cc:	4a08      	ldr	r2, [pc, #32]	; (800a5f0 <vTaskSwitchContext+0xc4>)
 800a5ce:	6013      	str	r3, [r2, #0]
}
 800a5d0:	bf00      	nop
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr
 800a5dc:	20001140 	.word	0x20001140
 800a5e0:	2000112c 	.word	0x2000112c
 800a5e4:	20001120 	.word	0x20001120
 800a5e8:	20000c48 	.word	0x20000c48
 800a5ec:	20000c44 	.word	0x20000c44
 800a5f0:	20000020 	.word	0x20000020

0800a5f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d10a      	bne.n	800a61a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a608:	f383 8811 	msr	BASEPRI, r3
 800a60c:	f3bf 8f6f 	isb	sy
 800a610:	f3bf 8f4f 	dsb	sy
 800a614:	60fb      	str	r3, [r7, #12]
}
 800a616:	bf00      	nop
 800a618:	e7fe      	b.n	800a618 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a61a:	4b07      	ldr	r3, [pc, #28]	; (800a638 <vTaskPlaceOnEventList+0x44>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	3318      	adds	r3, #24
 800a620:	4619      	mov	r1, r3
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f7fe fdef 	bl	8009206 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a628:	2101      	movs	r1, #1
 800a62a:	6838      	ldr	r0, [r7, #0]
 800a62c:	f000 fa90 	bl	800ab50 <prvAddCurrentTaskToDelayedList>
}
 800a630:	bf00      	nop
 800a632:	3710      	adds	r7, #16
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	20000c44 	.word	0x20000c44

0800a63c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10a      	bne.n	800a664 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	617b      	str	r3, [r7, #20]
}
 800a660:	bf00      	nop
 800a662:	e7fe      	b.n	800a662 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a664:	4b0a      	ldr	r3, [pc, #40]	; (800a690 <vTaskPlaceOnEventListRestricted+0x54>)
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	3318      	adds	r3, #24
 800a66a:	4619      	mov	r1, r3
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f7fe fda6 	bl	80091be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d002      	beq.n	800a67e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a678:	f04f 33ff 	mov.w	r3, #4294967295
 800a67c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a67e:	6879      	ldr	r1, [r7, #4]
 800a680:	68b8      	ldr	r0, [r7, #8]
 800a682:	f000 fa65 	bl	800ab50 <prvAddCurrentTaskToDelayedList>
	}
 800a686:	bf00      	nop
 800a688:	3718      	adds	r7, #24
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}
 800a68e:	bf00      	nop
 800a690:	20000c44 	.word	0x20000c44

0800a694 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b086      	sub	sp, #24
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	68db      	ldr	r3, [r3, #12]
 800a6a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10a      	bne.n	800a6c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6ae:	f383 8811 	msr	BASEPRI, r3
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	60fb      	str	r3, [r7, #12]
}
 800a6bc:	bf00      	nop
 800a6be:	e7fe      	b.n	800a6be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	3318      	adds	r3, #24
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7fe fdd7 	bl	8009278 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6ca:	4b1e      	ldr	r3, [pc, #120]	; (800a744 <xTaskRemoveFromEventList+0xb0>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d11d      	bne.n	800a70e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	3304      	adds	r3, #4
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7fe fdce 	bl	8009278 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e0:	4b19      	ldr	r3, [pc, #100]	; (800a748 <xTaskRemoveFromEventList+0xb4>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	d903      	bls.n	800a6f0 <xTaskRemoveFromEventList+0x5c>
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ec:	4a16      	ldr	r2, [pc, #88]	; (800a748 <xTaskRemoveFromEventList+0xb4>)
 800a6ee:	6013      	str	r3, [r2, #0]
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	009b      	lsls	r3, r3, #2
 800a6f8:	4413      	add	r3, r2
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4a13      	ldr	r2, [pc, #76]	; (800a74c <xTaskRemoveFromEventList+0xb8>)
 800a6fe:	441a      	add	r2, r3
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	3304      	adds	r3, #4
 800a704:	4619      	mov	r1, r3
 800a706:	4610      	mov	r0, r2
 800a708:	f7fe fd59 	bl	80091be <vListInsertEnd>
 800a70c:	e005      	b.n	800a71a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	3318      	adds	r3, #24
 800a712:	4619      	mov	r1, r3
 800a714:	480e      	ldr	r0, [pc, #56]	; (800a750 <xTaskRemoveFromEventList+0xbc>)
 800a716:	f7fe fd52 	bl	80091be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a71e:	4b0d      	ldr	r3, [pc, #52]	; (800a754 <xTaskRemoveFromEventList+0xc0>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a724:	429a      	cmp	r2, r3
 800a726:	d905      	bls.n	800a734 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a728:	2301      	movs	r3, #1
 800a72a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a72c:	4b0a      	ldr	r3, [pc, #40]	; (800a758 <xTaskRemoveFromEventList+0xc4>)
 800a72e:	2201      	movs	r2, #1
 800a730:	601a      	str	r2, [r3, #0]
 800a732:	e001      	b.n	800a738 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a734:	2300      	movs	r3, #0
 800a736:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a738:	697b      	ldr	r3, [r7, #20]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3718      	adds	r7, #24
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	20001140 	.word	0x20001140
 800a748:	20001120 	.word	0x20001120
 800a74c:	20000c48 	.word	0x20000c48
 800a750:	200010d8 	.word	0x200010d8
 800a754:	20000c44 	.word	0x20000c44
 800a758:	2000112c 	.word	0x2000112c

0800a75c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a764:	4b06      	ldr	r3, [pc, #24]	; (800a780 <vTaskInternalSetTimeOutState+0x24>)
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a76c:	4b05      	ldr	r3, [pc, #20]	; (800a784 <vTaskInternalSetTimeOutState+0x28>)
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	605a      	str	r2, [r3, #4]
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr
 800a780:	20001130 	.word	0x20001130
 800a784:	2000111c 	.word	0x2000111c

0800a788 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b088      	sub	sp, #32
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d10a      	bne.n	800a7ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79c:	f383 8811 	msr	BASEPRI, r3
 800a7a0:	f3bf 8f6f 	isb	sy
 800a7a4:	f3bf 8f4f 	dsb	sy
 800a7a8:	613b      	str	r3, [r7, #16]
}
 800a7aa:	bf00      	nop
 800a7ac:	e7fe      	b.n	800a7ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d10a      	bne.n	800a7ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b8:	f383 8811 	msr	BASEPRI, r3
 800a7bc:	f3bf 8f6f 	isb	sy
 800a7c0:	f3bf 8f4f 	dsb	sy
 800a7c4:	60fb      	str	r3, [r7, #12]
}
 800a7c6:	bf00      	nop
 800a7c8:	e7fe      	b.n	800a7c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a7ca:	f000 fe93 	bl	800b4f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a7ce:	4b1d      	ldr	r3, [pc, #116]	; (800a844 <xTaskCheckForTimeOut+0xbc>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	69ba      	ldr	r2, [r7, #24]
 800a7da:	1ad3      	subs	r3, r2, r3
 800a7dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e6:	d102      	bne.n	800a7ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	61fb      	str	r3, [r7, #28]
 800a7ec:	e023      	b.n	800a836 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	4b15      	ldr	r3, [pc, #84]	; (800a848 <xTaskCheckForTimeOut+0xc0>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d007      	beq.n	800a80a <xTaskCheckForTimeOut+0x82>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	69ba      	ldr	r2, [r7, #24]
 800a800:	429a      	cmp	r2, r3
 800a802:	d302      	bcc.n	800a80a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a804:	2301      	movs	r3, #1
 800a806:	61fb      	str	r3, [r7, #28]
 800a808:	e015      	b.n	800a836 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	429a      	cmp	r2, r3
 800a812:	d20b      	bcs.n	800a82c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	1ad2      	subs	r2, r2, r3
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7ff ff9b 	bl	800a75c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a826:	2300      	movs	r3, #0
 800a828:	61fb      	str	r3, [r7, #28]
 800a82a:	e004      	b.n	800a836 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	2200      	movs	r2, #0
 800a830:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a832:	2301      	movs	r3, #1
 800a834:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a836:	f000 fe8d 	bl	800b554 <vPortExitCritical>

	return xReturn;
 800a83a:	69fb      	ldr	r3, [r7, #28]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3720      	adds	r7, #32
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}
 800a844:	2000111c 	.word	0x2000111c
 800a848:	20001130 	.word	0x20001130

0800a84c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a84c:	b480      	push	{r7}
 800a84e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a850:	4b03      	ldr	r3, [pc, #12]	; (800a860 <vTaskMissedYield+0x14>)
 800a852:	2201      	movs	r2, #1
 800a854:	601a      	str	r2, [r3, #0]
}
 800a856:	bf00      	nop
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr
 800a860:	2000112c 	.word	0x2000112c

0800a864 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a86c:	f000 f852 	bl	800a914 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a870:	4b06      	ldr	r3, [pc, #24]	; (800a88c <prvIdleTask+0x28>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d9f9      	bls.n	800a86c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a878:	4b05      	ldr	r3, [pc, #20]	; (800a890 <prvIdleTask+0x2c>)
 800a87a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a87e:	601a      	str	r2, [r3, #0]
 800a880:	f3bf 8f4f 	dsb	sy
 800a884:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a888:	e7f0      	b.n	800a86c <prvIdleTask+0x8>
 800a88a:	bf00      	nop
 800a88c:	20000c48 	.word	0x20000c48
 800a890:	e000ed04 	.word	0xe000ed04

0800a894 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a89a:	2300      	movs	r3, #0
 800a89c:	607b      	str	r3, [r7, #4]
 800a89e:	e00c      	b.n	800a8ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	4413      	add	r3, r2
 800a8a8:	009b      	lsls	r3, r3, #2
 800a8aa:	4a12      	ldr	r2, [pc, #72]	; (800a8f4 <prvInitialiseTaskLists+0x60>)
 800a8ac:	4413      	add	r3, r2
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7fe fc58 	bl	8009164 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	607b      	str	r3, [r7, #4]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2b37      	cmp	r3, #55	; 0x37
 800a8be:	d9ef      	bls.n	800a8a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a8c0:	480d      	ldr	r0, [pc, #52]	; (800a8f8 <prvInitialiseTaskLists+0x64>)
 800a8c2:	f7fe fc4f 	bl	8009164 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a8c6:	480d      	ldr	r0, [pc, #52]	; (800a8fc <prvInitialiseTaskLists+0x68>)
 800a8c8:	f7fe fc4c 	bl	8009164 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a8cc:	480c      	ldr	r0, [pc, #48]	; (800a900 <prvInitialiseTaskLists+0x6c>)
 800a8ce:	f7fe fc49 	bl	8009164 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a8d2:	480c      	ldr	r0, [pc, #48]	; (800a904 <prvInitialiseTaskLists+0x70>)
 800a8d4:	f7fe fc46 	bl	8009164 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a8d8:	480b      	ldr	r0, [pc, #44]	; (800a908 <prvInitialiseTaskLists+0x74>)
 800a8da:	f7fe fc43 	bl	8009164 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a8de:	4b0b      	ldr	r3, [pc, #44]	; (800a90c <prvInitialiseTaskLists+0x78>)
 800a8e0:	4a05      	ldr	r2, [pc, #20]	; (800a8f8 <prvInitialiseTaskLists+0x64>)
 800a8e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a8e4:	4b0a      	ldr	r3, [pc, #40]	; (800a910 <prvInitialiseTaskLists+0x7c>)
 800a8e6:	4a05      	ldr	r2, [pc, #20]	; (800a8fc <prvInitialiseTaskLists+0x68>)
 800a8e8:	601a      	str	r2, [r3, #0]
}
 800a8ea:	bf00      	nop
 800a8ec:	3708      	adds	r7, #8
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	20000c48 	.word	0x20000c48
 800a8f8:	200010a8 	.word	0x200010a8
 800a8fc:	200010bc 	.word	0x200010bc
 800a900:	200010d8 	.word	0x200010d8
 800a904:	200010ec 	.word	0x200010ec
 800a908:	20001104 	.word	0x20001104
 800a90c:	200010d0 	.word	0x200010d0
 800a910:	200010d4 	.word	0x200010d4

0800a914 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b082      	sub	sp, #8
 800a918:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a91a:	e019      	b.n	800a950 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a91c:	f000 fdea 	bl	800b4f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a920:	4b10      	ldr	r3, [pc, #64]	; (800a964 <prvCheckTasksWaitingTermination+0x50>)
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	3304      	adds	r3, #4
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7fe fca3 	bl	8009278 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a932:	4b0d      	ldr	r3, [pc, #52]	; (800a968 <prvCheckTasksWaitingTermination+0x54>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	3b01      	subs	r3, #1
 800a938:	4a0b      	ldr	r2, [pc, #44]	; (800a968 <prvCheckTasksWaitingTermination+0x54>)
 800a93a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a93c:	4b0b      	ldr	r3, [pc, #44]	; (800a96c <prvCheckTasksWaitingTermination+0x58>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	3b01      	subs	r3, #1
 800a942:	4a0a      	ldr	r2, [pc, #40]	; (800a96c <prvCheckTasksWaitingTermination+0x58>)
 800a944:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a946:	f000 fe05 	bl	800b554 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f000 f810 	bl	800a970 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a950:	4b06      	ldr	r3, [pc, #24]	; (800a96c <prvCheckTasksWaitingTermination+0x58>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d1e1      	bne.n	800a91c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a958:	bf00      	nop
 800a95a:	bf00      	nop
 800a95c:	3708      	adds	r7, #8
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	200010ec 	.word	0x200010ec
 800a968:	20001118 	.word	0x20001118
 800a96c:	20001100 	.word	0x20001100

0800a970 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	3354      	adds	r3, #84	; 0x54
 800a97c:	4618      	mov	r0, r3
 800a97e:	f002 fb1d 	bl	800cfbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d108      	bne.n	800a99e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a990:	4618      	mov	r0, r3
 800a992:	f000 ff9d 	bl	800b8d0 <vPortFree>
				vPortFree( pxTCB );
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 ff9a 	bl	800b8d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a99c:	e018      	b.n	800a9d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d103      	bne.n	800a9b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 ff91 	bl	800b8d0 <vPortFree>
	}
 800a9ae:	e00f      	b.n	800a9d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d00a      	beq.n	800a9d0 <prvDeleteTCB+0x60>
	__asm volatile
 800a9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9be:	f383 8811 	msr	BASEPRI, r3
 800a9c2:	f3bf 8f6f 	isb	sy
 800a9c6:	f3bf 8f4f 	dsb	sy
 800a9ca:	60fb      	str	r3, [r7, #12]
}
 800a9cc:	bf00      	nop
 800a9ce:	e7fe      	b.n	800a9ce <prvDeleteTCB+0x5e>
	}
 800a9d0:	bf00      	nop
 800a9d2:	3710      	adds	r7, #16
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9de:	4b0c      	ldr	r3, [pc, #48]	; (800aa10 <prvResetNextTaskUnblockTime+0x38>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d104      	bne.n	800a9f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a9e8:	4b0a      	ldr	r3, [pc, #40]	; (800aa14 <prvResetNextTaskUnblockTime+0x3c>)
 800a9ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a9f0:	e008      	b.n	800aa04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9f2:	4b07      	ldr	r3, [pc, #28]	; (800aa10 <prvResetNextTaskUnblockTime+0x38>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	68db      	ldr	r3, [r3, #12]
 800a9fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	4a04      	ldr	r2, [pc, #16]	; (800aa14 <prvResetNextTaskUnblockTime+0x3c>)
 800aa02:	6013      	str	r3, [r2, #0]
}
 800aa04:	bf00      	nop
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr
 800aa10:	200010d0 	.word	0x200010d0
 800aa14:	20001138 	.word	0x20001138

0800aa18 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800aa1e:	4b05      	ldr	r3, [pc, #20]	; (800aa34 <xTaskGetCurrentTaskHandle+0x1c>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	607b      	str	r3, [r7, #4]

		return xReturn;
 800aa24:	687b      	ldr	r3, [r7, #4]
	}
 800aa26:	4618      	mov	r0, r3
 800aa28:	370c      	adds	r7, #12
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	20000c44 	.word	0x20000c44

0800aa38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa3e:	4b0b      	ldr	r3, [pc, #44]	; (800aa6c <xTaskGetSchedulerState+0x34>)
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d102      	bne.n	800aa4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa46:	2301      	movs	r3, #1
 800aa48:	607b      	str	r3, [r7, #4]
 800aa4a:	e008      	b.n	800aa5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa4c:	4b08      	ldr	r3, [pc, #32]	; (800aa70 <xTaskGetSchedulerState+0x38>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d102      	bne.n	800aa5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa54:	2302      	movs	r3, #2
 800aa56:	607b      	str	r3, [r7, #4]
 800aa58:	e001      	b.n	800aa5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa5e:	687b      	ldr	r3, [r7, #4]
	}
 800aa60:	4618      	mov	r0, r3
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr
 800aa6c:	20001124 	.word	0x20001124
 800aa70:	20001140 	.word	0x20001140

0800aa74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b086      	sub	sp, #24
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aa80:	2300      	movs	r3, #0
 800aa82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d056      	beq.n	800ab38 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aa8a:	4b2e      	ldr	r3, [pc, #184]	; (800ab44 <xTaskPriorityDisinherit+0xd0>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	693a      	ldr	r2, [r7, #16]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d00a      	beq.n	800aaaa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aa94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa98:	f383 8811 	msr	BASEPRI, r3
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f3bf 8f4f 	dsb	sy
 800aaa4:	60fb      	str	r3, [r7, #12]
}
 800aaa6:	bf00      	nop
 800aaa8:	e7fe      	b.n	800aaa8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d10a      	bne.n	800aac8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800aab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab6:	f383 8811 	msr	BASEPRI, r3
 800aaba:	f3bf 8f6f 	isb	sy
 800aabe:	f3bf 8f4f 	dsb	sy
 800aac2:	60bb      	str	r3, [r7, #8]
}
 800aac4:	bf00      	nop
 800aac6:	e7fe      	b.n	800aac6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aacc:	1e5a      	subs	r2, r3, #1
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aada:	429a      	cmp	r2, r3
 800aadc:	d02c      	beq.n	800ab38 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d128      	bne.n	800ab38 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	3304      	adds	r3, #4
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fe fbc4 	bl	8009278 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aafc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab08:	4b0f      	ldr	r3, [pc, #60]	; (800ab48 <xTaskPriorityDisinherit+0xd4>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d903      	bls.n	800ab18 <xTaskPriorityDisinherit+0xa4>
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab14:	4a0c      	ldr	r2, [pc, #48]	; (800ab48 <xTaskPriorityDisinherit+0xd4>)
 800ab16:	6013      	str	r3, [r2, #0]
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4413      	add	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4a09      	ldr	r2, [pc, #36]	; (800ab4c <xTaskPriorityDisinherit+0xd8>)
 800ab26:	441a      	add	r2, r3
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	4610      	mov	r0, r2
 800ab30:	f7fe fb45 	bl	80091be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab34:	2301      	movs	r3, #1
 800ab36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab38:	697b      	ldr	r3, [r7, #20]
	}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3718      	adds	r7, #24
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	20000c44 	.word	0x20000c44
 800ab48:	20001120 	.word	0x20001120
 800ab4c:	20000c48 	.word	0x20000c48

0800ab50 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ab5a:	4b21      	ldr	r3, [pc, #132]	; (800abe0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab60:	4b20      	ldr	r3, [pc, #128]	; (800abe4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	3304      	adds	r3, #4
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7fe fb86 	bl	8009278 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab72:	d10a      	bne.n	800ab8a <prvAddCurrentTaskToDelayedList+0x3a>
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d007      	beq.n	800ab8a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab7a:	4b1a      	ldr	r3, [pc, #104]	; (800abe4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	3304      	adds	r3, #4
 800ab80:	4619      	mov	r1, r3
 800ab82:	4819      	ldr	r0, [pc, #100]	; (800abe8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ab84:	f7fe fb1b 	bl	80091be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ab88:	e026      	b.n	800abd8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4413      	add	r3, r2
 800ab90:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab92:	4b14      	ldr	r3, [pc, #80]	; (800abe4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68ba      	ldr	r2, [r7, #8]
 800ab98:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d209      	bcs.n	800abb6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aba2:	4b12      	ldr	r3, [pc, #72]	; (800abec <prvAddCurrentTaskToDelayedList+0x9c>)
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	4b0f      	ldr	r3, [pc, #60]	; (800abe4 <prvAddCurrentTaskToDelayedList+0x94>)
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	3304      	adds	r3, #4
 800abac:	4619      	mov	r1, r3
 800abae:	4610      	mov	r0, r2
 800abb0:	f7fe fb29 	bl	8009206 <vListInsert>
}
 800abb4:	e010      	b.n	800abd8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abb6:	4b0e      	ldr	r3, [pc, #56]	; (800abf0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	4b0a      	ldr	r3, [pc, #40]	; (800abe4 <prvAddCurrentTaskToDelayedList+0x94>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	3304      	adds	r3, #4
 800abc0:	4619      	mov	r1, r3
 800abc2:	4610      	mov	r0, r2
 800abc4:	f7fe fb1f 	bl	8009206 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800abc8:	4b0a      	ldr	r3, [pc, #40]	; (800abf4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	68ba      	ldr	r2, [r7, #8]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d202      	bcs.n	800abd8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800abd2:	4a08      	ldr	r2, [pc, #32]	; (800abf4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	6013      	str	r3, [r2, #0]
}
 800abd8:	bf00      	nop
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	2000111c 	.word	0x2000111c
 800abe4:	20000c44 	.word	0x20000c44
 800abe8:	20001104 	.word	0x20001104
 800abec:	200010d4 	.word	0x200010d4
 800abf0:	200010d0 	.word	0x200010d0
 800abf4:	20001138 	.word	0x20001138

0800abf8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b08a      	sub	sp, #40	; 0x28
 800abfc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800abfe:	2300      	movs	r3, #0
 800ac00:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac02:	f000 fb07 	bl	800b214 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac06:	4b1c      	ldr	r3, [pc, #112]	; (800ac78 <xTimerCreateTimerTask+0x80>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d021      	beq.n	800ac52 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac12:	2300      	movs	r3, #0
 800ac14:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac16:	1d3a      	adds	r2, r7, #4
 800ac18:	f107 0108 	add.w	r1, r7, #8
 800ac1c:	f107 030c 	add.w	r3, r7, #12
 800ac20:	4618      	mov	r0, r3
 800ac22:	f7fe fa85 	bl	8009130 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ac26:	6879      	ldr	r1, [r7, #4]
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	9202      	str	r2, [sp, #8]
 800ac2e:	9301      	str	r3, [sp, #4]
 800ac30:	2302      	movs	r3, #2
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	2300      	movs	r3, #0
 800ac36:	460a      	mov	r2, r1
 800ac38:	4910      	ldr	r1, [pc, #64]	; (800ac7c <xTimerCreateTimerTask+0x84>)
 800ac3a:	4811      	ldr	r0, [pc, #68]	; (800ac80 <xTimerCreateTimerTask+0x88>)
 800ac3c:	f7ff f832 	bl	8009ca4 <xTaskCreateStatic>
 800ac40:	4603      	mov	r3, r0
 800ac42:	4a10      	ldr	r2, [pc, #64]	; (800ac84 <xTimerCreateTimerTask+0x8c>)
 800ac44:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ac46:	4b0f      	ldr	r3, [pc, #60]	; (800ac84 <xTimerCreateTimerTask+0x8c>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d001      	beq.n	800ac52 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10a      	bne.n	800ac6e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ac58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5c:	f383 8811 	msr	BASEPRI, r3
 800ac60:	f3bf 8f6f 	isb	sy
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	613b      	str	r3, [r7, #16]
}
 800ac6a:	bf00      	nop
 800ac6c:	e7fe      	b.n	800ac6c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ac6e:	697b      	ldr	r3, [r7, #20]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3718      	adds	r7, #24
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	20001174 	.word	0x20001174
 800ac7c:	080111f4 	.word	0x080111f4
 800ac80:	0800adbd 	.word	0x0800adbd
 800ac84:	20001178 	.word	0x20001178

0800ac88 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b08a      	sub	sp, #40	; 0x28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
 800ac94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ac96:	2300      	movs	r3, #0
 800ac98:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d10a      	bne.n	800acb6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800aca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca4:	f383 8811 	msr	BASEPRI, r3
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	623b      	str	r3, [r7, #32]
}
 800acb2:	bf00      	nop
 800acb4:	e7fe      	b.n	800acb4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800acb6:	4b1a      	ldr	r3, [pc, #104]	; (800ad20 <xTimerGenericCommand+0x98>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d02a      	beq.n	800ad14 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	2b05      	cmp	r3, #5
 800acce:	dc18      	bgt.n	800ad02 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800acd0:	f7ff feb2 	bl	800aa38 <xTaskGetSchedulerState>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b02      	cmp	r3, #2
 800acd8:	d109      	bne.n	800acee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800acda:	4b11      	ldr	r3, [pc, #68]	; (800ad20 <xTimerGenericCommand+0x98>)
 800acdc:	6818      	ldr	r0, [r3, #0]
 800acde:	f107 0110 	add.w	r1, r7, #16
 800ace2:	2300      	movs	r3, #0
 800ace4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ace6:	f7fe fbf5 	bl	80094d4 <xQueueGenericSend>
 800acea:	6278      	str	r0, [r7, #36]	; 0x24
 800acec:	e012      	b.n	800ad14 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800acee:	4b0c      	ldr	r3, [pc, #48]	; (800ad20 <xTimerGenericCommand+0x98>)
 800acf0:	6818      	ldr	r0, [r3, #0]
 800acf2:	f107 0110 	add.w	r1, r7, #16
 800acf6:	2300      	movs	r3, #0
 800acf8:	2200      	movs	r2, #0
 800acfa:	f7fe fbeb 	bl	80094d4 <xQueueGenericSend>
 800acfe:	6278      	str	r0, [r7, #36]	; 0x24
 800ad00:	e008      	b.n	800ad14 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad02:	4b07      	ldr	r3, [pc, #28]	; (800ad20 <xTimerGenericCommand+0x98>)
 800ad04:	6818      	ldr	r0, [r3, #0]
 800ad06:	f107 0110 	add.w	r1, r7, #16
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	683a      	ldr	r2, [r7, #0]
 800ad0e:	f7fe fcdf 	bl	80096d0 <xQueueGenericSendFromISR>
 800ad12:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ad14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3728      	adds	r7, #40	; 0x28
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	20001174 	.word	0x20001174

0800ad24 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b088      	sub	sp, #32
 800ad28:	af02      	add	r7, sp, #8
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad2e:	4b22      	ldr	r3, [pc, #136]	; (800adb8 <prvProcessExpiredTimer+0x94>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	3304      	adds	r3, #4
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7fe fa9b 	bl	8009278 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad48:	f003 0304 	and.w	r3, r3, #4
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d022      	beq.n	800ad96 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	699a      	ldr	r2, [r3, #24]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	18d1      	adds	r1, r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	683a      	ldr	r2, [r7, #0]
 800ad5c:	6978      	ldr	r0, [r7, #20]
 800ad5e:	f000 f8d1 	bl	800af04 <prvInsertTimerInActiveList>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d01f      	beq.n	800ada8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad68:	2300      	movs	r3, #0
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	2100      	movs	r1, #0
 800ad72:	6978      	ldr	r0, [r7, #20]
 800ad74:	f7ff ff88 	bl	800ac88 <xTimerGenericCommand>
 800ad78:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d113      	bne.n	800ada8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ad80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	60fb      	str	r3, [r7, #12]
}
 800ad92:	bf00      	nop
 800ad94:	e7fe      	b.n	800ad94 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad9c:	f023 0301 	bic.w	r3, r3, #1
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	6a1b      	ldr	r3, [r3, #32]
 800adac:	6978      	ldr	r0, [r7, #20]
 800adae:	4798      	blx	r3
}
 800adb0:	bf00      	nop
 800adb2:	3718      	adds	r7, #24
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}
 800adb8:	2000116c 	.word	0x2000116c

0800adbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800adc4:	f107 0308 	add.w	r3, r7, #8
 800adc8:	4618      	mov	r0, r3
 800adca:	f000 f857 	bl	800ae7c <prvGetNextExpireTime>
 800adce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	4619      	mov	r1, r3
 800add4:	68f8      	ldr	r0, [r7, #12]
 800add6:	f000 f803 	bl	800ade0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800adda:	f000 f8d5 	bl	800af88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800adde:	e7f1      	b.n	800adc4 <prvTimerTask+0x8>

0800ade0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800adea:	f7ff fa29 	bl	800a240 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800adee:	f107 0308 	add.w	r3, r7, #8
 800adf2:	4618      	mov	r0, r3
 800adf4:	f000 f866 	bl	800aec4 <prvSampleTimeNow>
 800adf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d130      	bne.n	800ae62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10a      	bne.n	800ae1c <prvProcessTimerOrBlockTask+0x3c>
 800ae06:	687a      	ldr	r2, [r7, #4]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d806      	bhi.n	800ae1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ae0e:	f7ff fa25 	bl	800a25c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae12:	68f9      	ldr	r1, [r7, #12]
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f7ff ff85 	bl	800ad24 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ae1a:	e024      	b.n	800ae66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d008      	beq.n	800ae34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae22:	4b13      	ldr	r3, [pc, #76]	; (800ae70 <prvProcessTimerOrBlockTask+0x90>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d101      	bne.n	800ae30 <prvProcessTimerOrBlockTask+0x50>
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	e000      	b.n	800ae32 <prvProcessTimerOrBlockTask+0x52>
 800ae30:	2300      	movs	r3, #0
 800ae32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ae34:	4b0f      	ldr	r3, [pc, #60]	; (800ae74 <prvProcessTimerOrBlockTask+0x94>)
 800ae36:	6818      	ldr	r0, [r3, #0]
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	1ad3      	subs	r3, r2, r3
 800ae3e:	683a      	ldr	r2, [r7, #0]
 800ae40:	4619      	mov	r1, r3
 800ae42:	f7fe fefb 	bl	8009c3c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ae46:	f7ff fa09 	bl	800a25c <xTaskResumeAll>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d10a      	bne.n	800ae66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ae50:	4b09      	ldr	r3, [pc, #36]	; (800ae78 <prvProcessTimerOrBlockTask+0x98>)
 800ae52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae56:	601a      	str	r2, [r3, #0]
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	f3bf 8f6f 	isb	sy
}
 800ae60:	e001      	b.n	800ae66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ae62:	f7ff f9fb 	bl	800a25c <xTaskResumeAll>
}
 800ae66:	bf00      	nop
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	20001170 	.word	0x20001170
 800ae74:	20001174 	.word	0x20001174
 800ae78:	e000ed04 	.word	0xe000ed04

0800ae7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b085      	sub	sp, #20
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ae84:	4b0e      	ldr	r3, [pc, #56]	; (800aec0 <prvGetNextExpireTime+0x44>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d101      	bne.n	800ae92 <prvGetNextExpireTime+0x16>
 800ae8e:	2201      	movs	r2, #1
 800ae90:	e000      	b.n	800ae94 <prvGetNextExpireTime+0x18>
 800ae92:	2200      	movs	r2, #0
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d105      	bne.n	800aeac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aea0:	4b07      	ldr	r3, [pc, #28]	; (800aec0 <prvGetNextExpireTime+0x44>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	60fb      	str	r3, [r7, #12]
 800aeaa:	e001      	b.n	800aeb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aeac:	2300      	movs	r3, #0
 800aeae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3714      	adds	r7, #20
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	2000116c 	.word	0x2000116c

0800aec4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aecc:	f7ff fa64 	bl	800a398 <xTaskGetTickCount>
 800aed0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aed2:	4b0b      	ldr	r3, [pc, #44]	; (800af00 <prvSampleTimeNow+0x3c>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68fa      	ldr	r2, [r7, #12]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d205      	bcs.n	800aee8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aedc:	f000 f936 	bl	800b14c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2201      	movs	r2, #1
 800aee4:	601a      	str	r2, [r3, #0]
 800aee6:	e002      	b.n	800aeee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aeee:	4a04      	ldr	r2, [pc, #16]	; (800af00 <prvSampleTimeNow+0x3c>)
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aef4:	68fb      	ldr	r3, [r7, #12]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	2000117c 	.word	0x2000117c

0800af04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b086      	sub	sp, #24
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	607a      	str	r2, [r7, #4]
 800af10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800af12:	2300      	movs	r3, #0
 800af14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	68fa      	ldr	r2, [r7, #12]
 800af20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800af22:	68ba      	ldr	r2, [r7, #8]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	429a      	cmp	r2, r3
 800af28:	d812      	bhi.n	800af50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	1ad2      	subs	r2, r2, r3
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	699b      	ldr	r3, [r3, #24]
 800af34:	429a      	cmp	r2, r3
 800af36:	d302      	bcc.n	800af3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800af38:	2301      	movs	r3, #1
 800af3a:	617b      	str	r3, [r7, #20]
 800af3c:	e01b      	b.n	800af76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800af3e:	4b10      	ldr	r3, [pc, #64]	; (800af80 <prvInsertTimerInActiveList+0x7c>)
 800af40:	681a      	ldr	r2, [r3, #0]
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	3304      	adds	r3, #4
 800af46:	4619      	mov	r1, r3
 800af48:	4610      	mov	r0, r2
 800af4a:	f7fe f95c 	bl	8009206 <vListInsert>
 800af4e:	e012      	b.n	800af76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	429a      	cmp	r2, r3
 800af56:	d206      	bcs.n	800af66 <prvInsertTimerInActiveList+0x62>
 800af58:	68ba      	ldr	r2, [r7, #8]
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	429a      	cmp	r2, r3
 800af5e:	d302      	bcc.n	800af66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800af60:	2301      	movs	r3, #1
 800af62:	617b      	str	r3, [r7, #20]
 800af64:	e007      	b.n	800af76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af66:	4b07      	ldr	r3, [pc, #28]	; (800af84 <prvInsertTimerInActiveList+0x80>)
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3304      	adds	r3, #4
 800af6e:	4619      	mov	r1, r3
 800af70:	4610      	mov	r0, r2
 800af72:	f7fe f948 	bl	8009206 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800af76:	697b      	ldr	r3, [r7, #20]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3718      	adds	r7, #24
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}
 800af80:	20001170 	.word	0x20001170
 800af84:	2000116c 	.word	0x2000116c

0800af88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b08e      	sub	sp, #56	; 0x38
 800af8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af8e:	e0ca      	b.n	800b126 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2b00      	cmp	r3, #0
 800af94:	da18      	bge.n	800afc8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800af96:	1d3b      	adds	r3, r7, #4
 800af98:	3304      	adds	r3, #4
 800af9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800af9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10a      	bne.n	800afb8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800afa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa6:	f383 8811 	msr	BASEPRI, r3
 800afaa:	f3bf 8f6f 	isb	sy
 800afae:	f3bf 8f4f 	dsb	sy
 800afb2:	61fb      	str	r3, [r7, #28]
}
 800afb4:	bf00      	nop
 800afb6:	e7fe      	b.n	800afb6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800afb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afbe:	6850      	ldr	r0, [r2, #4]
 800afc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afc2:	6892      	ldr	r2, [r2, #8]
 800afc4:	4611      	mov	r1, r2
 800afc6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f2c0 80aa 	blt.w	800b124 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800afd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd6:	695b      	ldr	r3, [r3, #20]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d004      	beq.n	800afe6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800afdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afde:	3304      	adds	r3, #4
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fe f949 	bl	8009278 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afe6:	463b      	mov	r3, r7
 800afe8:	4618      	mov	r0, r3
 800afea:	f7ff ff6b 	bl	800aec4 <prvSampleTimeNow>
 800afee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2b09      	cmp	r3, #9
 800aff4:	f200 8097 	bhi.w	800b126 <prvProcessReceivedCommands+0x19e>
 800aff8:	a201      	add	r2, pc, #4	; (adr r2, 800b000 <prvProcessReceivedCommands+0x78>)
 800affa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800affe:	bf00      	nop
 800b000:	0800b029 	.word	0x0800b029
 800b004:	0800b029 	.word	0x0800b029
 800b008:	0800b029 	.word	0x0800b029
 800b00c:	0800b09d 	.word	0x0800b09d
 800b010:	0800b0b1 	.word	0x0800b0b1
 800b014:	0800b0fb 	.word	0x0800b0fb
 800b018:	0800b029 	.word	0x0800b029
 800b01c:	0800b029 	.word	0x0800b029
 800b020:	0800b09d 	.word	0x0800b09d
 800b024:	0800b0b1 	.word	0x0800b0b1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b02e:	f043 0301 	orr.w	r3, r3, #1
 800b032:	b2da      	uxtb	r2, r3
 800b034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b03a:	68ba      	ldr	r2, [r7, #8]
 800b03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03e:	699b      	ldr	r3, [r3, #24]
 800b040:	18d1      	adds	r1, r2, r3
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b048:	f7ff ff5c 	bl	800af04 <prvInsertTimerInActiveList>
 800b04c:	4603      	mov	r3, r0
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d069      	beq.n	800b126 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b054:	6a1b      	ldr	r3, [r3, #32]
 800b056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b058:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b060:	f003 0304 	and.w	r3, r3, #4
 800b064:	2b00      	cmp	r3, #0
 800b066:	d05e      	beq.n	800b126 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b068:	68ba      	ldr	r2, [r7, #8]
 800b06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06c:	699b      	ldr	r3, [r3, #24]
 800b06e:	441a      	add	r2, r3
 800b070:	2300      	movs	r3, #0
 800b072:	9300      	str	r3, [sp, #0]
 800b074:	2300      	movs	r3, #0
 800b076:	2100      	movs	r1, #0
 800b078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b07a:	f7ff fe05 	bl	800ac88 <xTimerGenericCommand>
 800b07e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b080:	6a3b      	ldr	r3, [r7, #32]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d14f      	bne.n	800b126 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08a:	f383 8811 	msr	BASEPRI, r3
 800b08e:	f3bf 8f6f 	isb	sy
 800b092:	f3bf 8f4f 	dsb	sy
 800b096:	61bb      	str	r3, [r7, #24]
}
 800b098:	bf00      	nop
 800b09a:	e7fe      	b.n	800b09a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0a2:	f023 0301 	bic.w	r3, r3, #1
 800b0a6:	b2da      	uxtb	r2, r3
 800b0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b0ae:	e03a      	b.n	800b126 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0b6:	f043 0301 	orr.w	r3, r3, #1
 800b0ba:	b2da      	uxtb	r2, r3
 800b0bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b0c2:	68ba      	ldr	r2, [r7, #8]
 800b0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ca:	699b      	ldr	r3, [r3, #24]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10a      	bne.n	800b0e6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d4:	f383 8811 	msr	BASEPRI, r3
 800b0d8:	f3bf 8f6f 	isb	sy
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	617b      	str	r3, [r7, #20]
}
 800b0e2:	bf00      	nop
 800b0e4:	e7fe      	b.n	800b0e4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e8:	699a      	ldr	r2, [r3, #24]
 800b0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ec:	18d1      	adds	r1, r2, r3
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0f4:	f7ff ff06 	bl	800af04 <prvInsertTimerInActiveList>
					break;
 800b0f8:	e015      	b.n	800b126 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b100:	f003 0302 	and.w	r3, r3, #2
 800b104:	2b00      	cmp	r3, #0
 800b106:	d103      	bne.n	800b110 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b10a:	f000 fbe1 	bl	800b8d0 <vPortFree>
 800b10e:	e00a      	b.n	800b126 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b112:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b116:	f023 0301 	bic.w	r3, r3, #1
 800b11a:	b2da      	uxtb	r2, r3
 800b11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b122:	e000      	b.n	800b126 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b124:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b126:	4b08      	ldr	r3, [pc, #32]	; (800b148 <prvProcessReceivedCommands+0x1c0>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	1d39      	adds	r1, r7, #4
 800b12c:	2200      	movs	r2, #0
 800b12e:	4618      	mov	r0, r3
 800b130:	f7fe fb6a 	bl	8009808 <xQueueReceive>
 800b134:	4603      	mov	r3, r0
 800b136:	2b00      	cmp	r3, #0
 800b138:	f47f af2a 	bne.w	800af90 <prvProcessReceivedCommands+0x8>
	}
}
 800b13c:	bf00      	nop
 800b13e:	bf00      	nop
 800b140:	3730      	adds	r7, #48	; 0x30
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	20001174 	.word	0x20001174

0800b14c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b088      	sub	sp, #32
 800b150:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b152:	e048      	b.n	800b1e6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b154:	4b2d      	ldr	r3, [pc, #180]	; (800b20c <prvSwitchTimerLists+0xc0>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b15e:	4b2b      	ldr	r3, [pc, #172]	; (800b20c <prvSwitchTimerLists+0xc0>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	3304      	adds	r3, #4
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7fe f883 	bl	8009278 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6a1b      	ldr	r3, [r3, #32]
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b180:	f003 0304 	and.w	r3, r3, #4
 800b184:	2b00      	cmp	r3, #0
 800b186:	d02e      	beq.n	800b1e6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	693a      	ldr	r2, [r7, #16]
 800b18e:	4413      	add	r3, r2
 800b190:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b192:	68ba      	ldr	r2, [r7, #8]
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	429a      	cmp	r2, r3
 800b198:	d90e      	bls.n	800b1b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	68fa      	ldr	r2, [r7, #12]
 800b1a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1a6:	4b19      	ldr	r3, [pc, #100]	; (800b20c <prvSwitchTimerLists+0xc0>)
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	3304      	adds	r3, #4
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	f7fe f828 	bl	8009206 <vListInsert>
 800b1b6:	e016      	b.n	800b1e6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	2300      	movs	r3, #0
 800b1be:	693a      	ldr	r2, [r7, #16]
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	68f8      	ldr	r0, [r7, #12]
 800b1c4:	f7ff fd60 	bl	800ac88 <xTimerGenericCommand>
 800b1c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d10a      	bne.n	800b1e6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	603b      	str	r3, [r7, #0]
}
 800b1e2:	bf00      	nop
 800b1e4:	e7fe      	b.n	800b1e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b1e6:	4b09      	ldr	r3, [pc, #36]	; (800b20c <prvSwitchTimerLists+0xc0>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d1b1      	bne.n	800b154 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b1f0:	4b06      	ldr	r3, [pc, #24]	; (800b20c <prvSwitchTimerLists+0xc0>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b1f6:	4b06      	ldr	r3, [pc, #24]	; (800b210 <prvSwitchTimerLists+0xc4>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a04      	ldr	r2, [pc, #16]	; (800b20c <prvSwitchTimerLists+0xc0>)
 800b1fc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b1fe:	4a04      	ldr	r2, [pc, #16]	; (800b210 <prvSwitchTimerLists+0xc4>)
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	6013      	str	r3, [r2, #0]
}
 800b204:	bf00      	nop
 800b206:	3718      	adds	r7, #24
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	2000116c 	.word	0x2000116c
 800b210:	20001170 	.word	0x20001170

0800b214 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b082      	sub	sp, #8
 800b218:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b21a:	f000 f96b 	bl	800b4f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b21e:	4b15      	ldr	r3, [pc, #84]	; (800b274 <prvCheckForValidListAndQueue+0x60>)
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d120      	bne.n	800b268 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b226:	4814      	ldr	r0, [pc, #80]	; (800b278 <prvCheckForValidListAndQueue+0x64>)
 800b228:	f7fd ff9c 	bl	8009164 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b22c:	4813      	ldr	r0, [pc, #76]	; (800b27c <prvCheckForValidListAndQueue+0x68>)
 800b22e:	f7fd ff99 	bl	8009164 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b232:	4b13      	ldr	r3, [pc, #76]	; (800b280 <prvCheckForValidListAndQueue+0x6c>)
 800b234:	4a10      	ldr	r2, [pc, #64]	; (800b278 <prvCheckForValidListAndQueue+0x64>)
 800b236:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b238:	4b12      	ldr	r3, [pc, #72]	; (800b284 <prvCheckForValidListAndQueue+0x70>)
 800b23a:	4a10      	ldr	r2, [pc, #64]	; (800b27c <prvCheckForValidListAndQueue+0x68>)
 800b23c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b23e:	2300      	movs	r3, #0
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	4b11      	ldr	r3, [pc, #68]	; (800b288 <prvCheckForValidListAndQueue+0x74>)
 800b244:	4a11      	ldr	r2, [pc, #68]	; (800b28c <prvCheckForValidListAndQueue+0x78>)
 800b246:	2110      	movs	r1, #16
 800b248:	200a      	movs	r0, #10
 800b24a:	f7fe f8a7 	bl	800939c <xQueueGenericCreateStatic>
 800b24e:	4603      	mov	r3, r0
 800b250:	4a08      	ldr	r2, [pc, #32]	; (800b274 <prvCheckForValidListAndQueue+0x60>)
 800b252:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b254:	4b07      	ldr	r3, [pc, #28]	; (800b274 <prvCheckForValidListAndQueue+0x60>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d005      	beq.n	800b268 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b25c:	4b05      	ldr	r3, [pc, #20]	; (800b274 <prvCheckForValidListAndQueue+0x60>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	490b      	ldr	r1, [pc, #44]	; (800b290 <prvCheckForValidListAndQueue+0x7c>)
 800b262:	4618      	mov	r0, r3
 800b264:	f7fe fcc0 	bl	8009be8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b268:	f000 f974 	bl	800b554 <vPortExitCritical>
}
 800b26c:	bf00      	nop
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	20001174 	.word	0x20001174
 800b278:	20001144 	.word	0x20001144
 800b27c:	20001158 	.word	0x20001158
 800b280:	2000116c 	.word	0x2000116c
 800b284:	20001170 	.word	0x20001170
 800b288:	20001220 	.word	0x20001220
 800b28c:	20001180 	.word	0x20001180
 800b290:	080111fc 	.word	0x080111fc

0800b294 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b294:	b480      	push	{r7}
 800b296:	b085      	sub	sp, #20
 800b298:	af00      	add	r7, sp, #0
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	3b04      	subs	r3, #4
 800b2a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b2ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	3b04      	subs	r3, #4
 800b2b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	f023 0201 	bic.w	r2, r3, #1
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	3b04      	subs	r3, #4
 800b2c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b2c4:	4a0c      	ldr	r2, [pc, #48]	; (800b2f8 <pxPortInitialiseStack+0x64>)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	3b14      	subs	r3, #20
 800b2ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	3b04      	subs	r3, #4
 800b2da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f06f 0202 	mvn.w	r2, #2
 800b2e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	3b20      	subs	r3, #32
 800b2e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3714      	adds	r7, #20
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr
 800b2f8:	0800b2fd 	.word	0x0800b2fd

0800b2fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b085      	sub	sp, #20
 800b300:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b302:	2300      	movs	r3, #0
 800b304:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b306:	4b12      	ldr	r3, [pc, #72]	; (800b350 <prvTaskExitError+0x54>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b30e:	d00a      	beq.n	800b326 <prvTaskExitError+0x2a>
	__asm volatile
 800b310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b314:	f383 8811 	msr	BASEPRI, r3
 800b318:	f3bf 8f6f 	isb	sy
 800b31c:	f3bf 8f4f 	dsb	sy
 800b320:	60fb      	str	r3, [r7, #12]
}
 800b322:	bf00      	nop
 800b324:	e7fe      	b.n	800b324 <prvTaskExitError+0x28>
	__asm volatile
 800b326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32a:	f383 8811 	msr	BASEPRI, r3
 800b32e:	f3bf 8f6f 	isb	sy
 800b332:	f3bf 8f4f 	dsb	sy
 800b336:	60bb      	str	r3, [r7, #8]
}
 800b338:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b33a:	bf00      	nop
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d0fc      	beq.n	800b33c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b342:	bf00      	nop
 800b344:	bf00      	nop
 800b346:	3714      	adds	r7, #20
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr
 800b350:	20000018 	.word	0x20000018
	...

0800b360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b360:	4b07      	ldr	r3, [pc, #28]	; (800b380 <pxCurrentTCBConst2>)
 800b362:	6819      	ldr	r1, [r3, #0]
 800b364:	6808      	ldr	r0, [r1, #0]
 800b366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36a:	f380 8809 	msr	PSP, r0
 800b36e:	f3bf 8f6f 	isb	sy
 800b372:	f04f 0000 	mov.w	r0, #0
 800b376:	f380 8811 	msr	BASEPRI, r0
 800b37a:	4770      	bx	lr
 800b37c:	f3af 8000 	nop.w

0800b380 <pxCurrentTCBConst2>:
 800b380:	20000c44 	.word	0x20000c44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b384:	bf00      	nop
 800b386:	bf00      	nop

0800b388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b388:	4808      	ldr	r0, [pc, #32]	; (800b3ac <prvPortStartFirstTask+0x24>)
 800b38a:	6800      	ldr	r0, [r0, #0]
 800b38c:	6800      	ldr	r0, [r0, #0]
 800b38e:	f380 8808 	msr	MSP, r0
 800b392:	f04f 0000 	mov.w	r0, #0
 800b396:	f380 8814 	msr	CONTROL, r0
 800b39a:	b662      	cpsie	i
 800b39c:	b661      	cpsie	f
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	df00      	svc	0
 800b3a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b3aa:	bf00      	nop
 800b3ac:	e000ed08 	.word	0xe000ed08

0800b3b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b086      	sub	sp, #24
 800b3b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b3b6:	4b46      	ldr	r3, [pc, #280]	; (800b4d0 <xPortStartScheduler+0x120>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a46      	ldr	r2, [pc, #280]	; (800b4d4 <xPortStartScheduler+0x124>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d10a      	bne.n	800b3d6 <xPortStartScheduler+0x26>
	__asm volatile
 800b3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	613b      	str	r3, [r7, #16]
}
 800b3d2:	bf00      	nop
 800b3d4:	e7fe      	b.n	800b3d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b3d6:	4b3e      	ldr	r3, [pc, #248]	; (800b4d0 <xPortStartScheduler+0x120>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a3f      	ldr	r2, [pc, #252]	; (800b4d8 <xPortStartScheduler+0x128>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d10a      	bne.n	800b3f6 <xPortStartScheduler+0x46>
	__asm volatile
 800b3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e4:	f383 8811 	msr	BASEPRI, r3
 800b3e8:	f3bf 8f6f 	isb	sy
 800b3ec:	f3bf 8f4f 	dsb	sy
 800b3f0:	60fb      	str	r3, [r7, #12]
}
 800b3f2:	bf00      	nop
 800b3f4:	e7fe      	b.n	800b3f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b3f6:	4b39      	ldr	r3, [pc, #228]	; (800b4dc <xPortStartScheduler+0x12c>)
 800b3f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	22ff      	movs	r2, #255	; 0xff
 800b406:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b410:	78fb      	ldrb	r3, [r7, #3]
 800b412:	b2db      	uxtb	r3, r3
 800b414:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b418:	b2da      	uxtb	r2, r3
 800b41a:	4b31      	ldr	r3, [pc, #196]	; (800b4e0 <xPortStartScheduler+0x130>)
 800b41c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b41e:	4b31      	ldr	r3, [pc, #196]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b420:	2207      	movs	r2, #7
 800b422:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b424:	e009      	b.n	800b43a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b426:	4b2f      	ldr	r3, [pc, #188]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	3b01      	subs	r3, #1
 800b42c:	4a2d      	ldr	r2, [pc, #180]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b42e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b430:	78fb      	ldrb	r3, [r7, #3]
 800b432:	b2db      	uxtb	r3, r3
 800b434:	005b      	lsls	r3, r3, #1
 800b436:	b2db      	uxtb	r3, r3
 800b438:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b43a:	78fb      	ldrb	r3, [r7, #3]
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b442:	2b80      	cmp	r3, #128	; 0x80
 800b444:	d0ef      	beq.n	800b426 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b446:	4b27      	ldr	r3, [pc, #156]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f1c3 0307 	rsb	r3, r3, #7
 800b44e:	2b04      	cmp	r3, #4
 800b450:	d00a      	beq.n	800b468 <xPortStartScheduler+0xb8>
	__asm volatile
 800b452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b456:	f383 8811 	msr	BASEPRI, r3
 800b45a:	f3bf 8f6f 	isb	sy
 800b45e:	f3bf 8f4f 	dsb	sy
 800b462:	60bb      	str	r3, [r7, #8]
}
 800b464:	bf00      	nop
 800b466:	e7fe      	b.n	800b466 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b468:	4b1e      	ldr	r3, [pc, #120]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	021b      	lsls	r3, r3, #8
 800b46e:	4a1d      	ldr	r2, [pc, #116]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b470:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b472:	4b1c      	ldr	r3, [pc, #112]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b47a:	4a1a      	ldr	r2, [pc, #104]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b47c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	b2da      	uxtb	r2, r3
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b486:	4b18      	ldr	r3, [pc, #96]	; (800b4e8 <xPortStartScheduler+0x138>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a17      	ldr	r2, [pc, #92]	; (800b4e8 <xPortStartScheduler+0x138>)
 800b48c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b490:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b492:	4b15      	ldr	r3, [pc, #84]	; (800b4e8 <xPortStartScheduler+0x138>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a14      	ldr	r2, [pc, #80]	; (800b4e8 <xPortStartScheduler+0x138>)
 800b498:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b49c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b49e:	f000 f8dd 	bl	800b65c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b4a2:	4b12      	ldr	r3, [pc, #72]	; (800b4ec <xPortStartScheduler+0x13c>)
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b4a8:	f000 f8fc 	bl	800b6a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b4ac:	4b10      	ldr	r3, [pc, #64]	; (800b4f0 <xPortStartScheduler+0x140>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a0f      	ldr	r2, [pc, #60]	; (800b4f0 <xPortStartScheduler+0x140>)
 800b4b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b4b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b4b8:	f7ff ff66 	bl	800b388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b4bc:	f7ff f836 	bl	800a52c <vTaskSwitchContext>
	prvTaskExitError();
 800b4c0:	f7ff ff1c 	bl	800b2fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3718      	adds	r7, #24
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	e000ed00 	.word	0xe000ed00
 800b4d4:	410fc271 	.word	0x410fc271
 800b4d8:	410fc270 	.word	0x410fc270
 800b4dc:	e000e400 	.word	0xe000e400
 800b4e0:	20001270 	.word	0x20001270
 800b4e4:	20001274 	.word	0x20001274
 800b4e8:	e000ed20 	.word	0xe000ed20
 800b4ec:	20000018 	.word	0x20000018
 800b4f0:	e000ef34 	.word	0xe000ef34

0800b4f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
	__asm volatile
 800b4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fe:	f383 8811 	msr	BASEPRI, r3
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	f3bf 8f4f 	dsb	sy
 800b50a:	607b      	str	r3, [r7, #4]
}
 800b50c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b50e:	4b0f      	ldr	r3, [pc, #60]	; (800b54c <vPortEnterCritical+0x58>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3301      	adds	r3, #1
 800b514:	4a0d      	ldr	r2, [pc, #52]	; (800b54c <vPortEnterCritical+0x58>)
 800b516:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b518:	4b0c      	ldr	r3, [pc, #48]	; (800b54c <vPortEnterCritical+0x58>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d10f      	bne.n	800b540 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b520:	4b0b      	ldr	r3, [pc, #44]	; (800b550 <vPortEnterCritical+0x5c>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	b2db      	uxtb	r3, r3
 800b526:	2b00      	cmp	r3, #0
 800b528:	d00a      	beq.n	800b540 <vPortEnterCritical+0x4c>
	__asm volatile
 800b52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52e:	f383 8811 	msr	BASEPRI, r3
 800b532:	f3bf 8f6f 	isb	sy
 800b536:	f3bf 8f4f 	dsb	sy
 800b53a:	603b      	str	r3, [r7, #0]
}
 800b53c:	bf00      	nop
 800b53e:	e7fe      	b.n	800b53e <vPortEnterCritical+0x4a>
	}
}
 800b540:	bf00      	nop
 800b542:	370c      	adds	r7, #12
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	20000018 	.word	0x20000018
 800b550:	e000ed04 	.word	0xe000ed04

0800b554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b55a:	4b12      	ldr	r3, [pc, #72]	; (800b5a4 <vPortExitCritical+0x50>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d10a      	bne.n	800b578 <vPortExitCritical+0x24>
	__asm volatile
 800b562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b566:	f383 8811 	msr	BASEPRI, r3
 800b56a:	f3bf 8f6f 	isb	sy
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	607b      	str	r3, [r7, #4]
}
 800b574:	bf00      	nop
 800b576:	e7fe      	b.n	800b576 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b578:	4b0a      	ldr	r3, [pc, #40]	; (800b5a4 <vPortExitCritical+0x50>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	3b01      	subs	r3, #1
 800b57e:	4a09      	ldr	r2, [pc, #36]	; (800b5a4 <vPortExitCritical+0x50>)
 800b580:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b582:	4b08      	ldr	r3, [pc, #32]	; (800b5a4 <vPortExitCritical+0x50>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d105      	bne.n	800b596 <vPortExitCritical+0x42>
 800b58a:	2300      	movs	r3, #0
 800b58c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	f383 8811 	msr	BASEPRI, r3
}
 800b594:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b596:	bf00      	nop
 800b598:	370c      	adds	r7, #12
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	20000018 	.word	0x20000018
	...

0800b5b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b5b0:	f3ef 8009 	mrs	r0, PSP
 800b5b4:	f3bf 8f6f 	isb	sy
 800b5b8:	4b15      	ldr	r3, [pc, #84]	; (800b610 <pxCurrentTCBConst>)
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	f01e 0f10 	tst.w	lr, #16
 800b5c0:	bf08      	it	eq
 800b5c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b5c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ca:	6010      	str	r0, [r2, #0]
 800b5cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b5d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b5d4:	f380 8811 	msr	BASEPRI, r0
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	f7fe ffa4 	bl	800a52c <vTaskSwitchContext>
 800b5e4:	f04f 0000 	mov.w	r0, #0
 800b5e8:	f380 8811 	msr	BASEPRI, r0
 800b5ec:	bc09      	pop	{r0, r3}
 800b5ee:	6819      	ldr	r1, [r3, #0]
 800b5f0:	6808      	ldr	r0, [r1, #0]
 800b5f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f6:	f01e 0f10 	tst.w	lr, #16
 800b5fa:	bf08      	it	eq
 800b5fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b600:	f380 8809 	msr	PSP, r0
 800b604:	f3bf 8f6f 	isb	sy
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop
 800b60c:	f3af 8000 	nop.w

0800b610 <pxCurrentTCBConst>:
 800b610:	20000c44 	.word	0x20000c44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b614:	bf00      	nop
 800b616:	bf00      	nop

0800b618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
	__asm volatile
 800b61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	607b      	str	r3, [r7, #4]
}
 800b630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b632:	f7fe fec1 	bl	800a3b8 <xTaskIncrementTick>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d003      	beq.n	800b644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b63c:	4b06      	ldr	r3, [pc, #24]	; (800b658 <xPortSysTickHandler+0x40>)
 800b63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b642:	601a      	str	r2, [r3, #0]
 800b644:	2300      	movs	r3, #0
 800b646:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	f383 8811 	msr	BASEPRI, r3
}
 800b64e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b650:	bf00      	nop
 800b652:	3708      	adds	r7, #8
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	e000ed04 	.word	0xe000ed04

0800b65c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b65c:	b480      	push	{r7}
 800b65e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b660:	4b0b      	ldr	r3, [pc, #44]	; (800b690 <vPortSetupTimerInterrupt+0x34>)
 800b662:	2200      	movs	r2, #0
 800b664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b666:	4b0b      	ldr	r3, [pc, #44]	; (800b694 <vPortSetupTimerInterrupt+0x38>)
 800b668:	2200      	movs	r2, #0
 800b66a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b66c:	4b0a      	ldr	r3, [pc, #40]	; (800b698 <vPortSetupTimerInterrupt+0x3c>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a0a      	ldr	r2, [pc, #40]	; (800b69c <vPortSetupTimerInterrupt+0x40>)
 800b672:	fba2 2303 	umull	r2, r3, r2, r3
 800b676:	099b      	lsrs	r3, r3, #6
 800b678:	4a09      	ldr	r2, [pc, #36]	; (800b6a0 <vPortSetupTimerInterrupt+0x44>)
 800b67a:	3b01      	subs	r3, #1
 800b67c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b67e:	4b04      	ldr	r3, [pc, #16]	; (800b690 <vPortSetupTimerInterrupt+0x34>)
 800b680:	2207      	movs	r2, #7
 800b682:	601a      	str	r2, [r3, #0]
}
 800b684:	bf00      	nop
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	e000e010 	.word	0xe000e010
 800b694:	e000e018 	.word	0xe000e018
 800b698:	2000000c 	.word	0x2000000c
 800b69c:	10624dd3 	.word	0x10624dd3
 800b6a0:	e000e014 	.word	0xe000e014

0800b6a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b6a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b6b4 <vPortEnableVFP+0x10>
 800b6a8:	6801      	ldr	r1, [r0, #0]
 800b6aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b6ae:	6001      	str	r1, [r0, #0]
 800b6b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b6b2:	bf00      	nop
 800b6b4:	e000ed88 	.word	0xe000ed88

0800b6b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b085      	sub	sp, #20
 800b6bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b6be:	f3ef 8305 	mrs	r3, IPSR
 800b6c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2b0f      	cmp	r3, #15
 800b6c8:	d914      	bls.n	800b6f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b6ca:	4a17      	ldr	r2, [pc, #92]	; (800b728 <vPortValidateInterruptPriority+0x70>)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b6d4:	4b15      	ldr	r3, [pc, #84]	; (800b72c <vPortValidateInterruptPriority+0x74>)
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	7afa      	ldrb	r2, [r7, #11]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d20a      	bcs.n	800b6f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	607b      	str	r3, [r7, #4]
}
 800b6f0:	bf00      	nop
 800b6f2:	e7fe      	b.n	800b6f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b6f4:	4b0e      	ldr	r3, [pc, #56]	; (800b730 <vPortValidateInterruptPriority+0x78>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b6fc:	4b0d      	ldr	r3, [pc, #52]	; (800b734 <vPortValidateInterruptPriority+0x7c>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	429a      	cmp	r2, r3
 800b702:	d90a      	bls.n	800b71a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b708:	f383 8811 	msr	BASEPRI, r3
 800b70c:	f3bf 8f6f 	isb	sy
 800b710:	f3bf 8f4f 	dsb	sy
 800b714:	603b      	str	r3, [r7, #0]
}
 800b716:	bf00      	nop
 800b718:	e7fe      	b.n	800b718 <vPortValidateInterruptPriority+0x60>
	}
 800b71a:	bf00      	nop
 800b71c:	3714      	adds	r7, #20
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	e000e3f0 	.word	0xe000e3f0
 800b72c:	20001270 	.word	0x20001270
 800b730:	e000ed0c 	.word	0xe000ed0c
 800b734:	20001274 	.word	0x20001274

0800b738 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b08a      	sub	sp, #40	; 0x28
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b740:	2300      	movs	r3, #0
 800b742:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b744:	f7fe fd7c 	bl	800a240 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b748:	4b5b      	ldr	r3, [pc, #364]	; (800b8b8 <pvPortMalloc+0x180>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d101      	bne.n	800b754 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b750:	f000 f920 	bl	800b994 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b754:	4b59      	ldr	r3, [pc, #356]	; (800b8bc <pvPortMalloc+0x184>)
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4013      	ands	r3, r2
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f040 8093 	bne.w	800b888 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d01d      	beq.n	800b7a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b768:	2208      	movs	r2, #8
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	4413      	add	r3, r2
 800b76e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f003 0307 	and.w	r3, r3, #7
 800b776:	2b00      	cmp	r3, #0
 800b778:	d014      	beq.n	800b7a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f023 0307 	bic.w	r3, r3, #7
 800b780:	3308      	adds	r3, #8
 800b782:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f003 0307 	and.w	r3, r3, #7
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d00a      	beq.n	800b7a4 <pvPortMalloc+0x6c>
	__asm volatile
 800b78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b792:	f383 8811 	msr	BASEPRI, r3
 800b796:	f3bf 8f6f 	isb	sy
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	617b      	str	r3, [r7, #20]
}
 800b7a0:	bf00      	nop
 800b7a2:	e7fe      	b.n	800b7a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d06e      	beq.n	800b888 <pvPortMalloc+0x150>
 800b7aa:	4b45      	ldr	r3, [pc, #276]	; (800b8c0 <pvPortMalloc+0x188>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d869      	bhi.n	800b888 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b7b4:	4b43      	ldr	r3, [pc, #268]	; (800b8c4 <pvPortMalloc+0x18c>)
 800b7b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b7b8:	4b42      	ldr	r3, [pc, #264]	; (800b8c4 <pvPortMalloc+0x18c>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7be:	e004      	b.n	800b7ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d903      	bls.n	800b7dc <pvPortMalloc+0xa4>
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1f1      	bne.n	800b7c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b7dc:	4b36      	ldr	r3, [pc, #216]	; (800b8b8 <pvPortMalloc+0x180>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d050      	beq.n	800b888 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b7e6:	6a3b      	ldr	r3, [r7, #32]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2208      	movs	r2, #8
 800b7ec:	4413      	add	r3, r2
 800b7ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	6a3b      	ldr	r3, [r7, #32]
 800b7f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fa:	685a      	ldr	r2, [r3, #4]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	1ad2      	subs	r2, r2, r3
 800b800:	2308      	movs	r3, #8
 800b802:	005b      	lsls	r3, r3, #1
 800b804:	429a      	cmp	r2, r3
 800b806:	d91f      	bls.n	800b848 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4413      	add	r3, r2
 800b80e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	f003 0307 	and.w	r3, r3, #7
 800b816:	2b00      	cmp	r3, #0
 800b818:	d00a      	beq.n	800b830 <pvPortMalloc+0xf8>
	__asm volatile
 800b81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81e:	f383 8811 	msr	BASEPRI, r3
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	613b      	str	r3, [r7, #16]
}
 800b82c:	bf00      	nop
 800b82e:	e7fe      	b.n	800b82e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	1ad2      	subs	r2, r2, r3
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b842:	69b8      	ldr	r0, [r7, #24]
 800b844:	f000 f908 	bl	800ba58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b848:	4b1d      	ldr	r3, [pc, #116]	; (800b8c0 <pvPortMalloc+0x188>)
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	1ad3      	subs	r3, r2, r3
 800b852:	4a1b      	ldr	r2, [pc, #108]	; (800b8c0 <pvPortMalloc+0x188>)
 800b854:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b856:	4b1a      	ldr	r3, [pc, #104]	; (800b8c0 <pvPortMalloc+0x188>)
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	4b1b      	ldr	r3, [pc, #108]	; (800b8c8 <pvPortMalloc+0x190>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d203      	bcs.n	800b86a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b862:	4b17      	ldr	r3, [pc, #92]	; (800b8c0 <pvPortMalloc+0x188>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a18      	ldr	r2, [pc, #96]	; (800b8c8 <pvPortMalloc+0x190>)
 800b868:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86c:	685a      	ldr	r2, [r3, #4]
 800b86e:	4b13      	ldr	r3, [pc, #76]	; (800b8bc <pvPortMalloc+0x184>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	431a      	orrs	r2, r3
 800b874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b876:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87a:	2200      	movs	r2, #0
 800b87c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b87e:	4b13      	ldr	r3, [pc, #76]	; (800b8cc <pvPortMalloc+0x194>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3301      	adds	r3, #1
 800b884:	4a11      	ldr	r2, [pc, #68]	; (800b8cc <pvPortMalloc+0x194>)
 800b886:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b888:	f7fe fce8 	bl	800a25c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b88c:	69fb      	ldr	r3, [r7, #28]
 800b88e:	f003 0307 	and.w	r3, r3, #7
 800b892:	2b00      	cmp	r3, #0
 800b894:	d00a      	beq.n	800b8ac <pvPortMalloc+0x174>
	__asm volatile
 800b896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89a:	f383 8811 	msr	BASEPRI, r3
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f3bf 8f4f 	dsb	sy
 800b8a6:	60fb      	str	r3, [r7, #12]
}
 800b8a8:	bf00      	nop
 800b8aa:	e7fe      	b.n	800b8aa <pvPortMalloc+0x172>
	return pvReturn;
 800b8ac:	69fb      	ldr	r3, [r7, #28]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3728      	adds	r7, #40	; 0x28
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	20004e80 	.word	0x20004e80
 800b8bc:	20004e94 	.word	0x20004e94
 800b8c0:	20004e84 	.word	0x20004e84
 800b8c4:	20004e78 	.word	0x20004e78
 800b8c8:	20004e88 	.word	0x20004e88
 800b8cc:	20004e8c 	.word	0x20004e8c

0800b8d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b086      	sub	sp, #24
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d04d      	beq.n	800b97e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b8e2:	2308      	movs	r3, #8
 800b8e4:	425b      	negs	r3, r3
 800b8e6:	697a      	ldr	r2, [r7, #20]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	685a      	ldr	r2, [r3, #4]
 800b8f4:	4b24      	ldr	r3, [pc, #144]	; (800b988 <vPortFree+0xb8>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4013      	ands	r3, r2
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d10a      	bne.n	800b914 <vPortFree+0x44>
	__asm volatile
 800b8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b902:	f383 8811 	msr	BASEPRI, r3
 800b906:	f3bf 8f6f 	isb	sy
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	60fb      	str	r3, [r7, #12]
}
 800b910:	bf00      	nop
 800b912:	e7fe      	b.n	800b912 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00a      	beq.n	800b932 <vPortFree+0x62>
	__asm volatile
 800b91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b920:	f383 8811 	msr	BASEPRI, r3
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	f3bf 8f4f 	dsb	sy
 800b92c:	60bb      	str	r3, [r7, #8]
}
 800b92e:	bf00      	nop
 800b930:	e7fe      	b.n	800b930 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	685a      	ldr	r2, [r3, #4]
 800b936:	4b14      	ldr	r3, [pc, #80]	; (800b988 <vPortFree+0xb8>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4013      	ands	r3, r2
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d01e      	beq.n	800b97e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d11a      	bne.n	800b97e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	685a      	ldr	r2, [r3, #4]
 800b94c:	4b0e      	ldr	r3, [pc, #56]	; (800b988 <vPortFree+0xb8>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	43db      	mvns	r3, r3
 800b952:	401a      	ands	r2, r3
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b958:	f7fe fc72 	bl	800a240 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	685a      	ldr	r2, [r3, #4]
 800b960:	4b0a      	ldr	r3, [pc, #40]	; (800b98c <vPortFree+0xbc>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4413      	add	r3, r2
 800b966:	4a09      	ldr	r2, [pc, #36]	; (800b98c <vPortFree+0xbc>)
 800b968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b96a:	6938      	ldr	r0, [r7, #16]
 800b96c:	f000 f874 	bl	800ba58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b970:	4b07      	ldr	r3, [pc, #28]	; (800b990 <vPortFree+0xc0>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	3301      	adds	r3, #1
 800b976:	4a06      	ldr	r2, [pc, #24]	; (800b990 <vPortFree+0xc0>)
 800b978:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b97a:	f7fe fc6f 	bl	800a25c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b97e:	bf00      	nop
 800b980:	3718      	adds	r7, #24
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	20004e94 	.word	0x20004e94
 800b98c:	20004e84 	.word	0x20004e84
 800b990:	20004e90 	.word	0x20004e90

0800b994 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b99a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b99e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b9a0:	4b27      	ldr	r3, [pc, #156]	; (800ba40 <prvHeapInit+0xac>)
 800b9a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f003 0307 	and.w	r3, r3, #7
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00c      	beq.n	800b9c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	3307      	adds	r3, #7
 800b9b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f023 0307 	bic.w	r3, r3, #7
 800b9ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b9bc:	68ba      	ldr	r2, [r7, #8]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	1ad3      	subs	r3, r2, r3
 800b9c2:	4a1f      	ldr	r2, [pc, #124]	; (800ba40 <prvHeapInit+0xac>)
 800b9c4:	4413      	add	r3, r2
 800b9c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b9cc:	4a1d      	ldr	r2, [pc, #116]	; (800ba44 <prvHeapInit+0xb0>)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b9d2:	4b1c      	ldr	r3, [pc, #112]	; (800ba44 <prvHeapInit+0xb0>)
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	68ba      	ldr	r2, [r7, #8]
 800b9dc:	4413      	add	r3, r2
 800b9de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b9e0:	2208      	movs	r2, #8
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	1a9b      	subs	r3, r3, r2
 800b9e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f023 0307 	bic.w	r3, r3, #7
 800b9ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	4a15      	ldr	r2, [pc, #84]	; (800ba48 <prvHeapInit+0xb4>)
 800b9f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b9f6:	4b14      	ldr	r3, [pc, #80]	; (800ba48 <prvHeapInit+0xb4>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b9fe:	4b12      	ldr	r3, [pc, #72]	; (800ba48 <prvHeapInit+0xb4>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2200      	movs	r2, #0
 800ba04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	68fa      	ldr	r2, [r7, #12]
 800ba0e:	1ad2      	subs	r2, r2, r3
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba14:	4b0c      	ldr	r3, [pc, #48]	; (800ba48 <prvHeapInit+0xb4>)
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	4a0a      	ldr	r2, [pc, #40]	; (800ba4c <prvHeapInit+0xb8>)
 800ba22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	4a09      	ldr	r2, [pc, #36]	; (800ba50 <prvHeapInit+0xbc>)
 800ba2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba2c:	4b09      	ldr	r3, [pc, #36]	; (800ba54 <prvHeapInit+0xc0>)
 800ba2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ba32:	601a      	str	r2, [r3, #0]
}
 800ba34:	bf00      	nop
 800ba36:	3714      	adds	r7, #20
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr
 800ba40:	20001278 	.word	0x20001278
 800ba44:	20004e78 	.word	0x20004e78
 800ba48:	20004e80 	.word	0x20004e80
 800ba4c:	20004e88 	.word	0x20004e88
 800ba50:	20004e84 	.word	0x20004e84
 800ba54:	20004e94 	.word	0x20004e94

0800ba58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba60:	4b28      	ldr	r3, [pc, #160]	; (800bb04 <prvInsertBlockIntoFreeList+0xac>)
 800ba62:	60fb      	str	r3, [r7, #12]
 800ba64:	e002      	b.n	800ba6c <prvInsertBlockIntoFreeList+0x14>
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	60fb      	str	r3, [r7, #12]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d8f7      	bhi.n	800ba66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	4413      	add	r3, r2
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d108      	bne.n	800ba9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	685a      	ldr	r2, [r3, #4]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	441a      	add	r2, r3
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	441a      	add	r2, r3
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d118      	bne.n	800bae0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	4b15      	ldr	r3, [pc, #84]	; (800bb08 <prvInsertBlockIntoFreeList+0xb0>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d00d      	beq.n	800bad6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	685a      	ldr	r2, [r3, #4]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	441a      	add	r2, r3
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	601a      	str	r2, [r3, #0]
 800bad4:	e008      	b.n	800bae8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bad6:	4b0c      	ldr	r3, [pc, #48]	; (800bb08 <prvInsertBlockIntoFreeList+0xb0>)
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	601a      	str	r2, [r3, #0]
 800bade:	e003      	b.n	800bae8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	429a      	cmp	r2, r3
 800baee:	d002      	beq.n	800baf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800baf6:	bf00      	nop
 800baf8:	3714      	adds	r7, #20
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr
 800bb02:	bf00      	nop
 800bb04:	20004e78 	.word	0x20004e78
 800bb08:	20004e80 	.word	0x20004e80

0800bb0c <_Znwj>:
 800bb0c:	2801      	cmp	r0, #1
 800bb0e:	bf38      	it	cc
 800bb10:	2001      	movcc	r0, #1
 800bb12:	b510      	push	{r4, lr}
 800bb14:	4604      	mov	r4, r0
 800bb16:	4620      	mov	r0, r4
 800bb18:	f000 fa70 	bl	800bffc <malloc>
 800bb1c:	b930      	cbnz	r0, 800bb2c <_Znwj+0x20>
 800bb1e:	f000 f81b 	bl	800bb58 <_ZSt15get_new_handlerv>
 800bb22:	b908      	cbnz	r0, 800bb28 <_Znwj+0x1c>
 800bb24:	f000 f820 	bl	800bb68 <abort>
 800bb28:	4780      	blx	r0
 800bb2a:	e7f4      	b.n	800bb16 <_Znwj+0xa>
 800bb2c:	bd10      	pop	{r4, pc}

0800bb2e <__cxa_pure_virtual>:
 800bb2e:	b508      	push	{r3, lr}
 800bb30:	f000 f80c 	bl	800bb4c <_ZSt9terminatev>

0800bb34 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800bb34:	b508      	push	{r3, lr}
 800bb36:	4780      	blx	r0
 800bb38:	f000 f816 	bl	800bb68 <abort>

0800bb3c <_ZSt13get_terminatev>:
 800bb3c:	4b02      	ldr	r3, [pc, #8]	; (800bb48 <_ZSt13get_terminatev+0xc>)
 800bb3e:	6818      	ldr	r0, [r3, #0]
 800bb40:	f3bf 8f5b 	dmb	ish
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	2000001c 	.word	0x2000001c

0800bb4c <_ZSt9terminatev>:
 800bb4c:	b508      	push	{r3, lr}
 800bb4e:	f7ff fff5 	bl	800bb3c <_ZSt13get_terminatev>
 800bb52:	f7ff ffef 	bl	800bb34 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800bb58 <_ZSt15get_new_handlerv>:
 800bb58:	4b02      	ldr	r3, [pc, #8]	; (800bb64 <_ZSt15get_new_handlerv+0xc>)
 800bb5a:	6818      	ldr	r0, [r3, #0]
 800bb5c:	f3bf 8f5b 	dmb	ish
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop
 800bb64:	20004e98 	.word	0x20004e98

0800bb68 <abort>:
 800bb68:	b508      	push	{r3, lr}
 800bb6a:	2006      	movs	r0, #6
 800bb6c:	f001 faba 	bl	800d0e4 <raise>
 800bb70:	2001      	movs	r0, #1
 800bb72:	f7f6 f847 	bl	8001c04 <_exit>
	...

0800bb78 <__errno>:
 800bb78:	4b01      	ldr	r3, [pc, #4]	; (800bb80 <__errno+0x8>)
 800bb7a:	6818      	ldr	r0, [r3, #0]
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop
 800bb80:	20000020 	.word	0x20000020

0800bb84 <std>:
 800bb84:	2300      	movs	r3, #0
 800bb86:	b510      	push	{r4, lr}
 800bb88:	4604      	mov	r4, r0
 800bb8a:	e9c0 3300 	strd	r3, r3, [r0]
 800bb8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bb92:	6083      	str	r3, [r0, #8]
 800bb94:	8181      	strh	r1, [r0, #12]
 800bb96:	6643      	str	r3, [r0, #100]	; 0x64
 800bb98:	81c2      	strh	r2, [r0, #14]
 800bb9a:	6183      	str	r3, [r0, #24]
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	2208      	movs	r2, #8
 800bba0:	305c      	adds	r0, #92	; 0x5c
 800bba2:	f000 fa63 	bl	800c06c <memset>
 800bba6:	4b05      	ldr	r3, [pc, #20]	; (800bbbc <std+0x38>)
 800bba8:	6263      	str	r3, [r4, #36]	; 0x24
 800bbaa:	4b05      	ldr	r3, [pc, #20]	; (800bbc0 <std+0x3c>)
 800bbac:	62a3      	str	r3, [r4, #40]	; 0x28
 800bbae:	4b05      	ldr	r3, [pc, #20]	; (800bbc4 <std+0x40>)
 800bbb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bbb2:	4b05      	ldr	r3, [pc, #20]	; (800bbc8 <std+0x44>)
 800bbb4:	6224      	str	r4, [r4, #32]
 800bbb6:	6323      	str	r3, [r4, #48]	; 0x30
 800bbb8:	bd10      	pop	{r4, pc}
 800bbba:	bf00      	nop
 800bbbc:	0800d15d 	.word	0x0800d15d
 800bbc0:	0800d183 	.word	0x0800d183
 800bbc4:	0800d1bb 	.word	0x0800d1bb
 800bbc8:	0800d1df 	.word	0x0800d1df

0800bbcc <_cleanup_r>:
 800bbcc:	4901      	ldr	r1, [pc, #4]	; (800bbd4 <_cleanup_r+0x8>)
 800bbce:	f000 b8af 	b.w	800bd30 <_fwalk_reent>
 800bbd2:	bf00      	nop
 800bbd4:	0800e74d 	.word	0x0800e74d

0800bbd8 <__sfmoreglue>:
 800bbd8:	b570      	push	{r4, r5, r6, lr}
 800bbda:	1e4a      	subs	r2, r1, #1
 800bbdc:	2568      	movs	r5, #104	; 0x68
 800bbde:	4355      	muls	r5, r2
 800bbe0:	460e      	mov	r6, r1
 800bbe2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bbe6:	f000 fd17 	bl	800c618 <_malloc_r>
 800bbea:	4604      	mov	r4, r0
 800bbec:	b140      	cbz	r0, 800bc00 <__sfmoreglue+0x28>
 800bbee:	2100      	movs	r1, #0
 800bbf0:	e9c0 1600 	strd	r1, r6, [r0]
 800bbf4:	300c      	adds	r0, #12
 800bbf6:	60a0      	str	r0, [r4, #8]
 800bbf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bbfc:	f000 fa36 	bl	800c06c <memset>
 800bc00:	4620      	mov	r0, r4
 800bc02:	bd70      	pop	{r4, r5, r6, pc}

0800bc04 <__sfp_lock_acquire>:
 800bc04:	4801      	ldr	r0, [pc, #4]	; (800bc0c <__sfp_lock_acquire+0x8>)
 800bc06:	f000 b9f5 	b.w	800bff4 <__retarget_lock_acquire_recursive>
 800bc0a:	bf00      	nop
 800bc0c:	20005094 	.word	0x20005094

0800bc10 <__sfp_lock_release>:
 800bc10:	4801      	ldr	r0, [pc, #4]	; (800bc18 <__sfp_lock_release+0x8>)
 800bc12:	f000 b9f1 	b.w	800bff8 <__retarget_lock_release_recursive>
 800bc16:	bf00      	nop
 800bc18:	20005094 	.word	0x20005094

0800bc1c <__sinit_lock_acquire>:
 800bc1c:	4801      	ldr	r0, [pc, #4]	; (800bc24 <__sinit_lock_acquire+0x8>)
 800bc1e:	f000 b9e9 	b.w	800bff4 <__retarget_lock_acquire_recursive>
 800bc22:	bf00      	nop
 800bc24:	2000508f 	.word	0x2000508f

0800bc28 <__sinit_lock_release>:
 800bc28:	4801      	ldr	r0, [pc, #4]	; (800bc30 <__sinit_lock_release+0x8>)
 800bc2a:	f000 b9e5 	b.w	800bff8 <__retarget_lock_release_recursive>
 800bc2e:	bf00      	nop
 800bc30:	2000508f 	.word	0x2000508f

0800bc34 <__sinit>:
 800bc34:	b510      	push	{r4, lr}
 800bc36:	4604      	mov	r4, r0
 800bc38:	f7ff fff0 	bl	800bc1c <__sinit_lock_acquire>
 800bc3c:	69a3      	ldr	r3, [r4, #24]
 800bc3e:	b11b      	cbz	r3, 800bc48 <__sinit+0x14>
 800bc40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc44:	f7ff bff0 	b.w	800bc28 <__sinit_lock_release>
 800bc48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bc4c:	6523      	str	r3, [r4, #80]	; 0x50
 800bc4e:	4b13      	ldr	r3, [pc, #76]	; (800bc9c <__sinit+0x68>)
 800bc50:	4a13      	ldr	r2, [pc, #76]	; (800bca0 <__sinit+0x6c>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	62a2      	str	r2, [r4, #40]	; 0x28
 800bc56:	42a3      	cmp	r3, r4
 800bc58:	bf04      	itt	eq
 800bc5a:	2301      	moveq	r3, #1
 800bc5c:	61a3      	streq	r3, [r4, #24]
 800bc5e:	4620      	mov	r0, r4
 800bc60:	f000 f820 	bl	800bca4 <__sfp>
 800bc64:	6060      	str	r0, [r4, #4]
 800bc66:	4620      	mov	r0, r4
 800bc68:	f000 f81c 	bl	800bca4 <__sfp>
 800bc6c:	60a0      	str	r0, [r4, #8]
 800bc6e:	4620      	mov	r0, r4
 800bc70:	f000 f818 	bl	800bca4 <__sfp>
 800bc74:	2200      	movs	r2, #0
 800bc76:	60e0      	str	r0, [r4, #12]
 800bc78:	2104      	movs	r1, #4
 800bc7a:	6860      	ldr	r0, [r4, #4]
 800bc7c:	f7ff ff82 	bl	800bb84 <std>
 800bc80:	68a0      	ldr	r0, [r4, #8]
 800bc82:	2201      	movs	r2, #1
 800bc84:	2109      	movs	r1, #9
 800bc86:	f7ff ff7d 	bl	800bb84 <std>
 800bc8a:	68e0      	ldr	r0, [r4, #12]
 800bc8c:	2202      	movs	r2, #2
 800bc8e:	2112      	movs	r1, #18
 800bc90:	f7ff ff78 	bl	800bb84 <std>
 800bc94:	2301      	movs	r3, #1
 800bc96:	61a3      	str	r3, [r4, #24]
 800bc98:	e7d2      	b.n	800bc40 <__sinit+0xc>
 800bc9a:	bf00      	nop
 800bc9c:	08011374 	.word	0x08011374
 800bca0:	0800bbcd 	.word	0x0800bbcd

0800bca4 <__sfp>:
 800bca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca6:	4607      	mov	r7, r0
 800bca8:	f7ff ffac 	bl	800bc04 <__sfp_lock_acquire>
 800bcac:	4b1e      	ldr	r3, [pc, #120]	; (800bd28 <__sfp+0x84>)
 800bcae:	681e      	ldr	r6, [r3, #0]
 800bcb0:	69b3      	ldr	r3, [r6, #24]
 800bcb2:	b913      	cbnz	r3, 800bcba <__sfp+0x16>
 800bcb4:	4630      	mov	r0, r6
 800bcb6:	f7ff ffbd 	bl	800bc34 <__sinit>
 800bcba:	3648      	adds	r6, #72	; 0x48
 800bcbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	d503      	bpl.n	800bccc <__sfp+0x28>
 800bcc4:	6833      	ldr	r3, [r6, #0]
 800bcc6:	b30b      	cbz	r3, 800bd0c <__sfp+0x68>
 800bcc8:	6836      	ldr	r6, [r6, #0]
 800bcca:	e7f7      	b.n	800bcbc <__sfp+0x18>
 800bccc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bcd0:	b9d5      	cbnz	r5, 800bd08 <__sfp+0x64>
 800bcd2:	4b16      	ldr	r3, [pc, #88]	; (800bd2c <__sfp+0x88>)
 800bcd4:	60e3      	str	r3, [r4, #12]
 800bcd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bcda:	6665      	str	r5, [r4, #100]	; 0x64
 800bcdc:	f000 f988 	bl	800bff0 <__retarget_lock_init_recursive>
 800bce0:	f7ff ff96 	bl	800bc10 <__sfp_lock_release>
 800bce4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bce8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bcec:	6025      	str	r5, [r4, #0]
 800bcee:	61a5      	str	r5, [r4, #24]
 800bcf0:	2208      	movs	r2, #8
 800bcf2:	4629      	mov	r1, r5
 800bcf4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bcf8:	f000 f9b8 	bl	800c06c <memset>
 800bcfc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bd00:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bd04:	4620      	mov	r0, r4
 800bd06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd08:	3468      	adds	r4, #104	; 0x68
 800bd0a:	e7d9      	b.n	800bcc0 <__sfp+0x1c>
 800bd0c:	2104      	movs	r1, #4
 800bd0e:	4638      	mov	r0, r7
 800bd10:	f7ff ff62 	bl	800bbd8 <__sfmoreglue>
 800bd14:	4604      	mov	r4, r0
 800bd16:	6030      	str	r0, [r6, #0]
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	d1d5      	bne.n	800bcc8 <__sfp+0x24>
 800bd1c:	f7ff ff78 	bl	800bc10 <__sfp_lock_release>
 800bd20:	230c      	movs	r3, #12
 800bd22:	603b      	str	r3, [r7, #0]
 800bd24:	e7ee      	b.n	800bd04 <__sfp+0x60>
 800bd26:	bf00      	nop
 800bd28:	08011374 	.word	0x08011374
 800bd2c:	ffff0001 	.word	0xffff0001

0800bd30 <_fwalk_reent>:
 800bd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd34:	4606      	mov	r6, r0
 800bd36:	4688      	mov	r8, r1
 800bd38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bd3c:	2700      	movs	r7, #0
 800bd3e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd42:	f1b9 0901 	subs.w	r9, r9, #1
 800bd46:	d505      	bpl.n	800bd54 <_fwalk_reent+0x24>
 800bd48:	6824      	ldr	r4, [r4, #0]
 800bd4a:	2c00      	cmp	r4, #0
 800bd4c:	d1f7      	bne.n	800bd3e <_fwalk_reent+0xe>
 800bd4e:	4638      	mov	r0, r7
 800bd50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd54:	89ab      	ldrh	r3, [r5, #12]
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d907      	bls.n	800bd6a <_fwalk_reent+0x3a>
 800bd5a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	d003      	beq.n	800bd6a <_fwalk_reent+0x3a>
 800bd62:	4629      	mov	r1, r5
 800bd64:	4630      	mov	r0, r6
 800bd66:	47c0      	blx	r8
 800bd68:	4307      	orrs	r7, r0
 800bd6a:	3568      	adds	r5, #104	; 0x68
 800bd6c:	e7e9      	b.n	800bd42 <_fwalk_reent+0x12>
	...

0800bd70 <__libc_init_array>:
 800bd70:	b570      	push	{r4, r5, r6, lr}
 800bd72:	4d0d      	ldr	r5, [pc, #52]	; (800bda8 <__libc_init_array+0x38>)
 800bd74:	4c0d      	ldr	r4, [pc, #52]	; (800bdac <__libc_init_array+0x3c>)
 800bd76:	1b64      	subs	r4, r4, r5
 800bd78:	10a4      	asrs	r4, r4, #2
 800bd7a:	2600      	movs	r6, #0
 800bd7c:	42a6      	cmp	r6, r4
 800bd7e:	d109      	bne.n	800bd94 <__libc_init_array+0x24>
 800bd80:	4d0b      	ldr	r5, [pc, #44]	; (800bdb0 <__libc_init_array+0x40>)
 800bd82:	4c0c      	ldr	r4, [pc, #48]	; (800bdb4 <__libc_init_array+0x44>)
 800bd84:	f004 f9fa 	bl	801017c <_init>
 800bd88:	1b64      	subs	r4, r4, r5
 800bd8a:	10a4      	asrs	r4, r4, #2
 800bd8c:	2600      	movs	r6, #0
 800bd8e:	42a6      	cmp	r6, r4
 800bd90:	d105      	bne.n	800bd9e <__libc_init_array+0x2e>
 800bd92:	bd70      	pop	{r4, r5, r6, pc}
 800bd94:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd98:	4798      	blx	r3
 800bd9a:	3601      	adds	r6, #1
 800bd9c:	e7ee      	b.n	800bd7c <__libc_init_array+0xc>
 800bd9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bda2:	4798      	blx	r3
 800bda4:	3601      	adds	r6, #1
 800bda6:	e7f2      	b.n	800bd8e <__libc_init_array+0x1e>
 800bda8:	08011878 	.word	0x08011878
 800bdac:	08011878 	.word	0x08011878
 800bdb0:	08011878 	.word	0x08011878
 800bdb4:	08011880 	.word	0x08011880

0800bdb8 <isxdigit>:
 800bdb8:	4b02      	ldr	r3, [pc, #8]	; (800bdc4 <isxdigit+0xc>)
 800bdba:	4418      	add	r0, r3
 800bdbc:	7840      	ldrb	r0, [r0, #1]
 800bdbe:	f000 0044 	and.w	r0, r0, #68	; 0x44
 800bdc2:	4770      	bx	lr
 800bdc4:	0801155a 	.word	0x0801155a

0800bdc8 <localtime>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4b0b      	ldr	r3, [pc, #44]	; (800bdf8 <localtime+0x30>)
 800bdcc:	681d      	ldr	r5, [r3, #0]
 800bdce:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800bdd0:	4604      	mov	r4, r0
 800bdd2:	b953      	cbnz	r3, 800bdea <localtime+0x22>
 800bdd4:	2024      	movs	r0, #36	; 0x24
 800bdd6:	f000 f911 	bl	800bffc <malloc>
 800bdda:	4602      	mov	r2, r0
 800bddc:	63e8      	str	r0, [r5, #60]	; 0x3c
 800bdde:	b920      	cbnz	r0, 800bdea <localtime+0x22>
 800bde0:	4b06      	ldr	r3, [pc, #24]	; (800bdfc <localtime+0x34>)
 800bde2:	4807      	ldr	r0, [pc, #28]	; (800be00 <localtime+0x38>)
 800bde4:	2132      	movs	r1, #50	; 0x32
 800bde6:	f001 fd6f 	bl	800d8c8 <__assert_func>
 800bdea:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800bdec:	4620      	mov	r0, r4
 800bdee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdf2:	f000 b807 	b.w	800be04 <localtime_r>
 800bdf6:	bf00      	nop
 800bdf8:	20000020 	.word	0x20000020
 800bdfc:	08011378 	.word	0x08011378
 800be00:	0801138f 	.word	0x0801138f

0800be04 <localtime_r>:
 800be04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800be08:	4607      	mov	r7, r0
 800be0a:	9101      	str	r1, [sp, #4]
 800be0c:	f002 fd2e 	bl	800e86c <__gettzinfo>
 800be10:	9901      	ldr	r1, [sp, #4]
 800be12:	4680      	mov	r8, r0
 800be14:	4638      	mov	r0, r7
 800be16:	f002 fd2d 	bl	800e874 <gmtime_r>
 800be1a:	6943      	ldr	r3, [r0, #20]
 800be1c:	079a      	lsls	r2, r3, #30
 800be1e:	4604      	mov	r4, r0
 800be20:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 800be24:	d105      	bne.n	800be32 <localtime_r+0x2e>
 800be26:	2264      	movs	r2, #100	; 0x64
 800be28:	fb96 f3f2 	sdiv	r3, r6, r2
 800be2c:	fb02 6313 	mls	r3, r2, r3, r6
 800be30:	bb7b      	cbnz	r3, 800be92 <localtime_r+0x8e>
 800be32:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800be36:	fb96 f5f3 	sdiv	r5, r6, r3
 800be3a:	fb03 6515 	mls	r5, r3, r5, r6
 800be3e:	fab5 f585 	clz	r5, r5
 800be42:	096d      	lsrs	r5, r5, #5
 800be44:	4b68      	ldr	r3, [pc, #416]	; (800bfe8 <localtime_r+0x1e4>)
 800be46:	2230      	movs	r2, #48	; 0x30
 800be48:	fb02 3505 	mla	r5, r2, r5, r3
 800be4c:	f001 fb9c 	bl	800d588 <__tz_lock>
 800be50:	f001 fba6 	bl	800d5a0 <_tzset_unlocked>
 800be54:	4b65      	ldr	r3, [pc, #404]	; (800bfec <localtime_r+0x1e8>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	b353      	cbz	r3, 800beb0 <localtime_r+0xac>
 800be5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800be5e:	42b3      	cmp	r3, r6
 800be60:	d119      	bne.n	800be96 <localtime_r+0x92>
 800be62:	f8d8 1000 	ldr.w	r1, [r8]
 800be66:	e9d7 6700 	ldrd	r6, r7, [r7]
 800be6a:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 800be6e:	b9d1      	cbnz	r1, 800bea6 <localtime_r+0xa2>
 800be70:	4296      	cmp	r6, r2
 800be72:	eb77 0303 	sbcs.w	r3, r7, r3
 800be76:	da23      	bge.n	800bec0 <localtime_r+0xbc>
 800be78:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 800be7c:	4296      	cmp	r6, r2
 800be7e:	eb77 0303 	sbcs.w	r3, r7, r3
 800be82:	bfb4      	ite	lt
 800be84:	2301      	movlt	r3, #1
 800be86:	2300      	movge	r3, #0
 800be88:	6223      	str	r3, [r4, #32]
 800be8a:	db1b      	blt.n	800bec4 <localtime_r+0xc0>
 800be8c:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 800be90:	e01a      	b.n	800bec8 <localtime_r+0xc4>
 800be92:	2501      	movs	r5, #1
 800be94:	e7d6      	b.n	800be44 <localtime_r+0x40>
 800be96:	4630      	mov	r0, r6
 800be98:	f001 face 	bl	800d438 <__tzcalc_limits>
 800be9c:	2800      	cmp	r0, #0
 800be9e:	d1e0      	bne.n	800be62 <localtime_r+0x5e>
 800bea0:	f04f 33ff 	mov.w	r3, #4294967295
 800bea4:	e004      	b.n	800beb0 <localtime_r+0xac>
 800bea6:	4296      	cmp	r6, r2
 800bea8:	eb77 0303 	sbcs.w	r3, r7, r3
 800beac:	da02      	bge.n	800beb4 <localtime_r+0xb0>
 800beae:	2300      	movs	r3, #0
 800beb0:	6223      	str	r3, [r4, #32]
 800beb2:	e7eb      	b.n	800be8c <localtime_r+0x88>
 800beb4:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 800beb8:	4296      	cmp	r6, r2
 800beba:	eb77 0303 	sbcs.w	r3, r7, r3
 800bebe:	daf6      	bge.n	800beae <localtime_r+0xaa>
 800bec0:	2301      	movs	r3, #1
 800bec2:	6223      	str	r3, [r4, #32]
 800bec4:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 800bec8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800becc:	203c      	movs	r0, #60	; 0x3c
 800bece:	fb91 f6f3 	sdiv	r6, r1, r3
 800bed2:	fb03 1316 	mls	r3, r3, r6, r1
 800bed6:	6861      	ldr	r1, [r4, #4]
 800bed8:	fb93 f2f0 	sdiv	r2, r3, r0
 800bedc:	fb00 3012 	mls	r0, r0, r2, r3
 800bee0:	6823      	ldr	r3, [r4, #0]
 800bee2:	1a89      	subs	r1, r1, r2
 800bee4:	68a2      	ldr	r2, [r4, #8]
 800bee6:	6061      	str	r1, [r4, #4]
 800bee8:	1a1b      	subs	r3, r3, r0
 800beea:	1b92      	subs	r2, r2, r6
 800beec:	2b3b      	cmp	r3, #59	; 0x3b
 800beee:	6023      	str	r3, [r4, #0]
 800bef0:	60a2      	str	r2, [r4, #8]
 800bef2:	dd35      	ble.n	800bf60 <localtime_r+0x15c>
 800bef4:	3101      	adds	r1, #1
 800bef6:	6061      	str	r1, [r4, #4]
 800bef8:	3b3c      	subs	r3, #60	; 0x3c
 800befa:	6023      	str	r3, [r4, #0]
 800befc:	6863      	ldr	r3, [r4, #4]
 800befe:	2b3b      	cmp	r3, #59	; 0x3b
 800bf00:	dd34      	ble.n	800bf6c <localtime_r+0x168>
 800bf02:	3201      	adds	r2, #1
 800bf04:	60a2      	str	r2, [r4, #8]
 800bf06:	3b3c      	subs	r3, #60	; 0x3c
 800bf08:	6063      	str	r3, [r4, #4]
 800bf0a:	68a3      	ldr	r3, [r4, #8]
 800bf0c:	2b17      	cmp	r3, #23
 800bf0e:	dd33      	ble.n	800bf78 <localtime_r+0x174>
 800bf10:	69e2      	ldr	r2, [r4, #28]
 800bf12:	3201      	adds	r2, #1
 800bf14:	61e2      	str	r2, [r4, #28]
 800bf16:	69a2      	ldr	r2, [r4, #24]
 800bf18:	3201      	adds	r2, #1
 800bf1a:	2a06      	cmp	r2, #6
 800bf1c:	bfc8      	it	gt
 800bf1e:	2200      	movgt	r2, #0
 800bf20:	61a2      	str	r2, [r4, #24]
 800bf22:	68e2      	ldr	r2, [r4, #12]
 800bf24:	3b18      	subs	r3, #24
 800bf26:	3201      	adds	r2, #1
 800bf28:	60a3      	str	r3, [r4, #8]
 800bf2a:	6923      	ldr	r3, [r4, #16]
 800bf2c:	60e2      	str	r2, [r4, #12]
 800bf2e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800bf32:	428a      	cmp	r2, r1
 800bf34:	dd0e      	ble.n	800bf54 <localtime_r+0x150>
 800bf36:	2b0b      	cmp	r3, #11
 800bf38:	eba2 0201 	sub.w	r2, r2, r1
 800bf3c:	60e2      	str	r2, [r4, #12]
 800bf3e:	f103 0201 	add.w	r2, r3, #1
 800bf42:	bf09      	itett	eq
 800bf44:	6963      	ldreq	r3, [r4, #20]
 800bf46:	6122      	strne	r2, [r4, #16]
 800bf48:	2200      	moveq	r2, #0
 800bf4a:	3301      	addeq	r3, #1
 800bf4c:	bf02      	ittt	eq
 800bf4e:	6122      	streq	r2, [r4, #16]
 800bf50:	6163      	streq	r3, [r4, #20]
 800bf52:	61e2      	streq	r2, [r4, #28]
 800bf54:	f001 fb1e 	bl	800d594 <__tz_unlock>
 800bf58:	4620      	mov	r0, r4
 800bf5a:	b002      	add	sp, #8
 800bf5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	dacb      	bge.n	800befc <localtime_r+0xf8>
 800bf64:	3901      	subs	r1, #1
 800bf66:	6061      	str	r1, [r4, #4]
 800bf68:	333c      	adds	r3, #60	; 0x3c
 800bf6a:	e7c6      	b.n	800befa <localtime_r+0xf6>
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	dacc      	bge.n	800bf0a <localtime_r+0x106>
 800bf70:	3a01      	subs	r2, #1
 800bf72:	60a2      	str	r2, [r4, #8]
 800bf74:	333c      	adds	r3, #60	; 0x3c
 800bf76:	e7c7      	b.n	800bf08 <localtime_r+0x104>
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	daeb      	bge.n	800bf54 <localtime_r+0x150>
 800bf7c:	69e2      	ldr	r2, [r4, #28]
 800bf7e:	3a01      	subs	r2, #1
 800bf80:	61e2      	str	r2, [r4, #28]
 800bf82:	69a2      	ldr	r2, [r4, #24]
 800bf84:	3a01      	subs	r2, #1
 800bf86:	bf48      	it	mi
 800bf88:	2206      	movmi	r2, #6
 800bf8a:	61a2      	str	r2, [r4, #24]
 800bf8c:	68e2      	ldr	r2, [r4, #12]
 800bf8e:	3318      	adds	r3, #24
 800bf90:	3a01      	subs	r2, #1
 800bf92:	60e2      	str	r2, [r4, #12]
 800bf94:	60a3      	str	r3, [r4, #8]
 800bf96:	2a00      	cmp	r2, #0
 800bf98:	d1dc      	bne.n	800bf54 <localtime_r+0x150>
 800bf9a:	6923      	ldr	r3, [r4, #16]
 800bf9c:	3b01      	subs	r3, #1
 800bf9e:	d405      	bmi.n	800bfac <localtime_r+0x1a8>
 800bfa0:	6123      	str	r3, [r4, #16]
 800bfa2:	6923      	ldr	r3, [r4, #16]
 800bfa4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800bfa8:	60e3      	str	r3, [r4, #12]
 800bfaa:	e7d3      	b.n	800bf54 <localtime_r+0x150>
 800bfac:	230b      	movs	r3, #11
 800bfae:	6123      	str	r3, [r4, #16]
 800bfb0:	6963      	ldr	r3, [r4, #20]
 800bfb2:	1e5a      	subs	r2, r3, #1
 800bfb4:	6162      	str	r2, [r4, #20]
 800bfb6:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 800bfba:	0793      	lsls	r3, r2, #30
 800bfbc:	d105      	bne.n	800bfca <localtime_r+0x1c6>
 800bfbe:	2164      	movs	r1, #100	; 0x64
 800bfc0:	fb92 f3f1 	sdiv	r3, r2, r1
 800bfc4:	fb01 2313 	mls	r3, r1, r3, r2
 800bfc8:	b963      	cbnz	r3, 800bfe4 <localtime_r+0x1e0>
 800bfca:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800bfce:	fb92 f3f1 	sdiv	r3, r2, r1
 800bfd2:	fb01 2313 	mls	r3, r1, r3, r2
 800bfd6:	fab3 f383 	clz	r3, r3
 800bfda:	095b      	lsrs	r3, r3, #5
 800bfdc:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800bfe0:	61e3      	str	r3, [r4, #28]
 800bfe2:	e7de      	b.n	800bfa2 <localtime_r+0x19e>
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	e7f9      	b.n	800bfdc <localtime_r+0x1d8>
 800bfe8:	08011450 	.word	0x08011450
 800bfec:	20004ec0 	.word	0x20004ec0

0800bff0 <__retarget_lock_init_recursive>:
 800bff0:	4770      	bx	lr

0800bff2 <__retarget_lock_acquire>:
 800bff2:	4770      	bx	lr

0800bff4 <__retarget_lock_acquire_recursive>:
 800bff4:	4770      	bx	lr

0800bff6 <__retarget_lock_release>:
 800bff6:	4770      	bx	lr

0800bff8 <__retarget_lock_release_recursive>:
 800bff8:	4770      	bx	lr
	...

0800bffc <malloc>:
 800bffc:	4b02      	ldr	r3, [pc, #8]	; (800c008 <malloc+0xc>)
 800bffe:	4601      	mov	r1, r0
 800c000:	6818      	ldr	r0, [r3, #0]
 800c002:	f000 bb09 	b.w	800c618 <_malloc_r>
 800c006:	bf00      	nop
 800c008:	20000020 	.word	0x20000020

0800c00c <free>:
 800c00c:	4b02      	ldr	r3, [pc, #8]	; (800c018 <free+0xc>)
 800c00e:	4601      	mov	r1, r0
 800c010:	6818      	ldr	r0, [r3, #0]
 800c012:	f000 bab1 	b.w	800c578 <_free_r>
 800c016:	bf00      	nop
 800c018:	20000020 	.word	0x20000020

0800c01c <memcpy>:
 800c01c:	440a      	add	r2, r1
 800c01e:	4291      	cmp	r1, r2
 800c020:	f100 33ff 	add.w	r3, r0, #4294967295
 800c024:	d100      	bne.n	800c028 <memcpy+0xc>
 800c026:	4770      	bx	lr
 800c028:	b510      	push	{r4, lr}
 800c02a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c02e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c032:	4291      	cmp	r1, r2
 800c034:	d1f9      	bne.n	800c02a <memcpy+0xe>
 800c036:	bd10      	pop	{r4, pc}

0800c038 <memmove>:
 800c038:	4288      	cmp	r0, r1
 800c03a:	b510      	push	{r4, lr}
 800c03c:	eb01 0402 	add.w	r4, r1, r2
 800c040:	d902      	bls.n	800c048 <memmove+0x10>
 800c042:	4284      	cmp	r4, r0
 800c044:	4623      	mov	r3, r4
 800c046:	d807      	bhi.n	800c058 <memmove+0x20>
 800c048:	1e43      	subs	r3, r0, #1
 800c04a:	42a1      	cmp	r1, r4
 800c04c:	d008      	beq.n	800c060 <memmove+0x28>
 800c04e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c052:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c056:	e7f8      	b.n	800c04a <memmove+0x12>
 800c058:	4402      	add	r2, r0
 800c05a:	4601      	mov	r1, r0
 800c05c:	428a      	cmp	r2, r1
 800c05e:	d100      	bne.n	800c062 <memmove+0x2a>
 800c060:	bd10      	pop	{r4, pc}
 800c062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c066:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c06a:	e7f7      	b.n	800c05c <memmove+0x24>

0800c06c <memset>:
 800c06c:	4402      	add	r2, r0
 800c06e:	4603      	mov	r3, r0
 800c070:	4293      	cmp	r3, r2
 800c072:	d100      	bne.n	800c076 <memset+0xa>
 800c074:	4770      	bx	lr
 800c076:	f803 1b01 	strb.w	r1, [r3], #1
 800c07a:	e7f9      	b.n	800c070 <memset+0x4>

0800c07c <validate_structure>:
 800c07c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c07e:	6801      	ldr	r1, [r0, #0]
 800c080:	293b      	cmp	r1, #59	; 0x3b
 800c082:	4604      	mov	r4, r0
 800c084:	d911      	bls.n	800c0aa <validate_structure+0x2e>
 800c086:	223c      	movs	r2, #60	; 0x3c
 800c088:	4668      	mov	r0, sp
 800c08a:	f001 fc4b 	bl	800d924 <div>
 800c08e:	9a01      	ldr	r2, [sp, #4]
 800c090:	6863      	ldr	r3, [r4, #4]
 800c092:	9900      	ldr	r1, [sp, #0]
 800c094:	2a00      	cmp	r2, #0
 800c096:	440b      	add	r3, r1
 800c098:	6063      	str	r3, [r4, #4]
 800c09a:	bfbb      	ittet	lt
 800c09c:	323c      	addlt	r2, #60	; 0x3c
 800c09e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c0a2:	6022      	strge	r2, [r4, #0]
 800c0a4:	6022      	strlt	r2, [r4, #0]
 800c0a6:	bfb8      	it	lt
 800c0a8:	6063      	strlt	r3, [r4, #4]
 800c0aa:	6861      	ldr	r1, [r4, #4]
 800c0ac:	293b      	cmp	r1, #59	; 0x3b
 800c0ae:	d911      	bls.n	800c0d4 <validate_structure+0x58>
 800c0b0:	223c      	movs	r2, #60	; 0x3c
 800c0b2:	4668      	mov	r0, sp
 800c0b4:	f001 fc36 	bl	800d924 <div>
 800c0b8:	9a01      	ldr	r2, [sp, #4]
 800c0ba:	68a3      	ldr	r3, [r4, #8]
 800c0bc:	9900      	ldr	r1, [sp, #0]
 800c0be:	2a00      	cmp	r2, #0
 800c0c0:	440b      	add	r3, r1
 800c0c2:	60a3      	str	r3, [r4, #8]
 800c0c4:	bfbb      	ittet	lt
 800c0c6:	323c      	addlt	r2, #60	; 0x3c
 800c0c8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c0cc:	6062      	strge	r2, [r4, #4]
 800c0ce:	6062      	strlt	r2, [r4, #4]
 800c0d0:	bfb8      	it	lt
 800c0d2:	60a3      	strlt	r3, [r4, #8]
 800c0d4:	68a1      	ldr	r1, [r4, #8]
 800c0d6:	2917      	cmp	r1, #23
 800c0d8:	d911      	bls.n	800c0fe <validate_structure+0x82>
 800c0da:	2218      	movs	r2, #24
 800c0dc:	4668      	mov	r0, sp
 800c0de:	f001 fc21 	bl	800d924 <div>
 800c0e2:	9a01      	ldr	r2, [sp, #4]
 800c0e4:	68e3      	ldr	r3, [r4, #12]
 800c0e6:	9900      	ldr	r1, [sp, #0]
 800c0e8:	2a00      	cmp	r2, #0
 800c0ea:	440b      	add	r3, r1
 800c0ec:	60e3      	str	r3, [r4, #12]
 800c0ee:	bfbb      	ittet	lt
 800c0f0:	3218      	addlt	r2, #24
 800c0f2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c0f6:	60a2      	strge	r2, [r4, #8]
 800c0f8:	60a2      	strlt	r2, [r4, #8]
 800c0fa:	bfb8      	it	lt
 800c0fc:	60e3      	strlt	r3, [r4, #12]
 800c0fe:	6921      	ldr	r1, [r4, #16]
 800c100:	290b      	cmp	r1, #11
 800c102:	d911      	bls.n	800c128 <validate_structure+0xac>
 800c104:	220c      	movs	r2, #12
 800c106:	4668      	mov	r0, sp
 800c108:	f001 fc0c 	bl	800d924 <div>
 800c10c:	9a01      	ldr	r2, [sp, #4]
 800c10e:	6963      	ldr	r3, [r4, #20]
 800c110:	9900      	ldr	r1, [sp, #0]
 800c112:	2a00      	cmp	r2, #0
 800c114:	440b      	add	r3, r1
 800c116:	6163      	str	r3, [r4, #20]
 800c118:	bfbb      	ittet	lt
 800c11a:	320c      	addlt	r2, #12
 800c11c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c120:	6122      	strge	r2, [r4, #16]
 800c122:	6122      	strlt	r2, [r4, #16]
 800c124:	bfb8      	it	lt
 800c126:	6163      	strlt	r3, [r4, #20]
 800c128:	6963      	ldr	r3, [r4, #20]
 800c12a:	0799      	lsls	r1, r3, #30
 800c12c:	d120      	bne.n	800c170 <validate_structure+0xf4>
 800c12e:	2164      	movs	r1, #100	; 0x64
 800c130:	fb93 f2f1 	sdiv	r2, r3, r1
 800c134:	fb01 3212 	mls	r2, r1, r2, r3
 800c138:	b9e2      	cbnz	r2, 800c174 <validate_structure+0xf8>
 800c13a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800c13e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800c142:	fb93 f2f1 	sdiv	r2, r3, r1
 800c146:	fb01 3312 	mls	r3, r1, r2, r3
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	bf14      	ite	ne
 800c14e:	231c      	movne	r3, #28
 800c150:	231d      	moveq	r3, #29
 800c152:	68e2      	ldr	r2, [r4, #12]
 800c154:	2a00      	cmp	r2, #0
 800c156:	dc0f      	bgt.n	800c178 <validate_structure+0xfc>
 800c158:	4f33      	ldr	r7, [pc, #204]	; (800c228 <validate_structure+0x1ac>)
 800c15a:	260b      	movs	r6, #11
 800c15c:	2064      	movs	r0, #100	; 0x64
 800c15e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800c162:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800c166:	f1bc 0f00 	cmp.w	ip, #0
 800c16a:	dd31      	ble.n	800c1d0 <validate_structure+0x154>
 800c16c:	b003      	add	sp, #12
 800c16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c170:	231c      	movs	r3, #28
 800c172:	e7ee      	b.n	800c152 <validate_structure+0xd6>
 800c174:	231d      	movs	r3, #29
 800c176:	e7ec      	b.n	800c152 <validate_structure+0xd6>
 800c178:	4f2b      	ldr	r7, [pc, #172]	; (800c228 <validate_structure+0x1ac>)
 800c17a:	f04f 0c00 	mov.w	ip, #0
 800c17e:	2564      	movs	r5, #100	; 0x64
 800c180:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800c184:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800c188:	2a01      	cmp	r2, #1
 800c18a:	bf14      	ite	ne
 800c18c:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 800c190:	4618      	moveq	r0, r3
 800c192:	4281      	cmp	r1, r0
 800c194:	ddea      	ble.n	800c16c <validate_structure+0xf0>
 800c196:	3201      	adds	r2, #1
 800c198:	1a09      	subs	r1, r1, r0
 800c19a:	2a0c      	cmp	r2, #12
 800c19c:	60e1      	str	r1, [r4, #12]
 800c19e:	6122      	str	r2, [r4, #16]
 800c1a0:	d1f0      	bne.n	800c184 <validate_structure+0x108>
 800c1a2:	6963      	ldr	r3, [r4, #20]
 800c1a4:	1c5a      	adds	r2, r3, #1
 800c1a6:	0791      	lsls	r1, r2, #30
 800c1a8:	e9c4 c204 	strd	ip, r2, [r4, #16]
 800c1ac:	d137      	bne.n	800c21e <validate_structure+0x1a2>
 800c1ae:	fb92 f1f5 	sdiv	r1, r2, r5
 800c1b2:	fb05 2211 	mls	r2, r5, r1, r2
 800c1b6:	2a00      	cmp	r2, #0
 800c1b8:	d133      	bne.n	800c222 <validate_structure+0x1a6>
 800c1ba:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800c1be:	fb93 f2f6 	sdiv	r2, r3, r6
 800c1c2:	fb06 3312 	mls	r3, r6, r2, r3
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	bf14      	ite	ne
 800c1ca:	231c      	movne	r3, #28
 800c1cc:	231d      	moveq	r3, #29
 800c1ce:	e7d9      	b.n	800c184 <validate_structure+0x108>
 800c1d0:	6921      	ldr	r1, [r4, #16]
 800c1d2:	3901      	subs	r1, #1
 800c1d4:	6121      	str	r1, [r4, #16]
 800c1d6:	3101      	adds	r1, #1
 800c1d8:	d114      	bne.n	800c204 <validate_structure+0x188>
 800c1da:	6963      	ldr	r3, [r4, #20]
 800c1dc:	1e59      	subs	r1, r3, #1
 800c1de:	078a      	lsls	r2, r1, #30
 800c1e0:	e9c4 6104 	strd	r6, r1, [r4, #16]
 800c1e4:	d117      	bne.n	800c216 <validate_structure+0x19a>
 800c1e6:	fb91 f2f0 	sdiv	r2, r1, r0
 800c1ea:	fb00 1112 	mls	r1, r0, r2, r1
 800c1ee:	b9a1      	cbnz	r1, 800c21a <validate_structure+0x19e>
 800c1f0:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800c1f4:	fb93 f2f5 	sdiv	r2, r3, r5
 800c1f8:	fb05 3312 	mls	r3, r5, r2, r3
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	bf14      	ite	ne
 800c200:	231c      	movne	r3, #28
 800c202:	231d      	moveq	r3, #29
 800c204:	6922      	ldr	r2, [r4, #16]
 800c206:	2a01      	cmp	r2, #1
 800c208:	bf14      	ite	ne
 800c20a:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800c20e:	461a      	moveq	r2, r3
 800c210:	4462      	add	r2, ip
 800c212:	60e2      	str	r2, [r4, #12]
 800c214:	e7a5      	b.n	800c162 <validate_structure+0xe6>
 800c216:	231c      	movs	r3, #28
 800c218:	e7f4      	b.n	800c204 <validate_structure+0x188>
 800c21a:	231d      	movs	r3, #29
 800c21c:	e7f2      	b.n	800c204 <validate_structure+0x188>
 800c21e:	231c      	movs	r3, #28
 800c220:	e7b0      	b.n	800c184 <validate_structure+0x108>
 800c222:	231d      	movs	r3, #29
 800c224:	e7ae      	b.n	800c184 <validate_structure+0x108>
 800c226:	bf00      	nop
 800c228:	080113f0 	.word	0x080113f0

0800c22c <mktime>:
 800c22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c230:	b08b      	sub	sp, #44	; 0x2c
 800c232:	4605      	mov	r5, r0
 800c234:	f002 fb1a 	bl	800e86c <__gettzinfo>
 800c238:	4607      	mov	r7, r0
 800c23a:	4628      	mov	r0, r5
 800c23c:	f7ff ff1e 	bl	800c07c <validate_structure>
 800c240:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c244:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 800c248:	68a8      	ldr	r0, [r5, #8]
 800c24a:	696e      	ldr	r6, [r5, #20]
 800c24c:	fb0a 2303 	mla	r3, sl, r3, r2
 800c250:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 800c254:	fb0a 3a00 	mla	sl, sl, r0, r3
 800c258:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 800c25c:	4ac3      	ldr	r2, [pc, #780]	; (800c56c <mktime+0x340>)
 800c25e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c262:	3c01      	subs	r4, #1
 800c264:	2b01      	cmp	r3, #1
 800c266:	4414      	add	r4, r2
 800c268:	dd11      	ble.n	800c28e <mktime+0x62>
 800c26a:	07b1      	lsls	r1, r6, #30
 800c26c:	d10f      	bne.n	800c28e <mktime+0x62>
 800c26e:	2264      	movs	r2, #100	; 0x64
 800c270:	fb96 f3f2 	sdiv	r3, r6, r2
 800c274:	fb02 6313 	mls	r3, r2, r3, r6
 800c278:	b943      	cbnz	r3, 800c28c <mktime+0x60>
 800c27a:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 800c27e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c282:	fb91 f3f2 	sdiv	r3, r1, r2
 800c286:	fb02 1313 	mls	r3, r2, r3, r1
 800c28a:	b903      	cbnz	r3, 800c28e <mktime+0x62>
 800c28c:	3401      	adds	r4, #1
 800c28e:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800c292:	3310      	adds	r3, #16
 800c294:	f644 6220 	movw	r2, #20000	; 0x4e20
 800c298:	4293      	cmp	r3, r2
 800c29a:	61ec      	str	r4, [r5, #28]
 800c29c:	f200 8161 	bhi.w	800c562 <mktime+0x336>
 800c2a0:	2e46      	cmp	r6, #70	; 0x46
 800c2a2:	dd77      	ble.n	800c394 <mktime+0x168>
 800c2a4:	2346      	movs	r3, #70	; 0x46
 800c2a6:	f240 1e6d 	movw	lr, #365	; 0x16d
 800c2aa:	2164      	movs	r1, #100	; 0x64
 800c2ac:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c2b0:	079a      	lsls	r2, r3, #30
 800c2b2:	d169      	bne.n	800c388 <mktime+0x15c>
 800c2b4:	fb93 f2f1 	sdiv	r2, r3, r1
 800c2b8:	fb01 3212 	mls	r2, r1, r2, r3
 800c2bc:	2a00      	cmp	r2, #0
 800c2be:	d166      	bne.n	800c38e <mktime+0x162>
 800c2c0:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 800c2c4:	fb9c f2f0 	sdiv	r2, ip, r0
 800c2c8:	fb00 c212 	mls	r2, r0, r2, ip
 800c2cc:	2a00      	cmp	r2, #0
 800c2ce:	bf14      	ite	ne
 800c2d0:	4672      	movne	r2, lr
 800c2d2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	429e      	cmp	r6, r3
 800c2da:	4414      	add	r4, r2
 800c2dc:	d1e8      	bne.n	800c2b0 <mktime+0x84>
 800c2de:	4ba4      	ldr	r3, [pc, #656]	; (800c570 <mktime+0x344>)
 800c2e0:	ea4f 7bea 	mov.w	fp, sl, asr #31
 800c2e4:	fbc3 ab04 	smlal	sl, fp, r3, r4
 800c2e8:	f001 f94e 	bl	800d588 <__tz_lock>
 800c2ec:	f001 f958 	bl	800d5a0 <_tzset_unlocked>
 800c2f0:	4ba0      	ldr	r3, [pc, #640]	; (800c574 <mktime+0x348>)
 800c2f2:	f8d3 9000 	ldr.w	r9, [r3]
 800c2f6:	f1b9 0f00 	cmp.w	r9, #0
 800c2fa:	d03f      	beq.n	800c37c <mktime+0x150>
 800c2fc:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800c300:	6968      	ldr	r0, [r5, #20]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f1b9 0f01 	cmp.w	r9, #1
 800c308:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800c30c:	46c8      	mov	r8, r9
 800c30e:	bfa8      	it	ge
 800c310:	f04f 0801 	movge.w	r8, #1
 800c314:	4283      	cmp	r3, r0
 800c316:	d17f      	bne.n	800c418 <mktime+0x1ec>
 800c318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c31a:	4619      	mov	r1, r3
 800c31c:	17da      	asrs	r2, r3, #31
 800c31e:	e9cd 1200 	strd	r1, r2, [sp]
 800c322:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c326:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800c32a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c32e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c330:	1a80      	subs	r0, r0, r2
 800c332:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 800c336:	4582      	cmp	sl, r0
 800c338:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c33c:	eb7b 0101 	sbcs.w	r1, fp, r1
 800c340:	da71      	bge.n	800c426 <mktime+0x1fa>
 800c342:	9800      	ldr	r0, [sp, #0]
 800c344:	6a39      	ldr	r1, [r7, #32]
 800c346:	1a09      	subs	r1, r1, r0
 800c348:	9104      	str	r1, [sp, #16]
 800c34a:	9801      	ldr	r0, [sp, #4]
 800c34c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c34e:	eb61 0100 	sbc.w	r1, r1, r0
 800c352:	9105      	str	r1, [sp, #20]
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	2900      	cmp	r1, #0
 800c358:	d075      	beq.n	800c446 <mktime+0x21a>
 800c35a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c35e:	4582      	cmp	sl, r0
 800c360:	eb7b 0101 	sbcs.w	r1, fp, r1
 800c364:	db05      	blt.n	800c372 <mktime+0x146>
 800c366:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c36a:	4582      	cmp	sl, r0
 800c36c:	eb7b 0101 	sbcs.w	r1, fp, r1
 800c370:	db6f      	blt.n	800c452 <mktime+0x226>
 800c372:	f1b9 0f00 	cmp.w	r9, #0
 800c376:	f04f 0900 	mov.w	r9, #0
 800c37a:	da6f      	bge.n	800c45c <mktime+0x230>
 800c37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37e:	eb1a 0a03 	adds.w	sl, sl, r3
 800c382:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 800c386:	e0ae      	b.n	800c4e6 <mktime+0x2ba>
 800c388:	f240 126d 	movw	r2, #365	; 0x16d
 800c38c:	e7a3      	b.n	800c2d6 <mktime+0xaa>
 800c38e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c392:	e7a0      	b.n	800c2d6 <mktime+0xaa>
 800c394:	d0a3      	beq.n	800c2de <mktime+0xb2>
 800c396:	2345      	movs	r3, #69	; 0x45
 800c398:	f240 1e6d 	movw	lr, #365	; 0x16d
 800c39c:	2164      	movs	r1, #100	; 0x64
 800c39e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c3a2:	e012      	b.n	800c3ca <mktime+0x19e>
 800c3a4:	bb62      	cbnz	r2, 800c400 <mktime+0x1d4>
 800c3a6:	fb93 f2f1 	sdiv	r2, r3, r1
 800c3aa:	fb01 3212 	mls	r2, r1, r2, r3
 800c3ae:	bb52      	cbnz	r2, 800c406 <mktime+0x1da>
 800c3b0:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 800c3b4:	fb9c f2f0 	sdiv	r2, ip, r0
 800c3b8:	fb00 c212 	mls	r2, r0, r2, ip
 800c3bc:	2a00      	cmp	r2, #0
 800c3be:	bf14      	ite	ne
 800c3c0:	4672      	movne	r2, lr
 800c3c2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c3c6:	1aa4      	subs	r4, r4, r2
 800c3c8:	3b01      	subs	r3, #1
 800c3ca:	429e      	cmp	r6, r3
 800c3cc:	f003 0203 	and.w	r2, r3, #3
 800c3d0:	dbe8      	blt.n	800c3a4 <mktime+0x178>
 800c3d2:	b9da      	cbnz	r2, 800c40c <mktime+0x1e0>
 800c3d4:	2264      	movs	r2, #100	; 0x64
 800c3d6:	fb96 f3f2 	sdiv	r3, r6, r2
 800c3da:	fb02 6313 	mls	r3, r2, r3, r6
 800c3de:	b9c3      	cbnz	r3, 800c412 <mktime+0x1e6>
 800c3e0:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 800c3e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c3e8:	fb91 f3f2 	sdiv	r3, r1, r2
 800c3ec:	fb02 1313 	mls	r3, r2, r3, r1
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	f240 136d 	movw	r3, #365	; 0x16d
 800c3f6:	bf08      	it	eq
 800c3f8:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800c3fc:	1ae4      	subs	r4, r4, r3
 800c3fe:	e76e      	b.n	800c2de <mktime+0xb2>
 800c400:	f240 126d 	movw	r2, #365	; 0x16d
 800c404:	e7df      	b.n	800c3c6 <mktime+0x19a>
 800c406:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c40a:	e7dc      	b.n	800c3c6 <mktime+0x19a>
 800c40c:	f240 136d 	movw	r3, #365	; 0x16d
 800c410:	e7f4      	b.n	800c3fc <mktime+0x1d0>
 800c412:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800c416:	e7f1      	b.n	800c3fc <mktime+0x1d0>
 800c418:	f001 f80e 	bl	800d438 <__tzcalc_limits>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	f47f af7b 	bne.w	800c318 <mktime+0xec>
 800c422:	46c1      	mov	r9, r8
 800c424:	e054      	b.n	800c4d0 <mktime+0x2a4>
 800c426:	9800      	ldr	r0, [sp, #0]
 800c428:	9902      	ldr	r1, [sp, #8]
 800c42a:	1a09      	subs	r1, r1, r0
 800c42c:	9108      	str	r1, [sp, #32]
 800c42e:	9801      	ldr	r0, [sp, #4]
 800c430:	9903      	ldr	r1, [sp, #12]
 800c432:	eb61 0100 	sbc.w	r1, r1, r0
 800c436:	9109      	str	r1, [sp, #36]	; 0x24
 800c438:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c43c:	4582      	cmp	sl, r0
 800c43e:	eb7b 0101 	sbcs.w	r1, fp, r1
 800c442:	dbee      	blt.n	800c422 <mktime+0x1f6>
 800c444:	e77d      	b.n	800c342 <mktime+0x116>
 800c446:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c44a:	4582      	cmp	sl, r0
 800c44c:	eb7b 0101 	sbcs.w	r1, fp, r1
 800c450:	db89      	blt.n	800c366 <mktime+0x13a>
 800c452:	f1b9 0f00 	cmp.w	r9, #0
 800c456:	db3f      	blt.n	800c4d8 <mktime+0x2ac>
 800c458:	f04f 0901 	mov.w	r9, #1
 800c45c:	ea88 0809 	eor.w	r8, r8, r9
 800c460:	f1b8 0f01 	cmp.w	r8, #1
 800c464:	d134      	bne.n	800c4d0 <mktime+0x2a4>
 800c466:	f1b9 0f00 	cmp.w	r9, #0
 800c46a:	d04f      	beq.n	800c50c <mktime+0x2e0>
 800c46c:	1ad3      	subs	r3, r2, r3
 800c46e:	682a      	ldr	r2, [r5, #0]
 800c470:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800c474:	441a      	add	r2, r3
 800c476:	eb1a 0a03 	adds.w	sl, sl, r3
 800c47a:	602a      	str	r2, [r5, #0]
 800c47c:	4628      	mov	r0, r5
 800c47e:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 800c482:	f7ff fdfb 	bl	800c07c <validate_structure>
 800c486:	68ea      	ldr	r2, [r5, #12]
 800c488:	ebb2 0208 	subs.w	r2, r2, r8
 800c48c:	d020      	beq.n	800c4d0 <mktime+0x2a4>
 800c48e:	2a01      	cmp	r2, #1
 800c490:	dc3e      	bgt.n	800c510 <mktime+0x2e4>
 800c492:	1c90      	adds	r0, r2, #2
 800c494:	bfd8      	it	le
 800c496:	2201      	movle	r2, #1
 800c498:	69eb      	ldr	r3, [r5, #28]
 800c49a:	18d3      	adds	r3, r2, r3
 800c49c:	4414      	add	r4, r2
 800c49e:	d540      	bpl.n	800c522 <mktime+0x2f6>
 800c4a0:	1e72      	subs	r2, r6, #1
 800c4a2:	0791      	lsls	r1, r2, #30
 800c4a4:	d137      	bne.n	800c516 <mktime+0x2ea>
 800c4a6:	2164      	movs	r1, #100	; 0x64
 800c4a8:	fb92 f3f1 	sdiv	r3, r2, r1
 800c4ac:	fb01 2313 	mls	r3, r1, r3, r2
 800c4b0:	bba3      	cbnz	r3, 800c51c <mktime+0x2f0>
 800c4b2:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800c4b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c4ba:	fb96 f3f2 	sdiv	r3, r6, r2
 800c4be:	fb02 6613 	mls	r6, r2, r3, r6
 800c4c2:	2e00      	cmp	r6, #0
 800c4c4:	f240 136d 	movw	r3, #365	; 0x16d
 800c4c8:	bf18      	it	ne
 800c4ca:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800c4ce:	61eb      	str	r3, [r5, #28]
 800c4d0:	f1b9 0f01 	cmp.w	r9, #1
 800c4d4:	f47f af52 	bne.w	800c37c <mktime+0x150>
 800c4d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4da:	eb1a 0a03 	adds.w	sl, sl, r3
 800c4de:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 800c4e2:	f04f 0901 	mov.w	r9, #1
 800c4e6:	f001 f855 	bl	800d594 <__tz_unlock>
 800c4ea:	3404      	adds	r4, #4
 800c4ec:	2307      	movs	r3, #7
 800c4ee:	fb94 f3f3 	sdiv	r3, r4, r3
 800c4f2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c4f6:	1ae4      	subs	r4, r4, r3
 800c4f8:	bf48      	it	mi
 800c4fa:	3407      	addmi	r4, #7
 800c4fc:	f8c5 9020 	str.w	r9, [r5, #32]
 800c500:	61ac      	str	r4, [r5, #24]
 800c502:	4650      	mov	r0, sl
 800c504:	4659      	mov	r1, fp
 800c506:	b00b      	add	sp, #44	; 0x2c
 800c508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c50c:	1a9b      	subs	r3, r3, r2
 800c50e:	e7ae      	b.n	800c46e <mktime+0x242>
 800c510:	f04f 32ff 	mov.w	r2, #4294967295
 800c514:	e7c0      	b.n	800c498 <mktime+0x26c>
 800c516:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800c51a:	e7d8      	b.n	800c4ce <mktime+0x2a2>
 800c51c:	f240 136d 	movw	r3, #365	; 0x16d
 800c520:	e7d5      	b.n	800c4ce <mktime+0x2a2>
 800c522:	07b2      	lsls	r2, r6, #30
 800c524:	d117      	bne.n	800c556 <mktime+0x32a>
 800c526:	2164      	movs	r1, #100	; 0x64
 800c528:	fb96 f2f1 	sdiv	r2, r6, r1
 800c52c:	fb01 6212 	mls	r2, r1, r2, r6
 800c530:	b9a2      	cbnz	r2, 800c55c <mktime+0x330>
 800c532:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800c536:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800c53a:	fb96 f2f1 	sdiv	r2, r6, r1
 800c53e:	fb01 6612 	mls	r6, r1, r2, r6
 800c542:	2e00      	cmp	r6, #0
 800c544:	f240 126d 	movw	r2, #365	; 0x16d
 800c548:	bf08      	it	eq
 800c54a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c54e:	4293      	cmp	r3, r2
 800c550:	bfa8      	it	ge
 800c552:	1a9b      	subge	r3, r3, r2
 800c554:	e7bb      	b.n	800c4ce <mktime+0x2a2>
 800c556:	f240 126d 	movw	r2, #365	; 0x16d
 800c55a:	e7f8      	b.n	800c54e <mktime+0x322>
 800c55c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c560:	e7f5      	b.n	800c54e <mktime+0x322>
 800c562:	f04f 3aff 	mov.w	sl, #4294967295
 800c566:	f04f 3bff 	mov.w	fp, #4294967295
 800c56a:	e7ca      	b.n	800c502 <mktime+0x2d6>
 800c56c:	08011420 	.word	0x08011420
 800c570:	00015180 	.word	0x00015180
 800c574:	20004ec0 	.word	0x20004ec0

0800c578 <_free_r>:
 800c578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c57a:	2900      	cmp	r1, #0
 800c57c:	d048      	beq.n	800c610 <_free_r+0x98>
 800c57e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c582:	9001      	str	r0, [sp, #4]
 800c584:	2b00      	cmp	r3, #0
 800c586:	f1a1 0404 	sub.w	r4, r1, #4
 800c58a:	bfb8      	it	lt
 800c58c:	18e4      	addlt	r4, r4, r3
 800c58e:	f002 fa49 	bl	800ea24 <__malloc_lock>
 800c592:	4a20      	ldr	r2, [pc, #128]	; (800c614 <_free_r+0x9c>)
 800c594:	9801      	ldr	r0, [sp, #4]
 800c596:	6813      	ldr	r3, [r2, #0]
 800c598:	4615      	mov	r5, r2
 800c59a:	b933      	cbnz	r3, 800c5aa <_free_r+0x32>
 800c59c:	6063      	str	r3, [r4, #4]
 800c59e:	6014      	str	r4, [r2, #0]
 800c5a0:	b003      	add	sp, #12
 800c5a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5a6:	f002 ba43 	b.w	800ea30 <__malloc_unlock>
 800c5aa:	42a3      	cmp	r3, r4
 800c5ac:	d90b      	bls.n	800c5c6 <_free_r+0x4e>
 800c5ae:	6821      	ldr	r1, [r4, #0]
 800c5b0:	1862      	adds	r2, r4, r1
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	bf04      	itt	eq
 800c5b6:	681a      	ldreq	r2, [r3, #0]
 800c5b8:	685b      	ldreq	r3, [r3, #4]
 800c5ba:	6063      	str	r3, [r4, #4]
 800c5bc:	bf04      	itt	eq
 800c5be:	1852      	addeq	r2, r2, r1
 800c5c0:	6022      	streq	r2, [r4, #0]
 800c5c2:	602c      	str	r4, [r5, #0]
 800c5c4:	e7ec      	b.n	800c5a0 <_free_r+0x28>
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	b10b      	cbz	r3, 800c5d0 <_free_r+0x58>
 800c5cc:	42a3      	cmp	r3, r4
 800c5ce:	d9fa      	bls.n	800c5c6 <_free_r+0x4e>
 800c5d0:	6811      	ldr	r1, [r2, #0]
 800c5d2:	1855      	adds	r5, r2, r1
 800c5d4:	42a5      	cmp	r5, r4
 800c5d6:	d10b      	bne.n	800c5f0 <_free_r+0x78>
 800c5d8:	6824      	ldr	r4, [r4, #0]
 800c5da:	4421      	add	r1, r4
 800c5dc:	1854      	adds	r4, r2, r1
 800c5de:	42a3      	cmp	r3, r4
 800c5e0:	6011      	str	r1, [r2, #0]
 800c5e2:	d1dd      	bne.n	800c5a0 <_free_r+0x28>
 800c5e4:	681c      	ldr	r4, [r3, #0]
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	6053      	str	r3, [r2, #4]
 800c5ea:	4421      	add	r1, r4
 800c5ec:	6011      	str	r1, [r2, #0]
 800c5ee:	e7d7      	b.n	800c5a0 <_free_r+0x28>
 800c5f0:	d902      	bls.n	800c5f8 <_free_r+0x80>
 800c5f2:	230c      	movs	r3, #12
 800c5f4:	6003      	str	r3, [r0, #0]
 800c5f6:	e7d3      	b.n	800c5a0 <_free_r+0x28>
 800c5f8:	6825      	ldr	r5, [r4, #0]
 800c5fa:	1961      	adds	r1, r4, r5
 800c5fc:	428b      	cmp	r3, r1
 800c5fe:	bf04      	itt	eq
 800c600:	6819      	ldreq	r1, [r3, #0]
 800c602:	685b      	ldreq	r3, [r3, #4]
 800c604:	6063      	str	r3, [r4, #4]
 800c606:	bf04      	itt	eq
 800c608:	1949      	addeq	r1, r1, r5
 800c60a:	6021      	streq	r1, [r4, #0]
 800c60c:	6054      	str	r4, [r2, #4]
 800c60e:	e7c7      	b.n	800c5a0 <_free_r+0x28>
 800c610:	b003      	add	sp, #12
 800c612:	bd30      	pop	{r4, r5, pc}
 800c614:	20004e9c 	.word	0x20004e9c

0800c618 <_malloc_r>:
 800c618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c61a:	1ccd      	adds	r5, r1, #3
 800c61c:	f025 0503 	bic.w	r5, r5, #3
 800c620:	3508      	adds	r5, #8
 800c622:	2d0c      	cmp	r5, #12
 800c624:	bf38      	it	cc
 800c626:	250c      	movcc	r5, #12
 800c628:	2d00      	cmp	r5, #0
 800c62a:	4606      	mov	r6, r0
 800c62c:	db01      	blt.n	800c632 <_malloc_r+0x1a>
 800c62e:	42a9      	cmp	r1, r5
 800c630:	d903      	bls.n	800c63a <_malloc_r+0x22>
 800c632:	230c      	movs	r3, #12
 800c634:	6033      	str	r3, [r6, #0]
 800c636:	2000      	movs	r0, #0
 800c638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c63a:	f002 f9f3 	bl	800ea24 <__malloc_lock>
 800c63e:	4921      	ldr	r1, [pc, #132]	; (800c6c4 <_malloc_r+0xac>)
 800c640:	680a      	ldr	r2, [r1, #0]
 800c642:	4614      	mov	r4, r2
 800c644:	b99c      	cbnz	r4, 800c66e <_malloc_r+0x56>
 800c646:	4f20      	ldr	r7, [pc, #128]	; (800c6c8 <_malloc_r+0xb0>)
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	b923      	cbnz	r3, 800c656 <_malloc_r+0x3e>
 800c64c:	4621      	mov	r1, r4
 800c64e:	4630      	mov	r0, r6
 800c650:	f000 fd10 	bl	800d074 <_sbrk_r>
 800c654:	6038      	str	r0, [r7, #0]
 800c656:	4629      	mov	r1, r5
 800c658:	4630      	mov	r0, r6
 800c65a:	f000 fd0b 	bl	800d074 <_sbrk_r>
 800c65e:	1c43      	adds	r3, r0, #1
 800c660:	d123      	bne.n	800c6aa <_malloc_r+0x92>
 800c662:	230c      	movs	r3, #12
 800c664:	6033      	str	r3, [r6, #0]
 800c666:	4630      	mov	r0, r6
 800c668:	f002 f9e2 	bl	800ea30 <__malloc_unlock>
 800c66c:	e7e3      	b.n	800c636 <_malloc_r+0x1e>
 800c66e:	6823      	ldr	r3, [r4, #0]
 800c670:	1b5b      	subs	r3, r3, r5
 800c672:	d417      	bmi.n	800c6a4 <_malloc_r+0x8c>
 800c674:	2b0b      	cmp	r3, #11
 800c676:	d903      	bls.n	800c680 <_malloc_r+0x68>
 800c678:	6023      	str	r3, [r4, #0]
 800c67a:	441c      	add	r4, r3
 800c67c:	6025      	str	r5, [r4, #0]
 800c67e:	e004      	b.n	800c68a <_malloc_r+0x72>
 800c680:	6863      	ldr	r3, [r4, #4]
 800c682:	42a2      	cmp	r2, r4
 800c684:	bf0c      	ite	eq
 800c686:	600b      	streq	r3, [r1, #0]
 800c688:	6053      	strne	r3, [r2, #4]
 800c68a:	4630      	mov	r0, r6
 800c68c:	f002 f9d0 	bl	800ea30 <__malloc_unlock>
 800c690:	f104 000b 	add.w	r0, r4, #11
 800c694:	1d23      	adds	r3, r4, #4
 800c696:	f020 0007 	bic.w	r0, r0, #7
 800c69a:	1ac2      	subs	r2, r0, r3
 800c69c:	d0cc      	beq.n	800c638 <_malloc_r+0x20>
 800c69e:	1a1b      	subs	r3, r3, r0
 800c6a0:	50a3      	str	r3, [r4, r2]
 800c6a2:	e7c9      	b.n	800c638 <_malloc_r+0x20>
 800c6a4:	4622      	mov	r2, r4
 800c6a6:	6864      	ldr	r4, [r4, #4]
 800c6a8:	e7cc      	b.n	800c644 <_malloc_r+0x2c>
 800c6aa:	1cc4      	adds	r4, r0, #3
 800c6ac:	f024 0403 	bic.w	r4, r4, #3
 800c6b0:	42a0      	cmp	r0, r4
 800c6b2:	d0e3      	beq.n	800c67c <_malloc_r+0x64>
 800c6b4:	1a21      	subs	r1, r4, r0
 800c6b6:	4630      	mov	r0, r6
 800c6b8:	f000 fcdc 	bl	800d074 <_sbrk_r>
 800c6bc:	3001      	adds	r0, #1
 800c6be:	d1dd      	bne.n	800c67c <_malloc_r+0x64>
 800c6c0:	e7cf      	b.n	800c662 <_malloc_r+0x4a>
 800c6c2:	bf00      	nop
 800c6c4:	20004e9c 	.word	0x20004e9c
 800c6c8:	20004ea0 	.word	0x20004ea0

0800c6cc <__cvt>:
 800c6cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6d0:	ec55 4b10 	vmov	r4, r5, d0
 800c6d4:	2d00      	cmp	r5, #0
 800c6d6:	460e      	mov	r6, r1
 800c6d8:	4619      	mov	r1, r3
 800c6da:	462b      	mov	r3, r5
 800c6dc:	bfbb      	ittet	lt
 800c6de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c6e2:	461d      	movlt	r5, r3
 800c6e4:	2300      	movge	r3, #0
 800c6e6:	232d      	movlt	r3, #45	; 0x2d
 800c6e8:	700b      	strb	r3, [r1, #0]
 800c6ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c6f0:	4691      	mov	r9, r2
 800c6f2:	f023 0820 	bic.w	r8, r3, #32
 800c6f6:	bfbc      	itt	lt
 800c6f8:	4622      	movlt	r2, r4
 800c6fa:	4614      	movlt	r4, r2
 800c6fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c700:	d005      	beq.n	800c70e <__cvt+0x42>
 800c702:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c706:	d100      	bne.n	800c70a <__cvt+0x3e>
 800c708:	3601      	adds	r6, #1
 800c70a:	2102      	movs	r1, #2
 800c70c:	e000      	b.n	800c710 <__cvt+0x44>
 800c70e:	2103      	movs	r1, #3
 800c710:	ab03      	add	r3, sp, #12
 800c712:	9301      	str	r3, [sp, #4]
 800c714:	ab02      	add	r3, sp, #8
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	ec45 4b10 	vmov	d0, r4, r5
 800c71c:	4653      	mov	r3, sl
 800c71e:	4632      	mov	r2, r6
 800c720:	f001 f9a2 	bl	800da68 <_dtoa_r>
 800c724:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c728:	4607      	mov	r7, r0
 800c72a:	d102      	bne.n	800c732 <__cvt+0x66>
 800c72c:	f019 0f01 	tst.w	r9, #1
 800c730:	d022      	beq.n	800c778 <__cvt+0xac>
 800c732:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c736:	eb07 0906 	add.w	r9, r7, r6
 800c73a:	d110      	bne.n	800c75e <__cvt+0x92>
 800c73c:	783b      	ldrb	r3, [r7, #0]
 800c73e:	2b30      	cmp	r3, #48	; 0x30
 800c740:	d10a      	bne.n	800c758 <__cvt+0x8c>
 800c742:	2200      	movs	r2, #0
 800c744:	2300      	movs	r3, #0
 800c746:	4620      	mov	r0, r4
 800c748:	4629      	mov	r1, r5
 800c74a:	f7f4 f9ed 	bl	8000b28 <__aeabi_dcmpeq>
 800c74e:	b918      	cbnz	r0, 800c758 <__cvt+0x8c>
 800c750:	f1c6 0601 	rsb	r6, r6, #1
 800c754:	f8ca 6000 	str.w	r6, [sl]
 800c758:	f8da 3000 	ldr.w	r3, [sl]
 800c75c:	4499      	add	r9, r3
 800c75e:	2200      	movs	r2, #0
 800c760:	2300      	movs	r3, #0
 800c762:	4620      	mov	r0, r4
 800c764:	4629      	mov	r1, r5
 800c766:	f7f4 f9df 	bl	8000b28 <__aeabi_dcmpeq>
 800c76a:	b108      	cbz	r0, 800c770 <__cvt+0xa4>
 800c76c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c770:	2230      	movs	r2, #48	; 0x30
 800c772:	9b03      	ldr	r3, [sp, #12]
 800c774:	454b      	cmp	r3, r9
 800c776:	d307      	bcc.n	800c788 <__cvt+0xbc>
 800c778:	9b03      	ldr	r3, [sp, #12]
 800c77a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c77c:	1bdb      	subs	r3, r3, r7
 800c77e:	4638      	mov	r0, r7
 800c780:	6013      	str	r3, [r2, #0]
 800c782:	b004      	add	sp, #16
 800c784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c788:	1c59      	adds	r1, r3, #1
 800c78a:	9103      	str	r1, [sp, #12]
 800c78c:	701a      	strb	r2, [r3, #0]
 800c78e:	e7f0      	b.n	800c772 <__cvt+0xa6>

0800c790 <__exponent>:
 800c790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c792:	4603      	mov	r3, r0
 800c794:	2900      	cmp	r1, #0
 800c796:	bfb8      	it	lt
 800c798:	4249      	neglt	r1, r1
 800c79a:	f803 2b02 	strb.w	r2, [r3], #2
 800c79e:	bfb4      	ite	lt
 800c7a0:	222d      	movlt	r2, #45	; 0x2d
 800c7a2:	222b      	movge	r2, #43	; 0x2b
 800c7a4:	2909      	cmp	r1, #9
 800c7a6:	7042      	strb	r2, [r0, #1]
 800c7a8:	dd2a      	ble.n	800c800 <__exponent+0x70>
 800c7aa:	f10d 0407 	add.w	r4, sp, #7
 800c7ae:	46a4      	mov	ip, r4
 800c7b0:	270a      	movs	r7, #10
 800c7b2:	46a6      	mov	lr, r4
 800c7b4:	460a      	mov	r2, r1
 800c7b6:	fb91 f6f7 	sdiv	r6, r1, r7
 800c7ba:	fb07 1516 	mls	r5, r7, r6, r1
 800c7be:	3530      	adds	r5, #48	; 0x30
 800c7c0:	2a63      	cmp	r2, #99	; 0x63
 800c7c2:	f104 34ff 	add.w	r4, r4, #4294967295
 800c7c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c7ca:	4631      	mov	r1, r6
 800c7cc:	dcf1      	bgt.n	800c7b2 <__exponent+0x22>
 800c7ce:	3130      	adds	r1, #48	; 0x30
 800c7d0:	f1ae 0502 	sub.w	r5, lr, #2
 800c7d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c7d8:	1c44      	adds	r4, r0, #1
 800c7da:	4629      	mov	r1, r5
 800c7dc:	4561      	cmp	r1, ip
 800c7de:	d30a      	bcc.n	800c7f6 <__exponent+0x66>
 800c7e0:	f10d 0209 	add.w	r2, sp, #9
 800c7e4:	eba2 020e 	sub.w	r2, r2, lr
 800c7e8:	4565      	cmp	r5, ip
 800c7ea:	bf88      	it	hi
 800c7ec:	2200      	movhi	r2, #0
 800c7ee:	4413      	add	r3, r2
 800c7f0:	1a18      	subs	r0, r3, r0
 800c7f2:	b003      	add	sp, #12
 800c7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c7fe:	e7ed      	b.n	800c7dc <__exponent+0x4c>
 800c800:	2330      	movs	r3, #48	; 0x30
 800c802:	3130      	adds	r1, #48	; 0x30
 800c804:	7083      	strb	r3, [r0, #2]
 800c806:	70c1      	strb	r1, [r0, #3]
 800c808:	1d03      	adds	r3, r0, #4
 800c80a:	e7f1      	b.n	800c7f0 <__exponent+0x60>

0800c80c <_printf_float>:
 800c80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c810:	ed2d 8b02 	vpush	{d8}
 800c814:	b08d      	sub	sp, #52	; 0x34
 800c816:	460c      	mov	r4, r1
 800c818:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c81c:	4616      	mov	r6, r2
 800c81e:	461f      	mov	r7, r3
 800c820:	4605      	mov	r5, r0
 800c822:	f002 f8d7 	bl	800e9d4 <_localeconv_r>
 800c826:	f8d0 a000 	ldr.w	sl, [r0]
 800c82a:	4650      	mov	r0, sl
 800c82c:	f7f3 fcfa 	bl	8000224 <strlen>
 800c830:	2300      	movs	r3, #0
 800c832:	930a      	str	r3, [sp, #40]	; 0x28
 800c834:	6823      	ldr	r3, [r4, #0]
 800c836:	9305      	str	r3, [sp, #20]
 800c838:	f8d8 3000 	ldr.w	r3, [r8]
 800c83c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c840:	3307      	adds	r3, #7
 800c842:	f023 0307 	bic.w	r3, r3, #7
 800c846:	f103 0208 	add.w	r2, r3, #8
 800c84a:	f8c8 2000 	str.w	r2, [r8]
 800c84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c852:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c856:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c85a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c85e:	9307      	str	r3, [sp, #28]
 800c860:	f8cd 8018 	str.w	r8, [sp, #24]
 800c864:	ee08 0a10 	vmov	s16, r0
 800c868:	4b9f      	ldr	r3, [pc, #636]	; (800cae8 <_printf_float+0x2dc>)
 800c86a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c86e:	f04f 32ff 	mov.w	r2, #4294967295
 800c872:	f7f4 f98b 	bl	8000b8c <__aeabi_dcmpun>
 800c876:	bb88      	cbnz	r0, 800c8dc <_printf_float+0xd0>
 800c878:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c87c:	4b9a      	ldr	r3, [pc, #616]	; (800cae8 <_printf_float+0x2dc>)
 800c87e:	f04f 32ff 	mov.w	r2, #4294967295
 800c882:	f7f4 f965 	bl	8000b50 <__aeabi_dcmple>
 800c886:	bb48      	cbnz	r0, 800c8dc <_printf_float+0xd0>
 800c888:	2200      	movs	r2, #0
 800c88a:	2300      	movs	r3, #0
 800c88c:	4640      	mov	r0, r8
 800c88e:	4649      	mov	r1, r9
 800c890:	f7f4 f954 	bl	8000b3c <__aeabi_dcmplt>
 800c894:	b110      	cbz	r0, 800c89c <_printf_float+0x90>
 800c896:	232d      	movs	r3, #45	; 0x2d
 800c898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c89c:	4b93      	ldr	r3, [pc, #588]	; (800caec <_printf_float+0x2e0>)
 800c89e:	4894      	ldr	r0, [pc, #592]	; (800caf0 <_printf_float+0x2e4>)
 800c8a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c8a4:	bf94      	ite	ls
 800c8a6:	4698      	movls	r8, r3
 800c8a8:	4680      	movhi	r8, r0
 800c8aa:	2303      	movs	r3, #3
 800c8ac:	6123      	str	r3, [r4, #16]
 800c8ae:	9b05      	ldr	r3, [sp, #20]
 800c8b0:	f023 0204 	bic.w	r2, r3, #4
 800c8b4:	6022      	str	r2, [r4, #0]
 800c8b6:	f04f 0900 	mov.w	r9, #0
 800c8ba:	9700      	str	r7, [sp, #0]
 800c8bc:	4633      	mov	r3, r6
 800c8be:	aa0b      	add	r2, sp, #44	; 0x2c
 800c8c0:	4621      	mov	r1, r4
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	f000 f9d8 	bl	800cc78 <_printf_common>
 800c8c8:	3001      	adds	r0, #1
 800c8ca:	f040 8090 	bne.w	800c9ee <_printf_float+0x1e2>
 800c8ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c8d2:	b00d      	add	sp, #52	; 0x34
 800c8d4:	ecbd 8b02 	vpop	{d8}
 800c8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8dc:	4642      	mov	r2, r8
 800c8de:	464b      	mov	r3, r9
 800c8e0:	4640      	mov	r0, r8
 800c8e2:	4649      	mov	r1, r9
 800c8e4:	f7f4 f952 	bl	8000b8c <__aeabi_dcmpun>
 800c8e8:	b140      	cbz	r0, 800c8fc <_printf_float+0xf0>
 800c8ea:	464b      	mov	r3, r9
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	bfbc      	itt	lt
 800c8f0:	232d      	movlt	r3, #45	; 0x2d
 800c8f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c8f6:	487f      	ldr	r0, [pc, #508]	; (800caf4 <_printf_float+0x2e8>)
 800c8f8:	4b7f      	ldr	r3, [pc, #508]	; (800caf8 <_printf_float+0x2ec>)
 800c8fa:	e7d1      	b.n	800c8a0 <_printf_float+0x94>
 800c8fc:	6863      	ldr	r3, [r4, #4]
 800c8fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c902:	9206      	str	r2, [sp, #24]
 800c904:	1c5a      	adds	r2, r3, #1
 800c906:	d13f      	bne.n	800c988 <_printf_float+0x17c>
 800c908:	2306      	movs	r3, #6
 800c90a:	6063      	str	r3, [r4, #4]
 800c90c:	9b05      	ldr	r3, [sp, #20]
 800c90e:	6861      	ldr	r1, [r4, #4]
 800c910:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c914:	2300      	movs	r3, #0
 800c916:	9303      	str	r3, [sp, #12]
 800c918:	ab0a      	add	r3, sp, #40	; 0x28
 800c91a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c91e:	ab09      	add	r3, sp, #36	; 0x24
 800c920:	ec49 8b10 	vmov	d0, r8, r9
 800c924:	9300      	str	r3, [sp, #0]
 800c926:	6022      	str	r2, [r4, #0]
 800c928:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c92c:	4628      	mov	r0, r5
 800c92e:	f7ff fecd 	bl	800c6cc <__cvt>
 800c932:	9b06      	ldr	r3, [sp, #24]
 800c934:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c936:	2b47      	cmp	r3, #71	; 0x47
 800c938:	4680      	mov	r8, r0
 800c93a:	d108      	bne.n	800c94e <_printf_float+0x142>
 800c93c:	1cc8      	adds	r0, r1, #3
 800c93e:	db02      	blt.n	800c946 <_printf_float+0x13a>
 800c940:	6863      	ldr	r3, [r4, #4]
 800c942:	4299      	cmp	r1, r3
 800c944:	dd41      	ble.n	800c9ca <_printf_float+0x1be>
 800c946:	f1ab 0b02 	sub.w	fp, fp, #2
 800c94a:	fa5f fb8b 	uxtb.w	fp, fp
 800c94e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c952:	d820      	bhi.n	800c996 <_printf_float+0x18a>
 800c954:	3901      	subs	r1, #1
 800c956:	465a      	mov	r2, fp
 800c958:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c95c:	9109      	str	r1, [sp, #36]	; 0x24
 800c95e:	f7ff ff17 	bl	800c790 <__exponent>
 800c962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c964:	1813      	adds	r3, r2, r0
 800c966:	2a01      	cmp	r2, #1
 800c968:	4681      	mov	r9, r0
 800c96a:	6123      	str	r3, [r4, #16]
 800c96c:	dc02      	bgt.n	800c974 <_printf_float+0x168>
 800c96e:	6822      	ldr	r2, [r4, #0]
 800c970:	07d2      	lsls	r2, r2, #31
 800c972:	d501      	bpl.n	800c978 <_printf_float+0x16c>
 800c974:	3301      	adds	r3, #1
 800c976:	6123      	str	r3, [r4, #16]
 800c978:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d09c      	beq.n	800c8ba <_printf_float+0xae>
 800c980:	232d      	movs	r3, #45	; 0x2d
 800c982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c986:	e798      	b.n	800c8ba <_printf_float+0xae>
 800c988:	9a06      	ldr	r2, [sp, #24]
 800c98a:	2a47      	cmp	r2, #71	; 0x47
 800c98c:	d1be      	bne.n	800c90c <_printf_float+0x100>
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d1bc      	bne.n	800c90c <_printf_float+0x100>
 800c992:	2301      	movs	r3, #1
 800c994:	e7b9      	b.n	800c90a <_printf_float+0xfe>
 800c996:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c99a:	d118      	bne.n	800c9ce <_printf_float+0x1c2>
 800c99c:	2900      	cmp	r1, #0
 800c99e:	6863      	ldr	r3, [r4, #4]
 800c9a0:	dd0b      	ble.n	800c9ba <_printf_float+0x1ae>
 800c9a2:	6121      	str	r1, [r4, #16]
 800c9a4:	b913      	cbnz	r3, 800c9ac <_printf_float+0x1a0>
 800c9a6:	6822      	ldr	r2, [r4, #0]
 800c9a8:	07d0      	lsls	r0, r2, #31
 800c9aa:	d502      	bpl.n	800c9b2 <_printf_float+0x1a6>
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	440b      	add	r3, r1
 800c9b0:	6123      	str	r3, [r4, #16]
 800c9b2:	65a1      	str	r1, [r4, #88]	; 0x58
 800c9b4:	f04f 0900 	mov.w	r9, #0
 800c9b8:	e7de      	b.n	800c978 <_printf_float+0x16c>
 800c9ba:	b913      	cbnz	r3, 800c9c2 <_printf_float+0x1b6>
 800c9bc:	6822      	ldr	r2, [r4, #0]
 800c9be:	07d2      	lsls	r2, r2, #31
 800c9c0:	d501      	bpl.n	800c9c6 <_printf_float+0x1ba>
 800c9c2:	3302      	adds	r3, #2
 800c9c4:	e7f4      	b.n	800c9b0 <_printf_float+0x1a4>
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	e7f2      	b.n	800c9b0 <_printf_float+0x1a4>
 800c9ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c9ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9d0:	4299      	cmp	r1, r3
 800c9d2:	db05      	blt.n	800c9e0 <_printf_float+0x1d4>
 800c9d4:	6823      	ldr	r3, [r4, #0]
 800c9d6:	6121      	str	r1, [r4, #16]
 800c9d8:	07d8      	lsls	r0, r3, #31
 800c9da:	d5ea      	bpl.n	800c9b2 <_printf_float+0x1a6>
 800c9dc:	1c4b      	adds	r3, r1, #1
 800c9de:	e7e7      	b.n	800c9b0 <_printf_float+0x1a4>
 800c9e0:	2900      	cmp	r1, #0
 800c9e2:	bfd4      	ite	le
 800c9e4:	f1c1 0202 	rsble	r2, r1, #2
 800c9e8:	2201      	movgt	r2, #1
 800c9ea:	4413      	add	r3, r2
 800c9ec:	e7e0      	b.n	800c9b0 <_printf_float+0x1a4>
 800c9ee:	6823      	ldr	r3, [r4, #0]
 800c9f0:	055a      	lsls	r2, r3, #21
 800c9f2:	d407      	bmi.n	800ca04 <_printf_float+0x1f8>
 800c9f4:	6923      	ldr	r3, [r4, #16]
 800c9f6:	4642      	mov	r2, r8
 800c9f8:	4631      	mov	r1, r6
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	47b8      	blx	r7
 800c9fe:	3001      	adds	r0, #1
 800ca00:	d12c      	bne.n	800ca5c <_printf_float+0x250>
 800ca02:	e764      	b.n	800c8ce <_printf_float+0xc2>
 800ca04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ca08:	f240 80e0 	bls.w	800cbcc <_printf_float+0x3c0>
 800ca0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca10:	2200      	movs	r2, #0
 800ca12:	2300      	movs	r3, #0
 800ca14:	f7f4 f888 	bl	8000b28 <__aeabi_dcmpeq>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	d034      	beq.n	800ca86 <_printf_float+0x27a>
 800ca1c:	4a37      	ldr	r2, [pc, #220]	; (800cafc <_printf_float+0x2f0>)
 800ca1e:	2301      	movs	r3, #1
 800ca20:	4631      	mov	r1, r6
 800ca22:	4628      	mov	r0, r5
 800ca24:	47b8      	blx	r7
 800ca26:	3001      	adds	r0, #1
 800ca28:	f43f af51 	beq.w	800c8ce <_printf_float+0xc2>
 800ca2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca30:	429a      	cmp	r2, r3
 800ca32:	db02      	blt.n	800ca3a <_printf_float+0x22e>
 800ca34:	6823      	ldr	r3, [r4, #0]
 800ca36:	07d8      	lsls	r0, r3, #31
 800ca38:	d510      	bpl.n	800ca5c <_printf_float+0x250>
 800ca3a:	ee18 3a10 	vmov	r3, s16
 800ca3e:	4652      	mov	r2, sl
 800ca40:	4631      	mov	r1, r6
 800ca42:	4628      	mov	r0, r5
 800ca44:	47b8      	blx	r7
 800ca46:	3001      	adds	r0, #1
 800ca48:	f43f af41 	beq.w	800c8ce <_printf_float+0xc2>
 800ca4c:	f04f 0800 	mov.w	r8, #0
 800ca50:	f104 091a 	add.w	r9, r4, #26
 800ca54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca56:	3b01      	subs	r3, #1
 800ca58:	4543      	cmp	r3, r8
 800ca5a:	dc09      	bgt.n	800ca70 <_printf_float+0x264>
 800ca5c:	6823      	ldr	r3, [r4, #0]
 800ca5e:	079b      	lsls	r3, r3, #30
 800ca60:	f100 8105 	bmi.w	800cc6e <_printf_float+0x462>
 800ca64:	68e0      	ldr	r0, [r4, #12]
 800ca66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca68:	4298      	cmp	r0, r3
 800ca6a:	bfb8      	it	lt
 800ca6c:	4618      	movlt	r0, r3
 800ca6e:	e730      	b.n	800c8d2 <_printf_float+0xc6>
 800ca70:	2301      	movs	r3, #1
 800ca72:	464a      	mov	r2, r9
 800ca74:	4631      	mov	r1, r6
 800ca76:	4628      	mov	r0, r5
 800ca78:	47b8      	blx	r7
 800ca7a:	3001      	adds	r0, #1
 800ca7c:	f43f af27 	beq.w	800c8ce <_printf_float+0xc2>
 800ca80:	f108 0801 	add.w	r8, r8, #1
 800ca84:	e7e6      	b.n	800ca54 <_printf_float+0x248>
 800ca86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	dc39      	bgt.n	800cb00 <_printf_float+0x2f4>
 800ca8c:	4a1b      	ldr	r2, [pc, #108]	; (800cafc <_printf_float+0x2f0>)
 800ca8e:	2301      	movs	r3, #1
 800ca90:	4631      	mov	r1, r6
 800ca92:	4628      	mov	r0, r5
 800ca94:	47b8      	blx	r7
 800ca96:	3001      	adds	r0, #1
 800ca98:	f43f af19 	beq.w	800c8ce <_printf_float+0xc2>
 800ca9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800caa0:	4313      	orrs	r3, r2
 800caa2:	d102      	bne.n	800caaa <_printf_float+0x29e>
 800caa4:	6823      	ldr	r3, [r4, #0]
 800caa6:	07d9      	lsls	r1, r3, #31
 800caa8:	d5d8      	bpl.n	800ca5c <_printf_float+0x250>
 800caaa:	ee18 3a10 	vmov	r3, s16
 800caae:	4652      	mov	r2, sl
 800cab0:	4631      	mov	r1, r6
 800cab2:	4628      	mov	r0, r5
 800cab4:	47b8      	blx	r7
 800cab6:	3001      	adds	r0, #1
 800cab8:	f43f af09 	beq.w	800c8ce <_printf_float+0xc2>
 800cabc:	f04f 0900 	mov.w	r9, #0
 800cac0:	f104 0a1a 	add.w	sl, r4, #26
 800cac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cac6:	425b      	negs	r3, r3
 800cac8:	454b      	cmp	r3, r9
 800caca:	dc01      	bgt.n	800cad0 <_printf_float+0x2c4>
 800cacc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cace:	e792      	b.n	800c9f6 <_printf_float+0x1ea>
 800cad0:	2301      	movs	r3, #1
 800cad2:	4652      	mov	r2, sl
 800cad4:	4631      	mov	r1, r6
 800cad6:	4628      	mov	r0, r5
 800cad8:	47b8      	blx	r7
 800cada:	3001      	adds	r0, #1
 800cadc:	f43f aef7 	beq.w	800c8ce <_printf_float+0xc2>
 800cae0:	f109 0901 	add.w	r9, r9, #1
 800cae4:	e7ee      	b.n	800cac4 <_printf_float+0x2b8>
 800cae6:	bf00      	nop
 800cae8:	7fefffff 	.word	0x7fefffff
 800caec:	080114b0 	.word	0x080114b0
 800caf0:	080114b4 	.word	0x080114b4
 800caf4:	080114bc 	.word	0x080114bc
 800caf8:	080114b8 	.word	0x080114b8
 800cafc:	08011859 	.word	0x08011859
 800cb00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb04:	429a      	cmp	r2, r3
 800cb06:	bfa8      	it	ge
 800cb08:	461a      	movge	r2, r3
 800cb0a:	2a00      	cmp	r2, #0
 800cb0c:	4691      	mov	r9, r2
 800cb0e:	dc37      	bgt.n	800cb80 <_printf_float+0x374>
 800cb10:	f04f 0b00 	mov.w	fp, #0
 800cb14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb18:	f104 021a 	add.w	r2, r4, #26
 800cb1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb1e:	9305      	str	r3, [sp, #20]
 800cb20:	eba3 0309 	sub.w	r3, r3, r9
 800cb24:	455b      	cmp	r3, fp
 800cb26:	dc33      	bgt.n	800cb90 <_printf_float+0x384>
 800cb28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	db3b      	blt.n	800cba8 <_printf_float+0x39c>
 800cb30:	6823      	ldr	r3, [r4, #0]
 800cb32:	07da      	lsls	r2, r3, #31
 800cb34:	d438      	bmi.n	800cba8 <_printf_float+0x39c>
 800cb36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb38:	9b05      	ldr	r3, [sp, #20]
 800cb3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cb3c:	1ad3      	subs	r3, r2, r3
 800cb3e:	eba2 0901 	sub.w	r9, r2, r1
 800cb42:	4599      	cmp	r9, r3
 800cb44:	bfa8      	it	ge
 800cb46:	4699      	movge	r9, r3
 800cb48:	f1b9 0f00 	cmp.w	r9, #0
 800cb4c:	dc35      	bgt.n	800cbba <_printf_float+0x3ae>
 800cb4e:	f04f 0800 	mov.w	r8, #0
 800cb52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cb56:	f104 0a1a 	add.w	sl, r4, #26
 800cb5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb5e:	1a9b      	subs	r3, r3, r2
 800cb60:	eba3 0309 	sub.w	r3, r3, r9
 800cb64:	4543      	cmp	r3, r8
 800cb66:	f77f af79 	ble.w	800ca5c <_printf_float+0x250>
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	4652      	mov	r2, sl
 800cb6e:	4631      	mov	r1, r6
 800cb70:	4628      	mov	r0, r5
 800cb72:	47b8      	blx	r7
 800cb74:	3001      	adds	r0, #1
 800cb76:	f43f aeaa 	beq.w	800c8ce <_printf_float+0xc2>
 800cb7a:	f108 0801 	add.w	r8, r8, #1
 800cb7e:	e7ec      	b.n	800cb5a <_printf_float+0x34e>
 800cb80:	4613      	mov	r3, r2
 800cb82:	4631      	mov	r1, r6
 800cb84:	4642      	mov	r2, r8
 800cb86:	4628      	mov	r0, r5
 800cb88:	47b8      	blx	r7
 800cb8a:	3001      	adds	r0, #1
 800cb8c:	d1c0      	bne.n	800cb10 <_printf_float+0x304>
 800cb8e:	e69e      	b.n	800c8ce <_printf_float+0xc2>
 800cb90:	2301      	movs	r3, #1
 800cb92:	4631      	mov	r1, r6
 800cb94:	4628      	mov	r0, r5
 800cb96:	9205      	str	r2, [sp, #20]
 800cb98:	47b8      	blx	r7
 800cb9a:	3001      	adds	r0, #1
 800cb9c:	f43f ae97 	beq.w	800c8ce <_printf_float+0xc2>
 800cba0:	9a05      	ldr	r2, [sp, #20]
 800cba2:	f10b 0b01 	add.w	fp, fp, #1
 800cba6:	e7b9      	b.n	800cb1c <_printf_float+0x310>
 800cba8:	ee18 3a10 	vmov	r3, s16
 800cbac:	4652      	mov	r2, sl
 800cbae:	4631      	mov	r1, r6
 800cbb0:	4628      	mov	r0, r5
 800cbb2:	47b8      	blx	r7
 800cbb4:	3001      	adds	r0, #1
 800cbb6:	d1be      	bne.n	800cb36 <_printf_float+0x32a>
 800cbb8:	e689      	b.n	800c8ce <_printf_float+0xc2>
 800cbba:	9a05      	ldr	r2, [sp, #20]
 800cbbc:	464b      	mov	r3, r9
 800cbbe:	4442      	add	r2, r8
 800cbc0:	4631      	mov	r1, r6
 800cbc2:	4628      	mov	r0, r5
 800cbc4:	47b8      	blx	r7
 800cbc6:	3001      	adds	r0, #1
 800cbc8:	d1c1      	bne.n	800cb4e <_printf_float+0x342>
 800cbca:	e680      	b.n	800c8ce <_printf_float+0xc2>
 800cbcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbce:	2a01      	cmp	r2, #1
 800cbd0:	dc01      	bgt.n	800cbd6 <_printf_float+0x3ca>
 800cbd2:	07db      	lsls	r3, r3, #31
 800cbd4:	d538      	bpl.n	800cc48 <_printf_float+0x43c>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	4642      	mov	r2, r8
 800cbda:	4631      	mov	r1, r6
 800cbdc:	4628      	mov	r0, r5
 800cbde:	47b8      	blx	r7
 800cbe0:	3001      	adds	r0, #1
 800cbe2:	f43f ae74 	beq.w	800c8ce <_printf_float+0xc2>
 800cbe6:	ee18 3a10 	vmov	r3, s16
 800cbea:	4652      	mov	r2, sl
 800cbec:	4631      	mov	r1, r6
 800cbee:	4628      	mov	r0, r5
 800cbf0:	47b8      	blx	r7
 800cbf2:	3001      	adds	r0, #1
 800cbf4:	f43f ae6b 	beq.w	800c8ce <_printf_float+0xc2>
 800cbf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	2300      	movs	r3, #0
 800cc00:	f7f3 ff92 	bl	8000b28 <__aeabi_dcmpeq>
 800cc04:	b9d8      	cbnz	r0, 800cc3e <_printf_float+0x432>
 800cc06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc08:	f108 0201 	add.w	r2, r8, #1
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	4631      	mov	r1, r6
 800cc10:	4628      	mov	r0, r5
 800cc12:	47b8      	blx	r7
 800cc14:	3001      	adds	r0, #1
 800cc16:	d10e      	bne.n	800cc36 <_printf_float+0x42a>
 800cc18:	e659      	b.n	800c8ce <_printf_float+0xc2>
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	4652      	mov	r2, sl
 800cc1e:	4631      	mov	r1, r6
 800cc20:	4628      	mov	r0, r5
 800cc22:	47b8      	blx	r7
 800cc24:	3001      	adds	r0, #1
 800cc26:	f43f ae52 	beq.w	800c8ce <_printf_float+0xc2>
 800cc2a:	f108 0801 	add.w	r8, r8, #1
 800cc2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc30:	3b01      	subs	r3, #1
 800cc32:	4543      	cmp	r3, r8
 800cc34:	dcf1      	bgt.n	800cc1a <_printf_float+0x40e>
 800cc36:	464b      	mov	r3, r9
 800cc38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cc3c:	e6dc      	b.n	800c9f8 <_printf_float+0x1ec>
 800cc3e:	f04f 0800 	mov.w	r8, #0
 800cc42:	f104 0a1a 	add.w	sl, r4, #26
 800cc46:	e7f2      	b.n	800cc2e <_printf_float+0x422>
 800cc48:	2301      	movs	r3, #1
 800cc4a:	4642      	mov	r2, r8
 800cc4c:	e7df      	b.n	800cc0e <_printf_float+0x402>
 800cc4e:	2301      	movs	r3, #1
 800cc50:	464a      	mov	r2, r9
 800cc52:	4631      	mov	r1, r6
 800cc54:	4628      	mov	r0, r5
 800cc56:	47b8      	blx	r7
 800cc58:	3001      	adds	r0, #1
 800cc5a:	f43f ae38 	beq.w	800c8ce <_printf_float+0xc2>
 800cc5e:	f108 0801 	add.w	r8, r8, #1
 800cc62:	68e3      	ldr	r3, [r4, #12]
 800cc64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc66:	1a5b      	subs	r3, r3, r1
 800cc68:	4543      	cmp	r3, r8
 800cc6a:	dcf0      	bgt.n	800cc4e <_printf_float+0x442>
 800cc6c:	e6fa      	b.n	800ca64 <_printf_float+0x258>
 800cc6e:	f04f 0800 	mov.w	r8, #0
 800cc72:	f104 0919 	add.w	r9, r4, #25
 800cc76:	e7f4      	b.n	800cc62 <_printf_float+0x456>

0800cc78 <_printf_common>:
 800cc78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc7c:	4616      	mov	r6, r2
 800cc7e:	4699      	mov	r9, r3
 800cc80:	688a      	ldr	r2, [r1, #8]
 800cc82:	690b      	ldr	r3, [r1, #16]
 800cc84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	bfb8      	it	lt
 800cc8c:	4613      	movlt	r3, r2
 800cc8e:	6033      	str	r3, [r6, #0]
 800cc90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc94:	4607      	mov	r7, r0
 800cc96:	460c      	mov	r4, r1
 800cc98:	b10a      	cbz	r2, 800cc9e <_printf_common+0x26>
 800cc9a:	3301      	adds	r3, #1
 800cc9c:	6033      	str	r3, [r6, #0]
 800cc9e:	6823      	ldr	r3, [r4, #0]
 800cca0:	0699      	lsls	r1, r3, #26
 800cca2:	bf42      	ittt	mi
 800cca4:	6833      	ldrmi	r3, [r6, #0]
 800cca6:	3302      	addmi	r3, #2
 800cca8:	6033      	strmi	r3, [r6, #0]
 800ccaa:	6825      	ldr	r5, [r4, #0]
 800ccac:	f015 0506 	ands.w	r5, r5, #6
 800ccb0:	d106      	bne.n	800ccc0 <_printf_common+0x48>
 800ccb2:	f104 0a19 	add.w	sl, r4, #25
 800ccb6:	68e3      	ldr	r3, [r4, #12]
 800ccb8:	6832      	ldr	r2, [r6, #0]
 800ccba:	1a9b      	subs	r3, r3, r2
 800ccbc:	42ab      	cmp	r3, r5
 800ccbe:	dc26      	bgt.n	800cd0e <_printf_common+0x96>
 800ccc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ccc4:	1e13      	subs	r3, r2, #0
 800ccc6:	6822      	ldr	r2, [r4, #0]
 800ccc8:	bf18      	it	ne
 800ccca:	2301      	movne	r3, #1
 800cccc:	0692      	lsls	r2, r2, #26
 800ccce:	d42b      	bmi.n	800cd28 <_printf_common+0xb0>
 800ccd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ccd4:	4649      	mov	r1, r9
 800ccd6:	4638      	mov	r0, r7
 800ccd8:	47c0      	blx	r8
 800ccda:	3001      	adds	r0, #1
 800ccdc:	d01e      	beq.n	800cd1c <_printf_common+0xa4>
 800ccde:	6823      	ldr	r3, [r4, #0]
 800cce0:	68e5      	ldr	r5, [r4, #12]
 800cce2:	6832      	ldr	r2, [r6, #0]
 800cce4:	f003 0306 	and.w	r3, r3, #6
 800cce8:	2b04      	cmp	r3, #4
 800ccea:	bf08      	it	eq
 800ccec:	1aad      	subeq	r5, r5, r2
 800ccee:	68a3      	ldr	r3, [r4, #8]
 800ccf0:	6922      	ldr	r2, [r4, #16]
 800ccf2:	bf0c      	ite	eq
 800ccf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ccf8:	2500      	movne	r5, #0
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	bfc4      	itt	gt
 800ccfe:	1a9b      	subgt	r3, r3, r2
 800cd00:	18ed      	addgt	r5, r5, r3
 800cd02:	2600      	movs	r6, #0
 800cd04:	341a      	adds	r4, #26
 800cd06:	42b5      	cmp	r5, r6
 800cd08:	d11a      	bne.n	800cd40 <_printf_common+0xc8>
 800cd0a:	2000      	movs	r0, #0
 800cd0c:	e008      	b.n	800cd20 <_printf_common+0xa8>
 800cd0e:	2301      	movs	r3, #1
 800cd10:	4652      	mov	r2, sl
 800cd12:	4649      	mov	r1, r9
 800cd14:	4638      	mov	r0, r7
 800cd16:	47c0      	blx	r8
 800cd18:	3001      	adds	r0, #1
 800cd1a:	d103      	bne.n	800cd24 <_printf_common+0xac>
 800cd1c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd24:	3501      	adds	r5, #1
 800cd26:	e7c6      	b.n	800ccb6 <_printf_common+0x3e>
 800cd28:	18e1      	adds	r1, r4, r3
 800cd2a:	1c5a      	adds	r2, r3, #1
 800cd2c:	2030      	movs	r0, #48	; 0x30
 800cd2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd32:	4422      	add	r2, r4
 800cd34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd3c:	3302      	adds	r3, #2
 800cd3e:	e7c7      	b.n	800ccd0 <_printf_common+0x58>
 800cd40:	2301      	movs	r3, #1
 800cd42:	4622      	mov	r2, r4
 800cd44:	4649      	mov	r1, r9
 800cd46:	4638      	mov	r0, r7
 800cd48:	47c0      	blx	r8
 800cd4a:	3001      	adds	r0, #1
 800cd4c:	d0e6      	beq.n	800cd1c <_printf_common+0xa4>
 800cd4e:	3601      	adds	r6, #1
 800cd50:	e7d9      	b.n	800cd06 <_printf_common+0x8e>
	...

0800cd54 <_printf_i>:
 800cd54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd58:	460c      	mov	r4, r1
 800cd5a:	4691      	mov	r9, r2
 800cd5c:	7e27      	ldrb	r7, [r4, #24]
 800cd5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800cd60:	2f78      	cmp	r7, #120	; 0x78
 800cd62:	4680      	mov	r8, r0
 800cd64:	469a      	mov	sl, r3
 800cd66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd6a:	d807      	bhi.n	800cd7c <_printf_i+0x28>
 800cd6c:	2f62      	cmp	r7, #98	; 0x62
 800cd6e:	d80a      	bhi.n	800cd86 <_printf_i+0x32>
 800cd70:	2f00      	cmp	r7, #0
 800cd72:	f000 80d8 	beq.w	800cf26 <_printf_i+0x1d2>
 800cd76:	2f58      	cmp	r7, #88	; 0x58
 800cd78:	f000 80a3 	beq.w	800cec2 <_printf_i+0x16e>
 800cd7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cd80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd84:	e03a      	b.n	800cdfc <_printf_i+0xa8>
 800cd86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd8a:	2b15      	cmp	r3, #21
 800cd8c:	d8f6      	bhi.n	800cd7c <_printf_i+0x28>
 800cd8e:	a001      	add	r0, pc, #4	; (adr r0, 800cd94 <_printf_i+0x40>)
 800cd90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cd94:	0800cded 	.word	0x0800cded
 800cd98:	0800ce01 	.word	0x0800ce01
 800cd9c:	0800cd7d 	.word	0x0800cd7d
 800cda0:	0800cd7d 	.word	0x0800cd7d
 800cda4:	0800cd7d 	.word	0x0800cd7d
 800cda8:	0800cd7d 	.word	0x0800cd7d
 800cdac:	0800ce01 	.word	0x0800ce01
 800cdb0:	0800cd7d 	.word	0x0800cd7d
 800cdb4:	0800cd7d 	.word	0x0800cd7d
 800cdb8:	0800cd7d 	.word	0x0800cd7d
 800cdbc:	0800cd7d 	.word	0x0800cd7d
 800cdc0:	0800cf0d 	.word	0x0800cf0d
 800cdc4:	0800ce31 	.word	0x0800ce31
 800cdc8:	0800ceef 	.word	0x0800ceef
 800cdcc:	0800cd7d 	.word	0x0800cd7d
 800cdd0:	0800cd7d 	.word	0x0800cd7d
 800cdd4:	0800cf2f 	.word	0x0800cf2f
 800cdd8:	0800cd7d 	.word	0x0800cd7d
 800cddc:	0800ce31 	.word	0x0800ce31
 800cde0:	0800cd7d 	.word	0x0800cd7d
 800cde4:	0800cd7d 	.word	0x0800cd7d
 800cde8:	0800cef7 	.word	0x0800cef7
 800cdec:	680b      	ldr	r3, [r1, #0]
 800cdee:	1d1a      	adds	r2, r3, #4
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	600a      	str	r2, [r1, #0]
 800cdf4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cdf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	e0a3      	b.n	800cf48 <_printf_i+0x1f4>
 800ce00:	6825      	ldr	r5, [r4, #0]
 800ce02:	6808      	ldr	r0, [r1, #0]
 800ce04:	062e      	lsls	r6, r5, #24
 800ce06:	f100 0304 	add.w	r3, r0, #4
 800ce0a:	d50a      	bpl.n	800ce22 <_printf_i+0xce>
 800ce0c:	6805      	ldr	r5, [r0, #0]
 800ce0e:	600b      	str	r3, [r1, #0]
 800ce10:	2d00      	cmp	r5, #0
 800ce12:	da03      	bge.n	800ce1c <_printf_i+0xc8>
 800ce14:	232d      	movs	r3, #45	; 0x2d
 800ce16:	426d      	negs	r5, r5
 800ce18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce1c:	485e      	ldr	r0, [pc, #376]	; (800cf98 <_printf_i+0x244>)
 800ce1e:	230a      	movs	r3, #10
 800ce20:	e019      	b.n	800ce56 <_printf_i+0x102>
 800ce22:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ce26:	6805      	ldr	r5, [r0, #0]
 800ce28:	600b      	str	r3, [r1, #0]
 800ce2a:	bf18      	it	ne
 800ce2c:	b22d      	sxthne	r5, r5
 800ce2e:	e7ef      	b.n	800ce10 <_printf_i+0xbc>
 800ce30:	680b      	ldr	r3, [r1, #0]
 800ce32:	6825      	ldr	r5, [r4, #0]
 800ce34:	1d18      	adds	r0, r3, #4
 800ce36:	6008      	str	r0, [r1, #0]
 800ce38:	0628      	lsls	r0, r5, #24
 800ce3a:	d501      	bpl.n	800ce40 <_printf_i+0xec>
 800ce3c:	681d      	ldr	r5, [r3, #0]
 800ce3e:	e002      	b.n	800ce46 <_printf_i+0xf2>
 800ce40:	0669      	lsls	r1, r5, #25
 800ce42:	d5fb      	bpl.n	800ce3c <_printf_i+0xe8>
 800ce44:	881d      	ldrh	r5, [r3, #0]
 800ce46:	4854      	ldr	r0, [pc, #336]	; (800cf98 <_printf_i+0x244>)
 800ce48:	2f6f      	cmp	r7, #111	; 0x6f
 800ce4a:	bf0c      	ite	eq
 800ce4c:	2308      	moveq	r3, #8
 800ce4e:	230a      	movne	r3, #10
 800ce50:	2100      	movs	r1, #0
 800ce52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce56:	6866      	ldr	r6, [r4, #4]
 800ce58:	60a6      	str	r6, [r4, #8]
 800ce5a:	2e00      	cmp	r6, #0
 800ce5c:	bfa2      	ittt	ge
 800ce5e:	6821      	ldrge	r1, [r4, #0]
 800ce60:	f021 0104 	bicge.w	r1, r1, #4
 800ce64:	6021      	strge	r1, [r4, #0]
 800ce66:	b90d      	cbnz	r5, 800ce6c <_printf_i+0x118>
 800ce68:	2e00      	cmp	r6, #0
 800ce6a:	d04d      	beq.n	800cf08 <_printf_i+0x1b4>
 800ce6c:	4616      	mov	r6, r2
 800ce6e:	fbb5 f1f3 	udiv	r1, r5, r3
 800ce72:	fb03 5711 	mls	r7, r3, r1, r5
 800ce76:	5dc7      	ldrb	r7, [r0, r7]
 800ce78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ce7c:	462f      	mov	r7, r5
 800ce7e:	42bb      	cmp	r3, r7
 800ce80:	460d      	mov	r5, r1
 800ce82:	d9f4      	bls.n	800ce6e <_printf_i+0x11a>
 800ce84:	2b08      	cmp	r3, #8
 800ce86:	d10b      	bne.n	800cea0 <_printf_i+0x14c>
 800ce88:	6823      	ldr	r3, [r4, #0]
 800ce8a:	07df      	lsls	r7, r3, #31
 800ce8c:	d508      	bpl.n	800cea0 <_printf_i+0x14c>
 800ce8e:	6923      	ldr	r3, [r4, #16]
 800ce90:	6861      	ldr	r1, [r4, #4]
 800ce92:	4299      	cmp	r1, r3
 800ce94:	bfde      	ittt	le
 800ce96:	2330      	movle	r3, #48	; 0x30
 800ce98:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ce9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cea0:	1b92      	subs	r2, r2, r6
 800cea2:	6122      	str	r2, [r4, #16]
 800cea4:	f8cd a000 	str.w	sl, [sp]
 800cea8:	464b      	mov	r3, r9
 800ceaa:	aa03      	add	r2, sp, #12
 800ceac:	4621      	mov	r1, r4
 800ceae:	4640      	mov	r0, r8
 800ceb0:	f7ff fee2 	bl	800cc78 <_printf_common>
 800ceb4:	3001      	adds	r0, #1
 800ceb6:	d14c      	bne.n	800cf52 <_printf_i+0x1fe>
 800ceb8:	f04f 30ff 	mov.w	r0, #4294967295
 800cebc:	b004      	add	sp, #16
 800cebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cec2:	4835      	ldr	r0, [pc, #212]	; (800cf98 <_printf_i+0x244>)
 800cec4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cec8:	6823      	ldr	r3, [r4, #0]
 800ceca:	680e      	ldr	r6, [r1, #0]
 800cecc:	061f      	lsls	r7, r3, #24
 800cece:	f856 5b04 	ldr.w	r5, [r6], #4
 800ced2:	600e      	str	r6, [r1, #0]
 800ced4:	d514      	bpl.n	800cf00 <_printf_i+0x1ac>
 800ced6:	07d9      	lsls	r1, r3, #31
 800ced8:	bf44      	itt	mi
 800ceda:	f043 0320 	orrmi.w	r3, r3, #32
 800cede:	6023      	strmi	r3, [r4, #0]
 800cee0:	b91d      	cbnz	r5, 800ceea <_printf_i+0x196>
 800cee2:	6823      	ldr	r3, [r4, #0]
 800cee4:	f023 0320 	bic.w	r3, r3, #32
 800cee8:	6023      	str	r3, [r4, #0]
 800ceea:	2310      	movs	r3, #16
 800ceec:	e7b0      	b.n	800ce50 <_printf_i+0xfc>
 800ceee:	6823      	ldr	r3, [r4, #0]
 800cef0:	f043 0320 	orr.w	r3, r3, #32
 800cef4:	6023      	str	r3, [r4, #0]
 800cef6:	2378      	movs	r3, #120	; 0x78
 800cef8:	4828      	ldr	r0, [pc, #160]	; (800cf9c <_printf_i+0x248>)
 800cefa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cefe:	e7e3      	b.n	800cec8 <_printf_i+0x174>
 800cf00:	065e      	lsls	r6, r3, #25
 800cf02:	bf48      	it	mi
 800cf04:	b2ad      	uxthmi	r5, r5
 800cf06:	e7e6      	b.n	800ced6 <_printf_i+0x182>
 800cf08:	4616      	mov	r6, r2
 800cf0a:	e7bb      	b.n	800ce84 <_printf_i+0x130>
 800cf0c:	680b      	ldr	r3, [r1, #0]
 800cf0e:	6826      	ldr	r6, [r4, #0]
 800cf10:	6960      	ldr	r0, [r4, #20]
 800cf12:	1d1d      	adds	r5, r3, #4
 800cf14:	600d      	str	r5, [r1, #0]
 800cf16:	0635      	lsls	r5, r6, #24
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	d501      	bpl.n	800cf20 <_printf_i+0x1cc>
 800cf1c:	6018      	str	r0, [r3, #0]
 800cf1e:	e002      	b.n	800cf26 <_printf_i+0x1d2>
 800cf20:	0671      	lsls	r1, r6, #25
 800cf22:	d5fb      	bpl.n	800cf1c <_printf_i+0x1c8>
 800cf24:	8018      	strh	r0, [r3, #0]
 800cf26:	2300      	movs	r3, #0
 800cf28:	6123      	str	r3, [r4, #16]
 800cf2a:	4616      	mov	r6, r2
 800cf2c:	e7ba      	b.n	800cea4 <_printf_i+0x150>
 800cf2e:	680b      	ldr	r3, [r1, #0]
 800cf30:	1d1a      	adds	r2, r3, #4
 800cf32:	600a      	str	r2, [r1, #0]
 800cf34:	681e      	ldr	r6, [r3, #0]
 800cf36:	6862      	ldr	r2, [r4, #4]
 800cf38:	2100      	movs	r1, #0
 800cf3a:	4630      	mov	r0, r6
 800cf3c:	f7f3 f980 	bl	8000240 <memchr>
 800cf40:	b108      	cbz	r0, 800cf46 <_printf_i+0x1f2>
 800cf42:	1b80      	subs	r0, r0, r6
 800cf44:	6060      	str	r0, [r4, #4]
 800cf46:	6863      	ldr	r3, [r4, #4]
 800cf48:	6123      	str	r3, [r4, #16]
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf50:	e7a8      	b.n	800cea4 <_printf_i+0x150>
 800cf52:	6923      	ldr	r3, [r4, #16]
 800cf54:	4632      	mov	r2, r6
 800cf56:	4649      	mov	r1, r9
 800cf58:	4640      	mov	r0, r8
 800cf5a:	47d0      	blx	sl
 800cf5c:	3001      	adds	r0, #1
 800cf5e:	d0ab      	beq.n	800ceb8 <_printf_i+0x164>
 800cf60:	6823      	ldr	r3, [r4, #0]
 800cf62:	079b      	lsls	r3, r3, #30
 800cf64:	d413      	bmi.n	800cf8e <_printf_i+0x23a>
 800cf66:	68e0      	ldr	r0, [r4, #12]
 800cf68:	9b03      	ldr	r3, [sp, #12]
 800cf6a:	4298      	cmp	r0, r3
 800cf6c:	bfb8      	it	lt
 800cf6e:	4618      	movlt	r0, r3
 800cf70:	e7a4      	b.n	800cebc <_printf_i+0x168>
 800cf72:	2301      	movs	r3, #1
 800cf74:	4632      	mov	r2, r6
 800cf76:	4649      	mov	r1, r9
 800cf78:	4640      	mov	r0, r8
 800cf7a:	47d0      	blx	sl
 800cf7c:	3001      	adds	r0, #1
 800cf7e:	d09b      	beq.n	800ceb8 <_printf_i+0x164>
 800cf80:	3501      	adds	r5, #1
 800cf82:	68e3      	ldr	r3, [r4, #12]
 800cf84:	9903      	ldr	r1, [sp, #12]
 800cf86:	1a5b      	subs	r3, r3, r1
 800cf88:	42ab      	cmp	r3, r5
 800cf8a:	dcf2      	bgt.n	800cf72 <_printf_i+0x21e>
 800cf8c:	e7eb      	b.n	800cf66 <_printf_i+0x212>
 800cf8e:	2500      	movs	r5, #0
 800cf90:	f104 0619 	add.w	r6, r4, #25
 800cf94:	e7f5      	b.n	800cf82 <_printf_i+0x22e>
 800cf96:	bf00      	nop
 800cf98:	080114c0 	.word	0x080114c0
 800cf9c:	080114d1 	.word	0x080114d1

0800cfa0 <cleanup_glue>:
 800cfa0:	b538      	push	{r3, r4, r5, lr}
 800cfa2:	460c      	mov	r4, r1
 800cfa4:	6809      	ldr	r1, [r1, #0]
 800cfa6:	4605      	mov	r5, r0
 800cfa8:	b109      	cbz	r1, 800cfae <cleanup_glue+0xe>
 800cfaa:	f7ff fff9 	bl	800cfa0 <cleanup_glue>
 800cfae:	4621      	mov	r1, r4
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfb6:	f7ff badf 	b.w	800c578 <_free_r>
	...

0800cfbc <_reclaim_reent>:
 800cfbc:	4b2c      	ldr	r3, [pc, #176]	; (800d070 <_reclaim_reent+0xb4>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4283      	cmp	r3, r0
 800cfc2:	b570      	push	{r4, r5, r6, lr}
 800cfc4:	4604      	mov	r4, r0
 800cfc6:	d051      	beq.n	800d06c <_reclaim_reent+0xb0>
 800cfc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cfca:	b143      	cbz	r3, 800cfde <_reclaim_reent+0x22>
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d14a      	bne.n	800d068 <_reclaim_reent+0xac>
 800cfd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfd4:	6819      	ldr	r1, [r3, #0]
 800cfd6:	b111      	cbz	r1, 800cfde <_reclaim_reent+0x22>
 800cfd8:	4620      	mov	r0, r4
 800cfda:	f7ff facd 	bl	800c578 <_free_r>
 800cfde:	6961      	ldr	r1, [r4, #20]
 800cfe0:	b111      	cbz	r1, 800cfe8 <_reclaim_reent+0x2c>
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	f7ff fac8 	bl	800c578 <_free_r>
 800cfe8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cfea:	b111      	cbz	r1, 800cff2 <_reclaim_reent+0x36>
 800cfec:	4620      	mov	r0, r4
 800cfee:	f7ff fac3 	bl	800c578 <_free_r>
 800cff2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cff4:	b111      	cbz	r1, 800cffc <_reclaim_reent+0x40>
 800cff6:	4620      	mov	r0, r4
 800cff8:	f7ff fabe 	bl	800c578 <_free_r>
 800cffc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cffe:	b111      	cbz	r1, 800d006 <_reclaim_reent+0x4a>
 800d000:	4620      	mov	r0, r4
 800d002:	f7ff fab9 	bl	800c578 <_free_r>
 800d006:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d008:	b111      	cbz	r1, 800d010 <_reclaim_reent+0x54>
 800d00a:	4620      	mov	r0, r4
 800d00c:	f7ff fab4 	bl	800c578 <_free_r>
 800d010:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d012:	b111      	cbz	r1, 800d01a <_reclaim_reent+0x5e>
 800d014:	4620      	mov	r0, r4
 800d016:	f7ff faaf 	bl	800c578 <_free_r>
 800d01a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d01c:	b111      	cbz	r1, 800d024 <_reclaim_reent+0x68>
 800d01e:	4620      	mov	r0, r4
 800d020:	f7ff faaa 	bl	800c578 <_free_r>
 800d024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d026:	b111      	cbz	r1, 800d02e <_reclaim_reent+0x72>
 800d028:	4620      	mov	r0, r4
 800d02a:	f7ff faa5 	bl	800c578 <_free_r>
 800d02e:	69a3      	ldr	r3, [r4, #24]
 800d030:	b1e3      	cbz	r3, 800d06c <_reclaim_reent+0xb0>
 800d032:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d034:	4620      	mov	r0, r4
 800d036:	4798      	blx	r3
 800d038:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d03a:	b1b9      	cbz	r1, 800d06c <_reclaim_reent+0xb0>
 800d03c:	4620      	mov	r0, r4
 800d03e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d042:	f7ff bfad 	b.w	800cfa0 <cleanup_glue>
 800d046:	5949      	ldr	r1, [r1, r5]
 800d048:	b941      	cbnz	r1, 800d05c <_reclaim_reent+0xa0>
 800d04a:	3504      	adds	r5, #4
 800d04c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d04e:	2d80      	cmp	r5, #128	; 0x80
 800d050:	68d9      	ldr	r1, [r3, #12]
 800d052:	d1f8      	bne.n	800d046 <_reclaim_reent+0x8a>
 800d054:	4620      	mov	r0, r4
 800d056:	f7ff fa8f 	bl	800c578 <_free_r>
 800d05a:	e7ba      	b.n	800cfd2 <_reclaim_reent+0x16>
 800d05c:	680e      	ldr	r6, [r1, #0]
 800d05e:	4620      	mov	r0, r4
 800d060:	f7ff fa8a 	bl	800c578 <_free_r>
 800d064:	4631      	mov	r1, r6
 800d066:	e7ef      	b.n	800d048 <_reclaim_reent+0x8c>
 800d068:	2500      	movs	r5, #0
 800d06a:	e7ef      	b.n	800d04c <_reclaim_reent+0x90>
 800d06c:	bd70      	pop	{r4, r5, r6, pc}
 800d06e:	bf00      	nop
 800d070:	20000020 	.word	0x20000020

0800d074 <_sbrk_r>:
 800d074:	b538      	push	{r3, r4, r5, lr}
 800d076:	4d06      	ldr	r5, [pc, #24]	; (800d090 <_sbrk_r+0x1c>)
 800d078:	2300      	movs	r3, #0
 800d07a:	4604      	mov	r4, r0
 800d07c:	4608      	mov	r0, r1
 800d07e:	602b      	str	r3, [r5, #0]
 800d080:	f7f4 fe38 	bl	8001cf4 <_sbrk>
 800d084:	1c43      	adds	r3, r0, #1
 800d086:	d102      	bne.n	800d08e <_sbrk_r+0x1a>
 800d088:	682b      	ldr	r3, [r5, #0]
 800d08a:	b103      	cbz	r3, 800d08e <_sbrk_r+0x1a>
 800d08c:	6023      	str	r3, [r4, #0]
 800d08e:	bd38      	pop	{r3, r4, r5, pc}
 800d090:	20005098 	.word	0x20005098

0800d094 <_raise_r>:
 800d094:	291f      	cmp	r1, #31
 800d096:	b538      	push	{r3, r4, r5, lr}
 800d098:	4604      	mov	r4, r0
 800d09a:	460d      	mov	r5, r1
 800d09c:	d904      	bls.n	800d0a8 <_raise_r+0x14>
 800d09e:	2316      	movs	r3, #22
 800d0a0:	6003      	str	r3, [r0, #0]
 800d0a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a6:	bd38      	pop	{r3, r4, r5, pc}
 800d0a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d0aa:	b112      	cbz	r2, 800d0b2 <_raise_r+0x1e>
 800d0ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0b0:	b94b      	cbnz	r3, 800d0c6 <_raise_r+0x32>
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	f000 f830 	bl	800d118 <_getpid_r>
 800d0b8:	462a      	mov	r2, r5
 800d0ba:	4601      	mov	r1, r0
 800d0bc:	4620      	mov	r0, r4
 800d0be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0c2:	f000 b817 	b.w	800d0f4 <_kill_r>
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d00a      	beq.n	800d0e0 <_raise_r+0x4c>
 800d0ca:	1c59      	adds	r1, r3, #1
 800d0cc:	d103      	bne.n	800d0d6 <_raise_r+0x42>
 800d0ce:	2316      	movs	r3, #22
 800d0d0:	6003      	str	r3, [r0, #0]
 800d0d2:	2001      	movs	r0, #1
 800d0d4:	e7e7      	b.n	800d0a6 <_raise_r+0x12>
 800d0d6:	2400      	movs	r4, #0
 800d0d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0dc:	4628      	mov	r0, r5
 800d0de:	4798      	blx	r3
 800d0e0:	2000      	movs	r0, #0
 800d0e2:	e7e0      	b.n	800d0a6 <_raise_r+0x12>

0800d0e4 <raise>:
 800d0e4:	4b02      	ldr	r3, [pc, #8]	; (800d0f0 <raise+0xc>)
 800d0e6:	4601      	mov	r1, r0
 800d0e8:	6818      	ldr	r0, [r3, #0]
 800d0ea:	f7ff bfd3 	b.w	800d094 <_raise_r>
 800d0ee:	bf00      	nop
 800d0f0:	20000020 	.word	0x20000020

0800d0f4 <_kill_r>:
 800d0f4:	b538      	push	{r3, r4, r5, lr}
 800d0f6:	4d07      	ldr	r5, [pc, #28]	; (800d114 <_kill_r+0x20>)
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	4604      	mov	r4, r0
 800d0fc:	4608      	mov	r0, r1
 800d0fe:	4611      	mov	r1, r2
 800d100:	602b      	str	r3, [r5, #0]
 800d102:	f7f4 fd6f 	bl	8001be4 <_kill>
 800d106:	1c43      	adds	r3, r0, #1
 800d108:	d102      	bne.n	800d110 <_kill_r+0x1c>
 800d10a:	682b      	ldr	r3, [r5, #0]
 800d10c:	b103      	cbz	r3, 800d110 <_kill_r+0x1c>
 800d10e:	6023      	str	r3, [r4, #0]
 800d110:	bd38      	pop	{r3, r4, r5, pc}
 800d112:	bf00      	nop
 800d114:	20005098 	.word	0x20005098

0800d118 <_getpid_r>:
 800d118:	f7f4 bd5c 	b.w	8001bd4 <_getpid>

0800d11c <siprintf>:
 800d11c:	b40e      	push	{r1, r2, r3}
 800d11e:	b500      	push	{lr}
 800d120:	b09c      	sub	sp, #112	; 0x70
 800d122:	ab1d      	add	r3, sp, #116	; 0x74
 800d124:	9002      	str	r0, [sp, #8]
 800d126:	9006      	str	r0, [sp, #24]
 800d128:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d12c:	4809      	ldr	r0, [pc, #36]	; (800d154 <siprintf+0x38>)
 800d12e:	9107      	str	r1, [sp, #28]
 800d130:	9104      	str	r1, [sp, #16]
 800d132:	4909      	ldr	r1, [pc, #36]	; (800d158 <siprintf+0x3c>)
 800d134:	f853 2b04 	ldr.w	r2, [r3], #4
 800d138:	9105      	str	r1, [sp, #20]
 800d13a:	6800      	ldr	r0, [r0, #0]
 800d13c:	9301      	str	r3, [sp, #4]
 800d13e:	a902      	add	r1, sp, #8
 800d140:	f002 f88a 	bl	800f258 <_svfiprintf_r>
 800d144:	9b02      	ldr	r3, [sp, #8]
 800d146:	2200      	movs	r2, #0
 800d148:	701a      	strb	r2, [r3, #0]
 800d14a:	b01c      	add	sp, #112	; 0x70
 800d14c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d150:	b003      	add	sp, #12
 800d152:	4770      	bx	lr
 800d154:	20000020 	.word	0x20000020
 800d158:	ffff0208 	.word	0xffff0208

0800d15c <__sread>:
 800d15c:	b510      	push	{r4, lr}
 800d15e:	460c      	mov	r4, r1
 800d160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d164:	f002 fad2 	bl	800f70c <_read_r>
 800d168:	2800      	cmp	r0, #0
 800d16a:	bfab      	itete	ge
 800d16c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d16e:	89a3      	ldrhlt	r3, [r4, #12]
 800d170:	181b      	addge	r3, r3, r0
 800d172:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d176:	bfac      	ite	ge
 800d178:	6563      	strge	r3, [r4, #84]	; 0x54
 800d17a:	81a3      	strhlt	r3, [r4, #12]
 800d17c:	bd10      	pop	{r4, pc}

0800d17e <__seofread>:
 800d17e:	2000      	movs	r0, #0
 800d180:	4770      	bx	lr

0800d182 <__swrite>:
 800d182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d186:	461f      	mov	r7, r3
 800d188:	898b      	ldrh	r3, [r1, #12]
 800d18a:	05db      	lsls	r3, r3, #23
 800d18c:	4605      	mov	r5, r0
 800d18e:	460c      	mov	r4, r1
 800d190:	4616      	mov	r6, r2
 800d192:	d505      	bpl.n	800d1a0 <__swrite+0x1e>
 800d194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d198:	2302      	movs	r3, #2
 800d19a:	2200      	movs	r2, #0
 800d19c:	f001 fc1e 	bl	800e9dc <_lseek_r>
 800d1a0:	89a3      	ldrh	r3, [r4, #12]
 800d1a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d1aa:	81a3      	strh	r3, [r4, #12]
 800d1ac:	4632      	mov	r2, r6
 800d1ae:	463b      	mov	r3, r7
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1b6:	f000 bb75 	b.w	800d8a4 <_write_r>

0800d1ba <__sseek>:
 800d1ba:	b510      	push	{r4, lr}
 800d1bc:	460c      	mov	r4, r1
 800d1be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1c2:	f001 fc0b 	bl	800e9dc <_lseek_r>
 800d1c6:	1c43      	adds	r3, r0, #1
 800d1c8:	89a3      	ldrh	r3, [r4, #12]
 800d1ca:	bf15      	itete	ne
 800d1cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d1ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d1d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d1d6:	81a3      	strheq	r3, [r4, #12]
 800d1d8:	bf18      	it	ne
 800d1da:	81a3      	strhne	r3, [r4, #12]
 800d1dc:	bd10      	pop	{r4, pc}

0800d1de <__sclose>:
 800d1de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1e2:	f000 bb8f 	b.w	800d904 <_close_r>

0800d1e6 <strcpy>:
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1ec:	f803 2b01 	strb.w	r2, [r3], #1
 800d1f0:	2a00      	cmp	r2, #0
 800d1f2:	d1f9      	bne.n	800d1e8 <strcpy+0x2>
 800d1f4:	4770      	bx	lr

0800d1f6 <strncmp>:
 800d1f6:	b510      	push	{r4, lr}
 800d1f8:	b16a      	cbz	r2, 800d216 <strncmp+0x20>
 800d1fa:	3901      	subs	r1, #1
 800d1fc:	1884      	adds	r4, r0, r2
 800d1fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d202:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d206:	4293      	cmp	r3, r2
 800d208:	d103      	bne.n	800d212 <strncmp+0x1c>
 800d20a:	42a0      	cmp	r0, r4
 800d20c:	d001      	beq.n	800d212 <strncmp+0x1c>
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d1f5      	bne.n	800d1fe <strncmp+0x8>
 800d212:	1a98      	subs	r0, r3, r2
 800d214:	bd10      	pop	{r4, pc}
 800d216:	4610      	mov	r0, r2
 800d218:	e7fc      	b.n	800d214 <strncmp+0x1e>
	...

0800d21c <_strtol_l.isra.0>:
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d222:	d001      	beq.n	800d228 <_strtol_l.isra.0+0xc>
 800d224:	2b24      	cmp	r3, #36	; 0x24
 800d226:	d906      	bls.n	800d236 <_strtol_l.isra.0+0x1a>
 800d228:	f7fe fca6 	bl	800bb78 <__errno>
 800d22c:	2316      	movs	r3, #22
 800d22e:	6003      	str	r3, [r0, #0]
 800d230:	2000      	movs	r0, #0
 800d232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d236:	4f3a      	ldr	r7, [pc, #232]	; (800d320 <_strtol_l.isra.0+0x104>)
 800d238:	468e      	mov	lr, r1
 800d23a:	4676      	mov	r6, lr
 800d23c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d240:	5de5      	ldrb	r5, [r4, r7]
 800d242:	f015 0508 	ands.w	r5, r5, #8
 800d246:	d1f8      	bne.n	800d23a <_strtol_l.isra.0+0x1e>
 800d248:	2c2d      	cmp	r4, #45	; 0x2d
 800d24a:	d134      	bne.n	800d2b6 <_strtol_l.isra.0+0x9a>
 800d24c:	f89e 4000 	ldrb.w	r4, [lr]
 800d250:	f04f 0801 	mov.w	r8, #1
 800d254:	f106 0e02 	add.w	lr, r6, #2
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d05c      	beq.n	800d316 <_strtol_l.isra.0+0xfa>
 800d25c:	2b10      	cmp	r3, #16
 800d25e:	d10c      	bne.n	800d27a <_strtol_l.isra.0+0x5e>
 800d260:	2c30      	cmp	r4, #48	; 0x30
 800d262:	d10a      	bne.n	800d27a <_strtol_l.isra.0+0x5e>
 800d264:	f89e 4000 	ldrb.w	r4, [lr]
 800d268:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d26c:	2c58      	cmp	r4, #88	; 0x58
 800d26e:	d14d      	bne.n	800d30c <_strtol_l.isra.0+0xf0>
 800d270:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800d274:	2310      	movs	r3, #16
 800d276:	f10e 0e02 	add.w	lr, lr, #2
 800d27a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800d27e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d282:	2600      	movs	r6, #0
 800d284:	fbbc f9f3 	udiv	r9, ip, r3
 800d288:	4635      	mov	r5, r6
 800d28a:	fb03 ca19 	mls	sl, r3, r9, ip
 800d28e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d292:	2f09      	cmp	r7, #9
 800d294:	d818      	bhi.n	800d2c8 <_strtol_l.isra.0+0xac>
 800d296:	463c      	mov	r4, r7
 800d298:	42a3      	cmp	r3, r4
 800d29a:	dd24      	ble.n	800d2e6 <_strtol_l.isra.0+0xca>
 800d29c:	2e00      	cmp	r6, #0
 800d29e:	db1f      	blt.n	800d2e0 <_strtol_l.isra.0+0xc4>
 800d2a0:	45a9      	cmp	r9, r5
 800d2a2:	d31d      	bcc.n	800d2e0 <_strtol_l.isra.0+0xc4>
 800d2a4:	d101      	bne.n	800d2aa <_strtol_l.isra.0+0x8e>
 800d2a6:	45a2      	cmp	sl, r4
 800d2a8:	db1a      	blt.n	800d2e0 <_strtol_l.isra.0+0xc4>
 800d2aa:	fb05 4503 	mla	r5, r5, r3, r4
 800d2ae:	2601      	movs	r6, #1
 800d2b0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d2b4:	e7eb      	b.n	800d28e <_strtol_l.isra.0+0x72>
 800d2b6:	2c2b      	cmp	r4, #43	; 0x2b
 800d2b8:	bf08      	it	eq
 800d2ba:	f89e 4000 	ldrbeq.w	r4, [lr]
 800d2be:	46a8      	mov	r8, r5
 800d2c0:	bf08      	it	eq
 800d2c2:	f106 0e02 	addeq.w	lr, r6, #2
 800d2c6:	e7c7      	b.n	800d258 <_strtol_l.isra.0+0x3c>
 800d2c8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d2cc:	2f19      	cmp	r7, #25
 800d2ce:	d801      	bhi.n	800d2d4 <_strtol_l.isra.0+0xb8>
 800d2d0:	3c37      	subs	r4, #55	; 0x37
 800d2d2:	e7e1      	b.n	800d298 <_strtol_l.isra.0+0x7c>
 800d2d4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d2d8:	2f19      	cmp	r7, #25
 800d2da:	d804      	bhi.n	800d2e6 <_strtol_l.isra.0+0xca>
 800d2dc:	3c57      	subs	r4, #87	; 0x57
 800d2de:	e7db      	b.n	800d298 <_strtol_l.isra.0+0x7c>
 800d2e0:	f04f 36ff 	mov.w	r6, #4294967295
 800d2e4:	e7e4      	b.n	800d2b0 <_strtol_l.isra.0+0x94>
 800d2e6:	2e00      	cmp	r6, #0
 800d2e8:	da05      	bge.n	800d2f6 <_strtol_l.isra.0+0xda>
 800d2ea:	2322      	movs	r3, #34	; 0x22
 800d2ec:	6003      	str	r3, [r0, #0]
 800d2ee:	4665      	mov	r5, ip
 800d2f0:	b942      	cbnz	r2, 800d304 <_strtol_l.isra.0+0xe8>
 800d2f2:	4628      	mov	r0, r5
 800d2f4:	e79d      	b.n	800d232 <_strtol_l.isra.0+0x16>
 800d2f6:	f1b8 0f00 	cmp.w	r8, #0
 800d2fa:	d000      	beq.n	800d2fe <_strtol_l.isra.0+0xe2>
 800d2fc:	426d      	negs	r5, r5
 800d2fe:	2a00      	cmp	r2, #0
 800d300:	d0f7      	beq.n	800d2f2 <_strtol_l.isra.0+0xd6>
 800d302:	b10e      	cbz	r6, 800d308 <_strtol_l.isra.0+0xec>
 800d304:	f10e 31ff 	add.w	r1, lr, #4294967295
 800d308:	6011      	str	r1, [r2, #0]
 800d30a:	e7f2      	b.n	800d2f2 <_strtol_l.isra.0+0xd6>
 800d30c:	2430      	movs	r4, #48	; 0x30
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d1b3      	bne.n	800d27a <_strtol_l.isra.0+0x5e>
 800d312:	2308      	movs	r3, #8
 800d314:	e7b1      	b.n	800d27a <_strtol_l.isra.0+0x5e>
 800d316:	2c30      	cmp	r4, #48	; 0x30
 800d318:	d0a4      	beq.n	800d264 <_strtol_l.isra.0+0x48>
 800d31a:	230a      	movs	r3, #10
 800d31c:	e7ad      	b.n	800d27a <_strtol_l.isra.0+0x5e>
 800d31e:	bf00      	nop
 800d320:	0801155b 	.word	0x0801155b

0800d324 <_strtol_r>:
 800d324:	f7ff bf7a 	b.w	800d21c <_strtol_l.isra.0>

0800d328 <_strtoul_l.isra.0>:
 800d328:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d32c:	4e3b      	ldr	r6, [pc, #236]	; (800d41c <_strtoul_l.isra.0+0xf4>)
 800d32e:	4686      	mov	lr, r0
 800d330:	468c      	mov	ip, r1
 800d332:	4660      	mov	r0, ip
 800d334:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800d338:	5da5      	ldrb	r5, [r4, r6]
 800d33a:	f015 0508 	ands.w	r5, r5, #8
 800d33e:	d1f8      	bne.n	800d332 <_strtoul_l.isra.0+0xa>
 800d340:	2c2d      	cmp	r4, #45	; 0x2d
 800d342:	d134      	bne.n	800d3ae <_strtoul_l.isra.0+0x86>
 800d344:	f89c 4000 	ldrb.w	r4, [ip]
 800d348:	f04f 0801 	mov.w	r8, #1
 800d34c:	f100 0c02 	add.w	ip, r0, #2
 800d350:	2b00      	cmp	r3, #0
 800d352:	d05e      	beq.n	800d412 <_strtoul_l.isra.0+0xea>
 800d354:	2b10      	cmp	r3, #16
 800d356:	d10c      	bne.n	800d372 <_strtoul_l.isra.0+0x4a>
 800d358:	2c30      	cmp	r4, #48	; 0x30
 800d35a:	d10a      	bne.n	800d372 <_strtoul_l.isra.0+0x4a>
 800d35c:	f89c 0000 	ldrb.w	r0, [ip]
 800d360:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d364:	2858      	cmp	r0, #88	; 0x58
 800d366:	d14f      	bne.n	800d408 <_strtoul_l.isra.0+0xe0>
 800d368:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800d36c:	2310      	movs	r3, #16
 800d36e:	f10c 0c02 	add.w	ip, ip, #2
 800d372:	f04f 37ff 	mov.w	r7, #4294967295
 800d376:	2500      	movs	r5, #0
 800d378:	fbb7 f7f3 	udiv	r7, r7, r3
 800d37c:	fb03 f907 	mul.w	r9, r3, r7
 800d380:	ea6f 0909 	mvn.w	r9, r9
 800d384:	4628      	mov	r0, r5
 800d386:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800d38a:	2e09      	cmp	r6, #9
 800d38c:	d818      	bhi.n	800d3c0 <_strtoul_l.isra.0+0x98>
 800d38e:	4634      	mov	r4, r6
 800d390:	42a3      	cmp	r3, r4
 800d392:	dd24      	ble.n	800d3de <_strtoul_l.isra.0+0xb6>
 800d394:	2d00      	cmp	r5, #0
 800d396:	db1f      	blt.n	800d3d8 <_strtoul_l.isra.0+0xb0>
 800d398:	4287      	cmp	r7, r0
 800d39a:	d31d      	bcc.n	800d3d8 <_strtoul_l.isra.0+0xb0>
 800d39c:	d101      	bne.n	800d3a2 <_strtoul_l.isra.0+0x7a>
 800d39e:	45a1      	cmp	r9, r4
 800d3a0:	db1a      	blt.n	800d3d8 <_strtoul_l.isra.0+0xb0>
 800d3a2:	fb00 4003 	mla	r0, r0, r3, r4
 800d3a6:	2501      	movs	r5, #1
 800d3a8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800d3ac:	e7eb      	b.n	800d386 <_strtoul_l.isra.0+0x5e>
 800d3ae:	2c2b      	cmp	r4, #43	; 0x2b
 800d3b0:	bf08      	it	eq
 800d3b2:	f89c 4000 	ldrbeq.w	r4, [ip]
 800d3b6:	46a8      	mov	r8, r5
 800d3b8:	bf08      	it	eq
 800d3ba:	f100 0c02 	addeq.w	ip, r0, #2
 800d3be:	e7c7      	b.n	800d350 <_strtoul_l.isra.0+0x28>
 800d3c0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800d3c4:	2e19      	cmp	r6, #25
 800d3c6:	d801      	bhi.n	800d3cc <_strtoul_l.isra.0+0xa4>
 800d3c8:	3c37      	subs	r4, #55	; 0x37
 800d3ca:	e7e1      	b.n	800d390 <_strtoul_l.isra.0+0x68>
 800d3cc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800d3d0:	2e19      	cmp	r6, #25
 800d3d2:	d804      	bhi.n	800d3de <_strtoul_l.isra.0+0xb6>
 800d3d4:	3c57      	subs	r4, #87	; 0x57
 800d3d6:	e7db      	b.n	800d390 <_strtoul_l.isra.0+0x68>
 800d3d8:	f04f 35ff 	mov.w	r5, #4294967295
 800d3dc:	e7e4      	b.n	800d3a8 <_strtoul_l.isra.0+0x80>
 800d3de:	2d00      	cmp	r5, #0
 800d3e0:	da07      	bge.n	800d3f2 <_strtoul_l.isra.0+0xca>
 800d3e2:	2322      	movs	r3, #34	; 0x22
 800d3e4:	f8ce 3000 	str.w	r3, [lr]
 800d3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ec:	b942      	cbnz	r2, 800d400 <_strtoul_l.isra.0+0xd8>
 800d3ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d3f2:	f1b8 0f00 	cmp.w	r8, #0
 800d3f6:	d000      	beq.n	800d3fa <_strtoul_l.isra.0+0xd2>
 800d3f8:	4240      	negs	r0, r0
 800d3fa:	2a00      	cmp	r2, #0
 800d3fc:	d0f7      	beq.n	800d3ee <_strtoul_l.isra.0+0xc6>
 800d3fe:	b10d      	cbz	r5, 800d404 <_strtoul_l.isra.0+0xdc>
 800d400:	f10c 31ff 	add.w	r1, ip, #4294967295
 800d404:	6011      	str	r1, [r2, #0]
 800d406:	e7f2      	b.n	800d3ee <_strtoul_l.isra.0+0xc6>
 800d408:	2430      	movs	r4, #48	; 0x30
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d1b1      	bne.n	800d372 <_strtoul_l.isra.0+0x4a>
 800d40e:	2308      	movs	r3, #8
 800d410:	e7af      	b.n	800d372 <_strtoul_l.isra.0+0x4a>
 800d412:	2c30      	cmp	r4, #48	; 0x30
 800d414:	d0a2      	beq.n	800d35c <_strtoul_l.isra.0+0x34>
 800d416:	230a      	movs	r3, #10
 800d418:	e7ab      	b.n	800d372 <_strtoul_l.isra.0+0x4a>
 800d41a:	bf00      	nop
 800d41c:	0801155b 	.word	0x0801155b

0800d420 <_strtoul_r>:
 800d420:	f7ff bf82 	b.w	800d328 <_strtoul_l.isra.0>

0800d424 <strtoul>:
 800d424:	4613      	mov	r3, r2
 800d426:	460a      	mov	r2, r1
 800d428:	4601      	mov	r1, r0
 800d42a:	4802      	ldr	r0, [pc, #8]	; (800d434 <strtoul+0x10>)
 800d42c:	6800      	ldr	r0, [r0, #0]
 800d42e:	f7ff bf7b 	b.w	800d328 <_strtoul_l.isra.0>
 800d432:	bf00      	nop
 800d434:	20000020 	.word	0x20000020

0800d438 <__tzcalc_limits>:
 800d438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d43c:	4680      	mov	r8, r0
 800d43e:	f001 fa15 	bl	800e86c <__gettzinfo>
 800d442:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800d446:	4598      	cmp	r8, r3
 800d448:	f340 8098 	ble.w	800d57c <__tzcalc_limits+0x144>
 800d44c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 800d450:	4443      	add	r3, r8
 800d452:	109b      	asrs	r3, r3, #2
 800d454:	f240 126d 	movw	r2, #365	; 0x16d
 800d458:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 800d45c:	fb02 3505 	mla	r5, r2, r5, r3
 800d460:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800d464:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 800d468:	fb93 f3f2 	sdiv	r3, r3, r2
 800d46c:	441d      	add	r5, r3
 800d46e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800d472:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 800d476:	fb98 f7f3 	sdiv	r7, r8, r3
 800d47a:	fb03 8717 	mls	r7, r3, r7, r8
 800d47e:	4442      	add	r2, r8
 800d480:	fab7 fc87 	clz	ip, r7
 800d484:	fbb2 f2f3 	udiv	r2, r2, r3
 800d488:	f008 0303 	and.w	r3, r8, #3
 800d48c:	4415      	add	r5, r2
 800d48e:	2264      	movs	r2, #100	; 0x64
 800d490:	f8c0 8004 	str.w	r8, [r0, #4]
 800d494:	fb98 f6f2 	sdiv	r6, r8, r2
 800d498:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800d49c:	fb02 8616 	mls	r6, r2, r6, r8
 800d4a0:	4604      	mov	r4, r0
 800d4a2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800d4a6:	9300      	str	r3, [sp, #0]
 800d4a8:	f04f 0e07 	mov.w	lr, #7
 800d4ac:	7a22      	ldrb	r2, [r4, #8]
 800d4ae:	6963      	ldr	r3, [r4, #20]
 800d4b0:	2a4a      	cmp	r2, #74	; 0x4a
 800d4b2:	d128      	bne.n	800d506 <__tzcalc_limits+0xce>
 800d4b4:	9900      	ldr	r1, [sp, #0]
 800d4b6:	18ea      	adds	r2, r5, r3
 800d4b8:	b901      	cbnz	r1, 800d4bc <__tzcalc_limits+0x84>
 800d4ba:	b906      	cbnz	r6, 800d4be <__tzcalc_limits+0x86>
 800d4bc:	bb0f      	cbnz	r7, 800d502 <__tzcalc_limits+0xca>
 800d4be:	2b3b      	cmp	r3, #59	; 0x3b
 800d4c0:	bfd4      	ite	le
 800d4c2:	2300      	movle	r3, #0
 800d4c4:	2301      	movgt	r3, #1
 800d4c6:	4413      	add	r3, r2
 800d4c8:	1e5a      	subs	r2, r3, #1
 800d4ca:	69a3      	ldr	r3, [r4, #24]
 800d4cc:	492c      	ldr	r1, [pc, #176]	; (800d580 <__tzcalc_limits+0x148>)
 800d4ce:	fb01 3202 	mla	r2, r1, r2, r3
 800d4d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d4d4:	4413      	add	r3, r2
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	17db      	asrs	r3, r3, #31
 800d4da:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800d4de:	3428      	adds	r4, #40	; 0x28
 800d4e0:	45a3      	cmp	fp, r4
 800d4e2:	d1e3      	bne.n	800d4ac <__tzcalc_limits+0x74>
 800d4e4:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 800d4e8:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 800d4ec:	4294      	cmp	r4, r2
 800d4ee:	eb75 0303 	sbcs.w	r3, r5, r3
 800d4f2:	bfb4      	ite	lt
 800d4f4:	2301      	movlt	r3, #1
 800d4f6:	2300      	movge	r3, #0
 800d4f8:	6003      	str	r3, [r0, #0]
 800d4fa:	2001      	movs	r0, #1
 800d4fc:	b003      	add	sp, #12
 800d4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d502:	2300      	movs	r3, #0
 800d504:	e7df      	b.n	800d4c6 <__tzcalc_limits+0x8e>
 800d506:	2a44      	cmp	r2, #68	; 0x44
 800d508:	d101      	bne.n	800d50e <__tzcalc_limits+0xd6>
 800d50a:	18ea      	adds	r2, r5, r3
 800d50c:	e7dd      	b.n	800d4ca <__tzcalc_limits+0x92>
 800d50e:	9a00      	ldr	r2, [sp, #0]
 800d510:	bb72      	cbnz	r2, 800d570 <__tzcalc_limits+0x138>
 800d512:	2e00      	cmp	r6, #0
 800d514:	bf0c      	ite	eq
 800d516:	46e0      	moveq	r8, ip
 800d518:	f04f 0801 	movne.w	r8, #1
 800d51c:	4919      	ldr	r1, [pc, #100]	; (800d584 <__tzcalc_limits+0x14c>)
 800d51e:	68e2      	ldr	r2, [r4, #12]
 800d520:	9201      	str	r2, [sp, #4]
 800d522:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800d526:	fb0a 1808 	mla	r8, sl, r8, r1
 800d52a:	462a      	mov	r2, r5
 800d52c:	f04f 0900 	mov.w	r9, #0
 800d530:	f1a8 0804 	sub.w	r8, r8, #4
 800d534:	9901      	ldr	r1, [sp, #4]
 800d536:	f109 0901 	add.w	r9, r9, #1
 800d53a:	4549      	cmp	r1, r9
 800d53c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 800d540:	dc18      	bgt.n	800d574 <__tzcalc_limits+0x13c>
 800d542:	f102 0804 	add.w	r8, r2, #4
 800d546:	fb98 f9fe 	sdiv	r9, r8, lr
 800d54a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 800d54e:	eba8 0909 	sub.w	r9, r8, r9
 800d552:	ebb3 0909 	subs.w	r9, r3, r9
 800d556:	6923      	ldr	r3, [r4, #16]
 800d558:	f103 33ff 	add.w	r3, r3, #4294967295
 800d55c:	bf48      	it	mi
 800d55e:	f109 0907 	addmi.w	r9, r9, #7
 800d562:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800d566:	444b      	add	r3, r9
 800d568:	4553      	cmp	r3, sl
 800d56a:	da05      	bge.n	800d578 <__tzcalc_limits+0x140>
 800d56c:	441a      	add	r2, r3
 800d56e:	e7ac      	b.n	800d4ca <__tzcalc_limits+0x92>
 800d570:	46e0      	mov	r8, ip
 800d572:	e7d3      	b.n	800d51c <__tzcalc_limits+0xe4>
 800d574:	4452      	add	r2, sl
 800d576:	e7dd      	b.n	800d534 <__tzcalc_limits+0xfc>
 800d578:	3b07      	subs	r3, #7
 800d57a:	e7f5      	b.n	800d568 <__tzcalc_limits+0x130>
 800d57c:	2000      	movs	r0, #0
 800d57e:	e7bd      	b.n	800d4fc <__tzcalc_limits+0xc4>
 800d580:	00015180 	.word	0x00015180
 800d584:	08011450 	.word	0x08011450

0800d588 <__tz_lock>:
 800d588:	4801      	ldr	r0, [pc, #4]	; (800d590 <__tz_lock+0x8>)
 800d58a:	f7fe bd32 	b.w	800bff2 <__retarget_lock_acquire>
 800d58e:	bf00      	nop
 800d590:	20005093 	.word	0x20005093

0800d594 <__tz_unlock>:
 800d594:	4801      	ldr	r0, [pc, #4]	; (800d59c <__tz_unlock+0x8>)
 800d596:	f7fe bd2e 	b.w	800bff6 <__retarget_lock_release>
 800d59a:	bf00      	nop
 800d59c:	20005093 	.word	0x20005093

0800d5a0 <_tzset_unlocked>:
 800d5a0:	4b01      	ldr	r3, [pc, #4]	; (800d5a8 <_tzset_unlocked+0x8>)
 800d5a2:	6818      	ldr	r0, [r3, #0]
 800d5a4:	f000 b802 	b.w	800d5ac <_tzset_unlocked_r>
 800d5a8:	20000020 	.word	0x20000020

0800d5ac <_tzset_unlocked_r>:
 800d5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5b0:	b08d      	sub	sp, #52	; 0x34
 800d5b2:	4607      	mov	r7, r0
 800d5b4:	f001 f95a 	bl	800e86c <__gettzinfo>
 800d5b8:	49ae      	ldr	r1, [pc, #696]	; (800d874 <_tzset_unlocked_r+0x2c8>)
 800d5ba:	4eaf      	ldr	r6, [pc, #700]	; (800d878 <_tzset_unlocked_r+0x2cc>)
 800d5bc:	4605      	mov	r5, r0
 800d5be:	4638      	mov	r0, r7
 800d5c0:	f001 f94c 	bl	800e85c <_getenv_r>
 800d5c4:	4604      	mov	r4, r0
 800d5c6:	b970      	cbnz	r0, 800d5e6 <_tzset_unlocked_r+0x3a>
 800d5c8:	4bac      	ldr	r3, [pc, #688]	; (800d87c <_tzset_unlocked_r+0x2d0>)
 800d5ca:	4aad      	ldr	r2, [pc, #692]	; (800d880 <_tzset_unlocked_r+0x2d4>)
 800d5cc:	6018      	str	r0, [r3, #0]
 800d5ce:	4bad      	ldr	r3, [pc, #692]	; (800d884 <_tzset_unlocked_r+0x2d8>)
 800d5d0:	6018      	str	r0, [r3, #0]
 800d5d2:	4bad      	ldr	r3, [pc, #692]	; (800d888 <_tzset_unlocked_r+0x2dc>)
 800d5d4:	6830      	ldr	r0, [r6, #0]
 800d5d6:	e9c3 2200 	strd	r2, r2, [r3]
 800d5da:	f7fe fd17 	bl	800c00c <free>
 800d5de:	6034      	str	r4, [r6, #0]
 800d5e0:	b00d      	add	sp, #52	; 0x34
 800d5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5e6:	6831      	ldr	r1, [r6, #0]
 800d5e8:	2900      	cmp	r1, #0
 800d5ea:	d15f      	bne.n	800d6ac <_tzset_unlocked_r+0x100>
 800d5ec:	6830      	ldr	r0, [r6, #0]
 800d5ee:	f7fe fd0d 	bl	800c00c <free>
 800d5f2:	4620      	mov	r0, r4
 800d5f4:	f7f2 fe16 	bl	8000224 <strlen>
 800d5f8:	1c41      	adds	r1, r0, #1
 800d5fa:	4638      	mov	r0, r7
 800d5fc:	f7ff f80c 	bl	800c618 <_malloc_r>
 800d600:	6030      	str	r0, [r6, #0]
 800d602:	2800      	cmp	r0, #0
 800d604:	d157      	bne.n	800d6b6 <_tzset_unlocked_r+0x10a>
 800d606:	7823      	ldrb	r3, [r4, #0]
 800d608:	4aa0      	ldr	r2, [pc, #640]	; (800d88c <_tzset_unlocked_r+0x2e0>)
 800d60a:	49a1      	ldr	r1, [pc, #644]	; (800d890 <_tzset_unlocked_r+0x2e4>)
 800d60c:	2b3a      	cmp	r3, #58	; 0x3a
 800d60e:	bf08      	it	eq
 800d610:	3401      	addeq	r4, #1
 800d612:	ae0a      	add	r6, sp, #40	; 0x28
 800d614:	4633      	mov	r3, r6
 800d616:	4620      	mov	r0, r4
 800d618:	f002 f88a 	bl	800f730 <siscanf>
 800d61c:	2800      	cmp	r0, #0
 800d61e:	dddf      	ble.n	800d5e0 <_tzset_unlocked_r+0x34>
 800d620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d622:	18e7      	adds	r7, r4, r3
 800d624:	5ce3      	ldrb	r3, [r4, r3]
 800d626:	2b2d      	cmp	r3, #45	; 0x2d
 800d628:	d149      	bne.n	800d6be <_tzset_unlocked_r+0x112>
 800d62a:	3701      	adds	r7, #1
 800d62c:	f04f 34ff 	mov.w	r4, #4294967295
 800d630:	f10d 0a20 	add.w	sl, sp, #32
 800d634:	f10d 0b1e 	add.w	fp, sp, #30
 800d638:	f04f 0800 	mov.w	r8, #0
 800d63c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800d640:	4994      	ldr	r1, [pc, #592]	; (800d894 <_tzset_unlocked_r+0x2e8>)
 800d642:	9603      	str	r6, [sp, #12]
 800d644:	f8cd b000 	str.w	fp, [sp]
 800d648:	4633      	mov	r3, r6
 800d64a:	aa07      	add	r2, sp, #28
 800d64c:	4638      	mov	r0, r7
 800d64e:	f8ad 801e 	strh.w	r8, [sp, #30]
 800d652:	f8ad 8020 	strh.w	r8, [sp, #32]
 800d656:	f002 f86b 	bl	800f730 <siscanf>
 800d65a:	4540      	cmp	r0, r8
 800d65c:	ddc0      	ble.n	800d5e0 <_tzset_unlocked_r+0x34>
 800d65e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d662:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800d666:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800d8a0 <_tzset_unlocked_r+0x2f4>
 800d66a:	213c      	movs	r1, #60	; 0x3c
 800d66c:	fb01 2203 	mla	r2, r1, r3, r2
 800d670:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800d674:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800d678:	fb01 2303 	mla	r3, r1, r3, r2
 800d67c:	435c      	muls	r4, r3
 800d67e:	62ac      	str	r4, [r5, #40]	; 0x28
 800d680:	4c81      	ldr	r4, [pc, #516]	; (800d888 <_tzset_unlocked_r+0x2dc>)
 800d682:	4b82      	ldr	r3, [pc, #520]	; (800d88c <_tzset_unlocked_r+0x2e0>)
 800d684:	6023      	str	r3, [r4, #0]
 800d686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d688:	4981      	ldr	r1, [pc, #516]	; (800d890 <_tzset_unlocked_r+0x2e4>)
 800d68a:	441f      	add	r7, r3
 800d68c:	464a      	mov	r2, r9
 800d68e:	4633      	mov	r3, r6
 800d690:	4638      	mov	r0, r7
 800d692:	f002 f84d 	bl	800f730 <siscanf>
 800d696:	4540      	cmp	r0, r8
 800d698:	dc16      	bgt.n	800d6c8 <_tzset_unlocked_r+0x11c>
 800d69a:	6823      	ldr	r3, [r4, #0]
 800d69c:	6063      	str	r3, [r4, #4]
 800d69e:	4b77      	ldr	r3, [pc, #476]	; (800d87c <_tzset_unlocked_r+0x2d0>)
 800d6a0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d6a2:	601a      	str	r2, [r3, #0]
 800d6a4:	4b77      	ldr	r3, [pc, #476]	; (800d884 <_tzset_unlocked_r+0x2d8>)
 800d6a6:	f8c3 8000 	str.w	r8, [r3]
 800d6aa:	e799      	b.n	800d5e0 <_tzset_unlocked_r+0x34>
 800d6ac:	f7f2 fdb0 	bl	8000210 <strcmp>
 800d6b0:	2800      	cmp	r0, #0
 800d6b2:	d19b      	bne.n	800d5ec <_tzset_unlocked_r+0x40>
 800d6b4:	e794      	b.n	800d5e0 <_tzset_unlocked_r+0x34>
 800d6b6:	4621      	mov	r1, r4
 800d6b8:	f7ff fd95 	bl	800d1e6 <strcpy>
 800d6bc:	e7a3      	b.n	800d606 <_tzset_unlocked_r+0x5a>
 800d6be:	2b2b      	cmp	r3, #43	; 0x2b
 800d6c0:	bf08      	it	eq
 800d6c2:	3701      	addeq	r7, #1
 800d6c4:	2401      	movs	r4, #1
 800d6c6:	e7b3      	b.n	800d630 <_tzset_unlocked_r+0x84>
 800d6c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6ca:	f8c4 9004 	str.w	r9, [r4, #4]
 800d6ce:	18fc      	adds	r4, r7, r3
 800d6d0:	5cfb      	ldrb	r3, [r7, r3]
 800d6d2:	2b2d      	cmp	r3, #45	; 0x2d
 800d6d4:	f040 808b 	bne.w	800d7ee <_tzset_unlocked_r+0x242>
 800d6d8:	3401      	adds	r4, #1
 800d6da:	f04f 37ff 	mov.w	r7, #4294967295
 800d6de:	2300      	movs	r3, #0
 800d6e0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d6e4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d6e8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d6ec:	930a      	str	r3, [sp, #40]	; 0x28
 800d6ee:	e9cd a602 	strd	sl, r6, [sp, #8]
 800d6f2:	e9cd b600 	strd	fp, r6, [sp]
 800d6f6:	4967      	ldr	r1, [pc, #412]	; (800d894 <_tzset_unlocked_r+0x2e8>)
 800d6f8:	4633      	mov	r3, r6
 800d6fa:	aa07      	add	r2, sp, #28
 800d6fc:	4620      	mov	r0, r4
 800d6fe:	f002 f817 	bl	800f730 <siscanf>
 800d702:	2800      	cmp	r0, #0
 800d704:	dc78      	bgt.n	800d7f8 <_tzset_unlocked_r+0x24c>
 800d706:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 800d708:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 800d70c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d70e:	652f      	str	r7, [r5, #80]	; 0x50
 800d710:	441c      	add	r4, r3
 800d712:	462f      	mov	r7, r5
 800d714:	f04f 0900 	mov.w	r9, #0
 800d718:	7823      	ldrb	r3, [r4, #0]
 800d71a:	2b2c      	cmp	r3, #44	; 0x2c
 800d71c:	bf08      	it	eq
 800d71e:	3401      	addeq	r4, #1
 800d720:	f894 8000 	ldrb.w	r8, [r4]
 800d724:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800d728:	d178      	bne.n	800d81c <_tzset_unlocked_r+0x270>
 800d72a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800d72e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800d732:	ab09      	add	r3, sp, #36	; 0x24
 800d734:	9300      	str	r3, [sp, #0]
 800d736:	4958      	ldr	r1, [pc, #352]	; (800d898 <_tzset_unlocked_r+0x2ec>)
 800d738:	9603      	str	r6, [sp, #12]
 800d73a:	4633      	mov	r3, r6
 800d73c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800d740:	4620      	mov	r0, r4
 800d742:	f001 fff5 	bl	800f730 <siscanf>
 800d746:	2803      	cmp	r0, #3
 800d748:	f47f af4a 	bne.w	800d5e0 <_tzset_unlocked_r+0x34>
 800d74c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800d750:	1e4b      	subs	r3, r1, #1
 800d752:	2b0b      	cmp	r3, #11
 800d754:	f63f af44 	bhi.w	800d5e0 <_tzset_unlocked_r+0x34>
 800d758:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800d75c:	1e53      	subs	r3, r2, #1
 800d75e:	2b04      	cmp	r3, #4
 800d760:	f63f af3e 	bhi.w	800d5e0 <_tzset_unlocked_r+0x34>
 800d764:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800d768:	2b06      	cmp	r3, #6
 800d76a:	f63f af39 	bhi.w	800d5e0 <_tzset_unlocked_r+0x34>
 800d76e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800d772:	f887 8008 	strb.w	r8, [r7, #8]
 800d776:	617b      	str	r3, [r7, #20]
 800d778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d77a:	eb04 0803 	add.w	r8, r4, r3
 800d77e:	2302      	movs	r3, #2
 800d780:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d784:	2300      	movs	r3, #0
 800d786:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d78a:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d78e:	930a      	str	r3, [sp, #40]	; 0x28
 800d790:	f898 3000 	ldrb.w	r3, [r8]
 800d794:	2b2f      	cmp	r3, #47	; 0x2f
 800d796:	d109      	bne.n	800d7ac <_tzset_unlocked_r+0x200>
 800d798:	e9cd a602 	strd	sl, r6, [sp, #8]
 800d79c:	e9cd b600 	strd	fp, r6, [sp]
 800d7a0:	493e      	ldr	r1, [pc, #248]	; (800d89c <_tzset_unlocked_r+0x2f0>)
 800d7a2:	4633      	mov	r3, r6
 800d7a4:	aa07      	add	r2, sp, #28
 800d7a6:	4640      	mov	r0, r8
 800d7a8:	f001 ffc2 	bl	800f730 <siscanf>
 800d7ac:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d7b0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800d7b4:	213c      	movs	r1, #60	; 0x3c
 800d7b6:	fb01 2203 	mla	r2, r1, r3, r2
 800d7ba:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800d7be:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800d7c2:	fb01 2303 	mla	r3, r1, r3, r2
 800d7c6:	61bb      	str	r3, [r7, #24]
 800d7c8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d7ca:	3728      	adds	r7, #40	; 0x28
 800d7cc:	4444      	add	r4, r8
 800d7ce:	f1b9 0f00 	cmp.w	r9, #0
 800d7d2:	d020      	beq.n	800d816 <_tzset_unlocked_r+0x26a>
 800d7d4:	6868      	ldr	r0, [r5, #4]
 800d7d6:	f7ff fe2f 	bl	800d438 <__tzcalc_limits>
 800d7da:	4b28      	ldr	r3, [pc, #160]	; (800d87c <_tzset_unlocked_r+0x2d0>)
 800d7dc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d7de:	601a      	str	r2, [r3, #0]
 800d7e0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d7e2:	1a9b      	subs	r3, r3, r2
 800d7e4:	4a27      	ldr	r2, [pc, #156]	; (800d884 <_tzset_unlocked_r+0x2d8>)
 800d7e6:	bf18      	it	ne
 800d7e8:	2301      	movne	r3, #1
 800d7ea:	6013      	str	r3, [r2, #0]
 800d7ec:	e6f8      	b.n	800d5e0 <_tzset_unlocked_r+0x34>
 800d7ee:	2b2b      	cmp	r3, #43	; 0x2b
 800d7f0:	bf08      	it	eq
 800d7f2:	3401      	addeq	r4, #1
 800d7f4:	2701      	movs	r7, #1
 800d7f6:	e772      	b.n	800d6de <_tzset_unlocked_r+0x132>
 800d7f8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d7fc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800d800:	213c      	movs	r1, #60	; 0x3c
 800d802:	fb01 2203 	mla	r2, r1, r3, r2
 800d806:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800d80a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800d80e:	fb01 2303 	mla	r3, r1, r3, r2
 800d812:	435f      	muls	r7, r3
 800d814:	e77a      	b.n	800d70c <_tzset_unlocked_r+0x160>
 800d816:	f04f 0901 	mov.w	r9, #1
 800d81a:	e77d      	b.n	800d718 <_tzset_unlocked_r+0x16c>
 800d81c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800d820:	bf06      	itte	eq
 800d822:	3401      	addeq	r4, #1
 800d824:	4643      	moveq	r3, r8
 800d826:	2344      	movne	r3, #68	; 0x44
 800d828:	220a      	movs	r2, #10
 800d82a:	a90b      	add	r1, sp, #44	; 0x2c
 800d82c:	4620      	mov	r0, r4
 800d82e:	9305      	str	r3, [sp, #20]
 800d830:	f7ff fdf8 	bl	800d424 <strtoul>
 800d834:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800d838:	9b05      	ldr	r3, [sp, #20]
 800d83a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800d83e:	45a0      	cmp	r8, r4
 800d840:	d114      	bne.n	800d86c <_tzset_unlocked_r+0x2c0>
 800d842:	234d      	movs	r3, #77	; 0x4d
 800d844:	f1b9 0f00 	cmp.w	r9, #0
 800d848:	d107      	bne.n	800d85a <_tzset_unlocked_r+0x2ae>
 800d84a:	722b      	strb	r3, [r5, #8]
 800d84c:	2103      	movs	r1, #3
 800d84e:	2302      	movs	r3, #2
 800d850:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800d854:	f8c5 9014 	str.w	r9, [r5, #20]
 800d858:	e791      	b.n	800d77e <_tzset_unlocked_r+0x1d2>
 800d85a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800d85e:	220b      	movs	r2, #11
 800d860:	2301      	movs	r3, #1
 800d862:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800d866:	2300      	movs	r3, #0
 800d868:	63eb      	str	r3, [r5, #60]	; 0x3c
 800d86a:	e788      	b.n	800d77e <_tzset_unlocked_r+0x1d2>
 800d86c:	b280      	uxth	r0, r0
 800d86e:	723b      	strb	r3, [r7, #8]
 800d870:	6178      	str	r0, [r7, #20]
 800d872:	e784      	b.n	800d77e <_tzset_unlocked_r+0x1d2>
 800d874:	080114e2 	.word	0x080114e2
 800d878:	20004ebc 	.word	0x20004ebc
 800d87c:	20004ec4 	.word	0x20004ec4
 800d880:	080114e5 	.word	0x080114e5
 800d884:	20004ec0 	.word	0x20004ec0
 800d888:	20000084 	.word	0x20000084
 800d88c:	20004eaf 	.word	0x20004eaf
 800d890:	080114e9 	.word	0x080114e9
 800d894:	0801150c 	.word	0x0801150c
 800d898:	080114f8 	.word	0x080114f8
 800d89c:	0801150b 	.word	0x0801150b
 800d8a0:	20004ea4 	.word	0x20004ea4

0800d8a4 <_write_r>:
 800d8a4:	b538      	push	{r3, r4, r5, lr}
 800d8a6:	4d07      	ldr	r5, [pc, #28]	; (800d8c4 <_write_r+0x20>)
 800d8a8:	4604      	mov	r4, r0
 800d8aa:	4608      	mov	r0, r1
 800d8ac:	4611      	mov	r1, r2
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	602a      	str	r2, [r5, #0]
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	f7f4 f9cd 	bl	8001c52 <_write>
 800d8b8:	1c43      	adds	r3, r0, #1
 800d8ba:	d102      	bne.n	800d8c2 <_write_r+0x1e>
 800d8bc:	682b      	ldr	r3, [r5, #0]
 800d8be:	b103      	cbz	r3, 800d8c2 <_write_r+0x1e>
 800d8c0:	6023      	str	r3, [r4, #0]
 800d8c2:	bd38      	pop	{r3, r4, r5, pc}
 800d8c4:	20005098 	.word	0x20005098

0800d8c8 <__assert_func>:
 800d8c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d8ca:	4614      	mov	r4, r2
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	4b09      	ldr	r3, [pc, #36]	; (800d8f4 <__assert_func+0x2c>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4605      	mov	r5, r0
 800d8d4:	68d8      	ldr	r0, [r3, #12]
 800d8d6:	b14c      	cbz	r4, 800d8ec <__assert_func+0x24>
 800d8d8:	4b07      	ldr	r3, [pc, #28]	; (800d8f8 <__assert_func+0x30>)
 800d8da:	9100      	str	r1, [sp, #0]
 800d8dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d8e0:	4906      	ldr	r1, [pc, #24]	; (800d8fc <__assert_func+0x34>)
 800d8e2:	462b      	mov	r3, r5
 800d8e4:	f000 ff6e 	bl	800e7c4 <fiprintf>
 800d8e8:	f7fe f93e 	bl	800bb68 <abort>
 800d8ec:	4b04      	ldr	r3, [pc, #16]	; (800d900 <__assert_func+0x38>)
 800d8ee:	461c      	mov	r4, r3
 800d8f0:	e7f3      	b.n	800d8da <__assert_func+0x12>
 800d8f2:	bf00      	nop
 800d8f4:	20000020 	.word	0x20000020
 800d8f8:	0801151e 	.word	0x0801151e
 800d8fc:	0801152b 	.word	0x0801152b
 800d900:	08011559 	.word	0x08011559

0800d904 <_close_r>:
 800d904:	b538      	push	{r3, r4, r5, lr}
 800d906:	4d06      	ldr	r5, [pc, #24]	; (800d920 <_close_r+0x1c>)
 800d908:	2300      	movs	r3, #0
 800d90a:	4604      	mov	r4, r0
 800d90c:	4608      	mov	r0, r1
 800d90e:	602b      	str	r3, [r5, #0]
 800d910:	f7f4 f9bb 	bl	8001c8a <_close>
 800d914:	1c43      	adds	r3, r0, #1
 800d916:	d102      	bne.n	800d91e <_close_r+0x1a>
 800d918:	682b      	ldr	r3, [r5, #0]
 800d91a:	b103      	cbz	r3, 800d91e <_close_r+0x1a>
 800d91c:	6023      	str	r3, [r4, #0]
 800d91e:	bd38      	pop	{r3, r4, r5, pc}
 800d920:	20005098 	.word	0x20005098

0800d924 <div>:
 800d924:	2900      	cmp	r1, #0
 800d926:	b510      	push	{r4, lr}
 800d928:	fb91 f4f2 	sdiv	r4, r1, r2
 800d92c:	fb02 1314 	mls	r3, r2, r4, r1
 800d930:	db06      	blt.n	800d940 <div+0x1c>
 800d932:	2b00      	cmp	r3, #0
 800d934:	da01      	bge.n	800d93a <div+0x16>
 800d936:	3401      	adds	r4, #1
 800d938:	1a9b      	subs	r3, r3, r2
 800d93a:	e9c0 4300 	strd	r4, r3, [r0]
 800d93e:	bd10      	pop	{r4, pc}
 800d940:	2b00      	cmp	r3, #0
 800d942:	bfc4      	itt	gt
 800d944:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800d948:	189b      	addgt	r3, r3, r2
 800d94a:	e7f6      	b.n	800d93a <div+0x16>

0800d94c <quorem>:
 800d94c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d950:	6903      	ldr	r3, [r0, #16]
 800d952:	690c      	ldr	r4, [r1, #16]
 800d954:	42a3      	cmp	r3, r4
 800d956:	4607      	mov	r7, r0
 800d958:	f2c0 8081 	blt.w	800da5e <quorem+0x112>
 800d95c:	3c01      	subs	r4, #1
 800d95e:	f101 0814 	add.w	r8, r1, #20
 800d962:	f100 0514 	add.w	r5, r0, #20
 800d966:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d96a:	9301      	str	r3, [sp, #4]
 800d96c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d970:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d974:	3301      	adds	r3, #1
 800d976:	429a      	cmp	r2, r3
 800d978:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d97c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d980:	fbb2 f6f3 	udiv	r6, r2, r3
 800d984:	d331      	bcc.n	800d9ea <quorem+0x9e>
 800d986:	f04f 0e00 	mov.w	lr, #0
 800d98a:	4640      	mov	r0, r8
 800d98c:	46ac      	mov	ip, r5
 800d98e:	46f2      	mov	sl, lr
 800d990:	f850 2b04 	ldr.w	r2, [r0], #4
 800d994:	b293      	uxth	r3, r2
 800d996:	fb06 e303 	mla	r3, r6, r3, lr
 800d99a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d99e:	b29b      	uxth	r3, r3
 800d9a0:	ebaa 0303 	sub.w	r3, sl, r3
 800d9a4:	0c12      	lsrs	r2, r2, #16
 800d9a6:	f8dc a000 	ldr.w	sl, [ip]
 800d9aa:	fb06 e202 	mla	r2, r6, r2, lr
 800d9ae:	fa13 f38a 	uxtah	r3, r3, sl
 800d9b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d9b6:	fa1f fa82 	uxth.w	sl, r2
 800d9ba:	f8dc 2000 	ldr.w	r2, [ip]
 800d9be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d9c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9cc:	4581      	cmp	r9, r0
 800d9ce:	f84c 3b04 	str.w	r3, [ip], #4
 800d9d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d9d6:	d2db      	bcs.n	800d990 <quorem+0x44>
 800d9d8:	f855 300b 	ldr.w	r3, [r5, fp]
 800d9dc:	b92b      	cbnz	r3, 800d9ea <quorem+0x9e>
 800d9de:	9b01      	ldr	r3, [sp, #4]
 800d9e0:	3b04      	subs	r3, #4
 800d9e2:	429d      	cmp	r5, r3
 800d9e4:	461a      	mov	r2, r3
 800d9e6:	d32e      	bcc.n	800da46 <quorem+0xfa>
 800d9e8:	613c      	str	r4, [r7, #16]
 800d9ea:	4638      	mov	r0, r7
 800d9ec:	f001 faa4 	bl	800ef38 <__mcmp>
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	db24      	blt.n	800da3e <quorem+0xf2>
 800d9f4:	3601      	adds	r6, #1
 800d9f6:	4628      	mov	r0, r5
 800d9f8:	f04f 0c00 	mov.w	ip, #0
 800d9fc:	f858 2b04 	ldr.w	r2, [r8], #4
 800da00:	f8d0 e000 	ldr.w	lr, [r0]
 800da04:	b293      	uxth	r3, r2
 800da06:	ebac 0303 	sub.w	r3, ip, r3
 800da0a:	0c12      	lsrs	r2, r2, #16
 800da0c:	fa13 f38e 	uxtah	r3, r3, lr
 800da10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800da14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da18:	b29b      	uxth	r3, r3
 800da1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da1e:	45c1      	cmp	r9, r8
 800da20:	f840 3b04 	str.w	r3, [r0], #4
 800da24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800da28:	d2e8      	bcs.n	800d9fc <quorem+0xb0>
 800da2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da32:	b922      	cbnz	r2, 800da3e <quorem+0xf2>
 800da34:	3b04      	subs	r3, #4
 800da36:	429d      	cmp	r5, r3
 800da38:	461a      	mov	r2, r3
 800da3a:	d30a      	bcc.n	800da52 <quorem+0x106>
 800da3c:	613c      	str	r4, [r7, #16]
 800da3e:	4630      	mov	r0, r6
 800da40:	b003      	add	sp, #12
 800da42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da46:	6812      	ldr	r2, [r2, #0]
 800da48:	3b04      	subs	r3, #4
 800da4a:	2a00      	cmp	r2, #0
 800da4c:	d1cc      	bne.n	800d9e8 <quorem+0x9c>
 800da4e:	3c01      	subs	r4, #1
 800da50:	e7c7      	b.n	800d9e2 <quorem+0x96>
 800da52:	6812      	ldr	r2, [r2, #0]
 800da54:	3b04      	subs	r3, #4
 800da56:	2a00      	cmp	r2, #0
 800da58:	d1f0      	bne.n	800da3c <quorem+0xf0>
 800da5a:	3c01      	subs	r4, #1
 800da5c:	e7eb      	b.n	800da36 <quorem+0xea>
 800da5e:	2000      	movs	r0, #0
 800da60:	e7ee      	b.n	800da40 <quorem+0xf4>
 800da62:	0000      	movs	r0, r0
 800da64:	0000      	movs	r0, r0
	...

0800da68 <_dtoa_r>:
 800da68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da6c:	ed2d 8b02 	vpush	{d8}
 800da70:	ec57 6b10 	vmov	r6, r7, d0
 800da74:	b095      	sub	sp, #84	; 0x54
 800da76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800da78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800da7c:	9105      	str	r1, [sp, #20]
 800da7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800da82:	4604      	mov	r4, r0
 800da84:	9209      	str	r2, [sp, #36]	; 0x24
 800da86:	930f      	str	r3, [sp, #60]	; 0x3c
 800da88:	b975      	cbnz	r5, 800daa8 <_dtoa_r+0x40>
 800da8a:	2010      	movs	r0, #16
 800da8c:	f7fe fab6 	bl	800bffc <malloc>
 800da90:	4602      	mov	r2, r0
 800da92:	6260      	str	r0, [r4, #36]	; 0x24
 800da94:	b920      	cbnz	r0, 800daa0 <_dtoa_r+0x38>
 800da96:	4bb2      	ldr	r3, [pc, #712]	; (800dd60 <_dtoa_r+0x2f8>)
 800da98:	21ea      	movs	r1, #234	; 0xea
 800da9a:	48b2      	ldr	r0, [pc, #712]	; (800dd64 <_dtoa_r+0x2fc>)
 800da9c:	f7ff ff14 	bl	800d8c8 <__assert_func>
 800daa0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800daa4:	6005      	str	r5, [r0, #0]
 800daa6:	60c5      	str	r5, [r0, #12]
 800daa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800daaa:	6819      	ldr	r1, [r3, #0]
 800daac:	b151      	cbz	r1, 800dac4 <_dtoa_r+0x5c>
 800daae:	685a      	ldr	r2, [r3, #4]
 800dab0:	604a      	str	r2, [r1, #4]
 800dab2:	2301      	movs	r3, #1
 800dab4:	4093      	lsls	r3, r2
 800dab6:	608b      	str	r3, [r1, #8]
 800dab8:	4620      	mov	r0, r4
 800daba:	f000 ffff 	bl	800eabc <_Bfree>
 800dabe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dac0:	2200      	movs	r2, #0
 800dac2:	601a      	str	r2, [r3, #0]
 800dac4:	1e3b      	subs	r3, r7, #0
 800dac6:	bfb9      	ittee	lt
 800dac8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dacc:	9303      	strlt	r3, [sp, #12]
 800dace:	2300      	movge	r3, #0
 800dad0:	f8c8 3000 	strge.w	r3, [r8]
 800dad4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800dad8:	4ba3      	ldr	r3, [pc, #652]	; (800dd68 <_dtoa_r+0x300>)
 800dada:	bfbc      	itt	lt
 800dadc:	2201      	movlt	r2, #1
 800dade:	f8c8 2000 	strlt.w	r2, [r8]
 800dae2:	ea33 0309 	bics.w	r3, r3, r9
 800dae6:	d11b      	bne.n	800db20 <_dtoa_r+0xb8>
 800dae8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800daea:	f242 730f 	movw	r3, #9999	; 0x270f
 800daee:	6013      	str	r3, [r2, #0]
 800daf0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800daf4:	4333      	orrs	r3, r6
 800daf6:	f000 857a 	beq.w	800e5ee <_dtoa_r+0xb86>
 800dafa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dafc:	b963      	cbnz	r3, 800db18 <_dtoa_r+0xb0>
 800dafe:	4b9b      	ldr	r3, [pc, #620]	; (800dd6c <_dtoa_r+0x304>)
 800db00:	e024      	b.n	800db4c <_dtoa_r+0xe4>
 800db02:	4b9b      	ldr	r3, [pc, #620]	; (800dd70 <_dtoa_r+0x308>)
 800db04:	9300      	str	r3, [sp, #0]
 800db06:	3308      	adds	r3, #8
 800db08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800db0a:	6013      	str	r3, [r2, #0]
 800db0c:	9800      	ldr	r0, [sp, #0]
 800db0e:	b015      	add	sp, #84	; 0x54
 800db10:	ecbd 8b02 	vpop	{d8}
 800db14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db18:	4b94      	ldr	r3, [pc, #592]	; (800dd6c <_dtoa_r+0x304>)
 800db1a:	9300      	str	r3, [sp, #0]
 800db1c:	3303      	adds	r3, #3
 800db1e:	e7f3      	b.n	800db08 <_dtoa_r+0xa0>
 800db20:	ed9d 7b02 	vldr	d7, [sp, #8]
 800db24:	2200      	movs	r2, #0
 800db26:	ec51 0b17 	vmov	r0, r1, d7
 800db2a:	2300      	movs	r3, #0
 800db2c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800db30:	f7f2 fffa 	bl	8000b28 <__aeabi_dcmpeq>
 800db34:	4680      	mov	r8, r0
 800db36:	b158      	cbz	r0, 800db50 <_dtoa_r+0xe8>
 800db38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db3a:	2301      	movs	r3, #1
 800db3c:	6013      	str	r3, [r2, #0]
 800db3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db40:	2b00      	cmp	r3, #0
 800db42:	f000 8551 	beq.w	800e5e8 <_dtoa_r+0xb80>
 800db46:	488b      	ldr	r0, [pc, #556]	; (800dd74 <_dtoa_r+0x30c>)
 800db48:	6018      	str	r0, [r3, #0]
 800db4a:	1e43      	subs	r3, r0, #1
 800db4c:	9300      	str	r3, [sp, #0]
 800db4e:	e7dd      	b.n	800db0c <_dtoa_r+0xa4>
 800db50:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800db54:	aa12      	add	r2, sp, #72	; 0x48
 800db56:	a913      	add	r1, sp, #76	; 0x4c
 800db58:	4620      	mov	r0, r4
 800db5a:	f001 fa91 	bl	800f080 <__d2b>
 800db5e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800db62:	4683      	mov	fp, r0
 800db64:	2d00      	cmp	r5, #0
 800db66:	d07c      	beq.n	800dc62 <_dtoa_r+0x1fa>
 800db68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db6a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800db6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800db72:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800db76:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800db7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800db7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800db82:	4b7d      	ldr	r3, [pc, #500]	; (800dd78 <_dtoa_r+0x310>)
 800db84:	2200      	movs	r2, #0
 800db86:	4630      	mov	r0, r6
 800db88:	4639      	mov	r1, r7
 800db8a:	f7f2 fbad 	bl	80002e8 <__aeabi_dsub>
 800db8e:	a36e      	add	r3, pc, #440	; (adr r3, 800dd48 <_dtoa_r+0x2e0>)
 800db90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db94:	f7f2 fd60 	bl	8000658 <__aeabi_dmul>
 800db98:	a36d      	add	r3, pc, #436	; (adr r3, 800dd50 <_dtoa_r+0x2e8>)
 800db9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db9e:	f7f2 fba5 	bl	80002ec <__adddf3>
 800dba2:	4606      	mov	r6, r0
 800dba4:	4628      	mov	r0, r5
 800dba6:	460f      	mov	r7, r1
 800dba8:	f7f2 fcec 	bl	8000584 <__aeabi_i2d>
 800dbac:	a36a      	add	r3, pc, #424	; (adr r3, 800dd58 <_dtoa_r+0x2f0>)
 800dbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbb2:	f7f2 fd51 	bl	8000658 <__aeabi_dmul>
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	460b      	mov	r3, r1
 800dbba:	4630      	mov	r0, r6
 800dbbc:	4639      	mov	r1, r7
 800dbbe:	f7f2 fb95 	bl	80002ec <__adddf3>
 800dbc2:	4606      	mov	r6, r0
 800dbc4:	460f      	mov	r7, r1
 800dbc6:	f7f2 fff7 	bl	8000bb8 <__aeabi_d2iz>
 800dbca:	2200      	movs	r2, #0
 800dbcc:	4682      	mov	sl, r0
 800dbce:	2300      	movs	r3, #0
 800dbd0:	4630      	mov	r0, r6
 800dbd2:	4639      	mov	r1, r7
 800dbd4:	f7f2 ffb2 	bl	8000b3c <__aeabi_dcmplt>
 800dbd8:	b148      	cbz	r0, 800dbee <_dtoa_r+0x186>
 800dbda:	4650      	mov	r0, sl
 800dbdc:	f7f2 fcd2 	bl	8000584 <__aeabi_i2d>
 800dbe0:	4632      	mov	r2, r6
 800dbe2:	463b      	mov	r3, r7
 800dbe4:	f7f2 ffa0 	bl	8000b28 <__aeabi_dcmpeq>
 800dbe8:	b908      	cbnz	r0, 800dbee <_dtoa_r+0x186>
 800dbea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dbee:	f1ba 0f16 	cmp.w	sl, #22
 800dbf2:	d854      	bhi.n	800dc9e <_dtoa_r+0x236>
 800dbf4:	4b61      	ldr	r3, [pc, #388]	; (800dd7c <_dtoa_r+0x314>)
 800dbf6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dc02:	f7f2 ff9b 	bl	8000b3c <__aeabi_dcmplt>
 800dc06:	2800      	cmp	r0, #0
 800dc08:	d04b      	beq.n	800dca2 <_dtoa_r+0x23a>
 800dc0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dc0e:	2300      	movs	r3, #0
 800dc10:	930e      	str	r3, [sp, #56]	; 0x38
 800dc12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dc14:	1b5d      	subs	r5, r3, r5
 800dc16:	1e6b      	subs	r3, r5, #1
 800dc18:	9304      	str	r3, [sp, #16]
 800dc1a:	bf43      	ittte	mi
 800dc1c:	2300      	movmi	r3, #0
 800dc1e:	f1c5 0801 	rsbmi	r8, r5, #1
 800dc22:	9304      	strmi	r3, [sp, #16]
 800dc24:	f04f 0800 	movpl.w	r8, #0
 800dc28:	f1ba 0f00 	cmp.w	sl, #0
 800dc2c:	db3b      	blt.n	800dca6 <_dtoa_r+0x23e>
 800dc2e:	9b04      	ldr	r3, [sp, #16]
 800dc30:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800dc34:	4453      	add	r3, sl
 800dc36:	9304      	str	r3, [sp, #16]
 800dc38:	2300      	movs	r3, #0
 800dc3a:	9306      	str	r3, [sp, #24]
 800dc3c:	9b05      	ldr	r3, [sp, #20]
 800dc3e:	2b09      	cmp	r3, #9
 800dc40:	d869      	bhi.n	800dd16 <_dtoa_r+0x2ae>
 800dc42:	2b05      	cmp	r3, #5
 800dc44:	bfc4      	itt	gt
 800dc46:	3b04      	subgt	r3, #4
 800dc48:	9305      	strgt	r3, [sp, #20]
 800dc4a:	9b05      	ldr	r3, [sp, #20]
 800dc4c:	f1a3 0302 	sub.w	r3, r3, #2
 800dc50:	bfcc      	ite	gt
 800dc52:	2500      	movgt	r5, #0
 800dc54:	2501      	movle	r5, #1
 800dc56:	2b03      	cmp	r3, #3
 800dc58:	d869      	bhi.n	800dd2e <_dtoa_r+0x2c6>
 800dc5a:	e8df f003 	tbb	[pc, r3]
 800dc5e:	4e2c      	.short	0x4e2c
 800dc60:	5a4c      	.short	0x5a4c
 800dc62:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800dc66:	441d      	add	r5, r3
 800dc68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dc6c:	2b20      	cmp	r3, #32
 800dc6e:	bfc1      	itttt	gt
 800dc70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dc74:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dc78:	fa09 f303 	lslgt.w	r3, r9, r3
 800dc7c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dc80:	bfda      	itte	le
 800dc82:	f1c3 0320 	rsble	r3, r3, #32
 800dc86:	fa06 f003 	lslle.w	r0, r6, r3
 800dc8a:	4318      	orrgt	r0, r3
 800dc8c:	f7f2 fc6a 	bl	8000564 <__aeabi_ui2d>
 800dc90:	2301      	movs	r3, #1
 800dc92:	4606      	mov	r6, r0
 800dc94:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dc98:	3d01      	subs	r5, #1
 800dc9a:	9310      	str	r3, [sp, #64]	; 0x40
 800dc9c:	e771      	b.n	800db82 <_dtoa_r+0x11a>
 800dc9e:	2301      	movs	r3, #1
 800dca0:	e7b6      	b.n	800dc10 <_dtoa_r+0x1a8>
 800dca2:	900e      	str	r0, [sp, #56]	; 0x38
 800dca4:	e7b5      	b.n	800dc12 <_dtoa_r+0x1aa>
 800dca6:	f1ca 0300 	rsb	r3, sl, #0
 800dcaa:	9306      	str	r3, [sp, #24]
 800dcac:	2300      	movs	r3, #0
 800dcae:	eba8 080a 	sub.w	r8, r8, sl
 800dcb2:	930d      	str	r3, [sp, #52]	; 0x34
 800dcb4:	e7c2      	b.n	800dc3c <_dtoa_r+0x1d4>
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	9308      	str	r3, [sp, #32]
 800dcba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	dc39      	bgt.n	800dd34 <_dtoa_r+0x2cc>
 800dcc0:	f04f 0901 	mov.w	r9, #1
 800dcc4:	f8cd 9004 	str.w	r9, [sp, #4]
 800dcc8:	464b      	mov	r3, r9
 800dcca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800dcce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	6042      	str	r2, [r0, #4]
 800dcd4:	2204      	movs	r2, #4
 800dcd6:	f102 0614 	add.w	r6, r2, #20
 800dcda:	429e      	cmp	r6, r3
 800dcdc:	6841      	ldr	r1, [r0, #4]
 800dcde:	d92f      	bls.n	800dd40 <_dtoa_r+0x2d8>
 800dce0:	4620      	mov	r0, r4
 800dce2:	f000 feab 	bl	800ea3c <_Balloc>
 800dce6:	9000      	str	r0, [sp, #0]
 800dce8:	2800      	cmp	r0, #0
 800dcea:	d14b      	bne.n	800dd84 <_dtoa_r+0x31c>
 800dcec:	4b24      	ldr	r3, [pc, #144]	; (800dd80 <_dtoa_r+0x318>)
 800dcee:	4602      	mov	r2, r0
 800dcf0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dcf4:	e6d1      	b.n	800da9a <_dtoa_r+0x32>
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	e7de      	b.n	800dcb8 <_dtoa_r+0x250>
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	9308      	str	r3, [sp, #32]
 800dcfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd00:	eb0a 0903 	add.w	r9, sl, r3
 800dd04:	f109 0301 	add.w	r3, r9, #1
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	9301      	str	r3, [sp, #4]
 800dd0c:	bfb8      	it	lt
 800dd0e:	2301      	movlt	r3, #1
 800dd10:	e7dd      	b.n	800dcce <_dtoa_r+0x266>
 800dd12:	2301      	movs	r3, #1
 800dd14:	e7f2      	b.n	800dcfc <_dtoa_r+0x294>
 800dd16:	2501      	movs	r5, #1
 800dd18:	2300      	movs	r3, #0
 800dd1a:	9305      	str	r3, [sp, #20]
 800dd1c:	9508      	str	r5, [sp, #32]
 800dd1e:	f04f 39ff 	mov.w	r9, #4294967295
 800dd22:	2200      	movs	r2, #0
 800dd24:	f8cd 9004 	str.w	r9, [sp, #4]
 800dd28:	2312      	movs	r3, #18
 800dd2a:	9209      	str	r2, [sp, #36]	; 0x24
 800dd2c:	e7cf      	b.n	800dcce <_dtoa_r+0x266>
 800dd2e:	2301      	movs	r3, #1
 800dd30:	9308      	str	r3, [sp, #32]
 800dd32:	e7f4      	b.n	800dd1e <_dtoa_r+0x2b6>
 800dd34:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800dd38:	f8cd 9004 	str.w	r9, [sp, #4]
 800dd3c:	464b      	mov	r3, r9
 800dd3e:	e7c6      	b.n	800dcce <_dtoa_r+0x266>
 800dd40:	3101      	adds	r1, #1
 800dd42:	6041      	str	r1, [r0, #4]
 800dd44:	0052      	lsls	r2, r2, #1
 800dd46:	e7c6      	b.n	800dcd6 <_dtoa_r+0x26e>
 800dd48:	636f4361 	.word	0x636f4361
 800dd4c:	3fd287a7 	.word	0x3fd287a7
 800dd50:	8b60c8b3 	.word	0x8b60c8b3
 800dd54:	3fc68a28 	.word	0x3fc68a28
 800dd58:	509f79fb 	.word	0x509f79fb
 800dd5c:	3fd34413 	.word	0x3fd34413
 800dd60:	08011378 	.word	0x08011378
 800dd64:	08011668 	.word	0x08011668
 800dd68:	7ff00000 	.word	0x7ff00000
 800dd6c:	08011664 	.word	0x08011664
 800dd70:	0801165b 	.word	0x0801165b
 800dd74:	0801185a 	.word	0x0801185a
 800dd78:	3ff80000 	.word	0x3ff80000
 800dd7c:	08011770 	.word	0x08011770
 800dd80:	080116c7 	.word	0x080116c7
 800dd84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd86:	9a00      	ldr	r2, [sp, #0]
 800dd88:	601a      	str	r2, [r3, #0]
 800dd8a:	9b01      	ldr	r3, [sp, #4]
 800dd8c:	2b0e      	cmp	r3, #14
 800dd8e:	f200 80ad 	bhi.w	800deec <_dtoa_r+0x484>
 800dd92:	2d00      	cmp	r5, #0
 800dd94:	f000 80aa 	beq.w	800deec <_dtoa_r+0x484>
 800dd98:	f1ba 0f00 	cmp.w	sl, #0
 800dd9c:	dd36      	ble.n	800de0c <_dtoa_r+0x3a4>
 800dd9e:	4ac3      	ldr	r2, [pc, #780]	; (800e0ac <_dtoa_r+0x644>)
 800dda0:	f00a 030f 	and.w	r3, sl, #15
 800dda4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800dda8:	ed93 7b00 	vldr	d7, [r3]
 800ddac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800ddb0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800ddb4:	eeb0 8a47 	vmov.f32	s16, s14
 800ddb8:	eef0 8a67 	vmov.f32	s17, s15
 800ddbc:	d016      	beq.n	800ddec <_dtoa_r+0x384>
 800ddbe:	4bbc      	ldr	r3, [pc, #752]	; (800e0b0 <_dtoa_r+0x648>)
 800ddc0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ddc4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ddc8:	f7f2 fd70 	bl	80008ac <__aeabi_ddiv>
 800ddcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddd0:	f007 070f 	and.w	r7, r7, #15
 800ddd4:	2503      	movs	r5, #3
 800ddd6:	4eb6      	ldr	r6, [pc, #728]	; (800e0b0 <_dtoa_r+0x648>)
 800ddd8:	b957      	cbnz	r7, 800ddf0 <_dtoa_r+0x388>
 800ddda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddde:	ec53 2b18 	vmov	r2, r3, d8
 800dde2:	f7f2 fd63 	bl	80008ac <__aeabi_ddiv>
 800dde6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddea:	e029      	b.n	800de40 <_dtoa_r+0x3d8>
 800ddec:	2502      	movs	r5, #2
 800ddee:	e7f2      	b.n	800ddd6 <_dtoa_r+0x36e>
 800ddf0:	07f9      	lsls	r1, r7, #31
 800ddf2:	d508      	bpl.n	800de06 <_dtoa_r+0x39e>
 800ddf4:	ec51 0b18 	vmov	r0, r1, d8
 800ddf8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ddfc:	f7f2 fc2c 	bl	8000658 <__aeabi_dmul>
 800de00:	ec41 0b18 	vmov	d8, r0, r1
 800de04:	3501      	adds	r5, #1
 800de06:	107f      	asrs	r7, r7, #1
 800de08:	3608      	adds	r6, #8
 800de0a:	e7e5      	b.n	800ddd8 <_dtoa_r+0x370>
 800de0c:	f000 80a6 	beq.w	800df5c <_dtoa_r+0x4f4>
 800de10:	f1ca 0600 	rsb	r6, sl, #0
 800de14:	4ba5      	ldr	r3, [pc, #660]	; (800e0ac <_dtoa_r+0x644>)
 800de16:	4fa6      	ldr	r7, [pc, #664]	; (800e0b0 <_dtoa_r+0x648>)
 800de18:	f006 020f 	and.w	r2, r6, #15
 800de1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800de20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800de28:	f7f2 fc16 	bl	8000658 <__aeabi_dmul>
 800de2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de30:	1136      	asrs	r6, r6, #4
 800de32:	2300      	movs	r3, #0
 800de34:	2502      	movs	r5, #2
 800de36:	2e00      	cmp	r6, #0
 800de38:	f040 8085 	bne.w	800df46 <_dtoa_r+0x4de>
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d1d2      	bne.n	800dde6 <_dtoa_r+0x37e>
 800de40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de42:	2b00      	cmp	r3, #0
 800de44:	f000 808c 	beq.w	800df60 <_dtoa_r+0x4f8>
 800de48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800de4c:	4b99      	ldr	r3, [pc, #612]	; (800e0b4 <_dtoa_r+0x64c>)
 800de4e:	2200      	movs	r2, #0
 800de50:	4630      	mov	r0, r6
 800de52:	4639      	mov	r1, r7
 800de54:	f7f2 fe72 	bl	8000b3c <__aeabi_dcmplt>
 800de58:	2800      	cmp	r0, #0
 800de5a:	f000 8081 	beq.w	800df60 <_dtoa_r+0x4f8>
 800de5e:	9b01      	ldr	r3, [sp, #4]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d07d      	beq.n	800df60 <_dtoa_r+0x4f8>
 800de64:	f1b9 0f00 	cmp.w	r9, #0
 800de68:	dd3c      	ble.n	800dee4 <_dtoa_r+0x47c>
 800de6a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800de6e:	9307      	str	r3, [sp, #28]
 800de70:	2200      	movs	r2, #0
 800de72:	4b91      	ldr	r3, [pc, #580]	; (800e0b8 <_dtoa_r+0x650>)
 800de74:	4630      	mov	r0, r6
 800de76:	4639      	mov	r1, r7
 800de78:	f7f2 fbee 	bl	8000658 <__aeabi_dmul>
 800de7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de80:	3501      	adds	r5, #1
 800de82:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800de86:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800de8a:	4628      	mov	r0, r5
 800de8c:	f7f2 fb7a 	bl	8000584 <__aeabi_i2d>
 800de90:	4632      	mov	r2, r6
 800de92:	463b      	mov	r3, r7
 800de94:	f7f2 fbe0 	bl	8000658 <__aeabi_dmul>
 800de98:	4b88      	ldr	r3, [pc, #544]	; (800e0bc <_dtoa_r+0x654>)
 800de9a:	2200      	movs	r2, #0
 800de9c:	f7f2 fa26 	bl	80002ec <__adddf3>
 800dea0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dea4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dea8:	9303      	str	r3, [sp, #12]
 800deaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800deac:	2b00      	cmp	r3, #0
 800deae:	d15c      	bne.n	800df6a <_dtoa_r+0x502>
 800deb0:	4b83      	ldr	r3, [pc, #524]	; (800e0c0 <_dtoa_r+0x658>)
 800deb2:	2200      	movs	r2, #0
 800deb4:	4630      	mov	r0, r6
 800deb6:	4639      	mov	r1, r7
 800deb8:	f7f2 fa16 	bl	80002e8 <__aeabi_dsub>
 800debc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dec0:	4606      	mov	r6, r0
 800dec2:	460f      	mov	r7, r1
 800dec4:	f7f2 fe58 	bl	8000b78 <__aeabi_dcmpgt>
 800dec8:	2800      	cmp	r0, #0
 800deca:	f040 8296 	bne.w	800e3fa <_dtoa_r+0x992>
 800dece:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ded2:	4630      	mov	r0, r6
 800ded4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ded8:	4639      	mov	r1, r7
 800deda:	f7f2 fe2f 	bl	8000b3c <__aeabi_dcmplt>
 800dede:	2800      	cmp	r0, #0
 800dee0:	f040 8288 	bne.w	800e3f4 <_dtoa_r+0x98c>
 800dee4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dee8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800deec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800deee:	2b00      	cmp	r3, #0
 800def0:	f2c0 8158 	blt.w	800e1a4 <_dtoa_r+0x73c>
 800def4:	f1ba 0f0e 	cmp.w	sl, #14
 800def8:	f300 8154 	bgt.w	800e1a4 <_dtoa_r+0x73c>
 800defc:	4b6b      	ldr	r3, [pc, #428]	; (800e0ac <_dtoa_r+0x644>)
 800defe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800df02:	e9d3 8900 	ldrd	r8, r9, [r3]
 800df06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df08:	2b00      	cmp	r3, #0
 800df0a:	f280 80e3 	bge.w	800e0d4 <_dtoa_r+0x66c>
 800df0e:	9b01      	ldr	r3, [sp, #4]
 800df10:	2b00      	cmp	r3, #0
 800df12:	f300 80df 	bgt.w	800e0d4 <_dtoa_r+0x66c>
 800df16:	f040 826d 	bne.w	800e3f4 <_dtoa_r+0x98c>
 800df1a:	4b69      	ldr	r3, [pc, #420]	; (800e0c0 <_dtoa_r+0x658>)
 800df1c:	2200      	movs	r2, #0
 800df1e:	4640      	mov	r0, r8
 800df20:	4649      	mov	r1, r9
 800df22:	f7f2 fb99 	bl	8000658 <__aeabi_dmul>
 800df26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df2a:	f7f2 fe1b 	bl	8000b64 <__aeabi_dcmpge>
 800df2e:	9e01      	ldr	r6, [sp, #4]
 800df30:	4637      	mov	r7, r6
 800df32:	2800      	cmp	r0, #0
 800df34:	f040 8243 	bne.w	800e3be <_dtoa_r+0x956>
 800df38:	9d00      	ldr	r5, [sp, #0]
 800df3a:	2331      	movs	r3, #49	; 0x31
 800df3c:	f805 3b01 	strb.w	r3, [r5], #1
 800df40:	f10a 0a01 	add.w	sl, sl, #1
 800df44:	e23f      	b.n	800e3c6 <_dtoa_r+0x95e>
 800df46:	07f2      	lsls	r2, r6, #31
 800df48:	d505      	bpl.n	800df56 <_dtoa_r+0x4ee>
 800df4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df4e:	f7f2 fb83 	bl	8000658 <__aeabi_dmul>
 800df52:	3501      	adds	r5, #1
 800df54:	2301      	movs	r3, #1
 800df56:	1076      	asrs	r6, r6, #1
 800df58:	3708      	adds	r7, #8
 800df5a:	e76c      	b.n	800de36 <_dtoa_r+0x3ce>
 800df5c:	2502      	movs	r5, #2
 800df5e:	e76f      	b.n	800de40 <_dtoa_r+0x3d8>
 800df60:	9b01      	ldr	r3, [sp, #4]
 800df62:	f8cd a01c 	str.w	sl, [sp, #28]
 800df66:	930c      	str	r3, [sp, #48]	; 0x30
 800df68:	e78d      	b.n	800de86 <_dtoa_r+0x41e>
 800df6a:	9900      	ldr	r1, [sp, #0]
 800df6c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800df6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df70:	4b4e      	ldr	r3, [pc, #312]	; (800e0ac <_dtoa_r+0x644>)
 800df72:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df76:	4401      	add	r1, r0
 800df78:	9102      	str	r1, [sp, #8]
 800df7a:	9908      	ldr	r1, [sp, #32]
 800df7c:	eeb0 8a47 	vmov.f32	s16, s14
 800df80:	eef0 8a67 	vmov.f32	s17, s15
 800df84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800df8c:	2900      	cmp	r1, #0
 800df8e:	d045      	beq.n	800e01c <_dtoa_r+0x5b4>
 800df90:	494c      	ldr	r1, [pc, #304]	; (800e0c4 <_dtoa_r+0x65c>)
 800df92:	2000      	movs	r0, #0
 800df94:	f7f2 fc8a 	bl	80008ac <__aeabi_ddiv>
 800df98:	ec53 2b18 	vmov	r2, r3, d8
 800df9c:	f7f2 f9a4 	bl	80002e8 <__aeabi_dsub>
 800dfa0:	9d00      	ldr	r5, [sp, #0]
 800dfa2:	ec41 0b18 	vmov	d8, r0, r1
 800dfa6:	4639      	mov	r1, r7
 800dfa8:	4630      	mov	r0, r6
 800dfaa:	f7f2 fe05 	bl	8000bb8 <__aeabi_d2iz>
 800dfae:	900c      	str	r0, [sp, #48]	; 0x30
 800dfb0:	f7f2 fae8 	bl	8000584 <__aeabi_i2d>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	4630      	mov	r0, r6
 800dfba:	4639      	mov	r1, r7
 800dfbc:	f7f2 f994 	bl	80002e8 <__aeabi_dsub>
 800dfc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfc2:	3330      	adds	r3, #48	; 0x30
 800dfc4:	f805 3b01 	strb.w	r3, [r5], #1
 800dfc8:	ec53 2b18 	vmov	r2, r3, d8
 800dfcc:	4606      	mov	r6, r0
 800dfce:	460f      	mov	r7, r1
 800dfd0:	f7f2 fdb4 	bl	8000b3c <__aeabi_dcmplt>
 800dfd4:	2800      	cmp	r0, #0
 800dfd6:	d165      	bne.n	800e0a4 <_dtoa_r+0x63c>
 800dfd8:	4632      	mov	r2, r6
 800dfda:	463b      	mov	r3, r7
 800dfdc:	4935      	ldr	r1, [pc, #212]	; (800e0b4 <_dtoa_r+0x64c>)
 800dfde:	2000      	movs	r0, #0
 800dfe0:	f7f2 f982 	bl	80002e8 <__aeabi_dsub>
 800dfe4:	ec53 2b18 	vmov	r2, r3, d8
 800dfe8:	f7f2 fda8 	bl	8000b3c <__aeabi_dcmplt>
 800dfec:	2800      	cmp	r0, #0
 800dfee:	f040 80b9 	bne.w	800e164 <_dtoa_r+0x6fc>
 800dff2:	9b02      	ldr	r3, [sp, #8]
 800dff4:	429d      	cmp	r5, r3
 800dff6:	f43f af75 	beq.w	800dee4 <_dtoa_r+0x47c>
 800dffa:	4b2f      	ldr	r3, [pc, #188]	; (800e0b8 <_dtoa_r+0x650>)
 800dffc:	ec51 0b18 	vmov	r0, r1, d8
 800e000:	2200      	movs	r2, #0
 800e002:	f7f2 fb29 	bl	8000658 <__aeabi_dmul>
 800e006:	4b2c      	ldr	r3, [pc, #176]	; (800e0b8 <_dtoa_r+0x650>)
 800e008:	ec41 0b18 	vmov	d8, r0, r1
 800e00c:	2200      	movs	r2, #0
 800e00e:	4630      	mov	r0, r6
 800e010:	4639      	mov	r1, r7
 800e012:	f7f2 fb21 	bl	8000658 <__aeabi_dmul>
 800e016:	4606      	mov	r6, r0
 800e018:	460f      	mov	r7, r1
 800e01a:	e7c4      	b.n	800dfa6 <_dtoa_r+0x53e>
 800e01c:	ec51 0b17 	vmov	r0, r1, d7
 800e020:	f7f2 fb1a 	bl	8000658 <__aeabi_dmul>
 800e024:	9b02      	ldr	r3, [sp, #8]
 800e026:	9d00      	ldr	r5, [sp, #0]
 800e028:	930c      	str	r3, [sp, #48]	; 0x30
 800e02a:	ec41 0b18 	vmov	d8, r0, r1
 800e02e:	4639      	mov	r1, r7
 800e030:	4630      	mov	r0, r6
 800e032:	f7f2 fdc1 	bl	8000bb8 <__aeabi_d2iz>
 800e036:	9011      	str	r0, [sp, #68]	; 0x44
 800e038:	f7f2 faa4 	bl	8000584 <__aeabi_i2d>
 800e03c:	4602      	mov	r2, r0
 800e03e:	460b      	mov	r3, r1
 800e040:	4630      	mov	r0, r6
 800e042:	4639      	mov	r1, r7
 800e044:	f7f2 f950 	bl	80002e8 <__aeabi_dsub>
 800e048:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e04a:	3330      	adds	r3, #48	; 0x30
 800e04c:	f805 3b01 	strb.w	r3, [r5], #1
 800e050:	9b02      	ldr	r3, [sp, #8]
 800e052:	429d      	cmp	r5, r3
 800e054:	4606      	mov	r6, r0
 800e056:	460f      	mov	r7, r1
 800e058:	f04f 0200 	mov.w	r2, #0
 800e05c:	d134      	bne.n	800e0c8 <_dtoa_r+0x660>
 800e05e:	4b19      	ldr	r3, [pc, #100]	; (800e0c4 <_dtoa_r+0x65c>)
 800e060:	ec51 0b18 	vmov	r0, r1, d8
 800e064:	f7f2 f942 	bl	80002ec <__adddf3>
 800e068:	4602      	mov	r2, r0
 800e06a:	460b      	mov	r3, r1
 800e06c:	4630      	mov	r0, r6
 800e06e:	4639      	mov	r1, r7
 800e070:	f7f2 fd82 	bl	8000b78 <__aeabi_dcmpgt>
 800e074:	2800      	cmp	r0, #0
 800e076:	d175      	bne.n	800e164 <_dtoa_r+0x6fc>
 800e078:	ec53 2b18 	vmov	r2, r3, d8
 800e07c:	4911      	ldr	r1, [pc, #68]	; (800e0c4 <_dtoa_r+0x65c>)
 800e07e:	2000      	movs	r0, #0
 800e080:	f7f2 f932 	bl	80002e8 <__aeabi_dsub>
 800e084:	4602      	mov	r2, r0
 800e086:	460b      	mov	r3, r1
 800e088:	4630      	mov	r0, r6
 800e08a:	4639      	mov	r1, r7
 800e08c:	f7f2 fd56 	bl	8000b3c <__aeabi_dcmplt>
 800e090:	2800      	cmp	r0, #0
 800e092:	f43f af27 	beq.w	800dee4 <_dtoa_r+0x47c>
 800e096:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e098:	1e6b      	subs	r3, r5, #1
 800e09a:	930c      	str	r3, [sp, #48]	; 0x30
 800e09c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e0a0:	2b30      	cmp	r3, #48	; 0x30
 800e0a2:	d0f8      	beq.n	800e096 <_dtoa_r+0x62e>
 800e0a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e0a8:	e04a      	b.n	800e140 <_dtoa_r+0x6d8>
 800e0aa:	bf00      	nop
 800e0ac:	08011770 	.word	0x08011770
 800e0b0:	08011748 	.word	0x08011748
 800e0b4:	3ff00000 	.word	0x3ff00000
 800e0b8:	40240000 	.word	0x40240000
 800e0bc:	401c0000 	.word	0x401c0000
 800e0c0:	40140000 	.word	0x40140000
 800e0c4:	3fe00000 	.word	0x3fe00000
 800e0c8:	4baf      	ldr	r3, [pc, #700]	; (800e388 <_dtoa_r+0x920>)
 800e0ca:	f7f2 fac5 	bl	8000658 <__aeabi_dmul>
 800e0ce:	4606      	mov	r6, r0
 800e0d0:	460f      	mov	r7, r1
 800e0d2:	e7ac      	b.n	800e02e <_dtoa_r+0x5c6>
 800e0d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e0d8:	9d00      	ldr	r5, [sp, #0]
 800e0da:	4642      	mov	r2, r8
 800e0dc:	464b      	mov	r3, r9
 800e0de:	4630      	mov	r0, r6
 800e0e0:	4639      	mov	r1, r7
 800e0e2:	f7f2 fbe3 	bl	80008ac <__aeabi_ddiv>
 800e0e6:	f7f2 fd67 	bl	8000bb8 <__aeabi_d2iz>
 800e0ea:	9002      	str	r0, [sp, #8]
 800e0ec:	f7f2 fa4a 	bl	8000584 <__aeabi_i2d>
 800e0f0:	4642      	mov	r2, r8
 800e0f2:	464b      	mov	r3, r9
 800e0f4:	f7f2 fab0 	bl	8000658 <__aeabi_dmul>
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	460b      	mov	r3, r1
 800e0fc:	4630      	mov	r0, r6
 800e0fe:	4639      	mov	r1, r7
 800e100:	f7f2 f8f2 	bl	80002e8 <__aeabi_dsub>
 800e104:	9e02      	ldr	r6, [sp, #8]
 800e106:	9f01      	ldr	r7, [sp, #4]
 800e108:	3630      	adds	r6, #48	; 0x30
 800e10a:	f805 6b01 	strb.w	r6, [r5], #1
 800e10e:	9e00      	ldr	r6, [sp, #0]
 800e110:	1bae      	subs	r6, r5, r6
 800e112:	42b7      	cmp	r7, r6
 800e114:	4602      	mov	r2, r0
 800e116:	460b      	mov	r3, r1
 800e118:	d137      	bne.n	800e18a <_dtoa_r+0x722>
 800e11a:	f7f2 f8e7 	bl	80002ec <__adddf3>
 800e11e:	4642      	mov	r2, r8
 800e120:	464b      	mov	r3, r9
 800e122:	4606      	mov	r6, r0
 800e124:	460f      	mov	r7, r1
 800e126:	f7f2 fd27 	bl	8000b78 <__aeabi_dcmpgt>
 800e12a:	b9c8      	cbnz	r0, 800e160 <_dtoa_r+0x6f8>
 800e12c:	4642      	mov	r2, r8
 800e12e:	464b      	mov	r3, r9
 800e130:	4630      	mov	r0, r6
 800e132:	4639      	mov	r1, r7
 800e134:	f7f2 fcf8 	bl	8000b28 <__aeabi_dcmpeq>
 800e138:	b110      	cbz	r0, 800e140 <_dtoa_r+0x6d8>
 800e13a:	9b02      	ldr	r3, [sp, #8]
 800e13c:	07d9      	lsls	r1, r3, #31
 800e13e:	d40f      	bmi.n	800e160 <_dtoa_r+0x6f8>
 800e140:	4620      	mov	r0, r4
 800e142:	4659      	mov	r1, fp
 800e144:	f000 fcba 	bl	800eabc <_Bfree>
 800e148:	2300      	movs	r3, #0
 800e14a:	702b      	strb	r3, [r5, #0]
 800e14c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e14e:	f10a 0001 	add.w	r0, sl, #1
 800e152:	6018      	str	r0, [r3, #0]
 800e154:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e156:	2b00      	cmp	r3, #0
 800e158:	f43f acd8 	beq.w	800db0c <_dtoa_r+0xa4>
 800e15c:	601d      	str	r5, [r3, #0]
 800e15e:	e4d5      	b.n	800db0c <_dtoa_r+0xa4>
 800e160:	f8cd a01c 	str.w	sl, [sp, #28]
 800e164:	462b      	mov	r3, r5
 800e166:	461d      	mov	r5, r3
 800e168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e16c:	2a39      	cmp	r2, #57	; 0x39
 800e16e:	d108      	bne.n	800e182 <_dtoa_r+0x71a>
 800e170:	9a00      	ldr	r2, [sp, #0]
 800e172:	429a      	cmp	r2, r3
 800e174:	d1f7      	bne.n	800e166 <_dtoa_r+0x6fe>
 800e176:	9a07      	ldr	r2, [sp, #28]
 800e178:	9900      	ldr	r1, [sp, #0]
 800e17a:	3201      	adds	r2, #1
 800e17c:	9207      	str	r2, [sp, #28]
 800e17e:	2230      	movs	r2, #48	; 0x30
 800e180:	700a      	strb	r2, [r1, #0]
 800e182:	781a      	ldrb	r2, [r3, #0]
 800e184:	3201      	adds	r2, #1
 800e186:	701a      	strb	r2, [r3, #0]
 800e188:	e78c      	b.n	800e0a4 <_dtoa_r+0x63c>
 800e18a:	4b7f      	ldr	r3, [pc, #508]	; (800e388 <_dtoa_r+0x920>)
 800e18c:	2200      	movs	r2, #0
 800e18e:	f7f2 fa63 	bl	8000658 <__aeabi_dmul>
 800e192:	2200      	movs	r2, #0
 800e194:	2300      	movs	r3, #0
 800e196:	4606      	mov	r6, r0
 800e198:	460f      	mov	r7, r1
 800e19a:	f7f2 fcc5 	bl	8000b28 <__aeabi_dcmpeq>
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	d09b      	beq.n	800e0da <_dtoa_r+0x672>
 800e1a2:	e7cd      	b.n	800e140 <_dtoa_r+0x6d8>
 800e1a4:	9a08      	ldr	r2, [sp, #32]
 800e1a6:	2a00      	cmp	r2, #0
 800e1a8:	f000 80c4 	beq.w	800e334 <_dtoa_r+0x8cc>
 800e1ac:	9a05      	ldr	r2, [sp, #20]
 800e1ae:	2a01      	cmp	r2, #1
 800e1b0:	f300 80a8 	bgt.w	800e304 <_dtoa_r+0x89c>
 800e1b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e1b6:	2a00      	cmp	r2, #0
 800e1b8:	f000 80a0 	beq.w	800e2fc <_dtoa_r+0x894>
 800e1bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e1c0:	9e06      	ldr	r6, [sp, #24]
 800e1c2:	4645      	mov	r5, r8
 800e1c4:	9a04      	ldr	r2, [sp, #16]
 800e1c6:	2101      	movs	r1, #1
 800e1c8:	441a      	add	r2, r3
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	4498      	add	r8, r3
 800e1ce:	9204      	str	r2, [sp, #16]
 800e1d0:	f000 fd30 	bl	800ec34 <__i2b>
 800e1d4:	4607      	mov	r7, r0
 800e1d6:	2d00      	cmp	r5, #0
 800e1d8:	dd0b      	ble.n	800e1f2 <_dtoa_r+0x78a>
 800e1da:	9b04      	ldr	r3, [sp, #16]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	dd08      	ble.n	800e1f2 <_dtoa_r+0x78a>
 800e1e0:	42ab      	cmp	r3, r5
 800e1e2:	9a04      	ldr	r2, [sp, #16]
 800e1e4:	bfa8      	it	ge
 800e1e6:	462b      	movge	r3, r5
 800e1e8:	eba8 0803 	sub.w	r8, r8, r3
 800e1ec:	1aed      	subs	r5, r5, r3
 800e1ee:	1ad3      	subs	r3, r2, r3
 800e1f0:	9304      	str	r3, [sp, #16]
 800e1f2:	9b06      	ldr	r3, [sp, #24]
 800e1f4:	b1fb      	cbz	r3, 800e236 <_dtoa_r+0x7ce>
 800e1f6:	9b08      	ldr	r3, [sp, #32]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	f000 809f 	beq.w	800e33c <_dtoa_r+0x8d4>
 800e1fe:	2e00      	cmp	r6, #0
 800e200:	dd11      	ble.n	800e226 <_dtoa_r+0x7be>
 800e202:	4639      	mov	r1, r7
 800e204:	4632      	mov	r2, r6
 800e206:	4620      	mov	r0, r4
 800e208:	f000 fdd0 	bl	800edac <__pow5mult>
 800e20c:	465a      	mov	r2, fp
 800e20e:	4601      	mov	r1, r0
 800e210:	4607      	mov	r7, r0
 800e212:	4620      	mov	r0, r4
 800e214:	f000 fd24 	bl	800ec60 <__multiply>
 800e218:	4659      	mov	r1, fp
 800e21a:	9007      	str	r0, [sp, #28]
 800e21c:	4620      	mov	r0, r4
 800e21e:	f000 fc4d 	bl	800eabc <_Bfree>
 800e222:	9b07      	ldr	r3, [sp, #28]
 800e224:	469b      	mov	fp, r3
 800e226:	9b06      	ldr	r3, [sp, #24]
 800e228:	1b9a      	subs	r2, r3, r6
 800e22a:	d004      	beq.n	800e236 <_dtoa_r+0x7ce>
 800e22c:	4659      	mov	r1, fp
 800e22e:	4620      	mov	r0, r4
 800e230:	f000 fdbc 	bl	800edac <__pow5mult>
 800e234:	4683      	mov	fp, r0
 800e236:	2101      	movs	r1, #1
 800e238:	4620      	mov	r0, r4
 800e23a:	f000 fcfb 	bl	800ec34 <__i2b>
 800e23e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e240:	2b00      	cmp	r3, #0
 800e242:	4606      	mov	r6, r0
 800e244:	dd7c      	ble.n	800e340 <_dtoa_r+0x8d8>
 800e246:	461a      	mov	r2, r3
 800e248:	4601      	mov	r1, r0
 800e24a:	4620      	mov	r0, r4
 800e24c:	f000 fdae 	bl	800edac <__pow5mult>
 800e250:	9b05      	ldr	r3, [sp, #20]
 800e252:	2b01      	cmp	r3, #1
 800e254:	4606      	mov	r6, r0
 800e256:	dd76      	ble.n	800e346 <_dtoa_r+0x8de>
 800e258:	2300      	movs	r3, #0
 800e25a:	9306      	str	r3, [sp, #24]
 800e25c:	6933      	ldr	r3, [r6, #16]
 800e25e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e262:	6918      	ldr	r0, [r3, #16]
 800e264:	f000 fc96 	bl	800eb94 <__hi0bits>
 800e268:	f1c0 0020 	rsb	r0, r0, #32
 800e26c:	9b04      	ldr	r3, [sp, #16]
 800e26e:	4418      	add	r0, r3
 800e270:	f010 001f 	ands.w	r0, r0, #31
 800e274:	f000 8086 	beq.w	800e384 <_dtoa_r+0x91c>
 800e278:	f1c0 0320 	rsb	r3, r0, #32
 800e27c:	2b04      	cmp	r3, #4
 800e27e:	dd7f      	ble.n	800e380 <_dtoa_r+0x918>
 800e280:	f1c0 001c 	rsb	r0, r0, #28
 800e284:	9b04      	ldr	r3, [sp, #16]
 800e286:	4403      	add	r3, r0
 800e288:	4480      	add	r8, r0
 800e28a:	4405      	add	r5, r0
 800e28c:	9304      	str	r3, [sp, #16]
 800e28e:	f1b8 0f00 	cmp.w	r8, #0
 800e292:	dd05      	ble.n	800e2a0 <_dtoa_r+0x838>
 800e294:	4659      	mov	r1, fp
 800e296:	4642      	mov	r2, r8
 800e298:	4620      	mov	r0, r4
 800e29a:	f000 fde1 	bl	800ee60 <__lshift>
 800e29e:	4683      	mov	fp, r0
 800e2a0:	9b04      	ldr	r3, [sp, #16]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	dd05      	ble.n	800e2b2 <_dtoa_r+0x84a>
 800e2a6:	4631      	mov	r1, r6
 800e2a8:	461a      	mov	r2, r3
 800e2aa:	4620      	mov	r0, r4
 800e2ac:	f000 fdd8 	bl	800ee60 <__lshift>
 800e2b0:	4606      	mov	r6, r0
 800e2b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d069      	beq.n	800e38c <_dtoa_r+0x924>
 800e2b8:	4631      	mov	r1, r6
 800e2ba:	4658      	mov	r0, fp
 800e2bc:	f000 fe3c 	bl	800ef38 <__mcmp>
 800e2c0:	2800      	cmp	r0, #0
 800e2c2:	da63      	bge.n	800e38c <_dtoa_r+0x924>
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	4659      	mov	r1, fp
 800e2c8:	220a      	movs	r2, #10
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	f000 fc18 	bl	800eb00 <__multadd>
 800e2d0:	9b08      	ldr	r3, [sp, #32]
 800e2d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e2d6:	4683      	mov	fp, r0
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	f000 818f 	beq.w	800e5fc <_dtoa_r+0xb94>
 800e2de:	4639      	mov	r1, r7
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	220a      	movs	r2, #10
 800e2e4:	4620      	mov	r0, r4
 800e2e6:	f000 fc0b 	bl	800eb00 <__multadd>
 800e2ea:	f1b9 0f00 	cmp.w	r9, #0
 800e2ee:	4607      	mov	r7, r0
 800e2f0:	f300 808e 	bgt.w	800e410 <_dtoa_r+0x9a8>
 800e2f4:	9b05      	ldr	r3, [sp, #20]
 800e2f6:	2b02      	cmp	r3, #2
 800e2f8:	dc50      	bgt.n	800e39c <_dtoa_r+0x934>
 800e2fa:	e089      	b.n	800e410 <_dtoa_r+0x9a8>
 800e2fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e2fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e302:	e75d      	b.n	800e1c0 <_dtoa_r+0x758>
 800e304:	9b01      	ldr	r3, [sp, #4]
 800e306:	1e5e      	subs	r6, r3, #1
 800e308:	9b06      	ldr	r3, [sp, #24]
 800e30a:	42b3      	cmp	r3, r6
 800e30c:	bfbf      	itttt	lt
 800e30e:	9b06      	ldrlt	r3, [sp, #24]
 800e310:	9606      	strlt	r6, [sp, #24]
 800e312:	1af2      	sublt	r2, r6, r3
 800e314:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e316:	bfb6      	itet	lt
 800e318:	189b      	addlt	r3, r3, r2
 800e31a:	1b9e      	subge	r6, r3, r6
 800e31c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e31e:	9b01      	ldr	r3, [sp, #4]
 800e320:	bfb8      	it	lt
 800e322:	2600      	movlt	r6, #0
 800e324:	2b00      	cmp	r3, #0
 800e326:	bfb5      	itete	lt
 800e328:	eba8 0503 	sublt.w	r5, r8, r3
 800e32c:	9b01      	ldrge	r3, [sp, #4]
 800e32e:	2300      	movlt	r3, #0
 800e330:	4645      	movge	r5, r8
 800e332:	e747      	b.n	800e1c4 <_dtoa_r+0x75c>
 800e334:	9e06      	ldr	r6, [sp, #24]
 800e336:	9f08      	ldr	r7, [sp, #32]
 800e338:	4645      	mov	r5, r8
 800e33a:	e74c      	b.n	800e1d6 <_dtoa_r+0x76e>
 800e33c:	9a06      	ldr	r2, [sp, #24]
 800e33e:	e775      	b.n	800e22c <_dtoa_r+0x7c4>
 800e340:	9b05      	ldr	r3, [sp, #20]
 800e342:	2b01      	cmp	r3, #1
 800e344:	dc18      	bgt.n	800e378 <_dtoa_r+0x910>
 800e346:	9b02      	ldr	r3, [sp, #8]
 800e348:	b9b3      	cbnz	r3, 800e378 <_dtoa_r+0x910>
 800e34a:	9b03      	ldr	r3, [sp, #12]
 800e34c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e350:	b9a3      	cbnz	r3, 800e37c <_dtoa_r+0x914>
 800e352:	9b03      	ldr	r3, [sp, #12]
 800e354:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e358:	0d1b      	lsrs	r3, r3, #20
 800e35a:	051b      	lsls	r3, r3, #20
 800e35c:	b12b      	cbz	r3, 800e36a <_dtoa_r+0x902>
 800e35e:	9b04      	ldr	r3, [sp, #16]
 800e360:	3301      	adds	r3, #1
 800e362:	9304      	str	r3, [sp, #16]
 800e364:	f108 0801 	add.w	r8, r8, #1
 800e368:	2301      	movs	r3, #1
 800e36a:	9306      	str	r3, [sp, #24]
 800e36c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e36e:	2b00      	cmp	r3, #0
 800e370:	f47f af74 	bne.w	800e25c <_dtoa_r+0x7f4>
 800e374:	2001      	movs	r0, #1
 800e376:	e779      	b.n	800e26c <_dtoa_r+0x804>
 800e378:	2300      	movs	r3, #0
 800e37a:	e7f6      	b.n	800e36a <_dtoa_r+0x902>
 800e37c:	9b02      	ldr	r3, [sp, #8]
 800e37e:	e7f4      	b.n	800e36a <_dtoa_r+0x902>
 800e380:	d085      	beq.n	800e28e <_dtoa_r+0x826>
 800e382:	4618      	mov	r0, r3
 800e384:	301c      	adds	r0, #28
 800e386:	e77d      	b.n	800e284 <_dtoa_r+0x81c>
 800e388:	40240000 	.word	0x40240000
 800e38c:	9b01      	ldr	r3, [sp, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	dc38      	bgt.n	800e404 <_dtoa_r+0x99c>
 800e392:	9b05      	ldr	r3, [sp, #20]
 800e394:	2b02      	cmp	r3, #2
 800e396:	dd35      	ble.n	800e404 <_dtoa_r+0x99c>
 800e398:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e39c:	f1b9 0f00 	cmp.w	r9, #0
 800e3a0:	d10d      	bne.n	800e3be <_dtoa_r+0x956>
 800e3a2:	4631      	mov	r1, r6
 800e3a4:	464b      	mov	r3, r9
 800e3a6:	2205      	movs	r2, #5
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	f000 fba9 	bl	800eb00 <__multadd>
 800e3ae:	4601      	mov	r1, r0
 800e3b0:	4606      	mov	r6, r0
 800e3b2:	4658      	mov	r0, fp
 800e3b4:	f000 fdc0 	bl	800ef38 <__mcmp>
 800e3b8:	2800      	cmp	r0, #0
 800e3ba:	f73f adbd 	bgt.w	800df38 <_dtoa_r+0x4d0>
 800e3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3c0:	9d00      	ldr	r5, [sp, #0]
 800e3c2:	ea6f 0a03 	mvn.w	sl, r3
 800e3c6:	f04f 0800 	mov.w	r8, #0
 800e3ca:	4631      	mov	r1, r6
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	f000 fb75 	bl	800eabc <_Bfree>
 800e3d2:	2f00      	cmp	r7, #0
 800e3d4:	f43f aeb4 	beq.w	800e140 <_dtoa_r+0x6d8>
 800e3d8:	f1b8 0f00 	cmp.w	r8, #0
 800e3dc:	d005      	beq.n	800e3ea <_dtoa_r+0x982>
 800e3de:	45b8      	cmp	r8, r7
 800e3e0:	d003      	beq.n	800e3ea <_dtoa_r+0x982>
 800e3e2:	4641      	mov	r1, r8
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	f000 fb69 	bl	800eabc <_Bfree>
 800e3ea:	4639      	mov	r1, r7
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	f000 fb65 	bl	800eabc <_Bfree>
 800e3f2:	e6a5      	b.n	800e140 <_dtoa_r+0x6d8>
 800e3f4:	2600      	movs	r6, #0
 800e3f6:	4637      	mov	r7, r6
 800e3f8:	e7e1      	b.n	800e3be <_dtoa_r+0x956>
 800e3fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e3fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e400:	4637      	mov	r7, r6
 800e402:	e599      	b.n	800df38 <_dtoa_r+0x4d0>
 800e404:	9b08      	ldr	r3, [sp, #32]
 800e406:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	f000 80fd 	beq.w	800e60a <_dtoa_r+0xba2>
 800e410:	2d00      	cmp	r5, #0
 800e412:	dd05      	ble.n	800e420 <_dtoa_r+0x9b8>
 800e414:	4639      	mov	r1, r7
 800e416:	462a      	mov	r2, r5
 800e418:	4620      	mov	r0, r4
 800e41a:	f000 fd21 	bl	800ee60 <__lshift>
 800e41e:	4607      	mov	r7, r0
 800e420:	9b06      	ldr	r3, [sp, #24]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d05c      	beq.n	800e4e0 <_dtoa_r+0xa78>
 800e426:	6879      	ldr	r1, [r7, #4]
 800e428:	4620      	mov	r0, r4
 800e42a:	f000 fb07 	bl	800ea3c <_Balloc>
 800e42e:	4605      	mov	r5, r0
 800e430:	b928      	cbnz	r0, 800e43e <_dtoa_r+0x9d6>
 800e432:	4b80      	ldr	r3, [pc, #512]	; (800e634 <_dtoa_r+0xbcc>)
 800e434:	4602      	mov	r2, r0
 800e436:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e43a:	f7ff bb2e 	b.w	800da9a <_dtoa_r+0x32>
 800e43e:	693a      	ldr	r2, [r7, #16]
 800e440:	3202      	adds	r2, #2
 800e442:	0092      	lsls	r2, r2, #2
 800e444:	f107 010c 	add.w	r1, r7, #12
 800e448:	300c      	adds	r0, #12
 800e44a:	f7fd fde7 	bl	800c01c <memcpy>
 800e44e:	2201      	movs	r2, #1
 800e450:	4629      	mov	r1, r5
 800e452:	4620      	mov	r0, r4
 800e454:	f000 fd04 	bl	800ee60 <__lshift>
 800e458:	9b00      	ldr	r3, [sp, #0]
 800e45a:	3301      	adds	r3, #1
 800e45c:	9301      	str	r3, [sp, #4]
 800e45e:	9b00      	ldr	r3, [sp, #0]
 800e460:	444b      	add	r3, r9
 800e462:	9307      	str	r3, [sp, #28]
 800e464:	9b02      	ldr	r3, [sp, #8]
 800e466:	f003 0301 	and.w	r3, r3, #1
 800e46a:	46b8      	mov	r8, r7
 800e46c:	9306      	str	r3, [sp, #24]
 800e46e:	4607      	mov	r7, r0
 800e470:	9b01      	ldr	r3, [sp, #4]
 800e472:	4631      	mov	r1, r6
 800e474:	3b01      	subs	r3, #1
 800e476:	4658      	mov	r0, fp
 800e478:	9302      	str	r3, [sp, #8]
 800e47a:	f7ff fa67 	bl	800d94c <quorem>
 800e47e:	4603      	mov	r3, r0
 800e480:	3330      	adds	r3, #48	; 0x30
 800e482:	9004      	str	r0, [sp, #16]
 800e484:	4641      	mov	r1, r8
 800e486:	4658      	mov	r0, fp
 800e488:	9308      	str	r3, [sp, #32]
 800e48a:	f000 fd55 	bl	800ef38 <__mcmp>
 800e48e:	463a      	mov	r2, r7
 800e490:	4681      	mov	r9, r0
 800e492:	4631      	mov	r1, r6
 800e494:	4620      	mov	r0, r4
 800e496:	f000 fd6b 	bl	800ef70 <__mdiff>
 800e49a:	68c2      	ldr	r2, [r0, #12]
 800e49c:	9b08      	ldr	r3, [sp, #32]
 800e49e:	4605      	mov	r5, r0
 800e4a0:	bb02      	cbnz	r2, 800e4e4 <_dtoa_r+0xa7c>
 800e4a2:	4601      	mov	r1, r0
 800e4a4:	4658      	mov	r0, fp
 800e4a6:	f000 fd47 	bl	800ef38 <__mcmp>
 800e4aa:	9b08      	ldr	r3, [sp, #32]
 800e4ac:	4602      	mov	r2, r0
 800e4ae:	4629      	mov	r1, r5
 800e4b0:	4620      	mov	r0, r4
 800e4b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e4b6:	f000 fb01 	bl	800eabc <_Bfree>
 800e4ba:	9b05      	ldr	r3, [sp, #20]
 800e4bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4be:	9d01      	ldr	r5, [sp, #4]
 800e4c0:	ea43 0102 	orr.w	r1, r3, r2
 800e4c4:	9b06      	ldr	r3, [sp, #24]
 800e4c6:	430b      	orrs	r3, r1
 800e4c8:	9b08      	ldr	r3, [sp, #32]
 800e4ca:	d10d      	bne.n	800e4e8 <_dtoa_r+0xa80>
 800e4cc:	2b39      	cmp	r3, #57	; 0x39
 800e4ce:	d029      	beq.n	800e524 <_dtoa_r+0xabc>
 800e4d0:	f1b9 0f00 	cmp.w	r9, #0
 800e4d4:	dd01      	ble.n	800e4da <_dtoa_r+0xa72>
 800e4d6:	9b04      	ldr	r3, [sp, #16]
 800e4d8:	3331      	adds	r3, #49	; 0x31
 800e4da:	9a02      	ldr	r2, [sp, #8]
 800e4dc:	7013      	strb	r3, [r2, #0]
 800e4de:	e774      	b.n	800e3ca <_dtoa_r+0x962>
 800e4e0:	4638      	mov	r0, r7
 800e4e2:	e7b9      	b.n	800e458 <_dtoa_r+0x9f0>
 800e4e4:	2201      	movs	r2, #1
 800e4e6:	e7e2      	b.n	800e4ae <_dtoa_r+0xa46>
 800e4e8:	f1b9 0f00 	cmp.w	r9, #0
 800e4ec:	db06      	blt.n	800e4fc <_dtoa_r+0xa94>
 800e4ee:	9905      	ldr	r1, [sp, #20]
 800e4f0:	ea41 0909 	orr.w	r9, r1, r9
 800e4f4:	9906      	ldr	r1, [sp, #24]
 800e4f6:	ea59 0101 	orrs.w	r1, r9, r1
 800e4fa:	d120      	bne.n	800e53e <_dtoa_r+0xad6>
 800e4fc:	2a00      	cmp	r2, #0
 800e4fe:	ddec      	ble.n	800e4da <_dtoa_r+0xa72>
 800e500:	4659      	mov	r1, fp
 800e502:	2201      	movs	r2, #1
 800e504:	4620      	mov	r0, r4
 800e506:	9301      	str	r3, [sp, #4]
 800e508:	f000 fcaa 	bl	800ee60 <__lshift>
 800e50c:	4631      	mov	r1, r6
 800e50e:	4683      	mov	fp, r0
 800e510:	f000 fd12 	bl	800ef38 <__mcmp>
 800e514:	2800      	cmp	r0, #0
 800e516:	9b01      	ldr	r3, [sp, #4]
 800e518:	dc02      	bgt.n	800e520 <_dtoa_r+0xab8>
 800e51a:	d1de      	bne.n	800e4da <_dtoa_r+0xa72>
 800e51c:	07da      	lsls	r2, r3, #31
 800e51e:	d5dc      	bpl.n	800e4da <_dtoa_r+0xa72>
 800e520:	2b39      	cmp	r3, #57	; 0x39
 800e522:	d1d8      	bne.n	800e4d6 <_dtoa_r+0xa6e>
 800e524:	9a02      	ldr	r2, [sp, #8]
 800e526:	2339      	movs	r3, #57	; 0x39
 800e528:	7013      	strb	r3, [r2, #0]
 800e52a:	462b      	mov	r3, r5
 800e52c:	461d      	mov	r5, r3
 800e52e:	3b01      	subs	r3, #1
 800e530:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e534:	2a39      	cmp	r2, #57	; 0x39
 800e536:	d050      	beq.n	800e5da <_dtoa_r+0xb72>
 800e538:	3201      	adds	r2, #1
 800e53a:	701a      	strb	r2, [r3, #0]
 800e53c:	e745      	b.n	800e3ca <_dtoa_r+0x962>
 800e53e:	2a00      	cmp	r2, #0
 800e540:	dd03      	ble.n	800e54a <_dtoa_r+0xae2>
 800e542:	2b39      	cmp	r3, #57	; 0x39
 800e544:	d0ee      	beq.n	800e524 <_dtoa_r+0xabc>
 800e546:	3301      	adds	r3, #1
 800e548:	e7c7      	b.n	800e4da <_dtoa_r+0xa72>
 800e54a:	9a01      	ldr	r2, [sp, #4]
 800e54c:	9907      	ldr	r1, [sp, #28]
 800e54e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e552:	428a      	cmp	r2, r1
 800e554:	d02a      	beq.n	800e5ac <_dtoa_r+0xb44>
 800e556:	4659      	mov	r1, fp
 800e558:	2300      	movs	r3, #0
 800e55a:	220a      	movs	r2, #10
 800e55c:	4620      	mov	r0, r4
 800e55e:	f000 facf 	bl	800eb00 <__multadd>
 800e562:	45b8      	cmp	r8, r7
 800e564:	4683      	mov	fp, r0
 800e566:	f04f 0300 	mov.w	r3, #0
 800e56a:	f04f 020a 	mov.w	r2, #10
 800e56e:	4641      	mov	r1, r8
 800e570:	4620      	mov	r0, r4
 800e572:	d107      	bne.n	800e584 <_dtoa_r+0xb1c>
 800e574:	f000 fac4 	bl	800eb00 <__multadd>
 800e578:	4680      	mov	r8, r0
 800e57a:	4607      	mov	r7, r0
 800e57c:	9b01      	ldr	r3, [sp, #4]
 800e57e:	3301      	adds	r3, #1
 800e580:	9301      	str	r3, [sp, #4]
 800e582:	e775      	b.n	800e470 <_dtoa_r+0xa08>
 800e584:	f000 fabc 	bl	800eb00 <__multadd>
 800e588:	4639      	mov	r1, r7
 800e58a:	4680      	mov	r8, r0
 800e58c:	2300      	movs	r3, #0
 800e58e:	220a      	movs	r2, #10
 800e590:	4620      	mov	r0, r4
 800e592:	f000 fab5 	bl	800eb00 <__multadd>
 800e596:	4607      	mov	r7, r0
 800e598:	e7f0      	b.n	800e57c <_dtoa_r+0xb14>
 800e59a:	f1b9 0f00 	cmp.w	r9, #0
 800e59e:	9a00      	ldr	r2, [sp, #0]
 800e5a0:	bfcc      	ite	gt
 800e5a2:	464d      	movgt	r5, r9
 800e5a4:	2501      	movle	r5, #1
 800e5a6:	4415      	add	r5, r2
 800e5a8:	f04f 0800 	mov.w	r8, #0
 800e5ac:	4659      	mov	r1, fp
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	4620      	mov	r0, r4
 800e5b2:	9301      	str	r3, [sp, #4]
 800e5b4:	f000 fc54 	bl	800ee60 <__lshift>
 800e5b8:	4631      	mov	r1, r6
 800e5ba:	4683      	mov	fp, r0
 800e5bc:	f000 fcbc 	bl	800ef38 <__mcmp>
 800e5c0:	2800      	cmp	r0, #0
 800e5c2:	dcb2      	bgt.n	800e52a <_dtoa_r+0xac2>
 800e5c4:	d102      	bne.n	800e5cc <_dtoa_r+0xb64>
 800e5c6:	9b01      	ldr	r3, [sp, #4]
 800e5c8:	07db      	lsls	r3, r3, #31
 800e5ca:	d4ae      	bmi.n	800e52a <_dtoa_r+0xac2>
 800e5cc:	462b      	mov	r3, r5
 800e5ce:	461d      	mov	r5, r3
 800e5d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5d4:	2a30      	cmp	r2, #48	; 0x30
 800e5d6:	d0fa      	beq.n	800e5ce <_dtoa_r+0xb66>
 800e5d8:	e6f7      	b.n	800e3ca <_dtoa_r+0x962>
 800e5da:	9a00      	ldr	r2, [sp, #0]
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d1a5      	bne.n	800e52c <_dtoa_r+0xac4>
 800e5e0:	f10a 0a01 	add.w	sl, sl, #1
 800e5e4:	2331      	movs	r3, #49	; 0x31
 800e5e6:	e779      	b.n	800e4dc <_dtoa_r+0xa74>
 800e5e8:	4b13      	ldr	r3, [pc, #76]	; (800e638 <_dtoa_r+0xbd0>)
 800e5ea:	f7ff baaf 	b.w	800db4c <_dtoa_r+0xe4>
 800e5ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	f47f aa86 	bne.w	800db02 <_dtoa_r+0x9a>
 800e5f6:	4b11      	ldr	r3, [pc, #68]	; (800e63c <_dtoa_r+0xbd4>)
 800e5f8:	f7ff baa8 	b.w	800db4c <_dtoa_r+0xe4>
 800e5fc:	f1b9 0f00 	cmp.w	r9, #0
 800e600:	dc03      	bgt.n	800e60a <_dtoa_r+0xba2>
 800e602:	9b05      	ldr	r3, [sp, #20]
 800e604:	2b02      	cmp	r3, #2
 800e606:	f73f aec9 	bgt.w	800e39c <_dtoa_r+0x934>
 800e60a:	9d00      	ldr	r5, [sp, #0]
 800e60c:	4631      	mov	r1, r6
 800e60e:	4658      	mov	r0, fp
 800e610:	f7ff f99c 	bl	800d94c <quorem>
 800e614:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e618:	f805 3b01 	strb.w	r3, [r5], #1
 800e61c:	9a00      	ldr	r2, [sp, #0]
 800e61e:	1aaa      	subs	r2, r5, r2
 800e620:	4591      	cmp	r9, r2
 800e622:	ddba      	ble.n	800e59a <_dtoa_r+0xb32>
 800e624:	4659      	mov	r1, fp
 800e626:	2300      	movs	r3, #0
 800e628:	220a      	movs	r2, #10
 800e62a:	4620      	mov	r0, r4
 800e62c:	f000 fa68 	bl	800eb00 <__multadd>
 800e630:	4683      	mov	fp, r0
 800e632:	e7eb      	b.n	800e60c <_dtoa_r+0xba4>
 800e634:	080116c7 	.word	0x080116c7
 800e638:	08011859 	.word	0x08011859
 800e63c:	0801165b 	.word	0x0801165b

0800e640 <__sflush_r>:
 800e640:	898a      	ldrh	r2, [r1, #12]
 800e642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e646:	4605      	mov	r5, r0
 800e648:	0710      	lsls	r0, r2, #28
 800e64a:	460c      	mov	r4, r1
 800e64c:	d458      	bmi.n	800e700 <__sflush_r+0xc0>
 800e64e:	684b      	ldr	r3, [r1, #4]
 800e650:	2b00      	cmp	r3, #0
 800e652:	dc05      	bgt.n	800e660 <__sflush_r+0x20>
 800e654:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e656:	2b00      	cmp	r3, #0
 800e658:	dc02      	bgt.n	800e660 <__sflush_r+0x20>
 800e65a:	2000      	movs	r0, #0
 800e65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e660:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e662:	2e00      	cmp	r6, #0
 800e664:	d0f9      	beq.n	800e65a <__sflush_r+0x1a>
 800e666:	2300      	movs	r3, #0
 800e668:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e66c:	682f      	ldr	r7, [r5, #0]
 800e66e:	602b      	str	r3, [r5, #0]
 800e670:	d032      	beq.n	800e6d8 <__sflush_r+0x98>
 800e672:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e674:	89a3      	ldrh	r3, [r4, #12]
 800e676:	075a      	lsls	r2, r3, #29
 800e678:	d505      	bpl.n	800e686 <__sflush_r+0x46>
 800e67a:	6863      	ldr	r3, [r4, #4]
 800e67c:	1ac0      	subs	r0, r0, r3
 800e67e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e680:	b10b      	cbz	r3, 800e686 <__sflush_r+0x46>
 800e682:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e684:	1ac0      	subs	r0, r0, r3
 800e686:	2300      	movs	r3, #0
 800e688:	4602      	mov	r2, r0
 800e68a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e68c:	6a21      	ldr	r1, [r4, #32]
 800e68e:	4628      	mov	r0, r5
 800e690:	47b0      	blx	r6
 800e692:	1c43      	adds	r3, r0, #1
 800e694:	89a3      	ldrh	r3, [r4, #12]
 800e696:	d106      	bne.n	800e6a6 <__sflush_r+0x66>
 800e698:	6829      	ldr	r1, [r5, #0]
 800e69a:	291d      	cmp	r1, #29
 800e69c:	d82c      	bhi.n	800e6f8 <__sflush_r+0xb8>
 800e69e:	4a2a      	ldr	r2, [pc, #168]	; (800e748 <__sflush_r+0x108>)
 800e6a0:	40ca      	lsrs	r2, r1
 800e6a2:	07d6      	lsls	r6, r2, #31
 800e6a4:	d528      	bpl.n	800e6f8 <__sflush_r+0xb8>
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	6062      	str	r2, [r4, #4]
 800e6aa:	04d9      	lsls	r1, r3, #19
 800e6ac:	6922      	ldr	r2, [r4, #16]
 800e6ae:	6022      	str	r2, [r4, #0]
 800e6b0:	d504      	bpl.n	800e6bc <__sflush_r+0x7c>
 800e6b2:	1c42      	adds	r2, r0, #1
 800e6b4:	d101      	bne.n	800e6ba <__sflush_r+0x7a>
 800e6b6:	682b      	ldr	r3, [r5, #0]
 800e6b8:	b903      	cbnz	r3, 800e6bc <__sflush_r+0x7c>
 800e6ba:	6560      	str	r0, [r4, #84]	; 0x54
 800e6bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6be:	602f      	str	r7, [r5, #0]
 800e6c0:	2900      	cmp	r1, #0
 800e6c2:	d0ca      	beq.n	800e65a <__sflush_r+0x1a>
 800e6c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6c8:	4299      	cmp	r1, r3
 800e6ca:	d002      	beq.n	800e6d2 <__sflush_r+0x92>
 800e6cc:	4628      	mov	r0, r5
 800e6ce:	f7fd ff53 	bl	800c578 <_free_r>
 800e6d2:	2000      	movs	r0, #0
 800e6d4:	6360      	str	r0, [r4, #52]	; 0x34
 800e6d6:	e7c1      	b.n	800e65c <__sflush_r+0x1c>
 800e6d8:	6a21      	ldr	r1, [r4, #32]
 800e6da:	2301      	movs	r3, #1
 800e6dc:	4628      	mov	r0, r5
 800e6de:	47b0      	blx	r6
 800e6e0:	1c41      	adds	r1, r0, #1
 800e6e2:	d1c7      	bne.n	800e674 <__sflush_r+0x34>
 800e6e4:	682b      	ldr	r3, [r5, #0]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d0c4      	beq.n	800e674 <__sflush_r+0x34>
 800e6ea:	2b1d      	cmp	r3, #29
 800e6ec:	d001      	beq.n	800e6f2 <__sflush_r+0xb2>
 800e6ee:	2b16      	cmp	r3, #22
 800e6f0:	d101      	bne.n	800e6f6 <__sflush_r+0xb6>
 800e6f2:	602f      	str	r7, [r5, #0]
 800e6f4:	e7b1      	b.n	800e65a <__sflush_r+0x1a>
 800e6f6:	89a3      	ldrh	r3, [r4, #12]
 800e6f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6fc:	81a3      	strh	r3, [r4, #12]
 800e6fe:	e7ad      	b.n	800e65c <__sflush_r+0x1c>
 800e700:	690f      	ldr	r7, [r1, #16]
 800e702:	2f00      	cmp	r7, #0
 800e704:	d0a9      	beq.n	800e65a <__sflush_r+0x1a>
 800e706:	0793      	lsls	r3, r2, #30
 800e708:	680e      	ldr	r6, [r1, #0]
 800e70a:	bf08      	it	eq
 800e70c:	694b      	ldreq	r3, [r1, #20]
 800e70e:	600f      	str	r7, [r1, #0]
 800e710:	bf18      	it	ne
 800e712:	2300      	movne	r3, #0
 800e714:	eba6 0807 	sub.w	r8, r6, r7
 800e718:	608b      	str	r3, [r1, #8]
 800e71a:	f1b8 0f00 	cmp.w	r8, #0
 800e71e:	dd9c      	ble.n	800e65a <__sflush_r+0x1a>
 800e720:	6a21      	ldr	r1, [r4, #32]
 800e722:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e724:	4643      	mov	r3, r8
 800e726:	463a      	mov	r2, r7
 800e728:	4628      	mov	r0, r5
 800e72a:	47b0      	blx	r6
 800e72c:	2800      	cmp	r0, #0
 800e72e:	dc06      	bgt.n	800e73e <__sflush_r+0xfe>
 800e730:	89a3      	ldrh	r3, [r4, #12]
 800e732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e736:	81a3      	strh	r3, [r4, #12]
 800e738:	f04f 30ff 	mov.w	r0, #4294967295
 800e73c:	e78e      	b.n	800e65c <__sflush_r+0x1c>
 800e73e:	4407      	add	r7, r0
 800e740:	eba8 0800 	sub.w	r8, r8, r0
 800e744:	e7e9      	b.n	800e71a <__sflush_r+0xda>
 800e746:	bf00      	nop
 800e748:	20400001 	.word	0x20400001

0800e74c <_fflush_r>:
 800e74c:	b538      	push	{r3, r4, r5, lr}
 800e74e:	690b      	ldr	r3, [r1, #16]
 800e750:	4605      	mov	r5, r0
 800e752:	460c      	mov	r4, r1
 800e754:	b913      	cbnz	r3, 800e75c <_fflush_r+0x10>
 800e756:	2500      	movs	r5, #0
 800e758:	4628      	mov	r0, r5
 800e75a:	bd38      	pop	{r3, r4, r5, pc}
 800e75c:	b118      	cbz	r0, 800e766 <_fflush_r+0x1a>
 800e75e:	6983      	ldr	r3, [r0, #24]
 800e760:	b90b      	cbnz	r3, 800e766 <_fflush_r+0x1a>
 800e762:	f7fd fa67 	bl	800bc34 <__sinit>
 800e766:	4b14      	ldr	r3, [pc, #80]	; (800e7b8 <_fflush_r+0x6c>)
 800e768:	429c      	cmp	r4, r3
 800e76a:	d11b      	bne.n	800e7a4 <_fflush_r+0x58>
 800e76c:	686c      	ldr	r4, [r5, #4]
 800e76e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d0ef      	beq.n	800e756 <_fflush_r+0xa>
 800e776:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e778:	07d0      	lsls	r0, r2, #31
 800e77a:	d404      	bmi.n	800e786 <_fflush_r+0x3a>
 800e77c:	0599      	lsls	r1, r3, #22
 800e77e:	d402      	bmi.n	800e786 <_fflush_r+0x3a>
 800e780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e782:	f7fd fc37 	bl	800bff4 <__retarget_lock_acquire_recursive>
 800e786:	4628      	mov	r0, r5
 800e788:	4621      	mov	r1, r4
 800e78a:	f7ff ff59 	bl	800e640 <__sflush_r>
 800e78e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e790:	07da      	lsls	r2, r3, #31
 800e792:	4605      	mov	r5, r0
 800e794:	d4e0      	bmi.n	800e758 <_fflush_r+0xc>
 800e796:	89a3      	ldrh	r3, [r4, #12]
 800e798:	059b      	lsls	r3, r3, #22
 800e79a:	d4dd      	bmi.n	800e758 <_fflush_r+0xc>
 800e79c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e79e:	f7fd fc2b 	bl	800bff8 <__retarget_lock_release_recursive>
 800e7a2:	e7d9      	b.n	800e758 <_fflush_r+0xc>
 800e7a4:	4b05      	ldr	r3, [pc, #20]	; (800e7bc <_fflush_r+0x70>)
 800e7a6:	429c      	cmp	r4, r3
 800e7a8:	d101      	bne.n	800e7ae <_fflush_r+0x62>
 800e7aa:	68ac      	ldr	r4, [r5, #8]
 800e7ac:	e7df      	b.n	800e76e <_fflush_r+0x22>
 800e7ae:	4b04      	ldr	r3, [pc, #16]	; (800e7c0 <_fflush_r+0x74>)
 800e7b0:	429c      	cmp	r4, r3
 800e7b2:	bf08      	it	eq
 800e7b4:	68ec      	ldreq	r4, [r5, #12]
 800e7b6:	e7da      	b.n	800e76e <_fflush_r+0x22>
 800e7b8:	08011334 	.word	0x08011334
 800e7bc:	08011354 	.word	0x08011354
 800e7c0:	08011314 	.word	0x08011314

0800e7c4 <fiprintf>:
 800e7c4:	b40e      	push	{r1, r2, r3}
 800e7c6:	b503      	push	{r0, r1, lr}
 800e7c8:	4601      	mov	r1, r0
 800e7ca:	ab03      	add	r3, sp, #12
 800e7cc:	4805      	ldr	r0, [pc, #20]	; (800e7e4 <fiprintf+0x20>)
 800e7ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7d2:	6800      	ldr	r0, [r0, #0]
 800e7d4:	9301      	str	r3, [sp, #4]
 800e7d6:	f000 fe69 	bl	800f4ac <_vfiprintf_r>
 800e7da:	b002      	add	sp, #8
 800e7dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e7e0:	b003      	add	sp, #12
 800e7e2:	4770      	bx	lr
 800e7e4:	20000020 	.word	0x20000020

0800e7e8 <_findenv_r>:
 800e7e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ec:	4607      	mov	r7, r0
 800e7ee:	4689      	mov	r9, r1
 800e7f0:	4616      	mov	r6, r2
 800e7f2:	f001 f897 	bl	800f924 <__env_lock>
 800e7f6:	4b18      	ldr	r3, [pc, #96]	; (800e858 <_findenv_r+0x70>)
 800e7f8:	681c      	ldr	r4, [r3, #0]
 800e7fa:	469a      	mov	sl, r3
 800e7fc:	b134      	cbz	r4, 800e80c <_findenv_r+0x24>
 800e7fe:	464b      	mov	r3, r9
 800e800:	4698      	mov	r8, r3
 800e802:	f813 1b01 	ldrb.w	r1, [r3], #1
 800e806:	b139      	cbz	r1, 800e818 <_findenv_r+0x30>
 800e808:	293d      	cmp	r1, #61	; 0x3d
 800e80a:	d1f9      	bne.n	800e800 <_findenv_r+0x18>
 800e80c:	4638      	mov	r0, r7
 800e80e:	f001 f88f 	bl	800f930 <__env_unlock>
 800e812:	2000      	movs	r0, #0
 800e814:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e818:	eba8 0809 	sub.w	r8, r8, r9
 800e81c:	46a3      	mov	fp, r4
 800e81e:	f854 0b04 	ldr.w	r0, [r4], #4
 800e822:	2800      	cmp	r0, #0
 800e824:	d0f2      	beq.n	800e80c <_findenv_r+0x24>
 800e826:	4642      	mov	r2, r8
 800e828:	4649      	mov	r1, r9
 800e82a:	f7fe fce4 	bl	800d1f6 <strncmp>
 800e82e:	2800      	cmp	r0, #0
 800e830:	d1f4      	bne.n	800e81c <_findenv_r+0x34>
 800e832:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e836:	eb03 0508 	add.w	r5, r3, r8
 800e83a:	f813 3008 	ldrb.w	r3, [r3, r8]
 800e83e:	2b3d      	cmp	r3, #61	; 0x3d
 800e840:	d1ec      	bne.n	800e81c <_findenv_r+0x34>
 800e842:	f8da 3000 	ldr.w	r3, [sl]
 800e846:	ebab 0303 	sub.w	r3, fp, r3
 800e84a:	109b      	asrs	r3, r3, #2
 800e84c:	4638      	mov	r0, r7
 800e84e:	6033      	str	r3, [r6, #0]
 800e850:	f001 f86e 	bl	800f930 <__env_unlock>
 800e854:	1c68      	adds	r0, r5, #1
 800e856:	e7dd      	b.n	800e814 <_findenv_r+0x2c>
 800e858:	20000008 	.word	0x20000008

0800e85c <_getenv_r>:
 800e85c:	b507      	push	{r0, r1, r2, lr}
 800e85e:	aa01      	add	r2, sp, #4
 800e860:	f7ff ffc2 	bl	800e7e8 <_findenv_r>
 800e864:	b003      	add	sp, #12
 800e866:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800e86c <__gettzinfo>:
 800e86c:	4800      	ldr	r0, [pc, #0]	; (800e870 <__gettzinfo+0x4>)
 800e86e:	4770      	bx	lr
 800e870:	20000090 	.word	0x20000090

0800e874 <gmtime_r>:
 800e874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e878:	e9d0 6700 	ldrd	r6, r7, [r0]
 800e87c:	460c      	mov	r4, r1
 800e87e:	4a51      	ldr	r2, [pc, #324]	; (800e9c4 <gmtime_r+0x150>)
 800e880:	2300      	movs	r3, #0
 800e882:	4630      	mov	r0, r6
 800e884:	4639      	mov	r1, r7
 800e886:	f7f2 f9bf 	bl	8000c08 <__aeabi_ldivmod>
 800e88a:	4639      	mov	r1, r7
 800e88c:	4605      	mov	r5, r0
 800e88e:	4a4d      	ldr	r2, [pc, #308]	; (800e9c4 <gmtime_r+0x150>)
 800e890:	4630      	mov	r0, r6
 800e892:	2300      	movs	r3, #0
 800e894:	f7f2 f9b8 	bl	8000c08 <__aeabi_ldivmod>
 800e898:	2a00      	cmp	r2, #0
 800e89a:	bfbc      	itt	lt
 800e89c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800e8a0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800e8a4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e8a8:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800e8ac:	fbb2 f3f1 	udiv	r3, r2, r1
 800e8b0:	fb01 2213 	mls	r2, r1, r3, r2
 800e8b4:	f04f 013c 	mov.w	r1, #60	; 0x3c
 800e8b8:	bfac      	ite	ge
 800e8ba:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 800e8be:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 800e8c2:	60a3      	str	r3, [r4, #8]
 800e8c4:	fbb2 f3f1 	udiv	r3, r2, r1
 800e8c8:	fb01 2213 	mls	r2, r1, r3, r2
 800e8cc:	6063      	str	r3, [r4, #4]
 800e8ce:	6022      	str	r2, [r4, #0]
 800e8d0:	1cc3      	adds	r3, r0, #3
 800e8d2:	2207      	movs	r2, #7
 800e8d4:	fb93 f2f2 	sdiv	r2, r3, r2
 800e8d8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800e8dc:	1a9b      	subs	r3, r3, r2
 800e8de:	bf48      	it	mi
 800e8e0:	3307      	addmi	r3, #7
 800e8e2:	2800      	cmp	r0, #0
 800e8e4:	61a3      	str	r3, [r4, #24]
 800e8e6:	bfb8      	it	lt
 800e8e8:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 800e8ec:	4936      	ldr	r1, [pc, #216]	; (800e9c8 <gmtime_r+0x154>)
 800e8ee:	bfae      	itee	ge
 800e8f0:	fb90 f1f1 	sdivge	r1, r0, r1
 800e8f4:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 800e8f8:	fb93 f1f1 	sdivlt	r1, r3, r1
 800e8fc:	4b33      	ldr	r3, [pc, #204]	; (800e9cc <gmtime_r+0x158>)
 800e8fe:	fb03 0001 	mla	r0, r3, r1, r0
 800e902:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800e906:	fbb0 f2f2 	udiv	r2, r0, r2
 800e90a:	4402      	add	r2, r0
 800e90c:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 800e910:	fbb0 f3fc 	udiv	r3, r0, ip
 800e914:	1ad2      	subs	r2, r2, r3
 800e916:	f240 176d 	movw	r7, #365	; 0x16d
 800e91a:	4b2d      	ldr	r3, [pc, #180]	; (800e9d0 <gmtime_r+0x15c>)
 800e91c:	fbb0 f3f3 	udiv	r3, r0, r3
 800e920:	2664      	movs	r6, #100	; 0x64
 800e922:	1ad3      	subs	r3, r2, r3
 800e924:	fbb3 f5f7 	udiv	r5, r3, r7
 800e928:	fbb3 f3fc 	udiv	r3, r3, ip
 800e92c:	fbb5 f2f6 	udiv	r2, r5, r6
 800e930:	1ad3      	subs	r3, r2, r3
 800e932:	4403      	add	r3, r0
 800e934:	fb07 3315 	mls	r3, r7, r5, r3
 800e938:	2099      	movs	r0, #153	; 0x99
 800e93a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800e93e:	f10c 0c02 	add.w	ip, ip, #2
 800e942:	f103 0e01 	add.w	lr, r3, #1
 800e946:	fbbc f7f0 	udiv	r7, ip, r0
 800e94a:	4378      	muls	r0, r7
 800e94c:	3002      	adds	r0, #2
 800e94e:	f04f 0805 	mov.w	r8, #5
 800e952:	fbb0 f0f8 	udiv	r0, r0, r8
 800e956:	ebae 0000 	sub.w	r0, lr, r0
 800e95a:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 800e95e:	45f4      	cmp	ip, lr
 800e960:	bf94      	ite	ls
 800e962:	f04f 0c02 	movls.w	ip, #2
 800e966:	f06f 0c09 	mvnhi.w	ip, #9
 800e96a:	4467      	add	r7, ip
 800e96c:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 800e970:	fb0c 5101 	mla	r1, ip, r1, r5
 800e974:	2f01      	cmp	r7, #1
 800e976:	bf98      	it	ls
 800e978:	3101      	addls	r1, #1
 800e97a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800e97e:	d30c      	bcc.n	800e99a <gmtime_r+0x126>
 800e980:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800e984:	61e3      	str	r3, [r4, #28]
 800e986:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 800e98a:	2300      	movs	r3, #0
 800e98c:	60e0      	str	r0, [r4, #12]
 800e98e:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800e992:	6223      	str	r3, [r4, #32]
 800e994:	4620      	mov	r0, r4
 800e996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e99a:	f015 0f03 	tst.w	r5, #3
 800e99e:	d102      	bne.n	800e9a6 <gmtime_r+0x132>
 800e9a0:	fb06 5212 	mls	r2, r6, r2, r5
 800e9a4:	b95a      	cbnz	r2, 800e9be <gmtime_r+0x14a>
 800e9a6:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800e9aa:	fbb5 f2f6 	udiv	r2, r5, r6
 800e9ae:	fb06 5212 	mls	r2, r6, r2, r5
 800e9b2:	fab2 f282 	clz	r2, r2
 800e9b6:	0952      	lsrs	r2, r2, #5
 800e9b8:	333b      	adds	r3, #59	; 0x3b
 800e9ba:	4413      	add	r3, r2
 800e9bc:	e7e2      	b.n	800e984 <gmtime_r+0x110>
 800e9be:	2201      	movs	r2, #1
 800e9c0:	e7fa      	b.n	800e9b8 <gmtime_r+0x144>
 800e9c2:	bf00      	nop
 800e9c4:	00015180 	.word	0x00015180
 800e9c8:	00023ab1 	.word	0x00023ab1
 800e9cc:	fffdc54f 	.word	0xfffdc54f
 800e9d0:	00023ab0 	.word	0x00023ab0

0800e9d4 <_localeconv_r>:
 800e9d4:	4800      	ldr	r0, [pc, #0]	; (800e9d8 <_localeconv_r+0x4>)
 800e9d6:	4770      	bx	lr
 800e9d8:	200001d8 	.word	0x200001d8

0800e9dc <_lseek_r>:
 800e9dc:	b538      	push	{r3, r4, r5, lr}
 800e9de:	4d07      	ldr	r5, [pc, #28]	; (800e9fc <_lseek_r+0x20>)
 800e9e0:	4604      	mov	r4, r0
 800e9e2:	4608      	mov	r0, r1
 800e9e4:	4611      	mov	r1, r2
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	602a      	str	r2, [r5, #0]
 800e9ea:	461a      	mov	r2, r3
 800e9ec:	f7f3 f974 	bl	8001cd8 <_lseek>
 800e9f0:	1c43      	adds	r3, r0, #1
 800e9f2:	d102      	bne.n	800e9fa <_lseek_r+0x1e>
 800e9f4:	682b      	ldr	r3, [r5, #0]
 800e9f6:	b103      	cbz	r3, 800e9fa <_lseek_r+0x1e>
 800e9f8:	6023      	str	r3, [r4, #0]
 800e9fa:	bd38      	pop	{r3, r4, r5, pc}
 800e9fc:	20005098 	.word	0x20005098

0800ea00 <__ascii_mbtowc>:
 800ea00:	b082      	sub	sp, #8
 800ea02:	b901      	cbnz	r1, 800ea06 <__ascii_mbtowc+0x6>
 800ea04:	a901      	add	r1, sp, #4
 800ea06:	b142      	cbz	r2, 800ea1a <__ascii_mbtowc+0x1a>
 800ea08:	b14b      	cbz	r3, 800ea1e <__ascii_mbtowc+0x1e>
 800ea0a:	7813      	ldrb	r3, [r2, #0]
 800ea0c:	600b      	str	r3, [r1, #0]
 800ea0e:	7812      	ldrb	r2, [r2, #0]
 800ea10:	1e10      	subs	r0, r2, #0
 800ea12:	bf18      	it	ne
 800ea14:	2001      	movne	r0, #1
 800ea16:	b002      	add	sp, #8
 800ea18:	4770      	bx	lr
 800ea1a:	4610      	mov	r0, r2
 800ea1c:	e7fb      	b.n	800ea16 <__ascii_mbtowc+0x16>
 800ea1e:	f06f 0001 	mvn.w	r0, #1
 800ea22:	e7f8      	b.n	800ea16 <__ascii_mbtowc+0x16>

0800ea24 <__malloc_lock>:
 800ea24:	4801      	ldr	r0, [pc, #4]	; (800ea2c <__malloc_lock+0x8>)
 800ea26:	f7fd bae5 	b.w	800bff4 <__retarget_lock_acquire_recursive>
 800ea2a:	bf00      	nop
 800ea2c:	20005090 	.word	0x20005090

0800ea30 <__malloc_unlock>:
 800ea30:	4801      	ldr	r0, [pc, #4]	; (800ea38 <__malloc_unlock+0x8>)
 800ea32:	f7fd bae1 	b.w	800bff8 <__retarget_lock_release_recursive>
 800ea36:	bf00      	nop
 800ea38:	20005090 	.word	0x20005090

0800ea3c <_Balloc>:
 800ea3c:	b570      	push	{r4, r5, r6, lr}
 800ea3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ea40:	4604      	mov	r4, r0
 800ea42:	460d      	mov	r5, r1
 800ea44:	b976      	cbnz	r6, 800ea64 <_Balloc+0x28>
 800ea46:	2010      	movs	r0, #16
 800ea48:	f7fd fad8 	bl	800bffc <malloc>
 800ea4c:	4602      	mov	r2, r0
 800ea4e:	6260      	str	r0, [r4, #36]	; 0x24
 800ea50:	b920      	cbnz	r0, 800ea5c <_Balloc+0x20>
 800ea52:	4b18      	ldr	r3, [pc, #96]	; (800eab4 <_Balloc+0x78>)
 800ea54:	4818      	ldr	r0, [pc, #96]	; (800eab8 <_Balloc+0x7c>)
 800ea56:	2166      	movs	r1, #102	; 0x66
 800ea58:	f7fe ff36 	bl	800d8c8 <__assert_func>
 800ea5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea60:	6006      	str	r6, [r0, #0]
 800ea62:	60c6      	str	r6, [r0, #12]
 800ea64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ea66:	68f3      	ldr	r3, [r6, #12]
 800ea68:	b183      	cbz	r3, 800ea8c <_Balloc+0x50>
 800ea6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea6c:	68db      	ldr	r3, [r3, #12]
 800ea6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ea72:	b9b8      	cbnz	r0, 800eaa4 <_Balloc+0x68>
 800ea74:	2101      	movs	r1, #1
 800ea76:	fa01 f605 	lsl.w	r6, r1, r5
 800ea7a:	1d72      	adds	r2, r6, #5
 800ea7c:	0092      	lsls	r2, r2, #2
 800ea7e:	4620      	mov	r0, r4
 800ea80:	f000 fb5a 	bl	800f138 <_calloc_r>
 800ea84:	b160      	cbz	r0, 800eaa0 <_Balloc+0x64>
 800ea86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ea8a:	e00e      	b.n	800eaaa <_Balloc+0x6e>
 800ea8c:	2221      	movs	r2, #33	; 0x21
 800ea8e:	2104      	movs	r1, #4
 800ea90:	4620      	mov	r0, r4
 800ea92:	f000 fb51 	bl	800f138 <_calloc_r>
 800ea96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea98:	60f0      	str	r0, [r6, #12]
 800ea9a:	68db      	ldr	r3, [r3, #12]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d1e4      	bne.n	800ea6a <_Balloc+0x2e>
 800eaa0:	2000      	movs	r0, #0
 800eaa2:	bd70      	pop	{r4, r5, r6, pc}
 800eaa4:	6802      	ldr	r2, [r0, #0]
 800eaa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eaaa:	2300      	movs	r3, #0
 800eaac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eab0:	e7f7      	b.n	800eaa2 <_Balloc+0x66>
 800eab2:	bf00      	nop
 800eab4:	08011378 	.word	0x08011378
 800eab8:	080116e2 	.word	0x080116e2

0800eabc <_Bfree>:
 800eabc:	b570      	push	{r4, r5, r6, lr}
 800eabe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eac0:	4605      	mov	r5, r0
 800eac2:	460c      	mov	r4, r1
 800eac4:	b976      	cbnz	r6, 800eae4 <_Bfree+0x28>
 800eac6:	2010      	movs	r0, #16
 800eac8:	f7fd fa98 	bl	800bffc <malloc>
 800eacc:	4602      	mov	r2, r0
 800eace:	6268      	str	r0, [r5, #36]	; 0x24
 800ead0:	b920      	cbnz	r0, 800eadc <_Bfree+0x20>
 800ead2:	4b09      	ldr	r3, [pc, #36]	; (800eaf8 <_Bfree+0x3c>)
 800ead4:	4809      	ldr	r0, [pc, #36]	; (800eafc <_Bfree+0x40>)
 800ead6:	218a      	movs	r1, #138	; 0x8a
 800ead8:	f7fe fef6 	bl	800d8c8 <__assert_func>
 800eadc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eae0:	6006      	str	r6, [r0, #0]
 800eae2:	60c6      	str	r6, [r0, #12]
 800eae4:	b13c      	cbz	r4, 800eaf6 <_Bfree+0x3a>
 800eae6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eae8:	6862      	ldr	r2, [r4, #4]
 800eaea:	68db      	ldr	r3, [r3, #12]
 800eaec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eaf0:	6021      	str	r1, [r4, #0]
 800eaf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eaf6:	bd70      	pop	{r4, r5, r6, pc}
 800eaf8:	08011378 	.word	0x08011378
 800eafc:	080116e2 	.word	0x080116e2

0800eb00 <__multadd>:
 800eb00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb04:	690e      	ldr	r6, [r1, #16]
 800eb06:	4607      	mov	r7, r0
 800eb08:	4698      	mov	r8, r3
 800eb0a:	460c      	mov	r4, r1
 800eb0c:	f101 0014 	add.w	r0, r1, #20
 800eb10:	2300      	movs	r3, #0
 800eb12:	6805      	ldr	r5, [r0, #0]
 800eb14:	b2a9      	uxth	r1, r5
 800eb16:	fb02 8101 	mla	r1, r2, r1, r8
 800eb1a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800eb1e:	0c2d      	lsrs	r5, r5, #16
 800eb20:	fb02 c505 	mla	r5, r2, r5, ip
 800eb24:	b289      	uxth	r1, r1
 800eb26:	3301      	adds	r3, #1
 800eb28:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800eb2c:	429e      	cmp	r6, r3
 800eb2e:	f840 1b04 	str.w	r1, [r0], #4
 800eb32:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800eb36:	dcec      	bgt.n	800eb12 <__multadd+0x12>
 800eb38:	f1b8 0f00 	cmp.w	r8, #0
 800eb3c:	d022      	beq.n	800eb84 <__multadd+0x84>
 800eb3e:	68a3      	ldr	r3, [r4, #8]
 800eb40:	42b3      	cmp	r3, r6
 800eb42:	dc19      	bgt.n	800eb78 <__multadd+0x78>
 800eb44:	6861      	ldr	r1, [r4, #4]
 800eb46:	4638      	mov	r0, r7
 800eb48:	3101      	adds	r1, #1
 800eb4a:	f7ff ff77 	bl	800ea3c <_Balloc>
 800eb4e:	4605      	mov	r5, r0
 800eb50:	b928      	cbnz	r0, 800eb5e <__multadd+0x5e>
 800eb52:	4602      	mov	r2, r0
 800eb54:	4b0d      	ldr	r3, [pc, #52]	; (800eb8c <__multadd+0x8c>)
 800eb56:	480e      	ldr	r0, [pc, #56]	; (800eb90 <__multadd+0x90>)
 800eb58:	21b5      	movs	r1, #181	; 0xb5
 800eb5a:	f7fe feb5 	bl	800d8c8 <__assert_func>
 800eb5e:	6922      	ldr	r2, [r4, #16]
 800eb60:	3202      	adds	r2, #2
 800eb62:	f104 010c 	add.w	r1, r4, #12
 800eb66:	0092      	lsls	r2, r2, #2
 800eb68:	300c      	adds	r0, #12
 800eb6a:	f7fd fa57 	bl	800c01c <memcpy>
 800eb6e:	4621      	mov	r1, r4
 800eb70:	4638      	mov	r0, r7
 800eb72:	f7ff ffa3 	bl	800eabc <_Bfree>
 800eb76:	462c      	mov	r4, r5
 800eb78:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800eb7c:	3601      	adds	r6, #1
 800eb7e:	f8c3 8014 	str.w	r8, [r3, #20]
 800eb82:	6126      	str	r6, [r4, #16]
 800eb84:	4620      	mov	r0, r4
 800eb86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb8a:	bf00      	nop
 800eb8c:	080116c7 	.word	0x080116c7
 800eb90:	080116e2 	.word	0x080116e2

0800eb94 <__hi0bits>:
 800eb94:	0c03      	lsrs	r3, r0, #16
 800eb96:	041b      	lsls	r3, r3, #16
 800eb98:	b9d3      	cbnz	r3, 800ebd0 <__hi0bits+0x3c>
 800eb9a:	0400      	lsls	r0, r0, #16
 800eb9c:	2310      	movs	r3, #16
 800eb9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800eba2:	bf04      	itt	eq
 800eba4:	0200      	lsleq	r0, r0, #8
 800eba6:	3308      	addeq	r3, #8
 800eba8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ebac:	bf04      	itt	eq
 800ebae:	0100      	lsleq	r0, r0, #4
 800ebb0:	3304      	addeq	r3, #4
 800ebb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ebb6:	bf04      	itt	eq
 800ebb8:	0080      	lsleq	r0, r0, #2
 800ebba:	3302      	addeq	r3, #2
 800ebbc:	2800      	cmp	r0, #0
 800ebbe:	db05      	blt.n	800ebcc <__hi0bits+0x38>
 800ebc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ebc4:	f103 0301 	add.w	r3, r3, #1
 800ebc8:	bf08      	it	eq
 800ebca:	2320      	moveq	r3, #32
 800ebcc:	4618      	mov	r0, r3
 800ebce:	4770      	bx	lr
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	e7e4      	b.n	800eb9e <__hi0bits+0xa>

0800ebd4 <__lo0bits>:
 800ebd4:	6803      	ldr	r3, [r0, #0]
 800ebd6:	f013 0207 	ands.w	r2, r3, #7
 800ebda:	4601      	mov	r1, r0
 800ebdc:	d00b      	beq.n	800ebf6 <__lo0bits+0x22>
 800ebde:	07da      	lsls	r2, r3, #31
 800ebe0:	d424      	bmi.n	800ec2c <__lo0bits+0x58>
 800ebe2:	0798      	lsls	r0, r3, #30
 800ebe4:	bf49      	itett	mi
 800ebe6:	085b      	lsrmi	r3, r3, #1
 800ebe8:	089b      	lsrpl	r3, r3, #2
 800ebea:	2001      	movmi	r0, #1
 800ebec:	600b      	strmi	r3, [r1, #0]
 800ebee:	bf5c      	itt	pl
 800ebf0:	600b      	strpl	r3, [r1, #0]
 800ebf2:	2002      	movpl	r0, #2
 800ebf4:	4770      	bx	lr
 800ebf6:	b298      	uxth	r0, r3
 800ebf8:	b9b0      	cbnz	r0, 800ec28 <__lo0bits+0x54>
 800ebfa:	0c1b      	lsrs	r3, r3, #16
 800ebfc:	2010      	movs	r0, #16
 800ebfe:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ec02:	bf04      	itt	eq
 800ec04:	0a1b      	lsreq	r3, r3, #8
 800ec06:	3008      	addeq	r0, #8
 800ec08:	071a      	lsls	r2, r3, #28
 800ec0a:	bf04      	itt	eq
 800ec0c:	091b      	lsreq	r3, r3, #4
 800ec0e:	3004      	addeq	r0, #4
 800ec10:	079a      	lsls	r2, r3, #30
 800ec12:	bf04      	itt	eq
 800ec14:	089b      	lsreq	r3, r3, #2
 800ec16:	3002      	addeq	r0, #2
 800ec18:	07da      	lsls	r2, r3, #31
 800ec1a:	d403      	bmi.n	800ec24 <__lo0bits+0x50>
 800ec1c:	085b      	lsrs	r3, r3, #1
 800ec1e:	f100 0001 	add.w	r0, r0, #1
 800ec22:	d005      	beq.n	800ec30 <__lo0bits+0x5c>
 800ec24:	600b      	str	r3, [r1, #0]
 800ec26:	4770      	bx	lr
 800ec28:	4610      	mov	r0, r2
 800ec2a:	e7e8      	b.n	800ebfe <__lo0bits+0x2a>
 800ec2c:	2000      	movs	r0, #0
 800ec2e:	4770      	bx	lr
 800ec30:	2020      	movs	r0, #32
 800ec32:	4770      	bx	lr

0800ec34 <__i2b>:
 800ec34:	b510      	push	{r4, lr}
 800ec36:	460c      	mov	r4, r1
 800ec38:	2101      	movs	r1, #1
 800ec3a:	f7ff feff 	bl	800ea3c <_Balloc>
 800ec3e:	4602      	mov	r2, r0
 800ec40:	b928      	cbnz	r0, 800ec4e <__i2b+0x1a>
 800ec42:	4b05      	ldr	r3, [pc, #20]	; (800ec58 <__i2b+0x24>)
 800ec44:	4805      	ldr	r0, [pc, #20]	; (800ec5c <__i2b+0x28>)
 800ec46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ec4a:	f7fe fe3d 	bl	800d8c8 <__assert_func>
 800ec4e:	2301      	movs	r3, #1
 800ec50:	6144      	str	r4, [r0, #20]
 800ec52:	6103      	str	r3, [r0, #16]
 800ec54:	bd10      	pop	{r4, pc}
 800ec56:	bf00      	nop
 800ec58:	080116c7 	.word	0x080116c7
 800ec5c:	080116e2 	.word	0x080116e2

0800ec60 <__multiply>:
 800ec60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec64:	4614      	mov	r4, r2
 800ec66:	690a      	ldr	r2, [r1, #16]
 800ec68:	6923      	ldr	r3, [r4, #16]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	bfb8      	it	lt
 800ec6e:	460b      	movlt	r3, r1
 800ec70:	460d      	mov	r5, r1
 800ec72:	bfbc      	itt	lt
 800ec74:	4625      	movlt	r5, r4
 800ec76:	461c      	movlt	r4, r3
 800ec78:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ec7c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ec80:	68ab      	ldr	r3, [r5, #8]
 800ec82:	6869      	ldr	r1, [r5, #4]
 800ec84:	eb0a 0709 	add.w	r7, sl, r9
 800ec88:	42bb      	cmp	r3, r7
 800ec8a:	b085      	sub	sp, #20
 800ec8c:	bfb8      	it	lt
 800ec8e:	3101      	addlt	r1, #1
 800ec90:	f7ff fed4 	bl	800ea3c <_Balloc>
 800ec94:	b930      	cbnz	r0, 800eca4 <__multiply+0x44>
 800ec96:	4602      	mov	r2, r0
 800ec98:	4b42      	ldr	r3, [pc, #264]	; (800eda4 <__multiply+0x144>)
 800ec9a:	4843      	ldr	r0, [pc, #268]	; (800eda8 <__multiply+0x148>)
 800ec9c:	f240 115d 	movw	r1, #349	; 0x15d
 800eca0:	f7fe fe12 	bl	800d8c8 <__assert_func>
 800eca4:	f100 0614 	add.w	r6, r0, #20
 800eca8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ecac:	4633      	mov	r3, r6
 800ecae:	2200      	movs	r2, #0
 800ecb0:	4543      	cmp	r3, r8
 800ecb2:	d31e      	bcc.n	800ecf2 <__multiply+0x92>
 800ecb4:	f105 0c14 	add.w	ip, r5, #20
 800ecb8:	f104 0314 	add.w	r3, r4, #20
 800ecbc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ecc0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ecc4:	9202      	str	r2, [sp, #8]
 800ecc6:	ebac 0205 	sub.w	r2, ip, r5
 800ecca:	3a15      	subs	r2, #21
 800eccc:	f022 0203 	bic.w	r2, r2, #3
 800ecd0:	3204      	adds	r2, #4
 800ecd2:	f105 0115 	add.w	r1, r5, #21
 800ecd6:	458c      	cmp	ip, r1
 800ecd8:	bf38      	it	cc
 800ecda:	2204      	movcc	r2, #4
 800ecdc:	9201      	str	r2, [sp, #4]
 800ecde:	9a02      	ldr	r2, [sp, #8]
 800ece0:	9303      	str	r3, [sp, #12]
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d808      	bhi.n	800ecf8 <__multiply+0x98>
 800ece6:	2f00      	cmp	r7, #0
 800ece8:	dc55      	bgt.n	800ed96 <__multiply+0x136>
 800ecea:	6107      	str	r7, [r0, #16]
 800ecec:	b005      	add	sp, #20
 800ecee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecf2:	f843 2b04 	str.w	r2, [r3], #4
 800ecf6:	e7db      	b.n	800ecb0 <__multiply+0x50>
 800ecf8:	f8b3 a000 	ldrh.w	sl, [r3]
 800ecfc:	f1ba 0f00 	cmp.w	sl, #0
 800ed00:	d020      	beq.n	800ed44 <__multiply+0xe4>
 800ed02:	f105 0e14 	add.w	lr, r5, #20
 800ed06:	46b1      	mov	r9, r6
 800ed08:	2200      	movs	r2, #0
 800ed0a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ed0e:	f8d9 b000 	ldr.w	fp, [r9]
 800ed12:	b2a1      	uxth	r1, r4
 800ed14:	fa1f fb8b 	uxth.w	fp, fp
 800ed18:	fb0a b101 	mla	r1, sl, r1, fp
 800ed1c:	4411      	add	r1, r2
 800ed1e:	f8d9 2000 	ldr.w	r2, [r9]
 800ed22:	0c24      	lsrs	r4, r4, #16
 800ed24:	0c12      	lsrs	r2, r2, #16
 800ed26:	fb0a 2404 	mla	r4, sl, r4, r2
 800ed2a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ed2e:	b289      	uxth	r1, r1
 800ed30:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ed34:	45f4      	cmp	ip, lr
 800ed36:	f849 1b04 	str.w	r1, [r9], #4
 800ed3a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ed3e:	d8e4      	bhi.n	800ed0a <__multiply+0xaa>
 800ed40:	9901      	ldr	r1, [sp, #4]
 800ed42:	5072      	str	r2, [r6, r1]
 800ed44:	9a03      	ldr	r2, [sp, #12]
 800ed46:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ed4a:	3304      	adds	r3, #4
 800ed4c:	f1b9 0f00 	cmp.w	r9, #0
 800ed50:	d01f      	beq.n	800ed92 <__multiply+0x132>
 800ed52:	6834      	ldr	r4, [r6, #0]
 800ed54:	f105 0114 	add.w	r1, r5, #20
 800ed58:	46b6      	mov	lr, r6
 800ed5a:	f04f 0a00 	mov.w	sl, #0
 800ed5e:	880a      	ldrh	r2, [r1, #0]
 800ed60:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ed64:	fb09 b202 	mla	r2, r9, r2, fp
 800ed68:	4492      	add	sl, r2
 800ed6a:	b2a4      	uxth	r4, r4
 800ed6c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ed70:	f84e 4b04 	str.w	r4, [lr], #4
 800ed74:	f851 4b04 	ldr.w	r4, [r1], #4
 800ed78:	f8be 2000 	ldrh.w	r2, [lr]
 800ed7c:	0c24      	lsrs	r4, r4, #16
 800ed7e:	fb09 2404 	mla	r4, r9, r4, r2
 800ed82:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ed86:	458c      	cmp	ip, r1
 800ed88:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ed8c:	d8e7      	bhi.n	800ed5e <__multiply+0xfe>
 800ed8e:	9a01      	ldr	r2, [sp, #4]
 800ed90:	50b4      	str	r4, [r6, r2]
 800ed92:	3604      	adds	r6, #4
 800ed94:	e7a3      	b.n	800ecde <__multiply+0x7e>
 800ed96:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d1a5      	bne.n	800ecea <__multiply+0x8a>
 800ed9e:	3f01      	subs	r7, #1
 800eda0:	e7a1      	b.n	800ece6 <__multiply+0x86>
 800eda2:	bf00      	nop
 800eda4:	080116c7 	.word	0x080116c7
 800eda8:	080116e2 	.word	0x080116e2

0800edac <__pow5mult>:
 800edac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edb0:	4615      	mov	r5, r2
 800edb2:	f012 0203 	ands.w	r2, r2, #3
 800edb6:	4606      	mov	r6, r0
 800edb8:	460f      	mov	r7, r1
 800edba:	d007      	beq.n	800edcc <__pow5mult+0x20>
 800edbc:	4c25      	ldr	r4, [pc, #148]	; (800ee54 <__pow5mult+0xa8>)
 800edbe:	3a01      	subs	r2, #1
 800edc0:	2300      	movs	r3, #0
 800edc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800edc6:	f7ff fe9b 	bl	800eb00 <__multadd>
 800edca:	4607      	mov	r7, r0
 800edcc:	10ad      	asrs	r5, r5, #2
 800edce:	d03d      	beq.n	800ee4c <__pow5mult+0xa0>
 800edd0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800edd2:	b97c      	cbnz	r4, 800edf4 <__pow5mult+0x48>
 800edd4:	2010      	movs	r0, #16
 800edd6:	f7fd f911 	bl	800bffc <malloc>
 800edda:	4602      	mov	r2, r0
 800eddc:	6270      	str	r0, [r6, #36]	; 0x24
 800edde:	b928      	cbnz	r0, 800edec <__pow5mult+0x40>
 800ede0:	4b1d      	ldr	r3, [pc, #116]	; (800ee58 <__pow5mult+0xac>)
 800ede2:	481e      	ldr	r0, [pc, #120]	; (800ee5c <__pow5mult+0xb0>)
 800ede4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ede8:	f7fe fd6e 	bl	800d8c8 <__assert_func>
 800edec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800edf0:	6004      	str	r4, [r0, #0]
 800edf2:	60c4      	str	r4, [r0, #12]
 800edf4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800edf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800edfc:	b94c      	cbnz	r4, 800ee12 <__pow5mult+0x66>
 800edfe:	f240 2171 	movw	r1, #625	; 0x271
 800ee02:	4630      	mov	r0, r6
 800ee04:	f7ff ff16 	bl	800ec34 <__i2b>
 800ee08:	2300      	movs	r3, #0
 800ee0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee0e:	4604      	mov	r4, r0
 800ee10:	6003      	str	r3, [r0, #0]
 800ee12:	f04f 0900 	mov.w	r9, #0
 800ee16:	07eb      	lsls	r3, r5, #31
 800ee18:	d50a      	bpl.n	800ee30 <__pow5mult+0x84>
 800ee1a:	4639      	mov	r1, r7
 800ee1c:	4622      	mov	r2, r4
 800ee1e:	4630      	mov	r0, r6
 800ee20:	f7ff ff1e 	bl	800ec60 <__multiply>
 800ee24:	4639      	mov	r1, r7
 800ee26:	4680      	mov	r8, r0
 800ee28:	4630      	mov	r0, r6
 800ee2a:	f7ff fe47 	bl	800eabc <_Bfree>
 800ee2e:	4647      	mov	r7, r8
 800ee30:	106d      	asrs	r5, r5, #1
 800ee32:	d00b      	beq.n	800ee4c <__pow5mult+0xa0>
 800ee34:	6820      	ldr	r0, [r4, #0]
 800ee36:	b938      	cbnz	r0, 800ee48 <__pow5mult+0x9c>
 800ee38:	4622      	mov	r2, r4
 800ee3a:	4621      	mov	r1, r4
 800ee3c:	4630      	mov	r0, r6
 800ee3e:	f7ff ff0f 	bl	800ec60 <__multiply>
 800ee42:	6020      	str	r0, [r4, #0]
 800ee44:	f8c0 9000 	str.w	r9, [r0]
 800ee48:	4604      	mov	r4, r0
 800ee4a:	e7e4      	b.n	800ee16 <__pow5mult+0x6a>
 800ee4c:	4638      	mov	r0, r7
 800ee4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee52:	bf00      	nop
 800ee54:	08011838 	.word	0x08011838
 800ee58:	08011378 	.word	0x08011378
 800ee5c:	080116e2 	.word	0x080116e2

0800ee60 <__lshift>:
 800ee60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee64:	460c      	mov	r4, r1
 800ee66:	6849      	ldr	r1, [r1, #4]
 800ee68:	6923      	ldr	r3, [r4, #16]
 800ee6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ee6e:	68a3      	ldr	r3, [r4, #8]
 800ee70:	4607      	mov	r7, r0
 800ee72:	4691      	mov	r9, r2
 800ee74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ee78:	f108 0601 	add.w	r6, r8, #1
 800ee7c:	42b3      	cmp	r3, r6
 800ee7e:	db0b      	blt.n	800ee98 <__lshift+0x38>
 800ee80:	4638      	mov	r0, r7
 800ee82:	f7ff fddb 	bl	800ea3c <_Balloc>
 800ee86:	4605      	mov	r5, r0
 800ee88:	b948      	cbnz	r0, 800ee9e <__lshift+0x3e>
 800ee8a:	4602      	mov	r2, r0
 800ee8c:	4b28      	ldr	r3, [pc, #160]	; (800ef30 <__lshift+0xd0>)
 800ee8e:	4829      	ldr	r0, [pc, #164]	; (800ef34 <__lshift+0xd4>)
 800ee90:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ee94:	f7fe fd18 	bl	800d8c8 <__assert_func>
 800ee98:	3101      	adds	r1, #1
 800ee9a:	005b      	lsls	r3, r3, #1
 800ee9c:	e7ee      	b.n	800ee7c <__lshift+0x1c>
 800ee9e:	2300      	movs	r3, #0
 800eea0:	f100 0114 	add.w	r1, r0, #20
 800eea4:	f100 0210 	add.w	r2, r0, #16
 800eea8:	4618      	mov	r0, r3
 800eeaa:	4553      	cmp	r3, sl
 800eeac:	db33      	blt.n	800ef16 <__lshift+0xb6>
 800eeae:	6920      	ldr	r0, [r4, #16]
 800eeb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eeb4:	f104 0314 	add.w	r3, r4, #20
 800eeb8:	f019 091f 	ands.w	r9, r9, #31
 800eebc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eec0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eec4:	d02b      	beq.n	800ef1e <__lshift+0xbe>
 800eec6:	f1c9 0e20 	rsb	lr, r9, #32
 800eeca:	468a      	mov	sl, r1
 800eecc:	2200      	movs	r2, #0
 800eece:	6818      	ldr	r0, [r3, #0]
 800eed0:	fa00 f009 	lsl.w	r0, r0, r9
 800eed4:	4302      	orrs	r2, r0
 800eed6:	f84a 2b04 	str.w	r2, [sl], #4
 800eeda:	f853 2b04 	ldr.w	r2, [r3], #4
 800eede:	459c      	cmp	ip, r3
 800eee0:	fa22 f20e 	lsr.w	r2, r2, lr
 800eee4:	d8f3      	bhi.n	800eece <__lshift+0x6e>
 800eee6:	ebac 0304 	sub.w	r3, ip, r4
 800eeea:	3b15      	subs	r3, #21
 800eeec:	f023 0303 	bic.w	r3, r3, #3
 800eef0:	3304      	adds	r3, #4
 800eef2:	f104 0015 	add.w	r0, r4, #21
 800eef6:	4584      	cmp	ip, r0
 800eef8:	bf38      	it	cc
 800eefa:	2304      	movcc	r3, #4
 800eefc:	50ca      	str	r2, [r1, r3]
 800eefe:	b10a      	cbz	r2, 800ef04 <__lshift+0xa4>
 800ef00:	f108 0602 	add.w	r6, r8, #2
 800ef04:	3e01      	subs	r6, #1
 800ef06:	4638      	mov	r0, r7
 800ef08:	612e      	str	r6, [r5, #16]
 800ef0a:	4621      	mov	r1, r4
 800ef0c:	f7ff fdd6 	bl	800eabc <_Bfree>
 800ef10:	4628      	mov	r0, r5
 800ef12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef16:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	e7c5      	b.n	800eeaa <__lshift+0x4a>
 800ef1e:	3904      	subs	r1, #4
 800ef20:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef24:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef28:	459c      	cmp	ip, r3
 800ef2a:	d8f9      	bhi.n	800ef20 <__lshift+0xc0>
 800ef2c:	e7ea      	b.n	800ef04 <__lshift+0xa4>
 800ef2e:	bf00      	nop
 800ef30:	080116c7 	.word	0x080116c7
 800ef34:	080116e2 	.word	0x080116e2

0800ef38 <__mcmp>:
 800ef38:	b530      	push	{r4, r5, lr}
 800ef3a:	6902      	ldr	r2, [r0, #16]
 800ef3c:	690c      	ldr	r4, [r1, #16]
 800ef3e:	1b12      	subs	r2, r2, r4
 800ef40:	d10e      	bne.n	800ef60 <__mcmp+0x28>
 800ef42:	f100 0314 	add.w	r3, r0, #20
 800ef46:	3114      	adds	r1, #20
 800ef48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ef4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ef50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ef54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ef58:	42a5      	cmp	r5, r4
 800ef5a:	d003      	beq.n	800ef64 <__mcmp+0x2c>
 800ef5c:	d305      	bcc.n	800ef6a <__mcmp+0x32>
 800ef5e:	2201      	movs	r2, #1
 800ef60:	4610      	mov	r0, r2
 800ef62:	bd30      	pop	{r4, r5, pc}
 800ef64:	4283      	cmp	r3, r0
 800ef66:	d3f3      	bcc.n	800ef50 <__mcmp+0x18>
 800ef68:	e7fa      	b.n	800ef60 <__mcmp+0x28>
 800ef6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef6e:	e7f7      	b.n	800ef60 <__mcmp+0x28>

0800ef70 <__mdiff>:
 800ef70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef74:	460c      	mov	r4, r1
 800ef76:	4606      	mov	r6, r0
 800ef78:	4611      	mov	r1, r2
 800ef7a:	4620      	mov	r0, r4
 800ef7c:	4617      	mov	r7, r2
 800ef7e:	f7ff ffdb 	bl	800ef38 <__mcmp>
 800ef82:	1e05      	subs	r5, r0, #0
 800ef84:	d110      	bne.n	800efa8 <__mdiff+0x38>
 800ef86:	4629      	mov	r1, r5
 800ef88:	4630      	mov	r0, r6
 800ef8a:	f7ff fd57 	bl	800ea3c <_Balloc>
 800ef8e:	b930      	cbnz	r0, 800ef9e <__mdiff+0x2e>
 800ef90:	4b39      	ldr	r3, [pc, #228]	; (800f078 <__mdiff+0x108>)
 800ef92:	4602      	mov	r2, r0
 800ef94:	f240 2132 	movw	r1, #562	; 0x232
 800ef98:	4838      	ldr	r0, [pc, #224]	; (800f07c <__mdiff+0x10c>)
 800ef9a:	f7fe fc95 	bl	800d8c8 <__assert_func>
 800ef9e:	2301      	movs	r3, #1
 800efa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800efa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efa8:	bfa4      	itt	ge
 800efaa:	463b      	movge	r3, r7
 800efac:	4627      	movge	r7, r4
 800efae:	4630      	mov	r0, r6
 800efb0:	6879      	ldr	r1, [r7, #4]
 800efb2:	bfa6      	itte	ge
 800efb4:	461c      	movge	r4, r3
 800efb6:	2500      	movge	r5, #0
 800efb8:	2501      	movlt	r5, #1
 800efba:	f7ff fd3f 	bl	800ea3c <_Balloc>
 800efbe:	b920      	cbnz	r0, 800efca <__mdiff+0x5a>
 800efc0:	4b2d      	ldr	r3, [pc, #180]	; (800f078 <__mdiff+0x108>)
 800efc2:	4602      	mov	r2, r0
 800efc4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800efc8:	e7e6      	b.n	800ef98 <__mdiff+0x28>
 800efca:	693e      	ldr	r6, [r7, #16]
 800efcc:	60c5      	str	r5, [r0, #12]
 800efce:	6925      	ldr	r5, [r4, #16]
 800efd0:	f107 0114 	add.w	r1, r7, #20
 800efd4:	f104 0914 	add.w	r9, r4, #20
 800efd8:	f100 0e14 	add.w	lr, r0, #20
 800efdc:	f107 0210 	add.w	r2, r7, #16
 800efe0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800efe4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800efe8:	46f2      	mov	sl, lr
 800efea:	2700      	movs	r7, #0
 800efec:	f859 3b04 	ldr.w	r3, [r9], #4
 800eff0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800eff4:	fa1f f883 	uxth.w	r8, r3
 800eff8:	fa17 f78b 	uxtah	r7, r7, fp
 800effc:	0c1b      	lsrs	r3, r3, #16
 800effe:	eba7 0808 	sub.w	r8, r7, r8
 800f002:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f006:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f00a:	fa1f f888 	uxth.w	r8, r8
 800f00e:	141f      	asrs	r7, r3, #16
 800f010:	454d      	cmp	r5, r9
 800f012:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f016:	f84a 3b04 	str.w	r3, [sl], #4
 800f01a:	d8e7      	bhi.n	800efec <__mdiff+0x7c>
 800f01c:	1b2b      	subs	r3, r5, r4
 800f01e:	3b15      	subs	r3, #21
 800f020:	f023 0303 	bic.w	r3, r3, #3
 800f024:	3304      	adds	r3, #4
 800f026:	3415      	adds	r4, #21
 800f028:	42a5      	cmp	r5, r4
 800f02a:	bf38      	it	cc
 800f02c:	2304      	movcc	r3, #4
 800f02e:	4419      	add	r1, r3
 800f030:	4473      	add	r3, lr
 800f032:	469e      	mov	lr, r3
 800f034:	460d      	mov	r5, r1
 800f036:	4565      	cmp	r5, ip
 800f038:	d30e      	bcc.n	800f058 <__mdiff+0xe8>
 800f03a:	f10c 0203 	add.w	r2, ip, #3
 800f03e:	1a52      	subs	r2, r2, r1
 800f040:	f022 0203 	bic.w	r2, r2, #3
 800f044:	3903      	subs	r1, #3
 800f046:	458c      	cmp	ip, r1
 800f048:	bf38      	it	cc
 800f04a:	2200      	movcc	r2, #0
 800f04c:	441a      	add	r2, r3
 800f04e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f052:	b17b      	cbz	r3, 800f074 <__mdiff+0x104>
 800f054:	6106      	str	r6, [r0, #16]
 800f056:	e7a5      	b.n	800efa4 <__mdiff+0x34>
 800f058:	f855 8b04 	ldr.w	r8, [r5], #4
 800f05c:	fa17 f488 	uxtah	r4, r7, r8
 800f060:	1422      	asrs	r2, r4, #16
 800f062:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f066:	b2a4      	uxth	r4, r4
 800f068:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f06c:	f84e 4b04 	str.w	r4, [lr], #4
 800f070:	1417      	asrs	r7, r2, #16
 800f072:	e7e0      	b.n	800f036 <__mdiff+0xc6>
 800f074:	3e01      	subs	r6, #1
 800f076:	e7ea      	b.n	800f04e <__mdiff+0xde>
 800f078:	080116c7 	.word	0x080116c7
 800f07c:	080116e2 	.word	0x080116e2

0800f080 <__d2b>:
 800f080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f084:	4689      	mov	r9, r1
 800f086:	2101      	movs	r1, #1
 800f088:	ec57 6b10 	vmov	r6, r7, d0
 800f08c:	4690      	mov	r8, r2
 800f08e:	f7ff fcd5 	bl	800ea3c <_Balloc>
 800f092:	4604      	mov	r4, r0
 800f094:	b930      	cbnz	r0, 800f0a4 <__d2b+0x24>
 800f096:	4602      	mov	r2, r0
 800f098:	4b25      	ldr	r3, [pc, #148]	; (800f130 <__d2b+0xb0>)
 800f09a:	4826      	ldr	r0, [pc, #152]	; (800f134 <__d2b+0xb4>)
 800f09c:	f240 310a 	movw	r1, #778	; 0x30a
 800f0a0:	f7fe fc12 	bl	800d8c8 <__assert_func>
 800f0a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f0a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f0ac:	bb35      	cbnz	r5, 800f0fc <__d2b+0x7c>
 800f0ae:	2e00      	cmp	r6, #0
 800f0b0:	9301      	str	r3, [sp, #4]
 800f0b2:	d028      	beq.n	800f106 <__d2b+0x86>
 800f0b4:	4668      	mov	r0, sp
 800f0b6:	9600      	str	r6, [sp, #0]
 800f0b8:	f7ff fd8c 	bl	800ebd4 <__lo0bits>
 800f0bc:	9900      	ldr	r1, [sp, #0]
 800f0be:	b300      	cbz	r0, 800f102 <__d2b+0x82>
 800f0c0:	9a01      	ldr	r2, [sp, #4]
 800f0c2:	f1c0 0320 	rsb	r3, r0, #32
 800f0c6:	fa02 f303 	lsl.w	r3, r2, r3
 800f0ca:	430b      	orrs	r3, r1
 800f0cc:	40c2      	lsrs	r2, r0
 800f0ce:	6163      	str	r3, [r4, #20]
 800f0d0:	9201      	str	r2, [sp, #4]
 800f0d2:	9b01      	ldr	r3, [sp, #4]
 800f0d4:	61a3      	str	r3, [r4, #24]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	bf14      	ite	ne
 800f0da:	2202      	movne	r2, #2
 800f0dc:	2201      	moveq	r2, #1
 800f0de:	6122      	str	r2, [r4, #16]
 800f0e0:	b1d5      	cbz	r5, 800f118 <__d2b+0x98>
 800f0e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f0e6:	4405      	add	r5, r0
 800f0e8:	f8c9 5000 	str.w	r5, [r9]
 800f0ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f0f0:	f8c8 0000 	str.w	r0, [r8]
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	b003      	add	sp, #12
 800f0f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f0fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f100:	e7d5      	b.n	800f0ae <__d2b+0x2e>
 800f102:	6161      	str	r1, [r4, #20]
 800f104:	e7e5      	b.n	800f0d2 <__d2b+0x52>
 800f106:	a801      	add	r0, sp, #4
 800f108:	f7ff fd64 	bl	800ebd4 <__lo0bits>
 800f10c:	9b01      	ldr	r3, [sp, #4]
 800f10e:	6163      	str	r3, [r4, #20]
 800f110:	2201      	movs	r2, #1
 800f112:	6122      	str	r2, [r4, #16]
 800f114:	3020      	adds	r0, #32
 800f116:	e7e3      	b.n	800f0e0 <__d2b+0x60>
 800f118:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f11c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f120:	f8c9 0000 	str.w	r0, [r9]
 800f124:	6918      	ldr	r0, [r3, #16]
 800f126:	f7ff fd35 	bl	800eb94 <__hi0bits>
 800f12a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f12e:	e7df      	b.n	800f0f0 <__d2b+0x70>
 800f130:	080116c7 	.word	0x080116c7
 800f134:	080116e2 	.word	0x080116e2

0800f138 <_calloc_r>:
 800f138:	b513      	push	{r0, r1, r4, lr}
 800f13a:	434a      	muls	r2, r1
 800f13c:	4611      	mov	r1, r2
 800f13e:	9201      	str	r2, [sp, #4]
 800f140:	f7fd fa6a 	bl	800c618 <_malloc_r>
 800f144:	4604      	mov	r4, r0
 800f146:	b118      	cbz	r0, 800f150 <_calloc_r+0x18>
 800f148:	9a01      	ldr	r2, [sp, #4]
 800f14a:	2100      	movs	r1, #0
 800f14c:	f7fc ff8e 	bl	800c06c <memset>
 800f150:	4620      	mov	r0, r4
 800f152:	b002      	add	sp, #8
 800f154:	bd10      	pop	{r4, pc}

0800f156 <_realloc_r>:
 800f156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f158:	4607      	mov	r7, r0
 800f15a:	4614      	mov	r4, r2
 800f15c:	460e      	mov	r6, r1
 800f15e:	b921      	cbnz	r1, 800f16a <_realloc_r+0x14>
 800f160:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f164:	4611      	mov	r1, r2
 800f166:	f7fd ba57 	b.w	800c618 <_malloc_r>
 800f16a:	b922      	cbnz	r2, 800f176 <_realloc_r+0x20>
 800f16c:	f7fd fa04 	bl	800c578 <_free_r>
 800f170:	4625      	mov	r5, r4
 800f172:	4628      	mov	r0, r5
 800f174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f176:	f000 fc45 	bl	800fa04 <_malloc_usable_size_r>
 800f17a:	42a0      	cmp	r0, r4
 800f17c:	d20f      	bcs.n	800f19e <_realloc_r+0x48>
 800f17e:	4621      	mov	r1, r4
 800f180:	4638      	mov	r0, r7
 800f182:	f7fd fa49 	bl	800c618 <_malloc_r>
 800f186:	4605      	mov	r5, r0
 800f188:	2800      	cmp	r0, #0
 800f18a:	d0f2      	beq.n	800f172 <_realloc_r+0x1c>
 800f18c:	4631      	mov	r1, r6
 800f18e:	4622      	mov	r2, r4
 800f190:	f7fc ff44 	bl	800c01c <memcpy>
 800f194:	4631      	mov	r1, r6
 800f196:	4638      	mov	r0, r7
 800f198:	f7fd f9ee 	bl	800c578 <_free_r>
 800f19c:	e7e9      	b.n	800f172 <_realloc_r+0x1c>
 800f19e:	4635      	mov	r5, r6
 800f1a0:	e7e7      	b.n	800f172 <_realloc_r+0x1c>

0800f1a2 <__ssputs_r>:
 800f1a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1a6:	688e      	ldr	r6, [r1, #8]
 800f1a8:	429e      	cmp	r6, r3
 800f1aa:	4682      	mov	sl, r0
 800f1ac:	460c      	mov	r4, r1
 800f1ae:	4690      	mov	r8, r2
 800f1b0:	461f      	mov	r7, r3
 800f1b2:	d838      	bhi.n	800f226 <__ssputs_r+0x84>
 800f1b4:	898a      	ldrh	r2, [r1, #12]
 800f1b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f1ba:	d032      	beq.n	800f222 <__ssputs_r+0x80>
 800f1bc:	6825      	ldr	r5, [r4, #0]
 800f1be:	6909      	ldr	r1, [r1, #16]
 800f1c0:	eba5 0901 	sub.w	r9, r5, r1
 800f1c4:	6965      	ldr	r5, [r4, #20]
 800f1c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f1ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f1ce:	3301      	adds	r3, #1
 800f1d0:	444b      	add	r3, r9
 800f1d2:	106d      	asrs	r5, r5, #1
 800f1d4:	429d      	cmp	r5, r3
 800f1d6:	bf38      	it	cc
 800f1d8:	461d      	movcc	r5, r3
 800f1da:	0553      	lsls	r3, r2, #21
 800f1dc:	d531      	bpl.n	800f242 <__ssputs_r+0xa0>
 800f1de:	4629      	mov	r1, r5
 800f1e0:	f7fd fa1a 	bl	800c618 <_malloc_r>
 800f1e4:	4606      	mov	r6, r0
 800f1e6:	b950      	cbnz	r0, 800f1fe <__ssputs_r+0x5c>
 800f1e8:	230c      	movs	r3, #12
 800f1ea:	f8ca 3000 	str.w	r3, [sl]
 800f1ee:	89a3      	ldrh	r3, [r4, #12]
 800f1f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1f4:	81a3      	strh	r3, [r4, #12]
 800f1f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1fe:	6921      	ldr	r1, [r4, #16]
 800f200:	464a      	mov	r2, r9
 800f202:	f7fc ff0b 	bl	800c01c <memcpy>
 800f206:	89a3      	ldrh	r3, [r4, #12]
 800f208:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f20c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f210:	81a3      	strh	r3, [r4, #12]
 800f212:	6126      	str	r6, [r4, #16]
 800f214:	6165      	str	r5, [r4, #20]
 800f216:	444e      	add	r6, r9
 800f218:	eba5 0509 	sub.w	r5, r5, r9
 800f21c:	6026      	str	r6, [r4, #0]
 800f21e:	60a5      	str	r5, [r4, #8]
 800f220:	463e      	mov	r6, r7
 800f222:	42be      	cmp	r6, r7
 800f224:	d900      	bls.n	800f228 <__ssputs_r+0x86>
 800f226:	463e      	mov	r6, r7
 800f228:	4632      	mov	r2, r6
 800f22a:	6820      	ldr	r0, [r4, #0]
 800f22c:	4641      	mov	r1, r8
 800f22e:	f7fc ff03 	bl	800c038 <memmove>
 800f232:	68a3      	ldr	r3, [r4, #8]
 800f234:	6822      	ldr	r2, [r4, #0]
 800f236:	1b9b      	subs	r3, r3, r6
 800f238:	4432      	add	r2, r6
 800f23a:	60a3      	str	r3, [r4, #8]
 800f23c:	6022      	str	r2, [r4, #0]
 800f23e:	2000      	movs	r0, #0
 800f240:	e7db      	b.n	800f1fa <__ssputs_r+0x58>
 800f242:	462a      	mov	r2, r5
 800f244:	f7ff ff87 	bl	800f156 <_realloc_r>
 800f248:	4606      	mov	r6, r0
 800f24a:	2800      	cmp	r0, #0
 800f24c:	d1e1      	bne.n	800f212 <__ssputs_r+0x70>
 800f24e:	6921      	ldr	r1, [r4, #16]
 800f250:	4650      	mov	r0, sl
 800f252:	f7fd f991 	bl	800c578 <_free_r>
 800f256:	e7c7      	b.n	800f1e8 <__ssputs_r+0x46>

0800f258 <_svfiprintf_r>:
 800f258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f25c:	4698      	mov	r8, r3
 800f25e:	898b      	ldrh	r3, [r1, #12]
 800f260:	061b      	lsls	r3, r3, #24
 800f262:	b09d      	sub	sp, #116	; 0x74
 800f264:	4607      	mov	r7, r0
 800f266:	460d      	mov	r5, r1
 800f268:	4614      	mov	r4, r2
 800f26a:	d50e      	bpl.n	800f28a <_svfiprintf_r+0x32>
 800f26c:	690b      	ldr	r3, [r1, #16]
 800f26e:	b963      	cbnz	r3, 800f28a <_svfiprintf_r+0x32>
 800f270:	2140      	movs	r1, #64	; 0x40
 800f272:	f7fd f9d1 	bl	800c618 <_malloc_r>
 800f276:	6028      	str	r0, [r5, #0]
 800f278:	6128      	str	r0, [r5, #16]
 800f27a:	b920      	cbnz	r0, 800f286 <_svfiprintf_r+0x2e>
 800f27c:	230c      	movs	r3, #12
 800f27e:	603b      	str	r3, [r7, #0]
 800f280:	f04f 30ff 	mov.w	r0, #4294967295
 800f284:	e0d1      	b.n	800f42a <_svfiprintf_r+0x1d2>
 800f286:	2340      	movs	r3, #64	; 0x40
 800f288:	616b      	str	r3, [r5, #20]
 800f28a:	2300      	movs	r3, #0
 800f28c:	9309      	str	r3, [sp, #36]	; 0x24
 800f28e:	2320      	movs	r3, #32
 800f290:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f294:	f8cd 800c 	str.w	r8, [sp, #12]
 800f298:	2330      	movs	r3, #48	; 0x30
 800f29a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f444 <_svfiprintf_r+0x1ec>
 800f29e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f2a2:	f04f 0901 	mov.w	r9, #1
 800f2a6:	4623      	mov	r3, r4
 800f2a8:	469a      	mov	sl, r3
 800f2aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2ae:	b10a      	cbz	r2, 800f2b4 <_svfiprintf_r+0x5c>
 800f2b0:	2a25      	cmp	r2, #37	; 0x25
 800f2b2:	d1f9      	bne.n	800f2a8 <_svfiprintf_r+0x50>
 800f2b4:	ebba 0b04 	subs.w	fp, sl, r4
 800f2b8:	d00b      	beq.n	800f2d2 <_svfiprintf_r+0x7a>
 800f2ba:	465b      	mov	r3, fp
 800f2bc:	4622      	mov	r2, r4
 800f2be:	4629      	mov	r1, r5
 800f2c0:	4638      	mov	r0, r7
 800f2c2:	f7ff ff6e 	bl	800f1a2 <__ssputs_r>
 800f2c6:	3001      	adds	r0, #1
 800f2c8:	f000 80aa 	beq.w	800f420 <_svfiprintf_r+0x1c8>
 800f2cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2ce:	445a      	add	r2, fp
 800f2d0:	9209      	str	r2, [sp, #36]	; 0x24
 800f2d2:	f89a 3000 	ldrb.w	r3, [sl]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	f000 80a2 	beq.w	800f420 <_svfiprintf_r+0x1c8>
 800f2dc:	2300      	movs	r3, #0
 800f2de:	f04f 32ff 	mov.w	r2, #4294967295
 800f2e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2e6:	f10a 0a01 	add.w	sl, sl, #1
 800f2ea:	9304      	str	r3, [sp, #16]
 800f2ec:	9307      	str	r3, [sp, #28]
 800f2ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f2f2:	931a      	str	r3, [sp, #104]	; 0x68
 800f2f4:	4654      	mov	r4, sl
 800f2f6:	2205      	movs	r2, #5
 800f2f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2fc:	4851      	ldr	r0, [pc, #324]	; (800f444 <_svfiprintf_r+0x1ec>)
 800f2fe:	f7f0 ff9f 	bl	8000240 <memchr>
 800f302:	9a04      	ldr	r2, [sp, #16]
 800f304:	b9d8      	cbnz	r0, 800f33e <_svfiprintf_r+0xe6>
 800f306:	06d0      	lsls	r0, r2, #27
 800f308:	bf44      	itt	mi
 800f30a:	2320      	movmi	r3, #32
 800f30c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f310:	0711      	lsls	r1, r2, #28
 800f312:	bf44      	itt	mi
 800f314:	232b      	movmi	r3, #43	; 0x2b
 800f316:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f31a:	f89a 3000 	ldrb.w	r3, [sl]
 800f31e:	2b2a      	cmp	r3, #42	; 0x2a
 800f320:	d015      	beq.n	800f34e <_svfiprintf_r+0xf6>
 800f322:	9a07      	ldr	r2, [sp, #28]
 800f324:	4654      	mov	r4, sl
 800f326:	2000      	movs	r0, #0
 800f328:	f04f 0c0a 	mov.w	ip, #10
 800f32c:	4621      	mov	r1, r4
 800f32e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f332:	3b30      	subs	r3, #48	; 0x30
 800f334:	2b09      	cmp	r3, #9
 800f336:	d94e      	bls.n	800f3d6 <_svfiprintf_r+0x17e>
 800f338:	b1b0      	cbz	r0, 800f368 <_svfiprintf_r+0x110>
 800f33a:	9207      	str	r2, [sp, #28]
 800f33c:	e014      	b.n	800f368 <_svfiprintf_r+0x110>
 800f33e:	eba0 0308 	sub.w	r3, r0, r8
 800f342:	fa09 f303 	lsl.w	r3, r9, r3
 800f346:	4313      	orrs	r3, r2
 800f348:	9304      	str	r3, [sp, #16]
 800f34a:	46a2      	mov	sl, r4
 800f34c:	e7d2      	b.n	800f2f4 <_svfiprintf_r+0x9c>
 800f34e:	9b03      	ldr	r3, [sp, #12]
 800f350:	1d19      	adds	r1, r3, #4
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	9103      	str	r1, [sp, #12]
 800f356:	2b00      	cmp	r3, #0
 800f358:	bfbb      	ittet	lt
 800f35a:	425b      	neglt	r3, r3
 800f35c:	f042 0202 	orrlt.w	r2, r2, #2
 800f360:	9307      	strge	r3, [sp, #28]
 800f362:	9307      	strlt	r3, [sp, #28]
 800f364:	bfb8      	it	lt
 800f366:	9204      	strlt	r2, [sp, #16]
 800f368:	7823      	ldrb	r3, [r4, #0]
 800f36a:	2b2e      	cmp	r3, #46	; 0x2e
 800f36c:	d10c      	bne.n	800f388 <_svfiprintf_r+0x130>
 800f36e:	7863      	ldrb	r3, [r4, #1]
 800f370:	2b2a      	cmp	r3, #42	; 0x2a
 800f372:	d135      	bne.n	800f3e0 <_svfiprintf_r+0x188>
 800f374:	9b03      	ldr	r3, [sp, #12]
 800f376:	1d1a      	adds	r2, r3, #4
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	9203      	str	r2, [sp, #12]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	bfb8      	it	lt
 800f380:	f04f 33ff 	movlt.w	r3, #4294967295
 800f384:	3402      	adds	r4, #2
 800f386:	9305      	str	r3, [sp, #20]
 800f388:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f454 <_svfiprintf_r+0x1fc>
 800f38c:	7821      	ldrb	r1, [r4, #0]
 800f38e:	2203      	movs	r2, #3
 800f390:	4650      	mov	r0, sl
 800f392:	f7f0 ff55 	bl	8000240 <memchr>
 800f396:	b140      	cbz	r0, 800f3aa <_svfiprintf_r+0x152>
 800f398:	2340      	movs	r3, #64	; 0x40
 800f39a:	eba0 000a 	sub.w	r0, r0, sl
 800f39e:	fa03 f000 	lsl.w	r0, r3, r0
 800f3a2:	9b04      	ldr	r3, [sp, #16]
 800f3a4:	4303      	orrs	r3, r0
 800f3a6:	3401      	adds	r4, #1
 800f3a8:	9304      	str	r3, [sp, #16]
 800f3aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3ae:	4826      	ldr	r0, [pc, #152]	; (800f448 <_svfiprintf_r+0x1f0>)
 800f3b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3b4:	2206      	movs	r2, #6
 800f3b6:	f7f0 ff43 	bl	8000240 <memchr>
 800f3ba:	2800      	cmp	r0, #0
 800f3bc:	d038      	beq.n	800f430 <_svfiprintf_r+0x1d8>
 800f3be:	4b23      	ldr	r3, [pc, #140]	; (800f44c <_svfiprintf_r+0x1f4>)
 800f3c0:	bb1b      	cbnz	r3, 800f40a <_svfiprintf_r+0x1b2>
 800f3c2:	9b03      	ldr	r3, [sp, #12]
 800f3c4:	3307      	adds	r3, #7
 800f3c6:	f023 0307 	bic.w	r3, r3, #7
 800f3ca:	3308      	adds	r3, #8
 800f3cc:	9303      	str	r3, [sp, #12]
 800f3ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3d0:	4433      	add	r3, r6
 800f3d2:	9309      	str	r3, [sp, #36]	; 0x24
 800f3d4:	e767      	b.n	800f2a6 <_svfiprintf_r+0x4e>
 800f3d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3da:	460c      	mov	r4, r1
 800f3dc:	2001      	movs	r0, #1
 800f3de:	e7a5      	b.n	800f32c <_svfiprintf_r+0xd4>
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	3401      	adds	r4, #1
 800f3e4:	9305      	str	r3, [sp, #20]
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	f04f 0c0a 	mov.w	ip, #10
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3f2:	3a30      	subs	r2, #48	; 0x30
 800f3f4:	2a09      	cmp	r2, #9
 800f3f6:	d903      	bls.n	800f400 <_svfiprintf_r+0x1a8>
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d0c5      	beq.n	800f388 <_svfiprintf_r+0x130>
 800f3fc:	9105      	str	r1, [sp, #20]
 800f3fe:	e7c3      	b.n	800f388 <_svfiprintf_r+0x130>
 800f400:	fb0c 2101 	mla	r1, ip, r1, r2
 800f404:	4604      	mov	r4, r0
 800f406:	2301      	movs	r3, #1
 800f408:	e7f0      	b.n	800f3ec <_svfiprintf_r+0x194>
 800f40a:	ab03      	add	r3, sp, #12
 800f40c:	9300      	str	r3, [sp, #0]
 800f40e:	462a      	mov	r2, r5
 800f410:	4b0f      	ldr	r3, [pc, #60]	; (800f450 <_svfiprintf_r+0x1f8>)
 800f412:	a904      	add	r1, sp, #16
 800f414:	4638      	mov	r0, r7
 800f416:	f7fd f9f9 	bl	800c80c <_printf_float>
 800f41a:	1c42      	adds	r2, r0, #1
 800f41c:	4606      	mov	r6, r0
 800f41e:	d1d6      	bne.n	800f3ce <_svfiprintf_r+0x176>
 800f420:	89ab      	ldrh	r3, [r5, #12]
 800f422:	065b      	lsls	r3, r3, #25
 800f424:	f53f af2c 	bmi.w	800f280 <_svfiprintf_r+0x28>
 800f428:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f42a:	b01d      	add	sp, #116	; 0x74
 800f42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f430:	ab03      	add	r3, sp, #12
 800f432:	9300      	str	r3, [sp, #0]
 800f434:	462a      	mov	r2, r5
 800f436:	4b06      	ldr	r3, [pc, #24]	; (800f450 <_svfiprintf_r+0x1f8>)
 800f438:	a904      	add	r1, sp, #16
 800f43a:	4638      	mov	r0, r7
 800f43c:	f7fd fc8a 	bl	800cd54 <_printf_i>
 800f440:	e7eb      	b.n	800f41a <_svfiprintf_r+0x1c2>
 800f442:	bf00      	nop
 800f444:	08011844 	.word	0x08011844
 800f448:	0801184e 	.word	0x0801184e
 800f44c:	0800c80d 	.word	0x0800c80d
 800f450:	0800f1a3 	.word	0x0800f1a3
 800f454:	0801184a 	.word	0x0801184a

0800f458 <__sfputc_r>:
 800f458:	6893      	ldr	r3, [r2, #8]
 800f45a:	3b01      	subs	r3, #1
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	b410      	push	{r4}
 800f460:	6093      	str	r3, [r2, #8]
 800f462:	da08      	bge.n	800f476 <__sfputc_r+0x1e>
 800f464:	6994      	ldr	r4, [r2, #24]
 800f466:	42a3      	cmp	r3, r4
 800f468:	db01      	blt.n	800f46e <__sfputc_r+0x16>
 800f46a:	290a      	cmp	r1, #10
 800f46c:	d103      	bne.n	800f476 <__sfputc_r+0x1e>
 800f46e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f472:	f000 b989 	b.w	800f788 <__swbuf_r>
 800f476:	6813      	ldr	r3, [r2, #0]
 800f478:	1c58      	adds	r0, r3, #1
 800f47a:	6010      	str	r0, [r2, #0]
 800f47c:	7019      	strb	r1, [r3, #0]
 800f47e:	4608      	mov	r0, r1
 800f480:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f484:	4770      	bx	lr

0800f486 <__sfputs_r>:
 800f486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f488:	4606      	mov	r6, r0
 800f48a:	460f      	mov	r7, r1
 800f48c:	4614      	mov	r4, r2
 800f48e:	18d5      	adds	r5, r2, r3
 800f490:	42ac      	cmp	r4, r5
 800f492:	d101      	bne.n	800f498 <__sfputs_r+0x12>
 800f494:	2000      	movs	r0, #0
 800f496:	e007      	b.n	800f4a8 <__sfputs_r+0x22>
 800f498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f49c:	463a      	mov	r2, r7
 800f49e:	4630      	mov	r0, r6
 800f4a0:	f7ff ffda 	bl	800f458 <__sfputc_r>
 800f4a4:	1c43      	adds	r3, r0, #1
 800f4a6:	d1f3      	bne.n	800f490 <__sfputs_r+0xa>
 800f4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f4ac <_vfiprintf_r>:
 800f4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4b0:	460d      	mov	r5, r1
 800f4b2:	b09d      	sub	sp, #116	; 0x74
 800f4b4:	4614      	mov	r4, r2
 800f4b6:	4698      	mov	r8, r3
 800f4b8:	4606      	mov	r6, r0
 800f4ba:	b118      	cbz	r0, 800f4c4 <_vfiprintf_r+0x18>
 800f4bc:	6983      	ldr	r3, [r0, #24]
 800f4be:	b90b      	cbnz	r3, 800f4c4 <_vfiprintf_r+0x18>
 800f4c0:	f7fc fbb8 	bl	800bc34 <__sinit>
 800f4c4:	4b89      	ldr	r3, [pc, #548]	; (800f6ec <_vfiprintf_r+0x240>)
 800f4c6:	429d      	cmp	r5, r3
 800f4c8:	d11b      	bne.n	800f502 <_vfiprintf_r+0x56>
 800f4ca:	6875      	ldr	r5, [r6, #4]
 800f4cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4ce:	07d9      	lsls	r1, r3, #31
 800f4d0:	d405      	bmi.n	800f4de <_vfiprintf_r+0x32>
 800f4d2:	89ab      	ldrh	r3, [r5, #12]
 800f4d4:	059a      	lsls	r2, r3, #22
 800f4d6:	d402      	bmi.n	800f4de <_vfiprintf_r+0x32>
 800f4d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4da:	f7fc fd8b 	bl	800bff4 <__retarget_lock_acquire_recursive>
 800f4de:	89ab      	ldrh	r3, [r5, #12]
 800f4e0:	071b      	lsls	r3, r3, #28
 800f4e2:	d501      	bpl.n	800f4e8 <_vfiprintf_r+0x3c>
 800f4e4:	692b      	ldr	r3, [r5, #16]
 800f4e6:	b9eb      	cbnz	r3, 800f524 <_vfiprintf_r+0x78>
 800f4e8:	4629      	mov	r1, r5
 800f4ea:	4630      	mov	r0, r6
 800f4ec:	f000 f9ac 	bl	800f848 <__swsetup_r>
 800f4f0:	b1c0      	cbz	r0, 800f524 <_vfiprintf_r+0x78>
 800f4f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4f4:	07dc      	lsls	r4, r3, #31
 800f4f6:	d50e      	bpl.n	800f516 <_vfiprintf_r+0x6a>
 800f4f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f4fc:	b01d      	add	sp, #116	; 0x74
 800f4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f502:	4b7b      	ldr	r3, [pc, #492]	; (800f6f0 <_vfiprintf_r+0x244>)
 800f504:	429d      	cmp	r5, r3
 800f506:	d101      	bne.n	800f50c <_vfiprintf_r+0x60>
 800f508:	68b5      	ldr	r5, [r6, #8]
 800f50a:	e7df      	b.n	800f4cc <_vfiprintf_r+0x20>
 800f50c:	4b79      	ldr	r3, [pc, #484]	; (800f6f4 <_vfiprintf_r+0x248>)
 800f50e:	429d      	cmp	r5, r3
 800f510:	bf08      	it	eq
 800f512:	68f5      	ldreq	r5, [r6, #12]
 800f514:	e7da      	b.n	800f4cc <_vfiprintf_r+0x20>
 800f516:	89ab      	ldrh	r3, [r5, #12]
 800f518:	0598      	lsls	r0, r3, #22
 800f51a:	d4ed      	bmi.n	800f4f8 <_vfiprintf_r+0x4c>
 800f51c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f51e:	f7fc fd6b 	bl	800bff8 <__retarget_lock_release_recursive>
 800f522:	e7e9      	b.n	800f4f8 <_vfiprintf_r+0x4c>
 800f524:	2300      	movs	r3, #0
 800f526:	9309      	str	r3, [sp, #36]	; 0x24
 800f528:	2320      	movs	r3, #32
 800f52a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f52e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f532:	2330      	movs	r3, #48	; 0x30
 800f534:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f6f8 <_vfiprintf_r+0x24c>
 800f538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f53c:	f04f 0901 	mov.w	r9, #1
 800f540:	4623      	mov	r3, r4
 800f542:	469a      	mov	sl, r3
 800f544:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f548:	b10a      	cbz	r2, 800f54e <_vfiprintf_r+0xa2>
 800f54a:	2a25      	cmp	r2, #37	; 0x25
 800f54c:	d1f9      	bne.n	800f542 <_vfiprintf_r+0x96>
 800f54e:	ebba 0b04 	subs.w	fp, sl, r4
 800f552:	d00b      	beq.n	800f56c <_vfiprintf_r+0xc0>
 800f554:	465b      	mov	r3, fp
 800f556:	4622      	mov	r2, r4
 800f558:	4629      	mov	r1, r5
 800f55a:	4630      	mov	r0, r6
 800f55c:	f7ff ff93 	bl	800f486 <__sfputs_r>
 800f560:	3001      	adds	r0, #1
 800f562:	f000 80aa 	beq.w	800f6ba <_vfiprintf_r+0x20e>
 800f566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f568:	445a      	add	r2, fp
 800f56a:	9209      	str	r2, [sp, #36]	; 0x24
 800f56c:	f89a 3000 	ldrb.w	r3, [sl]
 800f570:	2b00      	cmp	r3, #0
 800f572:	f000 80a2 	beq.w	800f6ba <_vfiprintf_r+0x20e>
 800f576:	2300      	movs	r3, #0
 800f578:	f04f 32ff 	mov.w	r2, #4294967295
 800f57c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f580:	f10a 0a01 	add.w	sl, sl, #1
 800f584:	9304      	str	r3, [sp, #16]
 800f586:	9307      	str	r3, [sp, #28]
 800f588:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f58c:	931a      	str	r3, [sp, #104]	; 0x68
 800f58e:	4654      	mov	r4, sl
 800f590:	2205      	movs	r2, #5
 800f592:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f596:	4858      	ldr	r0, [pc, #352]	; (800f6f8 <_vfiprintf_r+0x24c>)
 800f598:	f7f0 fe52 	bl	8000240 <memchr>
 800f59c:	9a04      	ldr	r2, [sp, #16]
 800f59e:	b9d8      	cbnz	r0, 800f5d8 <_vfiprintf_r+0x12c>
 800f5a0:	06d1      	lsls	r1, r2, #27
 800f5a2:	bf44      	itt	mi
 800f5a4:	2320      	movmi	r3, #32
 800f5a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5aa:	0713      	lsls	r3, r2, #28
 800f5ac:	bf44      	itt	mi
 800f5ae:	232b      	movmi	r3, #43	; 0x2b
 800f5b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5b4:	f89a 3000 	ldrb.w	r3, [sl]
 800f5b8:	2b2a      	cmp	r3, #42	; 0x2a
 800f5ba:	d015      	beq.n	800f5e8 <_vfiprintf_r+0x13c>
 800f5bc:	9a07      	ldr	r2, [sp, #28]
 800f5be:	4654      	mov	r4, sl
 800f5c0:	2000      	movs	r0, #0
 800f5c2:	f04f 0c0a 	mov.w	ip, #10
 800f5c6:	4621      	mov	r1, r4
 800f5c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5cc:	3b30      	subs	r3, #48	; 0x30
 800f5ce:	2b09      	cmp	r3, #9
 800f5d0:	d94e      	bls.n	800f670 <_vfiprintf_r+0x1c4>
 800f5d2:	b1b0      	cbz	r0, 800f602 <_vfiprintf_r+0x156>
 800f5d4:	9207      	str	r2, [sp, #28]
 800f5d6:	e014      	b.n	800f602 <_vfiprintf_r+0x156>
 800f5d8:	eba0 0308 	sub.w	r3, r0, r8
 800f5dc:	fa09 f303 	lsl.w	r3, r9, r3
 800f5e0:	4313      	orrs	r3, r2
 800f5e2:	9304      	str	r3, [sp, #16]
 800f5e4:	46a2      	mov	sl, r4
 800f5e6:	e7d2      	b.n	800f58e <_vfiprintf_r+0xe2>
 800f5e8:	9b03      	ldr	r3, [sp, #12]
 800f5ea:	1d19      	adds	r1, r3, #4
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	9103      	str	r1, [sp, #12]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	bfbb      	ittet	lt
 800f5f4:	425b      	neglt	r3, r3
 800f5f6:	f042 0202 	orrlt.w	r2, r2, #2
 800f5fa:	9307      	strge	r3, [sp, #28]
 800f5fc:	9307      	strlt	r3, [sp, #28]
 800f5fe:	bfb8      	it	lt
 800f600:	9204      	strlt	r2, [sp, #16]
 800f602:	7823      	ldrb	r3, [r4, #0]
 800f604:	2b2e      	cmp	r3, #46	; 0x2e
 800f606:	d10c      	bne.n	800f622 <_vfiprintf_r+0x176>
 800f608:	7863      	ldrb	r3, [r4, #1]
 800f60a:	2b2a      	cmp	r3, #42	; 0x2a
 800f60c:	d135      	bne.n	800f67a <_vfiprintf_r+0x1ce>
 800f60e:	9b03      	ldr	r3, [sp, #12]
 800f610:	1d1a      	adds	r2, r3, #4
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	9203      	str	r2, [sp, #12]
 800f616:	2b00      	cmp	r3, #0
 800f618:	bfb8      	it	lt
 800f61a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f61e:	3402      	adds	r4, #2
 800f620:	9305      	str	r3, [sp, #20]
 800f622:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f708 <_vfiprintf_r+0x25c>
 800f626:	7821      	ldrb	r1, [r4, #0]
 800f628:	2203      	movs	r2, #3
 800f62a:	4650      	mov	r0, sl
 800f62c:	f7f0 fe08 	bl	8000240 <memchr>
 800f630:	b140      	cbz	r0, 800f644 <_vfiprintf_r+0x198>
 800f632:	2340      	movs	r3, #64	; 0x40
 800f634:	eba0 000a 	sub.w	r0, r0, sl
 800f638:	fa03 f000 	lsl.w	r0, r3, r0
 800f63c:	9b04      	ldr	r3, [sp, #16]
 800f63e:	4303      	orrs	r3, r0
 800f640:	3401      	adds	r4, #1
 800f642:	9304      	str	r3, [sp, #16]
 800f644:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f648:	482c      	ldr	r0, [pc, #176]	; (800f6fc <_vfiprintf_r+0x250>)
 800f64a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f64e:	2206      	movs	r2, #6
 800f650:	f7f0 fdf6 	bl	8000240 <memchr>
 800f654:	2800      	cmp	r0, #0
 800f656:	d03f      	beq.n	800f6d8 <_vfiprintf_r+0x22c>
 800f658:	4b29      	ldr	r3, [pc, #164]	; (800f700 <_vfiprintf_r+0x254>)
 800f65a:	bb1b      	cbnz	r3, 800f6a4 <_vfiprintf_r+0x1f8>
 800f65c:	9b03      	ldr	r3, [sp, #12]
 800f65e:	3307      	adds	r3, #7
 800f660:	f023 0307 	bic.w	r3, r3, #7
 800f664:	3308      	adds	r3, #8
 800f666:	9303      	str	r3, [sp, #12]
 800f668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f66a:	443b      	add	r3, r7
 800f66c:	9309      	str	r3, [sp, #36]	; 0x24
 800f66e:	e767      	b.n	800f540 <_vfiprintf_r+0x94>
 800f670:	fb0c 3202 	mla	r2, ip, r2, r3
 800f674:	460c      	mov	r4, r1
 800f676:	2001      	movs	r0, #1
 800f678:	e7a5      	b.n	800f5c6 <_vfiprintf_r+0x11a>
 800f67a:	2300      	movs	r3, #0
 800f67c:	3401      	adds	r4, #1
 800f67e:	9305      	str	r3, [sp, #20]
 800f680:	4619      	mov	r1, r3
 800f682:	f04f 0c0a 	mov.w	ip, #10
 800f686:	4620      	mov	r0, r4
 800f688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f68c:	3a30      	subs	r2, #48	; 0x30
 800f68e:	2a09      	cmp	r2, #9
 800f690:	d903      	bls.n	800f69a <_vfiprintf_r+0x1ee>
 800f692:	2b00      	cmp	r3, #0
 800f694:	d0c5      	beq.n	800f622 <_vfiprintf_r+0x176>
 800f696:	9105      	str	r1, [sp, #20]
 800f698:	e7c3      	b.n	800f622 <_vfiprintf_r+0x176>
 800f69a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f69e:	4604      	mov	r4, r0
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	e7f0      	b.n	800f686 <_vfiprintf_r+0x1da>
 800f6a4:	ab03      	add	r3, sp, #12
 800f6a6:	9300      	str	r3, [sp, #0]
 800f6a8:	462a      	mov	r2, r5
 800f6aa:	4b16      	ldr	r3, [pc, #88]	; (800f704 <_vfiprintf_r+0x258>)
 800f6ac:	a904      	add	r1, sp, #16
 800f6ae:	4630      	mov	r0, r6
 800f6b0:	f7fd f8ac 	bl	800c80c <_printf_float>
 800f6b4:	4607      	mov	r7, r0
 800f6b6:	1c78      	adds	r0, r7, #1
 800f6b8:	d1d6      	bne.n	800f668 <_vfiprintf_r+0x1bc>
 800f6ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6bc:	07d9      	lsls	r1, r3, #31
 800f6be:	d405      	bmi.n	800f6cc <_vfiprintf_r+0x220>
 800f6c0:	89ab      	ldrh	r3, [r5, #12]
 800f6c2:	059a      	lsls	r2, r3, #22
 800f6c4:	d402      	bmi.n	800f6cc <_vfiprintf_r+0x220>
 800f6c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6c8:	f7fc fc96 	bl	800bff8 <__retarget_lock_release_recursive>
 800f6cc:	89ab      	ldrh	r3, [r5, #12]
 800f6ce:	065b      	lsls	r3, r3, #25
 800f6d0:	f53f af12 	bmi.w	800f4f8 <_vfiprintf_r+0x4c>
 800f6d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6d6:	e711      	b.n	800f4fc <_vfiprintf_r+0x50>
 800f6d8:	ab03      	add	r3, sp, #12
 800f6da:	9300      	str	r3, [sp, #0]
 800f6dc:	462a      	mov	r2, r5
 800f6de:	4b09      	ldr	r3, [pc, #36]	; (800f704 <_vfiprintf_r+0x258>)
 800f6e0:	a904      	add	r1, sp, #16
 800f6e2:	4630      	mov	r0, r6
 800f6e4:	f7fd fb36 	bl	800cd54 <_printf_i>
 800f6e8:	e7e4      	b.n	800f6b4 <_vfiprintf_r+0x208>
 800f6ea:	bf00      	nop
 800f6ec:	08011334 	.word	0x08011334
 800f6f0:	08011354 	.word	0x08011354
 800f6f4:	08011314 	.word	0x08011314
 800f6f8:	08011844 	.word	0x08011844
 800f6fc:	0801184e 	.word	0x0801184e
 800f700:	0800c80d 	.word	0x0800c80d
 800f704:	0800f487 	.word	0x0800f487
 800f708:	0801184a 	.word	0x0801184a

0800f70c <_read_r>:
 800f70c:	b538      	push	{r3, r4, r5, lr}
 800f70e:	4d07      	ldr	r5, [pc, #28]	; (800f72c <_read_r+0x20>)
 800f710:	4604      	mov	r4, r0
 800f712:	4608      	mov	r0, r1
 800f714:	4611      	mov	r1, r2
 800f716:	2200      	movs	r2, #0
 800f718:	602a      	str	r2, [r5, #0]
 800f71a:	461a      	mov	r2, r3
 800f71c:	f7f2 fa7c 	bl	8001c18 <_read>
 800f720:	1c43      	adds	r3, r0, #1
 800f722:	d102      	bne.n	800f72a <_read_r+0x1e>
 800f724:	682b      	ldr	r3, [r5, #0]
 800f726:	b103      	cbz	r3, 800f72a <_read_r+0x1e>
 800f728:	6023      	str	r3, [r4, #0]
 800f72a:	bd38      	pop	{r3, r4, r5, pc}
 800f72c:	20005098 	.word	0x20005098

0800f730 <siscanf>:
 800f730:	b40e      	push	{r1, r2, r3}
 800f732:	b510      	push	{r4, lr}
 800f734:	b09f      	sub	sp, #124	; 0x7c
 800f736:	ac21      	add	r4, sp, #132	; 0x84
 800f738:	f44f 7101 	mov.w	r1, #516	; 0x204
 800f73c:	f854 2b04 	ldr.w	r2, [r4], #4
 800f740:	9201      	str	r2, [sp, #4]
 800f742:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f746:	9004      	str	r0, [sp, #16]
 800f748:	9008      	str	r0, [sp, #32]
 800f74a:	f7f0 fd6b 	bl	8000224 <strlen>
 800f74e:	4b0c      	ldr	r3, [pc, #48]	; (800f780 <siscanf+0x50>)
 800f750:	9005      	str	r0, [sp, #20]
 800f752:	9009      	str	r0, [sp, #36]	; 0x24
 800f754:	930d      	str	r3, [sp, #52]	; 0x34
 800f756:	480b      	ldr	r0, [pc, #44]	; (800f784 <siscanf+0x54>)
 800f758:	9a01      	ldr	r2, [sp, #4]
 800f75a:	6800      	ldr	r0, [r0, #0]
 800f75c:	9403      	str	r4, [sp, #12]
 800f75e:	2300      	movs	r3, #0
 800f760:	9311      	str	r3, [sp, #68]	; 0x44
 800f762:	9316      	str	r3, [sp, #88]	; 0x58
 800f764:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f768:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f76c:	a904      	add	r1, sp, #16
 800f76e:	4623      	mov	r3, r4
 800f770:	f000 f9aa 	bl	800fac8 <__ssvfiscanf_r>
 800f774:	b01f      	add	sp, #124	; 0x7c
 800f776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f77a:	b003      	add	sp, #12
 800f77c:	4770      	bx	lr
 800f77e:	bf00      	nop
 800f780:	0800d17f 	.word	0x0800d17f
 800f784:	20000020 	.word	0x20000020

0800f788 <__swbuf_r>:
 800f788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f78a:	460e      	mov	r6, r1
 800f78c:	4614      	mov	r4, r2
 800f78e:	4605      	mov	r5, r0
 800f790:	b118      	cbz	r0, 800f79a <__swbuf_r+0x12>
 800f792:	6983      	ldr	r3, [r0, #24]
 800f794:	b90b      	cbnz	r3, 800f79a <__swbuf_r+0x12>
 800f796:	f7fc fa4d 	bl	800bc34 <__sinit>
 800f79a:	4b21      	ldr	r3, [pc, #132]	; (800f820 <__swbuf_r+0x98>)
 800f79c:	429c      	cmp	r4, r3
 800f79e:	d12b      	bne.n	800f7f8 <__swbuf_r+0x70>
 800f7a0:	686c      	ldr	r4, [r5, #4]
 800f7a2:	69a3      	ldr	r3, [r4, #24]
 800f7a4:	60a3      	str	r3, [r4, #8]
 800f7a6:	89a3      	ldrh	r3, [r4, #12]
 800f7a8:	071a      	lsls	r2, r3, #28
 800f7aa:	d52f      	bpl.n	800f80c <__swbuf_r+0x84>
 800f7ac:	6923      	ldr	r3, [r4, #16]
 800f7ae:	b36b      	cbz	r3, 800f80c <__swbuf_r+0x84>
 800f7b0:	6923      	ldr	r3, [r4, #16]
 800f7b2:	6820      	ldr	r0, [r4, #0]
 800f7b4:	1ac0      	subs	r0, r0, r3
 800f7b6:	6963      	ldr	r3, [r4, #20]
 800f7b8:	b2f6      	uxtb	r6, r6
 800f7ba:	4283      	cmp	r3, r0
 800f7bc:	4637      	mov	r7, r6
 800f7be:	dc04      	bgt.n	800f7ca <__swbuf_r+0x42>
 800f7c0:	4621      	mov	r1, r4
 800f7c2:	4628      	mov	r0, r5
 800f7c4:	f7fe ffc2 	bl	800e74c <_fflush_r>
 800f7c8:	bb30      	cbnz	r0, 800f818 <__swbuf_r+0x90>
 800f7ca:	68a3      	ldr	r3, [r4, #8]
 800f7cc:	3b01      	subs	r3, #1
 800f7ce:	60a3      	str	r3, [r4, #8]
 800f7d0:	6823      	ldr	r3, [r4, #0]
 800f7d2:	1c5a      	adds	r2, r3, #1
 800f7d4:	6022      	str	r2, [r4, #0]
 800f7d6:	701e      	strb	r6, [r3, #0]
 800f7d8:	6963      	ldr	r3, [r4, #20]
 800f7da:	3001      	adds	r0, #1
 800f7dc:	4283      	cmp	r3, r0
 800f7de:	d004      	beq.n	800f7ea <__swbuf_r+0x62>
 800f7e0:	89a3      	ldrh	r3, [r4, #12]
 800f7e2:	07db      	lsls	r3, r3, #31
 800f7e4:	d506      	bpl.n	800f7f4 <__swbuf_r+0x6c>
 800f7e6:	2e0a      	cmp	r6, #10
 800f7e8:	d104      	bne.n	800f7f4 <__swbuf_r+0x6c>
 800f7ea:	4621      	mov	r1, r4
 800f7ec:	4628      	mov	r0, r5
 800f7ee:	f7fe ffad 	bl	800e74c <_fflush_r>
 800f7f2:	b988      	cbnz	r0, 800f818 <__swbuf_r+0x90>
 800f7f4:	4638      	mov	r0, r7
 800f7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7f8:	4b0a      	ldr	r3, [pc, #40]	; (800f824 <__swbuf_r+0x9c>)
 800f7fa:	429c      	cmp	r4, r3
 800f7fc:	d101      	bne.n	800f802 <__swbuf_r+0x7a>
 800f7fe:	68ac      	ldr	r4, [r5, #8]
 800f800:	e7cf      	b.n	800f7a2 <__swbuf_r+0x1a>
 800f802:	4b09      	ldr	r3, [pc, #36]	; (800f828 <__swbuf_r+0xa0>)
 800f804:	429c      	cmp	r4, r3
 800f806:	bf08      	it	eq
 800f808:	68ec      	ldreq	r4, [r5, #12]
 800f80a:	e7ca      	b.n	800f7a2 <__swbuf_r+0x1a>
 800f80c:	4621      	mov	r1, r4
 800f80e:	4628      	mov	r0, r5
 800f810:	f000 f81a 	bl	800f848 <__swsetup_r>
 800f814:	2800      	cmp	r0, #0
 800f816:	d0cb      	beq.n	800f7b0 <__swbuf_r+0x28>
 800f818:	f04f 37ff 	mov.w	r7, #4294967295
 800f81c:	e7ea      	b.n	800f7f4 <__swbuf_r+0x6c>
 800f81e:	bf00      	nop
 800f820:	08011334 	.word	0x08011334
 800f824:	08011354 	.word	0x08011354
 800f828:	08011314 	.word	0x08011314

0800f82c <__ascii_wctomb>:
 800f82c:	b149      	cbz	r1, 800f842 <__ascii_wctomb+0x16>
 800f82e:	2aff      	cmp	r2, #255	; 0xff
 800f830:	bf85      	ittet	hi
 800f832:	238a      	movhi	r3, #138	; 0x8a
 800f834:	6003      	strhi	r3, [r0, #0]
 800f836:	700a      	strbls	r2, [r1, #0]
 800f838:	f04f 30ff 	movhi.w	r0, #4294967295
 800f83c:	bf98      	it	ls
 800f83e:	2001      	movls	r0, #1
 800f840:	4770      	bx	lr
 800f842:	4608      	mov	r0, r1
 800f844:	4770      	bx	lr
	...

0800f848 <__swsetup_r>:
 800f848:	4b32      	ldr	r3, [pc, #200]	; (800f914 <__swsetup_r+0xcc>)
 800f84a:	b570      	push	{r4, r5, r6, lr}
 800f84c:	681d      	ldr	r5, [r3, #0]
 800f84e:	4606      	mov	r6, r0
 800f850:	460c      	mov	r4, r1
 800f852:	b125      	cbz	r5, 800f85e <__swsetup_r+0x16>
 800f854:	69ab      	ldr	r3, [r5, #24]
 800f856:	b913      	cbnz	r3, 800f85e <__swsetup_r+0x16>
 800f858:	4628      	mov	r0, r5
 800f85a:	f7fc f9eb 	bl	800bc34 <__sinit>
 800f85e:	4b2e      	ldr	r3, [pc, #184]	; (800f918 <__swsetup_r+0xd0>)
 800f860:	429c      	cmp	r4, r3
 800f862:	d10f      	bne.n	800f884 <__swsetup_r+0x3c>
 800f864:	686c      	ldr	r4, [r5, #4]
 800f866:	89a3      	ldrh	r3, [r4, #12]
 800f868:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f86c:	0719      	lsls	r1, r3, #28
 800f86e:	d42c      	bmi.n	800f8ca <__swsetup_r+0x82>
 800f870:	06dd      	lsls	r5, r3, #27
 800f872:	d411      	bmi.n	800f898 <__swsetup_r+0x50>
 800f874:	2309      	movs	r3, #9
 800f876:	6033      	str	r3, [r6, #0]
 800f878:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f87c:	81a3      	strh	r3, [r4, #12]
 800f87e:	f04f 30ff 	mov.w	r0, #4294967295
 800f882:	e03e      	b.n	800f902 <__swsetup_r+0xba>
 800f884:	4b25      	ldr	r3, [pc, #148]	; (800f91c <__swsetup_r+0xd4>)
 800f886:	429c      	cmp	r4, r3
 800f888:	d101      	bne.n	800f88e <__swsetup_r+0x46>
 800f88a:	68ac      	ldr	r4, [r5, #8]
 800f88c:	e7eb      	b.n	800f866 <__swsetup_r+0x1e>
 800f88e:	4b24      	ldr	r3, [pc, #144]	; (800f920 <__swsetup_r+0xd8>)
 800f890:	429c      	cmp	r4, r3
 800f892:	bf08      	it	eq
 800f894:	68ec      	ldreq	r4, [r5, #12]
 800f896:	e7e6      	b.n	800f866 <__swsetup_r+0x1e>
 800f898:	0758      	lsls	r0, r3, #29
 800f89a:	d512      	bpl.n	800f8c2 <__swsetup_r+0x7a>
 800f89c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f89e:	b141      	cbz	r1, 800f8b2 <__swsetup_r+0x6a>
 800f8a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f8a4:	4299      	cmp	r1, r3
 800f8a6:	d002      	beq.n	800f8ae <__swsetup_r+0x66>
 800f8a8:	4630      	mov	r0, r6
 800f8aa:	f7fc fe65 	bl	800c578 <_free_r>
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	6363      	str	r3, [r4, #52]	; 0x34
 800f8b2:	89a3      	ldrh	r3, [r4, #12]
 800f8b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f8b8:	81a3      	strh	r3, [r4, #12]
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	6063      	str	r3, [r4, #4]
 800f8be:	6923      	ldr	r3, [r4, #16]
 800f8c0:	6023      	str	r3, [r4, #0]
 800f8c2:	89a3      	ldrh	r3, [r4, #12]
 800f8c4:	f043 0308 	orr.w	r3, r3, #8
 800f8c8:	81a3      	strh	r3, [r4, #12]
 800f8ca:	6923      	ldr	r3, [r4, #16]
 800f8cc:	b94b      	cbnz	r3, 800f8e2 <__swsetup_r+0x9a>
 800f8ce:	89a3      	ldrh	r3, [r4, #12]
 800f8d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f8d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8d8:	d003      	beq.n	800f8e2 <__swsetup_r+0x9a>
 800f8da:	4621      	mov	r1, r4
 800f8dc:	4630      	mov	r0, r6
 800f8de:	f000 f851 	bl	800f984 <__smakebuf_r>
 800f8e2:	89a0      	ldrh	r0, [r4, #12]
 800f8e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f8e8:	f010 0301 	ands.w	r3, r0, #1
 800f8ec:	d00a      	beq.n	800f904 <__swsetup_r+0xbc>
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	60a3      	str	r3, [r4, #8]
 800f8f2:	6963      	ldr	r3, [r4, #20]
 800f8f4:	425b      	negs	r3, r3
 800f8f6:	61a3      	str	r3, [r4, #24]
 800f8f8:	6923      	ldr	r3, [r4, #16]
 800f8fa:	b943      	cbnz	r3, 800f90e <__swsetup_r+0xc6>
 800f8fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f900:	d1ba      	bne.n	800f878 <__swsetup_r+0x30>
 800f902:	bd70      	pop	{r4, r5, r6, pc}
 800f904:	0781      	lsls	r1, r0, #30
 800f906:	bf58      	it	pl
 800f908:	6963      	ldrpl	r3, [r4, #20]
 800f90a:	60a3      	str	r3, [r4, #8]
 800f90c:	e7f4      	b.n	800f8f8 <__swsetup_r+0xb0>
 800f90e:	2000      	movs	r0, #0
 800f910:	e7f7      	b.n	800f902 <__swsetup_r+0xba>
 800f912:	bf00      	nop
 800f914:	20000020 	.word	0x20000020
 800f918:	08011334 	.word	0x08011334
 800f91c:	08011354 	.word	0x08011354
 800f920:	08011314 	.word	0x08011314

0800f924 <__env_lock>:
 800f924:	4801      	ldr	r0, [pc, #4]	; (800f92c <__env_lock+0x8>)
 800f926:	f7fc bb65 	b.w	800bff4 <__retarget_lock_acquire_recursive>
 800f92a:	bf00      	nop
 800f92c:	2000508e 	.word	0x2000508e

0800f930 <__env_unlock>:
 800f930:	4801      	ldr	r0, [pc, #4]	; (800f938 <__env_unlock+0x8>)
 800f932:	f7fc bb61 	b.w	800bff8 <__retarget_lock_release_recursive>
 800f936:	bf00      	nop
 800f938:	2000508e 	.word	0x2000508e

0800f93c <__swhatbuf_r>:
 800f93c:	b570      	push	{r4, r5, r6, lr}
 800f93e:	460e      	mov	r6, r1
 800f940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f944:	2900      	cmp	r1, #0
 800f946:	b096      	sub	sp, #88	; 0x58
 800f948:	4614      	mov	r4, r2
 800f94a:	461d      	mov	r5, r3
 800f94c:	da07      	bge.n	800f95e <__swhatbuf_r+0x22>
 800f94e:	2300      	movs	r3, #0
 800f950:	602b      	str	r3, [r5, #0]
 800f952:	89b3      	ldrh	r3, [r6, #12]
 800f954:	061a      	lsls	r2, r3, #24
 800f956:	d410      	bmi.n	800f97a <__swhatbuf_r+0x3e>
 800f958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f95c:	e00e      	b.n	800f97c <__swhatbuf_r+0x40>
 800f95e:	466a      	mov	r2, sp
 800f960:	f000 fbea 	bl	8010138 <_fstat_r>
 800f964:	2800      	cmp	r0, #0
 800f966:	dbf2      	blt.n	800f94e <__swhatbuf_r+0x12>
 800f968:	9a01      	ldr	r2, [sp, #4]
 800f96a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f96e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f972:	425a      	negs	r2, r3
 800f974:	415a      	adcs	r2, r3
 800f976:	602a      	str	r2, [r5, #0]
 800f978:	e7ee      	b.n	800f958 <__swhatbuf_r+0x1c>
 800f97a:	2340      	movs	r3, #64	; 0x40
 800f97c:	2000      	movs	r0, #0
 800f97e:	6023      	str	r3, [r4, #0]
 800f980:	b016      	add	sp, #88	; 0x58
 800f982:	bd70      	pop	{r4, r5, r6, pc}

0800f984 <__smakebuf_r>:
 800f984:	898b      	ldrh	r3, [r1, #12]
 800f986:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f988:	079d      	lsls	r5, r3, #30
 800f98a:	4606      	mov	r6, r0
 800f98c:	460c      	mov	r4, r1
 800f98e:	d507      	bpl.n	800f9a0 <__smakebuf_r+0x1c>
 800f990:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f994:	6023      	str	r3, [r4, #0]
 800f996:	6123      	str	r3, [r4, #16]
 800f998:	2301      	movs	r3, #1
 800f99a:	6163      	str	r3, [r4, #20]
 800f99c:	b002      	add	sp, #8
 800f99e:	bd70      	pop	{r4, r5, r6, pc}
 800f9a0:	ab01      	add	r3, sp, #4
 800f9a2:	466a      	mov	r2, sp
 800f9a4:	f7ff ffca 	bl	800f93c <__swhatbuf_r>
 800f9a8:	9900      	ldr	r1, [sp, #0]
 800f9aa:	4605      	mov	r5, r0
 800f9ac:	4630      	mov	r0, r6
 800f9ae:	f7fc fe33 	bl	800c618 <_malloc_r>
 800f9b2:	b948      	cbnz	r0, 800f9c8 <__smakebuf_r+0x44>
 800f9b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9b8:	059a      	lsls	r2, r3, #22
 800f9ba:	d4ef      	bmi.n	800f99c <__smakebuf_r+0x18>
 800f9bc:	f023 0303 	bic.w	r3, r3, #3
 800f9c0:	f043 0302 	orr.w	r3, r3, #2
 800f9c4:	81a3      	strh	r3, [r4, #12]
 800f9c6:	e7e3      	b.n	800f990 <__smakebuf_r+0xc>
 800f9c8:	4b0d      	ldr	r3, [pc, #52]	; (800fa00 <__smakebuf_r+0x7c>)
 800f9ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800f9cc:	89a3      	ldrh	r3, [r4, #12]
 800f9ce:	6020      	str	r0, [r4, #0]
 800f9d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9d4:	81a3      	strh	r3, [r4, #12]
 800f9d6:	9b00      	ldr	r3, [sp, #0]
 800f9d8:	6163      	str	r3, [r4, #20]
 800f9da:	9b01      	ldr	r3, [sp, #4]
 800f9dc:	6120      	str	r0, [r4, #16]
 800f9de:	b15b      	cbz	r3, 800f9f8 <__smakebuf_r+0x74>
 800f9e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9e4:	4630      	mov	r0, r6
 800f9e6:	f000 fbb9 	bl	801015c <_isatty_r>
 800f9ea:	b128      	cbz	r0, 800f9f8 <__smakebuf_r+0x74>
 800f9ec:	89a3      	ldrh	r3, [r4, #12]
 800f9ee:	f023 0303 	bic.w	r3, r3, #3
 800f9f2:	f043 0301 	orr.w	r3, r3, #1
 800f9f6:	81a3      	strh	r3, [r4, #12]
 800f9f8:	89a0      	ldrh	r0, [r4, #12]
 800f9fa:	4305      	orrs	r5, r0
 800f9fc:	81a5      	strh	r5, [r4, #12]
 800f9fe:	e7cd      	b.n	800f99c <__smakebuf_r+0x18>
 800fa00:	0800bbcd 	.word	0x0800bbcd

0800fa04 <_malloc_usable_size_r>:
 800fa04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa08:	1f18      	subs	r0, r3, #4
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	bfbc      	itt	lt
 800fa0e:	580b      	ldrlt	r3, [r1, r0]
 800fa10:	18c0      	addlt	r0, r0, r3
 800fa12:	4770      	bx	lr

0800fa14 <_sungetc_r>:
 800fa14:	b538      	push	{r3, r4, r5, lr}
 800fa16:	1c4b      	adds	r3, r1, #1
 800fa18:	4614      	mov	r4, r2
 800fa1a:	d103      	bne.n	800fa24 <_sungetc_r+0x10>
 800fa1c:	f04f 35ff 	mov.w	r5, #4294967295
 800fa20:	4628      	mov	r0, r5
 800fa22:	bd38      	pop	{r3, r4, r5, pc}
 800fa24:	8993      	ldrh	r3, [r2, #12]
 800fa26:	f023 0320 	bic.w	r3, r3, #32
 800fa2a:	8193      	strh	r3, [r2, #12]
 800fa2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa2e:	6852      	ldr	r2, [r2, #4]
 800fa30:	b2cd      	uxtb	r5, r1
 800fa32:	b18b      	cbz	r3, 800fa58 <_sungetc_r+0x44>
 800fa34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fa36:	4293      	cmp	r3, r2
 800fa38:	dd08      	ble.n	800fa4c <_sungetc_r+0x38>
 800fa3a:	6823      	ldr	r3, [r4, #0]
 800fa3c:	1e5a      	subs	r2, r3, #1
 800fa3e:	6022      	str	r2, [r4, #0]
 800fa40:	f803 5c01 	strb.w	r5, [r3, #-1]
 800fa44:	6863      	ldr	r3, [r4, #4]
 800fa46:	3301      	adds	r3, #1
 800fa48:	6063      	str	r3, [r4, #4]
 800fa4a:	e7e9      	b.n	800fa20 <_sungetc_r+0xc>
 800fa4c:	4621      	mov	r1, r4
 800fa4e:	f000 fb39 	bl	80100c4 <__submore>
 800fa52:	2800      	cmp	r0, #0
 800fa54:	d0f1      	beq.n	800fa3a <_sungetc_r+0x26>
 800fa56:	e7e1      	b.n	800fa1c <_sungetc_r+0x8>
 800fa58:	6921      	ldr	r1, [r4, #16]
 800fa5a:	6823      	ldr	r3, [r4, #0]
 800fa5c:	b151      	cbz	r1, 800fa74 <_sungetc_r+0x60>
 800fa5e:	4299      	cmp	r1, r3
 800fa60:	d208      	bcs.n	800fa74 <_sungetc_r+0x60>
 800fa62:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800fa66:	42a9      	cmp	r1, r5
 800fa68:	d104      	bne.n	800fa74 <_sungetc_r+0x60>
 800fa6a:	3b01      	subs	r3, #1
 800fa6c:	3201      	adds	r2, #1
 800fa6e:	6023      	str	r3, [r4, #0]
 800fa70:	6062      	str	r2, [r4, #4]
 800fa72:	e7d5      	b.n	800fa20 <_sungetc_r+0xc>
 800fa74:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800fa78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa7c:	6363      	str	r3, [r4, #52]	; 0x34
 800fa7e:	2303      	movs	r3, #3
 800fa80:	63a3      	str	r3, [r4, #56]	; 0x38
 800fa82:	4623      	mov	r3, r4
 800fa84:	f803 5f46 	strb.w	r5, [r3, #70]!
 800fa88:	6023      	str	r3, [r4, #0]
 800fa8a:	2301      	movs	r3, #1
 800fa8c:	e7dc      	b.n	800fa48 <_sungetc_r+0x34>

0800fa8e <__ssrefill_r>:
 800fa8e:	b510      	push	{r4, lr}
 800fa90:	460c      	mov	r4, r1
 800fa92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fa94:	b169      	cbz	r1, 800fab2 <__ssrefill_r+0x24>
 800fa96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa9a:	4299      	cmp	r1, r3
 800fa9c:	d001      	beq.n	800faa2 <__ssrefill_r+0x14>
 800fa9e:	f7fc fd6b 	bl	800c578 <_free_r>
 800faa2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800faa4:	6063      	str	r3, [r4, #4]
 800faa6:	2000      	movs	r0, #0
 800faa8:	6360      	str	r0, [r4, #52]	; 0x34
 800faaa:	b113      	cbz	r3, 800fab2 <__ssrefill_r+0x24>
 800faac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800faae:	6023      	str	r3, [r4, #0]
 800fab0:	bd10      	pop	{r4, pc}
 800fab2:	6923      	ldr	r3, [r4, #16]
 800fab4:	6023      	str	r3, [r4, #0]
 800fab6:	2300      	movs	r3, #0
 800fab8:	6063      	str	r3, [r4, #4]
 800faba:	89a3      	ldrh	r3, [r4, #12]
 800fabc:	f043 0320 	orr.w	r3, r3, #32
 800fac0:	81a3      	strh	r3, [r4, #12]
 800fac2:	f04f 30ff 	mov.w	r0, #4294967295
 800fac6:	e7f3      	b.n	800fab0 <__ssrefill_r+0x22>

0800fac8 <__ssvfiscanf_r>:
 800fac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800facc:	460c      	mov	r4, r1
 800face:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800fad2:	2100      	movs	r1, #0
 800fad4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800fad8:	49b2      	ldr	r1, [pc, #712]	; (800fda4 <__ssvfiscanf_r+0x2dc>)
 800fada:	91a0      	str	r1, [sp, #640]	; 0x280
 800fadc:	f10d 0804 	add.w	r8, sp, #4
 800fae0:	49b1      	ldr	r1, [pc, #708]	; (800fda8 <__ssvfiscanf_r+0x2e0>)
 800fae2:	4fb2      	ldr	r7, [pc, #712]	; (800fdac <__ssvfiscanf_r+0x2e4>)
 800fae4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800fdb0 <__ssvfiscanf_r+0x2e8>
 800fae8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800faec:	4606      	mov	r6, r0
 800faee:	91a1      	str	r1, [sp, #644]	; 0x284
 800faf0:	9300      	str	r3, [sp, #0]
 800faf2:	f892 a000 	ldrb.w	sl, [r2]
 800faf6:	f1ba 0f00 	cmp.w	sl, #0
 800fafa:	f000 8151 	beq.w	800fda0 <__ssvfiscanf_r+0x2d8>
 800fafe:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800fb02:	f013 0308 	ands.w	r3, r3, #8
 800fb06:	f102 0501 	add.w	r5, r2, #1
 800fb0a:	d019      	beq.n	800fb40 <__ssvfiscanf_r+0x78>
 800fb0c:	6863      	ldr	r3, [r4, #4]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	dd0f      	ble.n	800fb32 <__ssvfiscanf_r+0x6a>
 800fb12:	6823      	ldr	r3, [r4, #0]
 800fb14:	781a      	ldrb	r2, [r3, #0]
 800fb16:	5cba      	ldrb	r2, [r7, r2]
 800fb18:	0712      	lsls	r2, r2, #28
 800fb1a:	d401      	bmi.n	800fb20 <__ssvfiscanf_r+0x58>
 800fb1c:	462a      	mov	r2, r5
 800fb1e:	e7e8      	b.n	800faf2 <__ssvfiscanf_r+0x2a>
 800fb20:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fb22:	3201      	adds	r2, #1
 800fb24:	9245      	str	r2, [sp, #276]	; 0x114
 800fb26:	6862      	ldr	r2, [r4, #4]
 800fb28:	3301      	adds	r3, #1
 800fb2a:	3a01      	subs	r2, #1
 800fb2c:	6062      	str	r2, [r4, #4]
 800fb2e:	6023      	str	r3, [r4, #0]
 800fb30:	e7ec      	b.n	800fb0c <__ssvfiscanf_r+0x44>
 800fb32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fb34:	4621      	mov	r1, r4
 800fb36:	4630      	mov	r0, r6
 800fb38:	4798      	blx	r3
 800fb3a:	2800      	cmp	r0, #0
 800fb3c:	d0e9      	beq.n	800fb12 <__ssvfiscanf_r+0x4a>
 800fb3e:	e7ed      	b.n	800fb1c <__ssvfiscanf_r+0x54>
 800fb40:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800fb44:	f040 8083 	bne.w	800fc4e <__ssvfiscanf_r+0x186>
 800fb48:	9341      	str	r3, [sp, #260]	; 0x104
 800fb4a:	9343      	str	r3, [sp, #268]	; 0x10c
 800fb4c:	7853      	ldrb	r3, [r2, #1]
 800fb4e:	2b2a      	cmp	r3, #42	; 0x2a
 800fb50:	bf02      	ittt	eq
 800fb52:	2310      	moveq	r3, #16
 800fb54:	1c95      	addeq	r5, r2, #2
 800fb56:	9341      	streq	r3, [sp, #260]	; 0x104
 800fb58:	220a      	movs	r2, #10
 800fb5a:	46ab      	mov	fp, r5
 800fb5c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800fb60:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800fb64:	2b09      	cmp	r3, #9
 800fb66:	d91d      	bls.n	800fba4 <__ssvfiscanf_r+0xdc>
 800fb68:	4891      	ldr	r0, [pc, #580]	; (800fdb0 <__ssvfiscanf_r+0x2e8>)
 800fb6a:	2203      	movs	r2, #3
 800fb6c:	f7f0 fb68 	bl	8000240 <memchr>
 800fb70:	b140      	cbz	r0, 800fb84 <__ssvfiscanf_r+0xbc>
 800fb72:	2301      	movs	r3, #1
 800fb74:	eba0 0009 	sub.w	r0, r0, r9
 800fb78:	fa03 f000 	lsl.w	r0, r3, r0
 800fb7c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fb7e:	4318      	orrs	r0, r3
 800fb80:	9041      	str	r0, [sp, #260]	; 0x104
 800fb82:	465d      	mov	r5, fp
 800fb84:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fb88:	2b78      	cmp	r3, #120	; 0x78
 800fb8a:	d806      	bhi.n	800fb9a <__ssvfiscanf_r+0xd2>
 800fb8c:	2b57      	cmp	r3, #87	; 0x57
 800fb8e:	d810      	bhi.n	800fbb2 <__ssvfiscanf_r+0xea>
 800fb90:	2b25      	cmp	r3, #37	; 0x25
 800fb92:	d05c      	beq.n	800fc4e <__ssvfiscanf_r+0x186>
 800fb94:	d856      	bhi.n	800fc44 <__ssvfiscanf_r+0x17c>
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d074      	beq.n	800fc84 <__ssvfiscanf_r+0x1bc>
 800fb9a:	2303      	movs	r3, #3
 800fb9c:	9347      	str	r3, [sp, #284]	; 0x11c
 800fb9e:	230a      	movs	r3, #10
 800fba0:	9342      	str	r3, [sp, #264]	; 0x108
 800fba2:	e081      	b.n	800fca8 <__ssvfiscanf_r+0x1e0>
 800fba4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800fba6:	fb02 1303 	mla	r3, r2, r3, r1
 800fbaa:	3b30      	subs	r3, #48	; 0x30
 800fbac:	9343      	str	r3, [sp, #268]	; 0x10c
 800fbae:	465d      	mov	r5, fp
 800fbb0:	e7d3      	b.n	800fb5a <__ssvfiscanf_r+0x92>
 800fbb2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800fbb6:	2a20      	cmp	r2, #32
 800fbb8:	d8ef      	bhi.n	800fb9a <__ssvfiscanf_r+0xd2>
 800fbba:	a101      	add	r1, pc, #4	; (adr r1, 800fbc0 <__ssvfiscanf_r+0xf8>)
 800fbbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fbc0:	0800fc93 	.word	0x0800fc93
 800fbc4:	0800fb9b 	.word	0x0800fb9b
 800fbc8:	0800fb9b 	.word	0x0800fb9b
 800fbcc:	0800fcf1 	.word	0x0800fcf1
 800fbd0:	0800fb9b 	.word	0x0800fb9b
 800fbd4:	0800fb9b 	.word	0x0800fb9b
 800fbd8:	0800fb9b 	.word	0x0800fb9b
 800fbdc:	0800fb9b 	.word	0x0800fb9b
 800fbe0:	0800fb9b 	.word	0x0800fb9b
 800fbe4:	0800fb9b 	.word	0x0800fb9b
 800fbe8:	0800fb9b 	.word	0x0800fb9b
 800fbec:	0800fd07 	.word	0x0800fd07
 800fbf0:	0800fcdd 	.word	0x0800fcdd
 800fbf4:	0800fc4b 	.word	0x0800fc4b
 800fbf8:	0800fc4b 	.word	0x0800fc4b
 800fbfc:	0800fc4b 	.word	0x0800fc4b
 800fc00:	0800fb9b 	.word	0x0800fb9b
 800fc04:	0800fce1 	.word	0x0800fce1
 800fc08:	0800fb9b 	.word	0x0800fb9b
 800fc0c:	0800fb9b 	.word	0x0800fb9b
 800fc10:	0800fb9b 	.word	0x0800fb9b
 800fc14:	0800fb9b 	.word	0x0800fb9b
 800fc18:	0800fd17 	.word	0x0800fd17
 800fc1c:	0800fce9 	.word	0x0800fce9
 800fc20:	0800fc8b 	.word	0x0800fc8b
 800fc24:	0800fb9b 	.word	0x0800fb9b
 800fc28:	0800fb9b 	.word	0x0800fb9b
 800fc2c:	0800fd13 	.word	0x0800fd13
 800fc30:	0800fb9b 	.word	0x0800fb9b
 800fc34:	0800fcdd 	.word	0x0800fcdd
 800fc38:	0800fb9b 	.word	0x0800fb9b
 800fc3c:	0800fb9b 	.word	0x0800fb9b
 800fc40:	0800fc93 	.word	0x0800fc93
 800fc44:	3b45      	subs	r3, #69	; 0x45
 800fc46:	2b02      	cmp	r3, #2
 800fc48:	d8a7      	bhi.n	800fb9a <__ssvfiscanf_r+0xd2>
 800fc4a:	2305      	movs	r3, #5
 800fc4c:	e02b      	b.n	800fca6 <__ssvfiscanf_r+0x1de>
 800fc4e:	6863      	ldr	r3, [r4, #4]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	dd0d      	ble.n	800fc70 <__ssvfiscanf_r+0x1a8>
 800fc54:	6823      	ldr	r3, [r4, #0]
 800fc56:	781a      	ldrb	r2, [r3, #0]
 800fc58:	4552      	cmp	r2, sl
 800fc5a:	f040 80a1 	bne.w	800fda0 <__ssvfiscanf_r+0x2d8>
 800fc5e:	3301      	adds	r3, #1
 800fc60:	6862      	ldr	r2, [r4, #4]
 800fc62:	6023      	str	r3, [r4, #0]
 800fc64:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800fc66:	3a01      	subs	r2, #1
 800fc68:	3301      	adds	r3, #1
 800fc6a:	6062      	str	r2, [r4, #4]
 800fc6c:	9345      	str	r3, [sp, #276]	; 0x114
 800fc6e:	e755      	b.n	800fb1c <__ssvfiscanf_r+0x54>
 800fc70:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fc72:	4621      	mov	r1, r4
 800fc74:	4630      	mov	r0, r6
 800fc76:	4798      	blx	r3
 800fc78:	2800      	cmp	r0, #0
 800fc7a:	d0eb      	beq.n	800fc54 <__ssvfiscanf_r+0x18c>
 800fc7c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fc7e:	2800      	cmp	r0, #0
 800fc80:	f040 8084 	bne.w	800fd8c <__ssvfiscanf_r+0x2c4>
 800fc84:	f04f 30ff 	mov.w	r0, #4294967295
 800fc88:	e086      	b.n	800fd98 <__ssvfiscanf_r+0x2d0>
 800fc8a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fc8c:	f042 0220 	orr.w	r2, r2, #32
 800fc90:	9241      	str	r2, [sp, #260]	; 0x104
 800fc92:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fc94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fc98:	9241      	str	r2, [sp, #260]	; 0x104
 800fc9a:	2210      	movs	r2, #16
 800fc9c:	2b6f      	cmp	r3, #111	; 0x6f
 800fc9e:	9242      	str	r2, [sp, #264]	; 0x108
 800fca0:	bf34      	ite	cc
 800fca2:	2303      	movcc	r3, #3
 800fca4:	2304      	movcs	r3, #4
 800fca6:	9347      	str	r3, [sp, #284]	; 0x11c
 800fca8:	6863      	ldr	r3, [r4, #4]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	dd41      	ble.n	800fd32 <__ssvfiscanf_r+0x26a>
 800fcae:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fcb0:	0659      	lsls	r1, r3, #25
 800fcb2:	d404      	bmi.n	800fcbe <__ssvfiscanf_r+0x1f6>
 800fcb4:	6823      	ldr	r3, [r4, #0]
 800fcb6:	781a      	ldrb	r2, [r3, #0]
 800fcb8:	5cba      	ldrb	r2, [r7, r2]
 800fcba:	0712      	lsls	r2, r2, #28
 800fcbc:	d440      	bmi.n	800fd40 <__ssvfiscanf_r+0x278>
 800fcbe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800fcc0:	2b02      	cmp	r3, #2
 800fcc2:	dc4f      	bgt.n	800fd64 <__ssvfiscanf_r+0x29c>
 800fcc4:	466b      	mov	r3, sp
 800fcc6:	4622      	mov	r2, r4
 800fcc8:	a941      	add	r1, sp, #260	; 0x104
 800fcca:	4630      	mov	r0, r6
 800fccc:	f000 f874 	bl	800fdb8 <_scanf_chars>
 800fcd0:	2801      	cmp	r0, #1
 800fcd2:	d065      	beq.n	800fda0 <__ssvfiscanf_r+0x2d8>
 800fcd4:	2802      	cmp	r0, #2
 800fcd6:	f47f af21 	bne.w	800fb1c <__ssvfiscanf_r+0x54>
 800fcda:	e7cf      	b.n	800fc7c <__ssvfiscanf_r+0x1b4>
 800fcdc:	220a      	movs	r2, #10
 800fcde:	e7dd      	b.n	800fc9c <__ssvfiscanf_r+0x1d4>
 800fce0:	2300      	movs	r3, #0
 800fce2:	9342      	str	r3, [sp, #264]	; 0x108
 800fce4:	2303      	movs	r3, #3
 800fce6:	e7de      	b.n	800fca6 <__ssvfiscanf_r+0x1de>
 800fce8:	2308      	movs	r3, #8
 800fcea:	9342      	str	r3, [sp, #264]	; 0x108
 800fcec:	2304      	movs	r3, #4
 800fcee:	e7da      	b.n	800fca6 <__ssvfiscanf_r+0x1de>
 800fcf0:	4629      	mov	r1, r5
 800fcf2:	4640      	mov	r0, r8
 800fcf4:	f000 f9ac 	bl	8010050 <__sccl>
 800fcf8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fcfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcfe:	9341      	str	r3, [sp, #260]	; 0x104
 800fd00:	4605      	mov	r5, r0
 800fd02:	2301      	movs	r3, #1
 800fd04:	e7cf      	b.n	800fca6 <__ssvfiscanf_r+0x1de>
 800fd06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fd08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd0c:	9341      	str	r3, [sp, #260]	; 0x104
 800fd0e:	2300      	movs	r3, #0
 800fd10:	e7c9      	b.n	800fca6 <__ssvfiscanf_r+0x1de>
 800fd12:	2302      	movs	r3, #2
 800fd14:	e7c7      	b.n	800fca6 <__ssvfiscanf_r+0x1de>
 800fd16:	9841      	ldr	r0, [sp, #260]	; 0x104
 800fd18:	06c3      	lsls	r3, r0, #27
 800fd1a:	f53f aeff 	bmi.w	800fb1c <__ssvfiscanf_r+0x54>
 800fd1e:	9b00      	ldr	r3, [sp, #0]
 800fd20:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fd22:	1d19      	adds	r1, r3, #4
 800fd24:	9100      	str	r1, [sp, #0]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	07c0      	lsls	r0, r0, #31
 800fd2a:	bf4c      	ite	mi
 800fd2c:	801a      	strhmi	r2, [r3, #0]
 800fd2e:	601a      	strpl	r2, [r3, #0]
 800fd30:	e6f4      	b.n	800fb1c <__ssvfiscanf_r+0x54>
 800fd32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fd34:	4621      	mov	r1, r4
 800fd36:	4630      	mov	r0, r6
 800fd38:	4798      	blx	r3
 800fd3a:	2800      	cmp	r0, #0
 800fd3c:	d0b7      	beq.n	800fcae <__ssvfiscanf_r+0x1e6>
 800fd3e:	e79d      	b.n	800fc7c <__ssvfiscanf_r+0x1b4>
 800fd40:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fd42:	3201      	adds	r2, #1
 800fd44:	9245      	str	r2, [sp, #276]	; 0x114
 800fd46:	6862      	ldr	r2, [r4, #4]
 800fd48:	3a01      	subs	r2, #1
 800fd4a:	2a00      	cmp	r2, #0
 800fd4c:	6062      	str	r2, [r4, #4]
 800fd4e:	dd02      	ble.n	800fd56 <__ssvfiscanf_r+0x28e>
 800fd50:	3301      	adds	r3, #1
 800fd52:	6023      	str	r3, [r4, #0]
 800fd54:	e7ae      	b.n	800fcb4 <__ssvfiscanf_r+0x1ec>
 800fd56:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fd58:	4621      	mov	r1, r4
 800fd5a:	4630      	mov	r0, r6
 800fd5c:	4798      	blx	r3
 800fd5e:	2800      	cmp	r0, #0
 800fd60:	d0a8      	beq.n	800fcb4 <__ssvfiscanf_r+0x1ec>
 800fd62:	e78b      	b.n	800fc7c <__ssvfiscanf_r+0x1b4>
 800fd64:	2b04      	cmp	r3, #4
 800fd66:	dc06      	bgt.n	800fd76 <__ssvfiscanf_r+0x2ae>
 800fd68:	466b      	mov	r3, sp
 800fd6a:	4622      	mov	r2, r4
 800fd6c:	a941      	add	r1, sp, #260	; 0x104
 800fd6e:	4630      	mov	r0, r6
 800fd70:	f000 f87a 	bl	800fe68 <_scanf_i>
 800fd74:	e7ac      	b.n	800fcd0 <__ssvfiscanf_r+0x208>
 800fd76:	4b0f      	ldr	r3, [pc, #60]	; (800fdb4 <__ssvfiscanf_r+0x2ec>)
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	f43f aecf 	beq.w	800fb1c <__ssvfiscanf_r+0x54>
 800fd7e:	466b      	mov	r3, sp
 800fd80:	4622      	mov	r2, r4
 800fd82:	a941      	add	r1, sp, #260	; 0x104
 800fd84:	4630      	mov	r0, r6
 800fd86:	f3af 8000 	nop.w
 800fd8a:	e7a1      	b.n	800fcd0 <__ssvfiscanf_r+0x208>
 800fd8c:	89a3      	ldrh	r3, [r4, #12]
 800fd8e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800fd92:	bf18      	it	ne
 800fd94:	f04f 30ff 	movne.w	r0, #4294967295
 800fd98:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800fd9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fda0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fda2:	e7f9      	b.n	800fd98 <__ssvfiscanf_r+0x2d0>
 800fda4:	0800fa15 	.word	0x0800fa15
 800fda8:	0800fa8f 	.word	0x0800fa8f
 800fdac:	0801155b 	.word	0x0801155b
 800fdb0:	0801184a 	.word	0x0801184a
 800fdb4:	00000000 	.word	0x00000000

0800fdb8 <_scanf_chars>:
 800fdb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdbc:	4615      	mov	r5, r2
 800fdbe:	688a      	ldr	r2, [r1, #8]
 800fdc0:	4680      	mov	r8, r0
 800fdc2:	460c      	mov	r4, r1
 800fdc4:	b932      	cbnz	r2, 800fdd4 <_scanf_chars+0x1c>
 800fdc6:	698a      	ldr	r2, [r1, #24]
 800fdc8:	2a00      	cmp	r2, #0
 800fdca:	bf0c      	ite	eq
 800fdcc:	2201      	moveq	r2, #1
 800fdce:	f04f 32ff 	movne.w	r2, #4294967295
 800fdd2:	608a      	str	r2, [r1, #8]
 800fdd4:	6822      	ldr	r2, [r4, #0]
 800fdd6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800fe64 <_scanf_chars+0xac>
 800fdda:	06d1      	lsls	r1, r2, #27
 800fddc:	bf5f      	itttt	pl
 800fdde:	681a      	ldrpl	r2, [r3, #0]
 800fde0:	1d11      	addpl	r1, r2, #4
 800fde2:	6019      	strpl	r1, [r3, #0]
 800fde4:	6816      	ldrpl	r6, [r2, #0]
 800fde6:	2700      	movs	r7, #0
 800fde8:	69a0      	ldr	r0, [r4, #24]
 800fdea:	b188      	cbz	r0, 800fe10 <_scanf_chars+0x58>
 800fdec:	2801      	cmp	r0, #1
 800fdee:	d107      	bne.n	800fe00 <_scanf_chars+0x48>
 800fdf0:	682b      	ldr	r3, [r5, #0]
 800fdf2:	781a      	ldrb	r2, [r3, #0]
 800fdf4:	6963      	ldr	r3, [r4, #20]
 800fdf6:	5c9b      	ldrb	r3, [r3, r2]
 800fdf8:	b953      	cbnz	r3, 800fe10 <_scanf_chars+0x58>
 800fdfa:	bb27      	cbnz	r7, 800fe46 <_scanf_chars+0x8e>
 800fdfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe00:	2802      	cmp	r0, #2
 800fe02:	d120      	bne.n	800fe46 <_scanf_chars+0x8e>
 800fe04:	682b      	ldr	r3, [r5, #0]
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	f813 3009 	ldrb.w	r3, [r3, r9]
 800fe0c:	071b      	lsls	r3, r3, #28
 800fe0e:	d41a      	bmi.n	800fe46 <_scanf_chars+0x8e>
 800fe10:	6823      	ldr	r3, [r4, #0]
 800fe12:	06da      	lsls	r2, r3, #27
 800fe14:	bf5e      	ittt	pl
 800fe16:	682b      	ldrpl	r3, [r5, #0]
 800fe18:	781b      	ldrbpl	r3, [r3, #0]
 800fe1a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800fe1e:	682a      	ldr	r2, [r5, #0]
 800fe20:	686b      	ldr	r3, [r5, #4]
 800fe22:	3201      	adds	r2, #1
 800fe24:	602a      	str	r2, [r5, #0]
 800fe26:	68a2      	ldr	r2, [r4, #8]
 800fe28:	3b01      	subs	r3, #1
 800fe2a:	3a01      	subs	r2, #1
 800fe2c:	606b      	str	r3, [r5, #4]
 800fe2e:	3701      	adds	r7, #1
 800fe30:	60a2      	str	r2, [r4, #8]
 800fe32:	b142      	cbz	r2, 800fe46 <_scanf_chars+0x8e>
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	dcd7      	bgt.n	800fde8 <_scanf_chars+0x30>
 800fe38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fe3c:	4629      	mov	r1, r5
 800fe3e:	4640      	mov	r0, r8
 800fe40:	4798      	blx	r3
 800fe42:	2800      	cmp	r0, #0
 800fe44:	d0d0      	beq.n	800fde8 <_scanf_chars+0x30>
 800fe46:	6823      	ldr	r3, [r4, #0]
 800fe48:	f013 0310 	ands.w	r3, r3, #16
 800fe4c:	d105      	bne.n	800fe5a <_scanf_chars+0xa2>
 800fe4e:	68e2      	ldr	r2, [r4, #12]
 800fe50:	3201      	adds	r2, #1
 800fe52:	60e2      	str	r2, [r4, #12]
 800fe54:	69a2      	ldr	r2, [r4, #24]
 800fe56:	b102      	cbz	r2, 800fe5a <_scanf_chars+0xa2>
 800fe58:	7033      	strb	r3, [r6, #0]
 800fe5a:	6923      	ldr	r3, [r4, #16]
 800fe5c:	441f      	add	r7, r3
 800fe5e:	6127      	str	r7, [r4, #16]
 800fe60:	2000      	movs	r0, #0
 800fe62:	e7cb      	b.n	800fdfc <_scanf_chars+0x44>
 800fe64:	0801155b 	.word	0x0801155b

0800fe68 <_scanf_i>:
 800fe68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe6c:	4698      	mov	r8, r3
 800fe6e:	4b74      	ldr	r3, [pc, #464]	; (8010040 <_scanf_i+0x1d8>)
 800fe70:	460c      	mov	r4, r1
 800fe72:	4682      	mov	sl, r0
 800fe74:	4616      	mov	r6, r2
 800fe76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fe7a:	b087      	sub	sp, #28
 800fe7c:	ab03      	add	r3, sp, #12
 800fe7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fe82:	4b70      	ldr	r3, [pc, #448]	; (8010044 <_scanf_i+0x1dc>)
 800fe84:	69a1      	ldr	r1, [r4, #24]
 800fe86:	4a70      	ldr	r2, [pc, #448]	; (8010048 <_scanf_i+0x1e0>)
 800fe88:	2903      	cmp	r1, #3
 800fe8a:	bf18      	it	ne
 800fe8c:	461a      	movne	r2, r3
 800fe8e:	68a3      	ldr	r3, [r4, #8]
 800fe90:	9201      	str	r2, [sp, #4]
 800fe92:	1e5a      	subs	r2, r3, #1
 800fe94:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fe98:	bf88      	it	hi
 800fe9a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fe9e:	4627      	mov	r7, r4
 800fea0:	bf82      	ittt	hi
 800fea2:	eb03 0905 	addhi.w	r9, r3, r5
 800fea6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800feaa:	60a3      	strhi	r3, [r4, #8]
 800feac:	f857 3b1c 	ldr.w	r3, [r7], #28
 800feb0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800feb4:	bf98      	it	ls
 800feb6:	f04f 0900 	movls.w	r9, #0
 800feba:	6023      	str	r3, [r4, #0]
 800febc:	463d      	mov	r5, r7
 800febe:	f04f 0b00 	mov.w	fp, #0
 800fec2:	6831      	ldr	r1, [r6, #0]
 800fec4:	ab03      	add	r3, sp, #12
 800fec6:	7809      	ldrb	r1, [r1, #0]
 800fec8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fecc:	2202      	movs	r2, #2
 800fece:	f7f0 f9b7 	bl	8000240 <memchr>
 800fed2:	b328      	cbz	r0, 800ff20 <_scanf_i+0xb8>
 800fed4:	f1bb 0f01 	cmp.w	fp, #1
 800fed8:	d159      	bne.n	800ff8e <_scanf_i+0x126>
 800feda:	6862      	ldr	r2, [r4, #4]
 800fedc:	b92a      	cbnz	r2, 800feea <_scanf_i+0x82>
 800fede:	6822      	ldr	r2, [r4, #0]
 800fee0:	2308      	movs	r3, #8
 800fee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fee6:	6063      	str	r3, [r4, #4]
 800fee8:	6022      	str	r2, [r4, #0]
 800feea:	6822      	ldr	r2, [r4, #0]
 800feec:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800fef0:	6022      	str	r2, [r4, #0]
 800fef2:	68a2      	ldr	r2, [r4, #8]
 800fef4:	1e51      	subs	r1, r2, #1
 800fef6:	60a1      	str	r1, [r4, #8]
 800fef8:	b192      	cbz	r2, 800ff20 <_scanf_i+0xb8>
 800fefa:	6832      	ldr	r2, [r6, #0]
 800fefc:	1c51      	adds	r1, r2, #1
 800fefe:	6031      	str	r1, [r6, #0]
 800ff00:	7812      	ldrb	r2, [r2, #0]
 800ff02:	f805 2b01 	strb.w	r2, [r5], #1
 800ff06:	6872      	ldr	r2, [r6, #4]
 800ff08:	3a01      	subs	r2, #1
 800ff0a:	2a00      	cmp	r2, #0
 800ff0c:	6072      	str	r2, [r6, #4]
 800ff0e:	dc07      	bgt.n	800ff20 <_scanf_i+0xb8>
 800ff10:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ff14:	4631      	mov	r1, r6
 800ff16:	4650      	mov	r0, sl
 800ff18:	4790      	blx	r2
 800ff1a:	2800      	cmp	r0, #0
 800ff1c:	f040 8085 	bne.w	801002a <_scanf_i+0x1c2>
 800ff20:	f10b 0b01 	add.w	fp, fp, #1
 800ff24:	f1bb 0f03 	cmp.w	fp, #3
 800ff28:	d1cb      	bne.n	800fec2 <_scanf_i+0x5a>
 800ff2a:	6863      	ldr	r3, [r4, #4]
 800ff2c:	b90b      	cbnz	r3, 800ff32 <_scanf_i+0xca>
 800ff2e:	230a      	movs	r3, #10
 800ff30:	6063      	str	r3, [r4, #4]
 800ff32:	6863      	ldr	r3, [r4, #4]
 800ff34:	4945      	ldr	r1, [pc, #276]	; (801004c <_scanf_i+0x1e4>)
 800ff36:	6960      	ldr	r0, [r4, #20]
 800ff38:	1ac9      	subs	r1, r1, r3
 800ff3a:	f000 f889 	bl	8010050 <__sccl>
 800ff3e:	f04f 0b00 	mov.w	fp, #0
 800ff42:	68a3      	ldr	r3, [r4, #8]
 800ff44:	6822      	ldr	r2, [r4, #0]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d03d      	beq.n	800ffc6 <_scanf_i+0x15e>
 800ff4a:	6831      	ldr	r1, [r6, #0]
 800ff4c:	6960      	ldr	r0, [r4, #20]
 800ff4e:	f891 c000 	ldrb.w	ip, [r1]
 800ff52:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ff56:	2800      	cmp	r0, #0
 800ff58:	d035      	beq.n	800ffc6 <_scanf_i+0x15e>
 800ff5a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ff5e:	d124      	bne.n	800ffaa <_scanf_i+0x142>
 800ff60:	0510      	lsls	r0, r2, #20
 800ff62:	d522      	bpl.n	800ffaa <_scanf_i+0x142>
 800ff64:	f10b 0b01 	add.w	fp, fp, #1
 800ff68:	f1b9 0f00 	cmp.w	r9, #0
 800ff6c:	d003      	beq.n	800ff76 <_scanf_i+0x10e>
 800ff6e:	3301      	adds	r3, #1
 800ff70:	f109 39ff 	add.w	r9, r9, #4294967295
 800ff74:	60a3      	str	r3, [r4, #8]
 800ff76:	6873      	ldr	r3, [r6, #4]
 800ff78:	3b01      	subs	r3, #1
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	6073      	str	r3, [r6, #4]
 800ff7e:	dd1b      	ble.n	800ffb8 <_scanf_i+0x150>
 800ff80:	6833      	ldr	r3, [r6, #0]
 800ff82:	3301      	adds	r3, #1
 800ff84:	6033      	str	r3, [r6, #0]
 800ff86:	68a3      	ldr	r3, [r4, #8]
 800ff88:	3b01      	subs	r3, #1
 800ff8a:	60a3      	str	r3, [r4, #8]
 800ff8c:	e7d9      	b.n	800ff42 <_scanf_i+0xda>
 800ff8e:	f1bb 0f02 	cmp.w	fp, #2
 800ff92:	d1ae      	bne.n	800fef2 <_scanf_i+0x8a>
 800ff94:	6822      	ldr	r2, [r4, #0]
 800ff96:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ff9a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ff9e:	d1bf      	bne.n	800ff20 <_scanf_i+0xb8>
 800ffa0:	2310      	movs	r3, #16
 800ffa2:	6063      	str	r3, [r4, #4]
 800ffa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ffa8:	e7a2      	b.n	800fef0 <_scanf_i+0x88>
 800ffaa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ffae:	6022      	str	r2, [r4, #0]
 800ffb0:	780b      	ldrb	r3, [r1, #0]
 800ffb2:	f805 3b01 	strb.w	r3, [r5], #1
 800ffb6:	e7de      	b.n	800ff76 <_scanf_i+0x10e>
 800ffb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ffbc:	4631      	mov	r1, r6
 800ffbe:	4650      	mov	r0, sl
 800ffc0:	4798      	blx	r3
 800ffc2:	2800      	cmp	r0, #0
 800ffc4:	d0df      	beq.n	800ff86 <_scanf_i+0x11e>
 800ffc6:	6823      	ldr	r3, [r4, #0]
 800ffc8:	05d9      	lsls	r1, r3, #23
 800ffca:	d50d      	bpl.n	800ffe8 <_scanf_i+0x180>
 800ffcc:	42bd      	cmp	r5, r7
 800ffce:	d909      	bls.n	800ffe4 <_scanf_i+0x17c>
 800ffd0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ffd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffd8:	4632      	mov	r2, r6
 800ffda:	4650      	mov	r0, sl
 800ffdc:	4798      	blx	r3
 800ffde:	f105 39ff 	add.w	r9, r5, #4294967295
 800ffe2:	464d      	mov	r5, r9
 800ffe4:	42bd      	cmp	r5, r7
 800ffe6:	d028      	beq.n	801003a <_scanf_i+0x1d2>
 800ffe8:	6822      	ldr	r2, [r4, #0]
 800ffea:	f012 0210 	ands.w	r2, r2, #16
 800ffee:	d113      	bne.n	8010018 <_scanf_i+0x1b0>
 800fff0:	702a      	strb	r2, [r5, #0]
 800fff2:	6863      	ldr	r3, [r4, #4]
 800fff4:	9e01      	ldr	r6, [sp, #4]
 800fff6:	4639      	mov	r1, r7
 800fff8:	4650      	mov	r0, sl
 800fffa:	47b0      	blx	r6
 800fffc:	f8d8 3000 	ldr.w	r3, [r8]
 8010000:	6821      	ldr	r1, [r4, #0]
 8010002:	1d1a      	adds	r2, r3, #4
 8010004:	f8c8 2000 	str.w	r2, [r8]
 8010008:	f011 0f20 	tst.w	r1, #32
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	d00f      	beq.n	8010030 <_scanf_i+0x1c8>
 8010010:	6018      	str	r0, [r3, #0]
 8010012:	68e3      	ldr	r3, [r4, #12]
 8010014:	3301      	adds	r3, #1
 8010016:	60e3      	str	r3, [r4, #12]
 8010018:	1bed      	subs	r5, r5, r7
 801001a:	44ab      	add	fp, r5
 801001c:	6925      	ldr	r5, [r4, #16]
 801001e:	445d      	add	r5, fp
 8010020:	6125      	str	r5, [r4, #16]
 8010022:	2000      	movs	r0, #0
 8010024:	b007      	add	sp, #28
 8010026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801002a:	f04f 0b00 	mov.w	fp, #0
 801002e:	e7ca      	b.n	800ffc6 <_scanf_i+0x15e>
 8010030:	07ca      	lsls	r2, r1, #31
 8010032:	bf4c      	ite	mi
 8010034:	8018      	strhmi	r0, [r3, #0]
 8010036:	6018      	strpl	r0, [r3, #0]
 8010038:	e7eb      	b.n	8010012 <_scanf_i+0x1aa>
 801003a:	2001      	movs	r0, #1
 801003c:	e7f2      	b.n	8010024 <_scanf_i+0x1bc>
 801003e:	bf00      	nop
 8010040:	08011204 	.word	0x08011204
 8010044:	0800d421 	.word	0x0800d421
 8010048:	0800d325 	.word	0x0800d325
 801004c:	0801186e 	.word	0x0801186e

08010050 <__sccl>:
 8010050:	b570      	push	{r4, r5, r6, lr}
 8010052:	780b      	ldrb	r3, [r1, #0]
 8010054:	4604      	mov	r4, r0
 8010056:	2b5e      	cmp	r3, #94	; 0x5e
 8010058:	bf0b      	itete	eq
 801005a:	784b      	ldrbeq	r3, [r1, #1]
 801005c:	1c48      	addne	r0, r1, #1
 801005e:	1c88      	addeq	r0, r1, #2
 8010060:	2200      	movne	r2, #0
 8010062:	bf08      	it	eq
 8010064:	2201      	moveq	r2, #1
 8010066:	1e61      	subs	r1, r4, #1
 8010068:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801006c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010070:	42a9      	cmp	r1, r5
 8010072:	d1fb      	bne.n	801006c <__sccl+0x1c>
 8010074:	b90b      	cbnz	r3, 801007a <__sccl+0x2a>
 8010076:	3801      	subs	r0, #1
 8010078:	bd70      	pop	{r4, r5, r6, pc}
 801007a:	f082 0101 	eor.w	r1, r2, #1
 801007e:	54e1      	strb	r1, [r4, r3]
 8010080:	1c42      	adds	r2, r0, #1
 8010082:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8010086:	2d2d      	cmp	r5, #45	; 0x2d
 8010088:	f102 36ff 	add.w	r6, r2, #4294967295
 801008c:	4610      	mov	r0, r2
 801008e:	d006      	beq.n	801009e <__sccl+0x4e>
 8010090:	2d5d      	cmp	r5, #93	; 0x5d
 8010092:	d0f1      	beq.n	8010078 <__sccl+0x28>
 8010094:	b90d      	cbnz	r5, 801009a <__sccl+0x4a>
 8010096:	4630      	mov	r0, r6
 8010098:	e7ee      	b.n	8010078 <__sccl+0x28>
 801009a:	462b      	mov	r3, r5
 801009c:	e7ef      	b.n	801007e <__sccl+0x2e>
 801009e:	7816      	ldrb	r6, [r2, #0]
 80100a0:	2e5d      	cmp	r6, #93	; 0x5d
 80100a2:	d0fa      	beq.n	801009a <__sccl+0x4a>
 80100a4:	42b3      	cmp	r3, r6
 80100a6:	dcf8      	bgt.n	801009a <__sccl+0x4a>
 80100a8:	4618      	mov	r0, r3
 80100aa:	3001      	adds	r0, #1
 80100ac:	4286      	cmp	r6, r0
 80100ae:	5421      	strb	r1, [r4, r0]
 80100b0:	dcfb      	bgt.n	80100aa <__sccl+0x5a>
 80100b2:	43d8      	mvns	r0, r3
 80100b4:	4430      	add	r0, r6
 80100b6:	1c5d      	adds	r5, r3, #1
 80100b8:	42b3      	cmp	r3, r6
 80100ba:	bfa8      	it	ge
 80100bc:	2000      	movge	r0, #0
 80100be:	182b      	adds	r3, r5, r0
 80100c0:	3202      	adds	r2, #2
 80100c2:	e7de      	b.n	8010082 <__sccl+0x32>

080100c4 <__submore>:
 80100c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100c8:	460c      	mov	r4, r1
 80100ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80100cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100d0:	4299      	cmp	r1, r3
 80100d2:	d11d      	bne.n	8010110 <__submore+0x4c>
 80100d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80100d8:	f7fc fa9e 	bl	800c618 <_malloc_r>
 80100dc:	b918      	cbnz	r0, 80100e6 <__submore+0x22>
 80100de:	f04f 30ff 	mov.w	r0, #4294967295
 80100e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100ea:	63a3      	str	r3, [r4, #56]	; 0x38
 80100ec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80100f0:	6360      	str	r0, [r4, #52]	; 0x34
 80100f2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80100f6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80100fa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80100fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010102:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010106:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801010a:	6020      	str	r0, [r4, #0]
 801010c:	2000      	movs	r0, #0
 801010e:	e7e8      	b.n	80100e2 <__submore+0x1e>
 8010110:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010112:	0077      	lsls	r7, r6, #1
 8010114:	463a      	mov	r2, r7
 8010116:	f7ff f81e 	bl	800f156 <_realloc_r>
 801011a:	4605      	mov	r5, r0
 801011c:	2800      	cmp	r0, #0
 801011e:	d0de      	beq.n	80100de <__submore+0x1a>
 8010120:	eb00 0806 	add.w	r8, r0, r6
 8010124:	4601      	mov	r1, r0
 8010126:	4632      	mov	r2, r6
 8010128:	4640      	mov	r0, r8
 801012a:	f7fb ff77 	bl	800c01c <memcpy>
 801012e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010132:	f8c4 8000 	str.w	r8, [r4]
 8010136:	e7e9      	b.n	801010c <__submore+0x48>

08010138 <_fstat_r>:
 8010138:	b538      	push	{r3, r4, r5, lr}
 801013a:	4d07      	ldr	r5, [pc, #28]	; (8010158 <_fstat_r+0x20>)
 801013c:	2300      	movs	r3, #0
 801013e:	4604      	mov	r4, r0
 8010140:	4608      	mov	r0, r1
 8010142:	4611      	mov	r1, r2
 8010144:	602b      	str	r3, [r5, #0]
 8010146:	f7f1 fdac 	bl	8001ca2 <_fstat>
 801014a:	1c43      	adds	r3, r0, #1
 801014c:	d102      	bne.n	8010154 <_fstat_r+0x1c>
 801014e:	682b      	ldr	r3, [r5, #0]
 8010150:	b103      	cbz	r3, 8010154 <_fstat_r+0x1c>
 8010152:	6023      	str	r3, [r4, #0]
 8010154:	bd38      	pop	{r3, r4, r5, pc}
 8010156:	bf00      	nop
 8010158:	20005098 	.word	0x20005098

0801015c <_isatty_r>:
 801015c:	b538      	push	{r3, r4, r5, lr}
 801015e:	4d06      	ldr	r5, [pc, #24]	; (8010178 <_isatty_r+0x1c>)
 8010160:	2300      	movs	r3, #0
 8010162:	4604      	mov	r4, r0
 8010164:	4608      	mov	r0, r1
 8010166:	602b      	str	r3, [r5, #0]
 8010168:	f7f1 fdab 	bl	8001cc2 <_isatty>
 801016c:	1c43      	adds	r3, r0, #1
 801016e:	d102      	bne.n	8010176 <_isatty_r+0x1a>
 8010170:	682b      	ldr	r3, [r5, #0]
 8010172:	b103      	cbz	r3, 8010176 <_isatty_r+0x1a>
 8010174:	6023      	str	r3, [r4, #0]
 8010176:	bd38      	pop	{r3, r4, r5, pc}
 8010178:	20005098 	.word	0x20005098

0801017c <_init>:
 801017c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801017e:	bf00      	nop
 8010180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010182:	bc08      	pop	{r3}
 8010184:	469e      	mov	lr, r3
 8010186:	4770      	bx	lr

08010188 <_fini>:
 8010188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801018a:	bf00      	nop
 801018c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801018e:	bc08      	pop	{r3}
 8010190:	469e      	mov	lr, r3
 8010192:	4770      	bx	lr
