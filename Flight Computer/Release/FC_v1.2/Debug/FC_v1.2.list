
FC_v1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001728  080102c8  080102c8  000202c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119f0  080119f0  00030254  2**0
                  CONTENTS
  4 .ARM          00000008  080119f0  080119f0  000219f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080119f8  080119f8  00030254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080119f8  080119f8  000219f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011a00  08011a00  00021a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000254  20000000  08011a04  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e68  20000254  08011c58  00030254  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200050bc  08011c58  000350bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030254  2**0
                  CONTENTS, READONLY
 12 .debug_info   000420d0  00000000  00000000  00030284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000600f  00000000  00000000  00072354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000028d0  00000000  00000000  00078368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002740  00000000  00000000  0007ac38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b38d  00000000  00000000  0007d378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029628  00000000  00000000  00088705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2f48  00000000  00000000  000b1d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a4c75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c8f4  00000000  00000000  001a4cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000254 	.word	0x20000254
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080102ac 	.word	0x080102ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000258 	.word	0x20000258
 800020c:	080102ac 	.word	0x080102ac

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295
 8000c26:	f000 b9b9 	b.w	8000f9c <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f84d 	bl	8000cd8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f840 	bl	8000cd8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f82f 	bl	8000cd8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f821 	bl	8000cd8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b96e 	b.w	8000f9c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8083 	bne.w	8000dee <__udivmoddi4+0x116>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d947      	bls.n	8000d7e <__udivmoddi4+0xa6>
 8000cee:	fab2 f282 	clz	r2, r2
 8000cf2:	b142      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	f1c2 0020 	rsb	r0, r2, #32
 8000cf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	4097      	lsls	r7, r2
 8000d00:	ea40 0c01 	orr.w	ip, r0, r1
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000d10:	fa1f fe87 	uxth.w	lr, r7
 8000d14:	fb08 c116 	mls	r1, r8, r6, ip
 8000d18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2a:	f080 8119 	bcs.w	8000f60 <__udivmoddi4+0x288>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8116 	bls.w	8000f60 <__udivmoddi4+0x288>
 8000d34:	3e02      	subs	r6, #2
 8000d36:	443b      	add	r3, r7
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d40:	fb08 3310 	mls	r3, r8, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d4c:	45a6      	cmp	lr, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8105 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f240 8102 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d60:	3802      	subs	r0, #2
 8000d62:	443c      	add	r4, r7
 8000d64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d68:	eba4 040e 	sub.w	r4, r4, lr
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	b11d      	cbz	r5, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c5 4300 	strd	r4, r3, [r5]
 8000d78:	4631      	mov	r1, r6
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	b902      	cbnz	r2, 8000d82 <__udivmoddi4+0xaa>
 8000d80:	deff      	udf	#255	; 0xff
 8000d82:	fab2 f282 	clz	r2, r2
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d150      	bne.n	8000e2c <__udivmoddi4+0x154>
 8000d8a:	1bcb      	subs	r3, r1, r7
 8000d8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d90:	fa1f f887 	uxth.w	r8, r7
 8000d94:	2601      	movs	r6, #1
 8000d96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d9a:	0c21      	lsrs	r1, r4, #16
 8000d9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb08 f30c 	mul.w	r3, r8, ip
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000dac:	1879      	adds	r1, r7, r1
 8000dae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0xe2>
 8000db4:	428b      	cmp	r3, r1
 8000db6:	f200 80e9 	bhi.w	8000f8c <__udivmoddi4+0x2b4>
 8000dba:	4684      	mov	ip, r0
 8000dbc:	1ac9      	subs	r1, r1, r3
 8000dbe:	b2a3      	uxth	r3, r4
 8000dc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dcc:	fb08 f800 	mul.w	r8, r8, r0
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x10c>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x10a>
 8000ddc:	45a0      	cmp	r8, r4
 8000dde:	f200 80d9 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000de2:	4618      	mov	r0, r3
 8000de4:	eba4 0408 	sub.w	r4, r4, r8
 8000de8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dec:	e7bf      	b.n	8000d6e <__udivmoddi4+0x96>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0x12e>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80b1 	beq.w	8000f5a <__udivmoddi4+0x282>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x1cc>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0x140>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80b8 	bhi.w	8000f88 <__udivmoddi4+0x2b0>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	468c      	mov	ip, r1
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0a8      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000e26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e2a:	e7a5      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f603 	lsr.w	r6, r0, r3
 8000e34:	4097      	lsls	r7, r2
 8000e36:	fa01 f002 	lsl.w	r0, r1, r2
 8000e3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3e:	40d9      	lsrs	r1, r3
 8000e40:	4330      	orrs	r0, r6
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e48:	fa1f f887 	uxth.w	r8, r7
 8000e4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e54:	fb06 f108 	mul.w	r1, r6, r8
 8000e58:	4299      	cmp	r1, r3
 8000e5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5e:	d909      	bls.n	8000e74 <__udivmoddi4+0x19c>
 8000e60:	18fb      	adds	r3, r7, r3
 8000e62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e66:	f080 808d 	bcs.w	8000f84 <__udivmoddi4+0x2ac>
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	f240 808a 	bls.w	8000f84 <__udivmoddi4+0x2ac>
 8000e70:	3e02      	subs	r6, #2
 8000e72:	443b      	add	r3, r7
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b281      	uxth	r1, r0
 8000e78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e84:	fb00 f308 	mul.w	r3, r0, r8
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x1c4>
 8000e8c:	1879      	adds	r1, r7, r1
 8000e8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e92:	d273      	bcs.n	8000f7c <__udivmoddi4+0x2a4>
 8000e94:	428b      	cmp	r3, r1
 8000e96:	d971      	bls.n	8000f7c <__udivmoddi4+0x2a4>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4439      	add	r1, r7
 8000e9c:	1acb      	subs	r3, r1, r3
 8000e9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ea2:	e778      	b.n	8000d96 <__udivmoddi4+0xbe>
 8000ea4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ea8:	fa03 f406 	lsl.w	r4, r3, r6
 8000eac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eb0:	431c      	orrs	r4, r3
 8000eb2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ebe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	0c3b      	lsrs	r3, r7, #16
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fa1f f884 	uxth.w	r8, r4
 8000ece:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ed2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ed6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eda:	458a      	cmp	sl, r1
 8000edc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x220>
 8000ee6:	1861      	adds	r1, r4, r1
 8000ee8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eec:	d248      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000eee:	458a      	cmp	sl, r1
 8000ef0:	d946      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000ef2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef6:	4421      	add	r1, r4
 8000ef8:	eba1 010a 	sub.w	r1, r1, sl
 8000efc:	b2bf      	uxth	r7, r7
 8000efe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f0a:	fb00 f808 	mul.w	r8, r0, r8
 8000f0e:	45b8      	cmp	r8, r7
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x24a>
 8000f12:	19e7      	adds	r7, r4, r7
 8000f14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f18:	d22e      	bcs.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1a:	45b8      	cmp	r8, r7
 8000f1c:	d92c      	bls.n	8000f78 <__udivmoddi4+0x2a0>
 8000f1e:	3802      	subs	r0, #2
 8000f20:	4427      	add	r7, r4
 8000f22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f26:	eba7 0708 	sub.w	r7, r7, r8
 8000f2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2e:	454f      	cmp	r7, r9
 8000f30:	46c6      	mov	lr, r8
 8000f32:	4649      	mov	r1, r9
 8000f34:	d31a      	bcc.n	8000f6c <__udivmoddi4+0x294>
 8000f36:	d017      	beq.n	8000f68 <__udivmoddi4+0x290>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x27a>
 8000f3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f46:	40f2      	lsrs	r2, r6
 8000f48:	ea4c 0202 	orr.w	r2, ip, r2
 8000f4c:	40f7      	lsrs	r7, r6
 8000f4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f52:	2600      	movs	r6, #0
 8000f54:	4631      	mov	r1, r6
 8000f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e70b      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e9      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6fd      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f68:	4543      	cmp	r3, r8
 8000f6a:	d2e5      	bcs.n	8000f38 <__udivmoddi4+0x260>
 8000f6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f70:	eb69 0104 	sbc.w	r1, r9, r4
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7df      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e7d2      	b.n	8000f22 <__udivmoddi4+0x24a>
 8000f7c:	4660      	mov	r0, ip
 8000f7e:	e78d      	b.n	8000e9c <__udivmoddi4+0x1c4>
 8000f80:	4681      	mov	r9, r0
 8000f82:	e7b9      	b.n	8000ef8 <__udivmoddi4+0x220>
 8000f84:	4666      	mov	r6, ip
 8000f86:	e775      	b.n	8000e74 <__udivmoddi4+0x19c>
 8000f88:	4630      	mov	r0, r6
 8000f8a:	e74a      	b.n	8000e22 <__udivmoddi4+0x14a>
 8000f8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f90:	4439      	add	r1, r7
 8000f92:	e713      	b.n	8000dbc <__udivmoddi4+0xe4>
 8000f94:	3802      	subs	r0, #2
 8000f96:	443c      	add	r4, r7
 8000f98:	e724      	b.n	8000de4 <__udivmoddi4+0x10c>
 8000f9a:	bf00      	nop

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	b0a3      	sub	sp, #140	; 0x8c
 8000fa4:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa6:	f003 ffc5 	bl	8004f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000faa:	f000 f8ab 	bl	8001104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fae:	f000 f9f1 	bl	8001394 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fb2:	f000 f90b 	bl	80011cc <MX_I2C1_Init>
  MX_RTC_Init();
 8000fb6:	f000 f937 	bl	8001228 <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000fba:	f000 f9c1 	bl	8001340 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  checkForI2CDevices(huart3,hi2c1);
 8000fbe:	4e3d      	ldr	r6, [pc, #244]	; (80010b4 <main+0x114>)
 8000fc0:	4a3d      	ldr	r2, [pc, #244]	; (80010b8 <main+0x118>)
 8000fc2:	ab0d      	add	r3, sp, #52	; 0x34
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	2254      	movs	r2, #84	; 0x54
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f00b f8bf 	bl	800c14c <memcpy>
 8000fce:	466d      	mov	r5, sp
 8000fd0:	f106 0410 	add.w	r4, r6, #16
 8000fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fe0:	6823      	ldr	r3, [r4, #0]
 8000fe2:	602b      	str	r3, [r5, #0]
 8000fe4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000fe8:	f000 fe24 	bl	8001c34 <checkForI2CDevices>

  /*
   * For Iridium:
   * -Set the project as c++
   */
   wakingUp = MRT_Static_Iridium_Setup(huart3);
 8000fec:	4e31      	ldr	r6, [pc, #196]	; (80010b4 <main+0x114>)
 8000fee:	466d      	mov	r5, sp
 8000ff0:	f106 0410 	add.w	r4, r6, #16
 8000ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	602b      	str	r3, [r5, #0]
 8001004:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001008:	f003 f8ae 	bl	8004168 <MRT_Static_Iridium_Setup>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf14      	ite	ne
 8001012:	2301      	movne	r3, #1
 8001014:	2300      	moveq	r3, #0
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <main+0x11c>)
 800101a:	701a      	strb	r2, [r3, #0]

  /*
   * For ISM330DLC
   *-Enable float formatting for sprintf (go to Project->Properties->C/C++ Build->Settings->MCU Settings->Check the box "Use float with printf")
   */
   MRT_ISM330DLC_Setup(&dev_ctx,&hi2c1,&huart3);
 800101c:	4a25      	ldr	r2, [pc, #148]	; (80010b4 <main+0x114>)
 800101e:	4926      	ldr	r1, [pc, #152]	; (80010b8 <main+0x118>)
 8001020:	4827      	ldr	r0, [pc, #156]	; (80010c0 <main+0x120>)
 8001022:	f001 f989 	bl	8002338 <MRT_ISM330DLC_Setup>
   * -Define what you want in the alarms callback functions (check the .h file)
   * -(Optional) Setup alarm A and the clock time in .ioc
   * The rest have been taken care of
   * You can access the flag of both alarm A and B with the variables flagA and flagB
   */
  MRT_SetupRTOS(huart3,10);
 8001026:	4e23      	ldr	r6, [pc, #140]	; (80010b4 <main+0x114>)
 8001028:	230a      	movs	r3, #10
 800102a:	930d      	str	r3, [sp, #52]	; 0x34
 800102c:	466d      	mov	r5, sp
 800102e:	f106 0410 	add.w	r4, r6, #16
 8001032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001036:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001038:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800103c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	602b      	str	r3, [r5, #0]
 8001042:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001046:	f003 fe53 	bl	8004cf0 <MRT_SetupRTOS>

  HAL_UART_Transmit(&huart3,"\r\n\r\nStarting FC\r\n\r\n",19,HAL_MAX_DELAY);
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	2213      	movs	r2, #19
 8001050:	491c      	ldr	r1, [pc, #112]	; (80010c4 <main+0x124>)
 8001052:	4818      	ldr	r0, [pc, #96]	; (80010b4 <main+0x114>)
 8001054:	f007 fcd9 	bl	8008a0a <HAL_UART_Transmit>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001058:	f007 ffe4 	bl	8009024 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Ejection1 */
  Ejection1Handle = osThreadNew(StartEjection1, NULL, &Ejection1_attributes);
 800105c:	4a1a      	ldr	r2, [pc, #104]	; (80010c8 <main+0x128>)
 800105e:	2100      	movs	r1, #0
 8001060:	481a      	ldr	r0, [pc, #104]	; (80010cc <main+0x12c>)
 8001062:	f008 f829 	bl	80090b8 <osThreadNew>
 8001066:	4603      	mov	r3, r0
 8001068:	4a19      	ldr	r2, [pc, #100]	; (80010d0 <main+0x130>)
 800106a:	6013      	str	r3, [r2, #0]

  /* creation of Telemetry2 */
  Telemetry2Handle = osThreadNew(StartTelemetry2, NULL, &Telemetry2_attributes);
 800106c:	4a19      	ldr	r2, [pc, #100]	; (80010d4 <main+0x134>)
 800106e:	2100      	movs	r1, #0
 8001070:	4819      	ldr	r0, [pc, #100]	; (80010d8 <main+0x138>)
 8001072:	f008 f821 	bl	80090b8 <osThreadNew>
 8001076:	4603      	mov	r3, r0
 8001078:	4a18      	ldr	r2, [pc, #96]	; (80010dc <main+0x13c>)
 800107a:	6013      	str	r3, [r2, #0]

  /* creation of Sensors3 */
  Sensors3Handle = osThreadNew(StartSensors3, NULL, &Sensors3_attributes);
 800107c:	4a18      	ldr	r2, [pc, #96]	; (80010e0 <main+0x140>)
 800107e:	2100      	movs	r1, #0
 8001080:	4818      	ldr	r0, [pc, #96]	; (80010e4 <main+0x144>)
 8001082:	f008 f819 	bl	80090b8 <osThreadNew>
 8001086:	4603      	mov	r3, r0
 8001088:	4a17      	ldr	r2, [pc, #92]	; (80010e8 <main+0x148>)
 800108a:	6013      	str	r3, [r2, #0]

  /* creation of Propulsion4 */
  Propulsion4Handle = osThreadNew(StartPropulsion4, NULL, &Propulsion4_attributes);
 800108c:	4a17      	ldr	r2, [pc, #92]	; (80010ec <main+0x14c>)
 800108e:	2100      	movs	r1, #0
 8001090:	4817      	ldr	r0, [pc, #92]	; (80010f0 <main+0x150>)
 8001092:	f008 f811 	bl	80090b8 <osThreadNew>
 8001096:	4603      	mov	r3, r0
 8001098:	4a16      	ldr	r2, [pc, #88]	; (80010f4 <main+0x154>)
 800109a:	6013      	str	r3, [r2, #0]

  /* creation of Memory0 */
  Memory0Handle = osThreadNew(StartMemory0, NULL, &Memory0_attributes);
 800109c:	4a16      	ldr	r2, [pc, #88]	; (80010f8 <main+0x158>)
 800109e:	2100      	movs	r1, #0
 80010a0:	4816      	ldr	r0, [pc, #88]	; (80010fc <main+0x15c>)
 80010a2:	f008 f809 	bl	80090b8 <osThreadNew>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4a15      	ldr	r2, [pc, #84]	; (8001100 <main+0x160>)
 80010aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010ac:	f007 ffde 	bl	800906c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <main+0x110>
 80010b2:	bf00      	nop
 80010b4:	20004eec 	.word	0x20004eec
 80010b8:	20004f44 	.word	0x20004f44
 80010bc:	20004ee8 	.word	0x20004ee8
 80010c0:	20004edc 	.word	0x20004edc
 80010c4:	08010300 	.word	0x08010300
 80010c8:	08011370 	.word	0x08011370
 80010cc:	08001435 	.word	0x08001435
 80010d0:	20004fc4 	.word	0x20004fc4
 80010d4:	08011394 	.word	0x08011394
 80010d8:	08001681 	.word	0x08001681
 80010dc:	20004fcc 	.word	0x20004fcc
 80010e0:	080113b8 	.word	0x080113b8
 80010e4:	080016f9 	.word	0x080016f9
 80010e8:	20004fd0 	.word	0x20004fd0
 80010ec:	080113dc 	.word	0x080113dc
 80010f0:	08001705 	.word	0x08001705
 80010f4:	20004fd4 	.word	0x20004fd4
 80010f8:	08011400 	.word	0x08011400
 80010fc:	08001711 	.word	0x08001711
 8001100:	20004f9c 	.word	0x20004f9c

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b094      	sub	sp, #80	; 0x50
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	2234      	movs	r2, #52	; 0x34
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f00b f842 	bl	800c19c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <SystemClock_Config+0xc0>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	4a24      	ldr	r2, [pc, #144]	; (80011c4 <SystemClock_Config+0xc0>)
 8001132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001136:	6413      	str	r3, [r2, #64]	; 0x40
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <SystemClock_Config+0xc0>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001144:	2300      	movs	r3, #0
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <SystemClock_Config+0xc4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001150:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <SystemClock_Config+0xc4>)
 8001152:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <SystemClock_Config+0xc4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001164:	230a      	movs	r3, #10
 8001166:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800116c:	2301      	movs	r3, #1
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001170:	2310      	movs	r3, #16
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001174:	2301      	movs	r3, #1
 8001176:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001178:	2300      	movs	r3, #0
 800117a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	4618      	mov	r0, r3
 8001182:	f006 f9a1 	bl	80074c8 <HAL_RCC_OscConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800118c:	f000 fad8 	bl	8001740 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001190:	230f      	movs	r3, #15
 8001192:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001194:	2300      	movs	r3, #0
 8001196:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800119c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f005 fb63 	bl	8006878 <HAL_RCC_ClockConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80011b8:	f000 fac2 	bl	8001740 <Error_Handler>
  }
}
 80011bc:	bf00      	nop
 80011be:	3750      	adds	r7, #80	; 0x50
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40007000 	.word	0x40007000

080011cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <MX_I2C1_Init+0x50>)
 80011d2:	4a13      	ldr	r2, [pc, #76]	; (8001220 <MX_I2C1_Init+0x54>)
 80011d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_I2C1_Init+0x50>)
 80011d8:	4a12      	ldr	r2, [pc, #72]	; (8001224 <MX_I2C1_Init+0x58>)
 80011da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_I2C1_Init+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_I2C1_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_I2C1_Init+0x50>)
 80011ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	; (800121c <MX_I2C1_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_I2C1_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	; (800121c <MX_I2C1_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_I2C1_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	; (800121c <MX_I2C1_Init+0x50>)
 800120a:	f004 f9d3 	bl	80055b4 <HAL_I2C_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001214:	f000 fa94 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20004f44 	.word	0x20004f44
 8001220:	40005400 	.word	0x40005400
 8001224:	000186a0 	.word	0x000186a0

08001228 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b090      	sub	sp, #64	; 0x40
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800122e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800123e:	2300      	movs	r3, #0
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001242:	463b      	mov	r3, r7
 8001244:	2228      	movs	r2, #40	; 0x28
 8001246:	2100      	movs	r1, #0
 8001248:	4618      	mov	r0, r3
 800124a:	f00a ffa7 	bl	800c19c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800124e:	4b3a      	ldr	r3, [pc, #232]	; (8001338 <MX_RTC_Init+0x110>)
 8001250:	4a3a      	ldr	r2, [pc, #232]	; (800133c <MX_RTC_Init+0x114>)
 8001252:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001254:	4b38      	ldr	r3, [pc, #224]	; (8001338 <MX_RTC_Init+0x110>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800125a:	4b37      	ldr	r3, [pc, #220]	; (8001338 <MX_RTC_Init+0x110>)
 800125c:	227f      	movs	r2, #127	; 0x7f
 800125e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001260:	4b35      	ldr	r3, [pc, #212]	; (8001338 <MX_RTC_Init+0x110>)
 8001262:	22ff      	movs	r2, #255	; 0xff
 8001264:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001266:	4b34      	ldr	r3, [pc, #208]	; (8001338 <MX_RTC_Init+0x110>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800126c:	4b32      	ldr	r3, [pc, #200]	; (8001338 <MX_RTC_Init+0x110>)
 800126e:	2200      	movs	r2, #0
 8001270:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001272:	4b31      	ldr	r3, [pc, #196]	; (8001338 <MX_RTC_Init+0x110>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001278:	482f      	ldr	r0, [pc, #188]	; (8001338 <MX_RTC_Init+0x110>)
 800127a:	f006 fbc3 	bl	8007a04 <HAL_RTC_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001284:	f000 fa5c 	bl	8001740 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001288:	2300      	movs	r3, #0
 800128a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800128e:	2300      	movs	r3, #0
 8001290:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8001294:	2300      	movs	r3, #0
 8001296:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800129a:	2300      	movs	r3, #0
 800129c:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a6:	2201      	movs	r2, #1
 80012a8:	4619      	mov	r1, r3
 80012aa:	4823      	ldr	r0, [pc, #140]	; (8001338 <MX_RTC_Init+0x110>)
 80012ac:	f006 fc3b 	bl	8007b26 <HAL_RTC_SetTime>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80012b6:	f000 fa43 	bl	8001740 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80012ba:	2301      	movs	r3, #1
 80012bc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80012c0:	2301      	movs	r3, #1
 80012c2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80012d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d6:	2201      	movs	r2, #1
 80012d8:	4619      	mov	r1, r3
 80012da:	4817      	ldr	r0, [pc, #92]	; (8001338 <MX_RTC_Init+0x110>)
 80012dc:	f006 fce0 	bl	8007ca0 <HAL_RTC_SetDate>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80012e6:	f000 fa2b 	bl	8001740 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x30;
 80012f2:	2330      	movs	r3, #48	; 0x30
 80012f4:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800130e:	2301      	movs	r3, #1
 8001310:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001314:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800131a:	463b      	mov	r3, r7
 800131c:	2201      	movs	r2, #1
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_RTC_Init+0x110>)
 8001322:	f006 fd65 	bl	8007df0 <HAL_RTC_SetAlarm_IT>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 800132c:	f000 fa08 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	3740      	adds	r7, #64	; 0x40
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20004fa4 	.word	0x20004fa4
 800133c:	40002800 	.word	0x40002800

08001340 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_USART3_UART_Init+0x4c>)
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <MX_USART3_UART_Init+0x50>)
 8001348:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <MX_USART3_UART_Init+0x4c>)
 800134c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001350:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_USART3_UART_Init+0x4c>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_USART3_UART_Init+0x4c>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <MX_USART3_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_USART3_UART_Init+0x4c>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <MX_USART3_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_USART3_UART_Init+0x4c>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_USART3_UART_Init+0x4c>)
 8001378:	f007 fafa 	bl	8008970 <HAL_UART_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001382:	f000 f9dd 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20004eec 	.word	0x20004eec
 8001390:	40004800 	.word	0x40004800

08001394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	4b1f      	ldr	r3, [pc, #124]	; (800142c <MX_GPIO_Init+0x98>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a1e      	ldr	r2, [pc, #120]	; (800142c <MX_GPIO_Init+0x98>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <MX_GPIO_Init+0x98>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	4b18      	ldr	r3, [pc, #96]	; (800142c <MX_GPIO_Init+0x98>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a17      	ldr	r2, [pc, #92]	; (800142c <MX_GPIO_Init+0x98>)
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <MX_GPIO_Init+0x98>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	603b      	str	r3, [r7, #0]
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <MX_GPIO_Init+0x98>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a10      	ldr	r2, [pc, #64]	; (800142c <MX_GPIO_Init+0x98>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <MX_GPIO_Init+0x98>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILTIN_GPIO_Port, BUILTIN_Pin, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	2120      	movs	r1, #32
 8001402:	480b      	ldr	r0, [pc, #44]	; (8001430 <MX_GPIO_Init+0x9c>)
 8001404:	f004 f8bc 	bl	8005580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BUILTIN_Pin */
  GPIO_InitStruct.Pin = BUILTIN_Pin;
 8001408:	2320      	movs	r3, #32
 800140a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	4619      	mov	r1, r3
 800141e:	4804      	ldr	r0, [pc, #16]	; (8001430 <MX_GPIO_Init+0x9c>)
 8001420:	f003 ff02 	bl	8005228 <HAL_GPIO_Init>

}
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40023800 	.word	0x40023800
 8001430:	40020000 	.word	0x40020000

08001434 <StartEjection1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartEjection1 */
void StartEjection1(void *argument)
{
 8001434:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001438:	b088      	sub	sp, #32
 800143a:	af04      	add	r7, sp, #16
 800143c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	//Add thread id to the list
	threadID[1]=osThreadGetId();
 800143e:	f007 fecd 	bl	80091dc <osThreadGetId>
 8001442:	4603      	mov	r3, r0
 8001444:	4a79      	ldr	r2, [pc, #484]	; (800162c <StartEjection1+0x1f8>)
 8001446:	6053      	str	r3, [r2, #4]

	if (wakingUp) osThreadExit();
 8001448:	4b79      	ldr	r3, [pc, #484]	; (8001630 <StartEjection1+0x1fc>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <StartEjection1+0x20>
 8001450:	f007 fecf 	bl	80091f2 <osThreadExit>

	uint8_t pressure;
	uint8_t altitude;
	char* buffer = (char*) pvPortMalloc(TX_BUF_DIM);
 8001454:	2032      	movs	r0, #50	; 0x32
 8001456:	f00a fa07 	bl	800b868 <pvPortMalloc>
 800145a:	60f8      	str	r0, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	  sensorsPolling = true;
 800145c:	4b75      	ldr	r3, [pc, #468]	; (8001634 <StartEjection1+0x200>)
 800145e:	2201      	movs	r2, #1
 8001460:	701a      	strb	r2, [r3, #0]

	  //https://stackoverflow.com/questions/38782389/freertos-stm32-thread-memory-overflow-with-malloc
	  //https://nadler.com/embedded/newlibAndFreeRTOS.html


	  memset(buffer, 0, TX_BUF_DIM);
 8001462:	2232      	movs	r2, #50	; 0x32
 8001464:	2100      	movs	r1, #0
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f00a fe98 	bl	800c19c <memset>
	  MRT_ISM330DLC_getTemperature(data_raw_temperature,temperature_degC);
 800146c:	4972      	ldr	r1, [pc, #456]	; (8001638 <StartEjection1+0x204>)
 800146e:	4873      	ldr	r0, [pc, #460]	; (800163c <StartEjection1+0x208>)
 8001470:	f001 f824 	bl	80024bc <MRT_ISM330DLC_getTemperature>
	  sprintf((char *)buffer, "Temperature [degC]:%6.2f\r\n", temperature_degC[0] );sprintf((char *)buffer, "Temperature [degC]:%f\r\n", temperature_degC[0] );
 8001474:	4b70      	ldr	r3, [pc, #448]	; (8001638 <StartEjection1+0x204>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f895 	bl	80005a8 <__aeabi_f2d>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	496f      	ldr	r1, [pc, #444]	; (8001640 <StartEjection1+0x20c>)
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f00b fee1 	bl	800d24c <siprintf>
 800148a:	4b6b      	ldr	r3, [pc, #428]	; (8001638 <StartEjection1+0x204>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f88a 	bl	80005a8 <__aeabi_f2d>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	496a      	ldr	r1, [pc, #424]	; (8001644 <StartEjection1+0x210>)
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f00b fed6 	bl	800d24c <siprintf>
	  HAL_UART_Transmit(&huart3, buffer, strlen(buffer), HAL_MAX_DELAY);
 80014a0:	68f8      	ldr	r0, [r7, #12]
 80014a2:	f7fe febf 	bl	8000224 <strlen>
 80014a6:	4603      	mov	r3, r0
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	68f9      	ldr	r1, [r7, #12]
 80014b0:	4865      	ldr	r0, [pc, #404]	; (8001648 <StartEjection1+0x214>)
 80014b2:	f007 faaa 	bl	8008a0a <HAL_UART_Transmit>

	  pressure = ((uint8_t) temperature_degC[0]);
 80014b6:	4b60      	ldr	r3, [pc, #384]	; (8001638 <StartEjection1+0x204>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014c0:	edc7 7a00 	vstr	s15, [r7]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	72fb      	strb	r3, [r7, #11]

	  sensorsPolling = false;
 80014c8:	4b5a      	ldr	r3, [pc, #360]	; (8001634 <StartEjection1+0x200>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]


	  if (MIN_APOGEE <= pressure && MAX_APOGEE > pressure){
 80014ce:	4b5f      	ldr	r3, [pc, #380]	; (800164c <StartEjection1+0x218>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	7afa      	ldrb	r2, [r7, #11]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	f0c0 80a5 	bcc.w	8001624 <StartEjection1+0x1f0>
 80014da:	4b5d      	ldr	r3, [pc, #372]	; (8001650 <StartEjection1+0x21c>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	7afa      	ldrb	r2, [r7, #11]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	f080 809f 	bcs.w	8001624 <StartEjection1+0x1f0>


		  //Eject drogue (PG11/PG12)
		  HAL_UART_Transmit(&huart3, "Eject Drogue\r\n", 15, HAL_MAX_DELAY);
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ea:	220f      	movs	r2, #15
 80014ec:	4959      	ldr	r1, [pc, #356]	; (8001654 <StartEjection1+0x220>)
 80014ee:	4856      	ldr	r0, [pc, #344]	; (8001648 <StartEjection1+0x214>)
 80014f0:	f007 fa8b 	bl	8008a0a <HAL_UART_Transmit>


		  for(;;){

			  memset(buffer, 0, TX_BUF_DIM);
 80014f4:	2232      	movs	r2, #50	; 0x32
 80014f6:	2100      	movs	r1, #0
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f00a fe4f 	bl	800c19c <memset>
			  MRT_ISM330DLC_getAcceleration(data_raw_acceleration,acceleration_mg);
 80014fe:	4956      	ldr	r1, [pc, #344]	; (8001658 <StartEjection1+0x224>)
 8001500:	4856      	ldr	r0, [pc, #344]	; (800165c <StartEjection1+0x228>)
 8001502:	f000 ff95 	bl	8002430 <MRT_ISM330DLC_getAcceleration>
			  sprintf((char *)buffer, "Acceleration [mg]:%4.2f\t%4.2f\t%4.2f\r\n",acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8001506:	4b54      	ldr	r3, [pc, #336]	; (8001658 <StartEjection1+0x224>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f84c 	bl	80005a8 <__aeabi_f2d>
 8001510:	4680      	mov	r8, r0
 8001512:	4689      	mov	r9, r1
 8001514:	4b50      	ldr	r3, [pc, #320]	; (8001658 <StartEjection1+0x224>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff f845 	bl	80005a8 <__aeabi_f2d>
 800151e:	4604      	mov	r4, r0
 8001520:	460d      	mov	r5, r1
 8001522:	4b4d      	ldr	r3, [pc, #308]	; (8001658 <StartEjection1+0x224>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f83e 	bl	80005a8 <__aeabi_f2d>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001534:	e9cd 4500 	strd	r4, r5, [sp]
 8001538:	4642      	mov	r2, r8
 800153a:	464b      	mov	r3, r9
 800153c:	4948      	ldr	r1, [pc, #288]	; (8001660 <StartEjection1+0x22c>)
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f00b fe84 	bl	800d24c <siprintf>
			  HAL_UART_Transmit(&huart3, buffer, strlen(buffer), HAL_MAX_DELAY);
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	f7fe fe6d 	bl	8000224 <strlen>
 800154a:	4603      	mov	r3, r0
 800154c:	b29a      	uxth	r2, r3
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
 8001552:	68f9      	ldr	r1, [r7, #12]
 8001554:	483c      	ldr	r0, [pc, #240]	; (8001648 <StartEjection1+0x214>)
 8001556:	f007 fa58 	bl	8008a0a <HAL_UART_Transmit>

			  memset(buffer, 0, TX_BUF_DIM);
 800155a:	2232      	movs	r2, #50	; 0x32
 800155c:	2100      	movs	r1, #0
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f00a fe1c 	bl	800c19c <memset>
			  MRT_ISM330DLC_getAngularRate(data_raw_angular_rate,angular_rate_mdps);
 8001564:	493f      	ldr	r1, [pc, #252]	; (8001664 <StartEjection1+0x230>)
 8001566:	4840      	ldr	r0, [pc, #256]	; (8001668 <StartEjection1+0x234>)
 8001568:	f000 ffd4 	bl	8002514 <MRT_ISM330DLC_getAngularRate>
			  sprintf((char *)buffer,"Angular rate [mdps]:%4.2f\t%4.2f\t%4.2f\r\n",angular_rate_mdps[0], angular_rate_mdps[1], angular_rate_mdps[2]);
 800156c:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <StartEjection1+0x230>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff f819 	bl	80005a8 <__aeabi_f2d>
 8001576:	4680      	mov	r8, r0
 8001578:	4689      	mov	r9, r1
 800157a:	4b3a      	ldr	r3, [pc, #232]	; (8001664 <StartEjection1+0x230>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff f812 	bl	80005a8 <__aeabi_f2d>
 8001584:	4604      	mov	r4, r0
 8001586:	460d      	mov	r5, r1
 8001588:	4b36      	ldr	r3, [pc, #216]	; (8001664 <StartEjection1+0x230>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff f80b 	bl	80005a8 <__aeabi_f2d>
 8001592:	4602      	mov	r2, r0
 8001594:	460b      	mov	r3, r1
 8001596:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800159a:	e9cd 4500 	strd	r4, r5, [sp]
 800159e:	4642      	mov	r2, r8
 80015a0:	464b      	mov	r3, r9
 80015a2:	4932      	ldr	r1, [pc, #200]	; (800166c <StartEjection1+0x238>)
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f00b fe51 	bl	800d24c <siprintf>
			  HAL_UART_Transmit(&huart3, buffer, strlen(buffer), HAL_MAX_DELAY);
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f7fe fe3a 	bl	8000224 <strlen>
 80015b0:	4603      	mov	r3, r0
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
 80015b8:	68f9      	ldr	r1, [r7, #12]
 80015ba:	4823      	ldr	r0, [pc, #140]	; (8001648 <StartEjection1+0x214>)
 80015bc:	f007 fa25 	bl	8008a0a <HAL_UART_Transmit>

			  altitude = acceleration_mg[0];
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <StartEjection1+0x224>)
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ca:	edc7 7a00 	vstr	s15, [r7]
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	72bb      	strb	r3, [r7, #10]

			  //We reached main deployment altitude
			  if (altitude>DEPLOY_ALT_MIN && altitude<DEPLOY_ALT_MAX){
 80015d2:	4b27      	ldr	r3, [pc, #156]	; (8001670 <StartEjection1+0x23c>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	7aba      	ldrb	r2, [r7, #10]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d91f      	bls.n	800161c <StartEjection1+0x1e8>
 80015dc:	4b25      	ldr	r3, [pc, #148]	; (8001674 <StartEjection1+0x240>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	7aba      	ldrb	r2, [r7, #10]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d21a      	bcs.n	800161c <StartEjection1+0x1e8>

				  vPortFree(buffer);
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f00a fa0a 	bl	800ba00 <vPortFree>

				  //Eject main ()
				  HAL_UART_Transmit(&huart3, "Eject Main\r\n", 13, HAL_MAX_DELAY);
 80015ec:	f04f 33ff 	mov.w	r3, #4294967295
 80015f0:	220d      	movs	r2, #13
 80015f2:	4921      	ldr	r1, [pc, #132]	; (8001678 <StartEjection1+0x244>)
 80015f4:	4814      	ldr	r0, [pc, #80]	; (8001648 <StartEjection1+0x214>)
 80015f6:	f007 fa08 	bl	8008a0a <HAL_UART_Transmit>

				  for(;;){

					  sensorsPolling = true;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <StartEjection1+0x200>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	701a      	strb	r2, [r3, #0]
					  //Poll altitude
					  sensorsPolling = false;
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <StartEjection1+0x200>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]

					  if (altitude < GROUND_LEVEL)  osThreadExit();
 8001606:	4b1d      	ldr	r3, [pc, #116]	; (800167c <StartEjection1+0x248>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	7aba      	ldrb	r2, [r7, #10]
 800160c:	429a      	cmp	r2, r3
 800160e:	d201      	bcs.n	8001614 <StartEjection1+0x1e0>
 8001610:	f007 fdef 	bl	80091f2 <osThreadExit>

					  osDelay(100);
 8001614:	2064      	movs	r0, #100	; 0x64
 8001616:	f007 fdf2 	bl	80091fe <osDelay>
					  sensorsPolling = true;
 800161a:	e7ee      	b.n	80015fa <StartEjection1+0x1c6>
				  }
			  }

			  osDelay(100);
 800161c:	2064      	movs	r0, #100	; 0x64
 800161e:	f007 fdee 	bl	80091fe <osDelay>
			  memset(buffer, 0, TX_BUF_DIM);
 8001622:	e767      	b.n	80014f4 <StartEjection1+0xc0>
		  }
	  }

    osDelay(100);
 8001624:	2064      	movs	r0, #100	; 0x64
 8001626:	f007 fdea 	bl	80091fe <osDelay>
  {
 800162a:	e717      	b.n	800145c <StartEjection1+0x28>
 800162c:	20004f30 	.word	0x20004f30
 8001630:	20004ee8 	.word	0x20004ee8
 8001634:	20004fa0 	.word	0x20004fa0
 8001638:	2000029c 	.word	0x2000029c
 800163c:	20000298 	.word	0x20000298
 8001640:	08010314 	.word	0x08010314
 8001644:	08010330 	.word	0x08010330
 8001648:	20004eec 	.word	0x20004eec
 800164c:	20000000 	.word	0x20000000
 8001650:	20000001 	.word	0x20000001
 8001654:	08010348 	.word	0x08010348
 8001658:	20000278 	.word	0x20000278
 800165c:	20000270 	.word	0x20000270
 8001660:	08010358 	.word	0x08010358
 8001664:	2000028c 	.word	0x2000028c
 8001668:	20000284 	.word	0x20000284
 800166c:	08010380 	.word	0x08010380
 8001670:	20000002 	.word	0x20000002
 8001674:	20000003 	.word	0x20000003
 8001678:	080103a8 	.word	0x080103a8
 800167c:	20000004 	.word	0x20000004

08001680 <StartTelemetry2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetry2 */
void StartTelemetry2(void *argument)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetry2 */

	//Add thread id to the list
	threadID[2]=osThreadGetId();
 8001688:	f007 fda8 	bl	80091dc <osThreadGetId>
 800168c:	4603      	mov	r3, r0
 800168e:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <StartTelemetry2+0x60>)
 8001690:	6093      	str	r3, [r2, #8]

  /* Infinite loop */
  for(;;)
  {
	  //Poll sensor data in other thread
	  while(sensorsPolling){osDelay(1);}
 8001692:	e002      	b.n	800169a <StartTelemetry2+0x1a>
 8001694:	2001      	movs	r0, #1
 8001696:	f007 fdb2 	bl	80091fe <osDelay>
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <StartTelemetry2+0x64>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f8      	bne.n	8001694 <StartTelemetry2+0x14>
		  dataWriting = true;
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <StartTelemetry2+0x68>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]


		  //Radio send

		  //Iridium send
		  MRT_Static_Iridium_getTime();
 80016a8:	f002 fda0 	bl	80041ec <MRT_Static_Iridium_getTime>

		  //Check if it's sleep time
		  if (flagA==1){
 80016ac:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <StartTelemetry2+0x6c>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d106      	bne.n	80016c2 <StartTelemetry2+0x42>
			  MRT_Static_Iridium_Shutdown();
 80016b4:	f002 fd82 	bl	80041bc <MRT_Static_Iridium_Shutdown>

			  MRT_StandByMode(SLEEP_TIME);
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <StartTelemetry2+0x70>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f003 fbf1 	bl	8004ea4 <MRT_StandByMode>
		  }
		  dataWriting = false;
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <StartTelemetry2+0x68>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]

    osDelay(1000/DATA_FREQ);
 80016c8:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <StartTelemetry2+0x74>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f007 fd91 	bl	80091fe <osDelay>
	  while(sensorsPolling){osDelay(1);}
 80016dc:	e7dd      	b.n	800169a <StartTelemetry2+0x1a>
 80016de:	bf00      	nop
 80016e0:	20004f30 	.word	0x20004f30
 80016e4:	20004fa0 	.word	0x20004fa0
 80016e8:	20004f98 	.word	0x20004f98
 80016ec:	200004d8 	.word	0x200004d8
 80016f0:	20000005 	.word	0x20000005
 80016f4:	20000006 	.word	0x20000006

080016f8 <StartSensors3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensors3 */
void StartSensors3(void *argument)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensors3 */

	osThreadExit();
 8001700:	f007 fd77 	bl	80091f2 <osThreadExit>

08001704 <StartPropulsion4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPropulsion4 */
void StartPropulsion4(void *argument)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPropulsion4 */
	osThreadExit();
 800170c:	f007 fd71 	bl	80091f2 <osThreadExit>

08001710 <StartMemory0>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMemory0 */
void StartMemory0(void *argument)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMemory0 */

	osThreadExit();
 8001718:	f007 fd6b 	bl	80091f2 <osThreadExit>

0800171c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a04      	ldr	r2, [pc, #16]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d101      	bne.n	8001732 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800172e:	f003 fc23 	bl	8004f78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40001000 	.word	0x40001000

08001740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001744:	b672      	cpsid	i
}
 8001746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001748:	e7fe      	b.n	8001748 <Error_Handler+0x8>
	...

0800174c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_MspInit+0x54>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	4a11      	ldr	r2, [pc, #68]	; (80017a0 <HAL_MspInit+0x54>)
 800175c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001760:	6453      	str	r3, [r2, #68]	; 0x44
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <HAL_MspInit+0x54>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	603b      	str	r3, [r7, #0]
 8001772:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_MspInit+0x54>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <HAL_MspInit+0x54>)
 8001778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177c:	6413      	str	r3, [r2, #64]	; 0x40
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_MspInit+0x54>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	210f      	movs	r1, #15
 800178e:	f06f 0001 	mvn.w	r0, #1
 8001792:	f003 fd11 	bl	80051b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800

080017a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a19      	ldr	r2, [pc, #100]	; (8001828 <HAL_I2C_MspInit+0x84>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d12c      	bne.n	8001820 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_I2C_MspInit+0x88>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <HAL_I2C_MspInit+0x88>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_I2C_MspInit+0x88>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017e8:	2312      	movs	r3, #18
 80017ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f0:	2303      	movs	r3, #3
 80017f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017f4:	2304      	movs	r3, #4
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4619      	mov	r1, r3
 80017fe:	480c      	ldr	r0, [pc, #48]	; (8001830 <HAL_I2C_MspInit+0x8c>)
 8001800:	f003 fd12 	bl	8005228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <HAL_I2C_MspInit+0x88>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	4a07      	ldr	r2, [pc, #28]	; (800182c <HAL_I2C_MspInit+0x88>)
 800180e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001812:	6413      	str	r3, [r2, #64]	; 0x40
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <HAL_I2C_MspInit+0x88>)
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	; 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40005400 	.word	0x40005400
 800182c:	40023800 	.word	0x40023800
 8001830:	40020400 	.word	0x40020400

08001834 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b09a      	sub	sp, #104	; 0x68
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	225c      	movs	r2, #92	; 0x5c
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f00a fca9 	bl	800c19c <memset>
  if(hrtc->Instance==RTC)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a10      	ldr	r2, [pc, #64]	; (8001890 <HAL_RTC_MspInit+0x5c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d119      	bne.n	8001888 <HAL_RTC_MspInit+0x54>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001854:	2320      	movs	r3, #32
 8001856:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001858:	f44f 7300 	mov.w	r3, #512	; 0x200
 800185c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	4618      	mov	r0, r3
 8001864:	f005 f954 	bl	8006b10 <HAL_RCCEx_PeriphCLKConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800186e:	f7ff ff67 	bl	8001740 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001872:	4b08      	ldr	r3, [pc, #32]	; (8001894 <HAL_RTC_MspInit+0x60>)
 8001874:	2201      	movs	r2, #1
 8001876:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2105      	movs	r1, #5
 800187c:	2029      	movs	r0, #41	; 0x29
 800187e:	f003 fc9b 	bl	80051b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001882:	2029      	movs	r0, #41	; 0x29
 8001884:	f003 fcb4 	bl	80051f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001888:	bf00      	nop
 800188a:	3768      	adds	r7, #104	; 0x68
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40002800 	.word	0x40002800
 8001894:	42470e3c 	.word	0x42470e3c

08001898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	; 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a19      	ldr	r2, [pc, #100]	; (800191c <HAL_UART_MspInit+0x84>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d12c      	bne.n	8001914 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	4b18      	ldr	r3, [pc, #96]	; (8001920 <HAL_UART_MspInit+0x88>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	4a17      	ldr	r2, [pc, #92]	; (8001920 <HAL_UART_MspInit+0x88>)
 80018c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_UART_MspInit+0x88>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018d2:	613b      	str	r3, [r7, #16]
 80018d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <HAL_UART_MspInit+0x88>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a10      	ldr	r2, [pc, #64]	; (8001920 <HAL_UART_MspInit+0x88>)
 80018e0:	f043 0308 	orr.w	r3, r3, #8
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <HAL_UART_MspInit+0x88>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f8:	2302      	movs	r3, #2
 80018fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001900:	2303      	movs	r3, #3
 8001902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001904:	2307      	movs	r3, #7
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	4619      	mov	r1, r3
 800190e:	4805      	ldr	r0, [pc, #20]	; (8001924 <HAL_UART_MspInit+0x8c>)
 8001910:	f003 fc8a 	bl	8005228 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001914:	bf00      	nop
 8001916:	3728      	adds	r7, #40	; 0x28
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40004800 	.word	0x40004800
 8001920:	40023800 	.word	0x40023800
 8001924:	40020c00 	.word	0x40020c00

08001928 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08c      	sub	sp, #48	; 0x30
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001938:	2200      	movs	r2, #0
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	2036      	movs	r0, #54	; 0x36
 800193e:	f003 fc3b 	bl	80051b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001942:	2036      	movs	r0, #54	; 0x36
 8001944:	f003 fc54 	bl	80051f0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <HAL_InitTick+0xa4>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001950:	4a1e      	ldr	r2, [pc, #120]	; (80019cc <HAL_InitTick+0xa4>)
 8001952:	f043 0310 	orr.w	r3, r3, #16
 8001956:	6413      	str	r3, [r2, #64]	; 0x40
 8001958:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <HAL_InitTick+0xa4>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	f003 0310 	and.w	r3, r3, #16
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001964:	f107 0210 	add.w	r2, r7, #16
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	4611      	mov	r1, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f005 f89c 	bl	8006aac <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001974:	f005 f872 	bl	8006a5c <HAL_RCC_GetPCLK1Freq>
 8001978:	4603      	mov	r3, r0
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001980:	4a13      	ldr	r2, [pc, #76]	; (80019d0 <HAL_InitTick+0xa8>)
 8001982:	fba2 2303 	umull	r2, r3, r2, r3
 8001986:	0c9b      	lsrs	r3, r3, #18
 8001988:	3b01      	subs	r3, #1
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_InitTick+0xac>)
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <HAL_InitTick+0xb0>)
 8001990:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_InitTick+0xac>)
 8001994:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001998:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800199a:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <HAL_InitTick+0xac>)
 800199c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <HAL_InitTick+0xac>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_InitTick+0xac>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80019ac:	4809      	ldr	r0, [pc, #36]	; (80019d4 <HAL_InitTick+0xac>)
 80019ae:	f006 fd31 	bl	8008414 <HAL_TIM_Base_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d104      	bne.n	80019c2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80019b8:	4806      	ldr	r0, [pc, #24]	; (80019d4 <HAL_InitTick+0xac>)
 80019ba:	f006 fd85 	bl	80084c8 <HAL_TIM_Base_Start_IT>
 80019be:	4603      	mov	r3, r0
 80019c0:	e000      	b.n	80019c4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3730      	adds	r7, #48	; 0x30
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40023800 	.word	0x40023800
 80019d0:	431bde83 	.word	0x431bde83
 80019d4:	20004fd8 	.word	0x20004fd8
 80019d8:	40001000 	.word	0x40001000

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <NMI_Handler+0x4>

080019e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <HardFault_Handler+0x4>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <MemManage_Handler+0x4>

080019ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <BusFault_Handler+0x4>

080019f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <UsageFault_Handler+0x4>

080019fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <RTC_Alarm_IRQHandler+0x10>)
 8001a0e:	f006 fb27 	bl	8008060 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20004fa4 	.word	0x20004fa4

08001a1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <TIM6_DAC_IRQHandler+0x10>)
 8001a22:	f006 fdc1 	bl	80085a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20004fd8 	.word	0x20004fd8

08001a30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
	return 1;
 8001a34:	2301      	movs	r3, #1
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <_kill>:

int _kill(int pid, int sig)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a4a:	f00a f92d 	bl	800bca8 <__errno>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2216      	movs	r2, #22
 8001a52:	601a      	str	r2, [r3, #0]
	return -1;
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_exit>:

void _exit (int status)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff ffe7 	bl	8001a40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a72:	e7fe      	b.n	8001a72 <_exit+0x12>

08001a74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	e00a      	b.n	8001a9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a86:	f3af 8000 	nop.w
 8001a8a:	4601      	mov	r1, r0
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	60ba      	str	r2, [r7, #8]
 8001a92:	b2ca      	uxtb	r2, r1
 8001a94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dbf0      	blt.n	8001a86 <_read+0x12>
	}

return len;
 8001aa4:	687b      	ldr	r3, [r7, #4]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e009      	b.n	8001ad4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	60ba      	str	r2, [r7, #8]
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	dbf1      	blt.n	8001ac0 <_write+0x12>
	}
	return len;
 8001adc:	687b      	ldr	r3, [r7, #4]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <_close>:

int _close(int file)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
	return -1;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b0e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <_isatty>:

int _isatty(int file)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
	return 1;
 8001b26:	2301      	movs	r3, #1
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b58:	4a14      	ldr	r2, [pc, #80]	; (8001bac <_sbrk+0x5c>)
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <_sbrk+0x60>)
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <_sbrk+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <_sbrk+0x64>)
 8001b6e:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <_sbrk+0x68>)
 8001b70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <_sbrk+0x64>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d207      	bcs.n	8001b90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b80:	f00a f892 	bl	800bca8 <__errno>
 8001b84:	4603      	mov	r3, r0
 8001b86:	220c      	movs	r2, #12
 8001b88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8e:	e009      	b.n	8001ba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b90:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <_sbrk+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b96:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4a05      	ldr	r2, [pc, #20]	; (8001bb4 <_sbrk+0x64>)
 8001ba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20020000 	.word	0x20020000
 8001bb0:	00000400 	.word	0x00000400
 8001bb4:	200002a4 	.word	0x200002a4
 8001bb8:	200050c0 	.word	0x200050c0

08001bbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <SystemInit+0x20>)
 8001bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <SystemInit+0x20>)
 8001bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001be4:	480d      	ldr	r0, [pc, #52]	; (8001c1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001be6:	490e      	ldr	r1, [pc, #56]	; (8001c20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001be8:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bec:	e002      	b.n	8001bf4 <LoopCopyDataInit>

08001bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf2:	3304      	adds	r3, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf8:	d3f9      	bcc.n	8001bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bfc:	4c0b      	ldr	r4, [pc, #44]	; (8001c2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c00:	e001      	b.n	8001c06 <LoopFillZerobss>

08001c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c04:	3204      	adds	r2, #4

08001c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c08:	d3fb      	bcc.n	8001c02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c0a:	f7ff ffd7 	bl	8001bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c0e:	f00a f947 	bl	800bea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c12:	f7ff f9c5 	bl	8000fa0 <main>
  bx  lr    
 8001c16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c20:	20000254 	.word	0x20000254
  ldr r2, =_sidata
 8001c24:	08011a04 	.word	0x08011a04
  ldr r2, =_sbss
 8001c28:	20000254 	.word	0x20000254
  ldr r4, =_ebss
 8001c2c:	200050bc 	.word	0x200050bc

08001c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c30:	e7fe      	b.n	8001c30 <ADC_IRQHandler>
	...

08001c34 <checkForI2CDevices>:
 *      Author: Jacoby
 */
#include <stm32f4xx_hal.h>


void checkForI2CDevices(UART_HandleTypeDef uart, I2C_HandleTypeDef I2C ){
 8001c34:	b084      	sub	sp, #16
 8001c36:	b5b0      	push	{r4, r5, r7, lr}
 8001c38:	b092      	sub	sp, #72	; 0x48
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001c40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t Buffer[25] = {0};
 8001c44:	2300      	movs	r3, #0
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
 8001c58:	751a      	strb	r2, [r3, #20]
	uint8_t Space[] = " - ";
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <checkForI2CDevices+0x108>)
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
 8001c5e:	4b38      	ldr	r3, [pc, #224]	; (8001d40 <checkForI2CDevices+0x10c>)
 8001c60:	f107 040c 	add.w	r4, r7, #12
 8001c64:	461d      	mov	r5, r3
 8001c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c6e:	c403      	stmia	r4!, {r0, r1}
 8001c70:	8022      	strh	r2, [r4, #0]
	uint8_t EndMSG[] = "Done! \r\n\r\n";
 8001c72:	4a34      	ldr	r2, [pc, #208]	; (8001d44 <checkForI2CDevices+0x110>)
 8001c74:	463b      	mov	r3, r7
 8001c76:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c78:	c303      	stmia	r3!, {r0, r1}
 8001c7a:	801a      	strh	r2, [r3, #0]
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	0c12      	lsrs	r2, r2, #16
 8001c80:	701a      	strb	r2, [r3, #0]

    uint8_t i = 0, ret;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    HAL_Delay(1000);
 8001c88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c8c:	f003 f994 	bl	8004fb8 <HAL_Delay>

    /*-[ I2C Bus Scanning ]-*/
    HAL_UART_Transmit(&uart, StartMSG, sizeof(StartMSG), HAL_MAX_DELAY);
 8001c90:	f107 010c 	add.w	r1, r7, #12
 8001c94:	f04f 33ff 	mov.w	r3, #4294967295
 8001c98:	221a      	movs	r2, #26
 8001c9a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001c9e:	f006 feb4 	bl	8008a0a <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001ca8:	e035      	b.n	8001d16 <checkForI2CDevices+0xe2>
    {
        ret = HAL_I2C_IsDeviceReady(&I2C, (uint16_t)(i<<1), 3, 5);
 8001caa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	b299      	uxth	r1, r3
 8001cb4:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8001cb8:	2305      	movs	r3, #5
 8001cba:	2203      	movs	r2, #3
 8001cbc:	f004 f8de 	bl	8005e7c <HAL_I2C_IsDeviceReady>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        if (ret != HAL_OK) /* No ACK Received At That Address */
 8001cc6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d009      	beq.n	8001ce2 <checkForI2CDevices+0xae>
        {
            HAL_UART_Transmit(&uart, Space, sizeof(Space), HAL_MAX_DELAY);
 8001cce:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001cdc:	f006 fe95 	bl	8008a0a <HAL_UART_Transmit>
 8001ce0:	e014      	b.n	8001d0c <checkForI2CDevices+0xd8>
        }
        else if(ret == HAL_OK)
 8001ce2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d110      	bne.n	8001d0c <checkForI2CDevices+0xd8>
        {
            sprintf(Buffer, "0x%X", i);
 8001cea:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001cee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf2:	4915      	ldr	r1, [pc, #84]	; (8001d48 <checkForI2CDevices+0x114>)
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f00b faa9 	bl	800d24c <siprintf>
            HAL_UART_Transmit(&uart, Buffer, sizeof(Buffer), HAL_MAX_DELAY);
 8001cfa:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001d02:	2219      	movs	r2, #25
 8001d04:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001d08:	f006 fe7f 	bl	8008a0a <HAL_UART_Transmit>
    for(i=1; i<128; i++)
 8001d0c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001d10:	3301      	adds	r3, #1
 8001d12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001d16:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	dac5      	bge.n	8001caa <checkForI2CDevices+0x76>
        }
    }
    HAL_UART_Transmit(&uart, EndMSG, sizeof(EndMSG), HAL_MAX_DELAY);
 8001d1e:	4639      	mov	r1, r7
 8001d20:	f04f 33ff 	mov.w	r3, #4294967295
 8001d24:	220b      	movs	r2, #11
 8001d26:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8001d2a:	f006 fe6e 	bl	8008a0a <HAL_UART_Transmit>
    /*--[ Scanning Done ]--*/

}
 8001d2e:	bf00      	nop
 8001d30:	3748      	adds	r7, #72	; 0x48
 8001d32:	46bd      	mov	sp, r7
 8001d34:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001d38:	b004      	add	sp, #16
 8001d3a:	4770      	bx	lr
 8001d3c:	00202d20 	.word	0x00202d20
 8001d40:	080103c0 	.word	0x080103c0
 8001d44:	080103dc 	.word	0x080103dc
 8001d48:	080103b8 	.word	0x080103b8

08001d4c <ism330dlc_read_reg>:
  *
  */
int32_t ism330dlc_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	461a      	mov	r2, r3
 8001d58:	460b      	mov	r3, r1
 8001d5a:	72fb      	strb	r3, [r7, #11]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	685c      	ldr	r4, [r3, #4]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6898      	ldr	r0, [r3, #8]
 8001d68:	893b      	ldrh	r3, [r7, #8]
 8001d6a:	7af9      	ldrb	r1, [r7, #11]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	47a0      	blx	r4
 8001d70:	6178      	str	r0, [r7, #20]

  return ret;
 8001d72:	697b      	ldr	r3, [r7, #20]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	371c      	adds	r7, #28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd90      	pop	{r4, r7, pc}

08001d7c <ism330dlc_write_reg>:
  *
  */
int32_t ism330dlc_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	461a      	mov	r2, r3
 8001d88:	460b      	mov	r3, r1
 8001d8a:	72fb      	strb	r3, [r7, #11]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681c      	ldr	r4, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6898      	ldr	r0, [r3, #8]
 8001d98:	893b      	ldrh	r3, [r7, #8]
 8001d9a:	7af9      	ldrb	r1, [r7, #11]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	47a0      	blx	r4
 8001da0:	6178      	str	r0, [r7, #20]

  return ret;
 8001da2:	697b      	ldr	r3, [r7, #20]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	371c      	adds	r7, #28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd90      	pop	{r4, r7, pc}

08001dac <ism330dlc_from_fs2g_to_mg>:
  * @{
  *
  */

float_t ism330dlc_from_fs2g_to_mg(int16_t lsb)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8001db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dba:	ee07 3a90 	vmov	s15, r3
 8001dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001dd8 <ism330dlc_from_fs2g_to_mg+0x2c>
 8001dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001dca:	eeb0 0a67 	vmov.f32	s0, s15
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	3d79db23 	.word	0x3d79db23

08001ddc <ism330dlc_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 70.0f);
}

float_t ism330dlc_from_lsb_to_celsius(int16_t lsb)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8001de6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dea:	ee07 3a90 	vmov	s15, r3
 8001dee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001df2:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001e10 <ism330dlc_from_lsb_to_celsius+0x34>
 8001df6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dfa:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8001dfe:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001e02:	eeb0 0a67 	vmov.f32	s0, s15
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	43800000 	.word	0x43800000

08001e14 <ism330dlc_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_full_scale_set(stmdev_ctx_t *ctx,
                                    ism330dlc_fs_xl_t val)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 8001e20:	f107 0208 	add.w	r2, r7, #8
 8001e24:	2301      	movs	r3, #1
 8001e26:	2110      	movs	r1, #16
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ff8f 	bl	8001d4c <ism330dlc_read_reg>
 8001e2e:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10f      	bne.n	8001e56 <ism330dlc_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8001e36:	78fb      	ldrb	r3, [r7, #3]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	7a3b      	ldrb	r3, [r7, #8]
 8001e40:	f362 0383 	bfi	r3, r2, #2, #2
 8001e44:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL1_XL,
 8001e46:	f107 0208 	add.w	r2, r7, #8
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	2110      	movs	r1, #16
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ff94 	bl	8001d7c <ism330dlc_write_reg>
 8001e54:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8001e56:	68fb      	ldr	r3, [r7, #12]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <ism330dlc_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_data_rate_set(stmdev_ctx_t *ctx,
                                   ism330dlc_odr_xl_t val)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 8001e6c:	f107 0208 	add.w	r2, r7, #8
 8001e70:	2301      	movs	r3, #1
 8001e72:	2110      	movs	r1, #16
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff69 	bl	8001d4c <ism330dlc_read_reg>
 8001e7a:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10f      	bne.n	8001ea2 <ism330dlc_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 8001e82:	78fb      	ldrb	r3, [r7, #3]
 8001e84:	f003 030f 	and.w	r3, r3, #15
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	7a3b      	ldrb	r3, [r7, #8]
 8001e8c:	f362 1307 	bfi	r3, r2, #4, #4
 8001e90:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL1_XL,
 8001e92:	f107 0208 	add.w	r2, r7, #8
 8001e96:	2301      	movs	r3, #1
 8001e98:	2110      	movs	r1, #16
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ff6e 	bl	8001d7c <ism330dlc_write_reg>
 8001ea0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <ism330dlc_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_gy_full_scale_set(stmdev_ctx_t *ctx,
                                    ism330dlc_fs_g_t val)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001eb8:	f107 0208 	add.w	r2, r7, #8
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	2111      	movs	r1, #17
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ff43 	bl	8001d4c <ism330dlc_read_reg>
 8001ec6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10f      	bne.n	8001eee <ism330dlc_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	7a3b      	ldrb	r3, [r7, #8]
 8001ed8:	f362 0343 	bfi	r3, r2, #1, #3
 8001edc:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001ede:	f107 0208 	add.w	r2, r7, #8
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	2111      	movs	r1, #17
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff ff48 	bl	8001d7c <ism330dlc_write_reg>
 8001eec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <ism330dlc_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_gy_data_rate_set(stmdev_ctx_t *ctx,
                                   ism330dlc_odr_g_t val)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001f04:	f107 0208 	add.w	r2, r7, #8
 8001f08:	2301      	movs	r3, #1
 8001f0a:	2111      	movs	r1, #17
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff1d 	bl	8001d4c <ism330dlc_read_reg>
 8001f12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10f      	bne.n	8001f3a <ism330dlc_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	7a3b      	ldrb	r3, [r7, #8]
 8001f24:	f362 1307 	bfi	r3, r2, #4, #4
 8001f28:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001f2a:	f107 0208 	add.w	r2, r7, #8
 8001f2e:	2301      	movs	r3, #1
 8001f30:	2111      	movs	r1, #17
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ff22 	bl	8001d7c <ism330dlc_write_reg>
 8001f38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <ism330dlc_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_block_data_update_set(stmdev_ctx_t *ctx,
                                        uint8_t val)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001f50:	f107 0208 	add.w	r2, r7, #8
 8001f54:	2301      	movs	r3, #1
 8001f56:	2112      	movs	r1, #18
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff fef7 	bl	8001d4c <ism330dlc_read_reg>
 8001f5e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10f      	bne.n	8001f86 <ism330dlc_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	7a3b      	ldrb	r3, [r7, #8]
 8001f70:	f362 1386 	bfi	r3, r2, #6, #1
 8001f74:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8001f76:	f107 0208 	add.w	r2, r7, #8
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	2112      	movs	r1, #18
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fefc 	bl	8001d7c <ism330dlc_write_reg>
 8001f84:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001f86:	68fb      	ldr	r3, [r7, #12]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <ism330dlc_status_reg_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_status_reg_get(stmdev_ctx_t *ctx,
                                 ism330dlc_status_reg_t *val)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_STATUS_REG, (uint8_t *) val, 1);
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	211e      	movs	r1, #30
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff fed3 	bl	8001d4c <ism330dlc_read_reg>
 8001fa6:	60f8      	str	r0, [r7, #12]

  return ret;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <ism330dlc_temperature_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
 8001fba:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_OUT_TEMP_L, buff, 2);
 8001fbc:	f107 0208 	add.w	r2, r7, #8
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	2120      	movs	r1, #32
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7ff fec1 	bl	8001d4c <ism330dlc_read_reg>
 8001fca:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8001fcc:	7a7b      	ldrb	r3, [r7, #9]
 8001fce:	b21a      	sxth	r2, r3
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	7a3b      	ldrb	r3, [r7, #8]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	b21a      	sxth	r2, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	801a      	strh	r2, [r3, #0]

  return ret;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <ism330dlc_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_acceleration_raw_get(stmdev_ctx_t *ctx,
                                       int16_t *val)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_OUTX_L_XL, buff, 6);
 8002002:	f107 020c 	add.w	r2, r7, #12
 8002006:	2306      	movs	r3, #6
 8002008:	2128      	movs	r1, #40	; 0x28
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff fe9e 	bl	8001d4c <ism330dlc_read_reg>
 8002010:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002012:	7b7b      	ldrb	r3, [r7, #13]
 8002014:	b21a      	sxth	r2, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002020:	b29b      	uxth	r3, r3
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	b29a      	uxth	r2, r3
 8002026:	7b3b      	ldrb	r3, [r7, #12]
 8002028:	b29b      	uxth	r3, r3
 800202a:	4413      	add	r3, r2
 800202c:	b29b      	uxth	r3, r3
 800202e:	b21a      	sxth	r2, r3
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002034:	7bfa      	ldrb	r2, [r7, #15]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	3302      	adds	r3, #2
 800203a:	b212      	sxth	r2, r2
 800203c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	3302      	adds	r3, #2
 8002042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002046:	b29b      	uxth	r3, r3
 8002048:	021b      	lsls	r3, r3, #8
 800204a:	b29a      	uxth	r2, r3
 800204c:	7bbb      	ldrb	r3, [r7, #14]
 800204e:	b29b      	uxth	r3, r3
 8002050:	4413      	add	r3, r2
 8002052:	b29a      	uxth	r2, r3
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	3302      	adds	r3, #2
 8002058:	b212      	sxth	r2, r2
 800205a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800205c:	7c7a      	ldrb	r2, [r7, #17]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	3304      	adds	r3, #4
 8002062:	b212      	sxth	r2, r2
 8002064:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	3304      	adds	r3, #4
 800206a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800206e:	b29b      	uxth	r3, r3
 8002070:	021b      	lsls	r3, r3, #8
 8002072:	b29a      	uxth	r2, r3
 8002074:	7c3b      	ldrb	r3, [r7, #16]
 8002076:	b29b      	uxth	r3, r3
 8002078:	4413      	add	r3, r2
 800207a:	b29a      	uxth	r2, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	3304      	adds	r3, #4
 8002080:	b212      	sxth	r2, r2
 8002082:	801a      	strh	r2, [r3, #0]

  return ret;
 8002084:	697b      	ldr	r3, [r7, #20]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <ism330dlc_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b084      	sub	sp, #16
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
 8002096:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_WHO_AM_I, buff, 1);
 8002098:	2301      	movs	r3, #1
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	210f      	movs	r1, #15
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff fe54 	bl	8001d4c <ism330dlc_read_reg>
 80020a4:	60f8      	str	r0, [r7, #12]

  return ret;
 80020a6:	68fb      	ldr	r3, [r7, #12]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <ism330dlc_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	460b      	mov	r3, r1
 80020ba:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80020bc:	f107 0208 	add.w	r2, r7, #8
 80020c0:	2301      	movs	r3, #1
 80020c2:	2112      	movs	r1, #18
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff fe41 	bl	8001d4c <ism330dlc_read_reg>
 80020ca:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10f      	bne.n	80020f2 <ism330dlc_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 80020d2:	78fb      	ldrb	r3, [r7, #3]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	7a3b      	ldrb	r3, [r7, #8]
 80020dc:	f362 0300 	bfi	r3, r2, #0, #1
 80020e0:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80020e2:	f107 0208 	add.w	r2, r7, #8
 80020e6:	2301      	movs	r3, #1
 80020e8:	2112      	movs	r1, #18
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff fe46 	bl	8001d7c <ism330dlc_write_reg>
 80020f0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80020f2:	68fb      	ldr	r3, [r7, #12]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <ism330dlc_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  ism330dlc_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002106:	f107 0208 	add.w	r2, r7, #8
 800210a:	2301      	movs	r3, #1
 800210c:	2112      	movs	r1, #18
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff fe1c 	bl	8001d4c <ism330dlc_read_reg>
 8002114:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8002116:	7a3b      	ldrb	r3, [r7, #8]
 8002118:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800211c:	b2db      	uxtb	r3, r3
 800211e:	461a      	mov	r2, r3
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	701a      	strb	r2, [r3, #0]

  return ret;
 8002124:	68fb      	ldr	r3, [r7, #12]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <ism330dlc_xl_filter_analog_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_filter_analog_set(stmdev_ctx_t *ctx,
                                       ism330dlc_bw0_xl_t val)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	460b      	mov	r3, r1
 8002138:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL1_XL,
 800213a:	f107 0208 	add.w	r2, r7, #8
 800213e:	2301      	movs	r3, #1
 8002140:	2110      	movs	r1, #16
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7ff fe02 	bl	8001d4c <ism330dlc_read_reg>
 8002148:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10f      	bne.n	8002170 <ism330dlc_xl_filter_analog_set+0x42>
  {
    ctrl1_xl.bw0_xl = (uint8_t) val;
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	b2da      	uxtb	r2, r3
 8002158:	7a3b      	ldrb	r3, [r7, #8]
 800215a:	f362 0300 	bfi	r3, r2, #0, #1
 800215e:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL1_XL,
 8002160:	f107 0208 	add.w	r2, r7, #8
 8002164:	2301      	movs	r3, #1
 8002166:	2110      	movs	r1, #16
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff fe07 	bl	8001d7c <ism330dlc_write_reg>
 800216e:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8002170:	68fb      	ldr	r3, [r7, #12]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <ism330dlc_xl_lp2_bandwidth_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_xl_lp2_bandwidth_set(stmdev_ctx_t *ctx,
                                       ism330dlc_input_composite_t val)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b084      	sub	sp, #16
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	460b      	mov	r3, r1
 8002184:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl8_xl_t ctrl8_xl;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL8_XL,
 8002186:	f107 0208 	add.w	r2, r7, #8
 800218a:	2301      	movs	r3, #1
 800218c:	2117      	movs	r1, #23
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff fddc 	bl	8001d4c <ism330dlc_read_reg>
 8002194:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&ctrl8_xl, 1);

  if (ret == 0)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d120      	bne.n	80021de <ism330dlc_xl_lp2_bandwidth_set+0x64>
  {
    ctrl8_xl.input_composite = ((uint8_t) val & 0x10U) >> 4;
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	7a3b      	ldrb	r3, [r7, #8]
 80021a8:	f362 03c3 	bfi	r3, r2, #3, #1
 80021ac:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	f003 0303 	and.w	r3, r3, #3
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	7a3b      	ldrb	r3, [r7, #8]
 80021b8:	f362 1346 	bfi	r3, r2, #5, #2
 80021bc:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.lpf2_xl_en = 1;
 80021be:	7a3b      	ldrb	r3, [r7, #8]
 80021c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c4:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_slope_xl_en = 0;
 80021c6:	7a3b      	ldrb	r3, [r7, #8]
 80021c8:	f36f 0382 	bfc	r3, #2, #1
 80021cc:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL8_XL,
 80021ce:	f107 0208 	add.w	r2, r7, #8
 80021d2:	2301      	movs	r3, #1
 80021d4:	2117      	movs	r1, #23
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff fdd0 	bl	8001d7c <ism330dlc_write_reg>
 80021dc:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 80021de:	68fb      	ldr	r3, [r7, #12]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <ism330dlc_gy_band_pass_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dlc_gy_band_pass_set(stmdev_ctx_t *ctx,
                                   ism330dlc_lpf1_sel_g_t val)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	70fb      	strb	r3, [r7, #3]
  ism330dlc_ctrl4_c_t ctrl4_c;
  ism330dlc_ctrl6_c_t ctrl6_c;
  ism330dlc_ctrl7_g_t ctrl7_g;
  int32_t ret;
  ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 80021f4:	f107 0208 	add.w	r2, r7, #8
 80021f8:	2301      	movs	r3, #1
 80021fa:	2116      	movs	r1, #22
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff fda5 	bl	8001d4c <ism330dlc_read_reg>
 8002202:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d157      	bne.n	80022ba <ism330dlc_gy_band_pass_set+0xd2>
  {
    ctrl7_g.hpm_g  = ((uint8_t)val & 0x30U) >> 4;
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	b2da      	uxtb	r2, r3
 8002214:	7a3b      	ldrb	r3, [r7, #8]
 8002216:	f362 1305 	bfi	r3, r2, #4, #2
 800221a:	723b      	strb	r3, [r7, #8]
    ctrl7_g.hp_en_g = ((uint8_t)val & 0x80U) >> 7;
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	09db      	lsrs	r3, r3, #7
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	b2da      	uxtb	r2, r3
 8002228:	7a3b      	ldrb	r3, [r7, #8]
 800222a:	f362 1386 	bfi	r3, r2, #6, #1
 800222e:	723b      	strb	r3, [r7, #8]
    ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL7_G, (uint8_t *)&ctrl7_g, 1);
 8002230:	f107 0208 	add.w	r2, r7, #8
 8002234:	2301      	movs	r3, #1
 8002236:	2116      	movs	r1, #22
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff fd9f 	bl	8001d7c <ism330dlc_write_reg>
 800223e:	6178      	str	r0, [r7, #20]

    if (ret == 0)
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d139      	bne.n	80022ba <ism330dlc_gy_band_pass_set+0xd2>
    {
      ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
 8002246:	f107 020c 	add.w	r2, r7, #12
 800224a:	2301      	movs	r3, #1
 800224c:	2115      	movs	r1, #21
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff fd7c 	bl	8001d4c <ism330dlc_read_reg>
 8002254:	6178      	str	r0, [r7, #20]

      if (ret == 0)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d12e      	bne.n	80022ba <ism330dlc_gy_band_pass_set+0xd2>
      {
        ctrl6_c.ftype = (uint8_t)val & 0x03U;
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	b2da      	uxtb	r2, r3
 8002264:	7b3b      	ldrb	r3, [r7, #12]
 8002266:	f362 0301 	bfi	r3, r2, #0, #2
 800226a:	733b      	strb	r3, [r7, #12]
        ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL6_C,
 800226c:	f107 020c 	add.w	r2, r7, #12
 8002270:	2301      	movs	r3, #1
 8002272:	2115      	movs	r1, #21
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff fd81 	bl	8001d7c <ism330dlc_write_reg>
 800227a:	6178      	str	r0, [r7, #20]
                                  (uint8_t *)&ctrl6_c, 1);

        if (ret == 0)
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d11b      	bne.n	80022ba <ism330dlc_gy_band_pass_set+0xd2>
        {
          ret = ism330dlc_read_reg(ctx, ISM330DLC_CTRL4_C,
 8002282:	f107 0210 	add.w	r2, r7, #16
 8002286:	2301      	movs	r3, #1
 8002288:	2113      	movs	r1, #19
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff fd5e 	bl	8001d4c <ism330dlc_read_reg>
 8002290:	6178      	str	r0, [r7, #20]
                                   (uint8_t *)&ctrl4_c, 1);

          if (ret == 0)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d110      	bne.n	80022ba <ism330dlc_gy_band_pass_set+0xd2>
          {
            ctrl4_c.lpf1_sel_g = ((uint8_t)val & 0x08U) >> 3;
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	08db      	lsrs	r3, r3, #3
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	7c3b      	ldrb	r3, [r7, #16]
 80022a4:	f362 0341 	bfi	r3, r2, #1, #1
 80022a8:	743b      	strb	r3, [r7, #16]
            ret = ism330dlc_write_reg(ctx, ISM330DLC_CTRL4_C,
 80022aa:	f107 0210 	add.w	r2, r7, #16
 80022ae:	2301      	movs	r3, #1
 80022b0:	2113      	movs	r1, #19
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff fd62 	bl	8001d7c <ism330dlc_write_reg>
 80022b8:	6178      	str	r0, [r7, #20]
        }
      }
    }
  }

  return ret;
 80022ba:	697b      	ldr	r3, [r7, #20]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <write>:
 * @param  bufp      pointer to data to write in register reg
 * @param  len       number of consecutive register to write
 *
 */
static int32_t write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af04      	add	r7, sp, #16
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	461a      	mov	r2, r3
 80022d0:	460b      	mov	r3, r1
 80022d2:	72fb      	strb	r3, [r7, #11]
 80022d4:	4613      	mov	r3, r2
 80022d6:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, ISM330DLC_I2C_ADD_L, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80022d8:	7afb      	ldrb	r3, [r7, #11]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e0:	9302      	str	r3, [sp, #8]
 80022e2:	893b      	ldrh	r3, [r7, #8]
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2301      	movs	r3, #1
 80022ec:	21d5      	movs	r1, #213	; 0xd5
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f003 faa4 	bl	800583c <HAL_I2C_Mem_Write>
  return 0;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b088      	sub	sp, #32
 8002302:	af04      	add	r7, sp, #16
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	461a      	mov	r2, r3
 800230a:	460b      	mov	r3, r1
 800230c:	72fb      	strb	r3, [r7, #11]
 800230e:	4613      	mov	r3, r2
 8002310:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, ISM330DLC_I2C_ADD_L, reg,
 8002312:	7afb      	ldrb	r3, [r7, #11]
 8002314:	b29a      	uxth	r2, r3
 8002316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800231a:	9302      	str	r3, [sp, #8]
 800231c:	893b      	ldrh	r3, [r7, #8]
 800231e:	9301      	str	r3, [sp, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	2301      	movs	r3, #1
 8002326:	21d5      	movs	r1, #213	; 0xd5
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f003 fb81 	bl	8005a30 <HAL_I2C_Mem_Read>
                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
  return 0;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <MRT_ISM330DLC_Setup>:




void MRT_ISM330DLC_Setup(stmdev_ctx_t *dev_ctx, I2C_HandleTypeDef* SENSOR_BUS, UART_HandleTypeDef* uart)
	{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
	  Guart = uart;
 8002344:	4a31      	ldr	r2, [pc, #196]	; (800240c <MRT_ISM330DLC_Setup+0xd4>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6013      	str	r3, [r2, #0]

	  HAL_UART_Transmit(Guart,"LISM330DLC Setup Starts\n\r", 27, HAL_MAX_DELAY);
 800234a:	4b30      	ldr	r3, [pc, #192]	; (800240c <MRT_ISM330DLC_Setup+0xd4>)
 800234c:	6818      	ldr	r0, [r3, #0]
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
 8002352:	221b      	movs	r2, #27
 8002354:	492e      	ldr	r1, [pc, #184]	; (8002410 <MRT_ISM330DLC_Setup+0xd8>)
 8002356:	f006 fb58 	bl	8008a0a <HAL_UART_Transmit>
	  /* Initialize mems driver interface */
	  //dev_ctx->write_reg = write;
	  dev_ctx->write_reg = write;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4a2d      	ldr	r2, [pc, #180]	; (8002414 <MRT_ISM330DLC_Setup+0xdc>)
 800235e:	601a      	str	r2, [r3, #0]
	  dev_ctx->read_reg = read;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4a2d      	ldr	r2, [pc, #180]	; (8002418 <MRT_ISM330DLC_Setup+0xe0>)
 8002364:	605a      	str	r2, [r3, #4]
	  dev_ctx->handle = SENSOR_BUS;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	609a      	str	r2, [r3, #8]
	  /* Wait sensor boot time */
	  HAL_Delay(BOOT_TIME);
 800236c:	200a      	movs	r0, #10
 800236e:	f002 fe23 	bl	8004fb8 <HAL_Delay>
	  /* Check device ID */
	  ism330dlc_device_id_get(dev_ctx, &whoamI);
 8002372:	492a      	ldr	r1, [pc, #168]	; (800241c <MRT_ISM330DLC_Setup+0xe4>)
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f7ff fe8a 	bl	800208e <ism330dlc_device_id_get>

	  	  HAL_UART_Transmit(Guart,"Checking Sensor ID...", 21, HAL_MAX_DELAY);
 800237a:	4b24      	ldr	r3, [pc, #144]	; (800240c <MRT_ISM330DLC_Setup+0xd4>)
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
 8002382:	2215      	movs	r2, #21
 8002384:	4926      	ldr	r1, [pc, #152]	; (8002420 <MRT_ISM330DLC_Setup+0xe8>)
 8002386:	f006 fb40 	bl	8008a0a <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart3,whoamI, 2, HAL_MAX_DELAY);
		  HAL_UART_Transmit(&huart3,"\n\rProgram Terminated\n\r", 26, HAL_MAX_DELAY);
		  while(1);
	  }
	  */
	  	  HAL_UART_Transmit(Guart,"OK\n\r", 6, HAL_MAX_DELAY);
 800238a:	4b20      	ldr	r3, [pc, #128]	; (800240c <MRT_ISM330DLC_Setup+0xd4>)
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	f04f 33ff 	mov.w	r3, #4294967295
 8002392:	2206      	movs	r2, #6
 8002394:	4923      	ldr	r1, [pc, #140]	; (8002424 <MRT_ISM330DLC_Setup+0xec>)
 8002396:	f006 fb38 	bl	8008a0a <HAL_UART_Transmit>

	  /* Restore default configuration */
	  ism330dlc_reset_set(dev_ctx, PROPERTY_ENABLE);
 800239a:	2101      	movs	r1, #1
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f7ff fe87 	bl	80020b0 <ism330dlc_reset_set>

	  do {
		ism330dlc_reset_get(dev_ctx, &rst);
 80023a2:	4921      	ldr	r1, [pc, #132]	; (8002428 <MRT_ISM330DLC_Setup+0xf0>)
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7ff fea9 	bl	80020fc <ism330dlc_reset_get>
	  } while (rst);
 80023aa:	4b1f      	ldr	r3, [pc, #124]	; (8002428 <MRT_ISM330DLC_Setup+0xf0>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f7      	bne.n	80023a2 <MRT_ISM330DLC_Setup+0x6a>


	  /* Enable Block Data Update */
	    ism330dlc_block_data_update_set(dev_ctx, PROPERTY_ENABLE);
 80023b2:	2101      	movs	r1, #1
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f7ff fdc5 	bl	8001f44 <ism330dlc_block_data_update_set>
	    /* Set Output Data Rate */
	    ism330dlc_xl_data_rate_set(dev_ctx, ISM330DLC_XL_ODR_12Hz5);
 80023ba:	2101      	movs	r1, #1
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f7ff fd4f 	bl	8001e60 <ism330dlc_xl_data_rate_set>
	    ism330dlc_gy_data_rate_set(dev_ctx, ISM330DLC_GY_ODR_12Hz5);
 80023c2:	2101      	movs	r1, #1
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f7ff fd97 	bl	8001ef8 <ism330dlc_gy_data_rate_set>
	    /* Set full scale */
	    ism330dlc_xl_full_scale_set(dev_ctx, ISM330DLC_2g);
 80023ca:	2100      	movs	r1, #0
 80023cc:	68f8      	ldr	r0, [r7, #12]
 80023ce:	f7ff fd21 	bl	8001e14 <ism330dlc_xl_full_scale_set>
	    ism330dlc_gy_full_scale_set(dev_ctx, ISM330DLC_2000dps);
 80023d2:	2106      	movs	r1, #6
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f7ff fd69 	bl	8001eac <ism330dlc_gy_full_scale_set>
	    /* Configure filtering chain(No aux interface) */
	    /* Accelerometer - analog filter */
	    ism330dlc_xl_filter_analog_set(dev_ctx, ISM330DLC_XL_ANA_BW_400Hz);
 80023da:	2101      	movs	r1, #1
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f7ff fea6 	bl	800212e <ism330dlc_xl_filter_analog_set>
	    /* Accelerometer - LPF1 path ( LPF2 not used )*/
	    //ism330dlc_xl_lp1_bandwidth_set(dev_ctx, ISM330DLC_XL_LP1_ODR_DIV_4);
	    /* Accelerometer - LPF1 + LPF2 path */
	    ism330dlc_xl_lp2_bandwidth_set(dev_ctx,
 80023e2:	2111      	movs	r1, #17
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f7ff fec8 	bl	800217a <ism330dlc_xl_lp2_bandwidth_set>
	                                   ISM330DLC_XL_LOW_NOISE_LP_ODR_DIV_100);
	    /* Accelerometer - High Pass / Slope path */
	    //ism330dlc_xl_reference_mode_set(&dev_ctx, PROPERTY_DISABLE);
	    //ism330dlc_xl_hp_bandwidth_set(&dev_ctx, ISM330DLC_XL_HP_ODR_DIV_100);
	    /* Gyroscope - filtering chain */
	    ism330dlc_gy_band_pass_set(dev_ctx, ISM330DLC_HP_260mHz_LP1_STRONG);
 80023ea:	21a8      	movs	r1, #168	; 0xa8
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f7ff fefb 	bl	80021e8 <ism330dlc_gy_band_pass_set>
	    HAL_UART_Transmit(Guart,"LISM330DLC Setup Ends\n\r", 25, HAL_MAX_DELAY);
 80023f2:	4b06      	ldr	r3, [pc, #24]	; (800240c <MRT_ISM330DLC_Setup+0xd4>)
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295
 80023fa:	2219      	movs	r2, #25
 80023fc:	490b      	ldr	r1, [pc, #44]	; (800242c <MRT_ISM330DLC_Setup+0xf4>)
 80023fe:	f006 fb04 	bl	8008a0a <HAL_UART_Transmit>
	}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20004fc8 	.word	0x20004fc8
 8002410:	080103e8 	.word	0x080103e8
 8002414:	080022c5 	.word	0x080022c5
 8002418:	080022ff 	.word	0x080022ff
 800241c:	200002a8 	.word	0x200002a8
 8002420:	08010404 	.word	0x08010404
 8002424:	0801041c 	.word	0x0801041c
 8002428:	200002a9 	.word	0x200002a9
 800242c:	08010424 	.word	0x08010424

08002430 <MRT_ISM330DLC_getAcceleration>:


/*
 * Get acceleration values
 */
void MRT_ISM330DLC_getAcceleration(int16_t data_raw_acceleration[3],float acceleration_mg[3]){
 8002430:	b590      	push	{r4, r7, lr}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
		ism330dlc_reg_t reg; //For some reason, this one has to be in the loop
		ism330dlc_status_reg_get(&dev_ctx, &reg.status_reg);
 800243a:	f107 030c 	add.w	r3, r7, #12
 800243e:	4619      	mov	r1, r3
 8002440:	481d      	ldr	r0, [pc, #116]	; (80024b8 <MRT_ISM330DLC_getAcceleration+0x88>)
 8002442:	f7ff fda5 	bl	8001f90 <ism330dlc_status_reg_get>

		if (reg.status_reg.gda) {
 8002446:	7b3b      	ldrb	r3, [r7, #12]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d02e      	beq.n	80024b0 <MRT_ISM330DLC_getAcceleration+0x80>
		/* Read magnetic field data */
		memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8002452:	2206      	movs	r2, #6
 8002454:	2100      	movs	r1, #0
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f009 fea0 	bl	800c19c <memset>
        ism330dlc_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4816      	ldr	r0, [pc, #88]	; (80024b8 <MRT_ISM330DLC_getAcceleration+0x88>)
 8002460:	f7ff fdca 	bl	8001ff8 <ism330dlc_acceleration_raw_get>
        acceleration_mg[0] = ism330dlc_from_fs2g_to_mg(
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fc9e 	bl	8001dac <ism330dlc_from_fs2g_to_mg>
 8002470:	eef0 7a40 	vmov.f32	s15, s0
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	edc3 7a00 	vstr	s15, [r3]
                               data_raw_acceleration[0]);
        acceleration_mg[1] = ism330dlc_from_fs2g_to_mg(
                               data_raw_acceleration[1]);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3302      	adds	r3, #2
        acceleration_mg[1] = ism330dlc_from_fs2g_to_mg(
 800247e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	1d1c      	adds	r4, r3, #4
 8002486:	4610      	mov	r0, r2
 8002488:	f7ff fc90 	bl	8001dac <ism330dlc_from_fs2g_to_mg>
 800248c:	eef0 7a40 	vmov.f32	s15, s0
 8002490:	edc4 7a00 	vstr	s15, [r4]
        acceleration_mg[2] = ism330dlc_from_fs2g_to_mg(
                               data_raw_acceleration[2]);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3304      	adds	r3, #4
        acceleration_mg[2] = ism330dlc_from_fs2g_to_mg(
 8002498:	f9b3 2000 	ldrsh.w	r2, [r3]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	f103 0408 	add.w	r4, r3, #8
 80024a2:	4610      	mov	r0, r2
 80024a4:	f7ff fc82 	bl	8001dac <ism330dlc_from_fs2g_to_mg>
 80024a8:	eef0 7a40 	vmov.f32	s15, s0
 80024ac:	edc4 7a00 	vstr	s15, [r4]
      }
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd90      	pop	{r4, r7, pc}
 80024b8:	20004edc 	.word	0x20004edc

080024bc <MRT_ISM330DLC_getTemperature>:


/*
 * Get temperature value
 */
void MRT_ISM330DLC_getTemperature(int16_t data_raw_temperature[1],float temperature_degC[1]){
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
	ism330dlc_reg_t reg; //For some reason, this one has to be in the loop
	ism330dlc_status_reg_get(&dev_ctx, &reg.status_reg);
 80024c6:	f107 030c 	add.w	r3, r7, #12
 80024ca:	4619      	mov	r1, r3
 80024cc:	4810      	ldr	r0, [pc, #64]	; (8002510 <MRT_ISM330DLC_getTemperature+0x54>)
 80024ce:	f7ff fd5f 	bl	8001f90 <ism330dlc_status_reg_get>
	if (reg.status_reg.tda) {
 80024d2:	7b3b      	ldrb	r3, [r7, #12]
 80024d4:	f003 0304 	and.w	r3, r3, #4
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d013      	beq.n	8002506 <MRT_ISM330DLC_getTemperature+0x4a>
		//Read temperature data
		memset(data_raw_temperature, 0x00, sizeof(int16_t));
 80024de:	2202      	movs	r2, #2
 80024e0:	2100      	movs	r1, #0
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f009 fe5a 	bl	800c19c <memset>
		ism330dlc_temperature_raw_get(&dev_ctx, data_raw_temperature);
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4809      	ldr	r0, [pc, #36]	; (8002510 <MRT_ISM330DLC_getTemperature+0x54>)
 80024ec:	f7ff fd61 	bl	8001fb2 <ism330dlc_temperature_raw_get>
		temperature_degC[0] = ism330dlc_from_lsb_to_celsius(data_raw_temperature[0]);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fc70 	bl	8001ddc <ism330dlc_from_lsb_to_celsius>
 80024fc:	eef0 7a40 	vmov.f32	s15, s0
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20004edc 	.word	0x20004edc

08002514 <MRT_ISM330DLC_getAngularRate>:


/*
 * Get angular rate values
 */
void MRT_ISM330DLC_getAngularRate(int16_t data_raw_angular_rate[3],float angular_rate_mdps[3]){
 8002514:	b590      	push	{r4, r7, lr}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
		ism330dlc_reg_t reg; //For some reason, this one has to be in the loop
		ism330dlc_status_reg_get(&dev_ctx, &reg.status_reg);
 800251e:	f107 030c 	add.w	r3, r7, #12
 8002522:	4619      	mov	r1, r3
 8002524:	481d      	ldr	r0, [pc, #116]	; (800259c <MRT_ISM330DLC_getAngularRate+0x88>)
 8002526:	f7ff fd33 	bl	8001f90 <ism330dlc_status_reg_get>

		if (reg.status_reg.xlda) {
 800252a:	7b3b      	ldrb	r3, [r7, #12]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d02e      	beq.n	8002594 <MRT_ISM330DLC_getAngularRate+0x80>
		/* Read magnetic field data */
		memset(data_raw_angular_rate, 0x00, 3 * sizeof(int16_t));
 8002536:	2206      	movs	r2, #6
 8002538:	2100      	movs	r1, #0
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f009 fe2e 	bl	800c19c <memset>
		ism330dlc_acceleration_raw_get(&dev_ctx, data_raw_angular_rate);
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4816      	ldr	r0, [pc, #88]	; (800259c <MRT_ISM330DLC_getAngularRate+0x88>)
 8002544:	f7ff fd58 	bl	8001ff8 <ism330dlc_acceleration_raw_get>
		angular_rate_mdps[0] = ism330dlc_from_fs2g_to_mg(
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff fc2c 	bl	8001dac <ism330dlc_from_fs2g_to_mg>
 8002554:	eef0 7a40 	vmov.f32	s15, s0
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	edc3 7a00 	vstr	s15, [r3]
		data_raw_angular_rate[0]);
		angular_rate_mdps[1] = ism330dlc_from_fs2g_to_mg(
		data_raw_angular_rate[1]);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3302      	adds	r3, #2
		angular_rate_mdps[1] = ism330dlc_from_fs2g_to_mg(
 8002562:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	1d1c      	adds	r4, r3, #4
 800256a:	4610      	mov	r0, r2
 800256c:	f7ff fc1e 	bl	8001dac <ism330dlc_from_fs2g_to_mg>
 8002570:	eef0 7a40 	vmov.f32	s15, s0
 8002574:	edc4 7a00 	vstr	s15, [r4]
		angular_rate_mdps[2] = ism330dlc_from_fs2g_to_mg(
		data_raw_angular_rate[2]);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3304      	adds	r3, #4
		angular_rate_mdps[2] = ism330dlc_from_fs2g_to_mg(
 800257c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	f103 0408 	add.w	r4, r3, #8
 8002586:	4610      	mov	r0, r2
 8002588:	f7ff fc10 	bl	8001dac <ism330dlc_from_fs2g_to_mg>
 800258c:	eef0 7a40 	vmov.f32	s15, s0
 8002590:	edc4 7a00 	vstr	s15, [r4]
		}

}
 8002594:	bf00      	nop
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	bd90      	pop	{r4, r7, pc}
 800259c:	20004edc 	.word	0x20004edc

080025a0 <_ZN7TwoWire5writeEi>:
    void onRequest( void (*)(void) );

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	4611      	mov	r1, r2
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	4798      	blx	r3
 80025ba:	4603      	mov	r3, r0
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <_Z12ISBDCallbackv>:

bool ISBDCallback() __attribute__((weak));
void ISBDConsoleCallback(IridiumSBD *device, char c) __attribute__((weak));
void ISBDDiagsCallback(IridiumSBD *device, char c) __attribute__((weak));

bool ISBDCallback() { return true; }
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	2301      	movs	r3, #1
 80025ca:	4618      	mov	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <_Z19ISBDConsoleCallbackP10IridiumSBDc>:
void ISBDConsoleCallback(IridiumSBD *device, char c) { }
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	70fb      	strb	r3, [r7, #3]
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <_Z17ISBDDiagsCallbackP10IridiumSBDc>:
void ISBDDiagsCallback(IridiumSBD *device, char c) { }
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <_ZN10IridiumSBD5beginEv>:



// Power on the RockBLOCK or return from sleep
int IridiumSBD::begin()
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <_ZN10IridiumSBD5beginEv+0x16>
      return ISBD_REENTRANT;
 8002616:	2309      	movs	r3, #9
 8002618:	e01b      	b.n	8002652 <_ZN10IridiumSBD5beginEv+0x4e>

   this->reentrant = true;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalBegin();
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 fa76 	bl	8002b14 <_ZN10IridiumSBD13internalBeginEv>
 8002628:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   // Absent a successful startup, keep the device turned off
   if (ret != ISBD_SUCCESS)
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00b      	beq.n	8002650 <_ZN10IridiumSBD5beginEv+0x4c>
   {
      if (this->useSerial)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <_ZN10IridiumSBD5beginEv+0x44>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fdb4 	bl	80031b0 <_ZN10IridiumSBD13endSerialPortEv>
      power(false);
 8002648:	2100      	movs	r1, #0
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 fcf6 	bl	800303c <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 8002650:	68fb      	ldr	r3, [r7, #12]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <_ZN10IridiumSBD5sleepEv>:
   return ret;
}

// Gracefully put device to lower power mode (if sleep pin provided)
int IridiumSBD::sleep()
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
   if (this->reentrant)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <_ZN10IridiumSBD5sleepEv+0x16>
      return ISBD_REENTRANT;
 800266c:	2309      	movs	r3, #9
 800266e:	e028      	b.n	80026c2 <_ZN10IridiumSBD5sleepEv+0x68>

   if (this->useSerial && (this->sleepPin == -1))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002676:	2b00      	cmp	r3, #0
 8002678:	d007      	beq.n	800268a <_ZN10IridiumSBD5sleepEv+0x30>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002684:	d101      	bne.n	800268a <_ZN10IridiumSBD5sleepEv+0x30>
      return ISBD_NO_SLEEP_PIN;
 8002686:	230b      	movs	r3, #11
 8002688:	e01b      	b.n	80026c2 <_ZN10IridiumSBD5sleepEv+0x68>

   this->reentrant = true;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
   int ret = internalSleep();
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 fbc8 	bl	8002e28 <_ZN10IridiumSBD13internalSleepEv>
 8002698:	60f8      	str	r0, [r7, #12]
   this->reentrant = false;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

   if (ret == ISBD_SUCCESS)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10b      	bne.n	80026c0 <_ZN10IridiumSBD5sleepEv+0x66>
   {
      if (this->useSerial)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <_ZN10IridiumSBD5sleepEv+0x5e>
         endSerialPort(); // Apollo3 v2.1 Serial fix
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fd7c 	bl	80031b0 <_ZN10IridiumSBD13endSerialPortEv>
      power(false); // power off
 80026b8:	2100      	movs	r1, #0
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fcbe 	bl	800303c <_ZN10IridiumSBD5powerEb>
   }

   return ret;
 80026c0:	68fb      	ldr	r3, [r7, #12]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <_ZN10IridiumSBD16enableRingAlertsEb>:
{
   this->msstmWorkaroundRequested = useWorkAround;
}

void IridiumSBD::enableRingAlerts(bool enable) // true to enable SBDRING alerts and RING signal pin
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	460b      	mov	r3, r1
 80026d4:	70fb      	strb	r3, [r7, #3]
   this->ringAlertsEnabled = enable;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
   if (enable)
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00e      	beq.n	8002702 <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
   {
      this->ringAsserted = false;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      if (!this->useSerial) // If we are using I2C, clear the ring indicator flag
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026f2:	f083 0301 	eor.w	r3, r3, #1
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <_ZN10IridiumSBD16enableRingAlertsEb+0x38>
      {
        clearRingIndicator();
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f9b3 	bl	8002a68 <_ZN10IridiumSBD18clearRingIndicatorEv>
      }
   }
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <_ZN10IridiumSBD13getSystemTimeER2tm>:

   return ret;
}

int IridiumSBD::getSystemTime(struct tm &tm)
{
 800270c:	b5b0      	push	{r4, r5, r7, lr}
 800270e:	b09c      	sub	sp, #112	; 0x70
 8002710:	af02      	add	r7, sp, #8
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
   char msstmResponseBuf[24];

   send(F("AT-MSSTM\r"));
 8002716:	2301      	movs	r3, #1
 8002718:	2201      	movs	r2, #1
 800271a:	493f      	ldr	r1, [pc, #252]	; (8002818 <_ZN10IridiumSBD13getSystemTimeER2tm+0x10c>)
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fd55 	bl	80031cc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(msstmResponseBuf, sizeof(msstmResponseBuf), "-MSSTM: "))
 8002722:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002726:	4b3d      	ldr	r3, [pc, #244]	; (800281c <_ZN10IridiumSBD13getSystemTimeER2tm+0x110>)
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	4b3d      	ldr	r3, [pc, #244]	; (8002820 <_ZN10IridiumSBD13getSystemTimeER2tm+0x114>)
 800272c:	2218      	movs	r2, #24
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 fb8c 	bl	8002e4c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8002734:	4603      	mov	r3, r0
 8002736:	f083 0301 	eor.w	r3, r3, #1
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d009      	beq.n	8002754 <_ZN10IridiumSBD13getSystemTimeER2tm+0x48>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 fc49 	bl	8002fd8 <_ZN10IridiumSBD9cancelledEv>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <_ZN10IridiumSBD13getSystemTimeER2tm+0x44>
 800274c:	2304      	movs	r3, #4
 800274e:	e05e      	b.n	800280e <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>
 8002750:	2303      	movs	r3, #3
 8002752:	e05c      	b.n	800280e <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   if (!isxdigit(msstmResponseBuf[0]))
 8002754:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002758:	4618      	mov	r0, r3
 800275a:	f009 fbc5 	bl	800bee8 <isxdigit>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <_ZN10IridiumSBD13getSystemTimeER2tm+0x5c>
      return ISBD_NO_NETWORK;
 8002764:	230c      	movs	r3, #12
 8002766:	e052      	b.n	800280e <_ZN10IridiumSBD13getSystemTimeER2tm+0x102>

   // Latest epoch began at May 11, 2014, at 14:23:55 UTC.
   struct tm epoch_start;
   epoch_start.tm_year = 2014 - 1900;
 8002768:	2372      	movs	r3, #114	; 0x72
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28
   epoch_start.tm_mon = 5 - 1;
 800276c:	2304      	movs	r3, #4
 800276e:	627b      	str	r3, [r7, #36]	; 0x24
   epoch_start.tm_mday = 11;
 8002770:	230b      	movs	r3, #11
 8002772:	623b      	str	r3, [r7, #32]
   epoch_start.tm_hour = 14;
 8002774:	230e      	movs	r3, #14
 8002776:	61fb      	str	r3, [r7, #28]
   epoch_start.tm_min = 23;
 8002778:	2317      	movs	r3, #23
 800277a:	61bb      	str	r3, [r7, #24]
   epoch_start.tm_sec = 55;
 800277c:	2337      	movs	r3, #55	; 0x37
 800277e:	617b      	str	r3, [r7, #20]

   unsigned long ticks_since_epoch = strtoul(msstmResponseBuf, NULL, 16);
 8002780:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002784:	2210      	movs	r2, #16
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f00a fee3 	bl	800d554 <strtoul>
 800278e:	6678      	str	r0, [r7, #100]	; 0x64
      seconds less than the equivalent ticks_since_epoch. Subtract that away and
      we'll be left with a small number that won't overflow when we scale by 90/1000.

      Many thanks to Scott Weldon for this suggestion.
   */
   unsigned long secs_since_epoch = (ticks_since_epoch / 1000) * 90;
 8002790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002792:	4a24      	ldr	r2, [pc, #144]	; (8002824 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 8002794:	fba2 2303 	umull	r2, r3, r2, r3
 8002798:	099b      	lsrs	r3, r3, #6
 800279a:	225a      	movs	r2, #90	; 0x5a
 800279c:	fb02 f303 	mul.w	r3, r2, r3
 80027a0:	663b      	str	r3, [r7, #96]	; 0x60
   unsigned long small_ticks = ticks_since_epoch - (secs_since_epoch / 90) * 1000;
 80027a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027a4:	085b      	lsrs	r3, r3, #1
 80027a6:	4a20      	ldr	r2, [pc, #128]	; (8002828 <_ZN10IridiumSBD13getSystemTimeER2tm+0x11c>)
 80027a8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ac:	095b      	lsrs	r3, r3, #5
 80027ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   secs_since_epoch += small_ticks * 90 / 1000;
 80027bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027be:	225a      	movs	r2, #90	; 0x5a
 80027c0:	fb02 f303 	mul.w	r3, r2, r3
 80027c4:	4a17      	ldr	r2, [pc, #92]	; (8002824 <_ZN10IridiumSBD13getSystemTimeER2tm+0x118>)
 80027c6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ca:	099b      	lsrs	r3, r3, #6
 80027cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027ce:	4413      	add	r3, r2
 80027d0:	663b      	str	r3, [r7, #96]	; 0x60

   time_t epoch_time = mktime(&epoch_start);
 80027d2:	f107 0314 	add.w	r3, r7, #20
 80027d6:	4618      	mov	r0, r3
 80027d8:	f009 fdc0 	bl	800c35c <mktime>
 80027dc:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
   time_t now = epoch_time + secs_since_epoch;
 80027e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027e2:	4618      	mov	r0, r3
 80027e4:	f04f 0100 	mov.w	r1, #0
 80027e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80027ec:	1884      	adds	r4, r0, r2
 80027ee:	eb41 0503 	adc.w	r5, r1, r3
 80027f2:	e9c7 4502 	strd	r4, r5, [r7, #8]
   memcpy(&tm, localtime(&now), sizeof tm);
 80027f6:	f107 0308 	add.w	r3, r7, #8
 80027fa:	4618      	mov	r0, r3
 80027fc:	f009 fb7c 	bl	800bef8 <localtime>
 8002800:	4603      	mov	r3, r0
 8002802:	2224      	movs	r2, #36	; 0x24
 8002804:	4619      	mov	r1, r3
 8002806:	6838      	ldr	r0, [r7, #0]
 8002808:	f009 fca0 	bl	800c14c <memcpy>
   return ISBD_SUCCESS;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3768      	adds	r7, #104	; 0x68
 8002812:	46bd      	mov	sp, r7
 8002814:	bdb0      	pop	{r4, r5, r7, pc}
 8002816:	bf00      	nop
 8002818:	08010464 	.word	0x08010464
 800281c:	0801047c 	.word	0x0801047c
 8002820:	08010470 	.word	0x08010470
 8002824:	10624dd3 	.word	0x10624dd3
 8002828:	b60b60b7 	.word	0xb60b60b7

0800282c <_ZN10IridiumSBD18getFirmwareVersionEPcj>:

int IridiumSBD::getFirmwareVersion(char *version, size_t bufferSize)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af02      	add	r7, sp, #8
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	607a      	str	r2, [r7, #4]
   if (bufferSize < 8)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b07      	cmp	r3, #7
 800283c:	d801      	bhi.n	8002842 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x16>
      return ISBD_RX_OVERFLOW;
 800283e:	2308      	movs	r3, #8
 8002840:	e01e      	b.n	8002880 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   send(F("AT+CGMR\r"));
 8002842:	2301      	movs	r3, #1
 8002844:	2201      	movs	r2, #1
 8002846:	4910      	ldr	r1, [pc, #64]	; (8002888 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x5c>)
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 fcbf 	bl	80031cc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse(version, bufferSize, "Call Processor Version: "))
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	4b0e      	ldr	r3, [pc, #56]	; (800288c <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x60>)
 8002852:	9300      	str	r3, [sp, #0]
 8002854:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x64>)
 8002856:	68b9      	ldr	r1, [r7, #8]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 faf7 	bl	8002e4c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 800285e:	4603      	mov	r3, r0
 8002860:	f083 0301 	eor.w	r3, r3, #1
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d009      	beq.n	800287e <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x52>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fbb4 	bl	8002fd8 <_ZN10IridiumSBD9cancelledEv>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x4e>
 8002876:	2304      	movs	r3, #4
 8002878:	e002      	b.n	8002880 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>
 800287a:	2303      	movs	r3, #3
 800287c:	e000      	b.n	8002880 <_ZN10IridiumSBD18getFirmwareVersionEPcj+0x54>

   return ISBD_SUCCESS;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	08010484 	.word	0x08010484
 800288c:	0801047c 	.word	0x0801047c
 8002890:	08010490 	.word	0x08010490

08002894 <_ZN10IridiumSBD21enableSuperCapChargerEb>:

void IridiumSBD::enableSuperCapCharger(bool enable)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	460b      	mov	r3, r1
 800289e:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the charger manually)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d004      	beq.n	80028b4 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x20>
  {
    diagprint(F("enableSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 80028aa:	4918      	ldr	r1, [pc, #96]	; (800290c <_ZN10IridiumSBD21enableSuperCapChargerEb+0x78>)
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 fd35 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 80028b2:	e028      	b.n	8002906 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x72>
  }

  // Enable/disable the supercapacitor charger by pulling its SHDN pin high/low
  check9603pins(); // Update IO_REGISTER
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f001 f813 	bl	80038e0 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 80028ba:	78fb      	ldrb	r3, [r7, #3]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00b      	beq.n	80028d8 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x44>
  {
    IO_REGISTER |= IO_SHDN; // Set the SHDN bit
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80028cc:	4313      	orrs	r3, r2
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80028d6:	e00f      	b.n	80028f8 <_ZN10IridiumSBD21enableSuperCapChargerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_SHDN; // Clear the SHDN bit
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80028de:	b25a      	sxtb	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 80028e6:	b25b      	sxtb	r3, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	b25b      	sxtb	r3, r3
 80028ec:	4013      	ands	r3, r2
 80028ee:	b25b      	sxtb	r3, r3
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80028fe:	4619      	mov	r1, r3
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f001 f828 	bl	8003956 <_ZN10IridiumSBD11set9603pinsEh>
}
 8002906:	3708      	adds	r7, #8
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	080104ac 	.word	0x080104ac

08002910 <_ZN10IridiumSBD20checkSuperCapChargerEv>:

bool IridiumSBD::checkSuperCapCharger()
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial (the user will have to check PGOOD manually)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <_ZN10IridiumSBD20checkSuperCapChargerEv+0x1e>
  {
    diagprint(F("checkSuperCapCharger is only valid when using I2C on the Qwiic Iridium\r\n"));
 8002922:	4912      	ldr	r1, [pc, #72]	; (800296c <_ZN10IridiumSBD20checkSuperCapChargerEv+0x5c>)
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 fcf9 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return(false);
 800292a:	2300      	movs	r3, #0
 800292c:	e01a      	b.n	8002964 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }

  // Check the status of the supercapacitor charger PGOOD pin
  check9603pins(); // Update IO_REGISTER
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 ffd6 	bl	80038e0 <_ZN10IridiumSBD13check9603pinsEv>
  if (IO_REGISTER &= IO_PGOOD) // If the PGOOD bit is set, return true
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
 8002940:	4013      	ands	r3, r2
 8002942:	b2da      	uxtb	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf14      	ite	ne
 8002954:	2301      	movne	r3, #1
 8002956:	2300      	moveq	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x52>
  {
    return(true);
 800295e:	2301      	movs	r3, #1
 8002960:	e000      	b.n	8002964 <_ZN10IridiumSBD20checkSuperCapChargerEv+0x54>
  }
  else
  {
    return(false);
 8002962:	2300      	movs	r3, #0
  }
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	080104f8 	.word	0x080104f8

08002970 <_ZN10IridiumSBD16enable9603NpowerEb>:

void IridiumSBD::enable9603Npower(bool enable)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N power manually)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002982:	2b00      	cmp	r3, #0
 8002984:	d004      	beq.n	8002990 <_ZN10IridiumSBD16enable9603NpowerEb+0x20>
  {
    diagprint(F("enable9603Npower is only valid when using I2C on the Qwiic Iridium\r\n"));
 8002986:	4918      	ldr	r1, [pc, #96]	; (80029e8 <_ZN10IridiumSBD16enable9603NpowerEb+0x78>)
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 fcc7 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 800298e:	e028      	b.n	80029e2 <_ZN10IridiumSBD16enable9603NpowerEb+0x72>
  }

  // Enable/disable power to the 9603N by pulling PWR_EN high/low
  check9603pins(); // Update IO_REGISTER
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 ffa5 	bl	80038e0 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8002996:	78fb      	ldrb	r3, [r7, #3]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00b      	beq.n	80029b4 <_ZN10IridiumSBD16enable9603NpowerEb+0x44>
  {
    IO_REGISTER |= IO_PWR_EN; // Set the PWR_EN bit
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 80029a8:	4313      	orrs	r3, r2
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80029b2:	e00f      	b.n	80029d4 <_ZN10IridiumSBD16enable9603NpowerEb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_PWR_EN; // Clear the PWR_EN bit
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80029ba:	b25a      	sxtb	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 80029c2:	b25b      	sxtb	r3, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	b25b      	sxtb	r3, r3
 80029c8:	4013      	ands	r3, r2
 80029ca:	b25b      	sxtb	r3, r3
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 80029da:	4619      	mov	r1, r3
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 ffba 	bl	8003956 <_ZN10IridiumSBD11set9603pinsEh>
}
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	08010544 	.word	0x08010544

080029ec <_ZN10IridiumSBD10enable9603Eb>:

void IridiumSBD::enable9603(bool enable)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	460b      	mov	r3, r1
 80029f6:	70fb      	strb	r3, [r7, #3]
  if (useSerial) // Do nothing if we are using serial (the user will have to enable the 9603N manually)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d004      	beq.n	8002a0c <_ZN10IridiumSBD10enable9603Eb+0x20>
  {
    diagprint(F("enable9603 is only valid when using I2C on the Qwiic Iridium\r\n"));
 8002a02:	4918      	ldr	r1, [pc, #96]	; (8002a64 <_ZN10IridiumSBD10enable9603Eb+0x78>)
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fc89 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8002a0a:	e028      	b.n	8002a5e <_ZN10IridiumSBD10enable9603Eb+0x72>
  }

  // Enable/disable the 9603 by pulling ON_OFF high/low
  check9603pins(); // Update IO_REGISTER
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 ff67 	bl	80038e0 <_ZN10IridiumSBD13check9603pinsEv>
  if (enable)
 8002a12:	78fb      	ldrb	r3, [r7, #3]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00b      	beq.n	8002a30 <_ZN10IridiumSBD10enable9603Eb+0x44>
  {
    IO_REGISTER |= IO_ON_OFF; // Set the ON_OFF bit
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8002a24:	4313      	orrs	r3, r2
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8002a2e:	e00f      	b.n	8002a50 <_ZN10IridiumSBD10enable9603Eb+0x64>
  }
  else
  {
    IO_REGISTER &= ~IO_ON_OFF; // Clear the ON_OFF bit
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8002a36:	b25a      	sxtb	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
 8002a3e:	b25b      	sxtb	r3, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	b25b      	sxtb	r3, r3
 8002a44:	4013      	ands	r3, r2
 8002a46:	b25b      	sxtb	r3, r3
 8002a48:	b2da      	uxtb	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
  set9603pins(IO_REGISTER); // Update the pins
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8002a56:	4619      	mov	r1, r3
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 ff7c 	bl	8003956 <_ZN10IridiumSBD11set9603pinsEh>
}
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	0801058c 	.word	0x0801058c

08002a68 <_ZN10IridiumSBD18clearRingIndicatorEv>:
    return(false);
  }
}

void IridiumSBD::clearRingIndicator()
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  if (useSerial) // Do nothing if we are using serial
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d004      	beq.n	8002a84 <_ZN10IridiumSBD18clearRingIndicatorEv+0x1c>
  {
    diagprint(F("clearRingIndicator is only valid when using I2C on the Qwiic Iridium\r\n"));
 8002a7a:	4913      	ldr	r1, [pc, #76]	; (8002ac8 <_ZN10IridiumSBD18clearRingIndicatorEv+0x60>)
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 fc4d 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
    return;
 8002a82:	e01d      	b.n	8002ac0 <_ZN10IridiumSBD18clearRingIndicatorEv+0x58>
  }

  // Clear the 9603 RI flag
  check9603pins(); // Update IO_REGISTER
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 ff2b 	bl	80038e0 <_ZN10IridiumSBD13check9603pinsEv>
  IO_REGISTER &= ~IO_RI; // Clear the RI bit
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8002a90:	b25a      	sxtb	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8002a98:	b25b      	sxtb	r3, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	b25b      	sxtb	r3, r3
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	b25b      	sxtb	r3, r3
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  set9603pins(IO_REGISTER); // Update the pins
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 ff4f 	bl	8003956 <_ZN10IridiumSBD11set9603pinsEh>
  this->ringAsserted = false; // Also clear the ringAsserted flag
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
}
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	0801065c 	.word	0x0801065c

08002acc <_ZN10IridiumSBD11isConnectedEv>:

//Returns true if the I2C device is connected
//Always returns true for serial
//boolean IridiumSBD::isConnected() TODO
bool IridiumSBD::isConnected()
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
   if (this->useSerial) // If we are using Serial
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <_ZN10IridiumSBD11isConnectedEv+0x16>
   {
		return true;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e013      	b.n	8002b0a <_ZN10IridiumSBD11isConnectedEv+0x3e>
   }
   else
   {
		wireport->beginTransmission((uint8_t)deviceaddress);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002aec:	4619      	mov	r1, r3
 8002aee:	4610      	mov	r0, r2
 8002af0:	f001 fc9c 	bl	800442c <_ZN7TwoWire17beginTransmissionEh>
		return (wireport->endTransmission() == 0); // Check that the device ack's
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 fce1 	bl	80044c0 <_ZN7TwoWire15endTransmissionEv>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf0c      	ite	eq
 8002b04:	2301      	moveq	r3, #1
 8002b06:	2300      	movne	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
   }
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <_ZN10IridiumSBD13internalBeginEv>:
/*
Private interface
*/

int IridiumSBD::internalBegin()
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b090      	sub	sp, #64	; 0x40
 8002b18:	af02      	add	r7, sp, #8
 8002b1a:	6078      	str	r0, [r7, #4]
   diagprint(F("Calling internalBegin\r\n"));
 8002b1c:	49b1      	ldr	r1, [pc, #708]	; (8002de4 <_ZN10IridiumSBD13internalBeginEv+0x2d0>)
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 fbfc 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (!this->asleep)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8002b2a:	f083 0301 	eor.w	r3, r3, #1
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <_ZN10IridiumSBD13internalBeginEv+0x24>
      return ISBD_ALREADY_AWAKE;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e150      	b.n	8002dda <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (!this->useSerial) // If we are using I2C
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b3e:	f083 0301 	eor.w	r3, r3, #1
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <_ZN10IridiumSBD13internalBeginEv+0x40>
   {
      check9603pins(); // Update IO_REGISTER with the status of the 9603 pins
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 fec9 	bl	80038e0 <_ZN10IridiumSBD13check9603pinsEv>
      check9603data(); // Get any waiting 9603 serial data
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fdee 	bl	8003730 <_ZN10IridiumSBD13check9603dataEv>
   }

   power(true); // power on
 8002b54:	2101      	movs	r1, #1
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fa70 	bl	800303c <_ZN10IridiumSBD5powerEb>

   bool modemAlive = false;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   unsigned long startupTime = 500; //ms
 8002b62:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002b66:	62fb      	str	r3, [r7, #44]	; 0x2c
   for (unsigned long start = millis(); millis() - start < startupTime;)
 8002b68:	f002 fa1a 	bl	8004fa0 <HAL_GetTick>
 8002b6c:	62b8      	str	r0, [r7, #40]	; 0x28
 8002b6e:	f002 fa17 	bl	8004fa0 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	bf8c      	ite	hi
 8002b7e:	2301      	movhi	r3, #1
 8002b80:	2300      	movls	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d007      	beq.n	8002b98 <_ZN10IridiumSBD13internalBeginEv+0x84>
      if (cancelled())
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 fa25 	bl	8002fd8 <_ZN10IridiumSBD9cancelledEv>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0ec      	beq.n	8002b6e <_ZN10IridiumSBD13internalBeginEv+0x5a>
         return ISBD_CANCELLED;
 8002b94:	2304      	movs	r3, #4
 8002b96:	e120      	b.n	8002dda <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   if (this->useSerial) // If we are using Serial
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d002      	beq.n	8002ba8 <_ZN10IridiumSBD13internalBeginEv+0x94>
      beginSerialPort(); // Apollo3 v2.1 Serial fix - begin the Serial port 500ms after power(true)
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 faf6 	bl	8003194 <_ZN10IridiumSBD15beginSerialPortEv>

   // Turn on modem and wait for a response from "AT" command to begin
   for (unsigned long start = millis(); !modemAlive && millis() - start < 1000UL * this->startupTimeout;)
 8002ba8:	f002 f9fa 	bl	8004fa0 <HAL_GetTick>
 8002bac:	6278      	str	r0, [r7, #36]	; 0x24
 8002bae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002bb2:	f083 0301 	eor.w	r3, r3, #1
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d010      	beq.n	8002bde <_ZN10IridiumSBD13internalBeginEv+0xca>
 8002bbc:	f002 f9f0 	bl	8004fa0 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	1ad2      	subs	r2, r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bd2:	fb03 f301 	mul.w	r3, r3, r1
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d201      	bcs.n	8002bde <_ZN10IridiumSBD13internalBeginEv+0xca>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <_ZN10IridiumSBD13internalBeginEv+0xcc>
 8002bde:	2300      	movs	r3, #0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d018      	beq.n	8002c16 <_ZN10IridiumSBD13internalBeginEv+0x102>
   {
      send(F("AT\r"));
 8002be4:	2301      	movs	r3, #1
 8002be6:	2201      	movs	r2, #1
 8002be8:	497f      	ldr	r1, [pc, #508]	; (8002de8 <_ZN10IridiumSBD13internalBeginEv+0x2d4>)
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 faee 	bl	80031cc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
      modemAlive = waitForATResponse();
 8002bf0:	4b7e      	ldr	r3, [pc, #504]	; (8002dec <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f926 	bl	8002e4c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (cancelled())
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f9e6 	bl	8002fd8 <_ZN10IridiumSBD9cancelledEv>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0cd      	beq.n	8002bae <_ZN10IridiumSBD13internalBeginEv+0x9a>
         return ISBD_CANCELLED;
 8002c12:	2304      	movs	r3, #4
 8002c14:	e0e1      	b.n	8002dda <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   if (!modemAlive)
 8002c16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002c1a:	f083 0301 	eor.w	r3, r3, #1
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <_ZN10IridiumSBD13internalBeginEv+0x11c>
   {
      diagprint(F("No modem detected.\r\n"));
 8002c24:	4972      	ldr	r1, [pc, #456]	; (8002df0 <_ZN10IridiumSBD13internalBeginEv+0x2dc>)
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 fb78 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      return ISBD_NO_MODEM_DETECTED;
 8002c2c:	2305      	movs	r3, #5
 8002c2e:	e0d4      	b.n	8002dda <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   }

   // The usual initialization sequence
   const char *strings[3] = { "ATE1\r", "AT&D0\r", "AT&K0\r" };
 8002c30:	4a70      	ldr	r2, [pc, #448]	; (8002df4 <_ZN10IridiumSBD13internalBeginEv+0x2e0>)
 8002c32:	f107 0310 	add.w	r3, r7, #16
 8002c36:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   for (int i=0; i<3; ++i)
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	633b      	str	r3, [r7, #48]	; 0x30
 8002c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	dc26      	bgt.n	8002c94 <_ZN10IridiumSBD13internalBeginEv+0x180>
   {
      send(strings[i]);
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002c4e:	4413      	add	r3, r2
 8002c50:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8002c54:	4619      	mov	r1, r3
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fb12 	bl	8003280 <_ZN10IridiumSBD4sendEPKc>
      if (!waitForATResponse())
 8002c5c:	4b63      	ldr	r3, [pc, #396]	; (8002dec <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	2300      	movs	r3, #0
 8002c62:	2200      	movs	r2, #0
 8002c64:	2100      	movs	r1, #0
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f8f0 	bl	8002e4c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	f083 0301 	eor.w	r3, r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d009      	beq.n	8002c8c <_ZN10IridiumSBD13internalBeginEv+0x178>
         return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 f9ad 	bl	8002fd8 <_ZN10IridiumSBD9cancelledEv>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <_ZN10IridiumSBD13internalBeginEv+0x174>
 8002c84:	2304      	movs	r3, #4
 8002c86:	e0a8      	b.n	8002dda <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e0a6      	b.n	8002dda <_ZN10IridiumSBD13internalBeginEv+0x2c6>
   for (int i=0; i<3; ++i)
 8002c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8e:	3301      	adds	r3, #1
 8002c90:	633b      	str	r3, [r7, #48]	; 0x30
 8002c92:	e7d5      	b.n	8002c40 <_ZN10IridiumSBD13internalBeginEv+0x12c>
   }

   // Enable or disable RING alerts as requested by user
   // By default they are on if a RING pin was supplied on constructor
   diagprint(F("Ring alerts are")); diagprint(ringAlertsEnabled ? F("") : F(" NOT")); diagprint(F(" enabled.\r\n"));
 8002c94:	4958      	ldr	r1, [pc, #352]	; (8002df8 <_ZN10IridiumSBD13internalBeginEv+0x2e4>)
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fb40 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <_ZN10IridiumSBD13internalBeginEv+0x196>
 8002ca6:	4b55      	ldr	r3, [pc, #340]	; (8002dfc <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8002ca8:	e000      	b.n	8002cac <_ZN10IridiumSBD13internalBeginEv+0x198>
 8002caa:	4b55      	ldr	r3, [pc, #340]	; (8002e00 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8002cac:	4619      	mov	r1, r3
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fb34 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8002cb4:	4953      	ldr	r1, [pc, #332]	; (8002e04 <_ZN10IridiumSBD13internalBeginEv+0x2f0>)
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fb30 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (ringAlertsEnabled) enableRingAlerts(true); // This will clear ringAsserted and the Ring Indicator flag
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d004      	beq.n	8002cd0 <_ZN10IridiumSBD13internalBeginEv+0x1bc>
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f7ff fcfe 	bl	80026ca <_ZN10IridiumSBD16enableRingAlertsEb>
 8002cce:	e00a      	b.n	8002ce6 <_ZN10IridiumSBD13internalBeginEv+0x1d2>
   else {
	   if (!this->useSerial) clearRingIndicator(); // If ring alerts are not enabled and using I2C, make sure the Ring Indicator flag is clear
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cd6:	f083 0301 	eor.w	r3, r3, #1
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <_ZN10IridiumSBD13internalBeginEv+0x1d2>
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f7ff fec1 	bl	8002a68 <_ZN10IridiumSBD18clearRingIndicatorEv>
   }

   send(ringAlertsEnabled ? F("AT+SBDMTA=1\r") : F("AT+SBDMTA=0\r"));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <_ZN10IridiumSBD13internalBeginEv+0x1e0>
 8002cf0:	4945      	ldr	r1, [pc, #276]	; (8002e08 <_ZN10IridiumSBD13internalBeginEv+0x2f4>)
 8002cf2:	e000      	b.n	8002cf6 <_ZN10IridiumSBD13internalBeginEv+0x1e2>
 8002cf4:	4945      	ldr	r1, [pc, #276]	; (8002e0c <_ZN10IridiumSBD13internalBeginEv+0x2f8>)
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fa66 	bl	80031cc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>
   if (!waitForATResponse())
 8002d00:	4b3a      	ldr	r3, [pc, #232]	; (8002dec <_ZN10IridiumSBD13internalBeginEv+0x2d8>)
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	2300      	movs	r3, #0
 8002d06:	2200      	movs	r2, #0
 8002d08:	2100      	movs	r1, #0
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f89e 	bl	8002e4c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f083 0301 	eor.w	r3, r3, #1
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d009      	beq.n	8002d30 <_ZN10IridiumSBD13internalBeginEv+0x21c>
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f95b 	bl	8002fd8 <_ZN10IridiumSBD9cancelledEv>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <_ZN10IridiumSBD13internalBeginEv+0x218>
 8002d28:	2304      	movs	r3, #4
 8002d2a:	e056      	b.n	8002dda <_ZN10IridiumSBD13internalBeginEv+0x2c6>
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e054      	b.n	8002dda <_ZN10IridiumSBD13internalBeginEv+0x2c6>

   // Decide whether the internal MSSTM workaround should be enforced on TX/RX
   // By default it is unless the firmware rev is >= TA13001
   char version[8];
   int ret = getFirmwareVersion(version, sizeof(version));
 8002d30:	f107 0308 	add.w	r3, r7, #8
 8002d34:	2208      	movs	r2, #8
 8002d36:	4619      	mov	r1, r3
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff fd77 	bl	800282c <_ZN10IridiumSBD18getFirmwareVersionEPcj>
 8002d3e:	6238      	str	r0, [r7, #32]
   if (ret != ISBD_SUCCESS)
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d008      	beq.n	8002d58 <_ZN10IridiumSBD13internalBeginEv+0x244>
   {
      diagprint(F("Unknown FW version\r\n"));
 8002d46:	4932      	ldr	r1, [pc, #200]	; (8002e10 <_ZN10IridiumSBD13internalBeginEv+0x2fc>)
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fae7 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      msstmWorkaroundRequested = true;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002d56:	e027      	b.n	8002da8 <_ZN10IridiumSBD13internalBeginEv+0x294>
   }
   else
   {
      diagprint(F("Firmware version is ")); diagprint(version); diagprint(F("\r\n"));
 8002d58:	492e      	ldr	r1, [pc, #184]	; (8002e14 <_ZN10IridiumSBD13internalBeginEv+0x300>)
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fade 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8002d60:	f107 0308 	add.w	r3, r7, #8
 8002d64:	4619      	mov	r1, r3
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fafe 	bl	8003368 <_ZN10IridiumSBD9diagprintEPKc>
 8002d6c:	492a      	ldr	r1, [pc, #168]	; (8002e18 <_ZN10IridiumSBD13internalBeginEv+0x304>)
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fad4 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (version[0] == 'T' && version[1] == 'A')
 8002d74:	7a3b      	ldrb	r3, [r7, #8]
 8002d76:	2b54      	cmp	r3, #84	; 0x54
 8002d78:	d116      	bne.n	8002da8 <_ZN10IridiumSBD13internalBeginEv+0x294>
 8002d7a:	7a7b      	ldrb	r3, [r7, #9]
 8002d7c:	2b41      	cmp	r3, #65	; 0x41
 8002d7e:	d113      	bne.n	8002da8 <_ZN10IridiumSBD13internalBeginEv+0x294>
      {
         unsigned long ver = strtoul(version + 2, NULL, 10);
 8002d80:	f107 0308 	add.w	r3, r7, #8
 8002d84:	3302      	adds	r3, #2
 8002d86:	220a      	movs	r2, #10
 8002d88:	2100      	movs	r1, #0
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f00a fbe2 	bl	800d554 <strtoul>
 8002d90:	61f8      	str	r0, [r7, #28]
         msstmWorkaroundRequested = ver < ISBD_MSSTM_WORKAROUND_FW_VER;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	bf94      	ite	ls
 8002d9c:	2301      	movls	r3, #1
 8002d9e:	2300      	movhi	r3, #0
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      }
   }
   diagprint(F("MSSTM workaround is")); diagprint(msstmWorkaroundRequested ? F("") : F(" NOT")); diagprint(F(" enforced.\r\n"));
 8002da8:	491c      	ldr	r1, [pc, #112]	; (8002e1c <_ZN10IridiumSBD13internalBeginEv+0x308>)
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 fab6 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <_ZN10IridiumSBD13internalBeginEv+0x2aa>
 8002dba:	4b10      	ldr	r3, [pc, #64]	; (8002dfc <_ZN10IridiumSBD13internalBeginEv+0x2e8>)
 8002dbc:	e000      	b.n	8002dc0 <_ZN10IridiumSBD13internalBeginEv+0x2ac>
 8002dbe:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <_ZN10IridiumSBD13internalBeginEv+0x2ec>)
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 faaa 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
 8002dc8:	4915      	ldr	r1, [pc, #84]	; (8002e20 <_ZN10IridiumSBD13internalBeginEv+0x30c>)
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 faa6 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   // Done!
   diagprint(F("InternalBegin: success!\r\n"));
 8002dd0:	4914      	ldr	r1, [pc, #80]	; (8002e24 <_ZN10IridiumSBD13internalBeginEv+0x310>)
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 faa2 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   return ISBD_SUCCESS;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3738      	adds	r7, #56	; 0x38
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	0801077c 	.word	0x0801077c
 8002de8:	08010794 	.word	0x08010794
 8002dec:	0801047c 	.word	0x0801047c
 8002df0:	08010798 	.word	0x08010798
 8002df4:	0801086c 	.word	0x0801086c
 8002df8:	080107b0 	.word	0x080107b0
 8002dfc:	080107c0 	.word	0x080107c0
 8002e00:	080107c4 	.word	0x080107c4
 8002e04:	080107cc 	.word	0x080107cc
 8002e08:	080107d8 	.word	0x080107d8
 8002e0c:	080107e8 	.word	0x080107e8
 8002e10:	080107f8 	.word	0x080107f8
 8002e14:	08010810 	.word	0x08010810
 8002e18:	08010828 	.word	0x08010828
 8002e1c:	0801082c 	.word	0x0801082c
 8002e20:	08010840 	.word	0x08010840
 8002e24:	08010850 	.word	0x08010850

08002e28 <_ZN10IridiumSBD13internalSleepEv>:
   okToProceed = isxdigit(msstmResponseBuf[0]);
   return ISBD_SUCCESS;
}

int IridiumSBD::internalSleep()
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
   if (this->asleep)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <_ZN10IridiumSBD13internalSleepEv+0x16>
      return ISBD_IS_ASLEEP;
 8002e3a:	230a      	movs	r3, #10
 8002e3c:	e000      	b.n	8002e40 <_ZN10IridiumSBD13internalSleepEv+0x18>

   if (!waitForATResponse())
      return cancelled() ? ISBD_CANCELLED : ISBD_PROTOCOL_ERROR;
#endif

   return ISBD_SUCCESS;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_>:

// Wait for response from previous AT command.  This process terminates when "terminator" string is seen or upon timeout.
// If "prompt" string is provided (example "+CSQ:"), then all characters following prompt up to the next CRLF are
// stored in response buffer for later parsing by caller.
bool IridiumSBD::waitForATResponse(char *response, int responseSize, const char *prompt, const char *terminator)
{
 8002e4c:	b590      	push	{r4, r7, lr}
 8002e4e:	b08b      	sub	sp, #44	; 0x2c
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	603b      	str	r3, [r7, #0]
   diagprint(F("Waiting for response "));
 8002e5a:	495d      	ldr	r1, [pc, #372]	; (8002fd0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x184>)
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f000 fa5d 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   diagprint(terminator);
 8002e62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 fa7f 	bl	8003368 <_ZN10IridiumSBD9diagprintEPKc>
   HAL_UART_Transmit(&(this->uart),(uint8_t*) terminator, strlen(terminator), HAL_MAX_DELAY); //TODO doesn't print otherwise
 8002e6a:	68fc      	ldr	r4, [r7, #12]
 8002e6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002e6e:	f7fd f9d9 	bl	8000224 <strlen>
 8002e72:	4603      	mov	r3, r0
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	f005 fdc4 	bl	8008a0a <HAL_UART_Transmit>
   diagprint(F("\r\n"));
 8002e82:	4954      	ldr	r1, [pc, #336]	; (8002fd4 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x188>)
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 fa49 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>

   if (response)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x50>
      memset(response, 0, responseSize);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	461a      	mov	r2, r3
 8002e94:	2100      	movs	r1, #0
 8002e96:	68b8      	ldr	r0, [r7, #8]
 8002e98:	f009 f980 	bl	800c19c <memset>

   int matchPromptPos = 0; // Matches chars in prompt
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
   int matchTerminatorPos = 0; // Matches chars in terminator
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	623b      	str	r3, [r7, #32]
   enum {LOOKING_FOR_PROMPT, GATHERING_RESPONSE, LOOKING_FOR_TERMINATOR};
   int promptState = prompt ? LOOKING_FOR_PROMPT : LOOKING_FOR_TERMINATOR;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x62>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e000      	b.n	8002eb0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x64>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	61fb      	str	r3, [r7, #28]
   //consoleprint(F("<< ")); //TODO If we comment out this it looks cleaner in the serial
   for (unsigned long start=millis(); millis() - start < 1000UL * atTimeout;)
 8002eb2:	f002 f875 	bl	8004fa0 <HAL_GetTick>
 8002eb6:	61b8      	str	r0, [r7, #24]
 8002eb8:	f002 f872 	bl	8004fa0 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	1ad2      	subs	r2, r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002ec8:	4619      	mov	r1, r3
 8002eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ece:	fb03 f301 	mul.w	r3, r3, r1
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	bf34      	ite	cc
 8002ed6:	2301      	movcc	r3, #1
 8002ed8:	2300      	movcs	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d072      	beq.n	8002fc6 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17a>
   {
      if (cancelled())
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f000 f879 	bl	8002fd8 <_ZN10IridiumSBD9cancelledEv>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
         return false;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e06b      	b.n	8002fc8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>

      while (filteredavailable() > 0)
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 fbbb 	bl	800366c <_ZN10IridiumSBD17filteredavailableEv>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bfcc      	ite	gt
 8002efc:	2301      	movgt	r3, #1
 8002efe:	2300      	movle	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0d8      	beq.n	8002eb8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x6c>
      {
         char c = filteredread();
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fbcc 	bl	80036a4 <_ZN10IridiumSBD12filteredreadEv>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	75fb      	strb	r3, [r7, #23]
         if (prompt)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d03b      	beq.n	8002f8e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
         {
            switch (promptState)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xd8>
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d01d      	beq.n	8002f5e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x112>
 8002f22:	e034      	b.n	8002f8e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
            {
            case LOOKING_FOR_PROMPT:
               if (c == prompt[matchPromptPos])
 8002f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	4413      	add	r3, r2
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	7dfa      	ldrb	r2, [r7, #23]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d10b      	bne.n	8002f4a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xfe>
               {
                  ++matchPromptPos;
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	3301      	adds	r3, #1
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
                  if (prompt[matchPromptPos] == '\0')
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d121      	bne.n	8002f88 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
                     promptState = GATHERING_RESPONSE;
 8002f44:	2301      	movs	r3, #1
 8002f46:	61fb      	str	r3, [r7, #28]
               else
               {
                  matchPromptPos = c == prompt[0] ? 1 : 0;
               }

               break;
 8002f48:	e01e      	b.n	8002f88 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
                  matchPromptPos = c == prompt[0] ? 1 : 0;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	7dfa      	ldrb	r2, [r7, #23]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d101      	bne.n	8002f58 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10c>
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x10e>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
               break;
 8002f5c:	e014      	b.n	8002f88 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x13c>
            case GATHERING_RESPONSE: // gathering response from end of prompt to first \r
               if (response)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d013      	beq.n	8002f8c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
               {
                  if (c == '\r' || responseSize < 2)
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	2b0d      	cmp	r3, #13
 8002f68:	d002      	beq.n	8002f70 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x124>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	dc02      	bgt.n	8002f76 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x12a>
                  {
                     promptState = LOOKING_FOR_TERMINATOR;
 8002f70:	2302      	movs	r3, #2
 8002f72:	61fb      	str	r3, [r7, #28]
                  {
                     *response++ = c;
                     responseSize--;
                  }
               }
               break;
 8002f74:	e00a      	b.n	8002f8c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
                     *response++ = c;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	60ba      	str	r2, [r7, #8]
 8002f7c:	7dfa      	ldrb	r2, [r7, #23]
 8002f7e:	701a      	strb	r2, [r3, #0]
                     responseSize--;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	607b      	str	r3, [r7, #4]
               break;
 8002f86:	e001      	b.n	8002f8c <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x140>
               break;
 8002f88:	bf00      	nop
 8002f8a:	e000      	b.n	8002f8e <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x142>
               break;
 8002f8c:	bf00      	nop
            }
         }

         if (c == terminator[matchTerminatorPos])
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f92:	4413      	add	r3, r2
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	7dfa      	ldrb	r2, [r7, #23]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d10a      	bne.n	8002fb2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x166>
         {
            ++matchTerminatorPos;
 8002f9c:	6a3b      	ldr	r3, [r7, #32]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	623b      	str	r3, [r7, #32]
            if (terminator[matchTerminatorPos] == '\0')
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fa6:	4413      	add	r3, r2
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1a0      	bne.n	8002ef0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
               return true;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e00a      	b.n	8002fc8 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x17c>
         }
         else
         {
            matchTerminatorPos = c == terminator[0] ? 1 : 0;
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	7dfa      	ldrb	r2, [r7, #23]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d101      	bne.n	8002fc0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x174>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0x176>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	623b      	str	r3, [r7, #32]
      while (filteredavailable() > 0)
 8002fc4:	e794      	b.n	8002ef0 <_ZN10IridiumSBD17waitForATResponseEPciPKcS2_+0xa4>
         }
      } // while (filteredavailable() > 0)
   } // timer loop
   return false;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	372c      	adds	r7, #44	; 0x2c
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd90      	pop	{r4, r7, pc}
 8002fd0:	080109b0 	.word	0x080109b0
 8002fd4:	08010828 	.word	0x08010828

08002fd8 <_ZN10IridiumSBD9cancelledEv>:

bool IridiumSBD::cancelled()
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
   if (this->useSerial)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d019      	beq.n	800301e <_ZN10IridiumSBD9cancelledEv+0x46>
   {
	   //TODO For some reason when using digitalRead here it didn't work so simply replaced with HAL function
	   //if ((ringPin != -1) && digitalRead(ringPin) == LOW)
	     if ((ringPin != -1) && HAL_GPIO_ReadPin(ringPin_GPIO_Port,ringPin_Pin) == LOW)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff4:	d008      	beq.n	8003008 <_ZN10IridiumSBD9cancelledEv+0x30>
 8002ff6:	2110      	movs	r1, #16
 8002ff8:	480e      	ldr	r0, [pc, #56]	; (8003034 <_ZN10IridiumSBD9cancelledEv+0x5c>)
 8002ffa:	f002 faa9 	bl	8005550 <HAL_GPIO_ReadPin>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <_ZN10IridiumSBD9cancelledEv+0x30>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <_ZN10IridiumSBD9cancelledEv+0x32>
 8003008:	2300      	movs	r3, #0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d007      	beq.n	800301e <_ZN10IridiumSBD9cancelledEv+0x46>
	  {
         ringAsserted = true;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		 diagprint(F("ringPin seen!\r\n"));
 8003016:	4908      	ldr	r1, [pc, #32]	; (8003038 <_ZN10IridiumSBD9cancelledEv+0x60>)
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f97f 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
	  }
   }

   return !ISBDCallback();
 800301e:	f7ff fad1 	bl	80025c4 <_Z12ISBDCallbackv>
 8003022:	4603      	mov	r3, r0
 8003024:	f083 0301 	eor.w	r3, r3, #1
 8003028:	b2db      	uxtb	r3, r3
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40020800 	.word	0x40020800
 8003038:	080109c8 	.word	0x080109c8

0800303c <_ZN10IridiumSBD5powerEb>:

   return rxOverflow ? ISBD_RX_OVERFLOW : ISBD_SUCCESS;
}

void IridiumSBD::power(bool on)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	70fb      	strb	r3, [r7, #3]
   this->asleep = !on;
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	f083 0301 	eor.w	r3, r3, #1
 800304e:	b2da      	uxtb	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

   if (this->useSerial)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800305c:	2b00      	cmp	r3, #0
 800305e:	d011      	beq.n	8003084 <_ZN10IridiumSBD5powerEb+0x48>
   {
      if (this->sleepPin == -1)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306a:	d04c      	beq.n	8003106 <_ZN10IridiumSBD5powerEb+0xca>
      {
         return;
      }
      else
      {
          if (this->sleepPinConfigured == false)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <_ZN10IridiumSBD5powerEb+0x48>
          {
             configureSleepPin();
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f84e 	bl	8003118 <_ZN10IridiumSBD17configureSleepPinEv>
             this->sleepPinConfigured = true;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
          }
      }
   }

   if (on)
 8003084:	78fb      	ldrb	r3, [r7, #3]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d018      	beq.n	80030bc <_ZN10IridiumSBD5powerEb+0x80>
   {
      diagprint(F("Powering on modem...\r\n"));
 800308a:	4921      	ldr	r1, [pc, #132]	; (8003110 <_ZN10IridiumSBD5powerEb+0xd4>)
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f945 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003098:	2b00      	cmp	r3, #0
 800309a:	d004      	beq.n	80030a6 <_ZN10IridiumSBD5powerEb+0x6a>
      {
         setSleepPin(HIGH); // HIGH = awake
 800309c:	2101      	movs	r1, #1
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f850 	bl	8003144 <_ZN10IridiumSBD11setSleepPinEh>
 80030a4:	e003      	b.n	80030ae <_ZN10IridiumSBD5powerEb+0x72>
      }
      else
      {
         enable9603(true);
 80030a6:	2101      	movs	r1, #1
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7ff fc9f 	bl	80029ec <_ZN10IridiumSBD10enable9603Eb>
      }
      lastPowerOnTime = millis();
 80030ae:	f001 ff77 	bl	8004fa0 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80030ba:	e025      	b.n	8003108 <_ZN10IridiumSBD5powerEb+0xcc>
   }
   else
   {
      // Best Practices Guide suggests waiting at least 2 seconds
      // before powering off again
      unsigned long elapsed = millis() - lastPowerOnTime;
 80030bc:	f001 ff70 	bl	8004fa0 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	60fb      	str	r3, [r7, #12]
      if (elapsed < 2000UL)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80030d2:	d205      	bcs.n	80030e0 <_ZN10IridiumSBD5powerEb+0xa4>
         //delay(2000UL - elapsed); TODO
    	  HAL_Delay(2000UL - elapsed);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 80030da:	4618      	mov	r0, r3
 80030dc:	f001 ff6c 	bl	8004fb8 <HAL_Delay>

      diagprint(F("Powering off modem...\r\n"));
 80030e0:	490c      	ldr	r1, [pc, #48]	; (8003114 <_ZN10IridiumSBD5powerEb+0xd8>)
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f91a 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
      if (this->useSerial)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d004      	beq.n	80030fc <_ZN10IridiumSBD5powerEb+0xc0>
      {
         setSleepPin(LOW); // LOW = asleep
 80030f2:	2100      	movs	r1, #0
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f825 	bl	8003144 <_ZN10IridiumSBD11setSleepPinEh>
 80030fa:	e005      	b.n	8003108 <_ZN10IridiumSBD5powerEb+0xcc>
      }
      else
      {
         enable9603(false);
 80030fc:	2100      	movs	r1, #0
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff fc74 	bl	80029ec <_ZN10IridiumSBD10enable9603Eb>
 8003104:	e000      	b.n	8003108 <_ZN10IridiumSBD5powerEb+0xcc>
         return;
 8003106:	bf00      	nop
      }
   }
}
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	08010a1c 	.word	0x08010a1c
 8003114:	08010a34 	.word	0x08010a34

08003118 <_ZN10IridiumSBD17configureSleepPinEv>:

void IridiumSBD::configureSleepPin()
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
	//pinMode(this->sleepPin, OUTPUT); // Make the sleep pin an output TODO (doesnt work with this)
   pinMode(sleepPin, OUTPUT_PP); // Make the sleep pin an output
 8003120:	2200      	movs	r2, #0
 8003122:	2108      	movs	r1, #8
 8003124:	4805      	ldr	r0, [pc, #20]	; (800313c <_ZN10IridiumSBD17configureSleepPinEv+0x24>)
 8003126:	f000 fed3 	bl	8003ed0 <_Z10st_pinModeP12GPIO_TypeDefhi>
   diagprint(F("configureSleepPin: sleepPin configured\r\n"));
 800312a:	4905      	ldr	r1, [pc, #20]	; (8003140 <_ZN10IridiumSBD17configureSleepPinEv+0x28>)
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f8f5 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40020800 	.word	0x40020800
 8003140:	08010a4c 	.word	0x08010a4c

08003144 <_ZN10IridiumSBD11setSleepPinEh>:

void IridiumSBD::setSleepPin(uint8_t enable)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(sleepPin_GPIO_Port,sleepPin_Pin,GPIO_PIN_SET);
 8003150:	2201      	movs	r2, #1
 8003152:	2108      	movs	r1, #8
 8003154:	480b      	ldr	r0, [pc, #44]	; (8003184 <_ZN10IridiumSBD11setSleepPinEh+0x40>)
 8003156:	f002 fa13 	bl	8005580 <HAL_GPIO_WritePin>
   //digitalWrite(this->sleepPin, enable); // HIGH = awake, LOW = asleep TODO
   diagprint(F("setSleepPin: sleepPin set "));
 800315a:	490b      	ldr	r1, [pc, #44]	; (8003188 <_ZN10IridiumSBD11setSleepPinEh+0x44>)
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f8dd 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   if (enable == HIGH)
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d104      	bne.n	8003172 <_ZN10IridiumSBD11setSleepPinEh+0x2e>
      diagprint(F("HIGH\r\n"));
 8003168:	4908      	ldr	r1, [pc, #32]	; (800318c <_ZN10IridiumSBD11setSleepPinEh+0x48>)
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f8d6 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
   else
      diagprint(F("LOW\r\n"));
}
 8003170:	e003      	b.n	800317a <_ZN10IridiumSBD11setSleepPinEh+0x36>
      diagprint(F("LOW\r\n"));
 8003172:	4907      	ldr	r1, [pc, #28]	; (8003190 <_ZN10IridiumSBD11setSleepPinEh+0x4c>)
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f8d1 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40020800 	.word	0x40020800
 8003188:	08010a78 	.word	0x08010a78
 800318c:	08010a94 	.word	0x08010a94
 8003190:	08010a9c 	.word	0x08010a9c

08003194 <_ZN10IridiumSBD15beginSerialPortEv>:

void IridiumSBD::beginSerialPort()
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::beginSerialPort\r\n"));
 800319c:	4903      	ldr	r1, [pc, #12]	; (80031ac <_ZN10IridiumSBD15beginSerialPortEv+0x18>)
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f8bc 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	08010aa4 	.word	0x08010aa4

080031b0 <_ZN10IridiumSBD13endSerialPortEv>:

void IridiumSBD::endSerialPort()
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
   diagprint(F("IridiumSBD::endSerialPort\r\n"));
 80031b8:	4903      	ldr	r1, [pc, #12]	; (80031c8 <_ZN10IridiumSBD13endSerialPortEv+0x18>)
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f8ae 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	08010ac4 	.word	0x08010ac4

080031cc <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb>:

void IridiumSBD::send(FlashString str, bool beginLine, bool endLine)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	4611      	mov	r1, r2
 80031d8:	461a      	mov	r2, r3
 80031da:	460b      	mov	r3, r1
 80031dc:	71fb      	strb	r3, [r7, #7]
 80031de:	4613      	mov	r3, r2
 80031e0:	71bb      	strb	r3, [r7, #6]
   if (beginLine)
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x24>
      consoleprint(F(">> "));
 80031e8:	4922      	ldr	r1, [pc, #136]	; (8003274 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xa8>)
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f8de 	bl	80033ac <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 80031f0:	68b9      	ldr	r1, [r7, #8]
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f8da 	bl	80033ac <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (endLine)
 80031f8:	79bb      	ldrb	r3, [r7, #6]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x3a>
      consoleprint(F("\r\n"));
 80031fe:	491e      	ldr	r1, [pc, #120]	; (8003278 <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xac>)
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f8d3 	bl	80033ac <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800320c:	2b00      	cmp	r3, #0
 800320e:	d006      	beq.n	800321e <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x52>
   {
      stream->print(str);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	4618      	mov	r0, r3
 8003218:	f001 f83c 	bl	8004294 <_ZN5Print5printEPK19__FlashStringHelper>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 800321c:	e025      	b.n	800326a <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
      wireport->beginTransmission((uint8_t)deviceaddress);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003228:	4619      	mov	r1, r3
 800322a:	4610      	mov	r0, r2
 800322c:	f001 f8fe 	bl	800442c <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003234:	21ff      	movs	r1, #255	; 0xff
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff f9b2 	bl	80025a0 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003240:	68b9      	ldr	r1, [r7, #8]
 8003242:	4618      	mov	r0, r3
 8003244:	f001 f826 	bl	8004294 <_ZN5Print5printEPK19__FlashStringHelper>
      if (wireport->endTransmission() != 0) //Release bus
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324c:	4618      	mov	r0, r3
 800324e:	f001 f937 	bl	80044c0 <_ZN7TwoWire15endTransmissionEv>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf14      	ite	ne
 8003258:	2301      	movne	r3, #1
 800325a:	2300      	moveq	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0x9e>
         diagprint(F("I2C write was not successful!\r\n"));
 8003262:	4906      	ldr	r1, [pc, #24]	; (800327c <_ZN10IridiumSBD4sendEPK19__FlashStringHelperbb+0xb0>)
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f859 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	08010ae0 	.word	0x08010ae0
 8003278:	08010828 	.word	0x08010828
 800327c:	080108a8 	.word	0x080108a8

08003280 <_ZN10IridiumSBD4sendEPKc>:

void IridiumSBD::send(const char *str)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
   consoleprint(F(">> "));
 800328a:	4921      	ldr	r1, [pc, #132]	; (8003310 <_ZN10IridiumSBD4sendEPKc+0x90>)
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f88d 	bl	80033ac <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   consoleprint(str);
 8003292:	6839      	ldr	r1, [r7, #0]
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f8af 	bl	80033f8 <_ZN10IridiumSBD12consoleprintEPKc>
   consoleprint(F("\r\n"));
 800329a:	491e      	ldr	r1, [pc, #120]	; (8003314 <_ZN10IridiumSBD4sendEPKc+0x94>)
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f885 	bl	80033ac <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>
   if (this->useSerial)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d006      	beq.n	80032ba <_ZN10IridiumSBD4sendEPKc+0x3a>
   {
      stream->print(str);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b0:	6839      	ldr	r1, [r7, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fffc 	bl	80042b0 <_ZN5Print5printEPKc>
      wireport->write(DATA_REG); // Point to the 'serial register'
      wireport->print(str);
      if (wireport->endTransmission() != 0) //Release bus
         diagprint(F("I2C write was not successful!\r\n"));
   }
}
 80032b8:	e025      	b.n	8003306 <_ZN10IridiumSBD4sendEPKc+0x86>
      wireport->beginTransmission((uint8_t)deviceaddress);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032c4:	4619      	mov	r1, r3
 80032c6:	4610      	mov	r0, r2
 80032c8:	f001 f8b0 	bl	800442c <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the 'serial register'
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d0:	21ff      	movs	r1, #255	; 0xff
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff f964 	bl	80025a0 <_ZN7TwoWire5writeEi>
      wireport->print(str);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032dc:	6839      	ldr	r1, [r7, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 ffe6 	bl	80042b0 <_ZN5Print5printEPKc>
      if (wireport->endTransmission() != 0) //Release bus
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e8:	4618      	mov	r0, r3
 80032ea:	f001 f8e9 	bl	80044c0 <_ZN7TwoWire15endTransmissionEv>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf14      	ite	ne
 80032f4:	2301      	movne	r3, #1
 80032f6:	2300      	moveq	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <_ZN10IridiumSBD4sendEPKc+0x86>
         diagprint(F("I2C write was not successful!\r\n"));
 80032fe:	4906      	ldr	r1, [pc, #24]	; (8003318 <_ZN10IridiumSBD4sendEPKc+0x98>)
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f80b 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8003306:	bf00      	nop
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	08010ae0 	.word	0x08010ae0
 8003314:	08010828 	.word	0x08010828
 8003318:	080108a8 	.word	0x080108a8

0800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>:
         diagprint(F("I2C write was not successful!\r\n"));
   }
}

void IridiumSBD::diagprint(FlashString str)
{
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	60fa      	str	r2, [r7, #12]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 8003334:	7afb      	ldrb	r3, [r7, #11]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d005      	beq.n	8003346 <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0x2a>
      ISBDDiagsCallback(this, c);
 800333a:	7afb      	ldrb	r3, [r7, #11]
 800333c:	4619      	mov	r1, r3
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff f954 	bl	80025ec <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   }
 8003344:	e7f1      	b.n	800332a <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 8003346:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*)str), HAL_MAX_DELAY);
 8003348:	687c      	ldr	r4, [r7, #4]
 800334a:	6838      	ldr	r0, [r7, #0]
 800334c:	f7fc ff6a 	bl	8000224 <strlen>
 8003350:	4603      	mov	r3, r0
 8003352:	b29a      	uxth	r2, r3
 8003354:	f04f 33ff 	mov.w	r3, #4294967295
 8003358:	6839      	ldr	r1, [r7, #0]
 800335a:	4620      	mov	r0, r4
 800335c:	f005 fb55 	bl	8008a0a <HAL_UART_Transmit>
}
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	bd90      	pop	{r4, r7, pc}

08003368 <_ZN10IridiumSBD9diagprintEPKc>:

void IridiumSBD::diagprint(const char *str)
{
 8003368:	b590      	push	{r4, r7, lr}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
   while (*str)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <_ZN10IridiumSBD9diagprintEPKc+0x24>
      ISBDDiagsCallback(this, *str++);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	603a      	str	r2, [r7, #0]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	4619      	mov	r1, r3
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff f931 	bl	80025ec <_Z17ISBDDiagsCallbackP10IridiumSBDc>
   while (*str)
 800338a:	e7f2      	b.n	8003372 <_ZN10IridiumSBD9diagprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800338c:	687c      	ldr	r4, [r7, #4]
 800338e:	6838      	ldr	r0, [r7, #0]
 8003390:	f7fc ff48 	bl	8000224 <strlen>
 8003394:	4603      	mov	r3, r0
 8003396:	b29a      	uxth	r2, r3
 8003398:	f04f 33ff 	mov.w	r3, #4294967295
 800339c:	6839      	ldr	r1, [r7, #0]
 800339e:	4620      	mov	r0, r4
 80033a0:	f005 fb33 	bl	8008a0a <HAL_UART_Transmit>
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd90      	pop	{r4, r7, pc}

080033ac <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper>:
   diagprint(str); //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(FlashString str)
{
 80033ac:	b590      	push	{r4, r7, lr}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
   PGM_P p = reinterpret_cast<PGM_P>(str);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	60fb      	str	r3, [r7, #12]
   while (1)
   {
      char c = pgm_read_byte(p++);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1c5a      	adds	r2, r3, #1
 80033be:	60fa      	str	r2, [r7, #12]
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	72fb      	strb	r3, [r7, #11]
      if (c == 0) break;
 80033c4:	7afb      	ldrb	r3, [r7, #11]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0x2a>
      ISBDConsoleCallback(this, c);
 80033ca:	7afb      	ldrb	r3, [r7, #11]
 80033cc:	4619      	mov	r1, r3
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff f900 	bl	80025d4 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   }
 80033d4:	e7f1      	b.n	80033ba <_ZN10IridiumSBD12consoleprintEPK19__FlashStringHelper+0xe>
      if (c == 0) break;
 80033d6:	bf00      	nop

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen((const char*) str), HAL_MAX_DELAY);
 80033d8:	687c      	ldr	r4, [r7, #4]
 80033da:	6838      	ldr	r0, [r7, #0]
 80033dc:	f7fc ff22 	bl	8000224 <strlen>
 80033e0:	4603      	mov	r3, r0
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	f04f 33ff 	mov.w	r3, #4294967295
 80033e8:	6839      	ldr	r1, [r7, #0]
 80033ea:	4620      	mov	r0, r4
 80033ec:	f005 fb0d 	bl	8008a0a <HAL_UART_Transmit>
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd90      	pop	{r4, r7, pc}

080033f8 <_ZN10IridiumSBD12consoleprintEPKc>:

void IridiumSBD::consoleprint(const char *str)
{
 80033f8:	b590      	push	{r4, r7, lr}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
   while (*str)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d008      	beq.n	800341c <_ZN10IridiumSBD12consoleprintEPKc+0x24>
      ISBDConsoleCallback(this, *str++);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	603a      	str	r2, [r7, #0]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	4619      	mov	r1, r3
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff f8dd 	bl	80025d4 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
   while (*str)
 800341a:	e7f2      	b.n	8003402 <_ZN10IridiumSBD12consoleprintEPKc+0xa>

   //TODO
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 800341c:	687c      	ldr	r4, [r7, #4]
 800341e:	6838      	ldr	r0, [r7, #0]
 8003420:	f7fc ff00 	bl	8000224 <strlen>
 8003424:	4603      	mov	r3, r0
 8003426:	b29a      	uxth	r2, r3
 8003428:	f04f 33ff 	mov.w	r3, #4294967295
 800342c:	6839      	ldr	r1, [r7, #0]
 800342e:	4620      	mov	r0, r4
 8003430:	f005 faeb 	bl	8008a0a <HAL_UART_Transmit>
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	bd90      	pop	{r4, r7, pc}

0800343c <_ZN10IridiumSBD12consoleprintEc>:
   //consoleprint((const char*) str);
   HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
}

void IridiumSBD::consoleprint(char c)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	460b      	mov	r3, r1
 8003446:	70fb      	strb	r3, [r7, #3]
   ISBDConsoleCallback(this, c);
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	4619      	mov	r1, r3
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff f8c1 	bl	80025d4 <_Z19ISBDConsoleCallbackP10IridiumSBDc>
}
 8003452:	bf00      	nop
 8003454:	3708      	adds	r7, #8
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <_ZN10IridiumSBD11SBDRINGSeenEv>:

void IridiumSBD::SBDRINGSeen()
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
   ringAsserted = true;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
   diagprint(F("SBDRING alert seen!\r\n"));
 800346c:	4903      	ldr	r1, [pc, #12]	; (800347c <_ZN10IridiumSBD11SBDRINGSeenEv+0x20>)
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff ff54 	bl	800331c <_ZN10IridiumSBD9diagprintEPK19__FlashStringHelper>
}
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	08010ae8 	.word	0x08010ae8

08003480 <_ZN10IridiumSBD13filterSBDRINGEv>:
// Read characters until we find one that doesn't match SBDRING
// If nextChar is -1 it means we are still entertaining a possible
// match with SBDRING\r\n.  Once we find a mismatch, stuff it into
// nextChar.
void IridiumSBD::filterSBDRING()
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
   if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800348e:	f083 0301 	eor.w	r3, r3, #1
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f949 	bl	8003730 <_ZN10IridiumSBD13check9603dataEv>
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00b      	beq.n	80034c0 <_ZN10IridiumSBD13filterSBDRINGEv+0x40>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3308      	adds	r3, #8
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4610      	mov	r0, r2
 80034b8:	4798      	blx	r3
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	dc0d      	bgt.n	80034dc <_ZN10IridiumSBD13filterSBDRINGEv+0x5c>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034c6:	f083 0301 	eor.w	r3, r3, #1
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00d      	beq.n	80034ec <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 fa67 	bl	80039a4 <_ZN10IridiumSBD15i2cSerAvailableEv>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	dd07      	ble.n	80034ec <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e6:	d101      	bne.n	80034ec <_ZN10IridiumSBD13filterSBDRINGEv+0x6c>
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <_ZN10IridiumSBD13filterSBDRINGEv+0x6e>
 80034ec:	2300      	movs	r3, #0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80b6 	beq.w	8003660 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e0>
   {
      char c;
      if (this->useSerial)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <_ZN10IridiumSBD13filterSBDRINGEv+0x96>
      {
         c = stream->read();
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	330c      	adds	r3, #12
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4610      	mov	r0, r2
 800350e:	4798      	blx	r3
 8003510:	4603      	mov	r3, r0
 8003512:	73fb      	strb	r3, [r7, #15]
 8003514:	e004      	b.n	8003520 <_ZN10IridiumSBD13filterSBDRINGEv+0xa0>
      }
      else
      {
         c = i2cSerRead();
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fa5e 	bl	80039d8 <_ZN10IridiumSBD10i2cSerReadEv>
 800351c:	4603      	mov	r3, r0
 800351e:	73fb      	strb	r3, [r7, #15]
      }
      consoleprint(c);
 8003520:	7bfb      	ldrb	r3, [r7, #15]
 8003522:	4619      	mov	r1, r3
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7ff ff89 	bl	800343c <_ZN10IridiumSBD12consoleprintEc>
      if (*head != 0 && c == *head)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 808d 	beq.w	8003652 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	7bfa      	ldrb	r2, [r7, #15]
 8003542:	429a      	cmp	r2, r3
 8003544:	f040 8085 	bne.w	8003652 <_ZN10IridiumSBD13filterSBDRINGEv+0x1d2>
      {
         ++head;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800354e:	1c5a      	adds	r2, r3, #1
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
         if (*head == 0)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10d      	bne.n	800357e <_ZN10IridiumSBD13filterSBDRINGEv+0xfe>
         {
            SBDRINGSeen();
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff ff7a 	bl	800345c <_ZN10IridiumSBD11SBDRINGSeenEv>
            head = tail = SBDRING;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a3f      	ldr	r2, [pc, #252]	; (8003668 <_ZN10IridiumSBD13filterSBDRINGEv+0x1e8>)
 800356c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
            {
               --head;
               nextChar = c;
            }
         }
 800357c:	e06e      	b.n	800365c <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
            for (unsigned long start = millis(); ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) && millis() - start < FILTERTIMEOUT; );
 800357e:	f001 fd0f 	bl	8004fa0 <HAL_GetTick>
 8003582:	60b8      	str	r0, [r7, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00b      	beq.n	80035a6 <_ZN10IridiumSBD13filterSBDRINGEv+0x126>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	3308      	adds	r3, #8
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4610      	mov	r0, r2
 800359e:	4798      	blx	r3
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00d      	beq.n	80035c2 <_ZN10IridiumSBD13filterSBDRINGEv+0x142>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035ac:	f083 0301 	eor.w	r3, r3, #1
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00e      	beq.n	80035d4 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f9f4 	bl	80039a4 <_ZN10IridiumSBD15i2cSerAvailableEv>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d108      	bne.n	80035d4 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 80035c2:	f001 fced 	bl	8004fa0 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b09      	cmp	r3, #9
 80035ce:	d801      	bhi.n	80035d4 <_ZN10IridiumSBD13filterSBDRINGEv+0x154>
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <_ZN10IridiumSBD13filterSBDRINGEv+0x156>
 80035d4:	2300      	movs	r3, #0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d000      	beq.n	80035dc <_ZN10IridiumSBD13filterSBDRINGEv+0x15c>
 80035da:	e7d3      	b.n	8003584 <_ZN10IridiumSBD13filterSBDRINGEv+0x104>
            if(!this->useSerial) check9603data(); // Check for new 9603 serial data
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035e2:	f083 0301 	eor.w	r3, r3, #1
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <_ZN10IridiumSBD13filterSBDRINGEv+0x172>
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f89f 	bl	8003730 <_ZN10IridiumSBD13check9603dataEv>
            if ((this->useSerial && (stream->available() == 0)) || ((!this->useSerial) && (i2cSerAvailable() == 0))) // pop the character back into nextChar
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00b      	beq.n	8003614 <_ZN10IridiumSBD13filterSBDRINGEv+0x194>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3308      	adds	r3, #8
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4610      	mov	r0, r2
 800360c:	4798      	blx	r3
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00d      	beq.n	8003630 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b0>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800361a:	f083 0301 	eor.w	r3, r3, #1
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d007      	beq.n	8003634 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f9bd 	bl	80039a4 <_ZN10IridiumSBD15i2cSerAvailableEv>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b4>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <_ZN10IridiumSBD13filterSBDRINGEv+0x1b6>
 8003634:	2300      	movs	r3, #0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d010      	beq.n	800365c <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
               --head;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003640:	1e5a      	subs	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
               nextChar = c;
 8003648:	7bfa      	ldrb	r2, [r7, #15]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
         }
 8003650:	e004      	b.n	800365c <_ZN10IridiumSBD13filterSBDRINGEv+0x1dc>
      }
      else
      {
         nextChar = c;
 8003652:	7bfa      	ldrb	r2, [r7, #15]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800365a:	e720      	b.n	800349e <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
         }
 800365c:	bf00      	nop
   while (((this->useSerial && (stream->available() > 0)) || ((!this->useSerial) && (i2cSerAvailable() > 0))) && nextChar == -1)
 800365e:	e71e      	b.n	800349e <_ZN10IridiumSBD13filterSBDRINGEv+0x1e>
      }
   }
}
 8003660:	bf00      	nop
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	0801143c 	.word	0x0801143c

0800366c <_ZN10IridiumSBD17filteredavailableEv>:

const char IridiumSBD::SBDRING[] = "SBDRING\r\n";

int IridiumSBD::filteredavailable()
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7ff ff03 	bl	8003480 <_ZN10IridiumSBD13filterSBDRINGEv>
   return head - tail + (nextChar != -1 ? 1 : 0);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 800368e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8003692:	d001      	beq.n	8003698 <_ZN10IridiumSBD17filteredavailableEv+0x2c>
 8003694:	2201      	movs	r2, #1
 8003696:	e000      	b.n	800369a <_ZN10IridiumSBD17filteredavailableEv+0x2e>
 8003698:	2200      	movs	r2, #0
 800369a:	4413      	add	r3, r2
}
 800369c:	4618      	mov	r0, r3
 800369e:	3708      	adds	r7, #8
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <_ZN10IridiumSBD12filteredreadEv>:

int IridiumSBD::filteredread()
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
   filterSBDRING();
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff fee7 	bl	8003480 <_ZN10IridiumSBD13filterSBDRINGEv>

   // Use up the queue first
   if (head > tail)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80036be:	429a      	cmp	r2, r3
 80036c0:	d91c      	bls.n	80036fc <_ZN10IridiumSBD12filteredreadEv+0x58>
   {
      char c = *tail++;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80036c8:	1c59      	adds	r1, r3, #1
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	f8c2 10d4 	str.w	r1, [r2, #212]	; 0xd4
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	73bb      	strb	r3, [r7, #14]
      if (head == tail)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d109      	bne.n	80036f8 <_ZN10IridiumSBD12filteredreadEv+0x54>
         head = tail = SBDRING;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a11      	ldr	r2, [pc, #68]	; (800372c <_ZN10IridiumSBD12filteredreadEv+0x88>)
 80036e8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      return c;
 80036f8:	7bbb      	ldrb	r3, [r7, #14]
 80036fa:	e012      	b.n	8003722 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   // Then the "extra" char
   else if (nextChar != -1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003706:	d00a      	beq.n	800371e <_ZN10IridiumSBD12filteredreadEv+0x7a>
   {
      char c = (char)nextChar;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800370e:	73fb      	strb	r3, [r7, #15]
      nextChar = -1;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f04f 32ff 	mov.w	r2, #4294967295
 8003716:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      return c;
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	e001      	b.n	8003722 <_ZN10IridiumSBD12filteredreadEv+0x7e>
   }

   return -1;
 800371e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	0801143c 	.word	0x0801143c

08003730 <_ZN10IridiumSBD13check9603dataEv>:

//Checks the number of available serial bytes
//Reads the available serial bytes (if any) and stores them in i2c_ser_buffer
void IridiumSBD::check9603data()
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  if (millis() - lastCheck >= I2C_POLLING_WAIT_MS)
 8003738:	f001 fc32 	bl	8004fa0 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 800374c:	4293      	cmp	r3, r2
 800374e:	bf2c      	ite	cs
 8003750:	2301      	movcs	r3, #1
 8003752:	2300      	movcc	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 80be 	beq.w	80038d8 <_ZN10IridiumSBD13check9603dataEv+0x1a8>
  {
    //Check how many serial bytes are waiting to be read
    uint16_t bytesAvailable = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	81fb      	strh	r3, [r7, #14]
    wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800376a:	4619      	mov	r1, r3
 800376c:	4610      	mov	r0, r2
 800376e:	f000 fe5d 	bl	800442c <_ZN7TwoWire17beginTransmissionEh>
    wireport->write(LEN_REG); // Point to the serial buffer length
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003776:	21fd      	movs	r1, #253	; 0xfd
 8003778:	4618      	mov	r0, r3
 800377a:	f7fe ff11 	bl	80025a0 <_ZN7TwoWire5writeEi>
    wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fe9c 	bl	80044c0 <_ZN7TwoWire15endTransmissionEv>
    if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)2) == 2) // Request two bytes
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003792:	2202      	movs	r2, #2
 8003794:	4619      	mov	r1, r3
 8003796:	f000 fe36 	bl	8004406 <_ZN7TwoWire11requestFromEhh>
 800379a:	4603      	mov	r3, r0
 800379c:	2b02      	cmp	r3, #2
 800379e:	bf0c      	ite	eq
 80037a0:	2301      	moveq	r3, #1
 80037a2:	2300      	movne	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d01d      	beq.n	80037e6 <_ZN10IridiumSBD13check9603dataEv+0xb6>
    {
      uint8_t msb = wireport->read();
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	330c      	adds	r3, #12
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4610      	mov	r0, r2
 80037ba:	4798      	blx	r3
 80037bc:	4603      	mov	r3, r0
 80037be:	737b      	strb	r3, [r7, #13]
      uint8_t lsb = wireport->read();
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	330c      	adds	r3, #12
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4610      	mov	r0, r2
 80037d0:	4798      	blx	r3
 80037d2:	4603      	mov	r3, r0
 80037d4:	733b      	strb	r3, [r7, #12]
      bytesAvailable = (((uint16_t)msb) << 8) | lsb;
 80037d6:	7b7b      	ldrb	r3, [r7, #13]
 80037d8:	021b      	lsls	r3, r3, #8
 80037da:	b21a      	sxth	r2, r3
 80037dc:	7b3b      	ldrb	r3, [r7, #12]
 80037de:	b21b      	sxth	r3, r3
 80037e0:	4313      	orrs	r3, r2
 80037e2:	b21b      	sxth	r3, r3
 80037e4:	81fb      	strh	r3, [r7, #14]
    }

    //Now read the serial bytes (if any)
    if (bytesAvailable > 0)
 80037e6:	89fb      	ldrh	r3, [r7, #14]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d06f      	beq.n	80038cc <_ZN10IridiumSBD13check9603dataEv+0x19c>
    {
      // Request the bytes
      // Poke them into the i2c_serial buffer
      // Release the bus afterwards
      wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037f6:	4619      	mov	r1, r3
 80037f8:	4610      	mov	r0, r2
 80037fa:	f000 fe17 	bl	800442c <_ZN7TwoWire17beginTransmissionEh>
      wireport->write(DATA_REG); // Point to the serial buffer
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003802:	21ff      	movs	r1, #255	; 0xff
 8003804:	4618      	mov	r0, r3
 8003806:	f7fe fecb 	bl	80025a0 <_ZN7TwoWire5writeEi>
      wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380e:	4618      	mov	r0, r3
 8003810:	f000 fe56 	bl	80044c0 <_ZN7TwoWire15endTransmissionEv>
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8003814:	89fb      	ldrh	r3, [r7, #14]
 8003816:	2b08      	cmp	r3, #8
 8003818:	d92d      	bls.n	8003876 <_ZN10IridiumSBD13check9603dataEv+0x146>
      {
        wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)SER_PACKET_SIZE, (uint8_t)false); // Request SER_PACKET_SIZE bytes, don't release the bus
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
 8003824:	2300      	movs	r3, #0
 8003826:	2208      	movs	r2, #8
 8003828:	f000 fdb2 	bl	8004390 <_ZN7TwoWire11requestFromEhhh>
        while (wireport->available())
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3308      	adds	r3, #8
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4610      	mov	r0, r2
 800383c:	4798      	blx	r3
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	bf14      	ite	ne
 8003844:	2301      	movne	r3, #1
 8003846:	2300      	moveq	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00f      	beq.n	800386e <_ZN10IridiumSBD13check9603dataEv+0x13e>
        {
          i2cSerPoke(wireport->read()); // Read and store each byte
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	330c      	adds	r3, #12
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4610      	mov	r0, r2
 800385e:	4798      	blx	r3
 8003860:	4603      	mov	r3, r0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	4619      	mov	r1, r3
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 f8e2 	bl	8003a30 <_ZN10IridiumSBD10i2cSerPokeEc>
        while (wireport->available())
 800386c:	e7de      	b.n	800382c <_ZN10IridiumSBD13check9603dataEv+0xfc>
        }
        bytesAvailable -= SER_PACKET_SIZE; // Decrease the number of bytes available by SER_PACKET_SIZE
 800386e:	89fb      	ldrh	r3, [r7, #14]
 8003870:	3b08      	subs	r3, #8
 8003872:	81fb      	strh	r3, [r7, #14]
      while (bytesAvailable > SER_PACKET_SIZE) // If there are _more_ than SER_PACKET_SIZE bytes to be read
 8003874:	e7ce      	b.n	8003814 <_ZN10IridiumSBD13check9603dataEv+0xe4>
      }
      wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)bytesAvailable); // Request remaining bytes, release the bus
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003880:	89fa      	ldrh	r2, [r7, #14]
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	4619      	mov	r1, r3
 8003886:	f000 fdbe 	bl	8004406 <_ZN7TwoWire11requestFromEhh>
      while (wireport->available())
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3308      	adds	r3, #8
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4610      	mov	r0, r2
 800389a:	4798      	blx	r3
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	bf14      	ite	ne
 80038a2:	2301      	movne	r3, #1
 80038a4:	2300      	moveq	r3, #0
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00f      	beq.n	80038cc <_ZN10IridiumSBD13check9603dataEv+0x19c>
      {
        i2cSerPoke(wireport->read()); // Read and store each byte
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	330c      	adds	r3, #12
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4610      	mov	r0, r2
 80038bc:	4798      	blx	r3
 80038be:	4603      	mov	r3, r0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	4619      	mov	r1, r3
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f8b3 	bl	8003a30 <_ZN10IridiumSBD10i2cSerPokeEc>
      while (wireport->available())
 80038ca:	e7de      	b.n	800388a <_ZN10IridiumSBD13check9603dataEv+0x15a>
      }
    }

    lastCheck = millis(); //Put off checking to avoid excessive I2C bus traffic
 80038cc:	f001 fb68 	bl	8004fa0 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  }
}
 80038d8:	bf00      	nop
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <_ZN10IridiumSBD13check9603pinsEv>:

//Reads the IO pins and update IO_REGISTER
void IridiumSBD::check9603pins()
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  //Read the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038f2:	4619      	mov	r1, r3
 80038f4:	4610      	mov	r0, r2
 80038f6:	f000 fd99 	bl	800442c <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fe:	2110      	movs	r1, #16
 8003900:	4618      	mov	r0, r3
 8003902:	f7fe fe4d 	bl	80025a0 <_ZN7TwoWire5writeEi>
  wireport->endTransmission(); // Send data and release the bus (the 841 (WireS) doesn't like it if the Master holds the bus!)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fdd8 	bl	80044c0 <_ZN7TwoWire15endTransmissionEv>
  if (wireport->requestFrom((uint8_t)deviceaddress, (uint8_t)1) == 1) // Request one byte from the IO register
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800391a:	2201      	movs	r2, #1
 800391c:	4619      	mov	r1, r3
 800391e:	f000 fd72 	bl	8004406 <_ZN7TwoWire11requestFromEhh>
 8003922:	4603      	mov	r3, r0
 8003924:	2b01      	cmp	r3, #1
 8003926:	bf0c      	ite	eq
 8003928:	2301      	moveq	r3, #1
 800392a:	2300      	movne	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00d      	beq.n	800394e <_ZN10IridiumSBD13check9603pinsEv+0x6e>
  {
    IO_REGISTER = wireport->read(); // Read the IO register
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	330c      	adds	r3, #12
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4610      	mov	r0, r2
 8003942:	4798      	blx	r3
 8003944:	4603      	mov	r3, r0
 8003946:	b2da      	uxtb	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
  }
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <_ZN10IridiumSBD11set9603pinsEh>:

//Set the IO pins
void IridiumSBD::set9603pins(uint8_t pins)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	460b      	mov	r3, r1
 8003960:	70fb      	strb	r3, [r7, #3]
  //Write to the 'IO_REGISTER'
  wireport->beginTransmission((uint8_t)deviceaddress); // Talk to the I2C device
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800396c:	4619      	mov	r1, r3
 800396e:	4610      	mov	r0, r2
 8003970:	f000 fd5c 	bl	800442c <_ZN7TwoWire17beginTransmissionEh>
  wireport->write(IO_REG); // Point to the 'IO register'
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003978:	2110      	movs	r1, #16
 800397a:	4618      	mov	r0, r3
 800397c:	f7fe fe10 	bl	80025a0 <_ZN7TwoWire5writeEi>
  wireport->write(pins); // Set the pins
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	78f9      	ldrb	r1, [r7, #3]
 800398e:	4610      	mov	r0, r2
 8003990:	4798      	blx	r3
  wireport->endTransmission(); // Send data and surrender the bus
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fd92 	bl	80044c0 <_ZN7TwoWire15endTransmissionEv>
}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <_ZN10IridiumSBD15i2cSerAvailableEv>:
    return(ISBD_SUCCESS);
}

// I2C_SER functions
int IridiumSBD::i2cSerAvailable()
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  return (i2c_ser_buffer_tail + I2C_SER_MAX_BUFF - i2c_ser_buffer_head) % I2C_SER_MAX_BUFF;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039b2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	425a      	negs	r2, r3
 80039c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039c4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80039c8:	bf58      	it	pl
 80039ca:	4253      	negpl	r3, r2
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <_ZN10IridiumSBD10i2cSerReadEv>:

int IridiumSBD::i2cSerRead()
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  // Empty buffer?
  if (i2c_ser_buffer_head == i2c_ser_buffer_tail)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d102      	bne.n	80039f6 <_ZN10IridiumSBD10i2cSerReadEv+0x1e>
    return -1;
 80039f0:	f04f 33ff 	mov.w	r3, #4294967295
 80039f4:	e016      	b.n	8003a24 <_ZN10IridiumSBD10i2cSerReadEv+0x4c>

  // Read from "head"
  uint8_t d = i2c_ser_buffer[i2c_ser_buffer_head]; // grab next byte
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	4413      	add	r3, r2
 8003a00:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8003a04:	73fb      	strb	r3, [r7, #15]
  i2c_ser_buffer_head = (i2c_ser_buffer_head + 1) % I2C_SER_MAX_BUFF; // update head
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	425a      	negs	r2, r3
 8003a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a14:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003a18:	bf58      	it	pl
 8003a1a:	4253      	negpl	r3, r2
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
  return d;
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <_ZN10IridiumSBD10i2cSerPokeEc>:

void IridiumSBD::i2cSerPoke(char serChar)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	70fb      	strb	r3, [r7, #3]
  // Calculate the new value for the tail
  int next = (i2c_ser_buffer_tail + 1) % I2C_SER_MAX_BUFF;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a42:	3301      	adds	r3, #1
 8003a44:	425a      	negs	r2, r3
 8003a46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a4a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003a4e:	bf58      	it	pl
 8003a50:	4253      	negpl	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
  // If the buffer is not full (i.e. we are not about to overwrite the head byte)
  // If the buffer is full, the byte is lost
  if (next != i2c_ser_buffer_head)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d00b      	beq.n	8003a78 <_ZN10IridiumSBD10i2cSerPokeEc+0x48>
  {
    // save new data in buffer: tail points to where byte goes
    i2c_ser_buffer[i2c_ser_buffer_tail] = serChar; // save new byte
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	4413      	add	r3, r2
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    i2c_ser_buffer_tail = next;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }
}
 8003a78:	bf00      	nop
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef>:
	#endif
}


//uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart,POWERPROFILE profile){ TODO
uint8_t IridiumSBD::MRT_Iridium_setup(UART_HandleTypeDef huart){
 8003a84:	b084      	sub	sp, #16
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b084      	sub	sp, #16
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
 8003a8e:	f107 001c 	add.w	r0, r7, #28
 8003a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	this->uart = huart;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f107 031c 	add.w	r3, r7, #28
 8003a9e:	2244      	movs	r2, #68	; 0x44
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	f008 fb53 	bl	800c14c <memcpy>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nSetting up the Iridium 9603N\r\n", 32, HAL_MAX_DELAY);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8003aac:	2220      	movs	r2, #32
 8003aae:	4962      	ldr	r1, [pc, #392]	; (8003c38 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1b4>)
 8003ab0:	f004 ffab 	bl	8008a0a <HAL_UART_Transmit>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Checking for the device...", 28, HAL_MAX_DELAY);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aba:	221c      	movs	r2, #28
 8003abc:	495f      	ldr	r1, [pc, #380]	; (8003c3c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1b8>)
 8003abe:	f004 ffa4 	bl	8008a0a <HAL_UART_Transmit>
	while(!this->isConnected()){
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff f802 	bl	8002acc <_ZN10IridiumSBD11isConnectedEv>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	f083 0301 	eor.w	r3, r3, #1
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d02c      	beq.n	8003b2e <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0xaa>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Check if the device is connected. Trying again in\r\n", 53, HAL_MAX_DELAY);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ada:	2235      	movs	r2, #53	; 0x35
 8003adc:	4958      	ldr	r1, [pc, #352]	; (8003c40 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1bc>)
 8003ade:	f004 ff94 	bl	8008a0a <HAL_UART_Transmit>
		HAL_Delay(500);
 8003ae2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ae6:	f001 fa67 	bl	8004fb8 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r3", 3, HAL_MAX_DELAY);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f04f 33ff 	mov.w	r3, #4294967295
 8003af0:	2203      	movs	r2, #3
 8003af2:	4954      	ldr	r1, [pc, #336]	; (8003c44 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c0>)
 8003af4:	f004 ff89 	bl	8008a0a <HAL_UART_Transmit>
		HAL_Delay(1000);
 8003af8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003afc:	f001 fa5c 	bl	8004fb8 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r2", 3, HAL_MAX_DELAY);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f04f 33ff 	mov.w	r3, #4294967295
 8003b06:	2203      	movs	r2, #3
 8003b08:	494f      	ldr	r1, [pc, #316]	; (8003c48 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c4>)
 8003b0a:	f004 ff7e 	bl	8008a0a <HAL_UART_Transmit>
		HAL_Delay(1000);
 8003b0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b12:	f001 fa51 	bl	8004fb8 <HAL_Delay>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r1\r\n", 7, HAL_MAX_DELAY);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1c:	2207      	movs	r2, #7
 8003b1e:	494b      	ldr	r1, [pc, #300]	; (8003c4c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1c8>)
 8003b20:	f004 ff73 	bl	8008a0a <HAL_UART_Transmit>
		HAL_Delay(1000);
 8003b24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b28:	f001 fa46 	bl	8004fb8 <HAL_Delay>
	while(!this->isConnected()){
 8003b2c:	e7c9      	b.n	8003ac2 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x3e>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f04f 33ff 	mov.w	r3, #4294967295
 8003b34:	2206      	movs	r2, #6
 8003b36:	4946      	ldr	r1, [pc, #280]	; (8003c50 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8003b38:	f004 ff67 	bl	8008a0a <HAL_UART_Transmit>

	//Activate the superchargers
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Activating the superchargers...", 31, HAL_MAX_DELAY);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b42:	221f      	movs	r2, #31
 8003b44:	4943      	ldr	r1, [pc, #268]	; (8003c54 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d0>)
 8003b46:	f004 ff60 	bl	8008a0a <HAL_UART_Transmit>
	this->enableSuperCapCharger(true);
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7fe fea1 	bl	8002894 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f04f 33ff 	mov.w	r3, #4294967295
 8003b58:	2206      	movs	r2, #6
 8003b5a:	493d      	ldr	r1, [pc, #244]	; (8003c50 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8003b5c:	f004 ff55 	bl	8008a0a <HAL_UART_Transmit>


	//Wait for the supercapacitors to charge
	//int start=millis();
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Waiting for the supercapacitors to charge...", 44, HAL_MAX_DELAY);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f04f 33ff 	mov.w	r3, #4294967295
 8003b66:	222c      	movs	r2, #44	; 0x2c
 8003b68:	493b      	ldr	r1, [pc, #236]	; (8003c58 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d4>)
 8003b6a:	f004 ff4e 	bl	8008a0a <HAL_UART_Transmit>
	while (!this->checkSuperCapCharger()){
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7fe fece 	bl	8002910 <_ZN10IridiumSBD20checkSuperCapChargerEv>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f083 0301 	eor.w	r3, r3, #1
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d004      	beq.n	8003b8a <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x106>
		HAL_Delay(333);
 8003b80:	f240 104d 	movw	r0, #333	; 0x14d
 8003b84:	f001 fa18 	bl	8004fb8 <HAL_Delay>
	while (!this->checkSuperCapCharger()){
 8003b88:	e7f1      	b.n	8003b6e <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0xea>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b90:	2206      	movs	r2, #6
 8003b92:	492f      	ldr	r1, [pc, #188]	; (8003c50 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8003b94:	f004 ff39 	bl	8008a0a <HAL_UART_Transmit>


	//Enable power for the 9603N
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Enabling 9603N power...", 23, HAL_MAX_DELAY);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9e:	2217      	movs	r2, #23
 8003ba0:	492e      	ldr	r1, [pc, #184]	; (8003c5c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1d8>)
 8003ba2:	f004 ff32 	bl	8008a0a <HAL_UART_Transmit>
	this->enable9603Npower(true);
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7fe fee1 	bl	8002970 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 6, HAL_MAX_DELAY);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb4:	2206      	movs	r2, #6
 8003bb6:	4926      	ldr	r1, [pc, #152]	; (8003c50 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1cc>)
 8003bb8:	f004 ff27 	bl	8008a0a <HAL_UART_Transmit>
	/*
	 * Begin satellite modem operation
	 */

	//Power on the rockblock
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Starting Modem...", 17, HAL_MAX_DELAY);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc2:	2211      	movs	r2, #17
 8003bc4:	4926      	ldr	r1, [pc, #152]	; (8003c60 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1dc>)
 8003bc6:	f004 ff20 	bl	8008a0a <HAL_UART_Transmit>
	//this->setPowerProfile(profile);
	int err = this->begin();
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fe fd1a 	bl	8002604 <_ZN10IridiumSBD5beginEv>
 8003bd0:	60f8      	str	r0, [r7, #12]
	if (err != ISBD_SUCCESS)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d015      	beq.n	8003c04 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x180>
	  {
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Failed: ", 8, HAL_MAX_DELAY);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f04f 33ff 	mov.w	r3, #4294967295
 8003bde:	2208      	movs	r2, #8
 8003be0:	4920      	ldr	r1, [pc, #128]	; (8003c64 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e0>)
 8003be2:	f004 ff12 	bl	8008a0a <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) err, 4, HAL_MAX_DELAY);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	68f9      	ldr	r1, [r7, #12]
 8003bea:	f04f 33ff 	mov.w	r3, #4294967295
 8003bee:	2204      	movs	r2, #4
 8003bf0:	f004 ff0b 	bl	8008a0a <HAL_UART_Transmit>
		this->MRT_Iridium_ErrorMessage(err);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f8b0 	bl	8003d60 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>

	    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e011      	b.n	8003c28 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1a4>
	  }
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "...OK\r\n", 7, HAL_MAX_DELAY);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f04f 33ff 	mov.w	r3, #4294967295
 8003c0a:	2207      	movs	r2, #7
 8003c0c:	4916      	ldr	r1, [pc, #88]	; (8003c68 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e4>)
 8003c0e:	f004 fefc 	bl	8008a0a <HAL_UART_Transmit>

	//Setup default IMEI to 000000000000000 (no IMEI)
	IMEI="000000000000000";
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a15      	ldr	r2, [pc, #84]	; (8003c6c <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1e8>)
 8003c16:	645a      	str	r2, [r3, #68]	; 0x44

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "End of setup\r\n\r\n", 16, HAL_MAX_DELAY);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c1e:	2210      	movs	r2, #16
 8003c20:	4913      	ldr	r1, [pc, #76]	; (8003c70 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef+0x1ec>)
 8003c22:	f004 fef2 	bl	8008a0a <HAL_UART_Transmit>

	return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c32:	b004      	add	sp, #16
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	08010b68 	.word	0x08010b68
 8003c3c:	08010b8c 	.word	0x08010b8c
 8003c40:	08010ba8 	.word	0x08010ba8
 8003c44:	08010bdc 	.word	0x08010bdc
 8003c48:	08010be0 	.word	0x08010be0
 8003c4c:	08010be4 	.word	0x08010be4
 8003c50:	0801047c 	.word	0x0801047c
 8003c54:	08010bec 	.word	0x08010bec
 8003c58:	08010c0c 	.word	0x08010c0c
 8003c5c:	08010c3c 	.word	0x08010c3c
 8003c60:	08010c54 	.word	0x08010c54
 8003c64:	08010c68 	.word	0x08010c68
 8003c68:	08010c74 	.word	0x08010c74
 8003c6c:	08010c7c 	.word	0x08010c7c
 8003c70:	08010c8c 	.word	0x08010c8c

08003c74 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>:


boolean IridiumSBD::MRT_Iridium_shutdown(void){
 8003c74:	b590      	push	{r4, r7, lr}
 8003c76:	b08b      	sub	sp, #44	; 0x2c
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nShutting down the Iridium\r\n", 29, HAL_MAX_DELAY);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c82:	221d      	movs	r2, #29
 8003c84:	492f      	ldr	r1, [pc, #188]	; (8003d44 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd0>)
 8003c86:	f004 fec0 	bl	8008a0a <HAL_UART_Transmit>

	// Power down the modem
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Putting the 9603N to sleep...", 29, HAL_MAX_DELAY);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c90:	221d      	movs	r2, #29
 8003c92:	492d      	ldr	r1, [pc, #180]	; (8003d48 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd4>)
 8003c94:	f004 feb9 	bl	8008a0a <HAL_UART_Transmit>
	int err = this->sleep();
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7fe fcde 	bl	800265a <_ZN10IridiumSBD5sleepEv>
 8003c9e:	6278      	str	r0, [r7, #36]	; 0x24
	if (err != ISBD_SUCCESS)
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d017      	beq.n	8003cd6 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0x62>
	{
		char str[24+sizeof(int)];
		sprintf(str, "sleep failed: error  %i\r\n", err);
 8003ca6:	f107 0308 	add.w	r3, r7, #8
 8003caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cac:	4927      	ldr	r1, [pc, #156]	; (8003d4c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xd8>)
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f009 facc 	bl	800d24c <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) str, strlen(str), HAL_MAX_DELAY);
 8003cb4:	687c      	ldr	r4, [r7, #4]
 8003cb6:	f107 0308 	add.w	r3, r7, #8
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f7fc fab2 	bl	8000224 <strlen>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	f107 0108 	add.w	r1, r7, #8
 8003cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ccc:	4620      	mov	r0, r4
 8003cce:	f004 fe9c 	bl	8008a0a <HAL_UART_Transmit>
		return false;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	e032      	b.n	8003d3c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xc8>
	}
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cdc:	2204      	movs	r2, #4
 8003cde:	491c      	ldr	r1, [pc, #112]	; (8003d50 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8003ce0:	f004 fe93 	bl	8008a0a <HAL_UART_Transmit>

	// Disable 9603N power
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling 9603N power...", 24, HAL_MAX_DELAY);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8003cea:	2218      	movs	r2, #24
 8003cec:	4919      	ldr	r1, [pc, #100]	; (8003d54 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe0>)
 8003cee:	f004 fe8c 	bl	8008a0a <HAL_UART_Transmit>
	this->enable9603Npower(false);
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7fe fe3b 	bl	8002970 <_ZN10IridiumSBD16enable9603NpowerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003d00:	2204      	movs	r2, #4
 8003d02:	4913      	ldr	r1, [pc, #76]	; (8003d50 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8003d04:	f004 fe81 	bl	8008a0a <HAL_UART_Transmit>

	// Disable the supercapacitor charger
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Disabling the supercapacitor charger...", 39, HAL_MAX_DELAY);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d0e:	2227      	movs	r2, #39	; 0x27
 8003d10:	4911      	ldr	r1, [pc, #68]	; (8003d58 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe4>)
 8003d12:	f004 fe7a 	bl	8008a0a <HAL_UART_Transmit>
	this->enableSuperCapCharger(false);
 8003d16:	2100      	movs	r1, #0
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f7fe fdbb 	bl	8002894 <_ZN10IridiumSBD21enableSuperCapChargerEb>
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "OK\r\n", 4, HAL_MAX_DELAY);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f04f 33ff 	mov.w	r3, #4294967295
 8003d24:	2204      	movs	r2, #4
 8003d26:	490a      	ldr	r1, [pc, #40]	; (8003d50 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xdc>)
 8003d28:	f004 fe6f 	bl	8008a0a <HAL_UART_Transmit>

	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Iridium successfully shutdown\r\n", 32, HAL_MAX_DELAY);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d32:	2220      	movs	r2, #32
 8003d34:	4909      	ldr	r1, [pc, #36]	; (8003d5c <_ZN10IridiumSBD20MRT_Iridium_shutdownEv+0xe8>)
 8003d36:	f004 fe68 	bl	8008a0a <HAL_UART_Transmit>
	return true;
 8003d3a:	2301      	movs	r3, #1
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	372c      	adds	r7, #44	; 0x2c
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd90      	pop	{r4, r7, pc}
 8003d44:	08010ca0 	.word	0x08010ca0
 8003d48:	08010cc0 	.word	0x08010cc0
 8003d4c:	08010ce0 	.word	0x08010ce0
 8003d50:	0801047c 	.word	0x0801047c
 8003d54:	08010cfc 	.word	0x08010cfc
 8003d58:	08010d18 	.word	0x08010d18
 8003d5c:	08010d40 	.word	0x08010d40

08003d60 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>:



void IridiumSBD::MRT_Iridium_ErrorMessage(uint8_t error){
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nError:\t", 12, HAL_MAX_DELAY);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d72:	220c      	movs	r2, #12
 8003d74:	4948      	ldr	r1, [pc, #288]	; (8003e98 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x138>)
 8003d76:	f004 fe48 	bl	8008a0a <HAL_UART_Transmit>
	if (error == ISBD_ALREADY_AWAKE){
 8003d7a:	78fb      	ldrb	r3, [r7, #3]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d107      	bne.n	8003d90 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x30>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Already Awake\r\n", 17, HAL_MAX_DELAY);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f04f 33ff 	mov.w	r3, #4294967295
 8003d86:	2211      	movs	r2, #17
 8003d88:	4944      	ldr	r1, [pc, #272]	; (8003e9c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x13c>)
 8003d8a:	f004 fe3e 	bl	8008a0a <HAL_UART_Transmit>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
	}
	else{
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
	}
}
 8003d8e:	e07f      	b.n	8003e90 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SERIAL_FAILURE){
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d107      	bne.n	8003da6 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x46>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Serial Failure\r\n", 18, HAL_MAX_DELAY);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9c:	2212      	movs	r2, #18
 8003d9e:	4940      	ldr	r1, [pc, #256]	; (8003ea0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x140>)
 8003da0:	f004 fe33 	bl	8008a0a <HAL_UART_Transmit>
}
 8003da4:	e074      	b.n	8003e90 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_PROTOCOL_ERROR){
 8003da6:	78fb      	ldrb	r3, [r7, #3]
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d107      	bne.n	8003dbc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x5c>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "Protocol Error\r\n", 18, HAL_MAX_DELAY);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f04f 33ff 	mov.w	r3, #4294967295
 8003db2:	2212      	movs	r2, #18
 8003db4:	493b      	ldr	r1, [pc, #236]	; (8003ea4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x144>)
 8003db6:	f004 fe28 	bl	8008a0a <HAL_UART_Transmit>
}
 8003dba:	e069      	b.n	8003e90 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_CANCELLED){
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d107      	bne.n	8003dd2 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x72>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nCancelled", 13, HAL_MAX_DELAY);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc8:	220d      	movs	r2, #13
 8003dca:	4937      	ldr	r1, [pc, #220]	; (8003ea8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x148>)
 8003dcc:	f004 fe1d 	bl	8008a0a <HAL_UART_Transmit>
}
 8003dd0:	e05e      	b.n	8003e90 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_MODEM_DETECTED){
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	2b05      	cmp	r3, #5
 8003dd6:	d107      	bne.n	8003de8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x88>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nNo modem detected: check wiring.", 36, HAL_MAX_DELAY);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f04f 33ff 	mov.w	r3, #4294967295
 8003dde:	2224      	movs	r2, #36	; 0x24
 8003de0:	4932      	ldr	r1, [pc, #200]	; (8003eac <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x14c>)
 8003de2:	f004 fe12 	bl	8008a0a <HAL_UART_Transmit>
}
 8003de6:	e053      	b.n	8003e90 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SBDIX_FATAL_ERROR){
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	2b06      	cmp	r3, #6
 8003dec:	d107      	bne.n	8003dfe <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x9e>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "SDBIX Fatal Error\r\n", 21, HAL_MAX_DELAY);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f04f 33ff 	mov.w	r3, #4294967295
 8003df4:	2215      	movs	r2, #21
 8003df6:	492e      	ldr	r1, [pc, #184]	; (8003eb0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x150>)
 8003df8:	f004 fe07 	bl	8008a0a <HAL_UART_Transmit>
}
 8003dfc:	e048      	b.n	8003e90 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_SENDRECEIVE_TIMEOUT){
 8003dfe:	78fb      	ldrb	r3, [r7, #3]
 8003e00:	2b07      	cmp	r3, #7
 8003e02:	d107      	bne.n	8003e14 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xb4>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Send-Receive Timeout\r\n", 24, HAL_MAX_DELAY);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0a:	2218      	movs	r2, #24
 8003e0c:	4929      	ldr	r1, [pc, #164]	; (8003eb4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x154>)
 8003e0e:	f004 fdfc 	bl	8008a0a <HAL_UART_Transmit>
}
 8003e12:	e03d      	b.n	8003e90 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_RX_OVERFLOW){
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d107      	bne.n	8003e2a <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xca>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "RX Overflow\r\n", 15, HAL_MAX_DELAY);
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e20:	220f      	movs	r2, #15
 8003e22:	4925      	ldr	r1, [pc, #148]	; (8003eb8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x158>)
 8003e24:	f004 fdf1 	bl	8008a0a <HAL_UART_Transmit>
}
 8003e28:	e032      	b.n	8003e90 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_REENTRANT){
 8003e2a:	78fb      	ldrb	r3, [r7, #3]
 8003e2c:	2b09      	cmp	r3, #9
 8003e2e:	d107      	bne.n	8003e40 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xe0>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "REENTRANT\r\n", 13, HAL_MAX_DELAY);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f04f 33ff 	mov.w	r3, #4294967295
 8003e36:	220d      	movs	r2, #13
 8003e38:	4920      	ldr	r1, [pc, #128]	; (8003ebc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x15c>)
 8003e3a:	f004 fde6 	bl	8008a0a <HAL_UART_Transmit>
}
 8003e3e:	e027      	b.n	8003e90 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_IS_ASLEEP){
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	2b0a      	cmp	r3, #10
 8003e44:	d107      	bne.n	8003e56 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0xf6>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "Is Asleep\r\n", 13, HAL_MAX_DELAY);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4c:	220d      	movs	r2, #13
 8003e4e:	491c      	ldr	r1, [pc, #112]	; (8003ec0 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x160>)
 8003e50:	f004 fddb 	bl	8008a0a <HAL_UART_Transmit>
}
 8003e54:	e01c      	b.n	8003e90 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if (error == ISBD_NO_SLEEP_PIN){
 8003e56:	78fb      	ldrb	r3, [r7, #3]
 8003e58:	2b0b      	cmp	r3, #11
 8003e5a:	d107      	bne.n	8003e6c <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x10c>
	   	HAL_UART_Transmit(&(this->uart),(uint8_t*) "No Sleep Pin\r\n", 16, HAL_MAX_DELAY);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e62:	2210      	movs	r2, #16
 8003e64:	4917      	ldr	r1, [pc, #92]	; (8003ec4 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x164>)
 8003e66:	f004 fdd0 	bl	8008a0a <HAL_UART_Transmit>
}
 8003e6a:	e011      	b.n	8003e90 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
	else if(error == 20){
 8003e6c:	78fb      	ldrb	r3, [r7, #3]
 8003e6e:	2b14      	cmp	r3, #20
 8003e70:	d107      	bne.n	8003e82 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x122>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "DEBUG LINE REACHED\r\n", 22, HAL_MAX_DELAY);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f04f 33ff 	mov.w	r3, #4294967295
 8003e78:	2216      	movs	r2, #22
 8003e7a:	4913      	ldr	r1, [pc, #76]	; (8003ec8 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x168>)
 8003e7c:	f004 fdc5 	bl	8008a0a <HAL_UART_Transmit>
}
 8003e80:	e006      	b.n	8003e90 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x130>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "UNKNOWN\r\n", 11, HAL_MAX_DELAY);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f04f 33ff 	mov.w	r3, #4294967295
 8003e88:	220b      	movs	r2, #11
 8003e8a:	4910      	ldr	r1, [pc, #64]	; (8003ecc <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh+0x16c>)
 8003e8c:	f004 fdbd 	bl	8008a0a <HAL_UART_Transmit>
}
 8003e90:	bf00      	nop
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	08010d60 	.word	0x08010d60
 8003e9c:	08010d6c 	.word	0x08010d6c
 8003ea0:	08010d7c 	.word	0x08010d7c
 8003ea4:	08010d90 	.word	0x08010d90
 8003ea8:	08010da4 	.word	0x08010da4
 8003eac:	08010db0 	.word	0x08010db0
 8003eb0:	08010dd4 	.word	0x08010dd4
 8003eb4:	08010de8 	.word	0x08010de8
 8003eb8:	08010e00 	.word	0x08010e00
 8003ebc:	08010e10 	.word	0x08010e10
 8003ec0:	08010e1c 	.word	0x08010e1c
 8003ec4:	08010e28 	.word	0x08010e28
 8003ec8:	08010e38 	.word	0x08010e38
 8003ecc:	08010e50 	.word	0x08010e50

08003ed0 <_Z10st_pinModeP12GPIO_TypeDefhi>:


//Define a version of pinMode for st to convert arduino's pinMode with macro
void st_pinMode(GPIO_TypeDef* PIN_NAME_GPIO_Port,uint8_t PIN_NAME_Pin,int i){
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08a      	sub	sp, #40	; 0x28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	72fb      	strb	r3, [r7, #11]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ede:	f107 0314 	add.w	r3, r7, #20
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	605a      	str	r2, [r3, #4]
 8003ee8:	609a      	str	r2, [r3, #8]
 8003eea:	60da      	str	r2, [r3, #12]
 8003eec:	611a      	str	r2, [r3, #16]
	/*Configure GPIO pin Output Level */
	if (i==1){
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d106      	bne.n	8003f02 <_Z10st_pinModeP12GPIO_TypeDefhi+0x32>
		HAL_GPIO_WritePin(PIN_NAME_GPIO_Port, PIN_NAME_Pin, GPIO_PIN_RESET);
 8003ef4:	7afb      	ldrb	r3, [r7, #11]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2200      	movs	r2, #0
 8003efa:	4619      	mov	r1, r3
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f001 fb3f 	bl	8005580 <HAL_GPIO_WritePin>
	}
	/*Configure GPIO pin */
	GPIO_InitStruct.Pin = PIN_NAME_Pin;
 8003f02:	7afb      	ldrb	r3, [r7, #11]
 8003f04:	617b      	str	r3, [r7, #20]
	if (i==1) {
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d102      	bne.n	8003f12 <_Z10st_pinModeP12GPIO_TypeDefhi+0x42>
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	61bb      	str	r3, [r7, #24]
 8003f10:	e001      	b.n	8003f16 <_Z10st_pinModeP12GPIO_TypeDefhi+0x46>
	}
	else{
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61bb      	str	r3, [r7, #24]
	}
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(PIN_NAME_GPIO_Port, &GPIO_InitStruct);
 8003f1e:	f107 0314 	add.w	r3, r7, #20
 8003f22:	4619      	mov	r1, r3
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f001 f97f 	bl	8005228 <HAL_GPIO_Init>
}
 8003f2a:	bf00      	nop
 8003f2c:	3728      	adds	r7, #40	; 0x28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>:


/*
 * This function requests the time
 */
boolean IridiumSBD::MRT_Iridium_getTime(void){
 8003f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f36:	b0a1      	sub	sp, #132	; 0x84
 8003f38:	af04      	add	r7, sp, #16
 8003f3a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nRetrieving time\r\n", 20, HAL_MAX_DELAY);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f42:	2214      	movs	r2, #20
 8003f44:	4928      	ldr	r1, [pc, #160]	; (8003fe8 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xb4>)
 8003f46:	f004 fd60 	bl	8008a0a <HAL_UART_Transmit>
	struct tm t; // struct tm is defined in time.h
	int err = this->getSystemTime(t); // Ask the 9603N for the system time
 8003f4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f4e:	4619      	mov	r1, r3
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7fe fbdb 	bl	800270c <_ZN10IridiumSBD13getSystemTimeER2tm>
 8003f56:	66f8      	str	r0, [r7, #108]	; 0x6c
	if (err == ISBD_SUCCESS) // Was it successful?
 8003f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d125      	bne.n	8003faa <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x76>
	    {
		char buf[61];
		sprintf(buf, "\r\n<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 8003f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
		sprintf(buf, "\r\n<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 8003f60:	f203 756c 	addw	r5, r3, #1900	; 0x76c
				t.tm_year + 1900, t.tm_mon + 1, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);
 8003f64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
		sprintf(buf, "\r\n<< Iridium date/time is %d-%02d-%02d %02d:%02d:%02d\r\n",
 8003f66:	1c5e      	adds	r6, r3, #1
 8003f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f6c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003f6e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003f70:	f107 0408 	add.w	r4, r7, #8
 8003f74:	9003      	str	r0, [sp, #12]
 8003f76:	9102      	str	r1, [sp, #8]
 8003f78:	9201      	str	r2, [sp, #4]
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	4633      	mov	r3, r6
 8003f7e:	462a      	mov	r2, r5
 8003f80:	491a      	ldr	r1, [pc, #104]	; (8003fec <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xb8>)
 8003f82:	4620      	mov	r0, r4
 8003f84:	f009 f962 	bl	800d24c <siprintf>
		HAL_UART_Transmit(&(this->uart),(uint8_t*) buf, strlen(buf), HAL_MAX_DELAY);
 8003f88:	687c      	ldr	r4, [r7, #4]
 8003f8a:	f107 0308 	add.w	r3, r7, #8
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fc f948 	bl	8000224 <strlen>
 8003f94:	4603      	mov	r3, r0
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	f107 0108 	add.w	r1, r7, #8
 8003f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f004 fd32 	bl	8008a0a <HAL_UART_Transmit>
		return true;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e019      	b.n	8003fde <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xaa>
	}

	else if (err == ISBD_NO_NETWORK) // Did it fail because the 9603N has not yet seen the network?
 8003faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fac:	2b0c      	cmp	r3, #12
 8003fae:	d108      	bne.n	8003fc2 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0x8e>
	     {
	  	 HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nNo network detected.\r\n", 28, HAL_MAX_DELAY);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fb6:	221c      	movs	r2, #28
 8003fb8:	490d      	ldr	r1, [pc, #52]	; (8003ff0 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xbc>)
 8003fba:	f004 fd26 	bl	8008a0a <HAL_UART_Transmit>
	   	 return false;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e00d      	b.n	8003fde <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xaa>
	}

	else
	    {
		HAL_UART_Transmit(&(this->uart),(uint8_t*) "\r\nUnexpected Error ", 21, HAL_MAX_DELAY);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc8:	2215      	movs	r2, #21
 8003fca:	490a      	ldr	r1, [pc, #40]	; (8003ff4 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv+0xc0>)
 8003fcc:	f004 fd1d 	bl	8008a0a <HAL_UART_Transmit>
		this->MRT_Iridium_ErrorMessage(err);
 8003fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff fec2 	bl	8003d60 <_ZN10IridiumSBD24MRT_Iridium_ErrorMessageEh>
		return false;
 8003fdc:	2300      	movs	r3, #0
	}
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3774      	adds	r7, #116	; 0x74
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	08010f70 	.word	0x08010f70
 8003fec:	08010f84 	.word	0x08010f84
 8003ff0:	08010fbc 	.word	0x08010fbc
 8003ff4:	08010fd8 	.word	0x08010fd8

08003ff8 <_ZN10IridiumSBDC1ER7TwoWireh>:
      if (ringPin != -1)
         pinMode(ringPin, INPUT);
   }
   */

   IridiumSBD(TwoWire &wirePort = Wire, uint8_t deviceAddress = 0x63)
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	4613      	mov	r3, r2
 8004004:	71fb      	strb	r3, [r7, #7]
   {
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2205      	movs	r2, #5
 8004012:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2202      	movs	r2, #2
 8004022:	f883 20de 	strb.w	r2, [r3, #222]	; 0xde
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2204      	movs	r2, #4
 800402a:	f883 20df 	strb.w	r2, [r3, #223]	; 0xdf
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2208      	movs	r2, #8
 8004032:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2210      	movs	r2, #16
 800403a:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2240      	movs	r2, #64	; 0x40
 800404a:	f883 20e3 	strb.w	r2, [r3, #227]	; 0xe3
      useSerial = false;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      wireport = &wirePort;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	64da      	str	r2, [r3, #76]	; 0x4c
      deviceaddress = deviceAddress;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	79fa      	ldrb	r2, [r7, #7]
 8004060:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      sbdixInterval = ISBD_USB_SBDIX_INTERVAL;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	221e      	movs	r2, #30
 8004068:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      atTimeout = ISBD_DEFAULT_AT_TIMEOUT;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	221e      	movs	r2, #30
 8004070:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      sendReceiveTimeout = ISBD_DEFAULT_SENDRECEIVE_TIME;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800407a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
      startupTimeout = ISBD_STARTUP_MAX_TIME;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	22f0      	movs	r2, #240	; 0xf0
 8004082:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
      remainingMessages = -1;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f04f 32ff 	mov.w	r2, #4294967295
 800408c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
      asleep = true;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
      reentrant = false;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
      sleepPin = -1;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f04f 32ff 	mov.w	r2, #4294967295
 80040a6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
      sleepPinConfigured = false;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
      ringPin = -1;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f04f 32ff 	mov.w	r2, #4294967295
 80040b8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
      msstmWorkaroundRequested = false;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
      ringAlertsEnabled = true;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
      ringAsserted = false;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
      lastPowerOnTime = 0UL;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
      head = SBDRING;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4a0d      	ldr	r2, [pc, #52]	; (8004114 <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 80040e0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
      tail = SBDRING;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4a0b      	ldr	r2, [pc, #44]	; (8004114 <_ZN10IridiumSBDC1ER7TwoWireh+0x11c>)
 80040e8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
      nextChar = -1;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f04f 32ff 	mov.w	r2, #4294967295
 80040f2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
      i2c_ser_buffer_tail = 0;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      i2c_ser_buffer_head = 0;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   }
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	0801143c 	.word	0x0801143c

08004118 <MRT_Static_Iridium_Constructor>:
#endif

static IridiumSBD *E_T = NULL;


void MRT_Static_Iridium_Constructor(){
 8004118:	b598      	push	{r3, r4, r7, lr}
 800411a:	af00      	add	r7, sp, #0
	if (E_T==NULL){
 800411c:	4b08      	ldr	r3, [pc, #32]	; (8004140 <MRT_Static_Iridium_Constructor+0x28>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10b      	bne.n	800413c <MRT_Static_Iridium_Constructor+0x24>
		E_T = new IridiumSBD();
 8004124:	20e4      	movs	r0, #228	; 0xe4
 8004126:	f007 fd89 	bl	800bc3c <_Znwj>
 800412a:	4603      	mov	r3, r0
 800412c:	461c      	mov	r4, r3
 800412e:	2263      	movs	r2, #99	; 0x63
 8004130:	4904      	ldr	r1, [pc, #16]	; (8004144 <MRT_Static_Iridium_Constructor+0x2c>)
 8004132:	4620      	mov	r0, r4
 8004134:	f7ff ff60 	bl	8003ff8 <_ZN10IridiumSBDC1ER7TwoWireh>
 8004138:	4b01      	ldr	r3, [pc, #4]	; (8004140 <MRT_Static_Iridium_Constructor+0x28>)
 800413a:	601c      	str	r4, [r3, #0]
	}
}
 800413c:	bf00      	nop
 800413e:	bd98      	pop	{r3, r4, r7, pc}
 8004140:	200002ac 	.word	0x200002ac
 8004144:	200002b0 	.word	0x200002b0

08004148 <MRT_Static_Iridium_Destructor>:

void MRT_Static_Iridium_Destructor(){
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
	if (E_T!=NULL){
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <MRT_Static_Iridium_Destructor+0x1c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <MRT_Static_Iridium_Destructor+0x12>
		E_T = NULL;
 8004154:	4b03      	ldr	r3, [pc, #12]	; (8004164 <MRT_Static_Iridium_Destructor+0x1c>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
	}
}
 800415a:	bf00      	nop
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	200002ac 	.word	0x200002ac

08004168 <MRT_Static_Iridium_Setup>:


uint8_t MRT_Static_Iridium_Setup(UART_HandleTypeDef huart){
 8004168:	b084      	sub	sp, #16
 800416a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800416c:	b08f      	sub	sp, #60	; 0x3c
 800416e:	af0e      	add	r7, sp, #56	; 0x38
 8004170:	f107 0418 	add.w	r4, r7, #24
 8004174:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MRT_Static_Iridium_Constructor();
 8004178:	f7ff ffce 	bl	8004118 <MRT_Static_Iridium_Constructor>
	return E_T->MRT_Iridium_setup(huart);
 800417c:	4b0e      	ldr	r3, [pc, #56]	; (80041b8 <MRT_Static_Iridium_Setup+0x50>)
 800417e:	681e      	ldr	r6, [r3, #0]
 8004180:	466d      	mov	r5, sp
 8004182:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8004186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004188:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800418a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800418c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800418e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004190:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004192:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004196:	e885 0003 	stmia.w	r5, {r0, r1}
 800419a:	f107 0318 	add.w	r3, r7, #24
 800419e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041a0:	4630      	mov	r0, r6
 80041a2:	f7ff fc6f 	bl	8003a84 <_ZN10IridiumSBD17MRT_Iridium_setupE20__UART_HandleTypeDef>
 80041a6:	4603      	mov	r3, r0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3704      	adds	r7, #4
 80041ac:	46bd      	mov	sp, r7
 80041ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80041b2:	b004      	add	sp, #16
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	200002ac 	.word	0x200002ac

080041bc <MRT_Static_Iridium_Shutdown>:

bool MRT_Static_Iridium_Shutdown(void){
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
	bool b = E_T->MRT_Iridium_shutdown();
 80041c2:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <MRT_Static_Iridium_Shutdown+0x2c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff fd54 	bl	8003c74 <_ZN10IridiumSBD20MRT_Iridium_shutdownEv>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bf14      	ite	ne
 80041d2:	2301      	movne	r3, #1
 80041d4:	2300      	moveq	r3, #0
 80041d6:	71fb      	strb	r3, [r7, #7]
	MRT_Static_Iridium_Destructor();
 80041d8:	f7ff ffb6 	bl	8004148 <MRT_Static_Iridium_Destructor>
	return b;
 80041dc:	79fb      	ldrb	r3, [r7, #7]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	200002ac 	.word	0x200002ac

080041ec <MRT_Static_Iridium_getTime>:
bool MRT_Static_Iridium_NetworkAvailability(){
	return E_T->MRT_Iridium_NetworkAvailability();
}


bool MRT_Static_Iridium_getTime(void){
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
	return E_T->MRT_Iridium_getTime();
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <MRT_Static_Iridium_getTime+0x20>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff fe9d 	bl	8003f34 <_ZN10IridiumSBD19MRT_Iridium_getTimeEv>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf14      	ite	ne
 8004200:	2301      	movne	r3, #1
 8004202:	2300      	moveq	r3, #0
 8004204:	b2db      	uxtb	r3, r3
}
 8004206:	4618      	mov	r0, r3
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	200002ac 	.word	0x200002ac

08004210 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8004210:	b590      	push	{r4, r7, lr}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <_ZN5Print5writeEPKc+0x14>
 8004220:	2300      	movs	r3, #0
 8004222:	e00d      	b.n	8004240 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3304      	adds	r3, #4
 800422a:	681c      	ldr	r4, [r3, #0]
 800422c:	6838      	ldr	r0, [r7, #0]
 800422e:	f7fb fff9 	bl	8000224 <strlen>
 8004232:	4603      	mov	r3, r0
 8004234:	461a      	mov	r2, r3
 8004236:	6839      	ldr	r1, [r7, #0]
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	47a0      	blx	r4
 800423c:	4603      	mov	r3, r0
 800423e:	bf00      	nop
    }
 8004240:	4618      	mov	r0, r3
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	bd90      	pop	{r4, r7, pc}

08004248 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]
  while (size--) {
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	1e5a      	subs	r2, r3, #1
 800425c:	607a      	str	r2, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	bf14      	ite	ne
 8004262:	2301      	movne	r3, #1
 8004264:	2300      	moveq	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00e      	beq.n	800428a <_ZN5Print5writeEPKhj+0x42>
    n += write(*buffer++);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	1c59      	adds	r1, r3, #1
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	4619      	mov	r1, r3
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	4790      	blx	r2
 8004280:	4602      	mov	r2, r0
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	4413      	add	r3, r2
 8004286:	617b      	str	r3, [r7, #20]
  while (size--) {
 8004288:	e7e6      	b.n	8004258 <_ZN5Print5writeEPKhj+0x10>
  }
  return n;
 800428a:	697b      	ldr	r3, [r7, #20]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  return print(reinterpret_cast<const char *>(ifsh));
 800429e:	6839      	ldr	r1, [r7, #0]
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f805 	bl	80042b0 <_ZN5Print5printEPKc>
 80042a6:	4603      	mov	r3, r0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <_ZN5Print5printEPKc>:
{
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  return write(str);
 80042ba:	6839      	ldr	r1, [r7, #0]
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff ffa7 	bl	8004210 <_ZN5Print5writeEPKc>
 80042c2:	4603      	mov	r3, r0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3708      	adds	r7, #8
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <_ZN5PrintC1Ev>:
    Print() : write_error(0) {}
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	4a06      	ldr	r2, [pc, #24]	; (80042f0 <_ZN5PrintC1Ev+0x24>)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	605a      	str	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4618      	mov	r0, r3
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	08011450 	.word	0x08011450

080042f4 <_ZN6StreamC1Ev>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b082      	sub	sp, #8
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff ffe4 	bl	80042cc <_ZN5PrintC1Ev>
 8004304:	4a05      	ldr	r2, [pc, #20]	; (800431c <_ZN6StreamC1Ev+0x28>)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004310:	609a      	str	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4618      	mov	r0, r3
 8004316:	3708      	adds	r7, #8
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	08011480 	.word	0x08011480

08004320 <_ZN7TwoWireC1EP11I2C_TypeDef>:

#define FLAG_TIMEOUT ((int)0x1000)
#define LONG_TIMEOUT ((int)0x8000)

// Constructors ////////////////////////////////////////////////////////////////
TwoWire::TwoWire(I2C_TypeDef *twi)
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff ffe1 	bl	80042f4 <_ZN6StreamC1Ev>
 8004332:	4a16      	ldr	r2, [pc, #88]	; (800438c <_ZN7TwoWireC1EP11I2C_TypeDef+0x6c>)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	601a      	str	r2, [r3, #0]
{
  I2cHandle.Instance = twi;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	63da      	str	r2, [r3, #60]	; 0x3c
  memset(rxBuffer, 0, BUFFER_LENGTH);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3390      	adds	r3, #144	; 0x90
 8004342:	2220      	movs	r2, #32
 8004344:	2100      	movs	r1, #0
 8004346:	4618      	mov	r0, r3
 8004348:	f007 ff28 	bl	800c19c <memset>
  rxBufferIndex = 0;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = 0;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
  txAddress = 0;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	741a      	strb	r2, [r3, #16]
  txBufferIndex = 0;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  transmitting = 0;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  defaultAddress = 0x00;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
}
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4618      	mov	r0, r3
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	08011460 	.word	0x08011460

08004390 <_ZN7TwoWire11requestFromEhhh>:
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  HAL_I2C_Init(&I2cHandle);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af02      	add	r7, sp, #8
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	4608      	mov	r0, r1
 800439a:	4611      	mov	r1, r2
 800439c:	461a      	mov	r2, r3
 800439e:	4603      	mov	r3, r0
 80043a0:	70fb      	strb	r3, [r7, #3]
 80043a2:	460b      	mov	r3, r1
 80043a4:	70bb      	strb	r3, [r7, #2]
 80043a6:	4613      	mov	r3, r2
 80043a8:	707b      	strb	r3, [r7, #1]
  uint8_t ret_val;

  disableInterrupt();
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fc24 	bl	8004bf8 <_ZN7TwoWire16disableInterruptEv>

  // clamp to buffer length
  if(quantity > BUFFER_LENGTH){
 80043b0:	78bb      	ldrb	r3, [r7, #2]
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	d901      	bls.n	80043ba <_ZN7TwoWire11requestFromEhhh+0x2a>
    quantity = BUFFER_LENGTH;
 80043b6:	2320      	movs	r3, #32
 80043b8:	70bb      	strb	r3, [r7, #2]
  }
  // perform blocking read into buffer
  int read = i2c_master_read((address << 1), (char *)rxBuffer, quantity, sendStop);
 80043ba:	78fb      	ldrb	r3, [r7, #3]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	b2d9      	uxtb	r1, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f103 0290 	add.w	r2, r3, #144	; 0x90
 80043c6:	78b8      	ldrb	r0, [r7, #2]
 80043c8:	787b      	ldrb	r3, [r7, #1]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	4603      	mov	r3, r0
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f9cf 	bl	8004772 <_ZN7TwoWire15i2c_master_readEhPchh>
 80043d4:	60b8      	str	r0, [r7, #8]

  if(read < 0)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	da02      	bge.n	80043e2 <_ZN7TwoWire11requestFromEhhh+0x52>
  {
    ret_val = 0;
 80043dc:	2300      	movs	r3, #0
 80043de:	73fb      	strb	r3, [r7, #15]
 80043e0:	e001      	b.n	80043e6 <_ZN7TwoWire11requestFromEhhh+0x56>
  }else
  {
    ret_val = read;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	73fb      	strb	r3, [r7, #15]
  }

  // set rx buffer iterator vars
  rxBufferIndex = 0;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  rxBufferLength = ret_val;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	7bfa      	ldrb	r2, [r7, #15]
 80043f2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

  enableInterrupt();
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fbcc 	bl	8004b94 <_ZN7TwoWire15enableInterruptEv>

  return ret_val;
 80043fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	460b      	mov	r3, r1
 8004410:	70fb      	strb	r3, [r7, #3]
 8004412:	4613      	mov	r3, r2
 8004414:	70bb      	strb	r3, [r7, #2]
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8004416:	78ba      	ldrb	r2, [r7, #2]
 8004418:	78f9      	ldrb	r1, [r7, #3]
 800441a:	2301      	movs	r3, #1
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff ffb7 	bl	8004390 <_ZN7TwoWire11requestFromEhhh>
 8004422:	4603      	mov	r3, r0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <_ZN7TwoWire17beginTransmissionEh>:
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	460b      	mov	r3, r1
 8004436:	70fb      	strb	r3, [r7, #3]
  // indicate that we are transmitting
  transmitting = 1;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  // set address of targeted slave
  txAddress = address;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	741a      	strb	r2, [r3, #16]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <_ZN7TwoWire15endTransmissionEh>:
//  is very possible to leave the bus in a hung state if
//  no call to endTransmission(true) is made. Some I2C
//  devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b086      	sub	sp, #24
 8004466:	af02      	add	r7, sp, #8
 8004468:	6078      	str	r0, [r7, #4]
 800446a:	460b      	mov	r3, r1
 800446c:	70fb      	strb	r3, [r7, #3]
  // transmit buffer (blocking)
  disableInterrupt();
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 fbc2 	bl	8004bf8 <_ZN7TwoWire16disableInterruptEv>

  int8_t ret = i2c_master_write((txAddress << 1), (const char *)txBuffer, txBufferLength, sendStop);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	7c1b      	ldrb	r3, [r3, #16]
 8004478:	0059      	lsls	r1, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f103 0211 	add.w	r2, r3, #17
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004486:	4618      	mov	r0, r3
 8004488:	78fb      	ldrb	r3, [r7, #3]
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	4603      	mov	r3, r0
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 fa00 	bl	8004894 <_ZN7TwoWire16i2c_master_writeEiPKcii>
 8004494:	4603      	mov	r3, r0
 8004496:	73fb      	strb	r3, [r7, #15]
  // reset tx buffer iterator vars
  txBufferIndex = 0;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  txBufferLength = 0;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  // indicate that we are done transmitting
  transmitting = 0;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  enableInterrupt();
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fb6f 	bl	8004b94 <_ZN7TwoWire15enableInterruptEv>

  return ret;
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <_ZN7TwoWire15endTransmissionEv>:

//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  return endTransmission(true);
 80044c8:	2101      	movs	r1, #1
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff ffc9 	bl	8004462 <_ZN7TwoWire15endTransmissionEh>
 80044d0:	4603      	mov	r3, r0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <_ZN7TwoWire5writeEh>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	460b      	mov	r3, r1
 80044e4:	70fb      	strb	r3, [r7, #3]
  if(transmitting){
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01d      	beq.n	800452c <_ZN7TwoWire5writeEh+0x52>
    // in master transmitter mode
    // don't bother if buffer is full
    if(txBufferLength >= BUFFER_LENGTH){
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80044f6:	2b1f      	cmp	r3, #31
 80044f8:	d901      	bls.n	80044fe <_ZN7TwoWire5writeEh+0x24>
      return 0;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e028      	b.n	8004550 <_ZN7TwoWire5writeEh+0x76>
    }
    // put byte in tx buffer
    txBuffer[txBufferIndex] = data;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004504:	4619      	mov	r1, r3
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	440b      	add	r3, r1
 800450c:	745a      	strb	r2, [r3, #17]
    ++txBufferIndex;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004514:	3301      	adds	r3, #1
 8004516:	b2da      	uxtb	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    // update amount in buffer
    txBufferLength = txBufferIndex;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800452a:	e010      	b.n	800454e <_ZN7TwoWire5writeEh+0x74>
  }else{
    // in slave send mode
  // transmit buffer (blocking)
    disableInterrupt();
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fb63 	bl	8004bf8 <_ZN7TwoWire16disableInterruptEv>

    // reply to master
  i2c_slave_write((const char *)&data, 1);
 8004532:	1cfb      	adds	r3, r7, #3
 8004534:	2201      	movs	r2, #1
 8004536:	4619      	mov	r1, r3
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fa95 	bl	8004a68 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fb28 	bl	8004b94 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	333c      	adds	r3, #60	; 0x3c
 8004548:	4618      	mov	r0, r3
 800454a:	f001 fdc5 	bl	80060d8 <HAL_I2C_EnableListen_IT>
  }
  return 1;
 800454e:	2301      	movs	r3, #1
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
  if(transmitting){
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800456a:	2b00      	cmp	r3, #0
 800456c:	d013      	beq.n	8004596 <_ZN7TwoWire5writeEPKhj+0x3e>
  // in master transmitter mode
    for(size_t i = 0; i < quantity; ++i){
 800456e:	2300      	movs	r3, #0
 8004570:	617b      	str	r3, [r7, #20]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	429a      	cmp	r2, r3
 8004578:	d21e      	bcs.n	80045b8 <_ZN7TwoWire5writeEPKhj+0x60>
      write(data[i]);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68b9      	ldr	r1, [r7, #8]
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	440a      	add	r2, r1
 8004586:	7812      	ldrb	r2, [r2, #0]
 8004588:	4611      	mov	r1, r2
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	4798      	blx	r3
    for(size_t i = 0; i < quantity; ++i){
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	3301      	adds	r3, #1
 8004592:	617b      	str	r3, [r7, #20]
 8004594:	e7ed      	b.n	8004572 <_ZN7TwoWire5writeEPKhj+0x1a>
    }
  }else{
    // in slave send mode
    // reply to master
  disableInterrupt();
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 fb2e 	bl	8004bf8 <_ZN7TwoWire16disableInterruptEv>

  i2c_slave_write((const char *)data, quantity);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	461a      	mov	r2, r3
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 fa60 	bl	8004a68 <_ZN7TwoWire15i2c_slave_writeEPKci>

  enableInterrupt();
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 faf3 	bl	8004b94 <_ZN7TwoWire15enableInterruptEv>

  HAL_I2C_EnableListen_IT(&I2cHandle);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	333c      	adds	r3, #60	; 0x3c
 80045b2:	4618      	mov	r0, r3
 80045b4:	f001 fd90 	bl	80060d8 <HAL_I2C_EnableListen_IT>
  }
  return quantity;
 80045b8:	687b      	ldr	r3, [r7, #4]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <_ZN7TwoWire9availableEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  return rxBufferLength - rxBufferIndex;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	461a      	mov	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	1ad3      	subs	r3, r2, r3
}
 80045de:	4618      	mov	r0, r3
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <_ZN7TwoWire4readEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b085      	sub	sp, #20
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  int value = -1;
 80045f2:	f04f 33ff 	mov.w	r3, #4294967295
 80045f6:	60fb      	str	r3, [r7, #12]

  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004606:	b2db      	uxtb	r3, r3
 8004608:	429a      	cmp	r2, r3
 800460a:	bf34      	ite	cc
 800460c:	2301      	movcc	r3, #1
 800460e:	2300      	movcs	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d012      	beq.n	800463c <_ZN7TwoWire4readEv+0x52>
    value = rxBuffer[rxBufferIndex];
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	461a      	mov	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4413      	add	r3, r2
 8004624:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004628:	60fb      	str	r3, [r7, #12]
    ++rxBufferIndex;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	3301      	adds	r3, #1
 8004634:	b2da      	uxtb	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
  }

  return value;
 800463c:	68fb      	ldr	r3, [r7, #12]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3714      	adds	r7, #20
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <_ZN7TwoWire4peekEv>:

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
 800464a:	b480      	push	{r7}
 800464c:	b085      	sub	sp, #20
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  int value = -1;
 8004652:	f04f 33ff 	mov.w	r3, #4294967295
 8004656:	60fb      	str	r3, [r7, #12]

  if(rxBufferIndex < rxBufferLength){
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800465e:	b2da      	uxtb	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004666:	b2db      	uxtb	r3, r3
 8004668:	429a      	cmp	r2, r3
 800466a:	bf34      	ite	cc
 800466c:	2301      	movcc	r3, #1
 800466e:	2300      	movcs	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <_ZN7TwoWire4peekEv+0x40>
    value = rxBuffer[rxBufferIndex];
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	461a      	mov	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4413      	add	r3, r2
 8004684:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004688:	60fb      	str	r3, [r7, #12]
  }

  return value;
 800468a:	68fb      	ldr	r3, [r7, #12]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3714      	adds	r7, #20
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <_ZN7TwoWire5flushEv>:

void TwoWire::flush(void)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  // XXX: to be implemented.
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <_ZN7TwoWire16i2c_master_startEv>:
{
  user_onRequest = function;
}

int TwoWire::i2c_master_start()
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b8:	60bb      	str	r3, [r7, #8]

    int timeout;

    // Clear Acknowledge failure flag
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046c2:	615a      	str	r2, [r3, #20]

    // Wait the STOP condition has been previously correctly sent
  // This timeout can be avoid in some specific cases by simply clearing the STOP bit
    timeout = FLAG_TIMEOUT;
 80046c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046c8:	60fb      	str	r3, [r7, #12]
    while ((i2c->CR1 & I2C_CR1_STOP) == I2C_CR1_STOP) {
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046d6:	bf0c      	ite	eq
 80046d8:	2301      	moveq	r3, #1
 80046da:	2300      	movne	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00b      	beq.n	80046fa <_ZN7TwoWire16i2c_master_startEv+0x4e>
        if ((timeout--) == 0) {
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1e5a      	subs	r2, r3, #1
 80046e6:	60fa      	str	r2, [r7, #12]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	bf0c      	ite	eq
 80046ec:	2301      	moveq	r3, #1
 80046ee:	2300      	movne	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0e9      	beq.n	80046ca <_ZN7TwoWire16i2c_master_startEv+0x1e>
            return 1;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e021      	b.n	800473e <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    // Generate the START condition
    i2c->CR1 |= I2C_CR1_START;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	601a      	str	r2, [r3, #0]

    // Wait the START condition has been correctly sent
    timeout = FLAG_TIMEOUT;
 8004706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800470a:	60fb      	str	r3, [r7, #12]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b01      	cmp	r3, #1
 8004718:	bf14      	ite	ne
 800471a:	2301      	movne	r3, #1
 800471c:	2300      	moveq	r3, #0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00b      	beq.n	800473c <_ZN7TwoWire16i2c_master_startEv+0x90>
        if ((timeout--) == 0) {
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	1e5a      	subs	r2, r3, #1
 8004728:	60fa      	str	r2, [r7, #12]
 800472a:	2b00      	cmp	r3, #0
 800472c:	bf0c      	ite	eq
 800472e:	2301      	moveq	r3, #1
 8004730:	2300      	movne	r3, #0
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0e9      	beq.n	800470c <_ZN7TwoWire16i2c_master_startEv+0x60>
            return 1;
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <_ZN7TwoWire16i2c_master_startEv+0x92>
        }
    }

    return 0;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <_ZN7TwoWire15i2c_master_stopEv>:

int TwoWire::i2c_master_stop()
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004756:	60fb      	str	r3, [r7, #12]

    // Generate the STOP condition
    i2c->CR1 |= I2C_CR1_STOP;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	601a      	str	r2, [r3, #0]

    return 0;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <_ZN7TwoWire15i2c_master_readEhPchh>:

int TwoWire::i2c_master_read(uint8_t address, char *data, uint8_t length, uint8_t stop)
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b08a      	sub	sp, #40	; 0x28
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	461a      	mov	r2, r3
 800477e:	460b      	mov	r3, r1
 8004780:	72fb      	strb	r3, [r7, #11]
 8004782:	4613      	mov	r3, r2
 8004784:	72bb      	strb	r3, [r7, #10]
    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478a:	61fb      	str	r3, [r7, #28]
    int timeout;
    int count;
    int value;
    int ret;

    i2c_master_start();
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f7ff ff8d 	bl	80046ac <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 8004792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	bf14      	ite	ne
 80047a6:	2301      	movne	r3, #1
 80047a8:	2300      	moveq	r3, #0
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <_ZN7TwoWire15i2c_master_readEhPchh+0x50>
        timeout--;
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	3b01      	subs	r3, #1
 80047b4:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1ed      	bne.n	8004798 <_ZN7TwoWire15i2c_master_readEhPchh+0x26>
            return -1;
 80047bc:	f04f 33ff 	mov.w	r3, #4294967295
 80047c0:	e064      	b.n	800488c <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_READ(address);
 80047c2:	7afb      	ldrb	r3, [r7, #11]
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	461a      	mov	r2, r3
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 80047d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047d4:	627b      	str	r3, [r7, #36]	; 0x24
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	bf14      	ite	ne
 80047e4:	2301      	movne	r3, #1
 80047e6:	2300      	moveq	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d008      	beq.n	8004800 <_ZN7TwoWire15i2c_master_readEhPchh+0x8e>
        timeout--;
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	3b01      	subs	r3, #1
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
        if (timeout == 0) {
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1ed      	bne.n	80047d6 <_ZN7TwoWire15i2c_master_readEhPchh+0x64>
            return -1;
 80047fa:	f04f 33ff 	mov.w	r3, #4294967295
 80047fe:	e045      	b.n	800488c <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8004800:	2300      	movs	r3, #0
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	613b      	str	r3, [r7, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	613b      	str	r3, [r7, #16]
 8004814:	693b      	ldr	r3, [r7, #16]

    // Read all bytes except last one
    for (count = 0; count < (length - 1); count++) {
 8004816:	2300      	movs	r3, #0
 8004818:	623b      	str	r3, [r7, #32]
 800481a:	7abb      	ldrb	r3, [r7, #10]
 800481c:	3b01      	subs	r3, #1
 800481e:	6a3a      	ldr	r2, [r7, #32]
 8004820:	429a      	cmp	r2, r3
 8004822:	da17      	bge.n	8004854 <_ZN7TwoWire15i2c_master_readEhPchh+0xe2>
        ret = i2c_master_byte_read(&value, 0);
 8004824:	f107 0314 	add.w	r3, r7, #20
 8004828:	2200      	movs	r2, #0
 800482a:	4619      	mov	r1, r3
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f000 f8a4 	bl	800497a <_ZN7TwoWire20i2c_master_byte_readEPii>
 8004832:	61b8      	str	r0, [r7, #24]
        if(ret)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <_ZN7TwoWire15i2c_master_readEhPchh+0xce>
        {
          return -1;
 800483a:	f04f 33ff 	mov.w	r3, #4294967295
 800483e:	e025      	b.n	800488c <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
        }
        data[count] = (char)value;
 8004840:	6979      	ldr	r1, [r7, #20]
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	4413      	add	r3, r2
 8004848:	b2ca      	uxtb	r2, r1
 800484a:	701a      	strb	r2, [r3, #0]
    for (count = 0; count < (length - 1); count++) {
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	3301      	adds	r3, #1
 8004850:	623b      	str	r3, [r7, #32]
 8004852:	e7e2      	b.n	800481a <_ZN7TwoWire15i2c_master_readEhPchh+0xa8>
    }

    // If not repeated start, send stop.
    // Warning: must be done BEFORE the data is read.
    if (stop) {
 8004854:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <_ZN7TwoWire15i2c_master_readEhPchh+0xf0>
        i2c_master_stop();
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f7ff ff74 	bl	800474a <_ZN7TwoWire15i2c_master_stopEv>
    }

    // Read the last byte
    ret = i2c_master_byte_read(&value, 1);
 8004862:	f107 0314 	add.w	r3, r7, #20
 8004866:	2201      	movs	r2, #1
 8004868:	4619      	mov	r1, r3
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f885 	bl	800497a <_ZN7TwoWire20i2c_master_byte_readEPii>
 8004870:	61b8      	str	r0, [r7, #24]
    if(ret)
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d002      	beq.n	800487e <_ZN7TwoWire15i2c_master_readEhPchh+0x10c>
    {
      return -1;
 8004878:	f04f 33ff 	mov.w	r3, #4294967295
 800487c:	e006      	b.n	800488c <_ZN7TwoWire15i2c_master_readEhPchh+0x11a>
    }
    data[count] = (char)value;
 800487e:	6979      	ldr	r1, [r7, #20]
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	4413      	add	r3, r2
 8004886:	b2ca      	uxtb	r2, r1
 8004888:	701a      	strb	r2, [r3, #0]

    return length;
 800488a:	7abb      	ldrb	r3, [r7, #10]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3728      	adds	r7, #40	; 0x28
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <_ZN7TwoWire16i2c_master_writeEiPKcii>:

int TwoWire::i2c_master_write(int address, const char *data, int length, int stop)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a6:	617b      	str	r3, [r7, #20]
    int timeout;
    int count;

    i2c_master_start();
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f7ff feff 	bl	80046ac <_ZN7TwoWire16i2c_master_startEv>

    // Wait until SB flag is set
    timeout = FLAG_TIMEOUT;
 80048ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048b2:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_SB) == RESET) {
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b01      	cmp	r3, #1
 80048c0:	bf14      	ite	ne
 80048c2:	2301      	movne	r3, #1
 80048c4:	2300      	moveq	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d007      	beq.n	80048dc <_ZN7TwoWire16i2c_master_writeEiPKcii+0x48>
        timeout--;
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	3b01      	subs	r3, #1
 80048d0:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1ed      	bne.n	80048b4 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x20>
            return 4;
 80048d8:	2304      	movs	r3, #4
 80048da:	e04a      	b.n	8004972 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }

    i2c->DR = __HAL_I2C_7BIT_ADD_WRITE(address);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	f003 02fe 	and.w	r2, r3, #254	; 0xfe
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	611a      	str	r2, [r3, #16]

    // Wait address is acknowledged
    timeout = FLAG_TIMEOUT;
 80048e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048ec:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_ADDR) == RESET) {
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	bf14      	ite	ne
 80048fc:	2301      	movne	r3, #1
 80048fe:	2300      	moveq	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d007      	beq.n	8004916 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x82>
        timeout--;
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	3b01      	subs	r3, #1
 800490a:	61fb      	str	r3, [r7, #28]
        if (timeout == 0) {
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1ed      	bne.n	80048ee <_ZN7TwoWire16i2c_master_writeEiPKcii+0x5a>
            return 2;
 8004912:	2302      	movs	r3, #2
 8004914:	e02d      	b.n	8004972 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
        }
    }
    __HAL_I2C_CLEAR_ADDRFLAG(&I2cHandle);
 8004916:	2300      	movs	r3, #0
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	693b      	ldr	r3, [r7, #16]

    for (count = 0; count < length; count++) {
 800492c:	2300      	movs	r3, #0
 800492e:	61bb      	str	r3, [r7, #24]
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	da15      	bge.n	8004964 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xd0>
        if (i2c_master_byte_write(data[count]) != 1) {
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	4413      	add	r3, r2
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	4619      	mov	r1, r3
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 f85a 	bl	80049fc <_ZN7TwoWire21i2c_master_byte_writeEi>
 8004948:	4603      	mov	r3, r0
 800494a:	2b01      	cmp	r3, #1
 800494c:	bf14      	ite	ne
 800494e:	2301      	movne	r3, #1
 8004950:	2300      	moveq	r3, #0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <_ZN7TwoWire16i2c_master_writeEiPKcii+0xc8>
            return 3;
 8004958:	2303      	movs	r3, #3
 800495a:	e00a      	b.n	8004972 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xde>
    for (count = 0; count < length; count++) {
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	3301      	adds	r3, #1
 8004960:	61bb      	str	r3, [r7, #24]
 8004962:	e7e5      	b.n	8004930 <_ZN7TwoWire16i2c_master_writeEiPKcii+0x9c>
        }
    }

    // If not repeated start, send stop.
    if (stop) {
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <_ZN7TwoWire16i2c_master_writeEiPKcii+0xdc>
        i2c_master_stop();
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f7ff feed 	bl	800474a <_ZN7TwoWire15i2c_master_stopEv>
    }

    return 0;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3720      	adds	r7, #32
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <_ZN7TwoWire20i2c_master_byte_readEPii>:

int TwoWire::i2c_master_byte_read(int *value, int last)
{
 800497a:	b480      	push	{r7}
 800497c:	b087      	sub	sp, #28
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498a:	613b      	str	r3, [r7, #16]
    int timeout;

    if (last) {
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d006      	beq.n	80049a0 <_ZN7TwoWire20i2c_master_byte_readEPii+0x26>
        // Don't acknowledge the last byte
        i2c->CR1 &= ~I2C_CR1_ACK;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	e005      	b.n	80049ac <_ZN7TwoWire20i2c_master_byte_readEPii+0x32>
    } else {
        // Acknowledge the byte
        i2c->CR1 |= I2C_CR1_ACK;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	601a      	str	r2, [r3, #0]
    }

    // Wait until the byte is received
    timeout = FLAG_TIMEOUT;
 80049ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049b0:	617b      	str	r3, [r7, #20]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_RXNE) == RESET) {
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049bc:	2b40      	cmp	r3, #64	; 0x40
 80049be:	bf14      	ite	ne
 80049c0:	2301      	movne	r3, #1
 80049c2:	2300      	moveq	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00c      	beq.n	80049e4 <_ZN7TwoWire20i2c_master_byte_readEPii+0x6a>
        if ((timeout--) == 0) {
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	1e5a      	subs	r2, r3, #1
 80049ce:	617a      	str	r2, [r7, #20]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	bf0c      	ite	eq
 80049d4:	2301      	moveq	r3, #1
 80049d6:	2300      	movne	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0e9      	beq.n	80049b2 <_ZN7TwoWire20i2c_master_byte_readEPii+0x38>
            return -1;
 80049de:	f04f 33ff 	mov.w	r3, #4294967295
 80049e2:	e005      	b.n	80049f0 <_ZN7TwoWire20i2c_master_byte_readEPii+0x76>
        }
    }

    *value = (int)i2c->DR;
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	461a      	mov	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	601a      	str	r2, [r3, #0]

    return 0;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	371c      	adds	r7, #28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <_ZN7TwoWire21i2c_master_byte_writeEi>:

int TwoWire::i2c_master_byte_write(int data)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a0a:	60bb      	str	r3, [r7, #8]
    int timeout;

    i2c->DR = (uint8_t)data;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	611a      	str	r2, [r3, #16]

    // Wait until the byte is transmitted
    timeout = FLAG_TIMEOUT;
 8004a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a1a:	60fb      	str	r3, [r7, #12]
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a26:	2b80      	cmp	r3, #128	; 0x80
 8004a28:	d008      	beq.n	8004a3c <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
            (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == RESET)) {
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	f003 0304 	and.w	r3, r3, #4
    while ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) &&
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d001      	beq.n	8004a3c <_ZN7TwoWire21i2c_master_byte_writeEi+0x40>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <_ZN7TwoWire21i2c_master_byte_writeEi+0x42>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00b      	beq.n	8004a5a <_ZN7TwoWire21i2c_master_byte_writeEi+0x5e>
        if ((timeout--) == 0) {
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	1e5a      	subs	r2, r3, #1
 8004a46:	60fa      	str	r2, [r7, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	bf0c      	ite	eq
 8004a4c:	2301      	moveq	r3, #1
 8004a4e:	2300      	movne	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0e2      	beq.n	8004a1c <_ZN7TwoWire21i2c_master_byte_writeEi+0x20>
            return 0;
 8004a56:	2300      	movs	r3, #0
 8004a58:	e000      	b.n	8004a5c <_ZN7TwoWire21i2c_master_byte_writeEi+0x60>
        }
    }

    return 1;
 8004a5a:	2301      	movs	r3, #1
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <_ZN7TwoWire15i2c_slave_writeEPKci>:

int TwoWire::i2c_slave_write(const char *data, int length)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b089      	sub	sp, #36	; 0x24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
    uint32_t Timeout;
    int size = 0;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61bb      	str	r3, [r7, #24]

    I2C_TypeDef *i2c = (I2C_TypeDef *)I2cHandle.Instance;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7c:	617b      	str	r3, [r7, #20]

    while (length > 0) {
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	dd41      	ble.n	8004b08 <_ZN7TwoWire15i2c_slave_writeEPKci+0xa0>
        /* Wait until TXE flag is set */
        Timeout = FLAG_TIMEOUT;
 8004a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a88:	61fb      	str	r3, [r7, #28]
        while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_TXE) == RESET) {
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8e:	695b      	ldr	r3, [r3, #20]
 8004a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a94:	2b80      	cmp	r3, #128	; 0x80
 8004a96:	bf14      	ite	ne
 8004a98:	2301      	movne	r3, #1
 8004a9a:	2300      	moveq	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d008      	beq.n	8004ab4 <_ZN7TwoWire15i2c_slave_writeEPKci+0x4c>
            Timeout--;
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	61fb      	str	r3, [r7, #28]
            if (Timeout == 0) {
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1ed      	bne.n	8004a8a <_ZN7TwoWire15i2c_slave_writeEPKci+0x22>
                return -1;
 8004aae:	f04f 33ff 	mov.w	r3, #4294967295
 8004ab2:	e068      	b.n	8004b86 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
            }
        }

        /* Write data to DR */
        i2c->DR = (*data++);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	60ba      	str	r2, [r7, #8]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	611a      	str	r2, [r3, #16]
        length--;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	607b      	str	r3, [r7, #4]
        size++;
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	3301      	adds	r3, #1
 8004acc:	61bb      	str	r3, [r7, #24]

        if ((__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BTF) == SET) && (length != 0)) {
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d104      	bne.n	8004ae6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <_ZN7TwoWire15i2c_slave_writeEPKci+0x7e>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <_ZN7TwoWire15i2c_slave_writeEPKci+0x80>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0c8      	beq.n	8004a7e <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
            /* Write data to DR */
            i2c->DR = (*data++);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	60ba      	str	r2, [r7, #8]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	461a      	mov	r2, r3
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	611a      	str	r2, [r3, #16]
            length--;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	3b01      	subs	r3, #1
 8004afe:	607b      	str	r3, [r7, #4]
            size++;
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	3301      	adds	r3, #1
 8004b04:	61bb      	str	r3, [r7, #24]
    while (length > 0) {
 8004b06:	e7ba      	b.n	8004a7e <_ZN7TwoWire15i2c_slave_writeEPKci+0x16>
        }
    }

    /* Wait until AF flag is set */
    Timeout = FLAG_TIMEOUT;
 8004b08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b0c:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_AF) == RESET) {
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b1c:	bf14      	ite	ne
 8004b1e:	2301      	movne	r3, #1
 8004b20:	2300      	moveq	r3, #0
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d008      	beq.n	8004b3a <_ZN7TwoWire15i2c_slave_writeEPKci+0xd2>
        Timeout--;
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1ec      	bne.n	8004b0e <_ZN7TwoWire15i2c_slave_writeEPKci+0xa6>
            return -1;
 8004b34:	f04f 33ff 	mov.w	r3, #4294967295
 8004b38:	e025      	b.n	8004b86 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(&I2cHandle, I2C_FLAG_AF);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b42:	615a      	str	r2, [r3, #20]

    /* Wait until BUSY flag is reset */
    Timeout = FLAG_TIMEOUT;
 8004b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b48:	61fb      	str	r3, [r7, #28]
    while (__HAL_I2C_GET_FLAG(&I2cHandle, I2C_FLAG_BUSY) == SET) {
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	bf0c      	ite	eq
 8004b58:	2301      	moveq	r3, #1
 8004b5a:	2300      	movne	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d008      	beq.n	8004b74 <_ZN7TwoWire15i2c_slave_writeEPKci+0x10c>
        Timeout--;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	3b01      	subs	r3, #1
 8004b66:	61fb      	str	r3, [r7, #28]
        if (Timeout == 0) {
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1ed      	bne.n	8004b4a <_ZN7TwoWire15i2c_slave_writeEPKci+0xe2>
            return -1;
 8004b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b72:	e008      	b.n	8004b86 <_ZN7TwoWire15i2c_slave_writeEPKci+0x11e>
        }
    }

    I2cHandle.State = HAL_I2C_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79

    /* Process Unlocked */
    __HAL_UNLOCK(&I2cHandle);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    return size;
 8004b84:	69bb      	ldr	r3, [r7, #24]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3724      	adds	r7, #36	; 0x24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
	...

08004b94 <_ZN7TwoWire15enableInterruptEv>:
      }
    }
}

void TwoWire::enableInterrupt(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba0:	4a12      	ldr	r2, [pc, #72]	; (8004bec <_ZN7TwoWire15enableInterruptEv+0x58>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d106      	bne.n	8004bb4 <_ZN7TwoWire15enableInterruptEv+0x20>
    {
      HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8004ba6:	2049      	movs	r0, #73	; 0x49
 8004ba8:	f000 fb22 	bl	80051f0 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8004bac:	2048      	movs	r0, #72	; 0x48
 8004bae:	f000 fb1f 	bl	80051f0 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8004bb2:	e016      	b.n	8004be2 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb8:	4a0d      	ldr	r2, [pc, #52]	; (8004bf0 <_ZN7TwoWire15enableInterruptEv+0x5c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d106      	bne.n	8004bcc <_ZN7TwoWire15enableInterruptEv+0x38>
      HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8004bbe:	2022      	movs	r0, #34	; 0x22
 8004bc0:	f000 fb16 	bl	80051f0 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004bc4:	2021      	movs	r0, #33	; 0x21
 8004bc6:	f000 fb13 	bl	80051f0 <HAL_NVIC_EnableIRQ>
}
 8004bca:	e00a      	b.n	8004be2 <_ZN7TwoWire15enableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd0:	4a08      	ldr	r2, [pc, #32]	; (8004bf4 <_ZN7TwoWire15enableInterruptEv+0x60>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d105      	bne.n	8004be2 <_ZN7TwoWire15enableInterruptEv+0x4e>
      HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004bd6:	2020      	movs	r0, #32
 8004bd8:	f000 fb0a 	bl	80051f0 <HAL_NVIC_EnableIRQ>
      HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004bdc:	201f      	movs	r0, #31
 8004bde:	f000 fb07 	bl	80051f0 <HAL_NVIC_EnableIRQ>
}
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40005c00 	.word	0x40005c00
 8004bf0:	40005800 	.word	0x40005800
 8004bf4:	40005400 	.word	0x40005400

08004bf8 <_ZN7TwoWire16disableInterruptEv>:

void TwoWire::disableInterrupt(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
    if(I2cHandle.Instance == I2C3)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c04:	4a12      	ldr	r2, [pc, #72]	; (8004c50 <_ZN7TwoWire16disableInterruptEv+0x58>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d106      	bne.n	8004c18 <_ZN7TwoWire16disableInterruptEv+0x20>
    {
      HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
 8004c0a:	2049      	movs	r0, #73	; 0x49
 8004c0c:	f000 fafe 	bl	800520c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
 8004c10:	2048      	movs	r0, #72	; 0x48
 8004c12:	f000 fafb 	bl	800520c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
    } else
    {
      // Do Nothing
    }
}
 8004c16:	e016      	b.n	8004c46 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if(I2cHandle.Instance == I2C2)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1c:	4a0d      	ldr	r2, [pc, #52]	; (8004c54 <_ZN7TwoWire16disableInterruptEv+0x5c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d106      	bne.n	8004c30 <_ZN7TwoWire16disableInterruptEv+0x38>
      HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8004c22:	2022      	movs	r0, #34	; 0x22
 8004c24:	f000 faf2 	bl	800520c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8004c28:	2021      	movs	r0, #33	; 0x21
 8004c2a:	f000 faef 	bl	800520c <HAL_NVIC_DisableIRQ>
}
 8004c2e:	e00a      	b.n	8004c46 <_ZN7TwoWire16disableInterruptEv+0x4e>
    else if (I2cHandle.Instance == I2C1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c34:	4a08      	ldr	r2, [pc, #32]	; (8004c58 <_ZN7TwoWire16disableInterruptEv+0x60>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d105      	bne.n	8004c46 <_ZN7TwoWire16disableInterruptEv+0x4e>
      HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8004c3a:	2020      	movs	r0, #32
 8004c3c:	f000 fae6 	bl	800520c <HAL_NVIC_DisableIRQ>
      HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8004c40:	201f      	movs	r0, #31
 8004c42:	f000 fae3 	bl	800520c <HAL_NVIC_DisableIRQ>
}
 8004c46:	bf00      	nop
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	40005c00 	.word	0x40005c00
 8004c54:	40005800 	.word	0x40005800
 8004c58:	40005400 	.word	0x40005400

08004c5c <_Z41__static_initialization_and_destruction_0ii>:

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire  = TwoWire(I2C1);
TwoWire Wire1 = TwoWire(I2C2);
TwoWire Wire2 = TwoWire(I2C3);
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d110      	bne.n	8004c8e <_Z41__static_initialization_and_destruction_0ii+0x32>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d10b      	bne.n	8004c8e <_Z41__static_initialization_and_destruction_0ii+0x32>
TwoWire Wire  = TwoWire(I2C1);
 8004c76:	4908      	ldr	r1, [pc, #32]	; (8004c98 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8004c78:	4808      	ldr	r0, [pc, #32]	; (8004c9c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004c7a:	f7ff fb51 	bl	8004320 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire1 = TwoWire(I2C2);
 8004c7e:	4908      	ldr	r1, [pc, #32]	; (8004ca0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8004c80:	4808      	ldr	r0, [pc, #32]	; (8004ca4 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004c82:	f7ff fb4d 	bl	8004320 <_ZN7TwoWireC1EP11I2C_TypeDef>
TwoWire Wire2 = TwoWire(I2C3);
 8004c86:	4908      	ldr	r1, [pc, #32]	; (8004ca8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004c88:	4808      	ldr	r0, [pc, #32]	; (8004cac <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004c8a:	f7ff fb49 	bl	8004320 <_ZN7TwoWireC1EP11I2C_TypeDef>
 8004c8e:	bf00      	nop
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40005400 	.word	0x40005400
 8004c9c:	200002b0 	.word	0x200002b0
 8004ca0:	40005800 	.word	0x40005800
 8004ca4:	20000368 	.word	0x20000368
 8004ca8:	40005c00 	.word	0x40005c00
 8004cac:	20000420 	.word	0x20000420

08004cb0 <_GLOBAL__sub_I__ZN7TwoWireC2EP11I2C_TypeDef>:
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004cb8:	2001      	movs	r0, #1
 8004cba:	f7ff ffcf 	bl	8004c5c <_Z41__static_initialization_and_destruction_0ii>
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <HAL_RTC_AlarmAEventCallback>:
RTC_TimeTypeDef sTime = {0};
RTC_DateTypeDef sDate = {0};
RTC_AlarmTypeDef sAlarm = {0};

/*You cannot put these in the user callbacks section and I don't know why (can put in user begin 4)*/
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc){
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),(uint8_t*)"AlarmA\r\n", 8, HAL_MAX_DELAY);
 8004cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ccc:	2208      	movs	r2, #8
 8004cce:	4905      	ldr	r1, [pc, #20]	; (8004ce4 <HAL_RTC_AlarmAEventCallback+0x24>)
 8004cd0:	4805      	ldr	r0, [pc, #20]	; (8004ce8 <HAL_RTC_AlarmAEventCallback+0x28>)
 8004cd2:	f003 fe9a 	bl	8008a0a <HAL_UART_Transmit>
	flagA = 1;
 8004cd6:	4b05      	ldr	r3, [pc, #20]	; (8004cec <HAL_RTC_AlarmAEventCallback+0x2c>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	701a      	strb	r2, [r3, #0]
}
 8004cdc:	bf00      	nop
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	08011258 	.word	0x08011258
 8004ce8:	20005020 	.word	0x20005020
 8004cec:	200004d8 	.word	0x200004d8

08004cf0 <MRT_SetupRTOS>:
}




bool MRT_SetupRTOS(UART_HandleTypeDef uart,uint8_t sleepT){
 8004cf0:	b084      	sub	sp, #16
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	f107 0c10 	add.w	ip, r7, #16
 8004cfc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTOS\r\n", 17, HAL_MAX_DELAY);
 8004d00:	f04f 33ff 	mov.w	r3, #4294967295
 8004d04:	2211      	movs	r2, #17
 8004d06:	490e      	ldr	r1, [pc, #56]	; (8004d40 <MRT_SetupRTOS+0x50>)
 8004d08:	480e      	ldr	r0, [pc, #56]	; (8004d44 <MRT_SetupRTOS+0x54>)
 8004d0a:	f003 fe7e 	bl	8008a0a <HAL_UART_Transmit>
	rtos.huart = uart;
 8004d0e:	4b0d      	ldr	r3, [pc, #52]	; (8004d44 <MRT_SetupRTOS+0x54>)
 8004d10:	4618      	mov	r0, r3
 8004d12:	f107 0310 	add.w	r3, r7, #16
 8004d16:	2244      	movs	r2, #68	; 0x44
 8004d18:	4619      	mov	r1, r3
 8004d1a:	f007 fa17 	bl	800c14c <memcpy>
	rtos.sleepTime = sleepT;
 8004d1e:	4a09      	ldr	r2, [pc, #36]	; (8004d44 <MRT_SetupRTOS+0x54>)
 8004d20:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8004d24:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
	bool wakingUp = MRT_WUProcedure();
 8004d28:	f000 f80e 	bl	8004d48 <MRT_WUProcedure>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	71fb      	strb	r3, [r7, #7]
	return wakingUp;
 8004d30:	79fb      	ldrb	r3, [r7, #7]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d3c:	b004      	add	sp, #16
 8004d3e:	4770      	bx	lr
 8004d40:	08011270 	.word	0x08011270
 8004d44:	20005020 	.word	0x20005020

08004d48 <MRT_WUProcedure>:



bool MRT_WUProcedure(void){
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0

	bool wakingUp = false;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	71fb      	strb	r3, [r7, #7]

	//If WU flag set, wake up procedure
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET)
 8004d52:	4b14      	ldr	r3, [pc, #80]	; (8004da4 <MRT_WUProcedure+0x5c>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d11b      	bne.n	8004d96 <MRT_WUProcedure+0x4e>
	{
		wakingUp = true;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	71fb      	strb	r3, [r7, #7]

		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8004d62:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <MRT_WUProcedure+0x5c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a0f      	ldr	r2, [pc, #60]	; (8004da4 <MRT_WUProcedure+0x5c>)
 8004d68:	f043 0308 	orr.w	r3, r3, #8
 8004d6c:	6013      	str	r3, [r2, #0]

		/** display  the string **/
		char *str = "Wakeup from the STANDBY MODE\r\n";
 8004d6e:	4b0e      	ldr	r3, [pc, #56]	; (8004da8 <MRT_WUProcedure+0x60>)
 8004d70:	603b      	str	r3, [r7, #0]
		HAL_UART_Transmit(&(rtos.huart), (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8004d72:	6838      	ldr	r0, [r7, #0]
 8004d74:	f7fb fa56 	bl	8000224 <strlen>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d80:	6839      	ldr	r1, [r7, #0]
 8004d82:	480a      	ldr	r0, [pc, #40]	; (8004dac <MRT_WUProcedure+0x64>)
 8004d84:	f003 fe41 	bl	8008a0a <HAL_UART_Transmit>

		/** Disable the WWAKEUP PIN **/
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8004d88:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004d8c:	f001 fd48 	bl	8006820 <HAL_PWR_DisableWakeUpPin>

		/** Deactivate the RTC wakeup  **/
		HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8004d90:	4807      	ldr	r0, [pc, #28]	; (8004db0 <MRT_WUProcedure+0x68>)
 8004d92:	f003 fadd 	bl	8008350 <HAL_RTCEx_DeactivateWakeUpTimer>
	}

	MRT_ClearFlags();
 8004d96:	f000 f80d 	bl	8004db4 <MRT_ClearFlags>

	return wakingUp;
 8004d9a:	79fb      	ldrb	r3, [r7, #7]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	40007000 	.word	0x40007000
 8004da8:	08011284 	.word	0x08011284
 8004dac:	20005020 	.word	0x20005020
 8004db0:	20004fa4 	.word	0x20004fa4

08004db4 <MRT_ClearFlags>:

void MRT_ClearFlags(void){
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
	//Must be after alarm A was activated and before going to sleep

	HAL_UART_Transmit(&(rtos.huart),"Clearing the flags\r\n", 20, HAL_MAX_DELAY);
 8004db8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dbc:	2214      	movs	r2, #20
 8004dbe:	4932      	ldr	r1, [pc, #200]	; (8004e88 <MRT_ClearFlags+0xd4>)
 8004dc0:	4832      	ldr	r0, [pc, #200]	; (8004e8c <MRT_ClearFlags+0xd8>)
 8004dc2:	f003 fe22 	bl	8008a0a <HAL_UART_Transmit>
	  	//Clear alarmA flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8004dc6:	4b32      	ldr	r3, [pc, #200]	; (8004e90 <MRT_ClearFlags+0xdc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	22ca      	movs	r2, #202	; 0xca
 8004dcc:	625a      	str	r2, [r3, #36]	; 0x24
 8004dce:	4b30      	ldr	r3, [pc, #192]	; (8004e90 <MRT_ClearFlags+0xdc>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2253      	movs	r2, #83	; 0x53
 8004dd4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8004dd6:	e00f      	b.n	8004df8 <MRT_ClearFlags+0x44>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm A flag\r\n", 23, HAL_MAX_DELAY);
 8004dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ddc:	2217      	movs	r2, #23
 8004dde:	492d      	ldr	r1, [pc, #180]	; (8004e94 <MRT_ClearFlags+0xe0>)
 8004de0:	482a      	ldr	r0, [pc, #168]	; (8004e8c <MRT_ClearFlags+0xd8>)
 8004de2:	f003 fe12 	bl	8008a0a <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8004de6:	4b2a      	ldr	r3, [pc, #168]	; (8004e90 <MRT_ClearFlags+0xdc>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	4b28      	ldr	r3, [pc, #160]	; (8004e90 <MRT_ClearFlags+0xdc>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004df6:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRAF) != RESET){
 8004df8:	4b25      	ldr	r3, [pc, #148]	; (8004e90 <MRT_ClearFlags+0xdc>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1e8      	bne.n	8004dd8 <MRT_ClearFlags+0x24>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004e06:	4b22      	ldr	r3, [pc, #136]	; (8004e90 <MRT_ClearFlags+0xdc>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	22ff      	movs	r2, #255	; 0xff
 8004e0c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004e0e:	4b22      	ldr	r3, [pc, #136]	; (8004e98 <MRT_ClearFlags+0xe4>)
 8004e10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e14:	615a      	str	r2, [r3, #20]


  	//Clear alarmB flag
	__HAL_RTC_WRITEPROTECTION_DISABLE(&hrtc);
 8004e16:	4b1e      	ldr	r3, [pc, #120]	; (8004e90 <MRT_ClearFlags+0xdc>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	22ca      	movs	r2, #202	; 0xca
 8004e1c:	625a      	str	r2, [r3, #36]	; 0x24
 8004e1e:	4b1c      	ldr	r3, [pc, #112]	; (8004e90 <MRT_ClearFlags+0xdc>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2253      	movs	r2, #83	; 0x53
 8004e24:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8004e26:	e00f      	b.n	8004e48 <MRT_ClearFlags+0x94>
		HAL_UART_Transmit(&(rtos.huart),"Clearing alarm B flag\r\n", 23, HAL_MAX_DELAY);
 8004e28:	f04f 33ff 	mov.w	r3, #4294967295
 8004e2c:	2217      	movs	r2, #23
 8004e2e:	491b      	ldr	r1, [pc, #108]	; (8004e9c <MRT_ClearFlags+0xe8>)
 8004e30:	4816      	ldr	r0, [pc, #88]	; (8004e8c <MRT_ClearFlags+0xd8>)
 8004e32:	f003 fdea 	bl	8008a0a <HAL_UART_Transmit>
		__HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRBF);
 8004e36:	4b16      	ldr	r3, [pc, #88]	; (8004e90 <MRT_ClearFlags+0xdc>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	4b14      	ldr	r3, [pc, #80]	; (8004e90 <MRT_ClearFlags+0xdc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004e46:	60da      	str	r2, [r3, #12]
	while (__HAL_RTC_ALARM_GET_FLAG(&hrtc, RTC_FLAG_ALRBF) != RESET){
 8004e48:	4b11      	ldr	r3, [pc, #68]	; (8004e90 <MRT_ClearFlags+0xdc>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e8      	bne.n	8004e28 <MRT_ClearFlags+0x74>
	}
	__HAL_RTC_WRITEPROTECTION_ENABLE(&hrtc);
 8004e56:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <MRT_ClearFlags+0xdc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	22ff      	movs	r2, #255	; 0xff
 8004e5c:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004e5e:	4b0e      	ldr	r3, [pc, #56]	; (8004e98 <MRT_ClearFlags+0xe4>)
 8004e60:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004e64:	615a      	str	r2, [r3, #20]


	/* Clear the WU FLAG */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing WU flag\r\n", 18, HAL_MAX_DELAY);
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8004e66:	4b0e      	ldr	r3, [pc, #56]	; (8004ea0 <MRT_ClearFlags+0xec>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a0d      	ldr	r2, [pc, #52]	; (8004ea0 <MRT_ClearFlags+0xec>)
 8004e6c:	f043 0304 	orr.w	r3, r3, #4
 8004e70:	6013      	str	r3, [r2, #0]

	/* clear the RTC Wake UP (WU) flag */
	//HAL_UART_Transmit(&(rtos.huart),"Clearing RTC WU flag\r\n", 22, HAL_MAX_DELAY);
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8004e72:	4b07      	ldr	r3, [pc, #28]	; (8004e90 <MRT_ClearFlags+0xdc>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <MRT_ClearFlags+0xdc>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8004e82:	60da      	str	r2, [r3, #12]
}
 8004e84:	bf00      	nop
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	080112a4 	.word	0x080112a4
 8004e8c:	20005020 	.word	0x20005020
 8004e90:	20004fa4 	.word	0x20004fa4
 8004e94:	080112bc 	.word	0x080112bc
 8004e98:	40013c00 	.word	0x40013c00
 8004e9c:	080112d4 	.word	0x080112d4
 8004ea0:	40007000 	.word	0x40007000

08004ea4 <MRT_StandByMode>:

/*
 * This function is called to enter standby mode
 * @param seconds: time before it wakes up (max of 36 hours)
 */
void MRT_StandByMode( uint32_t seconds){
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b0a4      	sub	sp, #144	; 0x90
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&(rtos.huart),"\r\nStandByMode\r\n", 15, HAL_MAX_DELAY);
 8004eac:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb0:	220f      	movs	r2, #15
 8004eb2:	491b      	ldr	r1, [pc, #108]	; (8004f20 <MRT_StandByMode+0x7c>)
 8004eb4:	481b      	ldr	r0, [pc, #108]	; (8004f24 <MRT_StandByMode+0x80>)
 8004eb6:	f003 fda8 	bl	8008a0a <HAL_UART_Transmit>

	/* Enable the WAKEUP PIN
	 * (Needs to be placed BEFORE clearing up the flags or else it wakes up as soon as we enter standby mode)*/
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8004eba:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004ebe:	f001 fc9d 	bl	80067fc <HAL_PWR_EnableWakeUpPin>

	/*Clear the flags so it doesn't wake up as soon as it goes to sleep*/
	MRT_ClearFlags();
 8004ec2:	f7ff ff77 	bl	8004db4 <MRT_ClearFlags>

	//Setup RTC wake up timer
	HAL_UART_Transmit(&(rtos.huart),"Setting up RTCW\r\n", 17, HAL_MAX_DELAY);
 8004ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8004eca:	2211      	movs	r2, #17
 8004ecc:	4916      	ldr	r1, [pc, #88]	; (8004f28 <MRT_StandByMode+0x84>)
 8004ece:	4815      	ldr	r0, [pc, #84]	; (8004f24 <MRT_StandByMode+0x80>)
 8004ed0:	f003 fd9b 	bl	8008a0a <HAL_UART_Transmit>
	  Error_Handler();
	}
	*/

	char* msg[30+sizeof(uint32_t)];
	sprintf(msg,"Going to sleep for %i seconds\r\n",seconds);
 8004ed4:	f107 0308 	add.w	r3, r7, #8
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	4914      	ldr	r1, [pc, #80]	; (8004f2c <MRT_StandByMode+0x88>)
 8004edc:	4618      	mov	r0, r3
 8004ede:	f008 f9b5 	bl	800d24c <siprintf>
	HAL_UART_Transmit(&(rtos.huart), msg,strlen(msg),HAL_MAX_DELAY);
 8004ee2:	f107 0308 	add.w	r3, r7, #8
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7fb f99c 	bl	8000224 <strlen>
 8004eec:	4603      	mov	r3, r0
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	f107 0108 	add.w	r1, r7, #8
 8004ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef8:	480a      	ldr	r0, [pc, #40]	; (8004f24 <MRT_StandByMode+0x80>)
 8004efa:	f003 fd86 	bl	8008a0a <HAL_UART_Transmit>

	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc,seconds, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8004efe:	2204      	movs	r2, #4
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	480b      	ldr	r0, [pc, #44]	; (8004f30 <MRT_StandByMode+0x8c>)
 8004f04:	f003 f964 	bl	80081d0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <MRT_StandByMode+0x6e>
	{
	  Error_Handler();
 8004f0e:	f7fc fc17 	bl	8001740 <Error_Handler>
	}

	HAL_PWR_EnterSTANDBYMode();
 8004f12:	f001 fc99 	bl	8006848 <HAL_PWR_EnterSTANDBYMode>
}
 8004f16:	bf00      	nop
 8004f18:	3790      	adds	r7, #144	; 0x90
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	080112ec 	.word	0x080112ec
 8004f24:	20005020 	.word	0x20005020
 8004f28:	080112fc 	.word	0x080112fc
 8004f2c:	08011310 	.word	0x08011310
 8004f30:	20004fa4 	.word	0x20004fa4

08004f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004f38:	4b0e      	ldr	r3, [pc, #56]	; (8004f74 <HAL_Init+0x40>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a0d      	ldr	r2, [pc, #52]	; (8004f74 <HAL_Init+0x40>)
 8004f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004f44:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <HAL_Init+0x40>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a0a      	ldr	r2, [pc, #40]	; (8004f74 <HAL_Init+0x40>)
 8004f4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f50:	4b08      	ldr	r3, [pc, #32]	; (8004f74 <HAL_Init+0x40>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a07      	ldr	r2, [pc, #28]	; (8004f74 <HAL_Init+0x40>)
 8004f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f5c:	2003      	movs	r0, #3
 8004f5e:	f000 f920 	bl	80051a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f62:	200f      	movs	r0, #15
 8004f64:	f7fc fce0 	bl	8001928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f68:	f7fc fbf0 	bl	800174c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40023c00 	.word	0x40023c00

08004f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f7c:	4b06      	ldr	r3, [pc, #24]	; (8004f98 <HAL_IncTick+0x20>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <HAL_IncTick+0x24>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4413      	add	r3, r2
 8004f88:	4a04      	ldr	r2, [pc, #16]	; (8004f9c <HAL_IncTick+0x24>)
 8004f8a:	6013      	str	r3, [r2, #0]
}
 8004f8c:	bf00      	nop
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	20000014 	.word	0x20000014
 8004f9c:	20005068 	.word	0x20005068

08004fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8004fa4:	4b03      	ldr	r3, [pc, #12]	; (8004fb4 <HAL_GetTick+0x14>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20005068 	.word	0x20005068

08004fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fc0:	f7ff ffee 	bl	8004fa0 <HAL_GetTick>
 8004fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd0:	d005      	beq.n	8004fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004fd2:	4b0a      	ldr	r3, [pc, #40]	; (8004ffc <HAL_Delay+0x44>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4413      	add	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004fde:	bf00      	nop
 8004fe0:	f7ff ffde 	bl	8004fa0 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d8f7      	bhi.n	8004fe0 <HAL_Delay+0x28>
  {
  }
}
 8004ff0:	bf00      	nop
 8004ff2:	bf00      	nop
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000014 	.word	0x20000014

08005000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005010:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <__NVIC_SetPriorityGrouping+0x44>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800501c:	4013      	ands	r3, r2
 800501e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005028:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800502c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005032:	4a04      	ldr	r2, [pc, #16]	; (8005044 <__NVIC_SetPriorityGrouping+0x44>)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	60d3      	str	r3, [r2, #12]
}
 8005038:	bf00      	nop
 800503a:	3714      	adds	r7, #20
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	e000ed00 	.word	0xe000ed00

08005048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005048:	b480      	push	{r7}
 800504a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800504c:	4b04      	ldr	r3, [pc, #16]	; (8005060 <__NVIC_GetPriorityGrouping+0x18>)
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	0a1b      	lsrs	r3, r3, #8
 8005052:	f003 0307 	and.w	r3, r3, #7
}
 8005056:	4618      	mov	r0, r3
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	e000ed00 	.word	0xe000ed00

08005064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	4603      	mov	r3, r0
 800506c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800506e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005072:	2b00      	cmp	r3, #0
 8005074:	db0b      	blt.n	800508e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	f003 021f 	and.w	r2, r3, #31
 800507c:	4907      	ldr	r1, [pc, #28]	; (800509c <__NVIC_EnableIRQ+0x38>)
 800507e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005082:	095b      	lsrs	r3, r3, #5
 8005084:	2001      	movs	r0, #1
 8005086:	fa00 f202 	lsl.w	r2, r0, r2
 800508a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	e000e100 	.word	0xe000e100

080050a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	db12      	blt.n	80050d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	f003 021f 	and.w	r2, r3, #31
 80050b8:	490a      	ldr	r1, [pc, #40]	; (80050e4 <__NVIC_DisableIRQ+0x44>)
 80050ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	2001      	movs	r0, #1
 80050c2:	fa00 f202 	lsl.w	r2, r0, r2
 80050c6:	3320      	adds	r3, #32
 80050c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80050cc:	f3bf 8f4f 	dsb	sy
}
 80050d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80050d2:	f3bf 8f6f 	isb	sy
}
 80050d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	e000e100 	.word	0xe000e100

080050e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4603      	mov	r3, r0
 80050f0:	6039      	str	r1, [r7, #0]
 80050f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	db0a      	blt.n	8005112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	490c      	ldr	r1, [pc, #48]	; (8005134 <__NVIC_SetPriority+0x4c>)
 8005102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005106:	0112      	lsls	r2, r2, #4
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	440b      	add	r3, r1
 800510c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005110:	e00a      	b.n	8005128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	b2da      	uxtb	r2, r3
 8005116:	4908      	ldr	r1, [pc, #32]	; (8005138 <__NVIC_SetPriority+0x50>)
 8005118:	79fb      	ldrb	r3, [r7, #7]
 800511a:	f003 030f 	and.w	r3, r3, #15
 800511e:	3b04      	subs	r3, #4
 8005120:	0112      	lsls	r2, r2, #4
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	440b      	add	r3, r1
 8005126:	761a      	strb	r2, [r3, #24]
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	e000e100 	.word	0xe000e100
 8005138:	e000ed00 	.word	0xe000ed00

0800513c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800513c:	b480      	push	{r7}
 800513e:	b089      	sub	sp, #36	; 0x24
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	f1c3 0307 	rsb	r3, r3, #7
 8005156:	2b04      	cmp	r3, #4
 8005158:	bf28      	it	cs
 800515a:	2304      	movcs	r3, #4
 800515c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	3304      	adds	r3, #4
 8005162:	2b06      	cmp	r3, #6
 8005164:	d902      	bls.n	800516c <NVIC_EncodePriority+0x30>
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	3b03      	subs	r3, #3
 800516a:	e000      	b.n	800516e <NVIC_EncodePriority+0x32>
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005170:	f04f 32ff 	mov.w	r2, #4294967295
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	43da      	mvns	r2, r3
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	401a      	ands	r2, r3
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005184:	f04f 31ff 	mov.w	r1, #4294967295
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	fa01 f303 	lsl.w	r3, r1, r3
 800518e:	43d9      	mvns	r1, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005194:	4313      	orrs	r3, r2
         );
}
 8005196:	4618      	mov	r0, r3
 8005198:	3724      	adds	r7, #36	; 0x24
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051a2:	b580      	push	{r7, lr}
 80051a4:	b082      	sub	sp, #8
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f7ff ff28 	bl	8005000 <__NVIC_SetPriorityGrouping>
}
 80051b0:	bf00      	nop
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b086      	sub	sp, #24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	4603      	mov	r3, r0
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
 80051c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051ca:	f7ff ff3d 	bl	8005048 <__NVIC_GetPriorityGrouping>
 80051ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	68b9      	ldr	r1, [r7, #8]
 80051d4:	6978      	ldr	r0, [r7, #20]
 80051d6:	f7ff ffb1 	bl	800513c <NVIC_EncodePriority>
 80051da:	4602      	mov	r2, r0
 80051dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051e0:	4611      	mov	r1, r2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7ff ff80 	bl	80050e8 <__NVIC_SetPriority>
}
 80051e8:	bf00      	nop
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051fe:	4618      	mov	r0, r3
 8005200:	f7ff ff30 	bl	8005064 <__NVIC_EnableIRQ>
}
 8005204:	bf00      	nop
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff ff40 	bl	80050a0 <__NVIC_DisableIRQ>
}
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005228:	b480      	push	{r7}
 800522a:	b089      	sub	sp, #36	; 0x24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005236:	2300      	movs	r3, #0
 8005238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800523a:	2300      	movs	r3, #0
 800523c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800523e:	2300      	movs	r3, #0
 8005240:	61fb      	str	r3, [r7, #28]
 8005242:	e165      	b.n	8005510 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005244:	2201      	movs	r2, #1
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	fa02 f303 	lsl.w	r3, r2, r3
 800524c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4013      	ands	r3, r2
 8005256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	429a      	cmp	r2, r3
 800525e:	f040 8154 	bne.w	800550a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	2b01      	cmp	r3, #1
 800526c:	d005      	beq.n	800527a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005276:	2b02      	cmp	r3, #2
 8005278:	d130      	bne.n	80052dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	2203      	movs	r2, #3
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	43db      	mvns	r3, r3
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	4013      	ands	r3, r2
 8005290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052b0:	2201      	movs	r2, #1
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	43db      	mvns	r3, r3
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	4013      	ands	r3, r2
 80052be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	091b      	lsrs	r3, r3, #4
 80052c6:	f003 0201 	and.w	r2, r3, #1
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	69ba      	ldr	r2, [r7, #24]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f003 0303 	and.w	r3, r3, #3
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d017      	beq.n	8005318 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	2203      	movs	r2, #3
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	43db      	mvns	r3, r3
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	4013      	ands	r3, r2
 80052fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	fa02 f303 	lsl.w	r3, r2, r3
 800530c:	69ba      	ldr	r2, [r7, #24]
 800530e:	4313      	orrs	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	69ba      	ldr	r2, [r7, #24]
 8005316:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f003 0303 	and.w	r3, r3, #3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d123      	bne.n	800536c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	08da      	lsrs	r2, r3, #3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3208      	adds	r2, #8
 800532c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	220f      	movs	r2, #15
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	43db      	mvns	r3, r3
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	4013      	ands	r3, r2
 8005346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	f003 0307 	and.w	r3, r3, #7
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	69ba      	ldr	r2, [r7, #24]
 800535a:	4313      	orrs	r3, r2
 800535c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	08da      	lsrs	r2, r3, #3
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3208      	adds	r2, #8
 8005366:	69b9      	ldr	r1, [r7, #24]
 8005368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	2203      	movs	r2, #3
 8005378:	fa02 f303 	lsl.w	r3, r2, r3
 800537c:	43db      	mvns	r3, r3
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	4013      	ands	r3, r2
 8005382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f003 0203 	and.w	r2, r3, #3
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	fa02 f303 	lsl.w	r3, r2, r3
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	4313      	orrs	r3, r2
 8005398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 80ae 	beq.w	800550a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	4b5d      	ldr	r3, [pc, #372]	; (8005528 <HAL_GPIO_Init+0x300>)
 80053b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b6:	4a5c      	ldr	r2, [pc, #368]	; (8005528 <HAL_GPIO_Init+0x300>)
 80053b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053bc:	6453      	str	r3, [r2, #68]	; 0x44
 80053be:	4b5a      	ldr	r3, [pc, #360]	; (8005528 <HAL_GPIO_Init+0x300>)
 80053c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053ca:	4a58      	ldr	r2, [pc, #352]	; (800552c <HAL_GPIO_Init+0x304>)
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	089b      	lsrs	r3, r3, #2
 80053d0:	3302      	adds	r3, #2
 80053d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	220f      	movs	r2, #15
 80053e2:	fa02 f303 	lsl.w	r3, r2, r3
 80053e6:	43db      	mvns	r3, r3
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	4013      	ands	r3, r2
 80053ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a4f      	ldr	r2, [pc, #316]	; (8005530 <HAL_GPIO_Init+0x308>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d025      	beq.n	8005442 <HAL_GPIO_Init+0x21a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a4e      	ldr	r2, [pc, #312]	; (8005534 <HAL_GPIO_Init+0x30c>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d01f      	beq.n	800543e <HAL_GPIO_Init+0x216>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a4d      	ldr	r2, [pc, #308]	; (8005538 <HAL_GPIO_Init+0x310>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d019      	beq.n	800543a <HAL_GPIO_Init+0x212>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a4c      	ldr	r2, [pc, #304]	; (800553c <HAL_GPIO_Init+0x314>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d013      	beq.n	8005436 <HAL_GPIO_Init+0x20e>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a4b      	ldr	r2, [pc, #300]	; (8005540 <HAL_GPIO_Init+0x318>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00d      	beq.n	8005432 <HAL_GPIO_Init+0x20a>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a4a      	ldr	r2, [pc, #296]	; (8005544 <HAL_GPIO_Init+0x31c>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d007      	beq.n	800542e <HAL_GPIO_Init+0x206>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a49      	ldr	r2, [pc, #292]	; (8005548 <HAL_GPIO_Init+0x320>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d101      	bne.n	800542a <HAL_GPIO_Init+0x202>
 8005426:	2306      	movs	r3, #6
 8005428:	e00c      	b.n	8005444 <HAL_GPIO_Init+0x21c>
 800542a:	2307      	movs	r3, #7
 800542c:	e00a      	b.n	8005444 <HAL_GPIO_Init+0x21c>
 800542e:	2305      	movs	r3, #5
 8005430:	e008      	b.n	8005444 <HAL_GPIO_Init+0x21c>
 8005432:	2304      	movs	r3, #4
 8005434:	e006      	b.n	8005444 <HAL_GPIO_Init+0x21c>
 8005436:	2303      	movs	r3, #3
 8005438:	e004      	b.n	8005444 <HAL_GPIO_Init+0x21c>
 800543a:	2302      	movs	r3, #2
 800543c:	e002      	b.n	8005444 <HAL_GPIO_Init+0x21c>
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <HAL_GPIO_Init+0x21c>
 8005442:	2300      	movs	r3, #0
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	f002 0203 	and.w	r2, r2, #3
 800544a:	0092      	lsls	r2, r2, #2
 800544c:	4093      	lsls	r3, r2
 800544e:	69ba      	ldr	r2, [r7, #24]
 8005450:	4313      	orrs	r3, r2
 8005452:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005454:	4935      	ldr	r1, [pc, #212]	; (800552c <HAL_GPIO_Init+0x304>)
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	089b      	lsrs	r3, r3, #2
 800545a:	3302      	adds	r3, #2
 800545c:	69ba      	ldr	r2, [r7, #24]
 800545e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005462:	4b3a      	ldr	r3, [pc, #232]	; (800554c <HAL_GPIO_Init+0x324>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	43db      	mvns	r3, r3
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	4013      	ands	r3, r2
 8005470:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	4313      	orrs	r3, r2
 8005484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005486:	4a31      	ldr	r2, [pc, #196]	; (800554c <HAL_GPIO_Init+0x324>)
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800548c:	4b2f      	ldr	r3, [pc, #188]	; (800554c <HAL_GPIO_Init+0x324>)
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	43db      	mvns	r3, r3
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	4013      	ands	r3, r2
 800549a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054b0:	4a26      	ldr	r2, [pc, #152]	; (800554c <HAL_GPIO_Init+0x324>)
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80054b6:	4b25      	ldr	r3, [pc, #148]	; (800554c <HAL_GPIO_Init+0x324>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	43db      	mvns	r3, r3
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	4013      	ands	r3, r2
 80054c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80054da:	4a1c      	ldr	r2, [pc, #112]	; (800554c <HAL_GPIO_Init+0x324>)
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054e0:	4b1a      	ldr	r3, [pc, #104]	; (800554c <HAL_GPIO_Init+0x324>)
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	43db      	mvns	r3, r3
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	4013      	ands	r3, r2
 80054ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005504:	4a11      	ldr	r2, [pc, #68]	; (800554c <HAL_GPIO_Init+0x324>)
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	3301      	adds	r3, #1
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	2b0f      	cmp	r3, #15
 8005514:	f67f ae96 	bls.w	8005244 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005518:	bf00      	nop
 800551a:	bf00      	nop
 800551c:	3724      	adds	r7, #36	; 0x24
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	40023800 	.word	0x40023800
 800552c:	40013800 	.word	0x40013800
 8005530:	40020000 	.word	0x40020000
 8005534:	40020400 	.word	0x40020400
 8005538:	40020800 	.word	0x40020800
 800553c:	40020c00 	.word	0x40020c00
 8005540:	40021000 	.word	0x40021000
 8005544:	40021400 	.word	0x40021400
 8005548:	40021800 	.word	0x40021800
 800554c:	40013c00 	.word	0x40013c00

08005550 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	460b      	mov	r3, r1
 800555a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691a      	ldr	r2, [r3, #16]
 8005560:	887b      	ldrh	r3, [r7, #2]
 8005562:	4013      	ands	r3, r2
 8005564:	2b00      	cmp	r3, #0
 8005566:	d002      	beq.n	800556e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005568:	2301      	movs	r3, #1
 800556a:	73fb      	strb	r3, [r7, #15]
 800556c:	e001      	b.n	8005572 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800556e:	2300      	movs	r3, #0
 8005570:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005572:	7bfb      	ldrb	r3, [r7, #15]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3714      	adds	r7, #20
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	807b      	strh	r3, [r7, #2]
 800558c:	4613      	mov	r3, r2
 800558e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005590:	787b      	ldrb	r3, [r7, #1]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005596:	887a      	ldrh	r2, [r7, #2]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800559c:	e003      	b.n	80055a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800559e:	887b      	ldrh	r3, [r7, #2]
 80055a0:	041a      	lsls	r2, r3, #16
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	619a      	str	r2, [r3, #24]
}
 80055a6:	bf00      	nop
 80055a8:	370c      	adds	r7, #12
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
	...

080055b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e12b      	b.n	800581e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d106      	bne.n	80055e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7fc f8e2 	bl	80017a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2224      	movs	r2, #36	; 0x24
 80055e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0201 	bic.w	r2, r2, #1
 80055f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005606:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005616:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005618:	f001 fa20 	bl	8006a5c <HAL_RCC_GetPCLK1Freq>
 800561c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	4a81      	ldr	r2, [pc, #516]	; (8005828 <HAL_I2C_Init+0x274>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d807      	bhi.n	8005638 <HAL_I2C_Init+0x84>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4a80      	ldr	r2, [pc, #512]	; (800582c <HAL_I2C_Init+0x278>)
 800562c:	4293      	cmp	r3, r2
 800562e:	bf94      	ite	ls
 8005630:	2301      	movls	r3, #1
 8005632:	2300      	movhi	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	e006      	b.n	8005646 <HAL_I2C_Init+0x92>
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4a7d      	ldr	r2, [pc, #500]	; (8005830 <HAL_I2C_Init+0x27c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	bf94      	ite	ls
 8005640:	2301      	movls	r3, #1
 8005642:	2300      	movhi	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e0e7      	b.n	800581e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4a78      	ldr	r2, [pc, #480]	; (8005834 <HAL_I2C_Init+0x280>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	0c9b      	lsrs	r3, r3, #18
 8005658:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	4a6a      	ldr	r2, [pc, #424]	; (8005828 <HAL_I2C_Init+0x274>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d802      	bhi.n	8005688 <HAL_I2C_Init+0xd4>
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	3301      	adds	r3, #1
 8005686:	e009      	b.n	800569c <HAL_I2C_Init+0xe8>
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800568e:	fb02 f303 	mul.w	r3, r2, r3
 8005692:	4a69      	ldr	r2, [pc, #420]	; (8005838 <HAL_I2C_Init+0x284>)
 8005694:	fba2 2303 	umull	r2, r3, r2, r3
 8005698:	099b      	lsrs	r3, r3, #6
 800569a:	3301      	adds	r3, #1
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	6812      	ldr	r2, [r2, #0]
 80056a0:	430b      	orrs	r3, r1
 80056a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80056ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	495c      	ldr	r1, [pc, #368]	; (8005828 <HAL_I2C_Init+0x274>)
 80056b8:	428b      	cmp	r3, r1
 80056ba:	d819      	bhi.n	80056f0 <HAL_I2C_Init+0x13c>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	1e59      	subs	r1, r3, #1
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80056ca:	1c59      	adds	r1, r3, #1
 80056cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80056d0:	400b      	ands	r3, r1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <HAL_I2C_Init+0x138>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1e59      	subs	r1, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80056e4:	3301      	adds	r3, #1
 80056e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ea:	e051      	b.n	8005790 <HAL_I2C_Init+0x1dc>
 80056ec:	2304      	movs	r3, #4
 80056ee:	e04f      	b.n	8005790 <HAL_I2C_Init+0x1dc>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d111      	bne.n	800571c <HAL_I2C_Init+0x168>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	1e58      	subs	r0, r3, #1
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6859      	ldr	r1, [r3, #4]
 8005700:	460b      	mov	r3, r1
 8005702:	005b      	lsls	r3, r3, #1
 8005704:	440b      	add	r3, r1
 8005706:	fbb0 f3f3 	udiv	r3, r0, r3
 800570a:	3301      	adds	r3, #1
 800570c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005710:	2b00      	cmp	r3, #0
 8005712:	bf0c      	ite	eq
 8005714:	2301      	moveq	r3, #1
 8005716:	2300      	movne	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	e012      	b.n	8005742 <HAL_I2C_Init+0x18e>
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	1e58      	subs	r0, r3, #1
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6859      	ldr	r1, [r3, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	440b      	add	r3, r1
 800572a:	0099      	lsls	r1, r3, #2
 800572c:	440b      	add	r3, r1
 800572e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005732:	3301      	adds	r3, #1
 8005734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005738:	2b00      	cmp	r3, #0
 800573a:	bf0c      	ite	eq
 800573c:	2301      	moveq	r3, #1
 800573e:	2300      	movne	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_I2C_Init+0x196>
 8005746:	2301      	movs	r3, #1
 8005748:	e022      	b.n	8005790 <HAL_I2C_Init+0x1dc>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10e      	bne.n	8005770 <HAL_I2C_Init+0x1bc>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	1e58      	subs	r0, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6859      	ldr	r1, [r3, #4]
 800575a:	460b      	mov	r3, r1
 800575c:	005b      	lsls	r3, r3, #1
 800575e:	440b      	add	r3, r1
 8005760:	fbb0 f3f3 	udiv	r3, r0, r3
 8005764:	3301      	adds	r3, #1
 8005766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800576a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800576e:	e00f      	b.n	8005790 <HAL_I2C_Init+0x1dc>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	1e58      	subs	r0, r3, #1
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6859      	ldr	r1, [r3, #4]
 8005778:	460b      	mov	r3, r1
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	0099      	lsls	r1, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	fbb0 f3f3 	udiv	r3, r0, r3
 8005786:	3301      	adds	r3, #1
 8005788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800578c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005790:	6879      	ldr	r1, [r7, #4]
 8005792:	6809      	ldr	r1, [r1, #0]
 8005794:	4313      	orrs	r3, r2
 8005796:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69da      	ldr	r2, [r3, #28]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	431a      	orrs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	430a      	orrs	r2, r1
 80057b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80057be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6911      	ldr	r1, [r2, #16]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	68d2      	ldr	r2, [r2, #12]
 80057ca:	4311      	orrs	r1, r2
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6812      	ldr	r2, [r2, #0]
 80057d0:	430b      	orrs	r3, r1
 80057d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695a      	ldr	r2, [r3, #20]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	431a      	orrs	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f042 0201 	orr.w	r2, r2, #1
 80057fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2220      	movs	r2, #32
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	000186a0 	.word	0x000186a0
 800582c:	001e847f 	.word	0x001e847f
 8005830:	003d08ff 	.word	0x003d08ff
 8005834:	431bde83 	.word	0x431bde83
 8005838:	10624dd3 	.word	0x10624dd3

0800583c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af02      	add	r7, sp, #8
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	4608      	mov	r0, r1
 8005846:	4611      	mov	r1, r2
 8005848:	461a      	mov	r2, r3
 800584a:	4603      	mov	r3, r0
 800584c:	817b      	strh	r3, [r7, #10]
 800584e:	460b      	mov	r3, r1
 8005850:	813b      	strh	r3, [r7, #8]
 8005852:	4613      	mov	r3, r2
 8005854:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005856:	f7ff fba3 	bl	8004fa0 <HAL_GetTick>
 800585a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b20      	cmp	r3, #32
 8005866:	f040 80d9 	bne.w	8005a1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	2319      	movs	r3, #25
 8005870:	2201      	movs	r2, #1
 8005872:	496d      	ldr	r1, [pc, #436]	; (8005a28 <HAL_I2C_Mem_Write+0x1ec>)
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 fde3 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005880:	2302      	movs	r3, #2
 8005882:	e0cc      	b.n	8005a1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_I2C_Mem_Write+0x56>
 800588e:	2302      	movs	r3, #2
 8005890:	e0c5      	b.n	8005a1e <HAL_I2C_Mem_Write+0x1e2>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d007      	beq.n	80058b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f042 0201 	orr.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2221      	movs	r2, #33	; 0x21
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2240      	movs	r2, #64	; 0x40
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6a3a      	ldr	r2, [r7, #32]
 80058e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4a4d      	ldr	r2, [pc, #308]	; (8005a2c <HAL_I2C_Mem_Write+0x1f0>)
 80058f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058fa:	88f8      	ldrh	r0, [r7, #6]
 80058fc:	893a      	ldrh	r2, [r7, #8]
 80058fe:	8979      	ldrh	r1, [r7, #10]
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	9301      	str	r3, [sp, #4]
 8005904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005906:	9300      	str	r3, [sp, #0]
 8005908:	4603      	mov	r3, r0
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 fc1a 	bl	8006144 <I2C_RequestMemoryWrite>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d052      	beq.n	80059bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e081      	b.n	8005a1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800591e:	68f8      	ldr	r0, [r7, #12]
 8005920:	f000 fe64 	bl	80065ec <I2C_WaitOnTXEFlagUntilTimeout>
 8005924:	4603      	mov	r3, r0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00d      	beq.n	8005946 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	2b04      	cmp	r3, #4
 8005930:	d107      	bne.n	8005942 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005940:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e06b      	b.n	8005a1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	781a      	ldrb	r2, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005960:	3b01      	subs	r3, #1
 8005962:	b29a      	uxth	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b01      	subs	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	f003 0304 	and.w	r3, r3, #4
 8005980:	2b04      	cmp	r3, #4
 8005982:	d11b      	bne.n	80059bc <HAL_I2C_Mem_Write+0x180>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005988:	2b00      	cmp	r3, #0
 800598a:	d017      	beq.n	80059bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	781a      	ldrb	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1aa      	bne.n	800591a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 fe50 	bl	800666e <I2C_WaitOnBTFFlagUntilTimeout>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00d      	beq.n	80059f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d8:	2b04      	cmp	r3, #4
 80059da:	d107      	bne.n	80059ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e016      	b.n	8005a1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	e000      	b.n	8005a1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005a1c:	2302      	movs	r3, #2
  }
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	00100002 	.word	0x00100002
 8005a2c:	ffff0000 	.word	0xffff0000

08005a30 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08c      	sub	sp, #48	; 0x30
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	4608      	mov	r0, r1
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	4603      	mov	r3, r0
 8005a40:	817b      	strh	r3, [r7, #10]
 8005a42:	460b      	mov	r3, r1
 8005a44:	813b      	strh	r3, [r7, #8]
 8005a46:	4613      	mov	r3, r2
 8005a48:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a4a:	f7ff faa9 	bl	8004fa0 <HAL_GetTick>
 8005a4e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b20      	cmp	r3, #32
 8005a5a:	f040 8208 	bne.w	8005e6e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	2319      	movs	r3, #25
 8005a64:	2201      	movs	r2, #1
 8005a66:	497b      	ldr	r1, [pc, #492]	; (8005c54 <HAL_I2C_Mem_Read+0x224>)
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 fce9 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005a74:	2302      	movs	r3, #2
 8005a76:	e1fb      	b.n	8005e70 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d101      	bne.n	8005a86 <HAL_I2C_Mem_Read+0x56>
 8005a82:	2302      	movs	r3, #2
 8005a84:	e1f4      	b.n	8005e70 <HAL_I2C_Mem_Read+0x440>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d007      	beq.n	8005aac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 0201 	orr.w	r2, r2, #1
 8005aaa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2222      	movs	r2, #34	; 0x22
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2240      	movs	r2, #64	; 0x40
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ad6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005adc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4a5b      	ldr	r2, [pc, #364]	; (8005c58 <HAL_I2C_Mem_Read+0x228>)
 8005aec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005aee:	88f8      	ldrh	r0, [r7, #6]
 8005af0:	893a      	ldrh	r2, [r7, #8]
 8005af2:	8979      	ldrh	r1, [r7, #10]
 8005af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af6:	9301      	str	r3, [sp, #4]
 8005af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	4603      	mov	r3, r0
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 fbb6 	bl	8006270 <I2C_RequestMemoryRead>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e1b0      	b.n	8005e70 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d113      	bne.n	8005b3e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b16:	2300      	movs	r3, #0
 8005b18:	623b      	str	r3, [r7, #32]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	623b      	str	r3, [r7, #32]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	623b      	str	r3, [r7, #32]
 8005b2a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	e184      	b.n	8005e48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d11b      	bne.n	8005b7e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b56:	2300      	movs	r3, #0
 8005b58:	61fb      	str	r3, [r7, #28]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	61fb      	str	r3, [r7, #28]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	61fb      	str	r3, [r7, #28]
 8005b6a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	e164      	b.n	8005e48 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d11b      	bne.n	8005bbe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b94:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ba4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61bb      	str	r3, [r7, #24]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	61bb      	str	r3, [r7, #24]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	e144      	b.n	8005e48 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	617b      	str	r3, [r7, #20]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	617b      	str	r3, [r7, #20]
 8005bd2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005bd4:	e138      	b.n	8005e48 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bda:	2b03      	cmp	r3, #3
 8005bdc:	f200 80f1 	bhi.w	8005dc2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d123      	bne.n	8005c30 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 fd7f 	bl	80066f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e139      	b.n	8005e70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	691a      	ldr	r2, [r3, #16]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c2e:	e10b      	b.n	8005e48 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d14e      	bne.n	8005cd6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3e:	2200      	movs	r2, #0
 8005c40:	4906      	ldr	r1, [pc, #24]	; (8005c5c <HAL_I2C_Mem_Read+0x22c>)
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 fbfc 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d008      	beq.n	8005c60 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e10e      	b.n	8005e70 <HAL_I2C_Mem_Read+0x440>
 8005c52:	bf00      	nop
 8005c54:	00100002 	.word	0x00100002
 8005c58:	ffff0000 	.word	0xffff0000
 8005c5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691a      	ldr	r2, [r3, #16]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	b2d2      	uxtb	r2, r2
 8005cae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cd4:	e0b8      	b.n	8005e48 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cdc:	2200      	movs	r2, #0
 8005cde:	4966      	ldr	r1, [pc, #408]	; (8005e78 <HAL_I2C_Mem_Read+0x448>)
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 fbad 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e0bf      	b.n	8005e70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	691a      	ldr	r2, [r3, #16]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0a:	b2d2      	uxtb	r2, r2
 8005d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d38:	2200      	movs	r2, #0
 8005d3a:	494f      	ldr	r1, [pc, #316]	; (8005e78 <HAL_I2C_Mem_Read+0x448>)
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fb7f 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e091      	b.n	8005e70 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	691a      	ldr	r2, [r3, #16]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	1c5a      	adds	r2, r3, #1
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	3b01      	subs	r3, #1
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	691a      	ldr	r2, [r3, #16]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	b2d2      	uxtb	r2, r2
 8005d9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005daa:	3b01      	subs	r3, #1
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	3b01      	subs	r3, #1
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dc0:	e042      	b.n	8005e48 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 fc92 	bl	80066f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e04c      	b.n	8005e70 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	691a      	ldr	r2, [r3, #16]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	b2d2      	uxtb	r2, r2
 8005de2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	1c5a      	adds	r2, r3, #1
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	3b01      	subs	r3, #1
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	f003 0304 	and.w	r3, r3, #4
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	d118      	bne.n	8005e48 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	b2d2      	uxtb	r2, r2
 8005e22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	1c5a      	adds	r2, r3, #1
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e32:	3b01      	subs	r3, #1
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	3b01      	subs	r3, #1
 8005e42:	b29a      	uxth	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f47f aec2 	bne.w	8005bd6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	e000      	b.n	8005e70 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005e6e:	2302      	movs	r3, #2
  }
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3728      	adds	r7, #40	; 0x28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	00010004 	.word	0x00010004

08005e7c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b08a      	sub	sp, #40	; 0x28
 8005e80:	af02      	add	r7, sp, #8
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	607a      	str	r2, [r7, #4]
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005e8c:	f7ff f888 	bl	8004fa0 <HAL_GetTick>
 8005e90:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005e92:	2301      	movs	r3, #1
 8005e94:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b20      	cmp	r3, #32
 8005ea0:	f040 8111 	bne.w	80060c6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	2319      	movs	r3, #25
 8005eaa:	2201      	movs	r2, #1
 8005eac:	4988      	ldr	r1, [pc, #544]	; (80060d0 <HAL_I2C_IsDeviceReady+0x254>)
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 fac6 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e104      	b.n	80060c8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_I2C_IsDeviceReady+0x50>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e0fd      	b.n	80060c8 <HAL_I2C_IsDeviceReady+0x24c>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d007      	beq.n	8005ef2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f042 0201 	orr.w	r2, r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2224      	movs	r2, #36	; 0x24
 8005f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4a70      	ldr	r2, [pc, #448]	; (80060d4 <HAL_I2C_IsDeviceReady+0x258>)
 8005f14:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f24:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 fa84 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00d      	beq.n	8005f5a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f4c:	d103      	bne.n	8005f56 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f54:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005f56:	2303      	movs	r3, #3
 8005f58:	e0b6      	b.n	80060c8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f5a:	897b      	ldrh	r3, [r7, #10]
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	461a      	mov	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f68:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005f6a:	f7ff f819 	bl	8004fa0 <HAL_GetTick>
 8005f6e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	695b      	ldr	r3, [r3, #20]
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	bf0c      	ite	eq
 8005f7e:	2301      	moveq	r3, #1
 8005f80:	2300      	movne	r3, #0
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f94:	bf0c      	ite	eq
 8005f96:	2301      	moveq	r3, #1
 8005f98:	2300      	movne	r3, #0
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005f9e:	e025      	b.n	8005fec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fa0:	f7fe fffe 	bl	8004fa0 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d302      	bcc.n	8005fb6 <HAL_I2C_IsDeviceReady+0x13a>
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d103      	bne.n	8005fbe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	22a0      	movs	r2, #160	; 0xa0
 8005fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	bf0c      	ite	eq
 8005fcc:	2301      	moveq	r3, #1
 8005fce:	2300      	movne	r3, #0
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe2:	bf0c      	ite	eq
 8005fe4:	2301      	moveq	r3, #1
 8005fe6:	2300      	movne	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2ba0      	cmp	r3, #160	; 0xa0
 8005ff6:	d005      	beq.n	8006004 <HAL_I2C_IsDeviceReady+0x188>
 8005ff8:	7dfb      	ldrb	r3, [r7, #23]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d102      	bne.n	8006004 <HAL_I2C_IsDeviceReady+0x188>
 8005ffe:	7dbb      	ldrb	r3, [r7, #22]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0cd      	beq.n	8005fa0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2220      	movs	r2, #32
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b02      	cmp	r3, #2
 8006018:	d129      	bne.n	800606e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006028:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800602a:	2300      	movs	r3, #0
 800602c:	613b      	str	r3, [r7, #16]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	695b      	ldr	r3, [r3, #20]
 8006034:	613b      	str	r3, [r7, #16]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	2319      	movs	r3, #25
 8006046:	2201      	movs	r2, #1
 8006048:	4921      	ldr	r1, [pc, #132]	; (80060d0 <HAL_I2C_IsDeviceReady+0x254>)
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 f9f8 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e036      	b.n	80060c8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2220      	movs	r2, #32
 800605e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	e02c      	b.n	80060c8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800607c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006086:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	2319      	movs	r3, #25
 800608e:	2201      	movs	r2, #1
 8006090:	490f      	ldr	r1, [pc, #60]	; (80060d0 <HAL_I2C_IsDeviceReady+0x254>)
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 f9d4 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e012      	b.n	80060c8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	3301      	adds	r3, #1
 80060a6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	f4ff af32 	bcc.w	8005f16 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2220      	movs	r2, #32
 80060b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80060c6:	2302      	movs	r3, #2
  }
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3720      	adds	r7, #32
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	00100002 	.word	0x00100002
 80060d4:	ffff0000 	.word	0xffff0000

080060d8 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d124      	bne.n	8006136 <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2228      	movs	r2, #40	; 0x28
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d007      	beq.n	8006112 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f042 0201 	orr.w	r2, r2, #1
 8006110:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006120:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006130:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	e000      	b.n	8006138 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006136:	2302      	movs	r3, #2
  }
}
 8006138:	4618      	mov	r0, r3
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	4608      	mov	r0, r1
 800614e:	4611      	mov	r1, r2
 8006150:	461a      	mov	r2, r3
 8006152:	4603      	mov	r3, r0
 8006154:	817b      	strh	r3, [r7, #10]
 8006156:	460b      	mov	r3, r1
 8006158:	813b      	strh	r3, [r7, #8]
 800615a:	4613      	mov	r3, r2
 800615c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800616c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	2200      	movs	r2, #0
 8006176:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f960 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00d      	beq.n	80061a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006194:	d103      	bne.n	800619e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800619c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e05f      	b.n	8006262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061a2:	897b      	ldrh	r3, [r7, #10]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	6a3a      	ldr	r2, [r7, #32]
 80061b6:	492d      	ldr	r1, [pc, #180]	; (800626c <I2C_RequestMemoryWrite+0x128>)
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 f998 	bl	80064ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e04c      	b.n	8006262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	617b      	str	r3, [r7, #20]
 80061dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061e0:	6a39      	ldr	r1, [r7, #32]
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 fa02 	bl	80065ec <I2C_WaitOnTXEFlagUntilTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00d      	beq.n	800620a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	d107      	bne.n	8006206 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006204:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e02b      	b.n	8006262 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800620a:	88fb      	ldrh	r3, [r7, #6]
 800620c:	2b01      	cmp	r3, #1
 800620e:	d105      	bne.n	800621c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006210:	893b      	ldrh	r3, [r7, #8]
 8006212:	b2da      	uxtb	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	611a      	str	r2, [r3, #16]
 800621a:	e021      	b.n	8006260 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800621c:	893b      	ldrh	r3, [r7, #8]
 800621e:	0a1b      	lsrs	r3, r3, #8
 8006220:	b29b      	uxth	r3, r3
 8006222:	b2da      	uxtb	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800622a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800622c:	6a39      	ldr	r1, [r7, #32]
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 f9dc 	bl	80065ec <I2C_WaitOnTXEFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00d      	beq.n	8006256 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	2b04      	cmp	r3, #4
 8006240:	d107      	bne.n	8006252 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006250:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e005      	b.n	8006262 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006256:	893b      	ldrh	r3, [r7, #8]
 8006258:	b2da      	uxtb	r2, r3
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3718      	adds	r7, #24
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	00010002 	.word	0x00010002

08006270 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af02      	add	r7, sp, #8
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	4608      	mov	r0, r1
 800627a:	4611      	mov	r1, r2
 800627c:	461a      	mov	r2, r3
 800627e:	4603      	mov	r3, r0
 8006280:	817b      	strh	r3, [r7, #10]
 8006282:	460b      	mov	r3, r1
 8006284:	813b      	strh	r3, [r7, #8]
 8006286:	4613      	mov	r3, r2
 8006288:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006298:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f000 f8c2 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00d      	beq.n	80062de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062d0:	d103      	bne.n	80062da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062da:	2303      	movs	r3, #3
 80062dc:	e0aa      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062de:	897b      	ldrh	r3, [r7, #10]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	461a      	mov	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	6a3a      	ldr	r2, [r7, #32]
 80062f2:	4952      	ldr	r1, [pc, #328]	; (800643c <I2C_RequestMemoryRead+0x1cc>)
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 f8fa 	bl	80064ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d001      	beq.n	8006304 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e097      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006304:	2300      	movs	r3, #0
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800631a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800631c:	6a39      	ldr	r1, [r7, #32]
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 f964 	bl	80065ec <I2C_WaitOnTXEFlagUntilTimeout>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00d      	beq.n	8006346 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	2b04      	cmp	r3, #4
 8006330:	d107      	bne.n	8006342 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006340:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e076      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006346:	88fb      	ldrh	r3, [r7, #6]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d105      	bne.n	8006358 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800634c:	893b      	ldrh	r3, [r7, #8]
 800634e:	b2da      	uxtb	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	611a      	str	r2, [r3, #16]
 8006356:	e021      	b.n	800639c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006358:	893b      	ldrh	r3, [r7, #8]
 800635a:	0a1b      	lsrs	r3, r3, #8
 800635c:	b29b      	uxth	r3, r3
 800635e:	b2da      	uxtb	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006368:	6a39      	ldr	r1, [r7, #32]
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 f93e 	bl	80065ec <I2C_WaitOnTXEFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00d      	beq.n	8006392 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	2b04      	cmp	r3, #4
 800637c:	d107      	bne.n	800638e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800638c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e050      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006392:	893b      	ldrh	r3, [r7, #8]
 8006394:	b2da      	uxtb	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800639c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800639e:	6a39      	ldr	r1, [r7, #32]
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f923 	bl	80065ec <I2C_WaitOnTXEFlagUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d00d      	beq.n	80063c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b0:	2b04      	cmp	r3, #4
 80063b2:	d107      	bne.n	80063c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e035      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	2200      	movs	r2, #0
 80063e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 f82b 	bl	8006440 <I2C_WaitOnFlagUntilTimeout>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00d      	beq.n	800640c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063fe:	d103      	bne.n	8006408 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006406:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006408:	2303      	movs	r3, #3
 800640a:	e013      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800640c:	897b      	ldrh	r3, [r7, #10]
 800640e:	b2db      	uxtb	r3, r3
 8006410:	f043 0301 	orr.w	r3, r3, #1
 8006414:	b2da      	uxtb	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	6a3a      	ldr	r2, [r7, #32]
 8006420:	4906      	ldr	r1, [pc, #24]	; (800643c <I2C_RequestMemoryRead+0x1cc>)
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f000 f863 	bl	80064ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e000      	b.n	8006434 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006432:	2300      	movs	r3, #0
}
 8006434:	4618      	mov	r0, r3
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	00010002 	.word	0x00010002

08006440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	4613      	mov	r3, r2
 800644e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006450:	e025      	b.n	800649e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006458:	d021      	beq.n	800649e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800645a:	f7fe fda1 	bl	8004fa0 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	429a      	cmp	r2, r3
 8006468:	d302      	bcc.n	8006470 <I2C_WaitOnFlagUntilTimeout+0x30>
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d116      	bne.n	800649e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2220      	movs	r2, #32
 800647a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	f043 0220 	orr.w	r2, r3, #32
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e023      	b.n	80064e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	0c1b      	lsrs	r3, r3, #16
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d10d      	bne.n	80064c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	43da      	mvns	r2, r3
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4013      	ands	r3, r2
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	bf0c      	ite	eq
 80064ba:	2301      	moveq	r3, #1
 80064bc:	2300      	movne	r3, #0
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	e00c      	b.n	80064de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	43da      	mvns	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	4013      	ands	r3, r2
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	bf0c      	ite	eq
 80064d6:	2301      	moveq	r3, #1
 80064d8:	2300      	movne	r3, #0
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	461a      	mov	r2, r3
 80064de:	79fb      	ldrb	r3, [r7, #7]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d0b6      	beq.n	8006452 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064e4:	2300      	movs	r3, #0
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	607a      	str	r2, [r7, #4]
 80064fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064fc:	e051      	b.n	80065a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800650c:	d123      	bne.n	8006556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800651c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006526:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2220      	movs	r2, #32
 8006532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	f043 0204 	orr.w	r2, r3, #4
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e046      	b.n	80065e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655c:	d021      	beq.n	80065a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655e:	f7fe fd1f 	bl	8004fa0 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	429a      	cmp	r2, r3
 800656c:	d302      	bcc.n	8006574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d116      	bne.n	80065a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2220      	movs	r2, #32
 800657e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	f043 0220 	orr.w	r2, r3, #32
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e020      	b.n	80065e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	0c1b      	lsrs	r3, r3, #16
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d10c      	bne.n	80065c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	695b      	ldr	r3, [r3, #20]
 80065b2:	43da      	mvns	r2, r3
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	4013      	ands	r3, r2
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	bf14      	ite	ne
 80065be:	2301      	movne	r3, #1
 80065c0:	2300      	moveq	r3, #0
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	e00b      	b.n	80065de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	43da      	mvns	r2, r3
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	4013      	ands	r3, r2
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bf14      	ite	ne
 80065d8:	2301      	movne	r3, #1
 80065da:	2300      	moveq	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d18d      	bne.n	80064fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065f8:	e02d      	b.n	8006656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 f8ce 	bl	800679c <I2C_IsAcknowledgeFailed>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e02d      	b.n	8006666 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006610:	d021      	beq.n	8006656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006612:	f7fe fcc5 	bl	8004fa0 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	429a      	cmp	r2, r3
 8006620:	d302      	bcc.n	8006628 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d116      	bne.n	8006656 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2220      	movs	r2, #32
 8006632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	f043 0220 	orr.w	r2, r3, #32
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e007      	b.n	8006666 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006660:	2b80      	cmp	r3, #128	; 0x80
 8006662:	d1ca      	bne.n	80065fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b084      	sub	sp, #16
 8006672:	af00      	add	r7, sp, #0
 8006674:	60f8      	str	r0, [r7, #12]
 8006676:	60b9      	str	r1, [r7, #8]
 8006678:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800667a:	e02d      	b.n	80066d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f000 f88d 	bl	800679c <I2C_IsAcknowledgeFailed>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e02d      	b.n	80066e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006692:	d021      	beq.n	80066d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006694:	f7fe fc84 	bl	8004fa0 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d302      	bcc.n	80066aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d116      	bne.n	80066d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2220      	movs	r2, #32
 80066b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c4:	f043 0220 	orr.w	r2, r3, #32
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e007      	b.n	80066e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	f003 0304 	and.w	r3, r3, #4
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d1ca      	bne.n	800667c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066fc:	e042      	b.n	8006784 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	f003 0310 	and.w	r3, r3, #16
 8006708:	2b10      	cmp	r3, #16
 800670a:	d119      	bne.n	8006740 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f06f 0210 	mvn.w	r2, #16
 8006714:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2220      	movs	r2, #32
 8006720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e029      	b.n	8006794 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006740:	f7fe fc2e 	bl	8004fa0 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	429a      	cmp	r2, r3
 800674e:	d302      	bcc.n	8006756 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d116      	bne.n	8006784 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2220      	movs	r2, #32
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006770:	f043 0220 	orr.w	r2, r3, #32
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e007      	b.n	8006794 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	d1b5      	bne.n	80066fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b2:	d11b      	bne.n	80067ec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067bc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d8:	f043 0204 	orr.w	r2, r3, #4
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e000      	b.n	80067ee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
	...

080067fc <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8006804:	4b05      	ldr	r3, [pc, #20]	; (800681c <HAL_PWR_EnableWakeUpPin+0x20>)
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	4904      	ldr	r1, [pc, #16]	; (800681c <HAL_PWR_EnableWakeUpPin+0x20>)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4313      	orrs	r3, r2
 800680e:	604b      	str	r3, [r1, #4]
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	40007000 	.word	0x40007000

08006820 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8006820:	b480      	push	{r7}
 8006822:	b083      	sub	sp, #12
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8006828:	4b06      	ldr	r3, [pc, #24]	; (8006844 <HAL_PWR_DisableWakeUpPin+0x24>)
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	43db      	mvns	r3, r3
 8006830:	4904      	ldr	r1, [pc, #16]	; (8006844 <HAL_PWR_DisableWakeUpPin+0x24>)
 8006832:	4013      	ands	r3, r2
 8006834:	604b      	str	r3, [r1, #4]
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	40007000 	.word	0x40007000

08006848 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 800684c:	4b08      	ldr	r3, [pc, #32]	; (8006870 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a07      	ldr	r2, [pc, #28]	; (8006870 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8006852:	f043 0302 	orr.w	r3, r3, #2
 8006856:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006858:	4b06      	ldr	r3, [pc, #24]	; (8006874 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	4a05      	ldr	r2, [pc, #20]	; (8006874 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 800685e:	f043 0304 	orr.w	r3, r3, #4
 8006862:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8006864:	bf30      	wfi
}
 8006866:	bf00      	nop
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	40007000 	.word	0x40007000
 8006874:	e000ed00 	.word	0xe000ed00

08006878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d101      	bne.n	800688c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e0cc      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800688c:	4b68      	ldr	r3, [pc, #416]	; (8006a30 <HAL_RCC_ClockConfig+0x1b8>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 030f 	and.w	r3, r3, #15
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d90c      	bls.n	80068b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800689a:	4b65      	ldr	r3, [pc, #404]	; (8006a30 <HAL_RCC_ClockConfig+0x1b8>)
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	b2d2      	uxtb	r2, r2
 80068a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068a2:	4b63      	ldr	r3, [pc, #396]	; (8006a30 <HAL_RCC_ClockConfig+0x1b8>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f003 030f 	and.w	r3, r3, #15
 80068aa:	683a      	ldr	r2, [r7, #0]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d001      	beq.n	80068b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e0b8      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d020      	beq.n	8006902 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d005      	beq.n	80068d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068cc:	4b59      	ldr	r3, [pc, #356]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	4a58      	ldr	r2, [pc, #352]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80068d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80068d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0308 	and.w	r3, r3, #8
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d005      	beq.n	80068f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80068e4:	4b53      	ldr	r3, [pc, #332]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	4a52      	ldr	r2, [pc, #328]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80068ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80068ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068f0:	4b50      	ldr	r3, [pc, #320]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	494d      	ldr	r1, [pc, #308]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80068fe:	4313      	orrs	r3, r2
 8006900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f003 0301 	and.w	r3, r3, #1
 800690a:	2b00      	cmp	r3, #0
 800690c:	d044      	beq.n	8006998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d107      	bne.n	8006926 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006916:	4b47      	ldr	r3, [pc, #284]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d119      	bne.n	8006956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e07f      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	2b02      	cmp	r3, #2
 800692c:	d003      	beq.n	8006936 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006932:	2b03      	cmp	r3, #3
 8006934:	d107      	bne.n	8006946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006936:	4b3f      	ldr	r3, [pc, #252]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d109      	bne.n	8006956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e06f      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006946:	4b3b      	ldr	r3, [pc, #236]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0302 	and.w	r3, r3, #2
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e067      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006956:	4b37      	ldr	r3, [pc, #220]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f023 0203 	bic.w	r2, r3, #3
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	4934      	ldr	r1, [pc, #208]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006964:	4313      	orrs	r3, r2
 8006966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006968:	f7fe fb1a 	bl	8004fa0 <HAL_GetTick>
 800696c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800696e:	e00a      	b.n	8006986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006970:	f7fe fb16 	bl	8004fa0 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	f241 3288 	movw	r2, #5000	; 0x1388
 800697e:	4293      	cmp	r3, r2
 8006980:	d901      	bls.n	8006986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e04f      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006986:	4b2b      	ldr	r3, [pc, #172]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f003 020c 	and.w	r2, r3, #12
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	429a      	cmp	r2, r3
 8006996:	d1eb      	bne.n	8006970 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006998:	4b25      	ldr	r3, [pc, #148]	; (8006a30 <HAL_RCC_ClockConfig+0x1b8>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 030f 	and.w	r3, r3, #15
 80069a0:	683a      	ldr	r2, [r7, #0]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d20c      	bcs.n	80069c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069a6:	4b22      	ldr	r3, [pc, #136]	; (8006a30 <HAL_RCC_ClockConfig+0x1b8>)
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	b2d2      	uxtb	r2, r2
 80069ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069ae:	4b20      	ldr	r3, [pc, #128]	; (8006a30 <HAL_RCC_ClockConfig+0x1b8>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 030f 	and.w	r3, r3, #15
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d001      	beq.n	80069c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80069bc:	2301      	movs	r3, #1
 80069be:	e032      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d008      	beq.n	80069de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069cc:	4b19      	ldr	r3, [pc, #100]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	4916      	ldr	r1, [pc, #88]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d009      	beq.n	80069fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069ea:	4b12      	ldr	r3, [pc, #72]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	490e      	ldr	r1, [pc, #56]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80069fe:	f000 fbb1 	bl	8007164 <HAL_RCC_GetSysClockFreq>
 8006a02:	4602      	mov	r2, r0
 8006a04:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <HAL_RCC_ClockConfig+0x1bc>)
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	091b      	lsrs	r3, r3, #4
 8006a0a:	f003 030f 	and.w	r3, r3, #15
 8006a0e:	490a      	ldr	r1, [pc, #40]	; (8006a38 <HAL_RCC_ClockConfig+0x1c0>)
 8006a10:	5ccb      	ldrb	r3, [r1, r3]
 8006a12:	fa22 f303 	lsr.w	r3, r2, r3
 8006a16:	4a09      	ldr	r2, [pc, #36]	; (8006a3c <HAL_RCC_ClockConfig+0x1c4>)
 8006a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a1a:	4b09      	ldr	r3, [pc, #36]	; (8006a40 <HAL_RCC_ClockConfig+0x1c8>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fa ff82 	bl	8001928 <HAL_InitTick>

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	40023c00 	.word	0x40023c00
 8006a34:	40023800 	.word	0x40023800
 8006a38:	08011424 	.word	0x08011424
 8006a3c:	2000000c 	.word	0x2000000c
 8006a40:	20000010 	.word	0x20000010

08006a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a44:	b480      	push	{r7}
 8006a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a48:	4b03      	ldr	r3, [pc, #12]	; (8006a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	2000000c 	.word	0x2000000c

08006a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a60:	f7ff fff0 	bl	8006a44 <HAL_RCC_GetHCLKFreq>
 8006a64:	4602      	mov	r2, r0
 8006a66:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	0a9b      	lsrs	r3, r3, #10
 8006a6c:	f003 0307 	and.w	r3, r3, #7
 8006a70:	4903      	ldr	r1, [pc, #12]	; (8006a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a72:	5ccb      	ldrb	r3, [r1, r3]
 8006a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	40023800 	.word	0x40023800
 8006a80:	08011434 	.word	0x08011434

08006a84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006a88:	f7ff ffdc 	bl	8006a44 <HAL_RCC_GetHCLKFreq>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	4b05      	ldr	r3, [pc, #20]	; (8006aa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	0b5b      	lsrs	r3, r3, #13
 8006a94:	f003 0307 	and.w	r3, r3, #7
 8006a98:	4903      	ldr	r1, [pc, #12]	; (8006aa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a9a:	5ccb      	ldrb	r3, [r1, r3]
 8006a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	40023800 	.word	0x40023800
 8006aa8:	08011434 	.word	0x08011434

08006aac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	220f      	movs	r2, #15
 8006aba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006abc:	4b12      	ldr	r3, [pc, #72]	; (8006b08 <HAL_RCC_GetClockConfig+0x5c>)
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	f003 0203 	and.w	r2, r3, #3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006ac8:	4b0f      	ldr	r3, [pc, #60]	; (8006b08 <HAL_RCC_GetClockConfig+0x5c>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006ad4:	4b0c      	ldr	r3, [pc, #48]	; (8006b08 <HAL_RCC_GetClockConfig+0x5c>)
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006ae0:	4b09      	ldr	r3, [pc, #36]	; (8006b08 <HAL_RCC_GetClockConfig+0x5c>)
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	08db      	lsrs	r3, r3, #3
 8006ae6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006aee:	4b07      	ldr	r3, [pc, #28]	; (8006b0c <HAL_RCC_GetClockConfig+0x60>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 020f 	and.w	r2, r3, #15
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	601a      	str	r2, [r3, #0]
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	40023800 	.word	0x40023800
 8006b0c:	40023c00 	.word	0x40023c00

08006b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08c      	sub	sp, #48	; 0x30
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8006b24:	2300      	movs	r3, #0
 8006b26:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8006b34:	2300      	movs	r3, #0
 8006b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d010      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006b48:	4b6f      	ldr	r3, [pc, #444]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b4e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b56:	496c      	ldr	r1, [pc, #432]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b58:	4313      	orrs	r3, r2
 8006b5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006b66:	2301      	movs	r3, #1
 8006b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d010      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006b76:	4b64      	ldr	r3, [pc, #400]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b7c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b84:	4960      	ldr	r1, [pc, #384]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006b94:	2301      	movs	r3, #1
 8006b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d017      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ba4:	4b58      	ldr	r3, [pc, #352]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006baa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb2:	4955      	ldr	r1, [pc, #340]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bc2:	d101      	bne.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0308 	and.w	r3, r3, #8
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d017      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006be0:	4b49      	ldr	r3, [pc, #292]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006be6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bee:	4946      	ldr	r1, [pc, #280]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006bfe:	d101      	bne.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006c00:	2301      	movs	r3, #1
 8006c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0320 	and.w	r3, r3, #32
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 808a 	beq.w	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60bb      	str	r3, [r7, #8]
 8006c22:	4b39      	ldr	r3, [pc, #228]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c26:	4a38      	ldr	r2, [pc, #224]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c2e:	4b36      	ldr	r3, [pc, #216]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c36:	60bb      	str	r3, [r7, #8]
 8006c38:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c3a:	4b34      	ldr	r3, [pc, #208]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a33      	ldr	r2, [pc, #204]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c44:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c46:	f7fe f9ab 	bl	8004fa0 <HAL_GetTick>
 8006c4a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c4c:	e008      	b.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c4e:	f7fe f9a7 	bl	8004fa0 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e278      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c60:	4b2a      	ldr	r3, [pc, #168]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0f0      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c6c:	4b26      	ldr	r3, [pc, #152]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c74:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d02f      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c84:	6a3a      	ldr	r2, [r7, #32]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d028      	beq.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c8a:	4b1f      	ldr	r3, [pc, #124]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c92:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c94:	4b1e      	ldr	r3, [pc, #120]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006c96:	2201      	movs	r2, #1
 8006c98:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c9a:	4b1d      	ldr	r3, [pc, #116]	; (8006d10 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006ca0:	4a19      	ldr	r2, [pc, #100]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ca6:	4b18      	ldr	r3, [pc, #96]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006caa:	f003 0301 	and.w	r3, r3, #1
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d114      	bne.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006cb2:	f7fe f975 	bl	8004fa0 <HAL_GetTick>
 8006cb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cb8:	e00a      	b.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cba:	f7fe f971 	bl	8004fa0 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d901      	bls.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006ccc:	2303      	movs	r3, #3
 8006cce:	e240      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd0:	4b0d      	ldr	r3, [pc, #52]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd4:	f003 0302 	and.w	r3, r3, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0ee      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ce4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ce8:	d114      	bne.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8006cea:	4b07      	ldr	r3, [pc, #28]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cfe:	4902      	ldr	r1, [pc, #8]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	608b      	str	r3, [r1, #8]
 8006d04:	e00c      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006d06:	bf00      	nop
 8006d08:	40023800 	.word	0x40023800
 8006d0c:	40007000 	.word	0x40007000
 8006d10:	42470e40 	.word	0x42470e40
 8006d14:	4b4a      	ldr	r3, [pc, #296]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	4a49      	ldr	r2, [pc, #292]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006d1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d1e:	6093      	str	r3, [r2, #8]
 8006d20:	4b47      	ldr	r3, [pc, #284]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006d22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d2c:	4944      	ldr	r1, [pc, #272]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0310 	and.w	r3, r3, #16
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d004      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006d44:	4b3f      	ldr	r3, [pc, #252]	; (8006e44 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006d46:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00a      	beq.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006d54:	4b3a      	ldr	r3, [pc, #232]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d62:	4937      	ldr	r1, [pc, #220]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006d76:	4b32      	ldr	r3, [pc, #200]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d7c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d84:	492e      	ldr	r1, [pc, #184]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d011      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006d98:	4b29      	ldr	r3, [pc, #164]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d9e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da6:	4926      	ldr	r1, [pc, #152]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006db6:	d101      	bne.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006db8:	2301      	movs	r3, #1
 8006dba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00a      	beq.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006dc8:	4b1d      	ldr	r3, [pc, #116]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd6:	491a      	ldr	r1, [pc, #104]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d011      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006dea:	4b15      	ldr	r3, [pc, #84]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006df0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df8:	4911      	ldr	r1, [pc, #68]	; (8006e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e08:	d101      	bne.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d005      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e1c:	f040 80ff 	bne.w	800701e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e20:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e26:	f7fe f8bb 	bl	8004fa0 <HAL_GetTick>
 8006e2a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e2c:	e00e      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e2e:	f7fe f8b7 	bl	8004fa0 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d907      	bls.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e188      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006e40:	40023800 	.word	0x40023800
 8006e44:	424711e0 	.word	0x424711e0
 8006e48:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e4c:	4b7e      	ldr	r3, [pc, #504]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1ea      	bne.n	8006e2e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d009      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d028      	beq.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d124      	bne.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006e80:	4b71      	ldr	r3, [pc, #452]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e86:	0c1b      	lsrs	r3, r3, #16
 8006e88:	f003 0303 	and.w	r3, r3, #3
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006e92:	4b6d      	ldr	r3, [pc, #436]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e98:	0e1b      	lsrs	r3, r3, #24
 8006e9a:	f003 030f 	and.w	r3, r3, #15
 8006e9e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685a      	ldr	r2, [r3, #4]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	019b      	lsls	r3, r3, #6
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	085b      	lsrs	r3, r3, #1
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	041b      	lsls	r3, r3, #16
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	061b      	lsls	r3, r3, #24
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	071b      	lsls	r3, r3, #28
 8006ec2:	4961      	ldr	r1, [pc, #388]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f003 0304 	and.w	r3, r3, #4
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d004      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ede:	d00a      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d035      	beq.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ef4:	d130      	bne.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006ef6:	4b54      	ldr	r3, [pc, #336]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006efc:	0c1b      	lsrs	r3, r3, #16
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	3301      	adds	r3, #1
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f08:	4b4f      	ldr	r3, [pc, #316]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f0e:	0f1b      	lsrs	r3, r3, #28
 8006f10:	f003 0307 	and.w	r3, r3, #7
 8006f14:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	685a      	ldr	r2, [r3, #4]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	019b      	lsls	r3, r3, #6
 8006f20:	431a      	orrs	r2, r3
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	085b      	lsrs	r3, r3, #1
 8006f26:	3b01      	subs	r3, #1
 8006f28:	041b      	lsls	r3, r3, #16
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	061b      	lsls	r3, r3, #24
 8006f32:	431a      	orrs	r2, r3
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	071b      	lsls	r3, r3, #28
 8006f38:	4943      	ldr	r1, [pc, #268]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f40:	4b41      	ldr	r3, [pc, #260]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f46:	f023 021f 	bic.w	r2, r3, #31
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	493d      	ldr	r1, [pc, #244]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f52:	4313      	orrs	r3, r2
 8006f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d029      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f6c:	d124      	bne.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006f6e:	4b36      	ldr	r3, [pc, #216]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f74:	0c1b      	lsrs	r3, r3, #16
 8006f76:	f003 0303 	and.w	r3, r3, #3
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	005b      	lsls	r3, r3, #1
 8006f7e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f80:	4b31      	ldr	r3, [pc, #196]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f86:	0f1b      	lsrs	r3, r3, #28
 8006f88:	f003 0307 	and.w	r3, r3, #7
 8006f8c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	019b      	lsls	r3, r3, #6
 8006f98:	431a      	orrs	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	085b      	lsrs	r3, r3, #1
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	041b      	lsls	r3, r3, #16
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	061b      	lsls	r3, r3, #24
 8006faa:	431a      	orrs	r2, r3
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	071b      	lsls	r3, r3, #28
 8006fb0:	4925      	ldr	r1, [pc, #148]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d016      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	019b      	lsls	r3, r3, #6
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	085b      	lsrs	r3, r3, #1
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	041b      	lsls	r3, r3, #16
 8006fda:	431a      	orrs	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	061b      	lsls	r3, r3, #24
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	695b      	ldr	r3, [r3, #20]
 8006fe8:	071b      	lsls	r3, r3, #28
 8006fea:	4917      	ldr	r1, [pc, #92]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006fec:	4313      	orrs	r3, r2
 8006fee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ff2:	4b16      	ldr	r3, [pc, #88]	; (800704c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ff8:	f7fd ffd2 	bl	8004fa0 <HAL_GetTick>
 8006ffc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ffe:	e008      	b.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007000:	f7fd ffce 	bl	8004fa0 <HAL_GetTick>
 8007004:	4602      	mov	r2, r0
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	2b02      	cmp	r3, #2
 800700c:	d901      	bls.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800700e:	2303      	movs	r3, #3
 8007010:	e09f      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007012:	4b0d      	ldr	r3, [pc, #52]	; (8007048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0f0      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800701e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007020:	2b01      	cmp	r3, #1
 8007022:	f040 8095 	bne.w	8007150 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007026:	4b0a      	ldr	r3, [pc, #40]	; (8007050 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800702c:	f7fd ffb8 	bl	8004fa0 <HAL_GetTick>
 8007030:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007032:	e00f      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007034:	f7fd ffb4 	bl	8004fa0 <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b02      	cmp	r3, #2
 8007040:	d908      	bls.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e085      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007046:	bf00      	nop
 8007048:	40023800 	.word	0x40023800
 800704c:	42470068 	.word	0x42470068
 8007050:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007054:	4b41      	ldr	r3, [pc, #260]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800705c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007060:	d0e8      	beq.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0304 	and.w	r3, r3, #4
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007072:	2b00      	cmp	r3, #0
 8007074:	d009      	beq.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800707e:	2b00      	cmp	r3, #0
 8007080:	d02b      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007086:	2b00      	cmp	r3, #0
 8007088:	d127      	bne.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800708a:	4b34      	ldr	r3, [pc, #208]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800708c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007090:	0c1b      	lsrs	r3, r3, #16
 8007092:	f003 0303 	and.w	r3, r3, #3
 8007096:	3301      	adds	r3, #1
 8007098:	005b      	lsls	r3, r3, #1
 800709a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	699a      	ldr	r2, [r3, #24]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	019b      	lsls	r3, r3, #6
 80070a6:	431a      	orrs	r2, r3
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	085b      	lsrs	r3, r3, #1
 80070ac:	3b01      	subs	r3, #1
 80070ae:	041b      	lsls	r3, r3, #16
 80070b0:	431a      	orrs	r2, r3
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b6:	061b      	lsls	r3, r3, #24
 80070b8:	4928      	ldr	r1, [pc, #160]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80070c0:	4b26      	ldr	r3, [pc, #152]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80070c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070c6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ce:	3b01      	subs	r3, #1
 80070d0:	021b      	lsls	r3, r3, #8
 80070d2:	4922      	ldr	r1, [pc, #136]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d01d      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070ee:	d118      	bne.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80070f0:	4b1a      	ldr	r3, [pc, #104]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80070f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f6:	0e1b      	lsrs	r3, r3, #24
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	699a      	ldr	r2, [r3, #24]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	019b      	lsls	r3, r3, #6
 8007108:	431a      	orrs	r2, r3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	085b      	lsrs	r3, r3, #1
 8007110:	3b01      	subs	r3, #1
 8007112:	041b      	lsls	r3, r3, #16
 8007114:	431a      	orrs	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	061b      	lsls	r3, r3, #24
 800711a:	4910      	ldr	r1, [pc, #64]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800711c:	4313      	orrs	r3, r2
 800711e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007122:	4b0f      	ldr	r3, [pc, #60]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8007124:	2201      	movs	r2, #1
 8007126:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007128:	f7fd ff3a 	bl	8004fa0 <HAL_GetTick>
 800712c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800712e:	e008      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007130:	f7fd ff36 	bl	8004fa0 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	2b02      	cmp	r3, #2
 800713c:	d901      	bls.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e007      	b.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007142:	4b06      	ldr	r3, [pc, #24]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800714a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800714e:	d1ef      	bne.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8007150:	2300      	movs	r3, #0
}
 8007152:	4618      	mov	r0, r3
 8007154:	3730      	adds	r7, #48	; 0x30
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	40023800 	.word	0x40023800
 8007160:	42470070 	.word	0x42470070

08007164 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007168:	b088      	sub	sp, #32
 800716a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800716c:	2300      	movs	r3, #0
 800716e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8007174:	2300      	movs	r3, #0
 8007176:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007180:	4bce      	ldr	r3, [pc, #824]	; (80074bc <HAL_RCC_GetSysClockFreq+0x358>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f003 030c 	and.w	r3, r3, #12
 8007188:	2b0c      	cmp	r3, #12
 800718a:	f200 818d 	bhi.w	80074a8 <HAL_RCC_GetSysClockFreq+0x344>
 800718e:	a201      	add	r2, pc, #4	; (adr r2, 8007194 <HAL_RCC_GetSysClockFreq+0x30>)
 8007190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007194:	080071c9 	.word	0x080071c9
 8007198:	080074a9 	.word	0x080074a9
 800719c:	080074a9 	.word	0x080074a9
 80071a0:	080074a9 	.word	0x080074a9
 80071a4:	080071cf 	.word	0x080071cf
 80071a8:	080074a9 	.word	0x080074a9
 80071ac:	080074a9 	.word	0x080074a9
 80071b0:	080074a9 	.word	0x080074a9
 80071b4:	080071d5 	.word	0x080071d5
 80071b8:	080074a9 	.word	0x080074a9
 80071bc:	080074a9 	.word	0x080074a9
 80071c0:	080074a9 	.word	0x080074a9
 80071c4:	08007349 	.word	0x08007349
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071c8:	4bbd      	ldr	r3, [pc, #756]	; (80074c0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80071ca:	61bb      	str	r3, [r7, #24]
       break;
 80071cc:	e16f      	b.n	80074ae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071ce:	4bbd      	ldr	r3, [pc, #756]	; (80074c4 <HAL_RCC_GetSysClockFreq+0x360>)
 80071d0:	61bb      	str	r3, [r7, #24]
      break;
 80071d2:	e16c      	b.n	80074ae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071d4:	4bb9      	ldr	r3, [pc, #740]	; (80074bc <HAL_RCC_GetSysClockFreq+0x358>)
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071dc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071de:	4bb7      	ldr	r3, [pc, #732]	; (80074bc <HAL_RCC_GetSysClockFreq+0x358>)
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d053      	beq.n	8007292 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071ea:	4bb4      	ldr	r3, [pc, #720]	; (80074bc <HAL_RCC_GetSysClockFreq+0x358>)
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	099b      	lsrs	r3, r3, #6
 80071f0:	461a      	mov	r2, r3
 80071f2:	f04f 0300 	mov.w	r3, #0
 80071f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80071fa:	f04f 0100 	mov.w	r1, #0
 80071fe:	ea02 0400 	and.w	r4, r2, r0
 8007202:	603c      	str	r4, [r7, #0]
 8007204:	400b      	ands	r3, r1
 8007206:	607b      	str	r3, [r7, #4]
 8007208:	e9d7 4500 	ldrd	r4, r5, [r7]
 800720c:	4620      	mov	r0, r4
 800720e:	4629      	mov	r1, r5
 8007210:	f04f 0200 	mov.w	r2, #0
 8007214:	f04f 0300 	mov.w	r3, #0
 8007218:	014b      	lsls	r3, r1, #5
 800721a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800721e:	0142      	lsls	r2, r0, #5
 8007220:	4610      	mov	r0, r2
 8007222:	4619      	mov	r1, r3
 8007224:	4623      	mov	r3, r4
 8007226:	1ac0      	subs	r0, r0, r3
 8007228:	462b      	mov	r3, r5
 800722a:	eb61 0103 	sbc.w	r1, r1, r3
 800722e:	f04f 0200 	mov.w	r2, #0
 8007232:	f04f 0300 	mov.w	r3, #0
 8007236:	018b      	lsls	r3, r1, #6
 8007238:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800723c:	0182      	lsls	r2, r0, #6
 800723e:	1a12      	subs	r2, r2, r0
 8007240:	eb63 0301 	sbc.w	r3, r3, r1
 8007244:	f04f 0000 	mov.w	r0, #0
 8007248:	f04f 0100 	mov.w	r1, #0
 800724c:	00d9      	lsls	r1, r3, #3
 800724e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007252:	00d0      	lsls	r0, r2, #3
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4621      	mov	r1, r4
 800725a:	1852      	adds	r2, r2, r1
 800725c:	4629      	mov	r1, r5
 800725e:	eb43 0101 	adc.w	r1, r3, r1
 8007262:	460b      	mov	r3, r1
 8007264:	f04f 0000 	mov.w	r0, #0
 8007268:	f04f 0100 	mov.w	r1, #0
 800726c:	0259      	lsls	r1, r3, #9
 800726e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007272:	0250      	lsls	r0, r2, #9
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	4610      	mov	r0, r2
 800727a:	4619      	mov	r1, r3
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	461a      	mov	r2, r3
 8007280:	f04f 0300 	mov.w	r3, #0
 8007284:	f7f9 fd10 	bl	8000ca8 <__aeabi_uldivmod>
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	4613      	mov	r3, r2
 800728e:	61fb      	str	r3, [r7, #28]
 8007290:	e04c      	b.n	800732c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007292:	4b8a      	ldr	r3, [pc, #552]	; (80074bc <HAL_RCC_GetSysClockFreq+0x358>)
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	099b      	lsrs	r3, r3, #6
 8007298:	461a      	mov	r2, r3
 800729a:	f04f 0300 	mov.w	r3, #0
 800729e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80072a2:	f04f 0100 	mov.w	r1, #0
 80072a6:	ea02 0a00 	and.w	sl, r2, r0
 80072aa:	ea03 0b01 	and.w	fp, r3, r1
 80072ae:	4650      	mov	r0, sl
 80072b0:	4659      	mov	r1, fp
 80072b2:	f04f 0200 	mov.w	r2, #0
 80072b6:	f04f 0300 	mov.w	r3, #0
 80072ba:	014b      	lsls	r3, r1, #5
 80072bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80072c0:	0142      	lsls	r2, r0, #5
 80072c2:	4610      	mov	r0, r2
 80072c4:	4619      	mov	r1, r3
 80072c6:	ebb0 000a 	subs.w	r0, r0, sl
 80072ca:	eb61 010b 	sbc.w	r1, r1, fp
 80072ce:	f04f 0200 	mov.w	r2, #0
 80072d2:	f04f 0300 	mov.w	r3, #0
 80072d6:	018b      	lsls	r3, r1, #6
 80072d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80072dc:	0182      	lsls	r2, r0, #6
 80072de:	1a12      	subs	r2, r2, r0
 80072e0:	eb63 0301 	sbc.w	r3, r3, r1
 80072e4:	f04f 0000 	mov.w	r0, #0
 80072e8:	f04f 0100 	mov.w	r1, #0
 80072ec:	00d9      	lsls	r1, r3, #3
 80072ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80072f2:	00d0      	lsls	r0, r2, #3
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	eb12 020a 	adds.w	r2, r2, sl
 80072fc:	eb43 030b 	adc.w	r3, r3, fp
 8007300:	f04f 0000 	mov.w	r0, #0
 8007304:	f04f 0100 	mov.w	r1, #0
 8007308:	0299      	lsls	r1, r3, #10
 800730a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800730e:	0290      	lsls	r0, r2, #10
 8007310:	4602      	mov	r2, r0
 8007312:	460b      	mov	r3, r1
 8007314:	4610      	mov	r0, r2
 8007316:	4619      	mov	r1, r3
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	461a      	mov	r2, r3
 800731c:	f04f 0300 	mov.w	r3, #0
 8007320:	f7f9 fcc2 	bl	8000ca8 <__aeabi_uldivmod>
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	4613      	mov	r3, r2
 800732a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800732c:	4b63      	ldr	r3, [pc, #396]	; (80074bc <HAL_RCC_GetSysClockFreq+0x358>)
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	0c1b      	lsrs	r3, r3, #16
 8007332:	f003 0303 	and.w	r3, r3, #3
 8007336:	3301      	adds	r3, #1
 8007338:	005b      	lsls	r3, r3, #1
 800733a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800733c:	69fa      	ldr	r2, [r7, #28]
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	fbb2 f3f3 	udiv	r3, r2, r3
 8007344:	61bb      	str	r3, [r7, #24]
      break;
 8007346:	e0b2      	b.n	80074ae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007348:	4b5c      	ldr	r3, [pc, #368]	; (80074bc <HAL_RCC_GetSysClockFreq+0x358>)
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007350:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007352:	4b5a      	ldr	r3, [pc, #360]	; (80074bc <HAL_RCC_GetSysClockFreq+0x358>)
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800735a:	2b00      	cmp	r3, #0
 800735c:	d04d      	beq.n	80073fa <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800735e:	4b57      	ldr	r3, [pc, #348]	; (80074bc <HAL_RCC_GetSysClockFreq+0x358>)
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	099b      	lsrs	r3, r3, #6
 8007364:	461a      	mov	r2, r3
 8007366:	f04f 0300 	mov.w	r3, #0
 800736a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800736e:	f04f 0100 	mov.w	r1, #0
 8007372:	ea02 0800 	and.w	r8, r2, r0
 8007376:	ea03 0901 	and.w	r9, r3, r1
 800737a:	4640      	mov	r0, r8
 800737c:	4649      	mov	r1, r9
 800737e:	f04f 0200 	mov.w	r2, #0
 8007382:	f04f 0300 	mov.w	r3, #0
 8007386:	014b      	lsls	r3, r1, #5
 8007388:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800738c:	0142      	lsls	r2, r0, #5
 800738e:	4610      	mov	r0, r2
 8007390:	4619      	mov	r1, r3
 8007392:	ebb0 0008 	subs.w	r0, r0, r8
 8007396:	eb61 0109 	sbc.w	r1, r1, r9
 800739a:	f04f 0200 	mov.w	r2, #0
 800739e:	f04f 0300 	mov.w	r3, #0
 80073a2:	018b      	lsls	r3, r1, #6
 80073a4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80073a8:	0182      	lsls	r2, r0, #6
 80073aa:	1a12      	subs	r2, r2, r0
 80073ac:	eb63 0301 	sbc.w	r3, r3, r1
 80073b0:	f04f 0000 	mov.w	r0, #0
 80073b4:	f04f 0100 	mov.w	r1, #0
 80073b8:	00d9      	lsls	r1, r3, #3
 80073ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073be:	00d0      	lsls	r0, r2, #3
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	eb12 0208 	adds.w	r2, r2, r8
 80073c8:	eb43 0309 	adc.w	r3, r3, r9
 80073cc:	f04f 0000 	mov.w	r0, #0
 80073d0:	f04f 0100 	mov.w	r1, #0
 80073d4:	0259      	lsls	r1, r3, #9
 80073d6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80073da:	0250      	lsls	r0, r2, #9
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	4610      	mov	r0, r2
 80073e2:	4619      	mov	r1, r3
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	461a      	mov	r2, r3
 80073e8:	f04f 0300 	mov.w	r3, #0
 80073ec:	f7f9 fc5c 	bl	8000ca8 <__aeabi_uldivmod>
 80073f0:	4602      	mov	r2, r0
 80073f2:	460b      	mov	r3, r1
 80073f4:	4613      	mov	r3, r2
 80073f6:	61fb      	str	r3, [r7, #28]
 80073f8:	e04a      	b.n	8007490 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073fa:	4b30      	ldr	r3, [pc, #192]	; (80074bc <HAL_RCC_GetSysClockFreq+0x358>)
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	099b      	lsrs	r3, r3, #6
 8007400:	461a      	mov	r2, r3
 8007402:	f04f 0300 	mov.w	r3, #0
 8007406:	f240 10ff 	movw	r0, #511	; 0x1ff
 800740a:	f04f 0100 	mov.w	r1, #0
 800740e:	ea02 0400 	and.w	r4, r2, r0
 8007412:	ea03 0501 	and.w	r5, r3, r1
 8007416:	4620      	mov	r0, r4
 8007418:	4629      	mov	r1, r5
 800741a:	f04f 0200 	mov.w	r2, #0
 800741e:	f04f 0300 	mov.w	r3, #0
 8007422:	014b      	lsls	r3, r1, #5
 8007424:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007428:	0142      	lsls	r2, r0, #5
 800742a:	4610      	mov	r0, r2
 800742c:	4619      	mov	r1, r3
 800742e:	1b00      	subs	r0, r0, r4
 8007430:	eb61 0105 	sbc.w	r1, r1, r5
 8007434:	f04f 0200 	mov.w	r2, #0
 8007438:	f04f 0300 	mov.w	r3, #0
 800743c:	018b      	lsls	r3, r1, #6
 800743e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007442:	0182      	lsls	r2, r0, #6
 8007444:	1a12      	subs	r2, r2, r0
 8007446:	eb63 0301 	sbc.w	r3, r3, r1
 800744a:	f04f 0000 	mov.w	r0, #0
 800744e:	f04f 0100 	mov.w	r1, #0
 8007452:	00d9      	lsls	r1, r3, #3
 8007454:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007458:	00d0      	lsls	r0, r2, #3
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	1912      	adds	r2, r2, r4
 8007460:	eb45 0303 	adc.w	r3, r5, r3
 8007464:	f04f 0000 	mov.w	r0, #0
 8007468:	f04f 0100 	mov.w	r1, #0
 800746c:	0299      	lsls	r1, r3, #10
 800746e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007472:	0290      	lsls	r0, r2, #10
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	4610      	mov	r0, r2
 800747a:	4619      	mov	r1, r3
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	461a      	mov	r2, r3
 8007480:	f04f 0300 	mov.w	r3, #0
 8007484:	f7f9 fc10 	bl	8000ca8 <__aeabi_uldivmod>
 8007488:	4602      	mov	r2, r0
 800748a:	460b      	mov	r3, r1
 800748c:	4613      	mov	r3, r2
 800748e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007490:	4b0a      	ldr	r3, [pc, #40]	; (80074bc <HAL_RCC_GetSysClockFreq+0x358>)
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	0f1b      	lsrs	r3, r3, #28
 8007496:	f003 0307 	and.w	r3, r3, #7
 800749a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800749c:	69fa      	ldr	r2, [r7, #28]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a4:	61bb      	str	r3, [r7, #24]
      break;
 80074a6:	e002      	b.n	80074ae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074a8:	4b05      	ldr	r3, [pc, #20]	; (80074c0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80074aa:	61bb      	str	r3, [r7, #24]
      break;
 80074ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074ae:	69bb      	ldr	r3, [r7, #24]
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3720      	adds	r7, #32
 80074b4:	46bd      	mov	sp, r7
 80074b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074ba:	bf00      	nop
 80074bc:	40023800 	.word	0x40023800
 80074c0:	00f42400 	.word	0x00f42400
 80074c4:	007a1200 	.word	0x007a1200

080074c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e28d      	b.n	80079f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 8083 	beq.w	80075ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80074e8:	4b94      	ldr	r3, [pc, #592]	; (800773c <HAL_RCC_OscConfig+0x274>)
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f003 030c 	and.w	r3, r3, #12
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d019      	beq.n	8007528 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80074f4:	4b91      	ldr	r3, [pc, #580]	; (800773c <HAL_RCC_OscConfig+0x274>)
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d106      	bne.n	800750e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007500:	4b8e      	ldr	r3, [pc, #568]	; (800773c <HAL_RCC_OscConfig+0x274>)
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800750c:	d00c      	beq.n	8007528 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800750e:	4b8b      	ldr	r3, [pc, #556]	; (800773c <HAL_RCC_OscConfig+0x274>)
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007516:	2b0c      	cmp	r3, #12
 8007518:	d112      	bne.n	8007540 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800751a:	4b88      	ldr	r3, [pc, #544]	; (800773c <HAL_RCC_OscConfig+0x274>)
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007526:	d10b      	bne.n	8007540 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007528:	4b84      	ldr	r3, [pc, #528]	; (800773c <HAL_RCC_OscConfig+0x274>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d05b      	beq.n	80075ec <HAL_RCC_OscConfig+0x124>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d157      	bne.n	80075ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e25a      	b.n	80079f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007548:	d106      	bne.n	8007558 <HAL_RCC_OscConfig+0x90>
 800754a:	4b7c      	ldr	r3, [pc, #496]	; (800773c <HAL_RCC_OscConfig+0x274>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a7b      	ldr	r2, [pc, #492]	; (800773c <HAL_RCC_OscConfig+0x274>)
 8007550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007554:	6013      	str	r3, [r2, #0]
 8007556:	e01d      	b.n	8007594 <HAL_RCC_OscConfig+0xcc>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007560:	d10c      	bne.n	800757c <HAL_RCC_OscConfig+0xb4>
 8007562:	4b76      	ldr	r3, [pc, #472]	; (800773c <HAL_RCC_OscConfig+0x274>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a75      	ldr	r2, [pc, #468]	; (800773c <HAL_RCC_OscConfig+0x274>)
 8007568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800756c:	6013      	str	r3, [r2, #0]
 800756e:	4b73      	ldr	r3, [pc, #460]	; (800773c <HAL_RCC_OscConfig+0x274>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a72      	ldr	r2, [pc, #456]	; (800773c <HAL_RCC_OscConfig+0x274>)
 8007574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007578:	6013      	str	r3, [r2, #0]
 800757a:	e00b      	b.n	8007594 <HAL_RCC_OscConfig+0xcc>
 800757c:	4b6f      	ldr	r3, [pc, #444]	; (800773c <HAL_RCC_OscConfig+0x274>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a6e      	ldr	r2, [pc, #440]	; (800773c <HAL_RCC_OscConfig+0x274>)
 8007582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	4b6c      	ldr	r3, [pc, #432]	; (800773c <HAL_RCC_OscConfig+0x274>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a6b      	ldr	r2, [pc, #428]	; (800773c <HAL_RCC_OscConfig+0x274>)
 800758e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d013      	beq.n	80075c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800759c:	f7fd fd00 	bl	8004fa0 <HAL_GetTick>
 80075a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075a2:	e008      	b.n	80075b6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075a4:	f7fd fcfc 	bl	8004fa0 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	2b64      	cmp	r3, #100	; 0x64
 80075b0:	d901      	bls.n	80075b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e21f      	b.n	80079f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075b6:	4b61      	ldr	r3, [pc, #388]	; (800773c <HAL_RCC_OscConfig+0x274>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d0f0      	beq.n	80075a4 <HAL_RCC_OscConfig+0xdc>
 80075c2:	e014      	b.n	80075ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075c4:	f7fd fcec 	bl	8004fa0 <HAL_GetTick>
 80075c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075ca:	e008      	b.n	80075de <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075cc:	f7fd fce8 	bl	8004fa0 <HAL_GetTick>
 80075d0:	4602      	mov	r2, r0
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	2b64      	cmp	r3, #100	; 0x64
 80075d8:	d901      	bls.n	80075de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80075da:	2303      	movs	r3, #3
 80075dc:	e20b      	b.n	80079f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80075de:	4b57      	ldr	r3, [pc, #348]	; (800773c <HAL_RCC_OscConfig+0x274>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1f0      	bne.n	80075cc <HAL_RCC_OscConfig+0x104>
 80075ea:	e000      	b.n	80075ee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0302 	and.w	r3, r3, #2
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d06f      	beq.n	80076da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80075fa:	4b50      	ldr	r3, [pc, #320]	; (800773c <HAL_RCC_OscConfig+0x274>)
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f003 030c 	and.w	r3, r3, #12
 8007602:	2b00      	cmp	r3, #0
 8007604:	d017      	beq.n	8007636 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007606:	4b4d      	ldr	r3, [pc, #308]	; (800773c <HAL_RCC_OscConfig+0x274>)
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800760e:	2b08      	cmp	r3, #8
 8007610:	d105      	bne.n	800761e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007612:	4b4a      	ldr	r3, [pc, #296]	; (800773c <HAL_RCC_OscConfig+0x274>)
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00b      	beq.n	8007636 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800761e:	4b47      	ldr	r3, [pc, #284]	; (800773c <HAL_RCC_OscConfig+0x274>)
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007626:	2b0c      	cmp	r3, #12
 8007628:	d11c      	bne.n	8007664 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800762a:	4b44      	ldr	r3, [pc, #272]	; (800773c <HAL_RCC_OscConfig+0x274>)
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007632:	2b00      	cmp	r3, #0
 8007634:	d116      	bne.n	8007664 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007636:	4b41      	ldr	r3, [pc, #260]	; (800773c <HAL_RCC_OscConfig+0x274>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d005      	beq.n	800764e <HAL_RCC_OscConfig+0x186>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d001      	beq.n	800764e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e1d3      	b.n	80079f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800764e:	4b3b      	ldr	r3, [pc, #236]	; (800773c <HAL_RCC_OscConfig+0x274>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	4937      	ldr	r1, [pc, #220]	; (800773c <HAL_RCC_OscConfig+0x274>)
 800765e:	4313      	orrs	r3, r2
 8007660:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007662:	e03a      	b.n	80076da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d020      	beq.n	80076ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800766c:	4b34      	ldr	r3, [pc, #208]	; (8007740 <HAL_RCC_OscConfig+0x278>)
 800766e:	2201      	movs	r2, #1
 8007670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007672:	f7fd fc95 	bl	8004fa0 <HAL_GetTick>
 8007676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007678:	e008      	b.n	800768c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800767a:	f7fd fc91 	bl	8004fa0 <HAL_GetTick>
 800767e:	4602      	mov	r2, r0
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	1ad3      	subs	r3, r2, r3
 8007684:	2b02      	cmp	r3, #2
 8007686:	d901      	bls.n	800768c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e1b4      	b.n	80079f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800768c:	4b2b      	ldr	r3, [pc, #172]	; (800773c <HAL_RCC_OscConfig+0x274>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 0302 	and.w	r3, r3, #2
 8007694:	2b00      	cmp	r3, #0
 8007696:	d0f0      	beq.n	800767a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007698:	4b28      	ldr	r3, [pc, #160]	; (800773c <HAL_RCC_OscConfig+0x274>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	00db      	lsls	r3, r3, #3
 80076a6:	4925      	ldr	r1, [pc, #148]	; (800773c <HAL_RCC_OscConfig+0x274>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	600b      	str	r3, [r1, #0]
 80076ac:	e015      	b.n	80076da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076ae:	4b24      	ldr	r3, [pc, #144]	; (8007740 <HAL_RCC_OscConfig+0x278>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076b4:	f7fd fc74 	bl	8004fa0 <HAL_GetTick>
 80076b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076ba:	e008      	b.n	80076ce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076bc:	f7fd fc70 	bl	8004fa0 <HAL_GetTick>
 80076c0:	4602      	mov	r2, r0
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d901      	bls.n	80076ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80076ca:	2303      	movs	r3, #3
 80076cc:	e193      	b.n	80079f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076ce:	4b1b      	ldr	r3, [pc, #108]	; (800773c <HAL_RCC_OscConfig+0x274>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0302 	and.w	r3, r3, #2
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1f0      	bne.n	80076bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0308 	and.w	r3, r3, #8
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d036      	beq.n	8007754 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d016      	beq.n	800771c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076ee:	4b15      	ldr	r3, [pc, #84]	; (8007744 <HAL_RCC_OscConfig+0x27c>)
 80076f0:	2201      	movs	r2, #1
 80076f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076f4:	f7fd fc54 	bl	8004fa0 <HAL_GetTick>
 80076f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076fa:	e008      	b.n	800770e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076fc:	f7fd fc50 	bl	8004fa0 <HAL_GetTick>
 8007700:	4602      	mov	r2, r0
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	2b02      	cmp	r3, #2
 8007708:	d901      	bls.n	800770e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e173      	b.n	80079f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800770e:	4b0b      	ldr	r3, [pc, #44]	; (800773c <HAL_RCC_OscConfig+0x274>)
 8007710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007712:	f003 0302 	and.w	r3, r3, #2
 8007716:	2b00      	cmp	r3, #0
 8007718:	d0f0      	beq.n	80076fc <HAL_RCC_OscConfig+0x234>
 800771a:	e01b      	b.n	8007754 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800771c:	4b09      	ldr	r3, [pc, #36]	; (8007744 <HAL_RCC_OscConfig+0x27c>)
 800771e:	2200      	movs	r2, #0
 8007720:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007722:	f7fd fc3d 	bl	8004fa0 <HAL_GetTick>
 8007726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007728:	e00e      	b.n	8007748 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800772a:	f7fd fc39 	bl	8004fa0 <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	2b02      	cmp	r3, #2
 8007736:	d907      	bls.n	8007748 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	e15c      	b.n	80079f6 <HAL_RCC_OscConfig+0x52e>
 800773c:	40023800 	.word	0x40023800
 8007740:	42470000 	.word	0x42470000
 8007744:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007748:	4b8a      	ldr	r3, [pc, #552]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 800774a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800774c:	f003 0302 	and.w	r3, r3, #2
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1ea      	bne.n	800772a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0304 	and.w	r3, r3, #4
 800775c:	2b00      	cmp	r3, #0
 800775e:	f000 8097 	beq.w	8007890 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007762:	2300      	movs	r3, #0
 8007764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007766:	4b83      	ldr	r3, [pc, #524]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 8007768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10f      	bne.n	8007792 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007772:	2300      	movs	r3, #0
 8007774:	60bb      	str	r3, [r7, #8]
 8007776:	4b7f      	ldr	r3, [pc, #508]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 8007778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777a:	4a7e      	ldr	r2, [pc, #504]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 800777c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007780:	6413      	str	r3, [r2, #64]	; 0x40
 8007782:	4b7c      	ldr	r3, [pc, #496]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 8007784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800778a:	60bb      	str	r3, [r7, #8]
 800778c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800778e:	2301      	movs	r3, #1
 8007790:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007792:	4b79      	ldr	r3, [pc, #484]	; (8007978 <HAL_RCC_OscConfig+0x4b0>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800779a:	2b00      	cmp	r3, #0
 800779c:	d118      	bne.n	80077d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800779e:	4b76      	ldr	r3, [pc, #472]	; (8007978 <HAL_RCC_OscConfig+0x4b0>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a75      	ldr	r2, [pc, #468]	; (8007978 <HAL_RCC_OscConfig+0x4b0>)
 80077a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077aa:	f7fd fbf9 	bl	8004fa0 <HAL_GetTick>
 80077ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077b0:	e008      	b.n	80077c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077b2:	f7fd fbf5 	bl	8004fa0 <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d901      	bls.n	80077c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e118      	b.n	80079f6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077c4:	4b6c      	ldr	r3, [pc, #432]	; (8007978 <HAL_RCC_OscConfig+0x4b0>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d0f0      	beq.n	80077b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d106      	bne.n	80077e6 <HAL_RCC_OscConfig+0x31e>
 80077d8:	4b66      	ldr	r3, [pc, #408]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 80077da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077dc:	4a65      	ldr	r2, [pc, #404]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 80077de:	f043 0301 	orr.w	r3, r3, #1
 80077e2:	6713      	str	r3, [r2, #112]	; 0x70
 80077e4:	e01c      	b.n	8007820 <HAL_RCC_OscConfig+0x358>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	2b05      	cmp	r3, #5
 80077ec:	d10c      	bne.n	8007808 <HAL_RCC_OscConfig+0x340>
 80077ee:	4b61      	ldr	r3, [pc, #388]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 80077f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f2:	4a60      	ldr	r2, [pc, #384]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 80077f4:	f043 0304 	orr.w	r3, r3, #4
 80077f8:	6713      	str	r3, [r2, #112]	; 0x70
 80077fa:	4b5e      	ldr	r3, [pc, #376]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 80077fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fe:	4a5d      	ldr	r2, [pc, #372]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 8007800:	f043 0301 	orr.w	r3, r3, #1
 8007804:	6713      	str	r3, [r2, #112]	; 0x70
 8007806:	e00b      	b.n	8007820 <HAL_RCC_OscConfig+0x358>
 8007808:	4b5a      	ldr	r3, [pc, #360]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 800780a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780c:	4a59      	ldr	r2, [pc, #356]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 800780e:	f023 0301 	bic.w	r3, r3, #1
 8007812:	6713      	str	r3, [r2, #112]	; 0x70
 8007814:	4b57      	ldr	r3, [pc, #348]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 8007816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007818:	4a56      	ldr	r2, [pc, #344]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 800781a:	f023 0304 	bic.w	r3, r3, #4
 800781e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d015      	beq.n	8007854 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007828:	f7fd fbba 	bl	8004fa0 <HAL_GetTick>
 800782c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800782e:	e00a      	b.n	8007846 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007830:	f7fd fbb6 	bl	8004fa0 <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	f241 3288 	movw	r2, #5000	; 0x1388
 800783e:	4293      	cmp	r3, r2
 8007840:	d901      	bls.n	8007846 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e0d7      	b.n	80079f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007846:	4b4b      	ldr	r3, [pc, #300]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 8007848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784a:	f003 0302 	and.w	r3, r3, #2
 800784e:	2b00      	cmp	r3, #0
 8007850:	d0ee      	beq.n	8007830 <HAL_RCC_OscConfig+0x368>
 8007852:	e014      	b.n	800787e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007854:	f7fd fba4 	bl	8004fa0 <HAL_GetTick>
 8007858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800785a:	e00a      	b.n	8007872 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800785c:	f7fd fba0 	bl	8004fa0 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	f241 3288 	movw	r2, #5000	; 0x1388
 800786a:	4293      	cmp	r3, r2
 800786c:	d901      	bls.n	8007872 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e0c1      	b.n	80079f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007872:	4b40      	ldr	r3, [pc, #256]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 8007874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007876:	f003 0302 	and.w	r3, r3, #2
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1ee      	bne.n	800785c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800787e:	7dfb      	ldrb	r3, [r7, #23]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d105      	bne.n	8007890 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007884:	4b3b      	ldr	r3, [pc, #236]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 8007886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007888:	4a3a      	ldr	r2, [pc, #232]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 800788a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800788e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 80ad 	beq.w	80079f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800789a:	4b36      	ldr	r3, [pc, #216]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f003 030c 	and.w	r3, r3, #12
 80078a2:	2b08      	cmp	r3, #8
 80078a4:	d060      	beq.n	8007968 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d145      	bne.n	800793a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078ae:	4b33      	ldr	r3, [pc, #204]	; (800797c <HAL_RCC_OscConfig+0x4b4>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b4:	f7fd fb74 	bl	8004fa0 <HAL_GetTick>
 80078b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078ba:	e008      	b.n	80078ce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078bc:	f7fd fb70 	bl	8004fa0 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d901      	bls.n	80078ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e093      	b.n	80079f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078ce:	4b29      	ldr	r3, [pc, #164]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1f0      	bne.n	80078bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	69da      	ldr	r2, [r3, #28]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	431a      	orrs	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e8:	019b      	lsls	r3, r3, #6
 80078ea:	431a      	orrs	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f0:	085b      	lsrs	r3, r3, #1
 80078f2:	3b01      	subs	r3, #1
 80078f4:	041b      	lsls	r3, r3, #16
 80078f6:	431a      	orrs	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fc:	061b      	lsls	r3, r3, #24
 80078fe:	431a      	orrs	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007904:	071b      	lsls	r3, r3, #28
 8007906:	491b      	ldr	r1, [pc, #108]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 8007908:	4313      	orrs	r3, r2
 800790a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800790c:	4b1b      	ldr	r3, [pc, #108]	; (800797c <HAL_RCC_OscConfig+0x4b4>)
 800790e:	2201      	movs	r2, #1
 8007910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007912:	f7fd fb45 	bl	8004fa0 <HAL_GetTick>
 8007916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007918:	e008      	b.n	800792c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800791a:	f7fd fb41 	bl	8004fa0 <HAL_GetTick>
 800791e:	4602      	mov	r2, r0
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	1ad3      	subs	r3, r2, r3
 8007924:	2b02      	cmp	r3, #2
 8007926:	d901      	bls.n	800792c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007928:	2303      	movs	r3, #3
 800792a:	e064      	b.n	80079f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800792c:	4b11      	ldr	r3, [pc, #68]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d0f0      	beq.n	800791a <HAL_RCC_OscConfig+0x452>
 8007938:	e05c      	b.n	80079f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800793a:	4b10      	ldr	r3, [pc, #64]	; (800797c <HAL_RCC_OscConfig+0x4b4>)
 800793c:	2200      	movs	r2, #0
 800793e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007940:	f7fd fb2e 	bl	8004fa0 <HAL_GetTick>
 8007944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007946:	e008      	b.n	800795a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007948:	f7fd fb2a 	bl	8004fa0 <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	2b02      	cmp	r3, #2
 8007954:	d901      	bls.n	800795a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e04d      	b.n	80079f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800795a:	4b06      	ldr	r3, [pc, #24]	; (8007974 <HAL_RCC_OscConfig+0x4ac>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1f0      	bne.n	8007948 <HAL_RCC_OscConfig+0x480>
 8007966:	e045      	b.n	80079f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d107      	bne.n	8007980 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e040      	b.n	80079f6 <HAL_RCC_OscConfig+0x52e>
 8007974:	40023800 	.word	0x40023800
 8007978:	40007000 	.word	0x40007000
 800797c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007980:	4b1f      	ldr	r3, [pc, #124]	; (8007a00 <HAL_RCC_OscConfig+0x538>)
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	2b01      	cmp	r3, #1
 800798c:	d030      	beq.n	80079f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007998:	429a      	cmp	r2, r3
 800799a:	d129      	bne.n	80079f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d122      	bne.n	80079f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80079b0:	4013      	ands	r3, r2
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80079b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d119      	bne.n	80079f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c6:	085b      	lsrs	r3, r3, #1
 80079c8:	3b01      	subs	r3, #1
 80079ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079cc:	429a      	cmp	r2, r3
 80079ce:	d10f      	bne.n	80079f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079dc:	429a      	cmp	r2, r3
 80079de:	d107      	bne.n	80079f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d001      	beq.n	80079f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e000      	b.n	80079f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	40023800 	.word	0x40023800

08007a04 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e083      	b.n	8007b1e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	7f5b      	ldrb	r3, [r3, #29]
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d105      	bne.n	8007a2c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f7f9 ff04 	bl	8001834 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2202      	movs	r2, #2
 8007a30:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	22ca      	movs	r2, #202	; 0xca
 8007a38:	625a      	str	r2, [r3, #36]	; 0x24
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	2253      	movs	r2, #83	; 0x53
 8007a40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fb7a 	bl	800813c <RTC_EnterInitMode>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d008      	beq.n	8007a60 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	22ff      	movs	r2, #255	; 0xff
 8007a54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2204      	movs	r2, #4
 8007a5a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e05e      	b.n	8007b1e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	6812      	ldr	r2, [r2, #0]
 8007a6a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a72:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6899      	ldr	r1, [r3, #8]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	431a      	orrs	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	695b      	ldr	r3, [r3, #20]
 8007a88:	431a      	orrs	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	68d2      	ldr	r2, [r2, #12]
 8007a9a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6919      	ldr	r1, [r3, #16]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	041a      	lsls	r2, r3, #16
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68da      	ldr	r2, [r3, #12]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007abe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f003 0320 	and.w	r3, r3, #32
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10e      	bne.n	8007aec <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fb0c 	bl	80080ec <HAL_RTC_WaitForSynchro>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d008      	beq.n	8007aec <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	22ff      	movs	r2, #255	; 0xff
 8007ae0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2204      	movs	r2, #4
 8007ae6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e018      	b.n	8007b1e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007afa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	699a      	ldr	r2, [r3, #24]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	430a      	orrs	r2, r1
 8007b0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	22ff      	movs	r2, #255	; 0xff
 8007b14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
  }
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007b26:	b590      	push	{r4, r7, lr}
 8007b28:	b087      	sub	sp, #28
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	60f8      	str	r0, [r7, #12]
 8007b2e:	60b9      	str	r1, [r7, #8]
 8007b30:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007b32:	2300      	movs	r3, #0
 8007b34:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	7f1b      	ldrb	r3, [r3, #28]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d101      	bne.n	8007b42 <HAL_RTC_SetTime+0x1c>
 8007b3e:	2302      	movs	r3, #2
 8007b40:	e0aa      	b.n	8007c98 <HAL_RTC_SetTime+0x172>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2201      	movs	r2, #1
 8007b46:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d126      	bne.n	8007ba2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d102      	bne.n	8007b68 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	2200      	movs	r2, #0
 8007b66:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f000 fb11 	bl	8008194 <RTC_ByteToBcd2>
 8007b72:	4603      	mov	r3, r0
 8007b74:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	785b      	ldrb	r3, [r3, #1]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f000 fb0a 	bl	8008194 <RTC_ByteToBcd2>
 8007b80:	4603      	mov	r3, r0
 8007b82:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007b84:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	789b      	ldrb	r3, [r3, #2]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 fb02 	bl	8008194 <RTC_ByteToBcd2>
 8007b90:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007b92:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	78db      	ldrb	r3, [r3, #3]
 8007b9a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	617b      	str	r3, [r7, #20]
 8007ba0:	e018      	b.n	8007bd4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d102      	bne.n	8007bb6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	785b      	ldrb	r3, [r3, #1]
 8007bc0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007bc2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007bc8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	78db      	ldrb	r3, [r3, #3]
 8007bce:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	22ca      	movs	r2, #202	; 0xca
 8007bda:	625a      	str	r2, [r3, #36]	; 0x24
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2253      	movs	r2, #83	; 0x53
 8007be2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 faa9 	bl	800813c <RTC_EnterInitMode>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00b      	beq.n	8007c08 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	22ff      	movs	r2, #255	; 0xff
 8007bf6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2204      	movs	r2, #4
 8007bfc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e047      	b.n	8007c98 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007c12:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007c16:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	689a      	ldr	r2, [r3, #8]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007c26:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6899      	ldr	r1, [r3, #8]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	431a      	orrs	r2, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c4e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	f003 0320 	and.w	r3, r3, #32
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d111      	bne.n	8007c82 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c5e:	68f8      	ldr	r0, [r7, #12]
 8007c60:	f000 fa44 	bl	80080ec <HAL_RTC_WaitForSynchro>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00b      	beq.n	8007c82 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	22ff      	movs	r2, #255	; 0xff
 8007c70:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2204      	movs	r2, #4
 8007c76:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e00a      	b.n	8007c98 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	22ff      	movs	r2, #255	; 0xff
 8007c88:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007c96:	2300      	movs	r3, #0
  }
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	371c      	adds	r7, #28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd90      	pop	{r4, r7, pc}

08007ca0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007ca0:	b590      	push	{r4, r7, lr}
 8007ca2:	b087      	sub	sp, #28
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	60f8      	str	r0, [r7, #12]
 8007ca8:	60b9      	str	r1, [r7, #8]
 8007caa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	7f1b      	ldrb	r3, [r3, #28]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d101      	bne.n	8007cbc <HAL_RTC_SetDate+0x1c>
 8007cb8:	2302      	movs	r3, #2
 8007cba:	e094      	b.n	8007de6 <HAL_RTC_SetDate+0x146>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10e      	bne.n	8007cec <HAL_RTC_SetDate+0x4c>
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	785b      	ldrb	r3, [r3, #1]
 8007cd2:	f003 0310 	and.w	r3, r3, #16
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d008      	beq.n	8007cec <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	785b      	ldrb	r3, [r3, #1]
 8007cde:	f023 0310 	bic.w	r3, r3, #16
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	330a      	adds	r3, #10
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d11c      	bne.n	8007d2c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	78db      	ldrb	r3, [r3, #3]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 fa4c 	bl	8008194 <RTC_ByteToBcd2>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	785b      	ldrb	r3, [r3, #1]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f000 fa45 	bl	8008194 <RTC_ByteToBcd2>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007d0e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	789b      	ldrb	r3, [r3, #2]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f000 fa3d 	bl	8008194 <RTC_ByteToBcd2>
 8007d1a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007d1c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007d26:	4313      	orrs	r3, r2
 8007d28:	617b      	str	r3, [r7, #20]
 8007d2a:	e00e      	b.n	8007d4a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	78db      	ldrb	r3, [r3, #3]
 8007d30:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	785b      	ldrb	r3, [r3, #1]
 8007d36:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007d38:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007d3a:	68ba      	ldr	r2, [r7, #8]
 8007d3c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007d3e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007d46:	4313      	orrs	r3, r2
 8007d48:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	22ca      	movs	r2, #202	; 0xca
 8007d50:	625a      	str	r2, [r3, #36]	; 0x24
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2253      	movs	r2, #83	; 0x53
 8007d58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 f9ee 	bl	800813c <RTC_EnterInitMode>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d00b      	beq.n	8007d7e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	22ff      	movs	r2, #255	; 0xff
 8007d6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2204      	movs	r2, #4
 8007d72:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e033      	b.n	8007de6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007d88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d8c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d9c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	f003 0320 	and.w	r3, r3, #32
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d111      	bne.n	8007dd0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f000 f99d 	bl	80080ec <HAL_RTC_WaitForSynchro>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00b      	beq.n	8007dd0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	22ff      	movs	r2, #255	; 0xff
 8007dbe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2204      	movs	r2, #4
 8007dc4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e00a      	b.n	8007de6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	22ff      	movs	r2, #255	; 0xff
 8007dd6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007de4:	2300      	movs	r3, #0
  }
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd90      	pop	{r4, r7, pc}
	...

08007df0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007df0:	b590      	push	{r4, r7, lr}
 8007df2:	b089      	sub	sp, #36	; 0x24
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	61fb      	str	r3, [r7, #28]
 8007e00:	2300      	movs	r3, #0
 8007e02:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8007e04:	4b93      	ldr	r3, [pc, #588]	; (8008054 <HAL_RTC_SetAlarm_IT+0x264>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a93      	ldr	r2, [pc, #588]	; (8008058 <HAL_RTC_SetAlarm_IT+0x268>)
 8007e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0e:	0adb      	lsrs	r3, r3, #11
 8007e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e14:	fb02 f303 	mul.w	r3, r2, r3
 8007e18:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	7f1b      	ldrb	r3, [r3, #28]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d101      	bne.n	8007e26 <HAL_RTC_SetAlarm_IT+0x36>
 8007e22:	2302      	movs	r3, #2
 8007e24:	e111      	b.n	800804a <HAL_RTC_SetAlarm_IT+0x25a>
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d137      	bne.n	8007ea8 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d102      	bne.n	8007e4c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 f99f 	bl	8008194 <RTC_ByteToBcd2>
 8007e56:	4603      	mov	r3, r0
 8007e58:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	785b      	ldrb	r3, [r3, #1]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f000 f998 	bl	8008194 <RTC_ByteToBcd2>
 8007e64:	4603      	mov	r3, r0
 8007e66:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007e68:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	789b      	ldrb	r3, [r3, #2]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 f990 	bl	8008194 <RTC_ByteToBcd2>
 8007e74:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007e76:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	78db      	ldrb	r3, [r3, #3]
 8007e7e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007e80:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 f982 	bl	8008194 <RTC_ByteToBcd2>
 8007e90:	4603      	mov	r3, r0
 8007e92:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007e94:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007e9c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	61fb      	str	r3, [r7, #28]
 8007ea6:	e023      	b.n	8007ef0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d102      	bne.n	8007ebc <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	781b      	ldrb	r3, [r3, #0]
 8007ec0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	785b      	ldrb	r3, [r3, #1]
 8007ec6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007ec8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007ece:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	78db      	ldrb	r3, [r3, #3]
 8007ed4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007ed6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ede:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007ee0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007ee6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007eec:	4313      	orrs	r3, r2
 8007eee:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	22ca      	movs	r2, #202	; 0xca
 8007f02:	625a      	str	r2, [r3, #36]	; 0x24
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2253      	movs	r2, #83	; 0x53
 8007f0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f14:	d141      	bne.n	8007f9a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	689a      	ldr	r2, [r3, #8]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f24:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	b2da      	uxtb	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007f36:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	1e5a      	subs	r2, r3, #1
 8007f3c:	617a      	str	r2, [r7, #20]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10b      	bne.n	8007f5a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	22ff      	movs	r2, #255	; 0xff
 8007f48:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2203      	movs	r2, #3
 8007f4e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007f56:	2303      	movs	r3, #3
 8007f58:	e077      	b.n	800804a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d0e7      	beq.n	8007f38 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	69fa      	ldr	r2, [r7, #28]
 8007f6e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	689a      	ldr	r2, [r3, #8]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f86:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689a      	ldr	r2, [r3, #8]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007f96:	609a      	str	r2, [r3, #8]
 8007f98:	e040      	b.n	800801c <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	689a      	ldr	r2, [r3, #8]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007fa8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007fba:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	1e5a      	subs	r2, r3, #1
 8007fc0:	617a      	str	r2, [r7, #20]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10b      	bne.n	8007fde <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	22ff      	movs	r2, #255	; 0xff
 8007fcc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2203      	movs	r2, #3
 8007fd2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e035      	b.n	800804a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f003 0302 	and.w	r3, r3, #2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d0e7      	beq.n	8007fbc <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	69fa      	ldr	r2, [r7, #28]
 8007ff2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	69ba      	ldr	r2, [r7, #24]
 8007ffa:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	689a      	ldr	r2, [r3, #8]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800800a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	689a      	ldr	r2, [r3, #8]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800801a:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800801c:	4b0f      	ldr	r3, [pc, #60]	; (800805c <HAL_RTC_SetAlarm_IT+0x26c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a0e      	ldr	r2, [pc, #56]	; (800805c <HAL_RTC_SetAlarm_IT+0x26c>)
 8008022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008026:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8008028:	4b0c      	ldr	r3, [pc, #48]	; (800805c <HAL_RTC_SetAlarm_IT+0x26c>)
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	4a0b      	ldr	r2, [pc, #44]	; (800805c <HAL_RTC_SetAlarm_IT+0x26c>)
 800802e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008032:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	22ff      	movs	r2, #255	; 0xff
 800803a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2201      	movs	r2, #1
 8008040:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2200      	movs	r2, #0
 8008046:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3724      	adds	r7, #36	; 0x24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd90      	pop	{r4, r7, pc}
 8008052:	bf00      	nop
 8008054:	2000000c 	.word	0x2000000c
 8008058:	10624dd3 	.word	0x10624dd3
 800805c:	40013c00 	.word	0x40013c00

08008060 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d012      	beq.n	800809c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008080:	2b00      	cmp	r3, #0
 8008082:	d00b      	beq.n	800809c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7fc fe1b 	bl	8004cc0 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	b2da      	uxtb	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800809a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d012      	beq.n	80080d0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00b      	beq.n	80080d0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f9a1 	bl	8008400 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f462 7220 	orn	r2, r2, #640	; 0x280
 80080ce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80080d0:	4b05      	ldr	r3, [pc, #20]	; (80080e8 <HAL_RTC_AlarmIRQHandler+0x88>)
 80080d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80080d6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	775a      	strb	r2, [r3, #29]
}
 80080de:	bf00      	nop
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	40013c00 	.word	0x40013c00

080080ec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80080f4:	2300      	movs	r3, #0
 80080f6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68da      	ldr	r2, [r3, #12]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008106:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008108:	f7fc ff4a 	bl	8004fa0 <HAL_GetTick>
 800810c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800810e:	e009      	b.n	8008124 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008110:	f7fc ff46 	bl	8004fa0 <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800811e:	d901      	bls.n	8008124 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e007      	b.n	8008134 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	f003 0320 	and.w	r3, r3, #32
 800812e:	2b00      	cmp	r3, #0
 8008130:	d0ee      	beq.n	8008110 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008132:	2300      	movs	r3, #0
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008152:	2b00      	cmp	r3, #0
 8008154:	d119      	bne.n	800818a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f04f 32ff 	mov.w	r2, #4294967295
 800815e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008160:	f7fc ff1e 	bl	8004fa0 <HAL_GetTick>
 8008164:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008166:	e009      	b.n	800817c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008168:	f7fc ff1a 	bl	8004fa0 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008176:	d901      	bls.n	800817c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e007      	b.n	800818c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008186:	2b00      	cmp	r3, #0
 8008188:	d0ee      	beq.n	8008168 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800819e:	2300      	movs	r3, #0
 80081a0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80081a2:	e005      	b.n	80081b0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3301      	adds	r3, #1
 80081a8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80081aa:	79fb      	ldrb	r3, [r7, #7]
 80081ac:	3b0a      	subs	r3, #10
 80081ae:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80081b0:	79fb      	ldrb	r3, [r7, #7]
 80081b2:	2b09      	cmp	r3, #9
 80081b4:	d8f6      	bhi.n	80081a4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	011b      	lsls	r3, r3, #4
 80081bc:	b2da      	uxtb	r2, r3
 80081be:	79fb      	ldrb	r3, [r7, #7]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	b2db      	uxtb	r3, r3
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3714      	adds	r7, #20
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b087      	sub	sp, #28
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	7f1b      	ldrb	r3, [r3, #28]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d101      	bne.n	80081e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 80081e4:	2302      	movs	r3, #2
 80081e6:	e0a6      	b.n	8008336 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2201      	movs	r2, #1
 80081ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2202      	movs	r2, #2
 80081f2:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	22ca      	movs	r2, #202	; 0xca
 80081fa:	625a      	str	r2, [r3, #36]	; 0x24
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2253      	movs	r2, #83	; 0x53
 8008202:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800820e:	2b00      	cmp	r3, #0
 8008210:	d022      	beq.n	8008258 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8008212:	4b4c      	ldr	r3, [pc, #304]	; (8008344 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a4c      	ldr	r2, [pc, #304]	; (8008348 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 8008218:	fba2 2303 	umull	r2, r3, r2, r3
 800821c:	0adb      	lsrs	r3, r3, #11
 800821e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008222:	fb02 f303 	mul.w	r3, r2, r3
 8008226:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	1e5a      	subs	r2, r3, #1
 800822c:	617a      	str	r2, [r7, #20]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10b      	bne.n	800824a <HAL_RTCEx_SetWakeUpTimer_IT+0x7a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	22ff      	movs	r2, #255	; 0xff
 8008238:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2203      	movs	r2, #3
 800823e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2200      	movs	r2, #0
 8008244:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e075      	b.n	8008336 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	f003 0304 	and.w	r3, r3, #4
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1e7      	bne.n	8008228 <HAL_RTCEx_SetWakeUpTimer_IT+0x58>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689a      	ldr	r2, [r3, #8]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008266:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 8008268:	4b36      	ldr	r3, [pc, #216]	; (8008344 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a36      	ldr	r2, [pc, #216]	; (8008348 <HAL_RTCEx_SetWakeUpTimer_IT+0x178>)
 800826e:	fba2 2303 	umull	r2, r3, r2, r3
 8008272:	0adb      	lsrs	r3, r3, #11
 8008274:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008278:	fb02 f303 	mul.w	r3, r2, r3
 800827c:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	1e5a      	subs	r2, r3, #1
 8008282:	617a      	str	r2, [r7, #20]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10b      	bne.n	80082a0 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	22ff      	movs	r2, #255	; 0xff
 800828e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2203      	movs	r2, #3
 8008294:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e04a      	b.n	8008336 <HAL_RTCEx_SetWakeUpTimer_IT+0x166>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	f003 0304 	and.w	r3, r3, #4
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0e7      	beq.n	800827e <HAL_RTCEx_SetWakeUpTimer_IT+0xae>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	615a      	str	r2, [r3, #20]

  /* Clear the Wake-up Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	689a      	ldr	r2, [r3, #8]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f022 0207 	bic.w	r2, r2, #7
 80082c4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	6899      	ldr	r1, [r3, #8]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	430a      	orrs	r2, r1
 80082d4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80082d6:	4b1d      	ldr	r3, [pc, #116]	; (800834c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a1c      	ldr	r2, [pc, #112]	; (800834c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80082dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80082e0:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 80082e2:	4b1a      	ldr	r3, [pc, #104]	; (800834c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	4a19      	ldr	r2, [pc, #100]	; (800834c <HAL_RTCEx_SetWakeUpTimer_IT+0x17c>)
 80082e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80082ec:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68db      	ldr	r3, [r3, #12]
 80082f4:	b2da      	uxtb	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80082fe:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	689a      	ldr	r2, [r3, #8]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800830e:	609a      	str	r2, [r3, #8]

  /* Enable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	689a      	ldr	r2, [r3, #8]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800831e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	22ff      	movs	r2, #255	; 0xff
 8008326:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2201      	movs	r2, #1
 800832c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	371c      	adds	r7, #28
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	2000000c 	.word	0x2000000c
 8008348:	10624dd3 	.word	0x10624dd3
 800834c:	40013c00 	.word	0x40013c00

08008350 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	7f1b      	ldrb	r3, [r3, #28]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d101      	bne.n	8008368 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 8008364:	2302      	movs	r3, #2
 8008366:	e047      	b.n	80083f8 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2202      	movs	r2, #2
 8008372:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	22ca      	movs	r2, #202	; 0xca
 800837a:	625a      	str	r2, [r3, #36]	; 0x24
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2253      	movs	r2, #83	; 0x53
 8008382:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-up Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	689a      	ldr	r2, [r3, #8]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008392:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	689a      	ldr	r2, [r3, #8]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80083a2:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80083a4:	f7fc fdfc 	bl	8004fa0 <HAL_GetTick>
 80083a8:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80083aa:	e013      	b.n	80083d4 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80083ac:	f7fc fdf8 	bl	8004fa0 <HAL_GetTick>
 80083b0:	4602      	mov	r2, r0
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083ba:	d90b      	bls.n	80083d4 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	22ff      	movs	r2, #255	; 0xff
 80083c2:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2203      	movs	r2, #3
 80083c8:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e011      	b.n	80083f8 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	f003 0304 	and.w	r3, r3, #4
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d0e4      	beq.n	80083ac <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	22ff      	movs	r2, #255	; 0xff
 80083e8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e041      	b.n	80084aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b00      	cmp	r3, #0
 8008430:	d106      	bne.n	8008440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2200      	movs	r2, #0
 8008436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 f839 	bl	80084b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2202      	movs	r2, #2
 8008444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	3304      	adds	r3, #4
 8008450:	4619      	mov	r1, r3
 8008452:	4610      	mov	r0, r2
 8008454:	f000 f9d8 	bl	8008808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}

080084b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b083      	sub	sp, #12
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80084ba:	bf00      	nop
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
	...

080084c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d001      	beq.n	80084e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e04e      	b.n	800857e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2202      	movs	r2, #2
 80084e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68da      	ldr	r2, [r3, #12]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f042 0201 	orr.w	r2, r2, #1
 80084f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a23      	ldr	r2, [pc, #140]	; (800858c <HAL_TIM_Base_Start_IT+0xc4>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d022      	beq.n	8008548 <HAL_TIM_Base_Start_IT+0x80>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800850a:	d01d      	beq.n	8008548 <HAL_TIM_Base_Start_IT+0x80>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a1f      	ldr	r2, [pc, #124]	; (8008590 <HAL_TIM_Base_Start_IT+0xc8>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d018      	beq.n	8008548 <HAL_TIM_Base_Start_IT+0x80>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a1e      	ldr	r2, [pc, #120]	; (8008594 <HAL_TIM_Base_Start_IT+0xcc>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d013      	beq.n	8008548 <HAL_TIM_Base_Start_IT+0x80>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a1c      	ldr	r2, [pc, #112]	; (8008598 <HAL_TIM_Base_Start_IT+0xd0>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d00e      	beq.n	8008548 <HAL_TIM_Base_Start_IT+0x80>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a1b      	ldr	r2, [pc, #108]	; (800859c <HAL_TIM_Base_Start_IT+0xd4>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d009      	beq.n	8008548 <HAL_TIM_Base_Start_IT+0x80>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a19      	ldr	r2, [pc, #100]	; (80085a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d004      	beq.n	8008548 <HAL_TIM_Base_Start_IT+0x80>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a18      	ldr	r2, [pc, #96]	; (80085a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d111      	bne.n	800856c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f003 0307 	and.w	r3, r3, #7
 8008552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b06      	cmp	r3, #6
 8008558:	d010      	beq.n	800857c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f042 0201 	orr.w	r2, r2, #1
 8008568:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800856a:	e007      	b.n	800857c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f042 0201 	orr.w	r2, r2, #1
 800857a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800857c:	2300      	movs	r3, #0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	40010000 	.word	0x40010000
 8008590:	40000400 	.word	0x40000400
 8008594:	40000800 	.word	0x40000800
 8008598:	40000c00 	.word	0x40000c00
 800859c:	40010400 	.word	0x40010400
 80085a0:	40014000 	.word	0x40014000
 80085a4:	40001800 	.word	0x40001800

080085a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d122      	bne.n	8008604 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	f003 0302 	and.w	r3, r3, #2
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d11b      	bne.n	8008604 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f06f 0202 	mvn.w	r2, #2
 80085d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	f003 0303 	and.w	r3, r3, #3
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d003      	beq.n	80085f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f8ee 	bl	80087cc <HAL_TIM_IC_CaptureCallback>
 80085f0:	e005      	b.n	80085fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f8e0 	bl	80087b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f8f1 	bl	80087e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	f003 0304 	and.w	r3, r3, #4
 800860e:	2b04      	cmp	r3, #4
 8008610:	d122      	bne.n	8008658 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b04      	cmp	r3, #4
 800861e:	d11b      	bne.n	8008658 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f06f 0204 	mvn.w	r2, #4
 8008628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2202      	movs	r2, #2
 800862e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800863a:	2b00      	cmp	r3, #0
 800863c:	d003      	beq.n	8008646 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f8c4 	bl	80087cc <HAL_TIM_IC_CaptureCallback>
 8008644:	e005      	b.n	8008652 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f8b6 	bl	80087b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 f8c7 	bl	80087e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	f003 0308 	and.w	r3, r3, #8
 8008662:	2b08      	cmp	r3, #8
 8008664:	d122      	bne.n	80086ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	f003 0308 	and.w	r3, r3, #8
 8008670:	2b08      	cmp	r3, #8
 8008672:	d11b      	bne.n	80086ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f06f 0208 	mvn.w	r2, #8
 800867c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2204      	movs	r2, #4
 8008682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	69db      	ldr	r3, [r3, #28]
 800868a:	f003 0303 	and.w	r3, r3, #3
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f89a 	bl	80087cc <HAL_TIM_IC_CaptureCallback>
 8008698:	e005      	b.n	80086a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f88c 	bl	80087b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f89d 	bl	80087e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	691b      	ldr	r3, [r3, #16]
 80086b2:	f003 0310 	and.w	r3, r3, #16
 80086b6:	2b10      	cmp	r3, #16
 80086b8:	d122      	bne.n	8008700 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	f003 0310 	and.w	r3, r3, #16
 80086c4:	2b10      	cmp	r3, #16
 80086c6:	d11b      	bne.n	8008700 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f06f 0210 	mvn.w	r2, #16
 80086d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2208      	movs	r2, #8
 80086d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	69db      	ldr	r3, [r3, #28]
 80086de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d003      	beq.n	80086ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f870 	bl	80087cc <HAL_TIM_IC_CaptureCallback>
 80086ec:	e005      	b.n	80086fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f862 	bl	80087b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f873 	bl	80087e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	691b      	ldr	r3, [r3, #16]
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	2b01      	cmp	r3, #1
 800870c:	d10e      	bne.n	800872c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	f003 0301 	and.w	r3, r3, #1
 8008718:	2b01      	cmp	r3, #1
 800871a:	d107      	bne.n	800872c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f06f 0201 	mvn.w	r2, #1
 8008724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f7f8 fff8 	bl	800171c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008736:	2b80      	cmp	r3, #128	; 0x80
 8008738:	d10e      	bne.n	8008758 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008744:	2b80      	cmp	r3, #128	; 0x80
 8008746:	d107      	bne.n	8008758 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f902 	bl	800895c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008762:	2b40      	cmp	r3, #64	; 0x40
 8008764:	d10e      	bne.n	8008784 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008770:	2b40      	cmp	r3, #64	; 0x40
 8008772:	d107      	bne.n	8008784 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800877c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 f838 	bl	80087f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	f003 0320 	and.w	r3, r3, #32
 800878e:	2b20      	cmp	r3, #32
 8008790:	d10e      	bne.n	80087b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	f003 0320 	and.w	r3, r3, #32
 800879c:	2b20      	cmp	r3, #32
 800879e:	d107      	bne.n	80087b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f06f 0220 	mvn.w	r2, #32
 80087a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f8cc 	bl	8008948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087b0:	bf00      	nop
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	4a40      	ldr	r2, [pc, #256]	; (800891c <TIM_Base_SetConfig+0x114>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d013      	beq.n	8008848 <TIM_Base_SetConfig+0x40>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008826:	d00f      	beq.n	8008848 <TIM_Base_SetConfig+0x40>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a3d      	ldr	r2, [pc, #244]	; (8008920 <TIM_Base_SetConfig+0x118>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d00b      	beq.n	8008848 <TIM_Base_SetConfig+0x40>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a3c      	ldr	r2, [pc, #240]	; (8008924 <TIM_Base_SetConfig+0x11c>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d007      	beq.n	8008848 <TIM_Base_SetConfig+0x40>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a3b      	ldr	r2, [pc, #236]	; (8008928 <TIM_Base_SetConfig+0x120>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d003      	beq.n	8008848 <TIM_Base_SetConfig+0x40>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a3a      	ldr	r2, [pc, #232]	; (800892c <TIM_Base_SetConfig+0x124>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d108      	bne.n	800885a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800884e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a2f      	ldr	r2, [pc, #188]	; (800891c <TIM_Base_SetConfig+0x114>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d02b      	beq.n	80088ba <TIM_Base_SetConfig+0xb2>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008868:	d027      	beq.n	80088ba <TIM_Base_SetConfig+0xb2>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a2c      	ldr	r2, [pc, #176]	; (8008920 <TIM_Base_SetConfig+0x118>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d023      	beq.n	80088ba <TIM_Base_SetConfig+0xb2>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a2b      	ldr	r2, [pc, #172]	; (8008924 <TIM_Base_SetConfig+0x11c>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d01f      	beq.n	80088ba <TIM_Base_SetConfig+0xb2>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a2a      	ldr	r2, [pc, #168]	; (8008928 <TIM_Base_SetConfig+0x120>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d01b      	beq.n	80088ba <TIM_Base_SetConfig+0xb2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a29      	ldr	r2, [pc, #164]	; (800892c <TIM_Base_SetConfig+0x124>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d017      	beq.n	80088ba <TIM_Base_SetConfig+0xb2>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a28      	ldr	r2, [pc, #160]	; (8008930 <TIM_Base_SetConfig+0x128>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d013      	beq.n	80088ba <TIM_Base_SetConfig+0xb2>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a27      	ldr	r2, [pc, #156]	; (8008934 <TIM_Base_SetConfig+0x12c>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d00f      	beq.n	80088ba <TIM_Base_SetConfig+0xb2>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a26      	ldr	r2, [pc, #152]	; (8008938 <TIM_Base_SetConfig+0x130>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d00b      	beq.n	80088ba <TIM_Base_SetConfig+0xb2>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a25      	ldr	r2, [pc, #148]	; (800893c <TIM_Base_SetConfig+0x134>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d007      	beq.n	80088ba <TIM_Base_SetConfig+0xb2>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a24      	ldr	r2, [pc, #144]	; (8008940 <TIM_Base_SetConfig+0x138>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d003      	beq.n	80088ba <TIM_Base_SetConfig+0xb2>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a23      	ldr	r2, [pc, #140]	; (8008944 <TIM_Base_SetConfig+0x13c>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d108      	bne.n	80088cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	4313      	orrs	r3, r2
 80088d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	689a      	ldr	r2, [r3, #8]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a0a      	ldr	r2, [pc, #40]	; (800891c <TIM_Base_SetConfig+0x114>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d003      	beq.n	8008900 <TIM_Base_SetConfig+0xf8>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a0c      	ldr	r2, [pc, #48]	; (800892c <TIM_Base_SetConfig+0x124>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d103      	bne.n	8008908 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	691a      	ldr	r2, [r3, #16]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	615a      	str	r2, [r3, #20]
}
 800890e:	bf00      	nop
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	40010000 	.word	0x40010000
 8008920:	40000400 	.word	0x40000400
 8008924:	40000800 	.word	0x40000800
 8008928:	40000c00 	.word	0x40000c00
 800892c:	40010400 	.word	0x40010400
 8008930:	40014000 	.word	0x40014000
 8008934:	40014400 	.word	0x40014400
 8008938:	40014800 	.word	0x40014800
 800893c:	40001800 	.word	0x40001800
 8008940:	40001c00 	.word	0x40001c00
 8008944:	40002000 	.word	0x40002000

08008948 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d101      	bne.n	8008982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	e03f      	b.n	8008a02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	d106      	bne.n	800899c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7f8 ff7e 	bl	8001898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2224      	movs	r2, #36	; 0x24
 80089a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	68da      	ldr	r2, [r3, #12]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f929 	bl	8008c0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	691a      	ldr	r2, [r3, #16]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	695a      	ldr	r2, [r3, #20]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	68da      	ldr	r2, [r3, #12]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2220      	movs	r2, #32
 80089f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2220      	movs	r2, #32
 80089fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b08a      	sub	sp, #40	; 0x28
 8008a0e:	af02      	add	r7, sp, #8
 8008a10:	60f8      	str	r0, [r7, #12]
 8008a12:	60b9      	str	r1, [r7, #8]
 8008a14:	603b      	str	r3, [r7, #0]
 8008a16:	4613      	mov	r3, r2
 8008a18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b20      	cmp	r3, #32
 8008a28:	d17c      	bne.n	8008b24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <HAL_UART_Transmit+0x2c>
 8008a30:	88fb      	ldrh	r3, [r7, #6]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e075      	b.n	8008b26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d101      	bne.n	8008a48 <HAL_UART_Transmit+0x3e>
 8008a44:	2302      	movs	r3, #2
 8008a46:	e06e      	b.n	8008b26 <HAL_UART_Transmit+0x11c>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2221      	movs	r2, #33	; 0x21
 8008a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a5e:	f7fc fa9f 	bl	8004fa0 <HAL_GetTick>
 8008a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	88fa      	ldrh	r2, [r7, #6]
 8008a68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	88fa      	ldrh	r2, [r7, #6]
 8008a6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a78:	d108      	bne.n	8008a8c <HAL_UART_Transmit+0x82>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d104      	bne.n	8008a8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008a82:	2300      	movs	r3, #0
 8008a84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	61bb      	str	r3, [r7, #24]
 8008a8a:	e003      	b.n	8008a94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a90:	2300      	movs	r3, #0
 8008a92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008a9c:	e02a      	b.n	8008af4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	2180      	movs	r1, #128	; 0x80
 8008aa8:	68f8      	ldr	r0, [r7, #12]
 8008aaa:	f000 f840 	bl	8008b2e <UART_WaitOnFlagUntilTimeout>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d001      	beq.n	8008ab8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e036      	b.n	8008b26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d10b      	bne.n	8008ad6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	881b      	ldrh	r3, [r3, #0]
 8008ac2:	461a      	mov	r2, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008acc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	3302      	adds	r3, #2
 8008ad2:	61bb      	str	r3, [r7, #24]
 8008ad4:	e007      	b.n	8008ae6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	781a      	ldrb	r2, [r3, #0]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008ae0:	69fb      	ldr	r3, [r7, #28]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	3b01      	subs	r3, #1
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1cf      	bne.n	8008a9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	2200      	movs	r2, #0
 8008b06:	2140      	movs	r1, #64	; 0x40
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 f810 	bl	8008b2e <UART_WaitOnFlagUntilTimeout>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d001      	beq.n	8008b18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	e006      	b.n	8008b26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2220      	movs	r2, #32
 8008b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	e000      	b.n	8008b26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008b24:	2302      	movs	r3, #2
  }
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3720      	adds	r7, #32
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b090      	sub	sp, #64	; 0x40
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	60f8      	str	r0, [r7, #12]
 8008b36:	60b9      	str	r1, [r7, #8]
 8008b38:	603b      	str	r3, [r7, #0]
 8008b3a:	4613      	mov	r3, r2
 8008b3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b3e:	e050      	b.n	8008be2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b46:	d04c      	beq.n	8008be2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d007      	beq.n	8008b5e <UART_WaitOnFlagUntilTimeout+0x30>
 8008b4e:	f7fc fa27 	bl	8004fa0 <HAL_GetTick>
 8008b52:	4602      	mov	r2, r0
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	1ad3      	subs	r3, r2, r3
 8008b58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d241      	bcs.n	8008be2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	330c      	adds	r3, #12
 8008b64:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b68:	e853 3f00 	ldrex	r3, [r3]
 8008b6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	330c      	adds	r3, #12
 8008b7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b7e:	637a      	str	r2, [r7, #52]	; 0x34
 8008b80:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b86:	e841 2300 	strex	r3, r2, [r1]
 8008b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1e5      	bne.n	8008b5e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3314      	adds	r3, #20
 8008b98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	e853 3f00 	ldrex	r3, [r3]
 8008ba0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	f023 0301 	bic.w	r3, r3, #1
 8008ba8:	63bb      	str	r3, [r7, #56]	; 0x38
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	3314      	adds	r3, #20
 8008bb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bb2:	623a      	str	r2, [r7, #32]
 8008bb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb6:	69f9      	ldr	r1, [r7, #28]
 8008bb8:	6a3a      	ldr	r2, [r7, #32]
 8008bba:	e841 2300 	strex	r3, r2, [r1]
 8008bbe:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1e5      	bne.n	8008b92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2220      	movs	r2, #32
 8008bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2220      	movs	r2, #32
 8008bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008bde:	2303      	movs	r3, #3
 8008be0:	e00f      	b.n	8008c02 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	4013      	ands	r3, r2
 8008bec:	68ba      	ldr	r2, [r7, #8]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	bf0c      	ite	eq
 8008bf2:	2301      	moveq	r3, #1
 8008bf4:	2300      	movne	r3, #0
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	79fb      	ldrb	r3, [r7, #7]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d09f      	beq.n	8008b40 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3740      	adds	r7, #64	; 0x40
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
	...

08008c0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c10:	b09f      	sub	sp, #124	; 0x7c
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	691b      	ldr	r3, [r3, #16]
 8008c1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c22:	68d9      	ldr	r1, [r3, #12]
 8008c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	ea40 0301 	orr.w	r3, r0, r1
 8008c2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c30:	689a      	ldr	r2, [r3, #8]
 8008c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	431a      	orrs	r2, r3
 8008c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c3a:	695b      	ldr	r3, [r3, #20]
 8008c3c:	431a      	orrs	r2, r3
 8008c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c40:	69db      	ldr	r3, [r3, #28]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008c50:	f021 010c 	bic.w	r1, r1, #12
 8008c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c5a:	430b      	orrs	r3, r1
 8008c5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	695b      	ldr	r3, [r3, #20]
 8008c64:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c6a:	6999      	ldr	r1, [r3, #24]
 8008c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	ea40 0301 	orr.w	r3, r0, r1
 8008c74:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	4bc5      	ldr	r3, [pc, #788]	; (8008f90 <UART_SetConfig+0x384>)
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d004      	beq.n	8008c8a <UART_SetConfig+0x7e>
 8008c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	4bc3      	ldr	r3, [pc, #780]	; (8008f94 <UART_SetConfig+0x388>)
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d103      	bne.n	8008c92 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008c8a:	f7fd fefb 	bl	8006a84 <HAL_RCC_GetPCLK2Freq>
 8008c8e:	6778      	str	r0, [r7, #116]	; 0x74
 8008c90:	e002      	b.n	8008c98 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008c92:	f7fd fee3 	bl	8006a5c <HAL_RCC_GetPCLK1Freq>
 8008c96:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c9a:	69db      	ldr	r3, [r3, #28]
 8008c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ca0:	f040 80b6 	bne.w	8008e10 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ca6:	461c      	mov	r4, r3
 8008ca8:	f04f 0500 	mov.w	r5, #0
 8008cac:	4622      	mov	r2, r4
 8008cae:	462b      	mov	r3, r5
 8008cb0:	1891      	adds	r1, r2, r2
 8008cb2:	6439      	str	r1, [r7, #64]	; 0x40
 8008cb4:	415b      	adcs	r3, r3
 8008cb6:	647b      	str	r3, [r7, #68]	; 0x44
 8008cb8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008cbc:	1912      	adds	r2, r2, r4
 8008cbe:	eb45 0303 	adc.w	r3, r5, r3
 8008cc2:	f04f 0000 	mov.w	r0, #0
 8008cc6:	f04f 0100 	mov.w	r1, #0
 8008cca:	00d9      	lsls	r1, r3, #3
 8008ccc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008cd0:	00d0      	lsls	r0, r2, #3
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	1911      	adds	r1, r2, r4
 8008cd8:	6639      	str	r1, [r7, #96]	; 0x60
 8008cda:	416b      	adcs	r3, r5
 8008cdc:	667b      	str	r3, [r7, #100]	; 0x64
 8008cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	f04f 0300 	mov.w	r3, #0
 8008ce8:	1891      	adds	r1, r2, r2
 8008cea:	63b9      	str	r1, [r7, #56]	; 0x38
 8008cec:	415b      	adcs	r3, r3
 8008cee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008cf4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008cf8:	f7f7 ffd6 	bl	8000ca8 <__aeabi_uldivmod>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	4ba5      	ldr	r3, [pc, #660]	; (8008f98 <UART_SetConfig+0x38c>)
 8008d02:	fba3 2302 	umull	r2, r3, r3, r2
 8008d06:	095b      	lsrs	r3, r3, #5
 8008d08:	011e      	lsls	r6, r3, #4
 8008d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d0c:	461c      	mov	r4, r3
 8008d0e:	f04f 0500 	mov.w	r5, #0
 8008d12:	4622      	mov	r2, r4
 8008d14:	462b      	mov	r3, r5
 8008d16:	1891      	adds	r1, r2, r2
 8008d18:	6339      	str	r1, [r7, #48]	; 0x30
 8008d1a:	415b      	adcs	r3, r3
 8008d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8008d1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008d22:	1912      	adds	r2, r2, r4
 8008d24:	eb45 0303 	adc.w	r3, r5, r3
 8008d28:	f04f 0000 	mov.w	r0, #0
 8008d2c:	f04f 0100 	mov.w	r1, #0
 8008d30:	00d9      	lsls	r1, r3, #3
 8008d32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008d36:	00d0      	lsls	r0, r2, #3
 8008d38:	4602      	mov	r2, r0
 8008d3a:	460b      	mov	r3, r1
 8008d3c:	1911      	adds	r1, r2, r4
 8008d3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8008d40:	416b      	adcs	r3, r5
 8008d42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	461a      	mov	r2, r3
 8008d4a:	f04f 0300 	mov.w	r3, #0
 8008d4e:	1891      	adds	r1, r2, r2
 8008d50:	62b9      	str	r1, [r7, #40]	; 0x28
 8008d52:	415b      	adcs	r3, r3
 8008d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008d5e:	f7f7 ffa3 	bl	8000ca8 <__aeabi_uldivmod>
 8008d62:	4602      	mov	r2, r0
 8008d64:	460b      	mov	r3, r1
 8008d66:	4b8c      	ldr	r3, [pc, #560]	; (8008f98 <UART_SetConfig+0x38c>)
 8008d68:	fba3 1302 	umull	r1, r3, r3, r2
 8008d6c:	095b      	lsrs	r3, r3, #5
 8008d6e:	2164      	movs	r1, #100	; 0x64
 8008d70:	fb01 f303 	mul.w	r3, r1, r3
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	00db      	lsls	r3, r3, #3
 8008d78:	3332      	adds	r3, #50	; 0x32
 8008d7a:	4a87      	ldr	r2, [pc, #540]	; (8008f98 <UART_SetConfig+0x38c>)
 8008d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d80:	095b      	lsrs	r3, r3, #5
 8008d82:	005b      	lsls	r3, r3, #1
 8008d84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d88:	441e      	add	r6, r3
 8008d8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f04f 0100 	mov.w	r1, #0
 8008d92:	4602      	mov	r2, r0
 8008d94:	460b      	mov	r3, r1
 8008d96:	1894      	adds	r4, r2, r2
 8008d98:	623c      	str	r4, [r7, #32]
 8008d9a:	415b      	adcs	r3, r3
 8008d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008da2:	1812      	adds	r2, r2, r0
 8008da4:	eb41 0303 	adc.w	r3, r1, r3
 8008da8:	f04f 0400 	mov.w	r4, #0
 8008dac:	f04f 0500 	mov.w	r5, #0
 8008db0:	00dd      	lsls	r5, r3, #3
 8008db2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008db6:	00d4      	lsls	r4, r2, #3
 8008db8:	4622      	mov	r2, r4
 8008dba:	462b      	mov	r3, r5
 8008dbc:	1814      	adds	r4, r2, r0
 8008dbe:	653c      	str	r4, [r7, #80]	; 0x50
 8008dc0:	414b      	adcs	r3, r1
 8008dc2:	657b      	str	r3, [r7, #84]	; 0x54
 8008dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	461a      	mov	r2, r3
 8008dca:	f04f 0300 	mov.w	r3, #0
 8008dce:	1891      	adds	r1, r2, r2
 8008dd0:	61b9      	str	r1, [r7, #24]
 8008dd2:	415b      	adcs	r3, r3
 8008dd4:	61fb      	str	r3, [r7, #28]
 8008dd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008dda:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008dde:	f7f7 ff63 	bl	8000ca8 <__aeabi_uldivmod>
 8008de2:	4602      	mov	r2, r0
 8008de4:	460b      	mov	r3, r1
 8008de6:	4b6c      	ldr	r3, [pc, #432]	; (8008f98 <UART_SetConfig+0x38c>)
 8008de8:	fba3 1302 	umull	r1, r3, r3, r2
 8008dec:	095b      	lsrs	r3, r3, #5
 8008dee:	2164      	movs	r1, #100	; 0x64
 8008df0:	fb01 f303 	mul.w	r3, r1, r3
 8008df4:	1ad3      	subs	r3, r2, r3
 8008df6:	00db      	lsls	r3, r3, #3
 8008df8:	3332      	adds	r3, #50	; 0x32
 8008dfa:	4a67      	ldr	r2, [pc, #412]	; (8008f98 <UART_SetConfig+0x38c>)
 8008dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8008e00:	095b      	lsrs	r3, r3, #5
 8008e02:	f003 0207 	and.w	r2, r3, #7
 8008e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4432      	add	r2, r6
 8008e0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008e0e:	e0b9      	b.n	8008f84 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e12:	461c      	mov	r4, r3
 8008e14:	f04f 0500 	mov.w	r5, #0
 8008e18:	4622      	mov	r2, r4
 8008e1a:	462b      	mov	r3, r5
 8008e1c:	1891      	adds	r1, r2, r2
 8008e1e:	6139      	str	r1, [r7, #16]
 8008e20:	415b      	adcs	r3, r3
 8008e22:	617b      	str	r3, [r7, #20]
 8008e24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008e28:	1912      	adds	r2, r2, r4
 8008e2a:	eb45 0303 	adc.w	r3, r5, r3
 8008e2e:	f04f 0000 	mov.w	r0, #0
 8008e32:	f04f 0100 	mov.w	r1, #0
 8008e36:	00d9      	lsls	r1, r3, #3
 8008e38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e3c:	00d0      	lsls	r0, r2, #3
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	eb12 0804 	adds.w	r8, r2, r4
 8008e46:	eb43 0905 	adc.w	r9, r3, r5
 8008e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f04f 0100 	mov.w	r1, #0
 8008e54:	f04f 0200 	mov.w	r2, #0
 8008e58:	f04f 0300 	mov.w	r3, #0
 8008e5c:	008b      	lsls	r3, r1, #2
 8008e5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008e62:	0082      	lsls	r2, r0, #2
 8008e64:	4640      	mov	r0, r8
 8008e66:	4649      	mov	r1, r9
 8008e68:	f7f7 ff1e 	bl	8000ca8 <__aeabi_uldivmod>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4b49      	ldr	r3, [pc, #292]	; (8008f98 <UART_SetConfig+0x38c>)
 8008e72:	fba3 2302 	umull	r2, r3, r3, r2
 8008e76:	095b      	lsrs	r3, r3, #5
 8008e78:	011e      	lsls	r6, r3, #4
 8008e7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f04f 0100 	mov.w	r1, #0
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	1894      	adds	r4, r2, r2
 8008e88:	60bc      	str	r4, [r7, #8]
 8008e8a:	415b      	adcs	r3, r3
 8008e8c:	60fb      	str	r3, [r7, #12]
 8008e8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e92:	1812      	adds	r2, r2, r0
 8008e94:	eb41 0303 	adc.w	r3, r1, r3
 8008e98:	f04f 0400 	mov.w	r4, #0
 8008e9c:	f04f 0500 	mov.w	r5, #0
 8008ea0:	00dd      	lsls	r5, r3, #3
 8008ea2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ea6:	00d4      	lsls	r4, r2, #3
 8008ea8:	4622      	mov	r2, r4
 8008eaa:	462b      	mov	r3, r5
 8008eac:	1814      	adds	r4, r2, r0
 8008eae:	64bc      	str	r4, [r7, #72]	; 0x48
 8008eb0:	414b      	adcs	r3, r1
 8008eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	4618      	mov	r0, r3
 8008eba:	f04f 0100 	mov.w	r1, #0
 8008ebe:	f04f 0200 	mov.w	r2, #0
 8008ec2:	f04f 0300 	mov.w	r3, #0
 8008ec6:	008b      	lsls	r3, r1, #2
 8008ec8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008ecc:	0082      	lsls	r2, r0, #2
 8008ece:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008ed2:	f7f7 fee9 	bl	8000ca8 <__aeabi_uldivmod>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	460b      	mov	r3, r1
 8008eda:	4b2f      	ldr	r3, [pc, #188]	; (8008f98 <UART_SetConfig+0x38c>)
 8008edc:	fba3 1302 	umull	r1, r3, r3, r2
 8008ee0:	095b      	lsrs	r3, r3, #5
 8008ee2:	2164      	movs	r1, #100	; 0x64
 8008ee4:	fb01 f303 	mul.w	r3, r1, r3
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	011b      	lsls	r3, r3, #4
 8008eec:	3332      	adds	r3, #50	; 0x32
 8008eee:	4a2a      	ldr	r2, [pc, #168]	; (8008f98 <UART_SetConfig+0x38c>)
 8008ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef4:	095b      	lsrs	r3, r3, #5
 8008ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008efa:	441e      	add	r6, r3
 8008efc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008efe:	4618      	mov	r0, r3
 8008f00:	f04f 0100 	mov.w	r1, #0
 8008f04:	4602      	mov	r2, r0
 8008f06:	460b      	mov	r3, r1
 8008f08:	1894      	adds	r4, r2, r2
 8008f0a:	603c      	str	r4, [r7, #0]
 8008f0c:	415b      	adcs	r3, r3
 8008f0e:	607b      	str	r3, [r7, #4]
 8008f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f14:	1812      	adds	r2, r2, r0
 8008f16:	eb41 0303 	adc.w	r3, r1, r3
 8008f1a:	f04f 0400 	mov.w	r4, #0
 8008f1e:	f04f 0500 	mov.w	r5, #0
 8008f22:	00dd      	lsls	r5, r3, #3
 8008f24:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008f28:	00d4      	lsls	r4, r2, #3
 8008f2a:	4622      	mov	r2, r4
 8008f2c:	462b      	mov	r3, r5
 8008f2e:	eb12 0a00 	adds.w	sl, r2, r0
 8008f32:	eb43 0b01 	adc.w	fp, r3, r1
 8008f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f04f 0100 	mov.w	r1, #0
 8008f40:	f04f 0200 	mov.w	r2, #0
 8008f44:	f04f 0300 	mov.w	r3, #0
 8008f48:	008b      	lsls	r3, r1, #2
 8008f4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008f4e:	0082      	lsls	r2, r0, #2
 8008f50:	4650      	mov	r0, sl
 8008f52:	4659      	mov	r1, fp
 8008f54:	f7f7 fea8 	bl	8000ca8 <__aeabi_uldivmod>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4b0e      	ldr	r3, [pc, #56]	; (8008f98 <UART_SetConfig+0x38c>)
 8008f5e:	fba3 1302 	umull	r1, r3, r3, r2
 8008f62:	095b      	lsrs	r3, r3, #5
 8008f64:	2164      	movs	r1, #100	; 0x64
 8008f66:	fb01 f303 	mul.w	r3, r1, r3
 8008f6a:	1ad3      	subs	r3, r2, r3
 8008f6c:	011b      	lsls	r3, r3, #4
 8008f6e:	3332      	adds	r3, #50	; 0x32
 8008f70:	4a09      	ldr	r2, [pc, #36]	; (8008f98 <UART_SetConfig+0x38c>)
 8008f72:	fba2 2303 	umull	r2, r3, r2, r3
 8008f76:	095b      	lsrs	r3, r3, #5
 8008f78:	f003 020f 	and.w	r2, r3, #15
 8008f7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4432      	add	r2, r6
 8008f82:	609a      	str	r2, [r3, #8]
}
 8008f84:	bf00      	nop
 8008f86:	377c      	adds	r7, #124	; 0x7c
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f8e:	bf00      	nop
 8008f90:	40011000 	.word	0x40011000
 8008f94:	40011400 	.word	0x40011400
 8008f98:	51eb851f 	.word	0x51eb851f

08008f9c <__NVIC_SetPriority>:
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	6039      	str	r1, [r7, #0]
 8008fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	db0a      	blt.n	8008fc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	b2da      	uxtb	r2, r3
 8008fb4:	490c      	ldr	r1, [pc, #48]	; (8008fe8 <__NVIC_SetPriority+0x4c>)
 8008fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fba:	0112      	lsls	r2, r2, #4
 8008fbc:	b2d2      	uxtb	r2, r2
 8008fbe:	440b      	add	r3, r1
 8008fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008fc4:	e00a      	b.n	8008fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	b2da      	uxtb	r2, r3
 8008fca:	4908      	ldr	r1, [pc, #32]	; (8008fec <__NVIC_SetPriority+0x50>)
 8008fcc:	79fb      	ldrb	r3, [r7, #7]
 8008fce:	f003 030f 	and.w	r3, r3, #15
 8008fd2:	3b04      	subs	r3, #4
 8008fd4:	0112      	lsls	r2, r2, #4
 8008fd6:	b2d2      	uxtb	r2, r2
 8008fd8:	440b      	add	r3, r1
 8008fda:	761a      	strb	r2, [r3, #24]
}
 8008fdc:	bf00      	nop
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe6:	4770      	bx	lr
 8008fe8:	e000e100 	.word	0xe000e100
 8008fec:	e000ed00 	.word	0xe000ed00

08008ff0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008ff4:	4b05      	ldr	r3, [pc, #20]	; (800900c <SysTick_Handler+0x1c>)
 8008ff6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008ff8:	f001 fdba 	bl	800ab70 <xTaskGetSchedulerState>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d001      	beq.n	8009006 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009002:	f002 fba1 	bl	800b748 <xPortSysTickHandler>
  }
}
 8009006:	bf00      	nop
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	e000e010 	.word	0xe000e010

08009010 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009010:	b580      	push	{r7, lr}
 8009012:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009014:	2100      	movs	r1, #0
 8009016:	f06f 0004 	mvn.w	r0, #4
 800901a:	f7ff ffbf 	bl	8008f9c <__NVIC_SetPriority>
#endif
}
 800901e:	bf00      	nop
 8009020:	bd80      	pop	{r7, pc}
	...

08009024 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800902a:	f3ef 8305 	mrs	r3, IPSR
 800902e:	603b      	str	r3, [r7, #0]
  return(result);
 8009030:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009032:	2b00      	cmp	r3, #0
 8009034:	d003      	beq.n	800903e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009036:	f06f 0305 	mvn.w	r3, #5
 800903a:	607b      	str	r3, [r7, #4]
 800903c:	e00c      	b.n	8009058 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800903e:	4b0a      	ldr	r3, [pc, #40]	; (8009068 <osKernelInitialize+0x44>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d105      	bne.n	8009052 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009046:	4b08      	ldr	r3, [pc, #32]	; (8009068 <osKernelInitialize+0x44>)
 8009048:	2201      	movs	r2, #1
 800904a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800904c:	2300      	movs	r3, #0
 800904e:	607b      	str	r3, [r7, #4]
 8009050:	e002      	b.n	8009058 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009052:	f04f 33ff 	mov.w	r3, #4294967295
 8009056:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009058:	687b      	ldr	r3, [r7, #4]
}
 800905a:	4618      	mov	r0, r3
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	200004dc 	.word	0x200004dc

0800906c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800906c:	b580      	push	{r7, lr}
 800906e:	b082      	sub	sp, #8
 8009070:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009072:	f3ef 8305 	mrs	r3, IPSR
 8009076:	603b      	str	r3, [r7, #0]
  return(result);
 8009078:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800907a:	2b00      	cmp	r3, #0
 800907c:	d003      	beq.n	8009086 <osKernelStart+0x1a>
    stat = osErrorISR;
 800907e:	f06f 0305 	mvn.w	r3, #5
 8009082:	607b      	str	r3, [r7, #4]
 8009084:	e010      	b.n	80090a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009086:	4b0b      	ldr	r3, [pc, #44]	; (80090b4 <osKernelStart+0x48>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d109      	bne.n	80090a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800908e:	f7ff ffbf 	bl	8009010 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009092:	4b08      	ldr	r3, [pc, #32]	; (80090b4 <osKernelStart+0x48>)
 8009094:	2202      	movs	r2, #2
 8009096:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009098:	f001 f8fe 	bl	800a298 <vTaskStartScheduler>
      stat = osOK;
 800909c:	2300      	movs	r3, #0
 800909e:	607b      	str	r3, [r7, #4]
 80090a0:	e002      	b.n	80090a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80090a2:	f04f 33ff 	mov.w	r3, #4294967295
 80090a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80090a8:	687b      	ldr	r3, [r7, #4]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	200004dc 	.word	0x200004dc

080090b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08e      	sub	sp, #56	; 0x38
 80090bc:	af04      	add	r7, sp, #16
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80090c4:	2300      	movs	r3, #0
 80090c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090c8:	f3ef 8305 	mrs	r3, IPSR
 80090cc:	617b      	str	r3, [r7, #20]
  return(result);
 80090ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d17e      	bne.n	80091d2 <osThreadNew+0x11a>
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d07b      	beq.n	80091d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80090da:	2380      	movs	r3, #128	; 0x80
 80090dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80090de:	2318      	movs	r3, #24
 80090e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80090e2:	2300      	movs	r3, #0
 80090e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80090e6:	f04f 33ff 	mov.w	r3, #4294967295
 80090ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d045      	beq.n	800917e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d002      	beq.n	8009100 <osThreadNew+0x48>
        name = attr->name;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	699b      	ldr	r3, [r3, #24]
 800910c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d008      	beq.n	8009126 <osThreadNew+0x6e>
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	2b38      	cmp	r3, #56	; 0x38
 8009118:	d805      	bhi.n	8009126 <osThreadNew+0x6e>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	2b00      	cmp	r3, #0
 8009124:	d001      	beq.n	800912a <osThreadNew+0x72>
        return (NULL);
 8009126:	2300      	movs	r3, #0
 8009128:	e054      	b.n	80091d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d003      	beq.n	800913a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	695b      	ldr	r3, [r3, #20]
 8009136:	089b      	lsrs	r3, r3, #2
 8009138:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00e      	beq.n	8009160 <osThreadNew+0xa8>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	2bbb      	cmp	r3, #187	; 0xbb
 8009148:	d90a      	bls.n	8009160 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800914e:	2b00      	cmp	r3, #0
 8009150:	d006      	beq.n	8009160 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d002      	beq.n	8009160 <osThreadNew+0xa8>
        mem = 1;
 800915a:	2301      	movs	r3, #1
 800915c:	61bb      	str	r3, [r7, #24]
 800915e:	e010      	b.n	8009182 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10c      	bne.n	8009182 <osThreadNew+0xca>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d108      	bne.n	8009182 <osThreadNew+0xca>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	691b      	ldr	r3, [r3, #16]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d104      	bne.n	8009182 <osThreadNew+0xca>
          mem = 0;
 8009178:	2300      	movs	r3, #0
 800917a:	61bb      	str	r3, [r7, #24]
 800917c:	e001      	b.n	8009182 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800917e:	2300      	movs	r3, #0
 8009180:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d110      	bne.n	80091aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009190:	9202      	str	r2, [sp, #8]
 8009192:	9301      	str	r3, [sp, #4]
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	9300      	str	r3, [sp, #0]
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	6a3a      	ldr	r2, [r7, #32]
 800919c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f000 fe1c 	bl	8009ddc <xTaskCreateStatic>
 80091a4:	4603      	mov	r3, r0
 80091a6:	613b      	str	r3, [r7, #16]
 80091a8:	e013      	b.n	80091d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d110      	bne.n	80091d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80091b0:	6a3b      	ldr	r3, [r7, #32]
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	f107 0310 	add.w	r3, r7, #16
 80091b8:	9301      	str	r3, [sp, #4]
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 fe67 	bl	8009e96 <xTaskCreate>
 80091c8:	4603      	mov	r3, r0
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d001      	beq.n	80091d2 <osThreadNew+0x11a>
            hTask = NULL;
 80091ce:	2300      	movs	r3, #0
 80091d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80091d2:	693b      	ldr	r3, [r7, #16]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3728      	adds	r7, #40	; 0x28
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80091e2:	f001 fcb5 	bl	800ab50 <xTaskGetCurrentTaskHandle>
 80091e6:	6078      	str	r0, [r7, #4]

  return (id);
 80091e8:	687b      	ldr	r3, [r7, #4]
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3708      	adds	r7, #8
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}

080091f2 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 80091f2:	b580      	push	{r7, lr}
 80091f4:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 80091f6:	2000      	movs	r0, #0
 80091f8:	f000 ffa8 	bl	800a14c <vTaskDelete>
#endif
  for (;;);
 80091fc:	e7fe      	b.n	80091fc <osThreadExit+0xa>

080091fe <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80091fe:	b580      	push	{r7, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009206:	f3ef 8305 	mrs	r3, IPSR
 800920a:	60bb      	str	r3, [r7, #8]
  return(result);
 800920c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800920e:	2b00      	cmp	r3, #0
 8009210:	d003      	beq.n	800921a <osDelay+0x1c>
    stat = osErrorISR;
 8009212:	f06f 0305 	mvn.w	r3, #5
 8009216:	60fb      	str	r3, [r7, #12]
 8009218:	e007      	b.n	800922a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800921a:	2300      	movs	r3, #0
 800921c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d002      	beq.n	800922a <osDelay+0x2c>
      vTaskDelay(ticks);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f001 f803 	bl	800a230 <vTaskDelay>
    }
  }

  return (stat);
 800922a:	68fb      	ldr	r3, [r7, #12]
}
 800922c:	4618      	mov	r0, r3
 800922e:	3710      	adds	r7, #16
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	4a07      	ldr	r2, [pc, #28]	; (8009260 <vApplicationGetIdleTaskMemory+0x2c>)
 8009244:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	4a06      	ldr	r2, [pc, #24]	; (8009264 <vApplicationGetIdleTaskMemory+0x30>)
 800924a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2280      	movs	r2, #128	; 0x80
 8009250:	601a      	str	r2, [r3, #0]
}
 8009252:	bf00      	nop
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	200004e0 	.word	0x200004e0
 8009264:	2000059c 	.word	0x2000059c

08009268 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4a07      	ldr	r2, [pc, #28]	; (8009294 <vApplicationGetTimerTaskMemory+0x2c>)
 8009278:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	4a06      	ldr	r2, [pc, #24]	; (8009298 <vApplicationGetTimerTaskMemory+0x30>)
 800927e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009286:	601a      	str	r2, [r3, #0]
}
 8009288:	bf00      	nop
 800928a:	3714      	adds	r7, #20
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr
 8009294:	2000079c 	.word	0x2000079c
 8009298:	20000858 	.word	0x20000858

0800929c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f103 0208 	add.w	r2, r3, #8
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f04f 32ff 	mov.w	r2, #4294967295
 80092b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f103 0208 	add.w	r2, r3, #8
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f103 0208 	add.w	r2, r3, #8
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80092ea:	bf00      	nop
 80092ec:	370c      	adds	r7, #12
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092f6:	b480      	push	{r7}
 80092f8:	b085      	sub	sp, #20
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	689a      	ldr	r2, [r3, #8]
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	683a      	ldr	r2, [r7, #0]
 800931a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	1c5a      	adds	r2, r3, #1
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	601a      	str	r2, [r3, #0]
}
 8009332:	bf00      	nop
 8009334:	3714      	adds	r7, #20
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr

0800933e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800933e:	b480      	push	{r7}
 8009340:	b085      	sub	sp, #20
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009354:	d103      	bne.n	800935e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	60fb      	str	r3, [r7, #12]
 800935c:	e00c      	b.n	8009378 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	3308      	adds	r3, #8
 8009362:	60fb      	str	r3, [r7, #12]
 8009364:	e002      	b.n	800936c <vListInsert+0x2e>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	68ba      	ldr	r2, [r7, #8]
 8009374:	429a      	cmp	r2, r3
 8009376:	d2f6      	bcs.n	8009366 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	683a      	ldr	r2, [r7, #0]
 8009386:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	683a      	ldr	r2, [r7, #0]
 8009392:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	1c5a      	adds	r2, r3, #1
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	601a      	str	r2, [r3, #0]
}
 80093a4:	bf00      	nop
 80093a6:	3714      	adds	r7, #20
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	6892      	ldr	r2, [r2, #8]
 80093c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	6852      	ldr	r2, [r2, #4]
 80093d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d103      	bne.n	80093e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	689a      	ldr	r2, [r3, #8]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	1e5a      	subs	r2, r3, #1
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3714      	adds	r7, #20
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d10a      	bne.n	800942e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941c:	f383 8811 	msr	BASEPRI, r3
 8009420:	f3bf 8f6f 	isb	sy
 8009424:	f3bf 8f4f 	dsb	sy
 8009428:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800942a:	bf00      	nop
 800942c:	e7fe      	b.n	800942c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800942e:	f002 f8f9 	bl	800b624 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800943a:	68f9      	ldr	r1, [r7, #12]
 800943c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800943e:	fb01 f303 	mul.w	r3, r1, r3
 8009442:	441a      	add	r2, r3
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800945e:	3b01      	subs	r3, #1
 8009460:	68f9      	ldr	r1, [r7, #12]
 8009462:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009464:	fb01 f303 	mul.w	r3, r1, r3
 8009468:	441a      	add	r2, r3
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	22ff      	movs	r2, #255	; 0xff
 8009472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	22ff      	movs	r2, #255	; 0xff
 800947a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d114      	bne.n	80094ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d01a      	beq.n	80094c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	3310      	adds	r3, #16
 8009490:	4618      	mov	r0, r3
 8009492:	f001 f99b 	bl	800a7cc <xTaskRemoveFromEventList>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d012      	beq.n	80094c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800949c:	4b0c      	ldr	r3, [pc, #48]	; (80094d0 <xQueueGenericReset+0xcc>)
 800949e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094a2:	601a      	str	r2, [r3, #0]
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	e009      	b.n	80094c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3310      	adds	r3, #16
 80094b2:	4618      	mov	r0, r3
 80094b4:	f7ff fef2 	bl	800929c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	3324      	adds	r3, #36	; 0x24
 80094bc:	4618      	mov	r0, r3
 80094be:	f7ff feed 	bl	800929c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80094c2:	f002 f8df 	bl	800b684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80094c6:	2301      	movs	r3, #1
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}
 80094d0:	e000ed04 	.word	0xe000ed04

080094d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b08e      	sub	sp, #56	; 0x38
 80094d8:	af02      	add	r7, sp, #8
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]
 80094e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d10a      	bne.n	80094fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80094e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ec:	f383 8811 	msr	BASEPRI, r3
 80094f0:	f3bf 8f6f 	isb	sy
 80094f4:	f3bf 8f4f 	dsb	sy
 80094f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094fa:	bf00      	nop
 80094fc:	e7fe      	b.n	80094fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10a      	bne.n	800951a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009516:	bf00      	nop
 8009518:	e7fe      	b.n	8009518 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <xQueueGenericCreateStatic+0x52>
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <xQueueGenericCreateStatic+0x56>
 8009526:	2301      	movs	r3, #1
 8009528:	e000      	b.n	800952c <xQueueGenericCreateStatic+0x58>
 800952a:	2300      	movs	r3, #0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10a      	bne.n	8009546 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	623b      	str	r3, [r7, #32]
}
 8009542:	bf00      	nop
 8009544:	e7fe      	b.n	8009544 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d102      	bne.n	8009552 <xQueueGenericCreateStatic+0x7e>
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d101      	bne.n	8009556 <xQueueGenericCreateStatic+0x82>
 8009552:	2301      	movs	r3, #1
 8009554:	e000      	b.n	8009558 <xQueueGenericCreateStatic+0x84>
 8009556:	2300      	movs	r3, #0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10a      	bne.n	8009572 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800955c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009560:	f383 8811 	msr	BASEPRI, r3
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	61fb      	str	r3, [r7, #28]
}
 800956e:	bf00      	nop
 8009570:	e7fe      	b.n	8009570 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009572:	2350      	movs	r3, #80	; 0x50
 8009574:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	2b50      	cmp	r3, #80	; 0x50
 800957a:	d00a      	beq.n	8009592 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800957c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	61bb      	str	r3, [r7, #24]
}
 800958e:	bf00      	nop
 8009590:	e7fe      	b.n	8009590 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009592:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00d      	beq.n	80095ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800959e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80095a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80095aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	4613      	mov	r3, r2
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	68b9      	ldr	r1, [r7, #8]
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f000 f805 	bl	80095c4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80095ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80095bc:	4618      	mov	r0, r3
 80095be:	3730      	adds	r7, #48	; 0x30
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	607a      	str	r2, [r7, #4]
 80095d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d103      	bne.n	80095e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	69ba      	ldr	r2, [r7, #24]
 80095dc:	601a      	str	r2, [r3, #0]
 80095de:	e002      	b.n	80095e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80095f2:	2101      	movs	r1, #1
 80095f4:	69b8      	ldr	r0, [r7, #24]
 80095f6:	f7ff ff05 	bl	8009404 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	78fa      	ldrb	r2, [r7, #3]
 80095fe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009602:	bf00      	nop
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
	...

0800960c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b08e      	sub	sp, #56	; 0x38
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
 8009618:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800961a:	2300      	movs	r3, #0
 800961c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009624:	2b00      	cmp	r3, #0
 8009626:	d10a      	bne.n	800963e <xQueueGenericSend+0x32>
	__asm volatile
 8009628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962c:	f383 8811 	msr	BASEPRI, r3
 8009630:	f3bf 8f6f 	isb	sy
 8009634:	f3bf 8f4f 	dsb	sy
 8009638:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800963a:	bf00      	nop
 800963c:	e7fe      	b.n	800963c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d103      	bne.n	800964c <xQueueGenericSend+0x40>
 8009644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009648:	2b00      	cmp	r3, #0
 800964a:	d101      	bne.n	8009650 <xQueueGenericSend+0x44>
 800964c:	2301      	movs	r3, #1
 800964e:	e000      	b.n	8009652 <xQueueGenericSend+0x46>
 8009650:	2300      	movs	r3, #0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10a      	bne.n	800966c <xQueueGenericSend+0x60>
	__asm volatile
 8009656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965a:	f383 8811 	msr	BASEPRI, r3
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009668:	bf00      	nop
 800966a:	e7fe      	b.n	800966a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	2b02      	cmp	r3, #2
 8009670:	d103      	bne.n	800967a <xQueueGenericSend+0x6e>
 8009672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009676:	2b01      	cmp	r3, #1
 8009678:	d101      	bne.n	800967e <xQueueGenericSend+0x72>
 800967a:	2301      	movs	r3, #1
 800967c:	e000      	b.n	8009680 <xQueueGenericSend+0x74>
 800967e:	2300      	movs	r3, #0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10a      	bne.n	800969a <xQueueGenericSend+0x8e>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	623b      	str	r3, [r7, #32]
}
 8009696:	bf00      	nop
 8009698:	e7fe      	b.n	8009698 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800969a:	f001 fa69 	bl	800ab70 <xTaskGetSchedulerState>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d102      	bne.n	80096aa <xQueueGenericSend+0x9e>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d101      	bne.n	80096ae <xQueueGenericSend+0xa2>
 80096aa:	2301      	movs	r3, #1
 80096ac:	e000      	b.n	80096b0 <xQueueGenericSend+0xa4>
 80096ae:	2300      	movs	r3, #0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10a      	bne.n	80096ca <xQueueGenericSend+0xbe>
	__asm volatile
 80096b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	61fb      	str	r3, [r7, #28]
}
 80096c6:	bf00      	nop
 80096c8:	e7fe      	b.n	80096c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80096ca:	f001 ffab 	bl	800b624 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d302      	bcc.n	80096e0 <xQueueGenericSend+0xd4>
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d129      	bne.n	8009734 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096e0:	683a      	ldr	r2, [r7, #0]
 80096e2:	68b9      	ldr	r1, [r7, #8]
 80096e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096e6:	f000 fa0b 	bl	8009b00 <prvCopyDataToQueue>
 80096ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d010      	beq.n	8009716 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f6:	3324      	adds	r3, #36	; 0x24
 80096f8:	4618      	mov	r0, r3
 80096fa:	f001 f867 	bl	800a7cc <xTaskRemoveFromEventList>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d013      	beq.n	800972c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009704:	4b3f      	ldr	r3, [pc, #252]	; (8009804 <xQueueGenericSend+0x1f8>)
 8009706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800970a:	601a      	str	r2, [r3, #0]
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	f3bf 8f6f 	isb	sy
 8009714:	e00a      	b.n	800972c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009718:	2b00      	cmp	r3, #0
 800971a:	d007      	beq.n	800972c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800971c:	4b39      	ldr	r3, [pc, #228]	; (8009804 <xQueueGenericSend+0x1f8>)
 800971e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009722:	601a      	str	r2, [r3, #0]
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800972c:	f001 ffaa 	bl	800b684 <vPortExitCritical>
				return pdPASS;
 8009730:	2301      	movs	r3, #1
 8009732:	e063      	b.n	80097fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d103      	bne.n	8009742 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800973a:	f001 ffa3 	bl	800b684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800973e:	2300      	movs	r3, #0
 8009740:	e05c      	b.n	80097fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009744:	2b00      	cmp	r3, #0
 8009746:	d106      	bne.n	8009756 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009748:	f107 0314 	add.w	r3, r7, #20
 800974c:	4618      	mov	r0, r3
 800974e:	f001 f8a1 	bl	800a894 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009752:	2301      	movs	r3, #1
 8009754:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009756:	f001 ff95 	bl	800b684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800975a:	f000 fe0d 	bl	800a378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800975e:	f001 ff61 	bl	800b624 <vPortEnterCritical>
 8009762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009768:	b25b      	sxtb	r3, r3
 800976a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976e:	d103      	bne.n	8009778 <xQueueGenericSend+0x16c>
 8009770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009772:	2200      	movs	r2, #0
 8009774:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800977e:	b25b      	sxtb	r3, r3
 8009780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009784:	d103      	bne.n	800978e <xQueueGenericSend+0x182>
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	2200      	movs	r2, #0
 800978a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800978e:	f001 ff79 	bl	800b684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009792:	1d3a      	adds	r2, r7, #4
 8009794:	f107 0314 	add.w	r3, r7, #20
 8009798:	4611      	mov	r1, r2
 800979a:	4618      	mov	r0, r3
 800979c:	f001 f890 	bl	800a8c0 <xTaskCheckForTimeOut>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d124      	bne.n	80097f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80097a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097a8:	f000 faa2 	bl	8009cf0 <prvIsQueueFull>
 80097ac:	4603      	mov	r3, r0
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d018      	beq.n	80097e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80097b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b4:	3310      	adds	r3, #16
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	4611      	mov	r1, r2
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 ffb6 	bl	800a72c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80097c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097c2:	f000 fa2d 	bl	8009c20 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80097c6:	f000 fde5 	bl	800a394 <xTaskResumeAll>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f47f af7c 	bne.w	80096ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80097d2:	4b0c      	ldr	r3, [pc, #48]	; (8009804 <xQueueGenericSend+0x1f8>)
 80097d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097d8:	601a      	str	r2, [r3, #0]
 80097da:	f3bf 8f4f 	dsb	sy
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	e772      	b.n	80096ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80097e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097e6:	f000 fa1b 	bl	8009c20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097ea:	f000 fdd3 	bl	800a394 <xTaskResumeAll>
 80097ee:	e76c      	b.n	80096ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80097f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80097f2:	f000 fa15 	bl	8009c20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80097f6:	f000 fdcd 	bl	800a394 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80097fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3738      	adds	r7, #56	; 0x38
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	e000ed04 	.word	0xe000ed04

08009808 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b090      	sub	sp, #64	; 0x40
 800980c:	af00      	add	r7, sp, #0
 800980e:	60f8      	str	r0, [r7, #12]
 8009810:	60b9      	str	r1, [r7, #8]
 8009812:	607a      	str	r2, [r7, #4]
 8009814:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800981a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10a      	bne.n	8009836 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009832:	bf00      	nop
 8009834:	e7fe      	b.n	8009834 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d103      	bne.n	8009844 <xQueueGenericSendFromISR+0x3c>
 800983c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800983e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009840:	2b00      	cmp	r3, #0
 8009842:	d101      	bne.n	8009848 <xQueueGenericSendFromISR+0x40>
 8009844:	2301      	movs	r3, #1
 8009846:	e000      	b.n	800984a <xQueueGenericSendFromISR+0x42>
 8009848:	2300      	movs	r3, #0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d10a      	bne.n	8009864 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800984e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009852:	f383 8811 	msr	BASEPRI, r3
 8009856:	f3bf 8f6f 	isb	sy
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009860:	bf00      	nop
 8009862:	e7fe      	b.n	8009862 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	2b02      	cmp	r3, #2
 8009868:	d103      	bne.n	8009872 <xQueueGenericSendFromISR+0x6a>
 800986a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800986e:	2b01      	cmp	r3, #1
 8009870:	d101      	bne.n	8009876 <xQueueGenericSendFromISR+0x6e>
 8009872:	2301      	movs	r3, #1
 8009874:	e000      	b.n	8009878 <xQueueGenericSendFromISR+0x70>
 8009876:	2300      	movs	r3, #0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10a      	bne.n	8009892 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800987c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009880:	f383 8811 	msr	BASEPRI, r3
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	623b      	str	r3, [r7, #32]
}
 800988e:	bf00      	nop
 8009890:	e7fe      	b.n	8009890 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009892:	f001 ffa9 	bl	800b7e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009896:	f3ef 8211 	mrs	r2, BASEPRI
 800989a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989e:	f383 8811 	msr	BASEPRI, r3
 80098a2:	f3bf 8f6f 	isb	sy
 80098a6:	f3bf 8f4f 	dsb	sy
 80098aa:	61fa      	str	r2, [r7, #28]
 80098ac:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80098ae:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80098b0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80098b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d302      	bcc.n	80098c4 <xQueueGenericSendFromISR+0xbc>
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d12f      	bne.n	8009924 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80098c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098d4:	683a      	ldr	r2, [r7, #0]
 80098d6:	68b9      	ldr	r1, [r7, #8]
 80098d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80098da:	f000 f911 	bl	8009b00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80098de:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80098e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e6:	d112      	bne.n	800990e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d016      	beq.n	800991e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f2:	3324      	adds	r3, #36	; 0x24
 80098f4:	4618      	mov	r0, r3
 80098f6:	f000 ff69 	bl	800a7cc <xTaskRemoveFromEventList>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d00e      	beq.n	800991e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00b      	beq.n	800991e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2201      	movs	r2, #1
 800990a:	601a      	str	r2, [r3, #0]
 800990c:	e007      	b.n	800991e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800990e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009912:	3301      	adds	r3, #1
 8009914:	b2db      	uxtb	r3, r3
 8009916:	b25a      	sxtb	r2, r3
 8009918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800991a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800991e:	2301      	movs	r3, #1
 8009920:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009922:	e001      	b.n	8009928 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009924:	2300      	movs	r3, #0
 8009926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800992a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009932:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009936:	4618      	mov	r0, r3
 8009938:	3740      	adds	r7, #64	; 0x40
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
	...

08009940 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b08c      	sub	sp, #48	; 0x30
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800994c:	2300      	movs	r3, #0
 800994e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009956:	2b00      	cmp	r3, #0
 8009958:	d10a      	bne.n	8009970 <xQueueReceive+0x30>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	623b      	str	r3, [r7, #32]
}
 800996c:	bf00      	nop
 800996e:	e7fe      	b.n	800996e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d103      	bne.n	800997e <xQueueReceive+0x3e>
 8009976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997a:	2b00      	cmp	r3, #0
 800997c:	d101      	bne.n	8009982 <xQueueReceive+0x42>
 800997e:	2301      	movs	r3, #1
 8009980:	e000      	b.n	8009984 <xQueueReceive+0x44>
 8009982:	2300      	movs	r3, #0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d10a      	bne.n	800999e <xQueueReceive+0x5e>
	__asm volatile
 8009988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998c:	f383 8811 	msr	BASEPRI, r3
 8009990:	f3bf 8f6f 	isb	sy
 8009994:	f3bf 8f4f 	dsb	sy
 8009998:	61fb      	str	r3, [r7, #28]
}
 800999a:	bf00      	nop
 800999c:	e7fe      	b.n	800999c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800999e:	f001 f8e7 	bl	800ab70 <xTaskGetSchedulerState>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d102      	bne.n	80099ae <xQueueReceive+0x6e>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d101      	bne.n	80099b2 <xQueueReceive+0x72>
 80099ae:	2301      	movs	r3, #1
 80099b0:	e000      	b.n	80099b4 <xQueueReceive+0x74>
 80099b2:	2300      	movs	r3, #0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d10a      	bne.n	80099ce <xQueueReceive+0x8e>
	__asm volatile
 80099b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099bc:	f383 8811 	msr	BASEPRI, r3
 80099c0:	f3bf 8f6f 	isb	sy
 80099c4:	f3bf 8f4f 	dsb	sy
 80099c8:	61bb      	str	r3, [r7, #24]
}
 80099ca:	bf00      	nop
 80099cc:	e7fe      	b.n	80099cc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099ce:	f001 fe29 	bl	800b624 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d01f      	beq.n	8009a1e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80099de:	68b9      	ldr	r1, [r7, #8]
 80099e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099e2:	f000 f8f7 	bl	8009bd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80099e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e8:	1e5a      	subs	r2, r3, #1
 80099ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00f      	beq.n	8009a16 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f8:	3310      	adds	r3, #16
 80099fa:	4618      	mov	r0, r3
 80099fc:	f000 fee6 	bl	800a7cc <xTaskRemoveFromEventList>
 8009a00:	4603      	mov	r3, r0
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d007      	beq.n	8009a16 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a06:	4b3d      	ldr	r3, [pc, #244]	; (8009afc <xQueueReceive+0x1bc>)
 8009a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a16:	f001 fe35 	bl	800b684 <vPortExitCritical>
				return pdPASS;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e069      	b.n	8009af2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d103      	bne.n	8009a2c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009a24:	f001 fe2e 	bl	800b684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	e062      	b.n	8009af2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d106      	bne.n	8009a40 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a32:	f107 0310 	add.w	r3, r7, #16
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 ff2c 	bl	800a894 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a40:	f001 fe20 	bl	800b684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a44:	f000 fc98 	bl	800a378 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a48:	f001 fdec 	bl	800b624 <vPortEnterCritical>
 8009a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a52:	b25b      	sxtb	r3, r3
 8009a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a58:	d103      	bne.n	8009a62 <xQueueReceive+0x122>
 8009a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a68:	b25b      	sxtb	r3, r3
 8009a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a6e:	d103      	bne.n	8009a78 <xQueueReceive+0x138>
 8009a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a72:	2200      	movs	r2, #0
 8009a74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009a78:	f001 fe04 	bl	800b684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009a7c:	1d3a      	adds	r2, r7, #4
 8009a7e:	f107 0310 	add.w	r3, r7, #16
 8009a82:	4611      	mov	r1, r2
 8009a84:	4618      	mov	r0, r3
 8009a86:	f000 ff1b 	bl	800a8c0 <xTaskCheckForTimeOut>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d123      	bne.n	8009ad8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a92:	f000 f917 	bl	8009cc4 <prvIsQueueEmpty>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d017      	beq.n	8009acc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a9e:	3324      	adds	r3, #36	; 0x24
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	4611      	mov	r1, r2
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f000 fe41 	bl	800a72c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009aac:	f000 f8b8 	bl	8009c20 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ab0:	f000 fc70 	bl	800a394 <xTaskResumeAll>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d189      	bne.n	80099ce <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009aba:	4b10      	ldr	r3, [pc, #64]	; (8009afc <xQueueReceive+0x1bc>)
 8009abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ac0:	601a      	str	r2, [r3, #0]
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	e780      	b.n	80099ce <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009acc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ace:	f000 f8a7 	bl	8009c20 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ad2:	f000 fc5f 	bl	800a394 <xTaskResumeAll>
 8009ad6:	e77a      	b.n	80099ce <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ada:	f000 f8a1 	bl	8009c20 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ade:	f000 fc59 	bl	800a394 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ae2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ae4:	f000 f8ee 	bl	8009cc4 <prvIsQueueEmpty>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f43f af6f 	beq.w	80099ce <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009af0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3730      	adds	r7, #48	; 0x30
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	e000ed04 	.word	0xe000ed04

08009b00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b086      	sub	sp, #24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10d      	bne.n	8009b3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d14d      	bne.n	8009bc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f001 f83e 	bl	800abac <xTaskPriorityDisinherit>
 8009b30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2200      	movs	r2, #0
 8009b36:	609a      	str	r2, [r3, #8]
 8009b38:	e043      	b.n	8009bc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d119      	bne.n	8009b74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6858      	ldr	r0, [r3, #4]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b48:	461a      	mov	r2, r3
 8009b4a:	68b9      	ldr	r1, [r7, #8]
 8009b4c:	f002 fafe 	bl	800c14c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	685a      	ldr	r2, [r3, #4]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b58:	441a      	add	r2, r3
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	685a      	ldr	r2, [r3, #4]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	689b      	ldr	r3, [r3, #8]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d32b      	bcc.n	8009bc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	605a      	str	r2, [r3, #4]
 8009b72:	e026      	b.n	8009bc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	68d8      	ldr	r0, [r3, #12]
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	68b9      	ldr	r1, [r7, #8]
 8009b80:	f002 fae4 	bl	800c14c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	68da      	ldr	r2, [r3, #12]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b8c:	425b      	negs	r3, r3
 8009b8e:	441a      	add	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	68da      	ldr	r2, [r3, #12]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d207      	bcs.n	8009bb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	689a      	ldr	r2, [r3, #8]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba8:	425b      	negs	r3, r3
 8009baa:	441a      	add	r2, r3
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d105      	bne.n	8009bc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d002      	beq.n	8009bc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	1c5a      	adds	r2, r3, #1
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009bca:	697b      	ldr	r3, [r7, #20]
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3718      	adds	r7, #24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d018      	beq.n	8009c18 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68da      	ldr	r2, [r3, #12]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bee:	441a      	add	r2, r3
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	68da      	ldr	r2, [r3, #12]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	689b      	ldr	r3, [r3, #8]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d303      	bcc.n	8009c08 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	68d9      	ldr	r1, [r3, #12]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c10:	461a      	mov	r2, r3
 8009c12:	6838      	ldr	r0, [r7, #0]
 8009c14:	f002 fa9a 	bl	800c14c <memcpy>
	}
}
 8009c18:	bf00      	nop
 8009c1a:	3708      	adds	r7, #8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009c28:	f001 fcfc 	bl	800b624 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c32:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c34:	e011      	b.n	8009c5a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d012      	beq.n	8009c64 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	3324      	adds	r3, #36	; 0x24
 8009c42:	4618      	mov	r0, r3
 8009c44:	f000 fdc2 	bl	800a7cc <xTaskRemoveFromEventList>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009c4e:	f000 fe99 	bl	800a984 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009c52:	7bfb      	ldrb	r3, [r7, #15]
 8009c54:	3b01      	subs	r3, #1
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	dce9      	bgt.n	8009c36 <prvUnlockQueue+0x16>
 8009c62:	e000      	b.n	8009c66 <prvUnlockQueue+0x46>
					break;
 8009c64:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	22ff      	movs	r2, #255	; 0xff
 8009c6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009c6e:	f001 fd09 	bl	800b684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009c72:	f001 fcd7 	bl	800b624 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c7c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c7e:	e011      	b.n	8009ca4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	691b      	ldr	r3, [r3, #16]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d012      	beq.n	8009cae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	3310      	adds	r3, #16
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f000 fd9d 	bl	800a7cc <xTaskRemoveFromEventList>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d001      	beq.n	8009c9c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009c98:	f000 fe74 	bl	800a984 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c9c:	7bbb      	ldrb	r3, [r7, #14]
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ca4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	dce9      	bgt.n	8009c80 <prvUnlockQueue+0x60>
 8009cac:	e000      	b.n	8009cb0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009cae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	22ff      	movs	r2, #255	; 0xff
 8009cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009cb8:	f001 fce4 	bl	800b684 <vPortExitCritical>
}
 8009cbc:	bf00      	nop
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ccc:	f001 fcaa 	bl	800b624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d102      	bne.n	8009cde <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	60fb      	str	r3, [r7, #12]
 8009cdc:	e001      	b.n	8009ce2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ce2:	f001 fccf 	bl	800b684 <vPortExitCritical>

	return xReturn;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009cf8:	f001 fc94 	bl	800b624 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d102      	bne.n	8009d0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	60fb      	str	r3, [r7, #12]
 8009d0c:	e001      	b.n	8009d12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d12:	f001 fcb7 	bl	800b684 <vPortExitCritical>

	return xReturn;
 8009d16:	68fb      	ldr	r3, [r7, #12]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	60fb      	str	r3, [r7, #12]
 8009d2e:	e014      	b.n	8009d5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009d30:	4a0f      	ldr	r2, [pc, #60]	; (8009d70 <vQueueAddToRegistry+0x50>)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d10b      	bne.n	8009d54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009d3c:	490c      	ldr	r1, [pc, #48]	; (8009d70 <vQueueAddToRegistry+0x50>)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	683a      	ldr	r2, [r7, #0]
 8009d42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009d46:	4a0a      	ldr	r2, [pc, #40]	; (8009d70 <vQueueAddToRegistry+0x50>)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	00db      	lsls	r3, r3, #3
 8009d4c:	4413      	add	r3, r2
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009d52:	e006      	b.n	8009d62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	3301      	adds	r3, #1
 8009d58:	60fb      	str	r3, [r7, #12]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2b07      	cmp	r3, #7
 8009d5e:	d9e7      	bls.n	8009d30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009d60:	bf00      	nop
 8009d62:	bf00      	nop
 8009d64:	3714      	adds	r7, #20
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
 8009d6e:	bf00      	nop
 8009d70:	2000506c 	.word	0x2000506c

08009d74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b086      	sub	sp, #24
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009d84:	f001 fc4e 	bl	800b624 <vPortEnterCritical>
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d8e:	b25b      	sxtb	r3, r3
 8009d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d94:	d103      	bne.n	8009d9e <vQueueWaitForMessageRestricted+0x2a>
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009da4:	b25b      	sxtb	r3, r3
 8009da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009daa:	d103      	bne.n	8009db4 <vQueueWaitForMessageRestricted+0x40>
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009db4:	f001 fc66 	bl	800b684 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d106      	bne.n	8009dce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	3324      	adds	r3, #36	; 0x24
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	68b9      	ldr	r1, [r7, #8]
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f000 fcd3 	bl	800a774 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009dce:	6978      	ldr	r0, [r7, #20]
 8009dd0:	f7ff ff26 	bl	8009c20 <prvUnlockQueue>
	}
 8009dd4:	bf00      	nop
 8009dd6:	3718      	adds	r7, #24
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b08e      	sub	sp, #56	; 0x38
 8009de0:	af04      	add	r7, sp, #16
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
 8009de8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10a      	bne.n	8009e06 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df4:	f383 8811 	msr	BASEPRI, r3
 8009df8:	f3bf 8f6f 	isb	sy
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	623b      	str	r3, [r7, #32]
}
 8009e02:	bf00      	nop
 8009e04:	e7fe      	b.n	8009e04 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d10a      	bne.n	8009e22 <xTaskCreateStatic+0x46>
	__asm volatile
 8009e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e10:	f383 8811 	msr	BASEPRI, r3
 8009e14:	f3bf 8f6f 	isb	sy
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	61fb      	str	r3, [r7, #28]
}
 8009e1e:	bf00      	nop
 8009e20:	e7fe      	b.n	8009e20 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009e22:	23bc      	movs	r3, #188	; 0xbc
 8009e24:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	2bbc      	cmp	r3, #188	; 0xbc
 8009e2a:	d00a      	beq.n	8009e42 <xTaskCreateStatic+0x66>
	__asm volatile
 8009e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e30:	f383 8811 	msr	BASEPRI, r3
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	61bb      	str	r3, [r7, #24]
}
 8009e3e:	bf00      	nop
 8009e40:	e7fe      	b.n	8009e40 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009e42:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d01e      	beq.n	8009e88 <xTaskCreateStatic+0xac>
 8009e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d01b      	beq.n	8009e88 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e52:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e58:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5c:	2202      	movs	r2, #2
 8009e5e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009e62:	2300      	movs	r3, #0
 8009e64:	9303      	str	r3, [sp, #12]
 8009e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e68:	9302      	str	r3, [sp, #8]
 8009e6a:	f107 0314 	add.w	r3, r7, #20
 8009e6e:	9301      	str	r3, [sp, #4]
 8009e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e72:	9300      	str	r3, [sp, #0]
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	68b9      	ldr	r1, [r7, #8]
 8009e7a:	68f8      	ldr	r0, [r7, #12]
 8009e7c:	f000 f850 	bl	8009f20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e82:	f000 f8f3 	bl	800a06c <prvAddNewTaskToReadyList>
 8009e86:	e001      	b.n	8009e8c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009e8c:	697b      	ldr	r3, [r7, #20]
	}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3728      	adds	r7, #40	; 0x28
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b08c      	sub	sp, #48	; 0x30
 8009e9a:	af04      	add	r7, sp, #16
 8009e9c:	60f8      	str	r0, [r7, #12]
 8009e9e:	60b9      	str	r1, [r7, #8]
 8009ea0:	603b      	str	r3, [r7, #0]
 8009ea2:	4613      	mov	r3, r2
 8009ea4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009ea6:	88fb      	ldrh	r3, [r7, #6]
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f001 fcdc 	bl	800b868 <pvPortMalloc>
 8009eb0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d00e      	beq.n	8009ed6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009eb8:	20bc      	movs	r0, #188	; 0xbc
 8009eba:	f001 fcd5 	bl	800b868 <pvPortMalloc>
 8009ebe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d003      	beq.n	8009ece <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	697a      	ldr	r2, [r7, #20]
 8009eca:	631a      	str	r2, [r3, #48]	; 0x30
 8009ecc:	e005      	b.n	8009eda <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ece:	6978      	ldr	r0, [r7, #20]
 8009ed0:	f001 fd96 	bl	800ba00 <vPortFree>
 8009ed4:	e001      	b.n	8009eda <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009eda:	69fb      	ldr	r3, [r7, #28]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d017      	beq.n	8009f10 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009ee8:	88fa      	ldrh	r2, [r7, #6]
 8009eea:	2300      	movs	r3, #0
 8009eec:	9303      	str	r3, [sp, #12]
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	9302      	str	r3, [sp, #8]
 8009ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef4:	9301      	str	r3, [sp, #4]
 8009ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef8:	9300      	str	r3, [sp, #0]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	68b9      	ldr	r1, [r7, #8]
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f000 f80e 	bl	8009f20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f04:	69f8      	ldr	r0, [r7, #28]
 8009f06:	f000 f8b1 	bl	800a06c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	61bb      	str	r3, [r7, #24]
 8009f0e:	e002      	b.n	8009f16 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009f10:	f04f 33ff 	mov.w	r3, #4294967295
 8009f14:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009f16:	69bb      	ldr	r3, [r7, #24]
	}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3720      	adds	r7, #32
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b088      	sub	sp, #32
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
 8009f2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f30:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	461a      	mov	r2, r3
 8009f38:	21a5      	movs	r1, #165	; 0xa5
 8009f3a:	f002 f92f 	bl	800c19c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	009b      	lsls	r3, r3, #2
 8009f4c:	4413      	add	r3, r2
 8009f4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	f023 0307 	bic.w	r3, r3, #7
 8009f56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	f003 0307 	and.w	r3, r3, #7
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d00a      	beq.n	8009f78 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	617b      	str	r3, [r7, #20]
}
 8009f74:	bf00      	nop
 8009f76:	e7fe      	b.n	8009f76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d01f      	beq.n	8009fbe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009f7e:	2300      	movs	r3, #0
 8009f80:	61fb      	str	r3, [r7, #28]
 8009f82:	e012      	b.n	8009faa <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009f84:	68ba      	ldr	r2, [r7, #8]
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	4413      	add	r3, r2
 8009f8a:	7819      	ldrb	r1, [r3, #0]
 8009f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f8e:	69fb      	ldr	r3, [r7, #28]
 8009f90:	4413      	add	r3, r2
 8009f92:	3334      	adds	r3, #52	; 0x34
 8009f94:	460a      	mov	r2, r1
 8009f96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009f98:	68ba      	ldr	r2, [r7, #8]
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d006      	beq.n	8009fb2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	61fb      	str	r3, [r7, #28]
 8009faa:	69fb      	ldr	r3, [r7, #28]
 8009fac:	2b0f      	cmp	r3, #15
 8009fae:	d9e9      	bls.n	8009f84 <prvInitialiseNewTask+0x64>
 8009fb0:	e000      	b.n	8009fb4 <prvInitialiseNewTask+0x94>
			{
				break;
 8009fb2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009fbc:	e003      	b.n	8009fc6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc8:	2b37      	cmp	r3, #55	; 0x37
 8009fca:	d901      	bls.n	8009fd0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009fcc:	2337      	movs	r3, #55	; 0x37
 8009fce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fd4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fda:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fde:	2200      	movs	r2, #0
 8009fe0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe4:	3304      	adds	r3, #4
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7ff f978 	bl	80092dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fee:	3318      	adds	r3, #24
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7ff f973 	bl	80092dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ffa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ffe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a004:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a00a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00e:	2200      	movs	r2, #0
 800a010:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a016:	2200      	movs	r2, #0
 800a018:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01e:	3354      	adds	r3, #84	; 0x54
 800a020:	2260      	movs	r2, #96	; 0x60
 800a022:	2100      	movs	r1, #0
 800a024:	4618      	mov	r0, r3
 800a026:	f002 f8b9 	bl	800c19c <memset>
 800a02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02c:	4a0c      	ldr	r2, [pc, #48]	; (800a060 <prvInitialiseNewTask+0x140>)
 800a02e:	659a      	str	r2, [r3, #88]	; 0x58
 800a030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a032:	4a0c      	ldr	r2, [pc, #48]	; (800a064 <prvInitialiseNewTask+0x144>)
 800a034:	65da      	str	r2, [r3, #92]	; 0x5c
 800a036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a038:	4a0b      	ldr	r2, [pc, #44]	; (800a068 <prvInitialiseNewTask+0x148>)
 800a03a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a03c:	683a      	ldr	r2, [r7, #0]
 800a03e:	68f9      	ldr	r1, [r7, #12]
 800a040:	69b8      	ldr	r0, [r7, #24]
 800a042:	f001 f9c3 	bl	800b3cc <pxPortInitialiseStack>
 800a046:	4602      	mov	r2, r0
 800a048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d002      	beq.n	800a058 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a056:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a058:	bf00      	nop
 800a05a:	3720      	adds	r7, #32
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	080114b8 	.word	0x080114b8
 800a064:	080114d8 	.word	0x080114d8
 800a068:	08011498 	.word	0x08011498

0800a06c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b082      	sub	sp, #8
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a074:	f001 fad6 	bl	800b624 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a078:	4b2d      	ldr	r3, [pc, #180]	; (800a130 <prvAddNewTaskToReadyList+0xc4>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	3301      	adds	r3, #1
 800a07e:	4a2c      	ldr	r2, [pc, #176]	; (800a130 <prvAddNewTaskToReadyList+0xc4>)
 800a080:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a082:	4b2c      	ldr	r3, [pc, #176]	; (800a134 <prvAddNewTaskToReadyList+0xc8>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d109      	bne.n	800a09e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a08a:	4a2a      	ldr	r2, [pc, #168]	; (800a134 <prvAddNewTaskToReadyList+0xc8>)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a090:	4b27      	ldr	r3, [pc, #156]	; (800a130 <prvAddNewTaskToReadyList+0xc4>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2b01      	cmp	r3, #1
 800a096:	d110      	bne.n	800a0ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a098:	f000 fc98 	bl	800a9cc <prvInitialiseTaskLists>
 800a09c:	e00d      	b.n	800a0ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a09e:	4b26      	ldr	r3, [pc, #152]	; (800a138 <prvAddNewTaskToReadyList+0xcc>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d109      	bne.n	800a0ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a0a6:	4b23      	ldr	r3, [pc, #140]	; (800a134 <prvAddNewTaskToReadyList+0xc8>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d802      	bhi.n	800a0ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a0b4:	4a1f      	ldr	r2, [pc, #124]	; (800a134 <prvAddNewTaskToReadyList+0xc8>)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a0ba:	4b20      	ldr	r3, [pc, #128]	; (800a13c <prvAddNewTaskToReadyList+0xd0>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	3301      	adds	r3, #1
 800a0c0:	4a1e      	ldr	r2, [pc, #120]	; (800a13c <prvAddNewTaskToReadyList+0xd0>)
 800a0c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a0c4:	4b1d      	ldr	r3, [pc, #116]	; (800a13c <prvAddNewTaskToReadyList+0xd0>)
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d0:	4b1b      	ldr	r3, [pc, #108]	; (800a140 <prvAddNewTaskToReadyList+0xd4>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d903      	bls.n	800a0e0 <prvAddNewTaskToReadyList+0x74>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0dc:	4a18      	ldr	r2, [pc, #96]	; (800a140 <prvAddNewTaskToReadyList+0xd4>)
 800a0de:	6013      	str	r3, [r2, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	4413      	add	r3, r2
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	4a15      	ldr	r2, [pc, #84]	; (800a144 <prvAddNewTaskToReadyList+0xd8>)
 800a0ee:	441a      	add	r2, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	3304      	adds	r3, #4
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	f7ff f8fd 	bl	80092f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a0fc:	f001 fac2 	bl	800b684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a100:	4b0d      	ldr	r3, [pc, #52]	; (800a138 <prvAddNewTaskToReadyList+0xcc>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d00e      	beq.n	800a126 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a108:	4b0a      	ldr	r3, [pc, #40]	; (800a134 <prvAddNewTaskToReadyList+0xc8>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a112:	429a      	cmp	r2, r3
 800a114:	d207      	bcs.n	800a126 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a116:	4b0c      	ldr	r3, [pc, #48]	; (800a148 <prvAddNewTaskToReadyList+0xdc>)
 800a118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a11c:	601a      	str	r2, [r3, #0]
 800a11e:	f3bf 8f4f 	dsb	sy
 800a122:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a126:	bf00      	nop
 800a128:	3708      	adds	r7, #8
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	2000112c 	.word	0x2000112c
 800a134:	20000c58 	.word	0x20000c58
 800a138:	20001138 	.word	0x20001138
 800a13c:	20001148 	.word	0x20001148
 800a140:	20001134 	.word	0x20001134
 800a144:	20000c5c 	.word	0x20000c5c
 800a148:	e000ed04 	.word	0xe000ed04

0800a14c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b084      	sub	sp, #16
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a154:	f001 fa66 	bl	800b624 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d102      	bne.n	800a164 <vTaskDelete+0x18>
 800a15e:	4b2c      	ldr	r3, [pc, #176]	; (800a210 <vTaskDelete+0xc4>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	e000      	b.n	800a166 <vTaskDelete+0x1a>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	3304      	adds	r3, #4
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7ff f91f 	bl	80093b0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a176:	2b00      	cmp	r3, #0
 800a178:	d004      	beq.n	800a184 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	3318      	adds	r3, #24
 800a17e:	4618      	mov	r0, r3
 800a180:	f7ff f916 	bl	80093b0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800a184:	4b23      	ldr	r3, [pc, #140]	; (800a214 <vTaskDelete+0xc8>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	3301      	adds	r3, #1
 800a18a:	4a22      	ldr	r2, [pc, #136]	; (800a214 <vTaskDelete+0xc8>)
 800a18c:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800a18e:	4b20      	ldr	r3, [pc, #128]	; (800a210 <vTaskDelete+0xc4>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	429a      	cmp	r2, r3
 800a196:	d10b      	bne.n	800a1b0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	3304      	adds	r3, #4
 800a19c:	4619      	mov	r1, r3
 800a19e:	481e      	ldr	r0, [pc, #120]	; (800a218 <vTaskDelete+0xcc>)
 800a1a0:	f7ff f8a9 	bl	80092f6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800a1a4:	4b1d      	ldr	r3, [pc, #116]	; (800a21c <vTaskDelete+0xd0>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	4a1c      	ldr	r2, [pc, #112]	; (800a21c <vTaskDelete+0xd0>)
 800a1ac:	6013      	str	r3, [r2, #0]
 800a1ae:	e009      	b.n	800a1c4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800a1b0:	4b1b      	ldr	r3, [pc, #108]	; (800a220 <vTaskDelete+0xd4>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	4a1a      	ldr	r2, [pc, #104]	; (800a220 <vTaskDelete+0xd4>)
 800a1b8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f000 fc74 	bl	800aaa8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800a1c0:	f000 fca6 	bl	800ab10 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800a1c4:	f001 fa5e 	bl	800b684 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800a1c8:	4b16      	ldr	r3, [pc, #88]	; (800a224 <vTaskDelete+0xd8>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d01b      	beq.n	800a208 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 800a1d0:	4b0f      	ldr	r3, [pc, #60]	; (800a210 <vTaskDelete+0xc4>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	429a      	cmp	r2, r3
 800a1d8:	d116      	bne.n	800a208 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800a1da:	4b13      	ldr	r3, [pc, #76]	; (800a228 <vTaskDelete+0xdc>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00a      	beq.n	800a1f8 <vTaskDelete+0xac>
	__asm volatile
 800a1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	60bb      	str	r3, [r7, #8]
}
 800a1f4:	bf00      	nop
 800a1f6:	e7fe      	b.n	800a1f6 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800a1f8:	4b0c      	ldr	r3, [pc, #48]	; (800a22c <vTaskDelete+0xe0>)
 800a1fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	f3bf 8f4f 	dsb	sy
 800a204:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a208:	bf00      	nop
 800a20a:	3710      	adds	r7, #16
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}
 800a210:	20000c58 	.word	0x20000c58
 800a214:	20001148 	.word	0x20001148
 800a218:	20001100 	.word	0x20001100
 800a21c:	20001114 	.word	0x20001114
 800a220:	2000112c 	.word	0x2000112c
 800a224:	20001138 	.word	0x20001138
 800a228:	20001154 	.word	0x20001154
 800a22c:	e000ed04 	.word	0xe000ed04

0800a230 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a238:	2300      	movs	r3, #0
 800a23a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d017      	beq.n	800a272 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a242:	4b13      	ldr	r3, [pc, #76]	; (800a290 <vTaskDelay+0x60>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d00a      	beq.n	800a260 <vTaskDelay+0x30>
	__asm volatile
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	60bb      	str	r3, [r7, #8]
}
 800a25c:	bf00      	nop
 800a25e:	e7fe      	b.n	800a25e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a260:	f000 f88a 	bl	800a378 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a264:	2100      	movs	r1, #0
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f000 fd0e 	bl	800ac88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a26c:	f000 f892 	bl	800a394 <xTaskResumeAll>
 800a270:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d107      	bne.n	800a288 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a278:	4b06      	ldr	r3, [pc, #24]	; (800a294 <vTaskDelay+0x64>)
 800a27a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a288:	bf00      	nop
 800a28a:	3710      	adds	r7, #16
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	20001154 	.word	0x20001154
 800a294:	e000ed04 	.word	0xe000ed04

0800a298 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b08a      	sub	sp, #40	; 0x28
 800a29c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a2a6:	463a      	mov	r2, r7
 800a2a8:	1d39      	adds	r1, r7, #4
 800a2aa:	f107 0308 	add.w	r3, r7, #8
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7fe ffc0 	bl	8009234 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a2b4:	6839      	ldr	r1, [r7, #0]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	68ba      	ldr	r2, [r7, #8]
 800a2ba:	9202      	str	r2, [sp, #8]
 800a2bc:	9301      	str	r3, [sp, #4]
 800a2be:	2300      	movs	r3, #0
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	460a      	mov	r2, r1
 800a2c6:	4924      	ldr	r1, [pc, #144]	; (800a358 <vTaskStartScheduler+0xc0>)
 800a2c8:	4824      	ldr	r0, [pc, #144]	; (800a35c <vTaskStartScheduler+0xc4>)
 800a2ca:	f7ff fd87 	bl	8009ddc <xTaskCreateStatic>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	4a23      	ldr	r2, [pc, #140]	; (800a360 <vTaskStartScheduler+0xc8>)
 800a2d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a2d4:	4b22      	ldr	r3, [pc, #136]	; (800a360 <vTaskStartScheduler+0xc8>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d002      	beq.n	800a2e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	617b      	str	r3, [r7, #20]
 800a2e0:	e001      	b.n	800a2e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d102      	bne.n	800a2f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a2ec:	f000 fd20 	bl	800ad30 <xTimerCreateTimerTask>
 800a2f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d11b      	bne.n	800a330 <vTaskStartScheduler+0x98>
	__asm volatile
 800a2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fc:	f383 8811 	msr	BASEPRI, r3
 800a300:	f3bf 8f6f 	isb	sy
 800a304:	f3bf 8f4f 	dsb	sy
 800a308:	613b      	str	r3, [r7, #16]
}
 800a30a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a30c:	4b15      	ldr	r3, [pc, #84]	; (800a364 <vTaskStartScheduler+0xcc>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3354      	adds	r3, #84	; 0x54
 800a312:	4a15      	ldr	r2, [pc, #84]	; (800a368 <vTaskStartScheduler+0xd0>)
 800a314:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a316:	4b15      	ldr	r3, [pc, #84]	; (800a36c <vTaskStartScheduler+0xd4>)
 800a318:	f04f 32ff 	mov.w	r2, #4294967295
 800a31c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a31e:	4b14      	ldr	r3, [pc, #80]	; (800a370 <vTaskStartScheduler+0xd8>)
 800a320:	2201      	movs	r2, #1
 800a322:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a324:	4b13      	ldr	r3, [pc, #76]	; (800a374 <vTaskStartScheduler+0xdc>)
 800a326:	2200      	movs	r2, #0
 800a328:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a32a:	f001 f8d9 	bl	800b4e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a32e:	e00e      	b.n	800a34e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a336:	d10a      	bne.n	800a34e <vTaskStartScheduler+0xb6>
	__asm volatile
 800a338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33c:	f383 8811 	msr	BASEPRI, r3
 800a340:	f3bf 8f6f 	isb	sy
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	60fb      	str	r3, [r7, #12]
}
 800a34a:	bf00      	nop
 800a34c:	e7fe      	b.n	800a34c <vTaskStartScheduler+0xb4>
}
 800a34e:	bf00      	nop
 800a350:	3718      	adds	r7, #24
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	0801134c 	.word	0x0801134c
 800a35c:	0800a99d 	.word	0x0800a99d
 800a360:	20001150 	.word	0x20001150
 800a364:	20000c58 	.word	0x20000c58
 800a368:	20000020 	.word	0x20000020
 800a36c:	2000114c 	.word	0x2000114c
 800a370:	20001138 	.word	0x20001138
 800a374:	20001130 	.word	0x20001130

0800a378 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a378:	b480      	push	{r7}
 800a37a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a37c:	4b04      	ldr	r3, [pc, #16]	; (800a390 <vTaskSuspendAll+0x18>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	3301      	adds	r3, #1
 800a382:	4a03      	ldr	r2, [pc, #12]	; (800a390 <vTaskSuspendAll+0x18>)
 800a384:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a386:	bf00      	nop
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr
 800a390:	20001154 	.word	0x20001154

0800a394 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a39a:	2300      	movs	r3, #0
 800a39c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a3a2:	4b42      	ldr	r3, [pc, #264]	; (800a4ac <xTaskResumeAll+0x118>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d10a      	bne.n	800a3c0 <xTaskResumeAll+0x2c>
	__asm volatile
 800a3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ae:	f383 8811 	msr	BASEPRI, r3
 800a3b2:	f3bf 8f6f 	isb	sy
 800a3b6:	f3bf 8f4f 	dsb	sy
 800a3ba:	603b      	str	r3, [r7, #0]
}
 800a3bc:	bf00      	nop
 800a3be:	e7fe      	b.n	800a3be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a3c0:	f001 f930 	bl	800b624 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a3c4:	4b39      	ldr	r3, [pc, #228]	; (800a4ac <xTaskResumeAll+0x118>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	4a38      	ldr	r2, [pc, #224]	; (800a4ac <xTaskResumeAll+0x118>)
 800a3cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3ce:	4b37      	ldr	r3, [pc, #220]	; (800a4ac <xTaskResumeAll+0x118>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d162      	bne.n	800a49c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a3d6:	4b36      	ldr	r3, [pc, #216]	; (800a4b0 <xTaskResumeAll+0x11c>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d05e      	beq.n	800a49c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3de:	e02f      	b.n	800a440 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3e0:	4b34      	ldr	r3, [pc, #208]	; (800a4b4 <xTaskResumeAll+0x120>)
 800a3e2:	68db      	ldr	r3, [r3, #12]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	3318      	adds	r3, #24
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7fe ffdf 	bl	80093b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	3304      	adds	r3, #4
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fe ffda 	bl	80093b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a400:	4b2d      	ldr	r3, [pc, #180]	; (800a4b8 <xTaskResumeAll+0x124>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	429a      	cmp	r2, r3
 800a406:	d903      	bls.n	800a410 <xTaskResumeAll+0x7c>
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40c:	4a2a      	ldr	r2, [pc, #168]	; (800a4b8 <xTaskResumeAll+0x124>)
 800a40e:	6013      	str	r3, [r2, #0]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a414:	4613      	mov	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	4413      	add	r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	4a27      	ldr	r2, [pc, #156]	; (800a4bc <xTaskResumeAll+0x128>)
 800a41e:	441a      	add	r2, r3
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	3304      	adds	r3, #4
 800a424:	4619      	mov	r1, r3
 800a426:	4610      	mov	r0, r2
 800a428:	f7fe ff65 	bl	80092f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a430:	4b23      	ldr	r3, [pc, #140]	; (800a4c0 <xTaskResumeAll+0x12c>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a436:	429a      	cmp	r2, r3
 800a438:	d302      	bcc.n	800a440 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a43a:	4b22      	ldr	r3, [pc, #136]	; (800a4c4 <xTaskResumeAll+0x130>)
 800a43c:	2201      	movs	r2, #1
 800a43e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a440:	4b1c      	ldr	r3, [pc, #112]	; (800a4b4 <xTaskResumeAll+0x120>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d1cb      	bne.n	800a3e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d001      	beq.n	800a452 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a44e:	f000 fb5f 	bl	800ab10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a452:	4b1d      	ldr	r3, [pc, #116]	; (800a4c8 <xTaskResumeAll+0x134>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d010      	beq.n	800a480 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a45e:	f000 f847 	bl	800a4f0 <xTaskIncrementTick>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a468:	4b16      	ldr	r3, [pc, #88]	; (800a4c4 <xTaskResumeAll+0x130>)
 800a46a:	2201      	movs	r2, #1
 800a46c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	3b01      	subs	r3, #1
 800a472:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1f1      	bne.n	800a45e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a47a:	4b13      	ldr	r3, [pc, #76]	; (800a4c8 <xTaskResumeAll+0x134>)
 800a47c:	2200      	movs	r2, #0
 800a47e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a480:	4b10      	ldr	r3, [pc, #64]	; (800a4c4 <xTaskResumeAll+0x130>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d009      	beq.n	800a49c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a488:	2301      	movs	r3, #1
 800a48a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a48c:	4b0f      	ldr	r3, [pc, #60]	; (800a4cc <xTaskResumeAll+0x138>)
 800a48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	f3bf 8f4f 	dsb	sy
 800a498:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a49c:	f001 f8f2 	bl	800b684 <vPortExitCritical>

	return xAlreadyYielded;
 800a4a0:	68bb      	ldr	r3, [r7, #8]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	20001154 	.word	0x20001154
 800a4b0:	2000112c 	.word	0x2000112c
 800a4b4:	200010ec 	.word	0x200010ec
 800a4b8:	20001134 	.word	0x20001134
 800a4bc:	20000c5c 	.word	0x20000c5c
 800a4c0:	20000c58 	.word	0x20000c58
 800a4c4:	20001140 	.word	0x20001140
 800a4c8:	2000113c 	.word	0x2000113c
 800a4cc:	e000ed04 	.word	0xe000ed04

0800a4d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b083      	sub	sp, #12
 800a4d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a4d6:	4b05      	ldr	r3, [pc, #20]	; (800a4ec <xTaskGetTickCount+0x1c>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a4dc:	687b      	ldr	r3, [r7, #4]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop
 800a4ec:	20001130 	.word	0x20001130

0800a4f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4fa:	4b4f      	ldr	r3, [pc, #316]	; (800a638 <xTaskIncrementTick+0x148>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f040 808f 	bne.w	800a622 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a504:	4b4d      	ldr	r3, [pc, #308]	; (800a63c <xTaskIncrementTick+0x14c>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	3301      	adds	r3, #1
 800a50a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a50c:	4a4b      	ldr	r2, [pc, #300]	; (800a63c <xTaskIncrementTick+0x14c>)
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d120      	bne.n	800a55a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a518:	4b49      	ldr	r3, [pc, #292]	; (800a640 <xTaskIncrementTick+0x150>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00a      	beq.n	800a538 <xTaskIncrementTick+0x48>
	__asm volatile
 800a522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a526:	f383 8811 	msr	BASEPRI, r3
 800a52a:	f3bf 8f6f 	isb	sy
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	603b      	str	r3, [r7, #0]
}
 800a534:	bf00      	nop
 800a536:	e7fe      	b.n	800a536 <xTaskIncrementTick+0x46>
 800a538:	4b41      	ldr	r3, [pc, #260]	; (800a640 <xTaskIncrementTick+0x150>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	60fb      	str	r3, [r7, #12]
 800a53e:	4b41      	ldr	r3, [pc, #260]	; (800a644 <xTaskIncrementTick+0x154>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4a3f      	ldr	r2, [pc, #252]	; (800a640 <xTaskIncrementTick+0x150>)
 800a544:	6013      	str	r3, [r2, #0]
 800a546:	4a3f      	ldr	r2, [pc, #252]	; (800a644 <xTaskIncrementTick+0x154>)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6013      	str	r3, [r2, #0]
 800a54c:	4b3e      	ldr	r3, [pc, #248]	; (800a648 <xTaskIncrementTick+0x158>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	3301      	adds	r3, #1
 800a552:	4a3d      	ldr	r2, [pc, #244]	; (800a648 <xTaskIncrementTick+0x158>)
 800a554:	6013      	str	r3, [r2, #0]
 800a556:	f000 fadb 	bl	800ab10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a55a:	4b3c      	ldr	r3, [pc, #240]	; (800a64c <xTaskIncrementTick+0x15c>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	693a      	ldr	r2, [r7, #16]
 800a560:	429a      	cmp	r2, r3
 800a562:	d349      	bcc.n	800a5f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a564:	4b36      	ldr	r3, [pc, #216]	; (800a640 <xTaskIncrementTick+0x150>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d104      	bne.n	800a578 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a56e:	4b37      	ldr	r3, [pc, #220]	; (800a64c <xTaskIncrementTick+0x15c>)
 800a570:	f04f 32ff 	mov.w	r2, #4294967295
 800a574:	601a      	str	r2, [r3, #0]
					break;
 800a576:	e03f      	b.n	800a5f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a578:	4b31      	ldr	r3, [pc, #196]	; (800a640 <xTaskIncrementTick+0x150>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d203      	bcs.n	800a598 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a590:	4a2e      	ldr	r2, [pc, #184]	; (800a64c <xTaskIncrementTick+0x15c>)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a596:	e02f      	b.n	800a5f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	3304      	adds	r3, #4
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7fe ff07 	bl	80093b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d004      	beq.n	800a5b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	3318      	adds	r3, #24
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fe fefe 	bl	80093b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5b8:	4b25      	ldr	r3, [pc, #148]	; (800a650 <xTaskIncrementTick+0x160>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d903      	bls.n	800a5c8 <xTaskIncrementTick+0xd8>
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c4:	4a22      	ldr	r2, [pc, #136]	; (800a650 <xTaskIncrementTick+0x160>)
 800a5c6:	6013      	str	r3, [r2, #0]
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	4413      	add	r3, r2
 800a5d2:	009b      	lsls	r3, r3, #2
 800a5d4:	4a1f      	ldr	r2, [pc, #124]	; (800a654 <xTaskIncrementTick+0x164>)
 800a5d6:	441a      	add	r2, r3
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	3304      	adds	r3, #4
 800a5dc:	4619      	mov	r1, r3
 800a5de:	4610      	mov	r0, r2
 800a5e0:	f7fe fe89 	bl	80092f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e8:	4b1b      	ldr	r3, [pc, #108]	; (800a658 <xTaskIncrementTick+0x168>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d3b8      	bcc.n	800a564 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5f6:	e7b5      	b.n	800a564 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a5f8:	4b17      	ldr	r3, [pc, #92]	; (800a658 <xTaskIncrementTick+0x168>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5fe:	4915      	ldr	r1, [pc, #84]	; (800a654 <xTaskIncrementTick+0x164>)
 800a600:	4613      	mov	r3, r2
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	4413      	add	r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	440b      	add	r3, r1
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	2b01      	cmp	r3, #1
 800a60e:	d901      	bls.n	800a614 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a610:	2301      	movs	r3, #1
 800a612:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a614:	4b11      	ldr	r3, [pc, #68]	; (800a65c <xTaskIncrementTick+0x16c>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d007      	beq.n	800a62c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a61c:	2301      	movs	r3, #1
 800a61e:	617b      	str	r3, [r7, #20]
 800a620:	e004      	b.n	800a62c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a622:	4b0f      	ldr	r3, [pc, #60]	; (800a660 <xTaskIncrementTick+0x170>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	3301      	adds	r3, #1
 800a628:	4a0d      	ldr	r2, [pc, #52]	; (800a660 <xTaskIncrementTick+0x170>)
 800a62a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a62c:	697b      	ldr	r3, [r7, #20]
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3718      	adds	r7, #24
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	20001154 	.word	0x20001154
 800a63c:	20001130 	.word	0x20001130
 800a640:	200010e4 	.word	0x200010e4
 800a644:	200010e8 	.word	0x200010e8
 800a648:	20001144 	.word	0x20001144
 800a64c:	2000114c 	.word	0x2000114c
 800a650:	20001134 	.word	0x20001134
 800a654:	20000c5c 	.word	0x20000c5c
 800a658:	20000c58 	.word	0x20000c58
 800a65c:	20001140 	.word	0x20001140
 800a660:	2000113c 	.word	0x2000113c

0800a664 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a664:	b480      	push	{r7}
 800a666:	b085      	sub	sp, #20
 800a668:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a66a:	4b2a      	ldr	r3, [pc, #168]	; (800a714 <vTaskSwitchContext+0xb0>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d003      	beq.n	800a67a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a672:	4b29      	ldr	r3, [pc, #164]	; (800a718 <vTaskSwitchContext+0xb4>)
 800a674:	2201      	movs	r2, #1
 800a676:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a678:	e046      	b.n	800a708 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a67a:	4b27      	ldr	r3, [pc, #156]	; (800a718 <vTaskSwitchContext+0xb4>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a680:	4b26      	ldr	r3, [pc, #152]	; (800a71c <vTaskSwitchContext+0xb8>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	60fb      	str	r3, [r7, #12]
 800a686:	e010      	b.n	800a6aa <vTaskSwitchContext+0x46>
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d10a      	bne.n	800a6a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800a68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a692:	f383 8811 	msr	BASEPRI, r3
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	607b      	str	r3, [r7, #4]
}
 800a6a0:	bf00      	nop
 800a6a2:	e7fe      	b.n	800a6a2 <vTaskSwitchContext+0x3e>
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	60fb      	str	r3, [r7, #12]
 800a6aa:	491d      	ldr	r1, [pc, #116]	; (800a720 <vTaskSwitchContext+0xbc>)
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	4613      	mov	r3, r2
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	4413      	add	r3, r2
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	440b      	add	r3, r1
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d0e4      	beq.n	800a688 <vTaskSwitchContext+0x24>
 800a6be:	68fa      	ldr	r2, [r7, #12]
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	4413      	add	r3, r2
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	4a15      	ldr	r2, [pc, #84]	; (800a720 <vTaskSwitchContext+0xbc>)
 800a6ca:	4413      	add	r3, r2
 800a6cc:	60bb      	str	r3, [r7, #8]
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	605a      	str	r2, [r3, #4]
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	685a      	ldr	r2, [r3, #4]
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	3308      	adds	r3, #8
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d104      	bne.n	800a6ee <vTaskSwitchContext+0x8a>
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	685a      	ldr	r2, [r3, #4]
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	605a      	str	r2, [r3, #4]
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	4a0b      	ldr	r2, [pc, #44]	; (800a724 <vTaskSwitchContext+0xc0>)
 800a6f6:	6013      	str	r3, [r2, #0]
 800a6f8:	4a08      	ldr	r2, [pc, #32]	; (800a71c <vTaskSwitchContext+0xb8>)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a6fe:	4b09      	ldr	r3, [pc, #36]	; (800a724 <vTaskSwitchContext+0xc0>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	3354      	adds	r3, #84	; 0x54
 800a704:	4a08      	ldr	r2, [pc, #32]	; (800a728 <vTaskSwitchContext+0xc4>)
 800a706:	6013      	str	r3, [r2, #0]
}
 800a708:	bf00      	nop
 800a70a:	3714      	adds	r7, #20
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr
 800a714:	20001154 	.word	0x20001154
 800a718:	20001140 	.word	0x20001140
 800a71c:	20001134 	.word	0x20001134
 800a720:	20000c5c 	.word	0x20000c5c
 800a724:	20000c58 	.word	0x20000c58
 800a728:	20000020 	.word	0x20000020

0800a72c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d10a      	bne.n	800a752 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a740:	f383 8811 	msr	BASEPRI, r3
 800a744:	f3bf 8f6f 	isb	sy
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	60fb      	str	r3, [r7, #12]
}
 800a74e:	bf00      	nop
 800a750:	e7fe      	b.n	800a750 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a752:	4b07      	ldr	r3, [pc, #28]	; (800a770 <vTaskPlaceOnEventList+0x44>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	3318      	adds	r3, #24
 800a758:	4619      	mov	r1, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f7fe fdef 	bl	800933e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a760:	2101      	movs	r1, #1
 800a762:	6838      	ldr	r0, [r7, #0]
 800a764:	f000 fa90 	bl	800ac88 <prvAddCurrentTaskToDelayedList>
}
 800a768:	bf00      	nop
 800a76a:	3710      	adds	r7, #16
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	20000c58 	.word	0x20000c58

0800a774 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d10a      	bne.n	800a79c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78a:	f383 8811 	msr	BASEPRI, r3
 800a78e:	f3bf 8f6f 	isb	sy
 800a792:	f3bf 8f4f 	dsb	sy
 800a796:	617b      	str	r3, [r7, #20]
}
 800a798:	bf00      	nop
 800a79a:	e7fe      	b.n	800a79a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a79c:	4b0a      	ldr	r3, [pc, #40]	; (800a7c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	3318      	adds	r3, #24
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f7fe fda6 	bl	80092f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d002      	beq.n	800a7b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a7b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a7b6:	6879      	ldr	r1, [r7, #4]
 800a7b8:	68b8      	ldr	r0, [r7, #8]
 800a7ba:	f000 fa65 	bl	800ac88 <prvAddCurrentTaskToDelayedList>
	}
 800a7be:	bf00      	nop
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	20000c58 	.word	0x20000c58

0800a7cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b086      	sub	sp, #24
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d10a      	bne.n	800a7f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e6:	f383 8811 	msr	BASEPRI, r3
 800a7ea:	f3bf 8f6f 	isb	sy
 800a7ee:	f3bf 8f4f 	dsb	sy
 800a7f2:	60fb      	str	r3, [r7, #12]
}
 800a7f4:	bf00      	nop
 800a7f6:	e7fe      	b.n	800a7f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	3318      	adds	r3, #24
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7fe fdd7 	bl	80093b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a802:	4b1e      	ldr	r3, [pc, #120]	; (800a87c <xTaskRemoveFromEventList+0xb0>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d11d      	bne.n	800a846 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	3304      	adds	r3, #4
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fe fdce 	bl	80093b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a818:	4b19      	ldr	r3, [pc, #100]	; (800a880 <xTaskRemoveFromEventList+0xb4>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d903      	bls.n	800a828 <xTaskRemoveFromEventList+0x5c>
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a824:	4a16      	ldr	r2, [pc, #88]	; (800a880 <xTaskRemoveFromEventList+0xb4>)
 800a826:	6013      	str	r3, [r2, #0]
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a82c:	4613      	mov	r3, r2
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	4413      	add	r3, r2
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4a13      	ldr	r2, [pc, #76]	; (800a884 <xTaskRemoveFromEventList+0xb8>)
 800a836:	441a      	add	r2, r3
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	3304      	adds	r3, #4
 800a83c:	4619      	mov	r1, r3
 800a83e:	4610      	mov	r0, r2
 800a840:	f7fe fd59 	bl	80092f6 <vListInsertEnd>
 800a844:	e005      	b.n	800a852 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	3318      	adds	r3, #24
 800a84a:	4619      	mov	r1, r3
 800a84c:	480e      	ldr	r0, [pc, #56]	; (800a888 <xTaskRemoveFromEventList+0xbc>)
 800a84e:	f7fe fd52 	bl	80092f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a856:	4b0d      	ldr	r3, [pc, #52]	; (800a88c <xTaskRemoveFromEventList+0xc0>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d905      	bls.n	800a86c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a860:	2301      	movs	r3, #1
 800a862:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a864:	4b0a      	ldr	r3, [pc, #40]	; (800a890 <xTaskRemoveFromEventList+0xc4>)
 800a866:	2201      	movs	r2, #1
 800a868:	601a      	str	r2, [r3, #0]
 800a86a:	e001      	b.n	800a870 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a86c:	2300      	movs	r3, #0
 800a86e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a870:	697b      	ldr	r3, [r7, #20]
}
 800a872:	4618      	mov	r0, r3
 800a874:	3718      	adds	r7, #24
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	20001154 	.word	0x20001154
 800a880:	20001134 	.word	0x20001134
 800a884:	20000c5c 	.word	0x20000c5c
 800a888:	200010ec 	.word	0x200010ec
 800a88c:	20000c58 	.word	0x20000c58
 800a890:	20001140 	.word	0x20001140

0800a894 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a89c:	4b06      	ldr	r3, [pc, #24]	; (800a8b8 <vTaskInternalSetTimeOutState+0x24>)
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a8a4:	4b05      	ldr	r3, [pc, #20]	; (800a8bc <vTaskInternalSetTimeOutState+0x28>)
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	605a      	str	r2, [r3, #4]
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr
 800a8b8:	20001144 	.word	0x20001144
 800a8bc:	20001130 	.word	0x20001130

0800a8c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b088      	sub	sp, #32
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10a      	bne.n	800a8e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d4:	f383 8811 	msr	BASEPRI, r3
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	f3bf 8f4f 	dsb	sy
 800a8e0:	613b      	str	r3, [r7, #16]
}
 800a8e2:	bf00      	nop
 800a8e4:	e7fe      	b.n	800a8e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10a      	bne.n	800a902 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f0:	f383 8811 	msr	BASEPRI, r3
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	60fb      	str	r3, [r7, #12]
}
 800a8fe:	bf00      	nop
 800a900:	e7fe      	b.n	800a900 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a902:	f000 fe8f 	bl	800b624 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a906:	4b1d      	ldr	r3, [pc, #116]	; (800a97c <xTaskCheckForTimeOut+0xbc>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	69ba      	ldr	r2, [r7, #24]
 800a912:	1ad3      	subs	r3, r2, r3
 800a914:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91e:	d102      	bne.n	800a926 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a920:	2300      	movs	r3, #0
 800a922:	61fb      	str	r3, [r7, #28]
 800a924:	e023      	b.n	800a96e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	4b15      	ldr	r3, [pc, #84]	; (800a980 <xTaskCheckForTimeOut+0xc0>)
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d007      	beq.n	800a942 <xTaskCheckForTimeOut+0x82>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	69ba      	ldr	r2, [r7, #24]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d302      	bcc.n	800a942 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a93c:	2301      	movs	r3, #1
 800a93e:	61fb      	str	r3, [r7, #28]
 800a940:	e015      	b.n	800a96e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	697a      	ldr	r2, [r7, #20]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d20b      	bcs.n	800a964 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	1ad2      	subs	r2, r2, r3
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f7ff ff9b 	bl	800a894 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a95e:	2300      	movs	r3, #0
 800a960:	61fb      	str	r3, [r7, #28]
 800a962:	e004      	b.n	800a96e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	2200      	movs	r2, #0
 800a968:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a96a:	2301      	movs	r3, #1
 800a96c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a96e:	f000 fe89 	bl	800b684 <vPortExitCritical>

	return xReturn;
 800a972:	69fb      	ldr	r3, [r7, #28]
}
 800a974:	4618      	mov	r0, r3
 800a976:	3720      	adds	r7, #32
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	20001130 	.word	0x20001130
 800a980:	20001144 	.word	0x20001144

0800a984 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a984:	b480      	push	{r7}
 800a986:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a988:	4b03      	ldr	r3, [pc, #12]	; (800a998 <vTaskMissedYield+0x14>)
 800a98a:	2201      	movs	r2, #1
 800a98c:	601a      	str	r2, [r3, #0]
}
 800a98e:	bf00      	nop
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr
 800a998:	20001140 	.word	0x20001140

0800a99c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a9a4:	f000 f852 	bl	800aa4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a9a8:	4b06      	ldr	r3, [pc, #24]	; (800a9c4 <prvIdleTask+0x28>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d9f9      	bls.n	800a9a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a9b0:	4b05      	ldr	r3, [pc, #20]	; (800a9c8 <prvIdleTask+0x2c>)
 800a9b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9b6:	601a      	str	r2, [r3, #0]
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a9c0:	e7f0      	b.n	800a9a4 <prvIdleTask+0x8>
 800a9c2:	bf00      	nop
 800a9c4:	20000c5c 	.word	0x20000c5c
 800a9c8:	e000ed04 	.word	0xe000ed04

0800a9cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	607b      	str	r3, [r7, #4]
 800a9d6:	e00c      	b.n	800a9f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	4413      	add	r3, r2
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4a12      	ldr	r2, [pc, #72]	; (800aa2c <prvInitialiseTaskLists+0x60>)
 800a9e4:	4413      	add	r3, r2
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f7fe fc58 	bl	800929c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	607b      	str	r3, [r7, #4]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2b37      	cmp	r3, #55	; 0x37
 800a9f6:	d9ef      	bls.n	800a9d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a9f8:	480d      	ldr	r0, [pc, #52]	; (800aa30 <prvInitialiseTaskLists+0x64>)
 800a9fa:	f7fe fc4f 	bl	800929c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a9fe:	480d      	ldr	r0, [pc, #52]	; (800aa34 <prvInitialiseTaskLists+0x68>)
 800aa00:	f7fe fc4c 	bl	800929c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aa04:	480c      	ldr	r0, [pc, #48]	; (800aa38 <prvInitialiseTaskLists+0x6c>)
 800aa06:	f7fe fc49 	bl	800929c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aa0a:	480c      	ldr	r0, [pc, #48]	; (800aa3c <prvInitialiseTaskLists+0x70>)
 800aa0c:	f7fe fc46 	bl	800929c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aa10:	480b      	ldr	r0, [pc, #44]	; (800aa40 <prvInitialiseTaskLists+0x74>)
 800aa12:	f7fe fc43 	bl	800929c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aa16:	4b0b      	ldr	r3, [pc, #44]	; (800aa44 <prvInitialiseTaskLists+0x78>)
 800aa18:	4a05      	ldr	r2, [pc, #20]	; (800aa30 <prvInitialiseTaskLists+0x64>)
 800aa1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aa1c:	4b0a      	ldr	r3, [pc, #40]	; (800aa48 <prvInitialiseTaskLists+0x7c>)
 800aa1e:	4a05      	ldr	r2, [pc, #20]	; (800aa34 <prvInitialiseTaskLists+0x68>)
 800aa20:	601a      	str	r2, [r3, #0]
}
 800aa22:	bf00      	nop
 800aa24:	3708      	adds	r7, #8
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	20000c5c 	.word	0x20000c5c
 800aa30:	200010bc 	.word	0x200010bc
 800aa34:	200010d0 	.word	0x200010d0
 800aa38:	200010ec 	.word	0x200010ec
 800aa3c:	20001100 	.word	0x20001100
 800aa40:	20001118 	.word	0x20001118
 800aa44:	200010e4 	.word	0x200010e4
 800aa48:	200010e8 	.word	0x200010e8

0800aa4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa52:	e019      	b.n	800aa88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aa54:	f000 fde6 	bl	800b624 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa58:	4b10      	ldr	r3, [pc, #64]	; (800aa9c <prvCheckTasksWaitingTermination+0x50>)
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	3304      	adds	r3, #4
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7fe fca3 	bl	80093b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aa6a:	4b0d      	ldr	r3, [pc, #52]	; (800aaa0 <prvCheckTasksWaitingTermination+0x54>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	4a0b      	ldr	r2, [pc, #44]	; (800aaa0 <prvCheckTasksWaitingTermination+0x54>)
 800aa72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa74:	4b0b      	ldr	r3, [pc, #44]	; (800aaa4 <prvCheckTasksWaitingTermination+0x58>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	4a0a      	ldr	r2, [pc, #40]	; (800aaa4 <prvCheckTasksWaitingTermination+0x58>)
 800aa7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa7e:	f000 fe01 	bl	800b684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 f810 	bl	800aaa8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa88:	4b06      	ldr	r3, [pc, #24]	; (800aaa4 <prvCheckTasksWaitingTermination+0x58>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d1e1      	bne.n	800aa54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa90:	bf00      	nop
 800aa92:	bf00      	nop
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	20001100 	.word	0x20001100
 800aaa0:	2000112c 	.word	0x2000112c
 800aaa4:	20001114 	.word	0x20001114

0800aaa8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	3354      	adds	r3, #84	; 0x54
 800aab4:	4618      	mov	r0, r3
 800aab6:	f002 fb19 	bl	800d0ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d108      	bne.n	800aad6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac8:	4618      	mov	r0, r3
 800aaca:	f000 ff99 	bl	800ba00 <vPortFree>
				vPortFree( pxTCB );
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 ff96 	bl	800ba00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aad4:	e018      	b.n	800ab08 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d103      	bne.n	800aae8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 ff8d 	bl	800ba00 <vPortFree>
	}
 800aae6:	e00f      	b.n	800ab08 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	d00a      	beq.n	800ab08 <prvDeleteTCB+0x60>
	__asm volatile
 800aaf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf6:	f383 8811 	msr	BASEPRI, r3
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	60fb      	str	r3, [r7, #12]
}
 800ab04:	bf00      	nop
 800ab06:	e7fe      	b.n	800ab06 <prvDeleteTCB+0x5e>
	}
 800ab08:	bf00      	nop
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ab10:	b480      	push	{r7}
 800ab12:	b083      	sub	sp, #12
 800ab14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab16:	4b0c      	ldr	r3, [pc, #48]	; (800ab48 <prvResetNextTaskUnblockTime+0x38>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d104      	bne.n	800ab2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ab20:	4b0a      	ldr	r3, [pc, #40]	; (800ab4c <prvResetNextTaskUnblockTime+0x3c>)
 800ab22:	f04f 32ff 	mov.w	r2, #4294967295
 800ab26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ab28:	e008      	b.n	800ab3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab2a:	4b07      	ldr	r3, [pc, #28]	; (800ab48 <prvResetNextTaskUnblockTime+0x38>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	4a04      	ldr	r2, [pc, #16]	; (800ab4c <prvResetNextTaskUnblockTime+0x3c>)
 800ab3a:	6013      	str	r3, [r2, #0]
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr
 800ab48:	200010e4 	.word	0x200010e4
 800ab4c:	2000114c 	.word	0x2000114c

0800ab50 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ab56:	4b05      	ldr	r3, [pc, #20]	; (800ab6c <xTaskGetCurrentTaskHandle+0x1c>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ab5c:	687b      	ldr	r3, [r7, #4]
	}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	370c      	adds	r7, #12
 800ab62:	46bd      	mov	sp, r7
 800ab64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	20000c58 	.word	0x20000c58

0800ab70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ab70:	b480      	push	{r7}
 800ab72:	b083      	sub	sp, #12
 800ab74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ab76:	4b0b      	ldr	r3, [pc, #44]	; (800aba4 <xTaskGetSchedulerState+0x34>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d102      	bne.n	800ab84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	607b      	str	r3, [r7, #4]
 800ab82:	e008      	b.n	800ab96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab84:	4b08      	ldr	r3, [pc, #32]	; (800aba8 <xTaskGetSchedulerState+0x38>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d102      	bne.n	800ab92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	607b      	str	r3, [r7, #4]
 800ab90:	e001      	b.n	800ab96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ab92:	2300      	movs	r3, #0
 800ab94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ab96:	687b      	ldr	r3, [r7, #4]
	}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr
 800aba4:	20001138 	.word	0x20001138
 800aba8:	20001154 	.word	0x20001154

0800abac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800abac:	b580      	push	{r7, lr}
 800abae:	b086      	sub	sp, #24
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800abb8:	2300      	movs	r3, #0
 800abba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d056      	beq.n	800ac70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800abc2:	4b2e      	ldr	r3, [pc, #184]	; (800ac7c <xTaskPriorityDisinherit+0xd0>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	693a      	ldr	r2, [r7, #16]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d00a      	beq.n	800abe2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800abcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd0:	f383 8811 	msr	BASEPRI, r3
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	60fb      	str	r3, [r7, #12]
}
 800abde:	bf00      	nop
 800abe0:	e7fe      	b.n	800abe0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d10a      	bne.n	800ac00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800abea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	60bb      	str	r3, [r7, #8]
}
 800abfc:	bf00      	nop
 800abfe:	e7fe      	b.n	800abfe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac04:	1e5a      	subs	r2, r3, #1
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d02c      	beq.n	800ac70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d128      	bne.n	800ac70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	3304      	adds	r3, #4
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7fe fbc4 	bl	80093b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac40:	4b0f      	ldr	r3, [pc, #60]	; (800ac80 <xTaskPriorityDisinherit+0xd4>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d903      	bls.n	800ac50 <xTaskPriorityDisinherit+0xa4>
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4c:	4a0c      	ldr	r2, [pc, #48]	; (800ac80 <xTaskPriorityDisinherit+0xd4>)
 800ac4e:	6013      	str	r3, [r2, #0]
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac54:	4613      	mov	r3, r2
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4413      	add	r3, r2
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4a09      	ldr	r2, [pc, #36]	; (800ac84 <xTaskPriorityDisinherit+0xd8>)
 800ac5e:	441a      	add	r2, r3
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	3304      	adds	r3, #4
 800ac64:	4619      	mov	r1, r3
 800ac66:	4610      	mov	r0, r2
 800ac68:	f7fe fb45 	bl	80092f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac70:	697b      	ldr	r3, [r7, #20]
	}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3718      	adds	r7, #24
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	20000c58 	.word	0x20000c58
 800ac80:	20001134 	.word	0x20001134
 800ac84:	20000c5c 	.word	0x20000c5c

0800ac88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ac92:	4b21      	ldr	r3, [pc, #132]	; (800ad18 <prvAddCurrentTaskToDelayedList+0x90>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac98:	4b20      	ldr	r3, [pc, #128]	; (800ad1c <prvAddCurrentTaskToDelayedList+0x94>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	3304      	adds	r3, #4
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7fe fb86 	bl	80093b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acaa:	d10a      	bne.n	800acc2 <prvAddCurrentTaskToDelayedList+0x3a>
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d007      	beq.n	800acc2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acb2:	4b1a      	ldr	r3, [pc, #104]	; (800ad1c <prvAddCurrentTaskToDelayedList+0x94>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	3304      	adds	r3, #4
 800acb8:	4619      	mov	r1, r3
 800acba:	4819      	ldr	r0, [pc, #100]	; (800ad20 <prvAddCurrentTaskToDelayedList+0x98>)
 800acbc:	f7fe fb1b 	bl	80092f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800acc0:	e026      	b.n	800ad10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	4413      	add	r3, r2
 800acc8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800acca:	4b14      	ldr	r3, [pc, #80]	; (800ad1c <prvAddCurrentTaskToDelayedList+0x94>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	68ba      	ldr	r2, [r7, #8]
 800acd0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800acd2:	68ba      	ldr	r2, [r7, #8]
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d209      	bcs.n	800acee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acda:	4b12      	ldr	r3, [pc, #72]	; (800ad24 <prvAddCurrentTaskToDelayedList+0x9c>)
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	4b0f      	ldr	r3, [pc, #60]	; (800ad1c <prvAddCurrentTaskToDelayedList+0x94>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	3304      	adds	r3, #4
 800ace4:	4619      	mov	r1, r3
 800ace6:	4610      	mov	r0, r2
 800ace8:	f7fe fb29 	bl	800933e <vListInsert>
}
 800acec:	e010      	b.n	800ad10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800acee:	4b0e      	ldr	r3, [pc, #56]	; (800ad28 <prvAddCurrentTaskToDelayedList+0xa0>)
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	4b0a      	ldr	r3, [pc, #40]	; (800ad1c <prvAddCurrentTaskToDelayedList+0x94>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	3304      	adds	r3, #4
 800acf8:	4619      	mov	r1, r3
 800acfa:	4610      	mov	r0, r2
 800acfc:	f7fe fb1f 	bl	800933e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ad00:	4b0a      	ldr	r3, [pc, #40]	; (800ad2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	68ba      	ldr	r2, [r7, #8]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d202      	bcs.n	800ad10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ad0a:	4a08      	ldr	r2, [pc, #32]	; (800ad2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	6013      	str	r3, [r2, #0]
}
 800ad10:	bf00      	nop
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	20001130 	.word	0x20001130
 800ad1c:	20000c58 	.word	0x20000c58
 800ad20:	20001118 	.word	0x20001118
 800ad24:	200010e8 	.word	0x200010e8
 800ad28:	200010e4 	.word	0x200010e4
 800ad2c:	2000114c 	.word	0x2000114c

0800ad30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b08a      	sub	sp, #40	; 0x28
 800ad34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ad36:	2300      	movs	r3, #0
 800ad38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ad3a:	f000 fb07 	bl	800b34c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ad3e:	4b1c      	ldr	r3, [pc, #112]	; (800adb0 <xTimerCreateTimerTask+0x80>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d021      	beq.n	800ad8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ad46:	2300      	movs	r3, #0
 800ad48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ad4e:	1d3a      	adds	r2, r7, #4
 800ad50:	f107 0108 	add.w	r1, r7, #8
 800ad54:	f107 030c 	add.w	r3, r7, #12
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7fe fa85 	bl	8009268 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ad5e:	6879      	ldr	r1, [r7, #4]
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	9202      	str	r2, [sp, #8]
 800ad66:	9301      	str	r3, [sp, #4]
 800ad68:	2302      	movs	r3, #2
 800ad6a:	9300      	str	r3, [sp, #0]
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	460a      	mov	r2, r1
 800ad70:	4910      	ldr	r1, [pc, #64]	; (800adb4 <xTimerCreateTimerTask+0x84>)
 800ad72:	4811      	ldr	r0, [pc, #68]	; (800adb8 <xTimerCreateTimerTask+0x88>)
 800ad74:	f7ff f832 	bl	8009ddc <xTaskCreateStatic>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	4a10      	ldr	r2, [pc, #64]	; (800adbc <xTimerCreateTimerTask+0x8c>)
 800ad7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ad7e:	4b0f      	ldr	r3, [pc, #60]	; (800adbc <xTimerCreateTimerTask+0x8c>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d001      	beq.n	800ad8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ad86:	2301      	movs	r3, #1
 800ad88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d10a      	bne.n	800ada6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ad90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad94:	f383 8811 	msr	BASEPRI, r3
 800ad98:	f3bf 8f6f 	isb	sy
 800ad9c:	f3bf 8f4f 	dsb	sy
 800ada0:	613b      	str	r3, [r7, #16]
}
 800ada2:	bf00      	nop
 800ada4:	e7fe      	b.n	800ada4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ada6:	697b      	ldr	r3, [r7, #20]
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3718      	adds	r7, #24
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	20001188 	.word	0x20001188
 800adb4:	08011354 	.word	0x08011354
 800adb8:	0800aef5 	.word	0x0800aef5
 800adbc:	2000118c 	.word	0x2000118c

0800adc0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b08a      	sub	sp, #40	; 0x28
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
 800adcc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800adce:	2300      	movs	r3, #0
 800add0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10a      	bne.n	800adee <xTimerGenericCommand+0x2e>
	__asm volatile
 800add8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800addc:	f383 8811 	msr	BASEPRI, r3
 800ade0:	f3bf 8f6f 	isb	sy
 800ade4:	f3bf 8f4f 	dsb	sy
 800ade8:	623b      	str	r3, [r7, #32]
}
 800adea:	bf00      	nop
 800adec:	e7fe      	b.n	800adec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800adee:	4b1a      	ldr	r3, [pc, #104]	; (800ae58 <xTimerGenericCommand+0x98>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d02a      	beq.n	800ae4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	2b05      	cmp	r3, #5
 800ae06:	dc18      	bgt.n	800ae3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ae08:	f7ff feb2 	bl	800ab70 <xTaskGetSchedulerState>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b02      	cmp	r3, #2
 800ae10:	d109      	bne.n	800ae26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ae12:	4b11      	ldr	r3, [pc, #68]	; (800ae58 <xTimerGenericCommand+0x98>)
 800ae14:	6818      	ldr	r0, [r3, #0]
 800ae16:	f107 0110 	add.w	r1, r7, #16
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae1e:	f7fe fbf5 	bl	800960c <xQueueGenericSend>
 800ae22:	6278      	str	r0, [r7, #36]	; 0x24
 800ae24:	e012      	b.n	800ae4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ae26:	4b0c      	ldr	r3, [pc, #48]	; (800ae58 <xTimerGenericCommand+0x98>)
 800ae28:	6818      	ldr	r0, [r3, #0]
 800ae2a:	f107 0110 	add.w	r1, r7, #16
 800ae2e:	2300      	movs	r3, #0
 800ae30:	2200      	movs	r2, #0
 800ae32:	f7fe fbeb 	bl	800960c <xQueueGenericSend>
 800ae36:	6278      	str	r0, [r7, #36]	; 0x24
 800ae38:	e008      	b.n	800ae4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ae3a:	4b07      	ldr	r3, [pc, #28]	; (800ae58 <xTimerGenericCommand+0x98>)
 800ae3c:	6818      	ldr	r0, [r3, #0]
 800ae3e:	f107 0110 	add.w	r1, r7, #16
 800ae42:	2300      	movs	r3, #0
 800ae44:	683a      	ldr	r2, [r7, #0]
 800ae46:	f7fe fcdf 	bl	8009808 <xQueueGenericSendFromISR>
 800ae4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3728      	adds	r7, #40	; 0x28
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	20001188 	.word	0x20001188

0800ae5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b088      	sub	sp, #32
 800ae60:	af02      	add	r7, sp, #8
 800ae62:	6078      	str	r0, [r7, #4]
 800ae64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae66:	4b22      	ldr	r3, [pc, #136]	; (800aef0 <prvProcessExpiredTimer+0x94>)
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	68db      	ldr	r3, [r3, #12]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	3304      	adds	r3, #4
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7fe fa9b 	bl	80093b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ae80:	f003 0304 	and.w	r3, r3, #4
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d022      	beq.n	800aece <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	699a      	ldr	r2, [r3, #24]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	18d1      	adds	r1, r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	683a      	ldr	r2, [r7, #0]
 800ae94:	6978      	ldr	r0, [r7, #20]
 800ae96:	f000 f8d1 	bl	800b03c <prvInsertTimerInActiveList>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d01f      	beq.n	800aee0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aea0:	2300      	movs	r3, #0
 800aea2:	9300      	str	r3, [sp, #0]
 800aea4:	2300      	movs	r3, #0
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	2100      	movs	r1, #0
 800aeaa:	6978      	ldr	r0, [r7, #20]
 800aeac:	f7ff ff88 	bl	800adc0 <xTimerGenericCommand>
 800aeb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d113      	bne.n	800aee0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800aeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebc:	f383 8811 	msr	BASEPRI, r3
 800aec0:	f3bf 8f6f 	isb	sy
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	60fb      	str	r3, [r7, #12]
}
 800aeca:	bf00      	nop
 800aecc:	e7fe      	b.n	800aecc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aed4:	f023 0301 	bic.w	r3, r3, #1
 800aed8:	b2da      	uxtb	r2, r3
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	6a1b      	ldr	r3, [r3, #32]
 800aee4:	6978      	ldr	r0, [r7, #20]
 800aee6:	4798      	blx	r3
}
 800aee8:	bf00      	nop
 800aeea:	3718      	adds	r7, #24
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	20001180 	.word	0x20001180

0800aef4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800aefc:	f107 0308 	add.w	r3, r7, #8
 800af00:	4618      	mov	r0, r3
 800af02:	f000 f857 	bl	800afb4 <prvGetNextExpireTime>
 800af06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	4619      	mov	r1, r3
 800af0c:	68f8      	ldr	r0, [r7, #12]
 800af0e:	f000 f803 	bl	800af18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800af12:	f000 f8d5 	bl	800b0c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af16:	e7f1      	b.n	800aefc <prvTimerTask+0x8>

0800af18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800af22:	f7ff fa29 	bl	800a378 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af26:	f107 0308 	add.w	r3, r7, #8
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 f866 	bl	800affc <prvSampleTimeNow>
 800af30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d130      	bne.n	800af9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d10a      	bne.n	800af54 <prvProcessTimerOrBlockTask+0x3c>
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	429a      	cmp	r2, r3
 800af44:	d806      	bhi.n	800af54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800af46:	f7ff fa25 	bl	800a394 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800af4a:	68f9      	ldr	r1, [r7, #12]
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f7ff ff85 	bl	800ae5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800af52:	e024      	b.n	800af9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d008      	beq.n	800af6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800af5a:	4b13      	ldr	r3, [pc, #76]	; (800afa8 <prvProcessTimerOrBlockTask+0x90>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d101      	bne.n	800af68 <prvProcessTimerOrBlockTask+0x50>
 800af64:	2301      	movs	r3, #1
 800af66:	e000      	b.n	800af6a <prvProcessTimerOrBlockTask+0x52>
 800af68:	2300      	movs	r3, #0
 800af6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800af6c:	4b0f      	ldr	r3, [pc, #60]	; (800afac <prvProcessTimerOrBlockTask+0x94>)
 800af6e:	6818      	ldr	r0, [r3, #0]
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	1ad3      	subs	r3, r2, r3
 800af76:	683a      	ldr	r2, [r7, #0]
 800af78:	4619      	mov	r1, r3
 800af7a:	f7fe fefb 	bl	8009d74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800af7e:	f7ff fa09 	bl	800a394 <xTaskResumeAll>
 800af82:	4603      	mov	r3, r0
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10a      	bne.n	800af9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800af88:	4b09      	ldr	r3, [pc, #36]	; (800afb0 <prvProcessTimerOrBlockTask+0x98>)
 800af8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af8e:	601a      	str	r2, [r3, #0]
 800af90:	f3bf 8f4f 	dsb	sy
 800af94:	f3bf 8f6f 	isb	sy
}
 800af98:	e001      	b.n	800af9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800af9a:	f7ff f9fb 	bl	800a394 <xTaskResumeAll>
}
 800af9e:	bf00      	nop
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	20001184 	.word	0x20001184
 800afac:	20001188 	.word	0x20001188
 800afb0:	e000ed04 	.word	0xe000ed04

0800afb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800afbc:	4b0e      	ldr	r3, [pc, #56]	; (800aff8 <prvGetNextExpireTime+0x44>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d101      	bne.n	800afca <prvGetNextExpireTime+0x16>
 800afc6:	2201      	movs	r2, #1
 800afc8:	e000      	b.n	800afcc <prvGetNextExpireTime+0x18>
 800afca:	2200      	movs	r2, #0
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d105      	bne.n	800afe4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800afd8:	4b07      	ldr	r3, [pc, #28]	; (800aff8 <prvGetNextExpireTime+0x44>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	60fb      	str	r3, [r7, #12]
 800afe2:	e001      	b.n	800afe8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800afe4:	2300      	movs	r3, #0
 800afe6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800afe8:	68fb      	ldr	r3, [r7, #12]
}
 800afea:	4618      	mov	r0, r3
 800afec:	3714      	adds	r7, #20
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	20001180 	.word	0x20001180

0800affc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b004:	f7ff fa64 	bl	800a4d0 <xTaskGetTickCount>
 800b008:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b00a:	4b0b      	ldr	r3, [pc, #44]	; (800b038 <prvSampleTimeNow+0x3c>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	68fa      	ldr	r2, [r7, #12]
 800b010:	429a      	cmp	r2, r3
 800b012:	d205      	bcs.n	800b020 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b014:	f000 f936 	bl	800b284 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2201      	movs	r2, #1
 800b01c:	601a      	str	r2, [r3, #0]
 800b01e:	e002      	b.n	800b026 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b026:	4a04      	ldr	r2, [pc, #16]	; (800b038 <prvSampleTimeNow+0x3c>)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b02c:	68fb      	ldr	r3, [r7, #12]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	20001190 	.word	0x20001190

0800b03c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b086      	sub	sp, #24
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	607a      	str	r2, [r7, #4]
 800b048:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b04a:	2300      	movs	r3, #0
 800b04c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	68ba      	ldr	r2, [r7, #8]
 800b052:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b05a:	68ba      	ldr	r2, [r7, #8]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	429a      	cmp	r2, r3
 800b060:	d812      	bhi.n	800b088 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	1ad2      	subs	r2, r2, r3
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	699b      	ldr	r3, [r3, #24]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d302      	bcc.n	800b076 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b070:	2301      	movs	r3, #1
 800b072:	617b      	str	r3, [r7, #20]
 800b074:	e01b      	b.n	800b0ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b076:	4b10      	ldr	r3, [pc, #64]	; (800b0b8 <prvInsertTimerInActiveList+0x7c>)
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	3304      	adds	r3, #4
 800b07e:	4619      	mov	r1, r3
 800b080:	4610      	mov	r0, r2
 800b082:	f7fe f95c 	bl	800933e <vListInsert>
 800b086:	e012      	b.n	800b0ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d206      	bcs.n	800b09e <prvInsertTimerInActiveList+0x62>
 800b090:	68ba      	ldr	r2, [r7, #8]
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	429a      	cmp	r2, r3
 800b096:	d302      	bcc.n	800b09e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b098:	2301      	movs	r3, #1
 800b09a:	617b      	str	r3, [r7, #20]
 800b09c:	e007      	b.n	800b0ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b09e:	4b07      	ldr	r3, [pc, #28]	; (800b0bc <prvInsertTimerInActiveList+0x80>)
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	3304      	adds	r3, #4
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	4610      	mov	r0, r2
 800b0aa:	f7fe f948 	bl	800933e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b0ae:	697b      	ldr	r3, [r7, #20]
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3718      	adds	r7, #24
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	20001184 	.word	0x20001184
 800b0bc:	20001180 	.word	0x20001180

0800b0c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b08e      	sub	sp, #56	; 0x38
 800b0c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0c6:	e0ca      	b.n	800b25e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	da18      	bge.n	800b100 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b0ce:	1d3b      	adds	r3, r7, #4
 800b0d0:	3304      	adds	r3, #4
 800b0d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d10a      	bne.n	800b0f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0de:	f383 8811 	msr	BASEPRI, r3
 800b0e2:	f3bf 8f6f 	isb	sy
 800b0e6:	f3bf 8f4f 	dsb	sy
 800b0ea:	61fb      	str	r3, [r7, #28]
}
 800b0ec:	bf00      	nop
 800b0ee:	e7fe      	b.n	800b0ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0f6:	6850      	ldr	r0, [r2, #4]
 800b0f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0fa:	6892      	ldr	r2, [r2, #8]
 800b0fc:	4611      	mov	r1, r2
 800b0fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2b00      	cmp	r3, #0
 800b104:	f2c0 80aa 	blt.w	800b25c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b10e:	695b      	ldr	r3, [r3, #20]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d004      	beq.n	800b11e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b116:	3304      	adds	r3, #4
 800b118:	4618      	mov	r0, r3
 800b11a:	f7fe f949 	bl	80093b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b11e:	463b      	mov	r3, r7
 800b120:	4618      	mov	r0, r3
 800b122:	f7ff ff6b 	bl	800affc <prvSampleTimeNow>
 800b126:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b09      	cmp	r3, #9
 800b12c:	f200 8097 	bhi.w	800b25e <prvProcessReceivedCommands+0x19e>
 800b130:	a201      	add	r2, pc, #4	; (adr r2, 800b138 <prvProcessReceivedCommands+0x78>)
 800b132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b136:	bf00      	nop
 800b138:	0800b161 	.word	0x0800b161
 800b13c:	0800b161 	.word	0x0800b161
 800b140:	0800b161 	.word	0x0800b161
 800b144:	0800b1d5 	.word	0x0800b1d5
 800b148:	0800b1e9 	.word	0x0800b1e9
 800b14c:	0800b233 	.word	0x0800b233
 800b150:	0800b161 	.word	0x0800b161
 800b154:	0800b161 	.word	0x0800b161
 800b158:	0800b1d5 	.word	0x0800b1d5
 800b15c:	0800b1e9 	.word	0x0800b1e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b162:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b166:	f043 0301 	orr.w	r3, r3, #1
 800b16a:	b2da      	uxtb	r2, r3
 800b16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b176:	699b      	ldr	r3, [r3, #24]
 800b178:	18d1      	adds	r1, r2, r3
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b17e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b180:	f7ff ff5c 	bl	800b03c <prvInsertTimerInActiveList>
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d069      	beq.n	800b25e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b190:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b194:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b198:	f003 0304 	and.w	r3, r3, #4
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d05e      	beq.n	800b25e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b1a0:	68ba      	ldr	r2, [r7, #8]
 800b1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a4:	699b      	ldr	r3, [r3, #24]
 800b1a6:	441a      	add	r2, r3
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1b2:	f7ff fe05 	bl	800adc0 <xTimerGenericCommand>
 800b1b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b1b8:	6a3b      	ldr	r3, [r7, #32]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d14f      	bne.n	800b25e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c2:	f383 8811 	msr	BASEPRI, r3
 800b1c6:	f3bf 8f6f 	isb	sy
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	61bb      	str	r3, [r7, #24]
}
 800b1d0:	bf00      	nop
 800b1d2:	e7fe      	b.n	800b1d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1da:	f023 0301 	bic.w	r3, r3, #1
 800b1de:	b2da      	uxtb	r2, r3
 800b1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b1e6:	e03a      	b.n	800b25e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1ee:	f043 0301 	orr.w	r3, r3, #1
 800b1f2:	b2da      	uxtb	r2, r3
 800b1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b202:	699b      	ldr	r3, [r3, #24]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d10a      	bne.n	800b21e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20c:	f383 8811 	msr	BASEPRI, r3
 800b210:	f3bf 8f6f 	isb	sy
 800b214:	f3bf 8f4f 	dsb	sy
 800b218:	617b      	str	r3, [r7, #20]
}
 800b21a:	bf00      	nop
 800b21c:	e7fe      	b.n	800b21c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b220:	699a      	ldr	r2, [r3, #24]
 800b222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b224:	18d1      	adds	r1, r2, r3
 800b226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b22a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b22c:	f7ff ff06 	bl	800b03c <prvInsertTimerInActiveList>
					break;
 800b230:	e015      	b.n	800b25e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b238:	f003 0302 	and.w	r3, r3, #2
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d103      	bne.n	800b248 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b242:	f000 fbdd 	bl	800ba00 <vPortFree>
 800b246:	e00a      	b.n	800b25e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b24e:	f023 0301 	bic.w	r3, r3, #1
 800b252:	b2da      	uxtb	r2, r3
 800b254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b256:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b25a:	e000      	b.n	800b25e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b25c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b25e:	4b08      	ldr	r3, [pc, #32]	; (800b280 <prvProcessReceivedCommands+0x1c0>)
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	1d39      	adds	r1, r7, #4
 800b264:	2200      	movs	r2, #0
 800b266:	4618      	mov	r0, r3
 800b268:	f7fe fb6a 	bl	8009940 <xQueueReceive>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b00      	cmp	r3, #0
 800b270:	f47f af2a 	bne.w	800b0c8 <prvProcessReceivedCommands+0x8>
	}
}
 800b274:	bf00      	nop
 800b276:	bf00      	nop
 800b278:	3730      	adds	r7, #48	; 0x30
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	20001188 	.word	0x20001188

0800b284 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b088      	sub	sp, #32
 800b288:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b28a:	e048      	b.n	800b31e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b28c:	4b2d      	ldr	r3, [pc, #180]	; (800b344 <prvSwitchTimerLists+0xc0>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b296:	4b2b      	ldr	r3, [pc, #172]	; (800b344 <prvSwitchTimerLists+0xc0>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	68db      	ldr	r3, [r3, #12]
 800b29e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	3304      	adds	r3, #4
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f7fe f883 	bl	80093b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	6a1b      	ldr	r3, [r3, #32]
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2b8:	f003 0304 	and.w	r3, r3, #4
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d02e      	beq.n	800b31e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	699b      	ldr	r3, [r3, #24]
 800b2c4:	693a      	ldr	r2, [r7, #16]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d90e      	bls.n	800b2f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b2de:	4b19      	ldr	r3, [pc, #100]	; (800b344 <prvSwitchTimerLists+0xc0>)
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	3304      	adds	r3, #4
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	4610      	mov	r0, r2
 800b2ea:	f7fe f828 	bl	800933e <vListInsert>
 800b2ee:	e016      	b.n	800b31e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	9300      	str	r3, [sp, #0]
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	693a      	ldr	r2, [r7, #16]
 800b2f8:	2100      	movs	r1, #0
 800b2fa:	68f8      	ldr	r0, [r7, #12]
 800b2fc:	f7ff fd60 	bl	800adc0 <xTimerGenericCommand>
 800b300:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d10a      	bne.n	800b31e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30c:	f383 8811 	msr	BASEPRI, r3
 800b310:	f3bf 8f6f 	isb	sy
 800b314:	f3bf 8f4f 	dsb	sy
 800b318:	603b      	str	r3, [r7, #0]
}
 800b31a:	bf00      	nop
 800b31c:	e7fe      	b.n	800b31c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b31e:	4b09      	ldr	r3, [pc, #36]	; (800b344 <prvSwitchTimerLists+0xc0>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d1b1      	bne.n	800b28c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b328:	4b06      	ldr	r3, [pc, #24]	; (800b344 <prvSwitchTimerLists+0xc0>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b32e:	4b06      	ldr	r3, [pc, #24]	; (800b348 <prvSwitchTimerLists+0xc4>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4a04      	ldr	r2, [pc, #16]	; (800b344 <prvSwitchTimerLists+0xc0>)
 800b334:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b336:	4a04      	ldr	r2, [pc, #16]	; (800b348 <prvSwitchTimerLists+0xc4>)
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	6013      	str	r3, [r2, #0]
}
 800b33c:	bf00      	nop
 800b33e:	3718      	adds	r7, #24
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}
 800b344:	20001180 	.word	0x20001180
 800b348:	20001184 	.word	0x20001184

0800b34c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b082      	sub	sp, #8
 800b350:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b352:	f000 f967 	bl	800b624 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b356:	4b15      	ldr	r3, [pc, #84]	; (800b3ac <prvCheckForValidListAndQueue+0x60>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d120      	bne.n	800b3a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b35e:	4814      	ldr	r0, [pc, #80]	; (800b3b0 <prvCheckForValidListAndQueue+0x64>)
 800b360:	f7fd ff9c 	bl	800929c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b364:	4813      	ldr	r0, [pc, #76]	; (800b3b4 <prvCheckForValidListAndQueue+0x68>)
 800b366:	f7fd ff99 	bl	800929c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b36a:	4b13      	ldr	r3, [pc, #76]	; (800b3b8 <prvCheckForValidListAndQueue+0x6c>)
 800b36c:	4a10      	ldr	r2, [pc, #64]	; (800b3b0 <prvCheckForValidListAndQueue+0x64>)
 800b36e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b370:	4b12      	ldr	r3, [pc, #72]	; (800b3bc <prvCheckForValidListAndQueue+0x70>)
 800b372:	4a10      	ldr	r2, [pc, #64]	; (800b3b4 <prvCheckForValidListAndQueue+0x68>)
 800b374:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b376:	2300      	movs	r3, #0
 800b378:	9300      	str	r3, [sp, #0]
 800b37a:	4b11      	ldr	r3, [pc, #68]	; (800b3c0 <prvCheckForValidListAndQueue+0x74>)
 800b37c:	4a11      	ldr	r2, [pc, #68]	; (800b3c4 <prvCheckForValidListAndQueue+0x78>)
 800b37e:	2110      	movs	r1, #16
 800b380:	200a      	movs	r0, #10
 800b382:	f7fe f8a7 	bl	80094d4 <xQueueGenericCreateStatic>
 800b386:	4603      	mov	r3, r0
 800b388:	4a08      	ldr	r2, [pc, #32]	; (800b3ac <prvCheckForValidListAndQueue+0x60>)
 800b38a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b38c:	4b07      	ldr	r3, [pc, #28]	; (800b3ac <prvCheckForValidListAndQueue+0x60>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d005      	beq.n	800b3a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b394:	4b05      	ldr	r3, [pc, #20]	; (800b3ac <prvCheckForValidListAndQueue+0x60>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	490b      	ldr	r1, [pc, #44]	; (800b3c8 <prvCheckForValidListAndQueue+0x7c>)
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7fe fcc0 	bl	8009d20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3a0:	f000 f970 	bl	800b684 <vPortExitCritical>
}
 800b3a4:	bf00      	nop
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	20001188 	.word	0x20001188
 800b3b0:	20001158 	.word	0x20001158
 800b3b4:	2000116c 	.word	0x2000116c
 800b3b8:	20001180 	.word	0x20001180
 800b3bc:	20001184 	.word	0x20001184
 800b3c0:	20001234 	.word	0x20001234
 800b3c4:	20001194 	.word	0x20001194
 800b3c8:	0801135c 	.word	0x0801135c

0800b3cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b085      	sub	sp, #20
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	3b04      	subs	r3, #4
 800b3dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b3e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	3b04      	subs	r3, #4
 800b3ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	f023 0201 	bic.w	r2, r3, #1
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	3b04      	subs	r3, #4
 800b3fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b3fc:	4a0c      	ldr	r2, [pc, #48]	; (800b430 <pxPortInitialiseStack+0x64>)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	3b14      	subs	r3, #20
 800b406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b408:	687a      	ldr	r2, [r7, #4]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	3b04      	subs	r3, #4
 800b412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f06f 0202 	mvn.w	r2, #2
 800b41a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	3b20      	subs	r3, #32
 800b420:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b422:	68fb      	ldr	r3, [r7, #12]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3714      	adds	r7, #20
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr
 800b430:	0800b435 	.word	0x0800b435

0800b434 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b434:	b480      	push	{r7}
 800b436:	b085      	sub	sp, #20
 800b438:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b43e:	4b12      	ldr	r3, [pc, #72]	; (800b488 <prvTaskExitError+0x54>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b446:	d00a      	beq.n	800b45e <prvTaskExitError+0x2a>
	__asm volatile
 800b448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44c:	f383 8811 	msr	BASEPRI, r3
 800b450:	f3bf 8f6f 	isb	sy
 800b454:	f3bf 8f4f 	dsb	sy
 800b458:	60fb      	str	r3, [r7, #12]
}
 800b45a:	bf00      	nop
 800b45c:	e7fe      	b.n	800b45c <prvTaskExitError+0x28>
	__asm volatile
 800b45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b462:	f383 8811 	msr	BASEPRI, r3
 800b466:	f3bf 8f6f 	isb	sy
 800b46a:	f3bf 8f4f 	dsb	sy
 800b46e:	60bb      	str	r3, [r7, #8]
}
 800b470:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b472:	bf00      	nop
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d0fc      	beq.n	800b474 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b47a:	bf00      	nop
 800b47c:	bf00      	nop
 800b47e:	3714      	adds	r7, #20
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr
 800b488:	20000018 	.word	0x20000018
 800b48c:	00000000 	.word	0x00000000

0800b490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b490:	4b07      	ldr	r3, [pc, #28]	; (800b4b0 <pxCurrentTCBConst2>)
 800b492:	6819      	ldr	r1, [r3, #0]
 800b494:	6808      	ldr	r0, [r1, #0]
 800b496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49a:	f380 8809 	msr	PSP, r0
 800b49e:	f3bf 8f6f 	isb	sy
 800b4a2:	f04f 0000 	mov.w	r0, #0
 800b4a6:	f380 8811 	msr	BASEPRI, r0
 800b4aa:	4770      	bx	lr
 800b4ac:	f3af 8000 	nop.w

0800b4b0 <pxCurrentTCBConst2>:
 800b4b0:	20000c58 	.word	0x20000c58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b4b4:	bf00      	nop
 800b4b6:	bf00      	nop

0800b4b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b4b8:	4808      	ldr	r0, [pc, #32]	; (800b4dc <prvPortStartFirstTask+0x24>)
 800b4ba:	6800      	ldr	r0, [r0, #0]
 800b4bc:	6800      	ldr	r0, [r0, #0]
 800b4be:	f380 8808 	msr	MSP, r0
 800b4c2:	f04f 0000 	mov.w	r0, #0
 800b4c6:	f380 8814 	msr	CONTROL, r0
 800b4ca:	b662      	cpsie	i
 800b4cc:	b661      	cpsie	f
 800b4ce:	f3bf 8f4f 	dsb	sy
 800b4d2:	f3bf 8f6f 	isb	sy
 800b4d6:	df00      	svc	0
 800b4d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b4da:	bf00      	nop
 800b4dc:	e000ed08 	.word	0xe000ed08

0800b4e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b4e6:	4b46      	ldr	r3, [pc, #280]	; (800b600 <xPortStartScheduler+0x120>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a46      	ldr	r2, [pc, #280]	; (800b604 <xPortStartScheduler+0x124>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d10a      	bne.n	800b506 <xPortStartScheduler+0x26>
	__asm volatile
 800b4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f4:	f383 8811 	msr	BASEPRI, r3
 800b4f8:	f3bf 8f6f 	isb	sy
 800b4fc:	f3bf 8f4f 	dsb	sy
 800b500:	613b      	str	r3, [r7, #16]
}
 800b502:	bf00      	nop
 800b504:	e7fe      	b.n	800b504 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b506:	4b3e      	ldr	r3, [pc, #248]	; (800b600 <xPortStartScheduler+0x120>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a3f      	ldr	r2, [pc, #252]	; (800b608 <xPortStartScheduler+0x128>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d10a      	bne.n	800b526 <xPortStartScheduler+0x46>
	__asm volatile
 800b510:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b514:	f383 8811 	msr	BASEPRI, r3
 800b518:	f3bf 8f6f 	isb	sy
 800b51c:	f3bf 8f4f 	dsb	sy
 800b520:	60fb      	str	r3, [r7, #12]
}
 800b522:	bf00      	nop
 800b524:	e7fe      	b.n	800b524 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b526:	4b39      	ldr	r3, [pc, #228]	; (800b60c <xPortStartScheduler+0x12c>)
 800b528:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	22ff      	movs	r2, #255	; 0xff
 800b536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b540:	78fb      	ldrb	r3, [r7, #3]
 800b542:	b2db      	uxtb	r3, r3
 800b544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b548:	b2da      	uxtb	r2, r3
 800b54a:	4b31      	ldr	r3, [pc, #196]	; (800b610 <xPortStartScheduler+0x130>)
 800b54c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b54e:	4b31      	ldr	r3, [pc, #196]	; (800b614 <xPortStartScheduler+0x134>)
 800b550:	2207      	movs	r2, #7
 800b552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b554:	e009      	b.n	800b56a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b556:	4b2f      	ldr	r3, [pc, #188]	; (800b614 <xPortStartScheduler+0x134>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	3b01      	subs	r3, #1
 800b55c:	4a2d      	ldr	r2, [pc, #180]	; (800b614 <xPortStartScheduler+0x134>)
 800b55e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b560:	78fb      	ldrb	r3, [r7, #3]
 800b562:	b2db      	uxtb	r3, r3
 800b564:	005b      	lsls	r3, r3, #1
 800b566:	b2db      	uxtb	r3, r3
 800b568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b56a:	78fb      	ldrb	r3, [r7, #3]
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b572:	2b80      	cmp	r3, #128	; 0x80
 800b574:	d0ef      	beq.n	800b556 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b576:	4b27      	ldr	r3, [pc, #156]	; (800b614 <xPortStartScheduler+0x134>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f1c3 0307 	rsb	r3, r3, #7
 800b57e:	2b04      	cmp	r3, #4
 800b580:	d00a      	beq.n	800b598 <xPortStartScheduler+0xb8>
	__asm volatile
 800b582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b586:	f383 8811 	msr	BASEPRI, r3
 800b58a:	f3bf 8f6f 	isb	sy
 800b58e:	f3bf 8f4f 	dsb	sy
 800b592:	60bb      	str	r3, [r7, #8]
}
 800b594:	bf00      	nop
 800b596:	e7fe      	b.n	800b596 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b598:	4b1e      	ldr	r3, [pc, #120]	; (800b614 <xPortStartScheduler+0x134>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	021b      	lsls	r3, r3, #8
 800b59e:	4a1d      	ldr	r2, [pc, #116]	; (800b614 <xPortStartScheduler+0x134>)
 800b5a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b5a2:	4b1c      	ldr	r3, [pc, #112]	; (800b614 <xPortStartScheduler+0x134>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b5aa:	4a1a      	ldr	r2, [pc, #104]	; (800b614 <xPortStartScheduler+0x134>)
 800b5ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	b2da      	uxtb	r2, r3
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b5b6:	4b18      	ldr	r3, [pc, #96]	; (800b618 <xPortStartScheduler+0x138>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a17      	ldr	r2, [pc, #92]	; (800b618 <xPortStartScheduler+0x138>)
 800b5bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b5c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b5c2:	4b15      	ldr	r3, [pc, #84]	; (800b618 <xPortStartScheduler+0x138>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a14      	ldr	r2, [pc, #80]	; (800b618 <xPortStartScheduler+0x138>)
 800b5c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b5cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b5ce:	f000 f8dd 	bl	800b78c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b5d2:	4b12      	ldr	r3, [pc, #72]	; (800b61c <xPortStartScheduler+0x13c>)
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b5d8:	f000 f8fc 	bl	800b7d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b5dc:	4b10      	ldr	r3, [pc, #64]	; (800b620 <xPortStartScheduler+0x140>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a0f      	ldr	r2, [pc, #60]	; (800b620 <xPortStartScheduler+0x140>)
 800b5e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b5e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b5e8:	f7ff ff66 	bl	800b4b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b5ec:	f7ff f83a 	bl	800a664 <vTaskSwitchContext>
	prvTaskExitError();
 800b5f0:	f7ff ff20 	bl	800b434 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3718      	adds	r7, #24
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	e000ed00 	.word	0xe000ed00
 800b604:	410fc271 	.word	0x410fc271
 800b608:	410fc270 	.word	0x410fc270
 800b60c:	e000e400 	.word	0xe000e400
 800b610:	20001284 	.word	0x20001284
 800b614:	20001288 	.word	0x20001288
 800b618:	e000ed20 	.word	0xe000ed20
 800b61c:	20000018 	.word	0x20000018
 800b620:	e000ef34 	.word	0xe000ef34

0800b624 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
	__asm volatile
 800b62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b62e:	f383 8811 	msr	BASEPRI, r3
 800b632:	f3bf 8f6f 	isb	sy
 800b636:	f3bf 8f4f 	dsb	sy
 800b63a:	607b      	str	r3, [r7, #4]
}
 800b63c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b63e:	4b0f      	ldr	r3, [pc, #60]	; (800b67c <vPortEnterCritical+0x58>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	3301      	adds	r3, #1
 800b644:	4a0d      	ldr	r2, [pc, #52]	; (800b67c <vPortEnterCritical+0x58>)
 800b646:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b648:	4b0c      	ldr	r3, [pc, #48]	; (800b67c <vPortEnterCritical+0x58>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d10f      	bne.n	800b670 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b650:	4b0b      	ldr	r3, [pc, #44]	; (800b680 <vPortEnterCritical+0x5c>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	b2db      	uxtb	r3, r3
 800b656:	2b00      	cmp	r3, #0
 800b658:	d00a      	beq.n	800b670 <vPortEnterCritical+0x4c>
	__asm volatile
 800b65a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b65e:	f383 8811 	msr	BASEPRI, r3
 800b662:	f3bf 8f6f 	isb	sy
 800b666:	f3bf 8f4f 	dsb	sy
 800b66a:	603b      	str	r3, [r7, #0]
}
 800b66c:	bf00      	nop
 800b66e:	e7fe      	b.n	800b66e <vPortEnterCritical+0x4a>
	}
}
 800b670:	bf00      	nop
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr
 800b67c:	20000018 	.word	0x20000018
 800b680:	e000ed04 	.word	0xe000ed04

0800b684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b68a:	4b12      	ldr	r3, [pc, #72]	; (800b6d4 <vPortExitCritical+0x50>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d10a      	bne.n	800b6a8 <vPortExitCritical+0x24>
	__asm volatile
 800b692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b696:	f383 8811 	msr	BASEPRI, r3
 800b69a:	f3bf 8f6f 	isb	sy
 800b69e:	f3bf 8f4f 	dsb	sy
 800b6a2:	607b      	str	r3, [r7, #4]
}
 800b6a4:	bf00      	nop
 800b6a6:	e7fe      	b.n	800b6a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b6a8:	4b0a      	ldr	r3, [pc, #40]	; (800b6d4 <vPortExitCritical+0x50>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	4a09      	ldr	r2, [pc, #36]	; (800b6d4 <vPortExitCritical+0x50>)
 800b6b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b6b2:	4b08      	ldr	r3, [pc, #32]	; (800b6d4 <vPortExitCritical+0x50>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d105      	bne.n	800b6c6 <vPortExitCritical+0x42>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	f383 8811 	msr	BASEPRI, r3
}
 800b6c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b6c6:	bf00      	nop
 800b6c8:	370c      	adds	r7, #12
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop
 800b6d4:	20000018 	.word	0x20000018
	...

0800b6e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b6e0:	f3ef 8009 	mrs	r0, PSP
 800b6e4:	f3bf 8f6f 	isb	sy
 800b6e8:	4b15      	ldr	r3, [pc, #84]	; (800b740 <pxCurrentTCBConst>)
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	f01e 0f10 	tst.w	lr, #16
 800b6f0:	bf08      	it	eq
 800b6f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b6f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fa:	6010      	str	r0, [r2, #0]
 800b6fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b700:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b704:	f380 8811 	msr	BASEPRI, r0
 800b708:	f3bf 8f4f 	dsb	sy
 800b70c:	f3bf 8f6f 	isb	sy
 800b710:	f7fe ffa8 	bl	800a664 <vTaskSwitchContext>
 800b714:	f04f 0000 	mov.w	r0, #0
 800b718:	f380 8811 	msr	BASEPRI, r0
 800b71c:	bc09      	pop	{r0, r3}
 800b71e:	6819      	ldr	r1, [r3, #0]
 800b720:	6808      	ldr	r0, [r1, #0]
 800b722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b726:	f01e 0f10 	tst.w	lr, #16
 800b72a:	bf08      	it	eq
 800b72c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b730:	f380 8809 	msr	PSP, r0
 800b734:	f3bf 8f6f 	isb	sy
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	f3af 8000 	nop.w

0800b740 <pxCurrentTCBConst>:
 800b740:	20000c58 	.word	0x20000c58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b744:	bf00      	nop
 800b746:	bf00      	nop

0800b748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
	__asm volatile
 800b74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b752:	f383 8811 	msr	BASEPRI, r3
 800b756:	f3bf 8f6f 	isb	sy
 800b75a:	f3bf 8f4f 	dsb	sy
 800b75e:	607b      	str	r3, [r7, #4]
}
 800b760:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b762:	f7fe fec5 	bl	800a4f0 <xTaskIncrementTick>
 800b766:	4603      	mov	r3, r0
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d003      	beq.n	800b774 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b76c:	4b06      	ldr	r3, [pc, #24]	; (800b788 <xPortSysTickHandler+0x40>)
 800b76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b772:	601a      	str	r2, [r3, #0]
 800b774:	2300      	movs	r3, #0
 800b776:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	f383 8811 	msr	BASEPRI, r3
}
 800b77e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b780:	bf00      	nop
 800b782:	3708      	adds	r7, #8
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	e000ed04 	.word	0xe000ed04

0800b78c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b78c:	b480      	push	{r7}
 800b78e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b790:	4b0b      	ldr	r3, [pc, #44]	; (800b7c0 <vPortSetupTimerInterrupt+0x34>)
 800b792:	2200      	movs	r2, #0
 800b794:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b796:	4b0b      	ldr	r3, [pc, #44]	; (800b7c4 <vPortSetupTimerInterrupt+0x38>)
 800b798:	2200      	movs	r2, #0
 800b79a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b79c:	4b0a      	ldr	r3, [pc, #40]	; (800b7c8 <vPortSetupTimerInterrupt+0x3c>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a0a      	ldr	r2, [pc, #40]	; (800b7cc <vPortSetupTimerInterrupt+0x40>)
 800b7a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7a6:	099b      	lsrs	r3, r3, #6
 800b7a8:	4a09      	ldr	r2, [pc, #36]	; (800b7d0 <vPortSetupTimerInterrupt+0x44>)
 800b7aa:	3b01      	subs	r3, #1
 800b7ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b7ae:	4b04      	ldr	r3, [pc, #16]	; (800b7c0 <vPortSetupTimerInterrupt+0x34>)
 800b7b0:	2207      	movs	r2, #7
 800b7b2:	601a      	str	r2, [r3, #0]
}
 800b7b4:	bf00      	nop
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop
 800b7c0:	e000e010 	.word	0xe000e010
 800b7c4:	e000e018 	.word	0xe000e018
 800b7c8:	2000000c 	.word	0x2000000c
 800b7cc:	10624dd3 	.word	0x10624dd3
 800b7d0:	e000e014 	.word	0xe000e014

0800b7d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b7d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b7e4 <vPortEnableVFP+0x10>
 800b7d8:	6801      	ldr	r1, [r0, #0]
 800b7da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b7de:	6001      	str	r1, [r0, #0]
 800b7e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b7e2:	bf00      	nop
 800b7e4:	e000ed88 	.word	0xe000ed88

0800b7e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b085      	sub	sp, #20
 800b7ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b7ee:	f3ef 8305 	mrs	r3, IPSR
 800b7f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2b0f      	cmp	r3, #15
 800b7f8:	d914      	bls.n	800b824 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b7fa:	4a17      	ldr	r2, [pc, #92]	; (800b858 <vPortValidateInterruptPriority+0x70>)
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	4413      	add	r3, r2
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b804:	4b15      	ldr	r3, [pc, #84]	; (800b85c <vPortValidateInterruptPriority+0x74>)
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	7afa      	ldrb	r2, [r7, #11]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d20a      	bcs.n	800b824 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	607b      	str	r3, [r7, #4]
}
 800b820:	bf00      	nop
 800b822:	e7fe      	b.n	800b822 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b824:	4b0e      	ldr	r3, [pc, #56]	; (800b860 <vPortValidateInterruptPriority+0x78>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b82c:	4b0d      	ldr	r3, [pc, #52]	; (800b864 <vPortValidateInterruptPriority+0x7c>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	429a      	cmp	r2, r3
 800b832:	d90a      	bls.n	800b84a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b838:	f383 8811 	msr	BASEPRI, r3
 800b83c:	f3bf 8f6f 	isb	sy
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	603b      	str	r3, [r7, #0]
}
 800b846:	bf00      	nop
 800b848:	e7fe      	b.n	800b848 <vPortValidateInterruptPriority+0x60>
	}
 800b84a:	bf00      	nop
 800b84c:	3714      	adds	r7, #20
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop
 800b858:	e000e3f0 	.word	0xe000e3f0
 800b85c:	20001284 	.word	0x20001284
 800b860:	e000ed0c 	.word	0xe000ed0c
 800b864:	20001288 	.word	0x20001288

0800b868 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b08a      	sub	sp, #40	; 0x28
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b870:	2300      	movs	r3, #0
 800b872:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b874:	f7fe fd80 	bl	800a378 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b878:	4b5b      	ldr	r3, [pc, #364]	; (800b9e8 <pvPortMalloc+0x180>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d101      	bne.n	800b884 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b880:	f000 f920 	bl	800bac4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b884:	4b59      	ldr	r3, [pc, #356]	; (800b9ec <pvPortMalloc+0x184>)
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	4013      	ands	r3, r2
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	f040 8093 	bne.w	800b9b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d01d      	beq.n	800b8d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b898:	2208      	movs	r2, #8
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	4413      	add	r3, r2
 800b89e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f003 0307 	and.w	r3, r3, #7
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d014      	beq.n	800b8d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f023 0307 	bic.w	r3, r3, #7
 800b8b0:	3308      	adds	r3, #8
 800b8b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f003 0307 	and.w	r3, r3, #7
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00a      	beq.n	800b8d4 <pvPortMalloc+0x6c>
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	617b      	str	r3, [r7, #20]
}
 800b8d0:	bf00      	nop
 800b8d2:	e7fe      	b.n	800b8d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d06e      	beq.n	800b9b8 <pvPortMalloc+0x150>
 800b8da:	4b45      	ldr	r3, [pc, #276]	; (800b9f0 <pvPortMalloc+0x188>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d869      	bhi.n	800b9b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b8e4:	4b43      	ldr	r3, [pc, #268]	; (800b9f4 <pvPortMalloc+0x18c>)
 800b8e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b8e8:	4b42      	ldr	r3, [pc, #264]	; (800b9f4 <pvPortMalloc+0x18c>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8ee:	e004      	b.n	800b8fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	687a      	ldr	r2, [r7, #4]
 800b900:	429a      	cmp	r2, r3
 800b902:	d903      	bls.n	800b90c <pvPortMalloc+0xa4>
 800b904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1f1      	bne.n	800b8f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b90c:	4b36      	ldr	r3, [pc, #216]	; (800b9e8 <pvPortMalloc+0x180>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b912:	429a      	cmp	r2, r3
 800b914:	d050      	beq.n	800b9b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b916:	6a3b      	ldr	r3, [r7, #32]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2208      	movs	r2, #8
 800b91c:	4413      	add	r3, r2
 800b91e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	6a3b      	ldr	r3, [r7, #32]
 800b926:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92a:	685a      	ldr	r2, [r3, #4]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	1ad2      	subs	r2, r2, r3
 800b930:	2308      	movs	r3, #8
 800b932:	005b      	lsls	r3, r3, #1
 800b934:	429a      	cmp	r2, r3
 800b936:	d91f      	bls.n	800b978 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	4413      	add	r3, r2
 800b93e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b940:	69bb      	ldr	r3, [r7, #24]
 800b942:	f003 0307 	and.w	r3, r3, #7
 800b946:	2b00      	cmp	r3, #0
 800b948:	d00a      	beq.n	800b960 <pvPortMalloc+0xf8>
	__asm volatile
 800b94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94e:	f383 8811 	msr	BASEPRI, r3
 800b952:	f3bf 8f6f 	isb	sy
 800b956:	f3bf 8f4f 	dsb	sy
 800b95a:	613b      	str	r3, [r7, #16]
}
 800b95c:	bf00      	nop
 800b95e:	e7fe      	b.n	800b95e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b962:	685a      	ldr	r2, [r3, #4]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	1ad2      	subs	r2, r2, r3
 800b968:	69bb      	ldr	r3, [r7, #24]
 800b96a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b972:	69b8      	ldr	r0, [r7, #24]
 800b974:	f000 f908 	bl	800bb88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b978:	4b1d      	ldr	r3, [pc, #116]	; (800b9f0 <pvPortMalloc+0x188>)
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	1ad3      	subs	r3, r2, r3
 800b982:	4a1b      	ldr	r2, [pc, #108]	; (800b9f0 <pvPortMalloc+0x188>)
 800b984:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b986:	4b1a      	ldr	r3, [pc, #104]	; (800b9f0 <pvPortMalloc+0x188>)
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	4b1b      	ldr	r3, [pc, #108]	; (800b9f8 <pvPortMalloc+0x190>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d203      	bcs.n	800b99a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b992:	4b17      	ldr	r3, [pc, #92]	; (800b9f0 <pvPortMalloc+0x188>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a18      	ldr	r2, [pc, #96]	; (800b9f8 <pvPortMalloc+0x190>)
 800b998:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99c:	685a      	ldr	r2, [r3, #4]
 800b99e:	4b13      	ldr	r3, [pc, #76]	; (800b9ec <pvPortMalloc+0x184>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	431a      	orrs	r2, r3
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b9ae:	4b13      	ldr	r3, [pc, #76]	; (800b9fc <pvPortMalloc+0x194>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	4a11      	ldr	r2, [pc, #68]	; (800b9fc <pvPortMalloc+0x194>)
 800b9b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b9b8:	f7fe fcec 	bl	800a394 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9bc:	69fb      	ldr	r3, [r7, #28]
 800b9be:	f003 0307 	and.w	r3, r3, #7
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00a      	beq.n	800b9dc <pvPortMalloc+0x174>
	__asm volatile
 800b9c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ca:	f383 8811 	msr	BASEPRI, r3
 800b9ce:	f3bf 8f6f 	isb	sy
 800b9d2:	f3bf 8f4f 	dsb	sy
 800b9d6:	60fb      	str	r3, [r7, #12]
}
 800b9d8:	bf00      	nop
 800b9da:	e7fe      	b.n	800b9da <pvPortMalloc+0x172>
	return pvReturn;
 800b9dc:	69fb      	ldr	r3, [r7, #28]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3728      	adds	r7, #40	; 0x28
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	20004e94 	.word	0x20004e94
 800b9ec:	20004ea8 	.word	0x20004ea8
 800b9f0:	20004e98 	.word	0x20004e98
 800b9f4:	20004e8c 	.word	0x20004e8c
 800b9f8:	20004e9c 	.word	0x20004e9c
 800b9fc:	20004ea0 	.word	0x20004ea0

0800ba00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b086      	sub	sp, #24
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d04d      	beq.n	800baae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba12:	2308      	movs	r3, #8
 800ba14:	425b      	negs	r3, r3
 800ba16:	697a      	ldr	r2, [r7, #20]
 800ba18:	4413      	add	r3, r2
 800ba1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	685a      	ldr	r2, [r3, #4]
 800ba24:	4b24      	ldr	r3, [pc, #144]	; (800bab8 <vPortFree+0xb8>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4013      	ands	r3, r2
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10a      	bne.n	800ba44 <vPortFree+0x44>
	__asm volatile
 800ba2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba32:	f383 8811 	msr	BASEPRI, r3
 800ba36:	f3bf 8f6f 	isb	sy
 800ba3a:	f3bf 8f4f 	dsb	sy
 800ba3e:	60fb      	str	r3, [r7, #12]
}
 800ba40:	bf00      	nop
 800ba42:	e7fe      	b.n	800ba42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d00a      	beq.n	800ba62 <vPortFree+0x62>
	__asm volatile
 800ba4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba50:	f383 8811 	msr	BASEPRI, r3
 800ba54:	f3bf 8f6f 	isb	sy
 800ba58:	f3bf 8f4f 	dsb	sy
 800ba5c:	60bb      	str	r3, [r7, #8]
}
 800ba5e:	bf00      	nop
 800ba60:	e7fe      	b.n	800ba60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	685a      	ldr	r2, [r3, #4]
 800ba66:	4b14      	ldr	r3, [pc, #80]	; (800bab8 <vPortFree+0xb8>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4013      	ands	r3, r2
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d01e      	beq.n	800baae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d11a      	bne.n	800baae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	685a      	ldr	r2, [r3, #4]
 800ba7c:	4b0e      	ldr	r3, [pc, #56]	; (800bab8 <vPortFree+0xb8>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	43db      	mvns	r3, r3
 800ba82:	401a      	ands	r2, r3
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ba88:	f7fe fc76 	bl	800a378 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	685a      	ldr	r2, [r3, #4]
 800ba90:	4b0a      	ldr	r3, [pc, #40]	; (800babc <vPortFree+0xbc>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4413      	add	r3, r2
 800ba96:	4a09      	ldr	r2, [pc, #36]	; (800babc <vPortFree+0xbc>)
 800ba98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ba9a:	6938      	ldr	r0, [r7, #16]
 800ba9c:	f000 f874 	bl	800bb88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800baa0:	4b07      	ldr	r3, [pc, #28]	; (800bac0 <vPortFree+0xc0>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	3301      	adds	r3, #1
 800baa6:	4a06      	ldr	r2, [pc, #24]	; (800bac0 <vPortFree+0xc0>)
 800baa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800baaa:	f7fe fc73 	bl	800a394 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800baae:	bf00      	nop
 800bab0:	3718      	adds	r7, #24
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	20004ea8 	.word	0x20004ea8
 800babc:	20004e98 	.word	0x20004e98
 800bac0:	20004ea4 	.word	0x20004ea4

0800bac4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800baca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bace:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bad0:	4b27      	ldr	r3, [pc, #156]	; (800bb70 <prvHeapInit+0xac>)
 800bad2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f003 0307 	and.w	r3, r3, #7
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00c      	beq.n	800baf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	3307      	adds	r3, #7
 800bae2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f023 0307 	bic.w	r3, r3, #7
 800baea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800baec:	68ba      	ldr	r2, [r7, #8]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	1ad3      	subs	r3, r2, r3
 800baf2:	4a1f      	ldr	r2, [pc, #124]	; (800bb70 <prvHeapInit+0xac>)
 800baf4:	4413      	add	r3, r2
 800baf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bafc:	4a1d      	ldr	r2, [pc, #116]	; (800bb74 <prvHeapInit+0xb0>)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb02:	4b1c      	ldr	r3, [pc, #112]	; (800bb74 <prvHeapInit+0xb0>)
 800bb04:	2200      	movs	r2, #0
 800bb06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	68ba      	ldr	r2, [r7, #8]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb10:	2208      	movs	r2, #8
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	1a9b      	subs	r3, r3, r2
 800bb16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f023 0307 	bic.w	r3, r3, #7
 800bb1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	4a15      	ldr	r2, [pc, #84]	; (800bb78 <prvHeapInit+0xb4>)
 800bb24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bb26:	4b14      	ldr	r3, [pc, #80]	; (800bb78 <prvHeapInit+0xb4>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bb2e:	4b12      	ldr	r3, [pc, #72]	; (800bb78 <prvHeapInit+0xb4>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	2200      	movs	r2, #0
 800bb34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	1ad2      	subs	r2, r2, r3
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bb44:	4b0c      	ldr	r3, [pc, #48]	; (800bb78 <prvHeapInit+0xb4>)
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	4a0a      	ldr	r2, [pc, #40]	; (800bb7c <prvHeapInit+0xb8>)
 800bb52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	4a09      	ldr	r2, [pc, #36]	; (800bb80 <prvHeapInit+0xbc>)
 800bb5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bb5c:	4b09      	ldr	r3, [pc, #36]	; (800bb84 <prvHeapInit+0xc0>)
 800bb5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bb62:	601a      	str	r2, [r3, #0]
}
 800bb64:	bf00      	nop
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr
 800bb70:	2000128c 	.word	0x2000128c
 800bb74:	20004e8c 	.word	0x20004e8c
 800bb78:	20004e94 	.word	0x20004e94
 800bb7c:	20004e9c 	.word	0x20004e9c
 800bb80:	20004e98 	.word	0x20004e98
 800bb84:	20004ea8 	.word	0x20004ea8

0800bb88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b085      	sub	sp, #20
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bb90:	4b28      	ldr	r3, [pc, #160]	; (800bc34 <prvInsertBlockIntoFreeList+0xac>)
 800bb92:	60fb      	str	r3, [r7, #12]
 800bb94:	e002      	b.n	800bb9c <prvInsertBlockIntoFreeList+0x14>
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	60fb      	str	r3, [r7, #12]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d8f7      	bhi.n	800bb96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	4413      	add	r3, r2
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d108      	bne.n	800bbca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	685a      	ldr	r2, [r3, #4]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	441a      	add	r2, r3
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	68ba      	ldr	r2, [r7, #8]
 800bbd4:	441a      	add	r2, r3
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d118      	bne.n	800bc10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	4b15      	ldr	r3, [pc, #84]	; (800bc38 <prvInsertBlockIntoFreeList+0xb0>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d00d      	beq.n	800bc06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	685a      	ldr	r2, [r3, #4]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	441a      	add	r2, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	601a      	str	r2, [r3, #0]
 800bc04:	e008      	b.n	800bc18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc06:	4b0c      	ldr	r3, [pc, #48]	; (800bc38 <prvInsertBlockIntoFreeList+0xb0>)
 800bc08:	681a      	ldr	r2, [r3, #0]
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	601a      	str	r2, [r3, #0]
 800bc0e:	e003      	b.n	800bc18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d002      	beq.n	800bc26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc26:	bf00      	nop
 800bc28:	3714      	adds	r7, #20
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	20004e8c 	.word	0x20004e8c
 800bc38:	20004e94 	.word	0x20004e94

0800bc3c <_Znwj>:
 800bc3c:	2801      	cmp	r0, #1
 800bc3e:	bf38      	it	cc
 800bc40:	2001      	movcc	r0, #1
 800bc42:	b510      	push	{r4, lr}
 800bc44:	4604      	mov	r4, r0
 800bc46:	4620      	mov	r0, r4
 800bc48:	f000 fa70 	bl	800c12c <malloc>
 800bc4c:	b930      	cbnz	r0, 800bc5c <_Znwj+0x20>
 800bc4e:	f000 f81b 	bl	800bc88 <_ZSt15get_new_handlerv>
 800bc52:	b908      	cbnz	r0, 800bc58 <_Znwj+0x1c>
 800bc54:	f000 f820 	bl	800bc98 <abort>
 800bc58:	4780      	blx	r0
 800bc5a:	e7f4      	b.n	800bc46 <_Znwj+0xa>
 800bc5c:	bd10      	pop	{r4, pc}

0800bc5e <__cxa_pure_virtual>:
 800bc5e:	b508      	push	{r3, lr}
 800bc60:	f000 f80c 	bl	800bc7c <_ZSt9terminatev>

0800bc64 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800bc64:	b508      	push	{r3, lr}
 800bc66:	4780      	blx	r0
 800bc68:	f000 f816 	bl	800bc98 <abort>

0800bc6c <_ZSt13get_terminatev>:
 800bc6c:	4b02      	ldr	r3, [pc, #8]	; (800bc78 <_ZSt13get_terminatev+0xc>)
 800bc6e:	6818      	ldr	r0, [r3, #0]
 800bc70:	f3bf 8f5b 	dmb	ish
 800bc74:	4770      	bx	lr
 800bc76:	bf00      	nop
 800bc78:	2000001c 	.word	0x2000001c

0800bc7c <_ZSt9terminatev>:
 800bc7c:	b508      	push	{r3, lr}
 800bc7e:	f7ff fff5 	bl	800bc6c <_ZSt13get_terminatev>
 800bc82:	f7ff ffef 	bl	800bc64 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800bc88 <_ZSt15get_new_handlerv>:
 800bc88:	4b02      	ldr	r3, [pc, #8]	; (800bc94 <_ZSt15get_new_handlerv+0xc>)
 800bc8a:	6818      	ldr	r0, [r3, #0]
 800bc8c:	f3bf 8f5b 	dmb	ish
 800bc90:	4770      	bx	lr
 800bc92:	bf00      	nop
 800bc94:	20004eac 	.word	0x20004eac

0800bc98 <abort>:
 800bc98:	b508      	push	{r3, lr}
 800bc9a:	2006      	movs	r0, #6
 800bc9c:	f001 faba 	bl	800d214 <raise>
 800bca0:	2001      	movs	r0, #1
 800bca2:	f7f5 fedd 	bl	8001a60 <_exit>
	...

0800bca8 <__errno>:
 800bca8:	4b01      	ldr	r3, [pc, #4]	; (800bcb0 <__errno+0x8>)
 800bcaa:	6818      	ldr	r0, [r3, #0]
 800bcac:	4770      	bx	lr
 800bcae:	bf00      	nop
 800bcb0:	20000020 	.word	0x20000020

0800bcb4 <std>:
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	b510      	push	{r4, lr}
 800bcb8:	4604      	mov	r4, r0
 800bcba:	e9c0 3300 	strd	r3, r3, [r0]
 800bcbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bcc2:	6083      	str	r3, [r0, #8]
 800bcc4:	8181      	strh	r1, [r0, #12]
 800bcc6:	6643      	str	r3, [r0, #100]	; 0x64
 800bcc8:	81c2      	strh	r2, [r0, #14]
 800bcca:	6183      	str	r3, [r0, #24]
 800bccc:	4619      	mov	r1, r3
 800bcce:	2208      	movs	r2, #8
 800bcd0:	305c      	adds	r0, #92	; 0x5c
 800bcd2:	f000 fa63 	bl	800c19c <memset>
 800bcd6:	4b05      	ldr	r3, [pc, #20]	; (800bcec <std+0x38>)
 800bcd8:	6263      	str	r3, [r4, #36]	; 0x24
 800bcda:	4b05      	ldr	r3, [pc, #20]	; (800bcf0 <std+0x3c>)
 800bcdc:	62a3      	str	r3, [r4, #40]	; 0x28
 800bcde:	4b05      	ldr	r3, [pc, #20]	; (800bcf4 <std+0x40>)
 800bce0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bce2:	4b05      	ldr	r3, [pc, #20]	; (800bcf8 <std+0x44>)
 800bce4:	6224      	str	r4, [r4, #32]
 800bce6:	6323      	str	r3, [r4, #48]	; 0x30
 800bce8:	bd10      	pop	{r4, pc}
 800bcea:	bf00      	nop
 800bcec:	0800d28d 	.word	0x0800d28d
 800bcf0:	0800d2b3 	.word	0x0800d2b3
 800bcf4:	0800d2eb 	.word	0x0800d2eb
 800bcf8:	0800d30f 	.word	0x0800d30f

0800bcfc <_cleanup_r>:
 800bcfc:	4901      	ldr	r1, [pc, #4]	; (800bd04 <_cleanup_r+0x8>)
 800bcfe:	f000 b8af 	b.w	800be60 <_fwalk_reent>
 800bd02:	bf00      	nop
 800bd04:	0800e87d 	.word	0x0800e87d

0800bd08 <__sfmoreglue>:
 800bd08:	b570      	push	{r4, r5, r6, lr}
 800bd0a:	1e4a      	subs	r2, r1, #1
 800bd0c:	2568      	movs	r5, #104	; 0x68
 800bd0e:	4355      	muls	r5, r2
 800bd10:	460e      	mov	r6, r1
 800bd12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd16:	f000 fd17 	bl	800c748 <_malloc_r>
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	b140      	cbz	r0, 800bd30 <__sfmoreglue+0x28>
 800bd1e:	2100      	movs	r1, #0
 800bd20:	e9c0 1600 	strd	r1, r6, [r0]
 800bd24:	300c      	adds	r0, #12
 800bd26:	60a0      	str	r0, [r4, #8]
 800bd28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bd2c:	f000 fa36 	bl	800c19c <memset>
 800bd30:	4620      	mov	r0, r4
 800bd32:	bd70      	pop	{r4, r5, r6, pc}

0800bd34 <__sfp_lock_acquire>:
 800bd34:	4801      	ldr	r0, [pc, #4]	; (800bd3c <__sfp_lock_acquire+0x8>)
 800bd36:	f000 b9f5 	b.w	800c124 <__retarget_lock_acquire_recursive>
 800bd3a:	bf00      	nop
 800bd3c:	200050b4 	.word	0x200050b4

0800bd40 <__sfp_lock_release>:
 800bd40:	4801      	ldr	r0, [pc, #4]	; (800bd48 <__sfp_lock_release+0x8>)
 800bd42:	f000 b9f1 	b.w	800c128 <__retarget_lock_release_recursive>
 800bd46:	bf00      	nop
 800bd48:	200050b4 	.word	0x200050b4

0800bd4c <__sinit_lock_acquire>:
 800bd4c:	4801      	ldr	r0, [pc, #4]	; (800bd54 <__sinit_lock_acquire+0x8>)
 800bd4e:	f000 b9e9 	b.w	800c124 <__retarget_lock_acquire_recursive>
 800bd52:	bf00      	nop
 800bd54:	200050af 	.word	0x200050af

0800bd58 <__sinit_lock_release>:
 800bd58:	4801      	ldr	r0, [pc, #4]	; (800bd60 <__sinit_lock_release+0x8>)
 800bd5a:	f000 b9e5 	b.w	800c128 <__retarget_lock_release_recursive>
 800bd5e:	bf00      	nop
 800bd60:	200050af 	.word	0x200050af

0800bd64 <__sinit>:
 800bd64:	b510      	push	{r4, lr}
 800bd66:	4604      	mov	r4, r0
 800bd68:	f7ff fff0 	bl	800bd4c <__sinit_lock_acquire>
 800bd6c:	69a3      	ldr	r3, [r4, #24]
 800bd6e:	b11b      	cbz	r3, 800bd78 <__sinit+0x14>
 800bd70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd74:	f7ff bff0 	b.w	800bd58 <__sinit_lock_release>
 800bd78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bd7c:	6523      	str	r3, [r4, #80]	; 0x50
 800bd7e:	4b13      	ldr	r3, [pc, #76]	; (800bdcc <__sinit+0x68>)
 800bd80:	4a13      	ldr	r2, [pc, #76]	; (800bdd0 <__sinit+0x6c>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	62a2      	str	r2, [r4, #40]	; 0x28
 800bd86:	42a3      	cmp	r3, r4
 800bd88:	bf04      	itt	eq
 800bd8a:	2301      	moveq	r3, #1
 800bd8c:	61a3      	streq	r3, [r4, #24]
 800bd8e:	4620      	mov	r0, r4
 800bd90:	f000 f820 	bl	800bdd4 <__sfp>
 800bd94:	6060      	str	r0, [r4, #4]
 800bd96:	4620      	mov	r0, r4
 800bd98:	f000 f81c 	bl	800bdd4 <__sfp>
 800bd9c:	60a0      	str	r0, [r4, #8]
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f000 f818 	bl	800bdd4 <__sfp>
 800bda4:	2200      	movs	r2, #0
 800bda6:	60e0      	str	r0, [r4, #12]
 800bda8:	2104      	movs	r1, #4
 800bdaa:	6860      	ldr	r0, [r4, #4]
 800bdac:	f7ff ff82 	bl	800bcb4 <std>
 800bdb0:	68a0      	ldr	r0, [r4, #8]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	2109      	movs	r1, #9
 800bdb6:	f7ff ff7d 	bl	800bcb4 <std>
 800bdba:	68e0      	ldr	r0, [r4, #12]
 800bdbc:	2202      	movs	r2, #2
 800bdbe:	2112      	movs	r1, #18
 800bdc0:	f7ff ff78 	bl	800bcb4 <std>
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	61a3      	str	r3, [r4, #24]
 800bdc8:	e7d2      	b.n	800bd70 <__sinit+0xc>
 800bdca:	bf00      	nop
 800bdcc:	080114f8 	.word	0x080114f8
 800bdd0:	0800bcfd 	.word	0x0800bcfd

0800bdd4 <__sfp>:
 800bdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd6:	4607      	mov	r7, r0
 800bdd8:	f7ff ffac 	bl	800bd34 <__sfp_lock_acquire>
 800bddc:	4b1e      	ldr	r3, [pc, #120]	; (800be58 <__sfp+0x84>)
 800bdde:	681e      	ldr	r6, [r3, #0]
 800bde0:	69b3      	ldr	r3, [r6, #24]
 800bde2:	b913      	cbnz	r3, 800bdea <__sfp+0x16>
 800bde4:	4630      	mov	r0, r6
 800bde6:	f7ff ffbd 	bl	800bd64 <__sinit>
 800bdea:	3648      	adds	r6, #72	; 0x48
 800bdec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	d503      	bpl.n	800bdfc <__sfp+0x28>
 800bdf4:	6833      	ldr	r3, [r6, #0]
 800bdf6:	b30b      	cbz	r3, 800be3c <__sfp+0x68>
 800bdf8:	6836      	ldr	r6, [r6, #0]
 800bdfa:	e7f7      	b.n	800bdec <__sfp+0x18>
 800bdfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be00:	b9d5      	cbnz	r5, 800be38 <__sfp+0x64>
 800be02:	4b16      	ldr	r3, [pc, #88]	; (800be5c <__sfp+0x88>)
 800be04:	60e3      	str	r3, [r4, #12]
 800be06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be0a:	6665      	str	r5, [r4, #100]	; 0x64
 800be0c:	f000 f988 	bl	800c120 <__retarget_lock_init_recursive>
 800be10:	f7ff ff96 	bl	800bd40 <__sfp_lock_release>
 800be14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800be18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800be1c:	6025      	str	r5, [r4, #0]
 800be1e:	61a5      	str	r5, [r4, #24]
 800be20:	2208      	movs	r2, #8
 800be22:	4629      	mov	r1, r5
 800be24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be28:	f000 f9b8 	bl	800c19c <memset>
 800be2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be34:	4620      	mov	r0, r4
 800be36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be38:	3468      	adds	r4, #104	; 0x68
 800be3a:	e7d9      	b.n	800bdf0 <__sfp+0x1c>
 800be3c:	2104      	movs	r1, #4
 800be3e:	4638      	mov	r0, r7
 800be40:	f7ff ff62 	bl	800bd08 <__sfmoreglue>
 800be44:	4604      	mov	r4, r0
 800be46:	6030      	str	r0, [r6, #0]
 800be48:	2800      	cmp	r0, #0
 800be4a:	d1d5      	bne.n	800bdf8 <__sfp+0x24>
 800be4c:	f7ff ff78 	bl	800bd40 <__sfp_lock_release>
 800be50:	230c      	movs	r3, #12
 800be52:	603b      	str	r3, [r7, #0]
 800be54:	e7ee      	b.n	800be34 <__sfp+0x60>
 800be56:	bf00      	nop
 800be58:	080114f8 	.word	0x080114f8
 800be5c:	ffff0001 	.word	0xffff0001

0800be60 <_fwalk_reent>:
 800be60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be64:	4606      	mov	r6, r0
 800be66:	4688      	mov	r8, r1
 800be68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800be6c:	2700      	movs	r7, #0
 800be6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be72:	f1b9 0901 	subs.w	r9, r9, #1
 800be76:	d505      	bpl.n	800be84 <_fwalk_reent+0x24>
 800be78:	6824      	ldr	r4, [r4, #0]
 800be7a:	2c00      	cmp	r4, #0
 800be7c:	d1f7      	bne.n	800be6e <_fwalk_reent+0xe>
 800be7e:	4638      	mov	r0, r7
 800be80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be84:	89ab      	ldrh	r3, [r5, #12]
 800be86:	2b01      	cmp	r3, #1
 800be88:	d907      	bls.n	800be9a <_fwalk_reent+0x3a>
 800be8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be8e:	3301      	adds	r3, #1
 800be90:	d003      	beq.n	800be9a <_fwalk_reent+0x3a>
 800be92:	4629      	mov	r1, r5
 800be94:	4630      	mov	r0, r6
 800be96:	47c0      	blx	r8
 800be98:	4307      	orrs	r7, r0
 800be9a:	3568      	adds	r5, #104	; 0x68
 800be9c:	e7e9      	b.n	800be72 <_fwalk_reent+0x12>
	...

0800bea0 <__libc_init_array>:
 800bea0:	b570      	push	{r4, r5, r6, lr}
 800bea2:	4d0d      	ldr	r5, [pc, #52]	; (800bed8 <__libc_init_array+0x38>)
 800bea4:	4c0d      	ldr	r4, [pc, #52]	; (800bedc <__libc_init_array+0x3c>)
 800bea6:	1b64      	subs	r4, r4, r5
 800bea8:	10a4      	asrs	r4, r4, #2
 800beaa:	2600      	movs	r6, #0
 800beac:	42a6      	cmp	r6, r4
 800beae:	d109      	bne.n	800bec4 <__libc_init_array+0x24>
 800beb0:	4d0b      	ldr	r5, [pc, #44]	; (800bee0 <__libc_init_array+0x40>)
 800beb2:	4c0c      	ldr	r4, [pc, #48]	; (800bee4 <__libc_init_array+0x44>)
 800beb4:	f004 f9fa 	bl	80102ac <_init>
 800beb8:	1b64      	subs	r4, r4, r5
 800beba:	10a4      	asrs	r4, r4, #2
 800bebc:	2600      	movs	r6, #0
 800bebe:	42a6      	cmp	r6, r4
 800bec0:	d105      	bne.n	800bece <__libc_init_array+0x2e>
 800bec2:	bd70      	pop	{r4, r5, r6, pc}
 800bec4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bec8:	4798      	blx	r3
 800beca:	3601      	adds	r6, #1
 800becc:	e7ee      	b.n	800beac <__libc_init_array+0xc>
 800bece:	f855 3b04 	ldr.w	r3, [r5], #4
 800bed2:	4798      	blx	r3
 800bed4:	3601      	adds	r6, #1
 800bed6:	e7f2      	b.n	800bebe <__libc_init_array+0x1e>
 800bed8:	080119f8 	.word	0x080119f8
 800bedc:	080119f8 	.word	0x080119f8
 800bee0:	080119f8 	.word	0x080119f8
 800bee4:	08011a00 	.word	0x08011a00

0800bee8 <isxdigit>:
 800bee8:	4b02      	ldr	r3, [pc, #8]	; (800bef4 <isxdigit+0xc>)
 800beea:	4418      	add	r0, r3
 800beec:	7840      	ldrb	r0, [r0, #1]
 800beee:	f000 0044 	and.w	r0, r0, #68	; 0x44
 800bef2:	4770      	bx	lr
 800bef4:	080116de 	.word	0x080116de

0800bef8 <localtime>:
 800bef8:	b538      	push	{r3, r4, r5, lr}
 800befa:	4b0b      	ldr	r3, [pc, #44]	; (800bf28 <localtime+0x30>)
 800befc:	681d      	ldr	r5, [r3, #0]
 800befe:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800bf00:	4604      	mov	r4, r0
 800bf02:	b953      	cbnz	r3, 800bf1a <localtime+0x22>
 800bf04:	2024      	movs	r0, #36	; 0x24
 800bf06:	f000 f911 	bl	800c12c <malloc>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	63e8      	str	r0, [r5, #60]	; 0x3c
 800bf0e:	b920      	cbnz	r0, 800bf1a <localtime+0x22>
 800bf10:	4b06      	ldr	r3, [pc, #24]	; (800bf2c <localtime+0x34>)
 800bf12:	4807      	ldr	r0, [pc, #28]	; (800bf30 <localtime+0x38>)
 800bf14:	2132      	movs	r1, #50	; 0x32
 800bf16:	f001 fd6f 	bl	800d9f8 <__assert_func>
 800bf1a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf22:	f000 b807 	b.w	800bf34 <localtime_r>
 800bf26:	bf00      	nop
 800bf28:	20000020 	.word	0x20000020
 800bf2c:	080114fc 	.word	0x080114fc
 800bf30:	08011513 	.word	0x08011513

0800bf34 <localtime_r>:
 800bf34:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bf38:	4607      	mov	r7, r0
 800bf3a:	9101      	str	r1, [sp, #4]
 800bf3c:	f002 fd2e 	bl	800e99c <__gettzinfo>
 800bf40:	9901      	ldr	r1, [sp, #4]
 800bf42:	4680      	mov	r8, r0
 800bf44:	4638      	mov	r0, r7
 800bf46:	f002 fd2d 	bl	800e9a4 <gmtime_r>
 800bf4a:	6943      	ldr	r3, [r0, #20]
 800bf4c:	079a      	lsls	r2, r3, #30
 800bf4e:	4604      	mov	r4, r0
 800bf50:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 800bf54:	d105      	bne.n	800bf62 <localtime_r+0x2e>
 800bf56:	2264      	movs	r2, #100	; 0x64
 800bf58:	fb96 f3f2 	sdiv	r3, r6, r2
 800bf5c:	fb02 6313 	mls	r3, r2, r3, r6
 800bf60:	bb7b      	cbnz	r3, 800bfc2 <localtime_r+0x8e>
 800bf62:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800bf66:	fb96 f5f3 	sdiv	r5, r6, r3
 800bf6a:	fb03 6515 	mls	r5, r3, r5, r6
 800bf6e:	fab5 f585 	clz	r5, r5
 800bf72:	096d      	lsrs	r5, r5, #5
 800bf74:	4b68      	ldr	r3, [pc, #416]	; (800c118 <localtime_r+0x1e4>)
 800bf76:	2230      	movs	r2, #48	; 0x30
 800bf78:	fb02 3505 	mla	r5, r2, r5, r3
 800bf7c:	f001 fb9c 	bl	800d6b8 <__tz_lock>
 800bf80:	f001 fba6 	bl	800d6d0 <_tzset_unlocked>
 800bf84:	4b65      	ldr	r3, [pc, #404]	; (800c11c <localtime_r+0x1e8>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	b353      	cbz	r3, 800bfe0 <localtime_r+0xac>
 800bf8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bf8e:	42b3      	cmp	r3, r6
 800bf90:	d119      	bne.n	800bfc6 <localtime_r+0x92>
 800bf92:	f8d8 1000 	ldr.w	r1, [r8]
 800bf96:	e9d7 6700 	ldrd	r6, r7, [r7]
 800bf9a:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 800bf9e:	b9d1      	cbnz	r1, 800bfd6 <localtime_r+0xa2>
 800bfa0:	4296      	cmp	r6, r2
 800bfa2:	eb77 0303 	sbcs.w	r3, r7, r3
 800bfa6:	da23      	bge.n	800bff0 <localtime_r+0xbc>
 800bfa8:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 800bfac:	4296      	cmp	r6, r2
 800bfae:	eb77 0303 	sbcs.w	r3, r7, r3
 800bfb2:	bfb4      	ite	lt
 800bfb4:	2301      	movlt	r3, #1
 800bfb6:	2300      	movge	r3, #0
 800bfb8:	6223      	str	r3, [r4, #32]
 800bfba:	db1b      	blt.n	800bff4 <localtime_r+0xc0>
 800bfbc:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 800bfc0:	e01a      	b.n	800bff8 <localtime_r+0xc4>
 800bfc2:	2501      	movs	r5, #1
 800bfc4:	e7d6      	b.n	800bf74 <localtime_r+0x40>
 800bfc6:	4630      	mov	r0, r6
 800bfc8:	f001 face 	bl	800d568 <__tzcalc_limits>
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	d1e0      	bne.n	800bf92 <localtime_r+0x5e>
 800bfd0:	f04f 33ff 	mov.w	r3, #4294967295
 800bfd4:	e004      	b.n	800bfe0 <localtime_r+0xac>
 800bfd6:	4296      	cmp	r6, r2
 800bfd8:	eb77 0303 	sbcs.w	r3, r7, r3
 800bfdc:	da02      	bge.n	800bfe4 <localtime_r+0xb0>
 800bfde:	2300      	movs	r3, #0
 800bfe0:	6223      	str	r3, [r4, #32]
 800bfe2:	e7eb      	b.n	800bfbc <localtime_r+0x88>
 800bfe4:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 800bfe8:	4296      	cmp	r6, r2
 800bfea:	eb77 0303 	sbcs.w	r3, r7, r3
 800bfee:	daf6      	bge.n	800bfde <localtime_r+0xaa>
 800bff0:	2301      	movs	r3, #1
 800bff2:	6223      	str	r3, [r4, #32]
 800bff4:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 800bff8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800bffc:	203c      	movs	r0, #60	; 0x3c
 800bffe:	fb91 f6f3 	sdiv	r6, r1, r3
 800c002:	fb03 1316 	mls	r3, r3, r6, r1
 800c006:	6861      	ldr	r1, [r4, #4]
 800c008:	fb93 f2f0 	sdiv	r2, r3, r0
 800c00c:	fb00 3012 	mls	r0, r0, r2, r3
 800c010:	6823      	ldr	r3, [r4, #0]
 800c012:	1a89      	subs	r1, r1, r2
 800c014:	68a2      	ldr	r2, [r4, #8]
 800c016:	6061      	str	r1, [r4, #4]
 800c018:	1a1b      	subs	r3, r3, r0
 800c01a:	1b92      	subs	r2, r2, r6
 800c01c:	2b3b      	cmp	r3, #59	; 0x3b
 800c01e:	6023      	str	r3, [r4, #0]
 800c020:	60a2      	str	r2, [r4, #8]
 800c022:	dd35      	ble.n	800c090 <localtime_r+0x15c>
 800c024:	3101      	adds	r1, #1
 800c026:	6061      	str	r1, [r4, #4]
 800c028:	3b3c      	subs	r3, #60	; 0x3c
 800c02a:	6023      	str	r3, [r4, #0]
 800c02c:	6863      	ldr	r3, [r4, #4]
 800c02e:	2b3b      	cmp	r3, #59	; 0x3b
 800c030:	dd34      	ble.n	800c09c <localtime_r+0x168>
 800c032:	3201      	adds	r2, #1
 800c034:	60a2      	str	r2, [r4, #8]
 800c036:	3b3c      	subs	r3, #60	; 0x3c
 800c038:	6063      	str	r3, [r4, #4]
 800c03a:	68a3      	ldr	r3, [r4, #8]
 800c03c:	2b17      	cmp	r3, #23
 800c03e:	dd33      	ble.n	800c0a8 <localtime_r+0x174>
 800c040:	69e2      	ldr	r2, [r4, #28]
 800c042:	3201      	adds	r2, #1
 800c044:	61e2      	str	r2, [r4, #28]
 800c046:	69a2      	ldr	r2, [r4, #24]
 800c048:	3201      	adds	r2, #1
 800c04a:	2a06      	cmp	r2, #6
 800c04c:	bfc8      	it	gt
 800c04e:	2200      	movgt	r2, #0
 800c050:	61a2      	str	r2, [r4, #24]
 800c052:	68e2      	ldr	r2, [r4, #12]
 800c054:	3b18      	subs	r3, #24
 800c056:	3201      	adds	r2, #1
 800c058:	60a3      	str	r3, [r4, #8]
 800c05a:	6923      	ldr	r3, [r4, #16]
 800c05c:	60e2      	str	r2, [r4, #12]
 800c05e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800c062:	428a      	cmp	r2, r1
 800c064:	dd0e      	ble.n	800c084 <localtime_r+0x150>
 800c066:	2b0b      	cmp	r3, #11
 800c068:	eba2 0201 	sub.w	r2, r2, r1
 800c06c:	60e2      	str	r2, [r4, #12]
 800c06e:	f103 0201 	add.w	r2, r3, #1
 800c072:	bf09      	itett	eq
 800c074:	6963      	ldreq	r3, [r4, #20]
 800c076:	6122      	strne	r2, [r4, #16]
 800c078:	2200      	moveq	r2, #0
 800c07a:	3301      	addeq	r3, #1
 800c07c:	bf02      	ittt	eq
 800c07e:	6122      	streq	r2, [r4, #16]
 800c080:	6163      	streq	r3, [r4, #20]
 800c082:	61e2      	streq	r2, [r4, #28]
 800c084:	f001 fb1e 	bl	800d6c4 <__tz_unlock>
 800c088:	4620      	mov	r0, r4
 800c08a:	b002      	add	sp, #8
 800c08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c090:	2b00      	cmp	r3, #0
 800c092:	dacb      	bge.n	800c02c <localtime_r+0xf8>
 800c094:	3901      	subs	r1, #1
 800c096:	6061      	str	r1, [r4, #4]
 800c098:	333c      	adds	r3, #60	; 0x3c
 800c09a:	e7c6      	b.n	800c02a <localtime_r+0xf6>
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	dacc      	bge.n	800c03a <localtime_r+0x106>
 800c0a0:	3a01      	subs	r2, #1
 800c0a2:	60a2      	str	r2, [r4, #8]
 800c0a4:	333c      	adds	r3, #60	; 0x3c
 800c0a6:	e7c7      	b.n	800c038 <localtime_r+0x104>
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	daeb      	bge.n	800c084 <localtime_r+0x150>
 800c0ac:	69e2      	ldr	r2, [r4, #28]
 800c0ae:	3a01      	subs	r2, #1
 800c0b0:	61e2      	str	r2, [r4, #28]
 800c0b2:	69a2      	ldr	r2, [r4, #24]
 800c0b4:	3a01      	subs	r2, #1
 800c0b6:	bf48      	it	mi
 800c0b8:	2206      	movmi	r2, #6
 800c0ba:	61a2      	str	r2, [r4, #24]
 800c0bc:	68e2      	ldr	r2, [r4, #12]
 800c0be:	3318      	adds	r3, #24
 800c0c0:	3a01      	subs	r2, #1
 800c0c2:	60e2      	str	r2, [r4, #12]
 800c0c4:	60a3      	str	r3, [r4, #8]
 800c0c6:	2a00      	cmp	r2, #0
 800c0c8:	d1dc      	bne.n	800c084 <localtime_r+0x150>
 800c0ca:	6923      	ldr	r3, [r4, #16]
 800c0cc:	3b01      	subs	r3, #1
 800c0ce:	d405      	bmi.n	800c0dc <localtime_r+0x1a8>
 800c0d0:	6123      	str	r3, [r4, #16]
 800c0d2:	6923      	ldr	r3, [r4, #16]
 800c0d4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800c0d8:	60e3      	str	r3, [r4, #12]
 800c0da:	e7d3      	b.n	800c084 <localtime_r+0x150>
 800c0dc:	230b      	movs	r3, #11
 800c0de:	6123      	str	r3, [r4, #16]
 800c0e0:	6963      	ldr	r3, [r4, #20]
 800c0e2:	1e5a      	subs	r2, r3, #1
 800c0e4:	6162      	str	r2, [r4, #20]
 800c0e6:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 800c0ea:	0793      	lsls	r3, r2, #30
 800c0ec:	d105      	bne.n	800c0fa <localtime_r+0x1c6>
 800c0ee:	2164      	movs	r1, #100	; 0x64
 800c0f0:	fb92 f3f1 	sdiv	r3, r2, r1
 800c0f4:	fb01 2313 	mls	r3, r1, r3, r2
 800c0f8:	b963      	cbnz	r3, 800c114 <localtime_r+0x1e0>
 800c0fa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800c0fe:	fb92 f3f1 	sdiv	r3, r2, r1
 800c102:	fb01 2313 	mls	r3, r1, r3, r2
 800c106:	fab3 f383 	clz	r3, r3
 800c10a:	095b      	lsrs	r3, r3, #5
 800c10c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800c110:	61e3      	str	r3, [r4, #28]
 800c112:	e7de      	b.n	800c0d2 <localtime_r+0x19e>
 800c114:	2301      	movs	r3, #1
 800c116:	e7f9      	b.n	800c10c <localtime_r+0x1d8>
 800c118:	080115d4 	.word	0x080115d4
 800c11c:	20004ed4 	.word	0x20004ed4

0800c120 <__retarget_lock_init_recursive>:
 800c120:	4770      	bx	lr

0800c122 <__retarget_lock_acquire>:
 800c122:	4770      	bx	lr

0800c124 <__retarget_lock_acquire_recursive>:
 800c124:	4770      	bx	lr

0800c126 <__retarget_lock_release>:
 800c126:	4770      	bx	lr

0800c128 <__retarget_lock_release_recursive>:
 800c128:	4770      	bx	lr
	...

0800c12c <malloc>:
 800c12c:	4b02      	ldr	r3, [pc, #8]	; (800c138 <malloc+0xc>)
 800c12e:	4601      	mov	r1, r0
 800c130:	6818      	ldr	r0, [r3, #0]
 800c132:	f000 bb09 	b.w	800c748 <_malloc_r>
 800c136:	bf00      	nop
 800c138:	20000020 	.word	0x20000020

0800c13c <free>:
 800c13c:	4b02      	ldr	r3, [pc, #8]	; (800c148 <free+0xc>)
 800c13e:	4601      	mov	r1, r0
 800c140:	6818      	ldr	r0, [r3, #0]
 800c142:	f000 bab1 	b.w	800c6a8 <_free_r>
 800c146:	bf00      	nop
 800c148:	20000020 	.word	0x20000020

0800c14c <memcpy>:
 800c14c:	440a      	add	r2, r1
 800c14e:	4291      	cmp	r1, r2
 800c150:	f100 33ff 	add.w	r3, r0, #4294967295
 800c154:	d100      	bne.n	800c158 <memcpy+0xc>
 800c156:	4770      	bx	lr
 800c158:	b510      	push	{r4, lr}
 800c15a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c15e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c162:	4291      	cmp	r1, r2
 800c164:	d1f9      	bne.n	800c15a <memcpy+0xe>
 800c166:	bd10      	pop	{r4, pc}

0800c168 <memmove>:
 800c168:	4288      	cmp	r0, r1
 800c16a:	b510      	push	{r4, lr}
 800c16c:	eb01 0402 	add.w	r4, r1, r2
 800c170:	d902      	bls.n	800c178 <memmove+0x10>
 800c172:	4284      	cmp	r4, r0
 800c174:	4623      	mov	r3, r4
 800c176:	d807      	bhi.n	800c188 <memmove+0x20>
 800c178:	1e43      	subs	r3, r0, #1
 800c17a:	42a1      	cmp	r1, r4
 800c17c:	d008      	beq.n	800c190 <memmove+0x28>
 800c17e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c182:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c186:	e7f8      	b.n	800c17a <memmove+0x12>
 800c188:	4402      	add	r2, r0
 800c18a:	4601      	mov	r1, r0
 800c18c:	428a      	cmp	r2, r1
 800c18e:	d100      	bne.n	800c192 <memmove+0x2a>
 800c190:	bd10      	pop	{r4, pc}
 800c192:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c196:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c19a:	e7f7      	b.n	800c18c <memmove+0x24>

0800c19c <memset>:
 800c19c:	4402      	add	r2, r0
 800c19e:	4603      	mov	r3, r0
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d100      	bne.n	800c1a6 <memset+0xa>
 800c1a4:	4770      	bx	lr
 800c1a6:	f803 1b01 	strb.w	r1, [r3], #1
 800c1aa:	e7f9      	b.n	800c1a0 <memset+0x4>

0800c1ac <validate_structure>:
 800c1ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1ae:	6801      	ldr	r1, [r0, #0]
 800c1b0:	293b      	cmp	r1, #59	; 0x3b
 800c1b2:	4604      	mov	r4, r0
 800c1b4:	d911      	bls.n	800c1da <validate_structure+0x2e>
 800c1b6:	223c      	movs	r2, #60	; 0x3c
 800c1b8:	4668      	mov	r0, sp
 800c1ba:	f001 fc4b 	bl	800da54 <div>
 800c1be:	9a01      	ldr	r2, [sp, #4]
 800c1c0:	6863      	ldr	r3, [r4, #4]
 800c1c2:	9900      	ldr	r1, [sp, #0]
 800c1c4:	2a00      	cmp	r2, #0
 800c1c6:	440b      	add	r3, r1
 800c1c8:	6063      	str	r3, [r4, #4]
 800c1ca:	bfbb      	ittet	lt
 800c1cc:	323c      	addlt	r2, #60	; 0x3c
 800c1ce:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c1d2:	6022      	strge	r2, [r4, #0]
 800c1d4:	6022      	strlt	r2, [r4, #0]
 800c1d6:	bfb8      	it	lt
 800c1d8:	6063      	strlt	r3, [r4, #4]
 800c1da:	6861      	ldr	r1, [r4, #4]
 800c1dc:	293b      	cmp	r1, #59	; 0x3b
 800c1de:	d911      	bls.n	800c204 <validate_structure+0x58>
 800c1e0:	223c      	movs	r2, #60	; 0x3c
 800c1e2:	4668      	mov	r0, sp
 800c1e4:	f001 fc36 	bl	800da54 <div>
 800c1e8:	9a01      	ldr	r2, [sp, #4]
 800c1ea:	68a3      	ldr	r3, [r4, #8]
 800c1ec:	9900      	ldr	r1, [sp, #0]
 800c1ee:	2a00      	cmp	r2, #0
 800c1f0:	440b      	add	r3, r1
 800c1f2:	60a3      	str	r3, [r4, #8]
 800c1f4:	bfbb      	ittet	lt
 800c1f6:	323c      	addlt	r2, #60	; 0x3c
 800c1f8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c1fc:	6062      	strge	r2, [r4, #4]
 800c1fe:	6062      	strlt	r2, [r4, #4]
 800c200:	bfb8      	it	lt
 800c202:	60a3      	strlt	r3, [r4, #8]
 800c204:	68a1      	ldr	r1, [r4, #8]
 800c206:	2917      	cmp	r1, #23
 800c208:	d911      	bls.n	800c22e <validate_structure+0x82>
 800c20a:	2218      	movs	r2, #24
 800c20c:	4668      	mov	r0, sp
 800c20e:	f001 fc21 	bl	800da54 <div>
 800c212:	9a01      	ldr	r2, [sp, #4]
 800c214:	68e3      	ldr	r3, [r4, #12]
 800c216:	9900      	ldr	r1, [sp, #0]
 800c218:	2a00      	cmp	r2, #0
 800c21a:	440b      	add	r3, r1
 800c21c:	60e3      	str	r3, [r4, #12]
 800c21e:	bfbb      	ittet	lt
 800c220:	3218      	addlt	r2, #24
 800c222:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c226:	60a2      	strge	r2, [r4, #8]
 800c228:	60a2      	strlt	r2, [r4, #8]
 800c22a:	bfb8      	it	lt
 800c22c:	60e3      	strlt	r3, [r4, #12]
 800c22e:	6921      	ldr	r1, [r4, #16]
 800c230:	290b      	cmp	r1, #11
 800c232:	d911      	bls.n	800c258 <validate_structure+0xac>
 800c234:	220c      	movs	r2, #12
 800c236:	4668      	mov	r0, sp
 800c238:	f001 fc0c 	bl	800da54 <div>
 800c23c:	9a01      	ldr	r2, [sp, #4]
 800c23e:	6963      	ldr	r3, [r4, #20]
 800c240:	9900      	ldr	r1, [sp, #0]
 800c242:	2a00      	cmp	r2, #0
 800c244:	440b      	add	r3, r1
 800c246:	6163      	str	r3, [r4, #20]
 800c248:	bfbb      	ittet	lt
 800c24a:	320c      	addlt	r2, #12
 800c24c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c250:	6122      	strge	r2, [r4, #16]
 800c252:	6122      	strlt	r2, [r4, #16]
 800c254:	bfb8      	it	lt
 800c256:	6163      	strlt	r3, [r4, #20]
 800c258:	6963      	ldr	r3, [r4, #20]
 800c25a:	0799      	lsls	r1, r3, #30
 800c25c:	d120      	bne.n	800c2a0 <validate_structure+0xf4>
 800c25e:	2164      	movs	r1, #100	; 0x64
 800c260:	fb93 f2f1 	sdiv	r2, r3, r1
 800c264:	fb01 3212 	mls	r2, r1, r2, r3
 800c268:	b9e2      	cbnz	r2, 800c2a4 <validate_structure+0xf8>
 800c26a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800c26e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800c272:	fb93 f2f1 	sdiv	r2, r3, r1
 800c276:	fb01 3312 	mls	r3, r1, r2, r3
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	bf14      	ite	ne
 800c27e:	231c      	movne	r3, #28
 800c280:	231d      	moveq	r3, #29
 800c282:	68e2      	ldr	r2, [r4, #12]
 800c284:	2a00      	cmp	r2, #0
 800c286:	dc0f      	bgt.n	800c2a8 <validate_structure+0xfc>
 800c288:	4f33      	ldr	r7, [pc, #204]	; (800c358 <validate_structure+0x1ac>)
 800c28a:	260b      	movs	r6, #11
 800c28c:	2064      	movs	r0, #100	; 0x64
 800c28e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800c292:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800c296:	f1bc 0f00 	cmp.w	ip, #0
 800c29a:	dd31      	ble.n	800c300 <validate_structure+0x154>
 800c29c:	b003      	add	sp, #12
 800c29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2a0:	231c      	movs	r3, #28
 800c2a2:	e7ee      	b.n	800c282 <validate_structure+0xd6>
 800c2a4:	231d      	movs	r3, #29
 800c2a6:	e7ec      	b.n	800c282 <validate_structure+0xd6>
 800c2a8:	4f2b      	ldr	r7, [pc, #172]	; (800c358 <validate_structure+0x1ac>)
 800c2aa:	f04f 0c00 	mov.w	ip, #0
 800c2ae:	2564      	movs	r5, #100	; 0x64
 800c2b0:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800c2b4:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800c2b8:	2a01      	cmp	r2, #1
 800c2ba:	bf14      	ite	ne
 800c2bc:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 800c2c0:	4618      	moveq	r0, r3
 800c2c2:	4281      	cmp	r1, r0
 800c2c4:	ddea      	ble.n	800c29c <validate_structure+0xf0>
 800c2c6:	3201      	adds	r2, #1
 800c2c8:	1a09      	subs	r1, r1, r0
 800c2ca:	2a0c      	cmp	r2, #12
 800c2cc:	60e1      	str	r1, [r4, #12]
 800c2ce:	6122      	str	r2, [r4, #16]
 800c2d0:	d1f0      	bne.n	800c2b4 <validate_structure+0x108>
 800c2d2:	6963      	ldr	r3, [r4, #20]
 800c2d4:	1c5a      	adds	r2, r3, #1
 800c2d6:	0791      	lsls	r1, r2, #30
 800c2d8:	e9c4 c204 	strd	ip, r2, [r4, #16]
 800c2dc:	d137      	bne.n	800c34e <validate_structure+0x1a2>
 800c2de:	fb92 f1f5 	sdiv	r1, r2, r5
 800c2e2:	fb05 2211 	mls	r2, r5, r1, r2
 800c2e6:	2a00      	cmp	r2, #0
 800c2e8:	d133      	bne.n	800c352 <validate_structure+0x1a6>
 800c2ea:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800c2ee:	fb93 f2f6 	sdiv	r2, r3, r6
 800c2f2:	fb06 3312 	mls	r3, r6, r2, r3
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	bf14      	ite	ne
 800c2fa:	231c      	movne	r3, #28
 800c2fc:	231d      	moveq	r3, #29
 800c2fe:	e7d9      	b.n	800c2b4 <validate_structure+0x108>
 800c300:	6921      	ldr	r1, [r4, #16]
 800c302:	3901      	subs	r1, #1
 800c304:	6121      	str	r1, [r4, #16]
 800c306:	3101      	adds	r1, #1
 800c308:	d114      	bne.n	800c334 <validate_structure+0x188>
 800c30a:	6963      	ldr	r3, [r4, #20]
 800c30c:	1e59      	subs	r1, r3, #1
 800c30e:	078a      	lsls	r2, r1, #30
 800c310:	e9c4 6104 	strd	r6, r1, [r4, #16]
 800c314:	d117      	bne.n	800c346 <validate_structure+0x19a>
 800c316:	fb91 f2f0 	sdiv	r2, r1, r0
 800c31a:	fb00 1112 	mls	r1, r0, r2, r1
 800c31e:	b9a1      	cbnz	r1, 800c34a <validate_structure+0x19e>
 800c320:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800c324:	fb93 f2f5 	sdiv	r2, r3, r5
 800c328:	fb05 3312 	mls	r3, r5, r2, r3
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	bf14      	ite	ne
 800c330:	231c      	movne	r3, #28
 800c332:	231d      	moveq	r3, #29
 800c334:	6922      	ldr	r2, [r4, #16]
 800c336:	2a01      	cmp	r2, #1
 800c338:	bf14      	ite	ne
 800c33a:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 800c33e:	461a      	moveq	r2, r3
 800c340:	4462      	add	r2, ip
 800c342:	60e2      	str	r2, [r4, #12]
 800c344:	e7a5      	b.n	800c292 <validate_structure+0xe6>
 800c346:	231c      	movs	r3, #28
 800c348:	e7f4      	b.n	800c334 <validate_structure+0x188>
 800c34a:	231d      	movs	r3, #29
 800c34c:	e7f2      	b.n	800c334 <validate_structure+0x188>
 800c34e:	231c      	movs	r3, #28
 800c350:	e7b0      	b.n	800c2b4 <validate_structure+0x108>
 800c352:	231d      	movs	r3, #29
 800c354:	e7ae      	b.n	800c2b4 <validate_structure+0x108>
 800c356:	bf00      	nop
 800c358:	08011574 	.word	0x08011574

0800c35c <mktime>:
 800c35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c360:	b08b      	sub	sp, #44	; 0x2c
 800c362:	4605      	mov	r5, r0
 800c364:	f002 fb1a 	bl	800e99c <__gettzinfo>
 800c368:	4607      	mov	r7, r0
 800c36a:	4628      	mov	r0, r5
 800c36c:	f7ff ff1e 	bl	800c1ac <validate_structure>
 800c370:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c374:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 800c378:	68a8      	ldr	r0, [r5, #8]
 800c37a:	696e      	ldr	r6, [r5, #20]
 800c37c:	fb0a 2303 	mla	r3, sl, r3, r2
 800c380:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 800c384:	fb0a 3a00 	mla	sl, sl, r0, r3
 800c388:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 800c38c:	4ac3      	ldr	r2, [pc, #780]	; (800c69c <mktime+0x340>)
 800c38e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c392:	3c01      	subs	r4, #1
 800c394:	2b01      	cmp	r3, #1
 800c396:	4414      	add	r4, r2
 800c398:	dd11      	ble.n	800c3be <mktime+0x62>
 800c39a:	07b1      	lsls	r1, r6, #30
 800c39c:	d10f      	bne.n	800c3be <mktime+0x62>
 800c39e:	2264      	movs	r2, #100	; 0x64
 800c3a0:	fb96 f3f2 	sdiv	r3, r6, r2
 800c3a4:	fb02 6313 	mls	r3, r2, r3, r6
 800c3a8:	b943      	cbnz	r3, 800c3bc <mktime+0x60>
 800c3aa:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 800c3ae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c3b2:	fb91 f3f2 	sdiv	r3, r1, r2
 800c3b6:	fb02 1313 	mls	r3, r2, r3, r1
 800c3ba:	b903      	cbnz	r3, 800c3be <mktime+0x62>
 800c3bc:	3401      	adds	r4, #1
 800c3be:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800c3c2:	3310      	adds	r3, #16
 800c3c4:	f644 6220 	movw	r2, #20000	; 0x4e20
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	61ec      	str	r4, [r5, #28]
 800c3cc:	f200 8161 	bhi.w	800c692 <mktime+0x336>
 800c3d0:	2e46      	cmp	r6, #70	; 0x46
 800c3d2:	dd77      	ble.n	800c4c4 <mktime+0x168>
 800c3d4:	2346      	movs	r3, #70	; 0x46
 800c3d6:	f240 1e6d 	movw	lr, #365	; 0x16d
 800c3da:	2164      	movs	r1, #100	; 0x64
 800c3dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c3e0:	079a      	lsls	r2, r3, #30
 800c3e2:	d169      	bne.n	800c4b8 <mktime+0x15c>
 800c3e4:	fb93 f2f1 	sdiv	r2, r3, r1
 800c3e8:	fb01 3212 	mls	r2, r1, r2, r3
 800c3ec:	2a00      	cmp	r2, #0
 800c3ee:	d166      	bne.n	800c4be <mktime+0x162>
 800c3f0:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 800c3f4:	fb9c f2f0 	sdiv	r2, ip, r0
 800c3f8:	fb00 c212 	mls	r2, r0, r2, ip
 800c3fc:	2a00      	cmp	r2, #0
 800c3fe:	bf14      	ite	ne
 800c400:	4672      	movne	r2, lr
 800c402:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c406:	3301      	adds	r3, #1
 800c408:	429e      	cmp	r6, r3
 800c40a:	4414      	add	r4, r2
 800c40c:	d1e8      	bne.n	800c3e0 <mktime+0x84>
 800c40e:	4ba4      	ldr	r3, [pc, #656]	; (800c6a0 <mktime+0x344>)
 800c410:	ea4f 7bea 	mov.w	fp, sl, asr #31
 800c414:	fbc3 ab04 	smlal	sl, fp, r3, r4
 800c418:	f001 f94e 	bl	800d6b8 <__tz_lock>
 800c41c:	f001 f958 	bl	800d6d0 <_tzset_unlocked>
 800c420:	4ba0      	ldr	r3, [pc, #640]	; (800c6a4 <mktime+0x348>)
 800c422:	f8d3 9000 	ldr.w	r9, [r3]
 800c426:	f1b9 0f00 	cmp.w	r9, #0
 800c42a:	d03f      	beq.n	800c4ac <mktime+0x150>
 800c42c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800c430:	6968      	ldr	r0, [r5, #20]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f1b9 0f01 	cmp.w	r9, #1
 800c438:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800c43c:	46c8      	mov	r8, r9
 800c43e:	bfa8      	it	ge
 800c440:	f04f 0801 	movge.w	r8, #1
 800c444:	4283      	cmp	r3, r0
 800c446:	d17f      	bne.n	800c548 <mktime+0x1ec>
 800c448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c44a:	4619      	mov	r1, r3
 800c44c:	17da      	asrs	r2, r3, #31
 800c44e:	e9cd 1200 	strd	r1, r2, [sp]
 800c452:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c456:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800c45a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c45e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c460:	1a80      	subs	r0, r0, r2
 800c462:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 800c466:	4582      	cmp	sl, r0
 800c468:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c46c:	eb7b 0101 	sbcs.w	r1, fp, r1
 800c470:	da71      	bge.n	800c556 <mktime+0x1fa>
 800c472:	9800      	ldr	r0, [sp, #0]
 800c474:	6a39      	ldr	r1, [r7, #32]
 800c476:	1a09      	subs	r1, r1, r0
 800c478:	9104      	str	r1, [sp, #16]
 800c47a:	9801      	ldr	r0, [sp, #4]
 800c47c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c47e:	eb61 0100 	sbc.w	r1, r1, r0
 800c482:	9105      	str	r1, [sp, #20]
 800c484:	6839      	ldr	r1, [r7, #0]
 800c486:	2900      	cmp	r1, #0
 800c488:	d075      	beq.n	800c576 <mktime+0x21a>
 800c48a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c48e:	4582      	cmp	sl, r0
 800c490:	eb7b 0101 	sbcs.w	r1, fp, r1
 800c494:	db05      	blt.n	800c4a2 <mktime+0x146>
 800c496:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c49a:	4582      	cmp	sl, r0
 800c49c:	eb7b 0101 	sbcs.w	r1, fp, r1
 800c4a0:	db6f      	blt.n	800c582 <mktime+0x226>
 800c4a2:	f1b9 0f00 	cmp.w	r9, #0
 800c4a6:	f04f 0900 	mov.w	r9, #0
 800c4aa:	da6f      	bge.n	800c58c <mktime+0x230>
 800c4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ae:	eb1a 0a03 	adds.w	sl, sl, r3
 800c4b2:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 800c4b6:	e0ae      	b.n	800c616 <mktime+0x2ba>
 800c4b8:	f240 126d 	movw	r2, #365	; 0x16d
 800c4bc:	e7a3      	b.n	800c406 <mktime+0xaa>
 800c4be:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c4c2:	e7a0      	b.n	800c406 <mktime+0xaa>
 800c4c4:	d0a3      	beq.n	800c40e <mktime+0xb2>
 800c4c6:	2345      	movs	r3, #69	; 0x45
 800c4c8:	f240 1e6d 	movw	lr, #365	; 0x16d
 800c4cc:	2164      	movs	r1, #100	; 0x64
 800c4ce:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c4d2:	e012      	b.n	800c4fa <mktime+0x19e>
 800c4d4:	bb62      	cbnz	r2, 800c530 <mktime+0x1d4>
 800c4d6:	fb93 f2f1 	sdiv	r2, r3, r1
 800c4da:	fb01 3212 	mls	r2, r1, r2, r3
 800c4de:	bb52      	cbnz	r2, 800c536 <mktime+0x1da>
 800c4e0:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 800c4e4:	fb9c f2f0 	sdiv	r2, ip, r0
 800c4e8:	fb00 c212 	mls	r2, r0, r2, ip
 800c4ec:	2a00      	cmp	r2, #0
 800c4ee:	bf14      	ite	ne
 800c4f0:	4672      	movne	r2, lr
 800c4f2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c4f6:	1aa4      	subs	r4, r4, r2
 800c4f8:	3b01      	subs	r3, #1
 800c4fa:	429e      	cmp	r6, r3
 800c4fc:	f003 0203 	and.w	r2, r3, #3
 800c500:	dbe8      	blt.n	800c4d4 <mktime+0x178>
 800c502:	b9da      	cbnz	r2, 800c53c <mktime+0x1e0>
 800c504:	2264      	movs	r2, #100	; 0x64
 800c506:	fb96 f3f2 	sdiv	r3, r6, r2
 800c50a:	fb02 6313 	mls	r3, r2, r3, r6
 800c50e:	b9c3      	cbnz	r3, 800c542 <mktime+0x1e6>
 800c510:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 800c514:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c518:	fb91 f3f2 	sdiv	r3, r1, r2
 800c51c:	fb02 1313 	mls	r3, r2, r3, r1
 800c520:	2b00      	cmp	r3, #0
 800c522:	f240 136d 	movw	r3, #365	; 0x16d
 800c526:	bf08      	it	eq
 800c528:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800c52c:	1ae4      	subs	r4, r4, r3
 800c52e:	e76e      	b.n	800c40e <mktime+0xb2>
 800c530:	f240 126d 	movw	r2, #365	; 0x16d
 800c534:	e7df      	b.n	800c4f6 <mktime+0x19a>
 800c536:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c53a:	e7dc      	b.n	800c4f6 <mktime+0x19a>
 800c53c:	f240 136d 	movw	r3, #365	; 0x16d
 800c540:	e7f4      	b.n	800c52c <mktime+0x1d0>
 800c542:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800c546:	e7f1      	b.n	800c52c <mktime+0x1d0>
 800c548:	f001 f80e 	bl	800d568 <__tzcalc_limits>
 800c54c:	2800      	cmp	r0, #0
 800c54e:	f47f af7b 	bne.w	800c448 <mktime+0xec>
 800c552:	46c1      	mov	r9, r8
 800c554:	e054      	b.n	800c600 <mktime+0x2a4>
 800c556:	9800      	ldr	r0, [sp, #0]
 800c558:	9902      	ldr	r1, [sp, #8]
 800c55a:	1a09      	subs	r1, r1, r0
 800c55c:	9108      	str	r1, [sp, #32]
 800c55e:	9801      	ldr	r0, [sp, #4]
 800c560:	9903      	ldr	r1, [sp, #12]
 800c562:	eb61 0100 	sbc.w	r1, r1, r0
 800c566:	9109      	str	r1, [sp, #36]	; 0x24
 800c568:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c56c:	4582      	cmp	sl, r0
 800c56e:	eb7b 0101 	sbcs.w	r1, fp, r1
 800c572:	dbee      	blt.n	800c552 <mktime+0x1f6>
 800c574:	e77d      	b.n	800c472 <mktime+0x116>
 800c576:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c57a:	4582      	cmp	sl, r0
 800c57c:	eb7b 0101 	sbcs.w	r1, fp, r1
 800c580:	db89      	blt.n	800c496 <mktime+0x13a>
 800c582:	f1b9 0f00 	cmp.w	r9, #0
 800c586:	db3f      	blt.n	800c608 <mktime+0x2ac>
 800c588:	f04f 0901 	mov.w	r9, #1
 800c58c:	ea88 0809 	eor.w	r8, r8, r9
 800c590:	f1b8 0f01 	cmp.w	r8, #1
 800c594:	d134      	bne.n	800c600 <mktime+0x2a4>
 800c596:	f1b9 0f00 	cmp.w	r9, #0
 800c59a:	d04f      	beq.n	800c63c <mktime+0x2e0>
 800c59c:	1ad3      	subs	r3, r2, r3
 800c59e:	682a      	ldr	r2, [r5, #0]
 800c5a0:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800c5a4:	441a      	add	r2, r3
 800c5a6:	eb1a 0a03 	adds.w	sl, sl, r3
 800c5aa:	602a      	str	r2, [r5, #0]
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 800c5b2:	f7ff fdfb 	bl	800c1ac <validate_structure>
 800c5b6:	68ea      	ldr	r2, [r5, #12]
 800c5b8:	ebb2 0208 	subs.w	r2, r2, r8
 800c5bc:	d020      	beq.n	800c600 <mktime+0x2a4>
 800c5be:	2a01      	cmp	r2, #1
 800c5c0:	dc3e      	bgt.n	800c640 <mktime+0x2e4>
 800c5c2:	1c90      	adds	r0, r2, #2
 800c5c4:	bfd8      	it	le
 800c5c6:	2201      	movle	r2, #1
 800c5c8:	69eb      	ldr	r3, [r5, #28]
 800c5ca:	18d3      	adds	r3, r2, r3
 800c5cc:	4414      	add	r4, r2
 800c5ce:	d540      	bpl.n	800c652 <mktime+0x2f6>
 800c5d0:	1e72      	subs	r2, r6, #1
 800c5d2:	0791      	lsls	r1, r2, #30
 800c5d4:	d137      	bne.n	800c646 <mktime+0x2ea>
 800c5d6:	2164      	movs	r1, #100	; 0x64
 800c5d8:	fb92 f3f1 	sdiv	r3, r2, r1
 800c5dc:	fb01 2313 	mls	r3, r1, r3, r2
 800c5e0:	bba3      	cbnz	r3, 800c64c <mktime+0x2f0>
 800c5e2:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800c5e6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c5ea:	fb96 f3f2 	sdiv	r3, r6, r2
 800c5ee:	fb02 6613 	mls	r6, r2, r3, r6
 800c5f2:	2e00      	cmp	r6, #0
 800c5f4:	f240 136d 	movw	r3, #365	; 0x16d
 800c5f8:	bf18      	it	ne
 800c5fa:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800c5fe:	61eb      	str	r3, [r5, #28]
 800c600:	f1b9 0f01 	cmp.w	r9, #1
 800c604:	f47f af52 	bne.w	800c4ac <mktime+0x150>
 800c608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c60a:	eb1a 0a03 	adds.w	sl, sl, r3
 800c60e:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 800c612:	f04f 0901 	mov.w	r9, #1
 800c616:	f001 f855 	bl	800d6c4 <__tz_unlock>
 800c61a:	3404      	adds	r4, #4
 800c61c:	2307      	movs	r3, #7
 800c61e:	fb94 f3f3 	sdiv	r3, r4, r3
 800c622:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c626:	1ae4      	subs	r4, r4, r3
 800c628:	bf48      	it	mi
 800c62a:	3407      	addmi	r4, #7
 800c62c:	f8c5 9020 	str.w	r9, [r5, #32]
 800c630:	61ac      	str	r4, [r5, #24]
 800c632:	4650      	mov	r0, sl
 800c634:	4659      	mov	r1, fp
 800c636:	b00b      	add	sp, #44	; 0x2c
 800c638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c63c:	1a9b      	subs	r3, r3, r2
 800c63e:	e7ae      	b.n	800c59e <mktime+0x242>
 800c640:	f04f 32ff 	mov.w	r2, #4294967295
 800c644:	e7c0      	b.n	800c5c8 <mktime+0x26c>
 800c646:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800c64a:	e7d8      	b.n	800c5fe <mktime+0x2a2>
 800c64c:	f240 136d 	movw	r3, #365	; 0x16d
 800c650:	e7d5      	b.n	800c5fe <mktime+0x2a2>
 800c652:	07b2      	lsls	r2, r6, #30
 800c654:	d117      	bne.n	800c686 <mktime+0x32a>
 800c656:	2164      	movs	r1, #100	; 0x64
 800c658:	fb96 f2f1 	sdiv	r2, r6, r1
 800c65c:	fb01 6212 	mls	r2, r1, r2, r6
 800c660:	b9a2      	cbnz	r2, 800c68c <mktime+0x330>
 800c662:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800c666:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800c66a:	fb96 f2f1 	sdiv	r2, r6, r1
 800c66e:	fb01 6612 	mls	r6, r1, r2, r6
 800c672:	2e00      	cmp	r6, #0
 800c674:	f240 126d 	movw	r2, #365	; 0x16d
 800c678:	bf08      	it	eq
 800c67a:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c67e:	4293      	cmp	r3, r2
 800c680:	bfa8      	it	ge
 800c682:	1a9b      	subge	r3, r3, r2
 800c684:	e7bb      	b.n	800c5fe <mktime+0x2a2>
 800c686:	f240 126d 	movw	r2, #365	; 0x16d
 800c68a:	e7f8      	b.n	800c67e <mktime+0x322>
 800c68c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c690:	e7f5      	b.n	800c67e <mktime+0x322>
 800c692:	f04f 3aff 	mov.w	sl, #4294967295
 800c696:	f04f 3bff 	mov.w	fp, #4294967295
 800c69a:	e7ca      	b.n	800c632 <mktime+0x2d6>
 800c69c:	080115a4 	.word	0x080115a4
 800c6a0:	00015180 	.word	0x00015180
 800c6a4:	20004ed4 	.word	0x20004ed4

0800c6a8 <_free_r>:
 800c6a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6aa:	2900      	cmp	r1, #0
 800c6ac:	d048      	beq.n	800c740 <_free_r+0x98>
 800c6ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6b2:	9001      	str	r0, [sp, #4]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	f1a1 0404 	sub.w	r4, r1, #4
 800c6ba:	bfb8      	it	lt
 800c6bc:	18e4      	addlt	r4, r4, r3
 800c6be:	f002 fa49 	bl	800eb54 <__malloc_lock>
 800c6c2:	4a20      	ldr	r2, [pc, #128]	; (800c744 <_free_r+0x9c>)
 800c6c4:	9801      	ldr	r0, [sp, #4]
 800c6c6:	6813      	ldr	r3, [r2, #0]
 800c6c8:	4615      	mov	r5, r2
 800c6ca:	b933      	cbnz	r3, 800c6da <_free_r+0x32>
 800c6cc:	6063      	str	r3, [r4, #4]
 800c6ce:	6014      	str	r4, [r2, #0]
 800c6d0:	b003      	add	sp, #12
 800c6d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6d6:	f002 ba43 	b.w	800eb60 <__malloc_unlock>
 800c6da:	42a3      	cmp	r3, r4
 800c6dc:	d90b      	bls.n	800c6f6 <_free_r+0x4e>
 800c6de:	6821      	ldr	r1, [r4, #0]
 800c6e0:	1862      	adds	r2, r4, r1
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	bf04      	itt	eq
 800c6e6:	681a      	ldreq	r2, [r3, #0]
 800c6e8:	685b      	ldreq	r3, [r3, #4]
 800c6ea:	6063      	str	r3, [r4, #4]
 800c6ec:	bf04      	itt	eq
 800c6ee:	1852      	addeq	r2, r2, r1
 800c6f0:	6022      	streq	r2, [r4, #0]
 800c6f2:	602c      	str	r4, [r5, #0]
 800c6f4:	e7ec      	b.n	800c6d0 <_free_r+0x28>
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	685b      	ldr	r3, [r3, #4]
 800c6fa:	b10b      	cbz	r3, 800c700 <_free_r+0x58>
 800c6fc:	42a3      	cmp	r3, r4
 800c6fe:	d9fa      	bls.n	800c6f6 <_free_r+0x4e>
 800c700:	6811      	ldr	r1, [r2, #0]
 800c702:	1855      	adds	r5, r2, r1
 800c704:	42a5      	cmp	r5, r4
 800c706:	d10b      	bne.n	800c720 <_free_r+0x78>
 800c708:	6824      	ldr	r4, [r4, #0]
 800c70a:	4421      	add	r1, r4
 800c70c:	1854      	adds	r4, r2, r1
 800c70e:	42a3      	cmp	r3, r4
 800c710:	6011      	str	r1, [r2, #0]
 800c712:	d1dd      	bne.n	800c6d0 <_free_r+0x28>
 800c714:	681c      	ldr	r4, [r3, #0]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	6053      	str	r3, [r2, #4]
 800c71a:	4421      	add	r1, r4
 800c71c:	6011      	str	r1, [r2, #0]
 800c71e:	e7d7      	b.n	800c6d0 <_free_r+0x28>
 800c720:	d902      	bls.n	800c728 <_free_r+0x80>
 800c722:	230c      	movs	r3, #12
 800c724:	6003      	str	r3, [r0, #0]
 800c726:	e7d3      	b.n	800c6d0 <_free_r+0x28>
 800c728:	6825      	ldr	r5, [r4, #0]
 800c72a:	1961      	adds	r1, r4, r5
 800c72c:	428b      	cmp	r3, r1
 800c72e:	bf04      	itt	eq
 800c730:	6819      	ldreq	r1, [r3, #0]
 800c732:	685b      	ldreq	r3, [r3, #4]
 800c734:	6063      	str	r3, [r4, #4]
 800c736:	bf04      	itt	eq
 800c738:	1949      	addeq	r1, r1, r5
 800c73a:	6021      	streq	r1, [r4, #0]
 800c73c:	6054      	str	r4, [r2, #4]
 800c73e:	e7c7      	b.n	800c6d0 <_free_r+0x28>
 800c740:	b003      	add	sp, #12
 800c742:	bd30      	pop	{r4, r5, pc}
 800c744:	20004eb0 	.word	0x20004eb0

0800c748 <_malloc_r>:
 800c748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c74a:	1ccd      	adds	r5, r1, #3
 800c74c:	f025 0503 	bic.w	r5, r5, #3
 800c750:	3508      	adds	r5, #8
 800c752:	2d0c      	cmp	r5, #12
 800c754:	bf38      	it	cc
 800c756:	250c      	movcc	r5, #12
 800c758:	2d00      	cmp	r5, #0
 800c75a:	4606      	mov	r6, r0
 800c75c:	db01      	blt.n	800c762 <_malloc_r+0x1a>
 800c75e:	42a9      	cmp	r1, r5
 800c760:	d903      	bls.n	800c76a <_malloc_r+0x22>
 800c762:	230c      	movs	r3, #12
 800c764:	6033      	str	r3, [r6, #0]
 800c766:	2000      	movs	r0, #0
 800c768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c76a:	f002 f9f3 	bl	800eb54 <__malloc_lock>
 800c76e:	4921      	ldr	r1, [pc, #132]	; (800c7f4 <_malloc_r+0xac>)
 800c770:	680a      	ldr	r2, [r1, #0]
 800c772:	4614      	mov	r4, r2
 800c774:	b99c      	cbnz	r4, 800c79e <_malloc_r+0x56>
 800c776:	4f20      	ldr	r7, [pc, #128]	; (800c7f8 <_malloc_r+0xb0>)
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	b923      	cbnz	r3, 800c786 <_malloc_r+0x3e>
 800c77c:	4621      	mov	r1, r4
 800c77e:	4630      	mov	r0, r6
 800c780:	f000 fd10 	bl	800d1a4 <_sbrk_r>
 800c784:	6038      	str	r0, [r7, #0]
 800c786:	4629      	mov	r1, r5
 800c788:	4630      	mov	r0, r6
 800c78a:	f000 fd0b 	bl	800d1a4 <_sbrk_r>
 800c78e:	1c43      	adds	r3, r0, #1
 800c790:	d123      	bne.n	800c7da <_malloc_r+0x92>
 800c792:	230c      	movs	r3, #12
 800c794:	6033      	str	r3, [r6, #0]
 800c796:	4630      	mov	r0, r6
 800c798:	f002 f9e2 	bl	800eb60 <__malloc_unlock>
 800c79c:	e7e3      	b.n	800c766 <_malloc_r+0x1e>
 800c79e:	6823      	ldr	r3, [r4, #0]
 800c7a0:	1b5b      	subs	r3, r3, r5
 800c7a2:	d417      	bmi.n	800c7d4 <_malloc_r+0x8c>
 800c7a4:	2b0b      	cmp	r3, #11
 800c7a6:	d903      	bls.n	800c7b0 <_malloc_r+0x68>
 800c7a8:	6023      	str	r3, [r4, #0]
 800c7aa:	441c      	add	r4, r3
 800c7ac:	6025      	str	r5, [r4, #0]
 800c7ae:	e004      	b.n	800c7ba <_malloc_r+0x72>
 800c7b0:	6863      	ldr	r3, [r4, #4]
 800c7b2:	42a2      	cmp	r2, r4
 800c7b4:	bf0c      	ite	eq
 800c7b6:	600b      	streq	r3, [r1, #0]
 800c7b8:	6053      	strne	r3, [r2, #4]
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	f002 f9d0 	bl	800eb60 <__malloc_unlock>
 800c7c0:	f104 000b 	add.w	r0, r4, #11
 800c7c4:	1d23      	adds	r3, r4, #4
 800c7c6:	f020 0007 	bic.w	r0, r0, #7
 800c7ca:	1ac2      	subs	r2, r0, r3
 800c7cc:	d0cc      	beq.n	800c768 <_malloc_r+0x20>
 800c7ce:	1a1b      	subs	r3, r3, r0
 800c7d0:	50a3      	str	r3, [r4, r2]
 800c7d2:	e7c9      	b.n	800c768 <_malloc_r+0x20>
 800c7d4:	4622      	mov	r2, r4
 800c7d6:	6864      	ldr	r4, [r4, #4]
 800c7d8:	e7cc      	b.n	800c774 <_malloc_r+0x2c>
 800c7da:	1cc4      	adds	r4, r0, #3
 800c7dc:	f024 0403 	bic.w	r4, r4, #3
 800c7e0:	42a0      	cmp	r0, r4
 800c7e2:	d0e3      	beq.n	800c7ac <_malloc_r+0x64>
 800c7e4:	1a21      	subs	r1, r4, r0
 800c7e6:	4630      	mov	r0, r6
 800c7e8:	f000 fcdc 	bl	800d1a4 <_sbrk_r>
 800c7ec:	3001      	adds	r0, #1
 800c7ee:	d1dd      	bne.n	800c7ac <_malloc_r+0x64>
 800c7f0:	e7cf      	b.n	800c792 <_malloc_r+0x4a>
 800c7f2:	bf00      	nop
 800c7f4:	20004eb0 	.word	0x20004eb0
 800c7f8:	20004eb4 	.word	0x20004eb4

0800c7fc <__cvt>:
 800c7fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c800:	ec55 4b10 	vmov	r4, r5, d0
 800c804:	2d00      	cmp	r5, #0
 800c806:	460e      	mov	r6, r1
 800c808:	4619      	mov	r1, r3
 800c80a:	462b      	mov	r3, r5
 800c80c:	bfbb      	ittet	lt
 800c80e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c812:	461d      	movlt	r5, r3
 800c814:	2300      	movge	r3, #0
 800c816:	232d      	movlt	r3, #45	; 0x2d
 800c818:	700b      	strb	r3, [r1, #0]
 800c81a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c81c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c820:	4691      	mov	r9, r2
 800c822:	f023 0820 	bic.w	r8, r3, #32
 800c826:	bfbc      	itt	lt
 800c828:	4622      	movlt	r2, r4
 800c82a:	4614      	movlt	r4, r2
 800c82c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c830:	d005      	beq.n	800c83e <__cvt+0x42>
 800c832:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c836:	d100      	bne.n	800c83a <__cvt+0x3e>
 800c838:	3601      	adds	r6, #1
 800c83a:	2102      	movs	r1, #2
 800c83c:	e000      	b.n	800c840 <__cvt+0x44>
 800c83e:	2103      	movs	r1, #3
 800c840:	ab03      	add	r3, sp, #12
 800c842:	9301      	str	r3, [sp, #4]
 800c844:	ab02      	add	r3, sp, #8
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	ec45 4b10 	vmov	d0, r4, r5
 800c84c:	4653      	mov	r3, sl
 800c84e:	4632      	mov	r2, r6
 800c850:	f001 f9a2 	bl	800db98 <_dtoa_r>
 800c854:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c858:	4607      	mov	r7, r0
 800c85a:	d102      	bne.n	800c862 <__cvt+0x66>
 800c85c:	f019 0f01 	tst.w	r9, #1
 800c860:	d022      	beq.n	800c8a8 <__cvt+0xac>
 800c862:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c866:	eb07 0906 	add.w	r9, r7, r6
 800c86a:	d110      	bne.n	800c88e <__cvt+0x92>
 800c86c:	783b      	ldrb	r3, [r7, #0]
 800c86e:	2b30      	cmp	r3, #48	; 0x30
 800c870:	d10a      	bne.n	800c888 <__cvt+0x8c>
 800c872:	2200      	movs	r2, #0
 800c874:	2300      	movs	r3, #0
 800c876:	4620      	mov	r0, r4
 800c878:	4629      	mov	r1, r5
 800c87a:	f7f4 f955 	bl	8000b28 <__aeabi_dcmpeq>
 800c87e:	b918      	cbnz	r0, 800c888 <__cvt+0x8c>
 800c880:	f1c6 0601 	rsb	r6, r6, #1
 800c884:	f8ca 6000 	str.w	r6, [sl]
 800c888:	f8da 3000 	ldr.w	r3, [sl]
 800c88c:	4499      	add	r9, r3
 800c88e:	2200      	movs	r2, #0
 800c890:	2300      	movs	r3, #0
 800c892:	4620      	mov	r0, r4
 800c894:	4629      	mov	r1, r5
 800c896:	f7f4 f947 	bl	8000b28 <__aeabi_dcmpeq>
 800c89a:	b108      	cbz	r0, 800c8a0 <__cvt+0xa4>
 800c89c:	f8cd 900c 	str.w	r9, [sp, #12]
 800c8a0:	2230      	movs	r2, #48	; 0x30
 800c8a2:	9b03      	ldr	r3, [sp, #12]
 800c8a4:	454b      	cmp	r3, r9
 800c8a6:	d307      	bcc.n	800c8b8 <__cvt+0xbc>
 800c8a8:	9b03      	ldr	r3, [sp, #12]
 800c8aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8ac:	1bdb      	subs	r3, r3, r7
 800c8ae:	4638      	mov	r0, r7
 800c8b0:	6013      	str	r3, [r2, #0]
 800c8b2:	b004      	add	sp, #16
 800c8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8b8:	1c59      	adds	r1, r3, #1
 800c8ba:	9103      	str	r1, [sp, #12]
 800c8bc:	701a      	strb	r2, [r3, #0]
 800c8be:	e7f0      	b.n	800c8a2 <__cvt+0xa6>

0800c8c0 <__exponent>:
 800c8c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2900      	cmp	r1, #0
 800c8c6:	bfb8      	it	lt
 800c8c8:	4249      	neglt	r1, r1
 800c8ca:	f803 2b02 	strb.w	r2, [r3], #2
 800c8ce:	bfb4      	ite	lt
 800c8d0:	222d      	movlt	r2, #45	; 0x2d
 800c8d2:	222b      	movge	r2, #43	; 0x2b
 800c8d4:	2909      	cmp	r1, #9
 800c8d6:	7042      	strb	r2, [r0, #1]
 800c8d8:	dd2a      	ble.n	800c930 <__exponent+0x70>
 800c8da:	f10d 0407 	add.w	r4, sp, #7
 800c8de:	46a4      	mov	ip, r4
 800c8e0:	270a      	movs	r7, #10
 800c8e2:	46a6      	mov	lr, r4
 800c8e4:	460a      	mov	r2, r1
 800c8e6:	fb91 f6f7 	sdiv	r6, r1, r7
 800c8ea:	fb07 1516 	mls	r5, r7, r6, r1
 800c8ee:	3530      	adds	r5, #48	; 0x30
 800c8f0:	2a63      	cmp	r2, #99	; 0x63
 800c8f2:	f104 34ff 	add.w	r4, r4, #4294967295
 800c8f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c8fa:	4631      	mov	r1, r6
 800c8fc:	dcf1      	bgt.n	800c8e2 <__exponent+0x22>
 800c8fe:	3130      	adds	r1, #48	; 0x30
 800c900:	f1ae 0502 	sub.w	r5, lr, #2
 800c904:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c908:	1c44      	adds	r4, r0, #1
 800c90a:	4629      	mov	r1, r5
 800c90c:	4561      	cmp	r1, ip
 800c90e:	d30a      	bcc.n	800c926 <__exponent+0x66>
 800c910:	f10d 0209 	add.w	r2, sp, #9
 800c914:	eba2 020e 	sub.w	r2, r2, lr
 800c918:	4565      	cmp	r5, ip
 800c91a:	bf88      	it	hi
 800c91c:	2200      	movhi	r2, #0
 800c91e:	4413      	add	r3, r2
 800c920:	1a18      	subs	r0, r3, r0
 800c922:	b003      	add	sp, #12
 800c924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c926:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c92a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c92e:	e7ed      	b.n	800c90c <__exponent+0x4c>
 800c930:	2330      	movs	r3, #48	; 0x30
 800c932:	3130      	adds	r1, #48	; 0x30
 800c934:	7083      	strb	r3, [r0, #2]
 800c936:	70c1      	strb	r1, [r0, #3]
 800c938:	1d03      	adds	r3, r0, #4
 800c93a:	e7f1      	b.n	800c920 <__exponent+0x60>

0800c93c <_printf_float>:
 800c93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c940:	ed2d 8b02 	vpush	{d8}
 800c944:	b08d      	sub	sp, #52	; 0x34
 800c946:	460c      	mov	r4, r1
 800c948:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c94c:	4616      	mov	r6, r2
 800c94e:	461f      	mov	r7, r3
 800c950:	4605      	mov	r5, r0
 800c952:	f002 f8d7 	bl	800eb04 <_localeconv_r>
 800c956:	f8d0 a000 	ldr.w	sl, [r0]
 800c95a:	4650      	mov	r0, sl
 800c95c:	f7f3 fc62 	bl	8000224 <strlen>
 800c960:	2300      	movs	r3, #0
 800c962:	930a      	str	r3, [sp, #40]	; 0x28
 800c964:	6823      	ldr	r3, [r4, #0]
 800c966:	9305      	str	r3, [sp, #20]
 800c968:	f8d8 3000 	ldr.w	r3, [r8]
 800c96c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c970:	3307      	adds	r3, #7
 800c972:	f023 0307 	bic.w	r3, r3, #7
 800c976:	f103 0208 	add.w	r2, r3, #8
 800c97a:	f8c8 2000 	str.w	r2, [r8]
 800c97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c982:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c986:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c98a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c98e:	9307      	str	r3, [sp, #28]
 800c990:	f8cd 8018 	str.w	r8, [sp, #24]
 800c994:	ee08 0a10 	vmov	s16, r0
 800c998:	4b9f      	ldr	r3, [pc, #636]	; (800cc18 <_printf_float+0x2dc>)
 800c99a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c99e:	f04f 32ff 	mov.w	r2, #4294967295
 800c9a2:	f7f4 f8f3 	bl	8000b8c <__aeabi_dcmpun>
 800c9a6:	bb88      	cbnz	r0, 800ca0c <_printf_float+0xd0>
 800c9a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9ac:	4b9a      	ldr	r3, [pc, #616]	; (800cc18 <_printf_float+0x2dc>)
 800c9ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c9b2:	f7f4 f8cd 	bl	8000b50 <__aeabi_dcmple>
 800c9b6:	bb48      	cbnz	r0, 800ca0c <_printf_float+0xd0>
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	4640      	mov	r0, r8
 800c9be:	4649      	mov	r1, r9
 800c9c0:	f7f4 f8bc 	bl	8000b3c <__aeabi_dcmplt>
 800c9c4:	b110      	cbz	r0, 800c9cc <_printf_float+0x90>
 800c9c6:	232d      	movs	r3, #45	; 0x2d
 800c9c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9cc:	4b93      	ldr	r3, [pc, #588]	; (800cc1c <_printf_float+0x2e0>)
 800c9ce:	4894      	ldr	r0, [pc, #592]	; (800cc20 <_printf_float+0x2e4>)
 800c9d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c9d4:	bf94      	ite	ls
 800c9d6:	4698      	movls	r8, r3
 800c9d8:	4680      	movhi	r8, r0
 800c9da:	2303      	movs	r3, #3
 800c9dc:	6123      	str	r3, [r4, #16]
 800c9de:	9b05      	ldr	r3, [sp, #20]
 800c9e0:	f023 0204 	bic.w	r2, r3, #4
 800c9e4:	6022      	str	r2, [r4, #0]
 800c9e6:	f04f 0900 	mov.w	r9, #0
 800c9ea:	9700      	str	r7, [sp, #0]
 800c9ec:	4633      	mov	r3, r6
 800c9ee:	aa0b      	add	r2, sp, #44	; 0x2c
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	4628      	mov	r0, r5
 800c9f4:	f000 f9d8 	bl	800cda8 <_printf_common>
 800c9f8:	3001      	adds	r0, #1
 800c9fa:	f040 8090 	bne.w	800cb1e <_printf_float+0x1e2>
 800c9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800ca02:	b00d      	add	sp, #52	; 0x34
 800ca04:	ecbd 8b02 	vpop	{d8}
 800ca08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca0c:	4642      	mov	r2, r8
 800ca0e:	464b      	mov	r3, r9
 800ca10:	4640      	mov	r0, r8
 800ca12:	4649      	mov	r1, r9
 800ca14:	f7f4 f8ba 	bl	8000b8c <__aeabi_dcmpun>
 800ca18:	b140      	cbz	r0, 800ca2c <_printf_float+0xf0>
 800ca1a:	464b      	mov	r3, r9
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	bfbc      	itt	lt
 800ca20:	232d      	movlt	r3, #45	; 0x2d
 800ca22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ca26:	487f      	ldr	r0, [pc, #508]	; (800cc24 <_printf_float+0x2e8>)
 800ca28:	4b7f      	ldr	r3, [pc, #508]	; (800cc28 <_printf_float+0x2ec>)
 800ca2a:	e7d1      	b.n	800c9d0 <_printf_float+0x94>
 800ca2c:	6863      	ldr	r3, [r4, #4]
 800ca2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ca32:	9206      	str	r2, [sp, #24]
 800ca34:	1c5a      	adds	r2, r3, #1
 800ca36:	d13f      	bne.n	800cab8 <_printf_float+0x17c>
 800ca38:	2306      	movs	r3, #6
 800ca3a:	6063      	str	r3, [r4, #4]
 800ca3c:	9b05      	ldr	r3, [sp, #20]
 800ca3e:	6861      	ldr	r1, [r4, #4]
 800ca40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ca44:	2300      	movs	r3, #0
 800ca46:	9303      	str	r3, [sp, #12]
 800ca48:	ab0a      	add	r3, sp, #40	; 0x28
 800ca4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ca4e:	ab09      	add	r3, sp, #36	; 0x24
 800ca50:	ec49 8b10 	vmov	d0, r8, r9
 800ca54:	9300      	str	r3, [sp, #0]
 800ca56:	6022      	str	r2, [r4, #0]
 800ca58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	f7ff fecd 	bl	800c7fc <__cvt>
 800ca62:	9b06      	ldr	r3, [sp, #24]
 800ca64:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca66:	2b47      	cmp	r3, #71	; 0x47
 800ca68:	4680      	mov	r8, r0
 800ca6a:	d108      	bne.n	800ca7e <_printf_float+0x142>
 800ca6c:	1cc8      	adds	r0, r1, #3
 800ca6e:	db02      	blt.n	800ca76 <_printf_float+0x13a>
 800ca70:	6863      	ldr	r3, [r4, #4]
 800ca72:	4299      	cmp	r1, r3
 800ca74:	dd41      	ble.n	800cafa <_printf_float+0x1be>
 800ca76:	f1ab 0b02 	sub.w	fp, fp, #2
 800ca7a:	fa5f fb8b 	uxtb.w	fp, fp
 800ca7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ca82:	d820      	bhi.n	800cac6 <_printf_float+0x18a>
 800ca84:	3901      	subs	r1, #1
 800ca86:	465a      	mov	r2, fp
 800ca88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ca8c:	9109      	str	r1, [sp, #36]	; 0x24
 800ca8e:	f7ff ff17 	bl	800c8c0 <__exponent>
 800ca92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca94:	1813      	adds	r3, r2, r0
 800ca96:	2a01      	cmp	r2, #1
 800ca98:	4681      	mov	r9, r0
 800ca9a:	6123      	str	r3, [r4, #16]
 800ca9c:	dc02      	bgt.n	800caa4 <_printf_float+0x168>
 800ca9e:	6822      	ldr	r2, [r4, #0]
 800caa0:	07d2      	lsls	r2, r2, #31
 800caa2:	d501      	bpl.n	800caa8 <_printf_float+0x16c>
 800caa4:	3301      	adds	r3, #1
 800caa6:	6123      	str	r3, [r4, #16]
 800caa8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800caac:	2b00      	cmp	r3, #0
 800caae:	d09c      	beq.n	800c9ea <_printf_float+0xae>
 800cab0:	232d      	movs	r3, #45	; 0x2d
 800cab2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cab6:	e798      	b.n	800c9ea <_printf_float+0xae>
 800cab8:	9a06      	ldr	r2, [sp, #24]
 800caba:	2a47      	cmp	r2, #71	; 0x47
 800cabc:	d1be      	bne.n	800ca3c <_printf_float+0x100>
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d1bc      	bne.n	800ca3c <_printf_float+0x100>
 800cac2:	2301      	movs	r3, #1
 800cac4:	e7b9      	b.n	800ca3a <_printf_float+0xfe>
 800cac6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800caca:	d118      	bne.n	800cafe <_printf_float+0x1c2>
 800cacc:	2900      	cmp	r1, #0
 800cace:	6863      	ldr	r3, [r4, #4]
 800cad0:	dd0b      	ble.n	800caea <_printf_float+0x1ae>
 800cad2:	6121      	str	r1, [r4, #16]
 800cad4:	b913      	cbnz	r3, 800cadc <_printf_float+0x1a0>
 800cad6:	6822      	ldr	r2, [r4, #0]
 800cad8:	07d0      	lsls	r0, r2, #31
 800cada:	d502      	bpl.n	800cae2 <_printf_float+0x1a6>
 800cadc:	3301      	adds	r3, #1
 800cade:	440b      	add	r3, r1
 800cae0:	6123      	str	r3, [r4, #16]
 800cae2:	65a1      	str	r1, [r4, #88]	; 0x58
 800cae4:	f04f 0900 	mov.w	r9, #0
 800cae8:	e7de      	b.n	800caa8 <_printf_float+0x16c>
 800caea:	b913      	cbnz	r3, 800caf2 <_printf_float+0x1b6>
 800caec:	6822      	ldr	r2, [r4, #0]
 800caee:	07d2      	lsls	r2, r2, #31
 800caf0:	d501      	bpl.n	800caf6 <_printf_float+0x1ba>
 800caf2:	3302      	adds	r3, #2
 800caf4:	e7f4      	b.n	800cae0 <_printf_float+0x1a4>
 800caf6:	2301      	movs	r3, #1
 800caf8:	e7f2      	b.n	800cae0 <_printf_float+0x1a4>
 800cafa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cafe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb00:	4299      	cmp	r1, r3
 800cb02:	db05      	blt.n	800cb10 <_printf_float+0x1d4>
 800cb04:	6823      	ldr	r3, [r4, #0]
 800cb06:	6121      	str	r1, [r4, #16]
 800cb08:	07d8      	lsls	r0, r3, #31
 800cb0a:	d5ea      	bpl.n	800cae2 <_printf_float+0x1a6>
 800cb0c:	1c4b      	adds	r3, r1, #1
 800cb0e:	e7e7      	b.n	800cae0 <_printf_float+0x1a4>
 800cb10:	2900      	cmp	r1, #0
 800cb12:	bfd4      	ite	le
 800cb14:	f1c1 0202 	rsble	r2, r1, #2
 800cb18:	2201      	movgt	r2, #1
 800cb1a:	4413      	add	r3, r2
 800cb1c:	e7e0      	b.n	800cae0 <_printf_float+0x1a4>
 800cb1e:	6823      	ldr	r3, [r4, #0]
 800cb20:	055a      	lsls	r2, r3, #21
 800cb22:	d407      	bmi.n	800cb34 <_printf_float+0x1f8>
 800cb24:	6923      	ldr	r3, [r4, #16]
 800cb26:	4642      	mov	r2, r8
 800cb28:	4631      	mov	r1, r6
 800cb2a:	4628      	mov	r0, r5
 800cb2c:	47b8      	blx	r7
 800cb2e:	3001      	adds	r0, #1
 800cb30:	d12c      	bne.n	800cb8c <_printf_float+0x250>
 800cb32:	e764      	b.n	800c9fe <_printf_float+0xc2>
 800cb34:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cb38:	f240 80e0 	bls.w	800ccfc <_printf_float+0x3c0>
 800cb3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb40:	2200      	movs	r2, #0
 800cb42:	2300      	movs	r3, #0
 800cb44:	f7f3 fff0 	bl	8000b28 <__aeabi_dcmpeq>
 800cb48:	2800      	cmp	r0, #0
 800cb4a:	d034      	beq.n	800cbb6 <_printf_float+0x27a>
 800cb4c:	4a37      	ldr	r2, [pc, #220]	; (800cc2c <_printf_float+0x2f0>)
 800cb4e:	2301      	movs	r3, #1
 800cb50:	4631      	mov	r1, r6
 800cb52:	4628      	mov	r0, r5
 800cb54:	47b8      	blx	r7
 800cb56:	3001      	adds	r0, #1
 800cb58:	f43f af51 	beq.w	800c9fe <_printf_float+0xc2>
 800cb5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb60:	429a      	cmp	r2, r3
 800cb62:	db02      	blt.n	800cb6a <_printf_float+0x22e>
 800cb64:	6823      	ldr	r3, [r4, #0]
 800cb66:	07d8      	lsls	r0, r3, #31
 800cb68:	d510      	bpl.n	800cb8c <_printf_float+0x250>
 800cb6a:	ee18 3a10 	vmov	r3, s16
 800cb6e:	4652      	mov	r2, sl
 800cb70:	4631      	mov	r1, r6
 800cb72:	4628      	mov	r0, r5
 800cb74:	47b8      	blx	r7
 800cb76:	3001      	adds	r0, #1
 800cb78:	f43f af41 	beq.w	800c9fe <_printf_float+0xc2>
 800cb7c:	f04f 0800 	mov.w	r8, #0
 800cb80:	f104 091a 	add.w	r9, r4, #26
 800cb84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb86:	3b01      	subs	r3, #1
 800cb88:	4543      	cmp	r3, r8
 800cb8a:	dc09      	bgt.n	800cba0 <_printf_float+0x264>
 800cb8c:	6823      	ldr	r3, [r4, #0]
 800cb8e:	079b      	lsls	r3, r3, #30
 800cb90:	f100 8105 	bmi.w	800cd9e <_printf_float+0x462>
 800cb94:	68e0      	ldr	r0, [r4, #12]
 800cb96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb98:	4298      	cmp	r0, r3
 800cb9a:	bfb8      	it	lt
 800cb9c:	4618      	movlt	r0, r3
 800cb9e:	e730      	b.n	800ca02 <_printf_float+0xc6>
 800cba0:	2301      	movs	r3, #1
 800cba2:	464a      	mov	r2, r9
 800cba4:	4631      	mov	r1, r6
 800cba6:	4628      	mov	r0, r5
 800cba8:	47b8      	blx	r7
 800cbaa:	3001      	adds	r0, #1
 800cbac:	f43f af27 	beq.w	800c9fe <_printf_float+0xc2>
 800cbb0:	f108 0801 	add.w	r8, r8, #1
 800cbb4:	e7e6      	b.n	800cb84 <_printf_float+0x248>
 800cbb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	dc39      	bgt.n	800cc30 <_printf_float+0x2f4>
 800cbbc:	4a1b      	ldr	r2, [pc, #108]	; (800cc2c <_printf_float+0x2f0>)
 800cbbe:	2301      	movs	r3, #1
 800cbc0:	4631      	mov	r1, r6
 800cbc2:	4628      	mov	r0, r5
 800cbc4:	47b8      	blx	r7
 800cbc6:	3001      	adds	r0, #1
 800cbc8:	f43f af19 	beq.w	800c9fe <_printf_float+0xc2>
 800cbcc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	d102      	bne.n	800cbda <_printf_float+0x29e>
 800cbd4:	6823      	ldr	r3, [r4, #0]
 800cbd6:	07d9      	lsls	r1, r3, #31
 800cbd8:	d5d8      	bpl.n	800cb8c <_printf_float+0x250>
 800cbda:	ee18 3a10 	vmov	r3, s16
 800cbde:	4652      	mov	r2, sl
 800cbe0:	4631      	mov	r1, r6
 800cbe2:	4628      	mov	r0, r5
 800cbe4:	47b8      	blx	r7
 800cbe6:	3001      	adds	r0, #1
 800cbe8:	f43f af09 	beq.w	800c9fe <_printf_float+0xc2>
 800cbec:	f04f 0900 	mov.w	r9, #0
 800cbf0:	f104 0a1a 	add.w	sl, r4, #26
 800cbf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbf6:	425b      	negs	r3, r3
 800cbf8:	454b      	cmp	r3, r9
 800cbfa:	dc01      	bgt.n	800cc00 <_printf_float+0x2c4>
 800cbfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbfe:	e792      	b.n	800cb26 <_printf_float+0x1ea>
 800cc00:	2301      	movs	r3, #1
 800cc02:	4652      	mov	r2, sl
 800cc04:	4631      	mov	r1, r6
 800cc06:	4628      	mov	r0, r5
 800cc08:	47b8      	blx	r7
 800cc0a:	3001      	adds	r0, #1
 800cc0c:	f43f aef7 	beq.w	800c9fe <_printf_float+0xc2>
 800cc10:	f109 0901 	add.w	r9, r9, #1
 800cc14:	e7ee      	b.n	800cbf4 <_printf_float+0x2b8>
 800cc16:	bf00      	nop
 800cc18:	7fefffff 	.word	0x7fefffff
 800cc1c:	08011634 	.word	0x08011634
 800cc20:	08011638 	.word	0x08011638
 800cc24:	08011640 	.word	0x08011640
 800cc28:	0801163c 	.word	0x0801163c
 800cc2c:	080119d9 	.word	0x080119d9
 800cc30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc34:	429a      	cmp	r2, r3
 800cc36:	bfa8      	it	ge
 800cc38:	461a      	movge	r2, r3
 800cc3a:	2a00      	cmp	r2, #0
 800cc3c:	4691      	mov	r9, r2
 800cc3e:	dc37      	bgt.n	800ccb0 <_printf_float+0x374>
 800cc40:	f04f 0b00 	mov.w	fp, #0
 800cc44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc48:	f104 021a 	add.w	r2, r4, #26
 800cc4c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc4e:	9305      	str	r3, [sp, #20]
 800cc50:	eba3 0309 	sub.w	r3, r3, r9
 800cc54:	455b      	cmp	r3, fp
 800cc56:	dc33      	bgt.n	800ccc0 <_printf_float+0x384>
 800cc58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc5c:	429a      	cmp	r2, r3
 800cc5e:	db3b      	blt.n	800ccd8 <_printf_float+0x39c>
 800cc60:	6823      	ldr	r3, [r4, #0]
 800cc62:	07da      	lsls	r2, r3, #31
 800cc64:	d438      	bmi.n	800ccd8 <_printf_float+0x39c>
 800cc66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc68:	9b05      	ldr	r3, [sp, #20]
 800cc6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc6c:	1ad3      	subs	r3, r2, r3
 800cc6e:	eba2 0901 	sub.w	r9, r2, r1
 800cc72:	4599      	cmp	r9, r3
 800cc74:	bfa8      	it	ge
 800cc76:	4699      	movge	r9, r3
 800cc78:	f1b9 0f00 	cmp.w	r9, #0
 800cc7c:	dc35      	bgt.n	800ccea <_printf_float+0x3ae>
 800cc7e:	f04f 0800 	mov.w	r8, #0
 800cc82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc86:	f104 0a1a 	add.w	sl, r4, #26
 800cc8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc8e:	1a9b      	subs	r3, r3, r2
 800cc90:	eba3 0309 	sub.w	r3, r3, r9
 800cc94:	4543      	cmp	r3, r8
 800cc96:	f77f af79 	ble.w	800cb8c <_printf_float+0x250>
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	4652      	mov	r2, sl
 800cc9e:	4631      	mov	r1, r6
 800cca0:	4628      	mov	r0, r5
 800cca2:	47b8      	blx	r7
 800cca4:	3001      	adds	r0, #1
 800cca6:	f43f aeaa 	beq.w	800c9fe <_printf_float+0xc2>
 800ccaa:	f108 0801 	add.w	r8, r8, #1
 800ccae:	e7ec      	b.n	800cc8a <_printf_float+0x34e>
 800ccb0:	4613      	mov	r3, r2
 800ccb2:	4631      	mov	r1, r6
 800ccb4:	4642      	mov	r2, r8
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	47b8      	blx	r7
 800ccba:	3001      	adds	r0, #1
 800ccbc:	d1c0      	bne.n	800cc40 <_printf_float+0x304>
 800ccbe:	e69e      	b.n	800c9fe <_printf_float+0xc2>
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	4631      	mov	r1, r6
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	9205      	str	r2, [sp, #20]
 800ccc8:	47b8      	blx	r7
 800ccca:	3001      	adds	r0, #1
 800cccc:	f43f ae97 	beq.w	800c9fe <_printf_float+0xc2>
 800ccd0:	9a05      	ldr	r2, [sp, #20]
 800ccd2:	f10b 0b01 	add.w	fp, fp, #1
 800ccd6:	e7b9      	b.n	800cc4c <_printf_float+0x310>
 800ccd8:	ee18 3a10 	vmov	r3, s16
 800ccdc:	4652      	mov	r2, sl
 800ccde:	4631      	mov	r1, r6
 800cce0:	4628      	mov	r0, r5
 800cce2:	47b8      	blx	r7
 800cce4:	3001      	adds	r0, #1
 800cce6:	d1be      	bne.n	800cc66 <_printf_float+0x32a>
 800cce8:	e689      	b.n	800c9fe <_printf_float+0xc2>
 800ccea:	9a05      	ldr	r2, [sp, #20]
 800ccec:	464b      	mov	r3, r9
 800ccee:	4442      	add	r2, r8
 800ccf0:	4631      	mov	r1, r6
 800ccf2:	4628      	mov	r0, r5
 800ccf4:	47b8      	blx	r7
 800ccf6:	3001      	adds	r0, #1
 800ccf8:	d1c1      	bne.n	800cc7e <_printf_float+0x342>
 800ccfa:	e680      	b.n	800c9fe <_printf_float+0xc2>
 800ccfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccfe:	2a01      	cmp	r2, #1
 800cd00:	dc01      	bgt.n	800cd06 <_printf_float+0x3ca>
 800cd02:	07db      	lsls	r3, r3, #31
 800cd04:	d538      	bpl.n	800cd78 <_printf_float+0x43c>
 800cd06:	2301      	movs	r3, #1
 800cd08:	4642      	mov	r2, r8
 800cd0a:	4631      	mov	r1, r6
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	47b8      	blx	r7
 800cd10:	3001      	adds	r0, #1
 800cd12:	f43f ae74 	beq.w	800c9fe <_printf_float+0xc2>
 800cd16:	ee18 3a10 	vmov	r3, s16
 800cd1a:	4652      	mov	r2, sl
 800cd1c:	4631      	mov	r1, r6
 800cd1e:	4628      	mov	r0, r5
 800cd20:	47b8      	blx	r7
 800cd22:	3001      	adds	r0, #1
 800cd24:	f43f ae6b 	beq.w	800c9fe <_printf_float+0xc2>
 800cd28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	2300      	movs	r3, #0
 800cd30:	f7f3 fefa 	bl	8000b28 <__aeabi_dcmpeq>
 800cd34:	b9d8      	cbnz	r0, 800cd6e <_printf_float+0x432>
 800cd36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd38:	f108 0201 	add.w	r2, r8, #1
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	4631      	mov	r1, r6
 800cd40:	4628      	mov	r0, r5
 800cd42:	47b8      	blx	r7
 800cd44:	3001      	adds	r0, #1
 800cd46:	d10e      	bne.n	800cd66 <_printf_float+0x42a>
 800cd48:	e659      	b.n	800c9fe <_printf_float+0xc2>
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	4652      	mov	r2, sl
 800cd4e:	4631      	mov	r1, r6
 800cd50:	4628      	mov	r0, r5
 800cd52:	47b8      	blx	r7
 800cd54:	3001      	adds	r0, #1
 800cd56:	f43f ae52 	beq.w	800c9fe <_printf_float+0xc2>
 800cd5a:	f108 0801 	add.w	r8, r8, #1
 800cd5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd60:	3b01      	subs	r3, #1
 800cd62:	4543      	cmp	r3, r8
 800cd64:	dcf1      	bgt.n	800cd4a <_printf_float+0x40e>
 800cd66:	464b      	mov	r3, r9
 800cd68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cd6c:	e6dc      	b.n	800cb28 <_printf_float+0x1ec>
 800cd6e:	f04f 0800 	mov.w	r8, #0
 800cd72:	f104 0a1a 	add.w	sl, r4, #26
 800cd76:	e7f2      	b.n	800cd5e <_printf_float+0x422>
 800cd78:	2301      	movs	r3, #1
 800cd7a:	4642      	mov	r2, r8
 800cd7c:	e7df      	b.n	800cd3e <_printf_float+0x402>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	464a      	mov	r2, r9
 800cd82:	4631      	mov	r1, r6
 800cd84:	4628      	mov	r0, r5
 800cd86:	47b8      	blx	r7
 800cd88:	3001      	adds	r0, #1
 800cd8a:	f43f ae38 	beq.w	800c9fe <_printf_float+0xc2>
 800cd8e:	f108 0801 	add.w	r8, r8, #1
 800cd92:	68e3      	ldr	r3, [r4, #12]
 800cd94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cd96:	1a5b      	subs	r3, r3, r1
 800cd98:	4543      	cmp	r3, r8
 800cd9a:	dcf0      	bgt.n	800cd7e <_printf_float+0x442>
 800cd9c:	e6fa      	b.n	800cb94 <_printf_float+0x258>
 800cd9e:	f04f 0800 	mov.w	r8, #0
 800cda2:	f104 0919 	add.w	r9, r4, #25
 800cda6:	e7f4      	b.n	800cd92 <_printf_float+0x456>

0800cda8 <_printf_common>:
 800cda8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdac:	4616      	mov	r6, r2
 800cdae:	4699      	mov	r9, r3
 800cdb0:	688a      	ldr	r2, [r1, #8]
 800cdb2:	690b      	ldr	r3, [r1, #16]
 800cdb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	bfb8      	it	lt
 800cdbc:	4613      	movlt	r3, r2
 800cdbe:	6033      	str	r3, [r6, #0]
 800cdc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cdc4:	4607      	mov	r7, r0
 800cdc6:	460c      	mov	r4, r1
 800cdc8:	b10a      	cbz	r2, 800cdce <_printf_common+0x26>
 800cdca:	3301      	adds	r3, #1
 800cdcc:	6033      	str	r3, [r6, #0]
 800cdce:	6823      	ldr	r3, [r4, #0]
 800cdd0:	0699      	lsls	r1, r3, #26
 800cdd2:	bf42      	ittt	mi
 800cdd4:	6833      	ldrmi	r3, [r6, #0]
 800cdd6:	3302      	addmi	r3, #2
 800cdd8:	6033      	strmi	r3, [r6, #0]
 800cdda:	6825      	ldr	r5, [r4, #0]
 800cddc:	f015 0506 	ands.w	r5, r5, #6
 800cde0:	d106      	bne.n	800cdf0 <_printf_common+0x48>
 800cde2:	f104 0a19 	add.w	sl, r4, #25
 800cde6:	68e3      	ldr	r3, [r4, #12]
 800cde8:	6832      	ldr	r2, [r6, #0]
 800cdea:	1a9b      	subs	r3, r3, r2
 800cdec:	42ab      	cmp	r3, r5
 800cdee:	dc26      	bgt.n	800ce3e <_printf_common+0x96>
 800cdf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cdf4:	1e13      	subs	r3, r2, #0
 800cdf6:	6822      	ldr	r2, [r4, #0]
 800cdf8:	bf18      	it	ne
 800cdfa:	2301      	movne	r3, #1
 800cdfc:	0692      	lsls	r2, r2, #26
 800cdfe:	d42b      	bmi.n	800ce58 <_printf_common+0xb0>
 800ce00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce04:	4649      	mov	r1, r9
 800ce06:	4638      	mov	r0, r7
 800ce08:	47c0      	blx	r8
 800ce0a:	3001      	adds	r0, #1
 800ce0c:	d01e      	beq.n	800ce4c <_printf_common+0xa4>
 800ce0e:	6823      	ldr	r3, [r4, #0]
 800ce10:	68e5      	ldr	r5, [r4, #12]
 800ce12:	6832      	ldr	r2, [r6, #0]
 800ce14:	f003 0306 	and.w	r3, r3, #6
 800ce18:	2b04      	cmp	r3, #4
 800ce1a:	bf08      	it	eq
 800ce1c:	1aad      	subeq	r5, r5, r2
 800ce1e:	68a3      	ldr	r3, [r4, #8]
 800ce20:	6922      	ldr	r2, [r4, #16]
 800ce22:	bf0c      	ite	eq
 800ce24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce28:	2500      	movne	r5, #0
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	bfc4      	itt	gt
 800ce2e:	1a9b      	subgt	r3, r3, r2
 800ce30:	18ed      	addgt	r5, r5, r3
 800ce32:	2600      	movs	r6, #0
 800ce34:	341a      	adds	r4, #26
 800ce36:	42b5      	cmp	r5, r6
 800ce38:	d11a      	bne.n	800ce70 <_printf_common+0xc8>
 800ce3a:	2000      	movs	r0, #0
 800ce3c:	e008      	b.n	800ce50 <_printf_common+0xa8>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	4652      	mov	r2, sl
 800ce42:	4649      	mov	r1, r9
 800ce44:	4638      	mov	r0, r7
 800ce46:	47c0      	blx	r8
 800ce48:	3001      	adds	r0, #1
 800ce4a:	d103      	bne.n	800ce54 <_printf_common+0xac>
 800ce4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce54:	3501      	adds	r5, #1
 800ce56:	e7c6      	b.n	800cde6 <_printf_common+0x3e>
 800ce58:	18e1      	adds	r1, r4, r3
 800ce5a:	1c5a      	adds	r2, r3, #1
 800ce5c:	2030      	movs	r0, #48	; 0x30
 800ce5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce62:	4422      	add	r2, r4
 800ce64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ce68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ce6c:	3302      	adds	r3, #2
 800ce6e:	e7c7      	b.n	800ce00 <_printf_common+0x58>
 800ce70:	2301      	movs	r3, #1
 800ce72:	4622      	mov	r2, r4
 800ce74:	4649      	mov	r1, r9
 800ce76:	4638      	mov	r0, r7
 800ce78:	47c0      	blx	r8
 800ce7a:	3001      	adds	r0, #1
 800ce7c:	d0e6      	beq.n	800ce4c <_printf_common+0xa4>
 800ce7e:	3601      	adds	r6, #1
 800ce80:	e7d9      	b.n	800ce36 <_printf_common+0x8e>
	...

0800ce84 <_printf_i>:
 800ce84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce88:	460c      	mov	r4, r1
 800ce8a:	4691      	mov	r9, r2
 800ce8c:	7e27      	ldrb	r7, [r4, #24]
 800ce8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ce90:	2f78      	cmp	r7, #120	; 0x78
 800ce92:	4680      	mov	r8, r0
 800ce94:	469a      	mov	sl, r3
 800ce96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce9a:	d807      	bhi.n	800ceac <_printf_i+0x28>
 800ce9c:	2f62      	cmp	r7, #98	; 0x62
 800ce9e:	d80a      	bhi.n	800ceb6 <_printf_i+0x32>
 800cea0:	2f00      	cmp	r7, #0
 800cea2:	f000 80d8 	beq.w	800d056 <_printf_i+0x1d2>
 800cea6:	2f58      	cmp	r7, #88	; 0x58
 800cea8:	f000 80a3 	beq.w	800cff2 <_printf_i+0x16e>
 800ceac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ceb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ceb4:	e03a      	b.n	800cf2c <_printf_i+0xa8>
 800ceb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ceba:	2b15      	cmp	r3, #21
 800cebc:	d8f6      	bhi.n	800ceac <_printf_i+0x28>
 800cebe:	a001      	add	r0, pc, #4	; (adr r0, 800cec4 <_printf_i+0x40>)
 800cec0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cec4:	0800cf1d 	.word	0x0800cf1d
 800cec8:	0800cf31 	.word	0x0800cf31
 800cecc:	0800cead 	.word	0x0800cead
 800ced0:	0800cead 	.word	0x0800cead
 800ced4:	0800cead 	.word	0x0800cead
 800ced8:	0800cead 	.word	0x0800cead
 800cedc:	0800cf31 	.word	0x0800cf31
 800cee0:	0800cead 	.word	0x0800cead
 800cee4:	0800cead 	.word	0x0800cead
 800cee8:	0800cead 	.word	0x0800cead
 800ceec:	0800cead 	.word	0x0800cead
 800cef0:	0800d03d 	.word	0x0800d03d
 800cef4:	0800cf61 	.word	0x0800cf61
 800cef8:	0800d01f 	.word	0x0800d01f
 800cefc:	0800cead 	.word	0x0800cead
 800cf00:	0800cead 	.word	0x0800cead
 800cf04:	0800d05f 	.word	0x0800d05f
 800cf08:	0800cead 	.word	0x0800cead
 800cf0c:	0800cf61 	.word	0x0800cf61
 800cf10:	0800cead 	.word	0x0800cead
 800cf14:	0800cead 	.word	0x0800cead
 800cf18:	0800d027 	.word	0x0800d027
 800cf1c:	680b      	ldr	r3, [r1, #0]
 800cf1e:	1d1a      	adds	r2, r3, #4
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	600a      	str	r2, [r1, #0]
 800cf24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cf28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e0a3      	b.n	800d078 <_printf_i+0x1f4>
 800cf30:	6825      	ldr	r5, [r4, #0]
 800cf32:	6808      	ldr	r0, [r1, #0]
 800cf34:	062e      	lsls	r6, r5, #24
 800cf36:	f100 0304 	add.w	r3, r0, #4
 800cf3a:	d50a      	bpl.n	800cf52 <_printf_i+0xce>
 800cf3c:	6805      	ldr	r5, [r0, #0]
 800cf3e:	600b      	str	r3, [r1, #0]
 800cf40:	2d00      	cmp	r5, #0
 800cf42:	da03      	bge.n	800cf4c <_printf_i+0xc8>
 800cf44:	232d      	movs	r3, #45	; 0x2d
 800cf46:	426d      	negs	r5, r5
 800cf48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf4c:	485e      	ldr	r0, [pc, #376]	; (800d0c8 <_printf_i+0x244>)
 800cf4e:	230a      	movs	r3, #10
 800cf50:	e019      	b.n	800cf86 <_printf_i+0x102>
 800cf52:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cf56:	6805      	ldr	r5, [r0, #0]
 800cf58:	600b      	str	r3, [r1, #0]
 800cf5a:	bf18      	it	ne
 800cf5c:	b22d      	sxthne	r5, r5
 800cf5e:	e7ef      	b.n	800cf40 <_printf_i+0xbc>
 800cf60:	680b      	ldr	r3, [r1, #0]
 800cf62:	6825      	ldr	r5, [r4, #0]
 800cf64:	1d18      	adds	r0, r3, #4
 800cf66:	6008      	str	r0, [r1, #0]
 800cf68:	0628      	lsls	r0, r5, #24
 800cf6a:	d501      	bpl.n	800cf70 <_printf_i+0xec>
 800cf6c:	681d      	ldr	r5, [r3, #0]
 800cf6e:	e002      	b.n	800cf76 <_printf_i+0xf2>
 800cf70:	0669      	lsls	r1, r5, #25
 800cf72:	d5fb      	bpl.n	800cf6c <_printf_i+0xe8>
 800cf74:	881d      	ldrh	r5, [r3, #0]
 800cf76:	4854      	ldr	r0, [pc, #336]	; (800d0c8 <_printf_i+0x244>)
 800cf78:	2f6f      	cmp	r7, #111	; 0x6f
 800cf7a:	bf0c      	ite	eq
 800cf7c:	2308      	moveq	r3, #8
 800cf7e:	230a      	movne	r3, #10
 800cf80:	2100      	movs	r1, #0
 800cf82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cf86:	6866      	ldr	r6, [r4, #4]
 800cf88:	60a6      	str	r6, [r4, #8]
 800cf8a:	2e00      	cmp	r6, #0
 800cf8c:	bfa2      	ittt	ge
 800cf8e:	6821      	ldrge	r1, [r4, #0]
 800cf90:	f021 0104 	bicge.w	r1, r1, #4
 800cf94:	6021      	strge	r1, [r4, #0]
 800cf96:	b90d      	cbnz	r5, 800cf9c <_printf_i+0x118>
 800cf98:	2e00      	cmp	r6, #0
 800cf9a:	d04d      	beq.n	800d038 <_printf_i+0x1b4>
 800cf9c:	4616      	mov	r6, r2
 800cf9e:	fbb5 f1f3 	udiv	r1, r5, r3
 800cfa2:	fb03 5711 	mls	r7, r3, r1, r5
 800cfa6:	5dc7      	ldrb	r7, [r0, r7]
 800cfa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cfac:	462f      	mov	r7, r5
 800cfae:	42bb      	cmp	r3, r7
 800cfb0:	460d      	mov	r5, r1
 800cfb2:	d9f4      	bls.n	800cf9e <_printf_i+0x11a>
 800cfb4:	2b08      	cmp	r3, #8
 800cfb6:	d10b      	bne.n	800cfd0 <_printf_i+0x14c>
 800cfb8:	6823      	ldr	r3, [r4, #0]
 800cfba:	07df      	lsls	r7, r3, #31
 800cfbc:	d508      	bpl.n	800cfd0 <_printf_i+0x14c>
 800cfbe:	6923      	ldr	r3, [r4, #16]
 800cfc0:	6861      	ldr	r1, [r4, #4]
 800cfc2:	4299      	cmp	r1, r3
 800cfc4:	bfde      	ittt	le
 800cfc6:	2330      	movle	r3, #48	; 0x30
 800cfc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cfcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cfd0:	1b92      	subs	r2, r2, r6
 800cfd2:	6122      	str	r2, [r4, #16]
 800cfd4:	f8cd a000 	str.w	sl, [sp]
 800cfd8:	464b      	mov	r3, r9
 800cfda:	aa03      	add	r2, sp, #12
 800cfdc:	4621      	mov	r1, r4
 800cfde:	4640      	mov	r0, r8
 800cfe0:	f7ff fee2 	bl	800cda8 <_printf_common>
 800cfe4:	3001      	adds	r0, #1
 800cfe6:	d14c      	bne.n	800d082 <_printf_i+0x1fe>
 800cfe8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfec:	b004      	add	sp, #16
 800cfee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cff2:	4835      	ldr	r0, [pc, #212]	; (800d0c8 <_printf_i+0x244>)
 800cff4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cff8:	6823      	ldr	r3, [r4, #0]
 800cffa:	680e      	ldr	r6, [r1, #0]
 800cffc:	061f      	lsls	r7, r3, #24
 800cffe:	f856 5b04 	ldr.w	r5, [r6], #4
 800d002:	600e      	str	r6, [r1, #0]
 800d004:	d514      	bpl.n	800d030 <_printf_i+0x1ac>
 800d006:	07d9      	lsls	r1, r3, #31
 800d008:	bf44      	itt	mi
 800d00a:	f043 0320 	orrmi.w	r3, r3, #32
 800d00e:	6023      	strmi	r3, [r4, #0]
 800d010:	b91d      	cbnz	r5, 800d01a <_printf_i+0x196>
 800d012:	6823      	ldr	r3, [r4, #0]
 800d014:	f023 0320 	bic.w	r3, r3, #32
 800d018:	6023      	str	r3, [r4, #0]
 800d01a:	2310      	movs	r3, #16
 800d01c:	e7b0      	b.n	800cf80 <_printf_i+0xfc>
 800d01e:	6823      	ldr	r3, [r4, #0]
 800d020:	f043 0320 	orr.w	r3, r3, #32
 800d024:	6023      	str	r3, [r4, #0]
 800d026:	2378      	movs	r3, #120	; 0x78
 800d028:	4828      	ldr	r0, [pc, #160]	; (800d0cc <_printf_i+0x248>)
 800d02a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d02e:	e7e3      	b.n	800cff8 <_printf_i+0x174>
 800d030:	065e      	lsls	r6, r3, #25
 800d032:	bf48      	it	mi
 800d034:	b2ad      	uxthmi	r5, r5
 800d036:	e7e6      	b.n	800d006 <_printf_i+0x182>
 800d038:	4616      	mov	r6, r2
 800d03a:	e7bb      	b.n	800cfb4 <_printf_i+0x130>
 800d03c:	680b      	ldr	r3, [r1, #0]
 800d03e:	6826      	ldr	r6, [r4, #0]
 800d040:	6960      	ldr	r0, [r4, #20]
 800d042:	1d1d      	adds	r5, r3, #4
 800d044:	600d      	str	r5, [r1, #0]
 800d046:	0635      	lsls	r5, r6, #24
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	d501      	bpl.n	800d050 <_printf_i+0x1cc>
 800d04c:	6018      	str	r0, [r3, #0]
 800d04e:	e002      	b.n	800d056 <_printf_i+0x1d2>
 800d050:	0671      	lsls	r1, r6, #25
 800d052:	d5fb      	bpl.n	800d04c <_printf_i+0x1c8>
 800d054:	8018      	strh	r0, [r3, #0]
 800d056:	2300      	movs	r3, #0
 800d058:	6123      	str	r3, [r4, #16]
 800d05a:	4616      	mov	r6, r2
 800d05c:	e7ba      	b.n	800cfd4 <_printf_i+0x150>
 800d05e:	680b      	ldr	r3, [r1, #0]
 800d060:	1d1a      	adds	r2, r3, #4
 800d062:	600a      	str	r2, [r1, #0]
 800d064:	681e      	ldr	r6, [r3, #0]
 800d066:	6862      	ldr	r2, [r4, #4]
 800d068:	2100      	movs	r1, #0
 800d06a:	4630      	mov	r0, r6
 800d06c:	f7f3 f8e8 	bl	8000240 <memchr>
 800d070:	b108      	cbz	r0, 800d076 <_printf_i+0x1f2>
 800d072:	1b80      	subs	r0, r0, r6
 800d074:	6060      	str	r0, [r4, #4]
 800d076:	6863      	ldr	r3, [r4, #4]
 800d078:	6123      	str	r3, [r4, #16]
 800d07a:	2300      	movs	r3, #0
 800d07c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d080:	e7a8      	b.n	800cfd4 <_printf_i+0x150>
 800d082:	6923      	ldr	r3, [r4, #16]
 800d084:	4632      	mov	r2, r6
 800d086:	4649      	mov	r1, r9
 800d088:	4640      	mov	r0, r8
 800d08a:	47d0      	blx	sl
 800d08c:	3001      	adds	r0, #1
 800d08e:	d0ab      	beq.n	800cfe8 <_printf_i+0x164>
 800d090:	6823      	ldr	r3, [r4, #0]
 800d092:	079b      	lsls	r3, r3, #30
 800d094:	d413      	bmi.n	800d0be <_printf_i+0x23a>
 800d096:	68e0      	ldr	r0, [r4, #12]
 800d098:	9b03      	ldr	r3, [sp, #12]
 800d09a:	4298      	cmp	r0, r3
 800d09c:	bfb8      	it	lt
 800d09e:	4618      	movlt	r0, r3
 800d0a0:	e7a4      	b.n	800cfec <_printf_i+0x168>
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	4632      	mov	r2, r6
 800d0a6:	4649      	mov	r1, r9
 800d0a8:	4640      	mov	r0, r8
 800d0aa:	47d0      	blx	sl
 800d0ac:	3001      	adds	r0, #1
 800d0ae:	d09b      	beq.n	800cfe8 <_printf_i+0x164>
 800d0b0:	3501      	adds	r5, #1
 800d0b2:	68e3      	ldr	r3, [r4, #12]
 800d0b4:	9903      	ldr	r1, [sp, #12]
 800d0b6:	1a5b      	subs	r3, r3, r1
 800d0b8:	42ab      	cmp	r3, r5
 800d0ba:	dcf2      	bgt.n	800d0a2 <_printf_i+0x21e>
 800d0bc:	e7eb      	b.n	800d096 <_printf_i+0x212>
 800d0be:	2500      	movs	r5, #0
 800d0c0:	f104 0619 	add.w	r6, r4, #25
 800d0c4:	e7f5      	b.n	800d0b2 <_printf_i+0x22e>
 800d0c6:	bf00      	nop
 800d0c8:	08011644 	.word	0x08011644
 800d0cc:	08011655 	.word	0x08011655

0800d0d0 <cleanup_glue>:
 800d0d0:	b538      	push	{r3, r4, r5, lr}
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	6809      	ldr	r1, [r1, #0]
 800d0d6:	4605      	mov	r5, r0
 800d0d8:	b109      	cbz	r1, 800d0de <cleanup_glue+0xe>
 800d0da:	f7ff fff9 	bl	800d0d0 <cleanup_glue>
 800d0de:	4621      	mov	r1, r4
 800d0e0:	4628      	mov	r0, r5
 800d0e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0e6:	f7ff badf 	b.w	800c6a8 <_free_r>
	...

0800d0ec <_reclaim_reent>:
 800d0ec:	4b2c      	ldr	r3, [pc, #176]	; (800d1a0 <_reclaim_reent+0xb4>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4283      	cmp	r3, r0
 800d0f2:	b570      	push	{r4, r5, r6, lr}
 800d0f4:	4604      	mov	r4, r0
 800d0f6:	d051      	beq.n	800d19c <_reclaim_reent+0xb0>
 800d0f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d0fa:	b143      	cbz	r3, 800d10e <_reclaim_reent+0x22>
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d14a      	bne.n	800d198 <_reclaim_reent+0xac>
 800d102:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d104:	6819      	ldr	r1, [r3, #0]
 800d106:	b111      	cbz	r1, 800d10e <_reclaim_reent+0x22>
 800d108:	4620      	mov	r0, r4
 800d10a:	f7ff facd 	bl	800c6a8 <_free_r>
 800d10e:	6961      	ldr	r1, [r4, #20]
 800d110:	b111      	cbz	r1, 800d118 <_reclaim_reent+0x2c>
 800d112:	4620      	mov	r0, r4
 800d114:	f7ff fac8 	bl	800c6a8 <_free_r>
 800d118:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d11a:	b111      	cbz	r1, 800d122 <_reclaim_reent+0x36>
 800d11c:	4620      	mov	r0, r4
 800d11e:	f7ff fac3 	bl	800c6a8 <_free_r>
 800d122:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d124:	b111      	cbz	r1, 800d12c <_reclaim_reent+0x40>
 800d126:	4620      	mov	r0, r4
 800d128:	f7ff fabe 	bl	800c6a8 <_free_r>
 800d12c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d12e:	b111      	cbz	r1, 800d136 <_reclaim_reent+0x4a>
 800d130:	4620      	mov	r0, r4
 800d132:	f7ff fab9 	bl	800c6a8 <_free_r>
 800d136:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d138:	b111      	cbz	r1, 800d140 <_reclaim_reent+0x54>
 800d13a:	4620      	mov	r0, r4
 800d13c:	f7ff fab4 	bl	800c6a8 <_free_r>
 800d140:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d142:	b111      	cbz	r1, 800d14a <_reclaim_reent+0x5e>
 800d144:	4620      	mov	r0, r4
 800d146:	f7ff faaf 	bl	800c6a8 <_free_r>
 800d14a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d14c:	b111      	cbz	r1, 800d154 <_reclaim_reent+0x68>
 800d14e:	4620      	mov	r0, r4
 800d150:	f7ff faaa 	bl	800c6a8 <_free_r>
 800d154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d156:	b111      	cbz	r1, 800d15e <_reclaim_reent+0x72>
 800d158:	4620      	mov	r0, r4
 800d15a:	f7ff faa5 	bl	800c6a8 <_free_r>
 800d15e:	69a3      	ldr	r3, [r4, #24]
 800d160:	b1e3      	cbz	r3, 800d19c <_reclaim_reent+0xb0>
 800d162:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d164:	4620      	mov	r0, r4
 800d166:	4798      	blx	r3
 800d168:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d16a:	b1b9      	cbz	r1, 800d19c <_reclaim_reent+0xb0>
 800d16c:	4620      	mov	r0, r4
 800d16e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d172:	f7ff bfad 	b.w	800d0d0 <cleanup_glue>
 800d176:	5949      	ldr	r1, [r1, r5]
 800d178:	b941      	cbnz	r1, 800d18c <_reclaim_reent+0xa0>
 800d17a:	3504      	adds	r5, #4
 800d17c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d17e:	2d80      	cmp	r5, #128	; 0x80
 800d180:	68d9      	ldr	r1, [r3, #12]
 800d182:	d1f8      	bne.n	800d176 <_reclaim_reent+0x8a>
 800d184:	4620      	mov	r0, r4
 800d186:	f7ff fa8f 	bl	800c6a8 <_free_r>
 800d18a:	e7ba      	b.n	800d102 <_reclaim_reent+0x16>
 800d18c:	680e      	ldr	r6, [r1, #0]
 800d18e:	4620      	mov	r0, r4
 800d190:	f7ff fa8a 	bl	800c6a8 <_free_r>
 800d194:	4631      	mov	r1, r6
 800d196:	e7ef      	b.n	800d178 <_reclaim_reent+0x8c>
 800d198:	2500      	movs	r5, #0
 800d19a:	e7ef      	b.n	800d17c <_reclaim_reent+0x90>
 800d19c:	bd70      	pop	{r4, r5, r6, pc}
 800d19e:	bf00      	nop
 800d1a0:	20000020 	.word	0x20000020

0800d1a4 <_sbrk_r>:
 800d1a4:	b538      	push	{r3, r4, r5, lr}
 800d1a6:	4d06      	ldr	r5, [pc, #24]	; (800d1c0 <_sbrk_r+0x1c>)
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	4604      	mov	r4, r0
 800d1ac:	4608      	mov	r0, r1
 800d1ae:	602b      	str	r3, [r5, #0]
 800d1b0:	f7f4 fcce 	bl	8001b50 <_sbrk>
 800d1b4:	1c43      	adds	r3, r0, #1
 800d1b6:	d102      	bne.n	800d1be <_sbrk_r+0x1a>
 800d1b8:	682b      	ldr	r3, [r5, #0]
 800d1ba:	b103      	cbz	r3, 800d1be <_sbrk_r+0x1a>
 800d1bc:	6023      	str	r3, [r4, #0]
 800d1be:	bd38      	pop	{r3, r4, r5, pc}
 800d1c0:	200050b8 	.word	0x200050b8

0800d1c4 <_raise_r>:
 800d1c4:	291f      	cmp	r1, #31
 800d1c6:	b538      	push	{r3, r4, r5, lr}
 800d1c8:	4604      	mov	r4, r0
 800d1ca:	460d      	mov	r5, r1
 800d1cc:	d904      	bls.n	800d1d8 <_raise_r+0x14>
 800d1ce:	2316      	movs	r3, #22
 800d1d0:	6003      	str	r3, [r0, #0]
 800d1d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d1d6:	bd38      	pop	{r3, r4, r5, pc}
 800d1d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d1da:	b112      	cbz	r2, 800d1e2 <_raise_r+0x1e>
 800d1dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1e0:	b94b      	cbnz	r3, 800d1f6 <_raise_r+0x32>
 800d1e2:	4620      	mov	r0, r4
 800d1e4:	f000 f830 	bl	800d248 <_getpid_r>
 800d1e8:	462a      	mov	r2, r5
 800d1ea:	4601      	mov	r1, r0
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1f2:	f000 b817 	b.w	800d224 <_kill_r>
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d00a      	beq.n	800d210 <_raise_r+0x4c>
 800d1fa:	1c59      	adds	r1, r3, #1
 800d1fc:	d103      	bne.n	800d206 <_raise_r+0x42>
 800d1fe:	2316      	movs	r3, #22
 800d200:	6003      	str	r3, [r0, #0]
 800d202:	2001      	movs	r0, #1
 800d204:	e7e7      	b.n	800d1d6 <_raise_r+0x12>
 800d206:	2400      	movs	r4, #0
 800d208:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d20c:	4628      	mov	r0, r5
 800d20e:	4798      	blx	r3
 800d210:	2000      	movs	r0, #0
 800d212:	e7e0      	b.n	800d1d6 <_raise_r+0x12>

0800d214 <raise>:
 800d214:	4b02      	ldr	r3, [pc, #8]	; (800d220 <raise+0xc>)
 800d216:	4601      	mov	r1, r0
 800d218:	6818      	ldr	r0, [r3, #0]
 800d21a:	f7ff bfd3 	b.w	800d1c4 <_raise_r>
 800d21e:	bf00      	nop
 800d220:	20000020 	.word	0x20000020

0800d224 <_kill_r>:
 800d224:	b538      	push	{r3, r4, r5, lr}
 800d226:	4d07      	ldr	r5, [pc, #28]	; (800d244 <_kill_r+0x20>)
 800d228:	2300      	movs	r3, #0
 800d22a:	4604      	mov	r4, r0
 800d22c:	4608      	mov	r0, r1
 800d22e:	4611      	mov	r1, r2
 800d230:	602b      	str	r3, [r5, #0]
 800d232:	f7f4 fc05 	bl	8001a40 <_kill>
 800d236:	1c43      	adds	r3, r0, #1
 800d238:	d102      	bne.n	800d240 <_kill_r+0x1c>
 800d23a:	682b      	ldr	r3, [r5, #0]
 800d23c:	b103      	cbz	r3, 800d240 <_kill_r+0x1c>
 800d23e:	6023      	str	r3, [r4, #0]
 800d240:	bd38      	pop	{r3, r4, r5, pc}
 800d242:	bf00      	nop
 800d244:	200050b8 	.word	0x200050b8

0800d248 <_getpid_r>:
 800d248:	f7f4 bbf2 	b.w	8001a30 <_getpid>

0800d24c <siprintf>:
 800d24c:	b40e      	push	{r1, r2, r3}
 800d24e:	b500      	push	{lr}
 800d250:	b09c      	sub	sp, #112	; 0x70
 800d252:	ab1d      	add	r3, sp, #116	; 0x74
 800d254:	9002      	str	r0, [sp, #8]
 800d256:	9006      	str	r0, [sp, #24]
 800d258:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d25c:	4809      	ldr	r0, [pc, #36]	; (800d284 <siprintf+0x38>)
 800d25e:	9107      	str	r1, [sp, #28]
 800d260:	9104      	str	r1, [sp, #16]
 800d262:	4909      	ldr	r1, [pc, #36]	; (800d288 <siprintf+0x3c>)
 800d264:	f853 2b04 	ldr.w	r2, [r3], #4
 800d268:	9105      	str	r1, [sp, #20]
 800d26a:	6800      	ldr	r0, [r0, #0]
 800d26c:	9301      	str	r3, [sp, #4]
 800d26e:	a902      	add	r1, sp, #8
 800d270:	f002 f88a 	bl	800f388 <_svfiprintf_r>
 800d274:	9b02      	ldr	r3, [sp, #8]
 800d276:	2200      	movs	r2, #0
 800d278:	701a      	strb	r2, [r3, #0]
 800d27a:	b01c      	add	sp, #112	; 0x70
 800d27c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d280:	b003      	add	sp, #12
 800d282:	4770      	bx	lr
 800d284:	20000020 	.word	0x20000020
 800d288:	ffff0208 	.word	0xffff0208

0800d28c <__sread>:
 800d28c:	b510      	push	{r4, lr}
 800d28e:	460c      	mov	r4, r1
 800d290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d294:	f002 fad2 	bl	800f83c <_read_r>
 800d298:	2800      	cmp	r0, #0
 800d29a:	bfab      	itete	ge
 800d29c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d29e:	89a3      	ldrhlt	r3, [r4, #12]
 800d2a0:	181b      	addge	r3, r3, r0
 800d2a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d2a6:	bfac      	ite	ge
 800d2a8:	6563      	strge	r3, [r4, #84]	; 0x54
 800d2aa:	81a3      	strhlt	r3, [r4, #12]
 800d2ac:	bd10      	pop	{r4, pc}

0800d2ae <__seofread>:
 800d2ae:	2000      	movs	r0, #0
 800d2b0:	4770      	bx	lr

0800d2b2 <__swrite>:
 800d2b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2b6:	461f      	mov	r7, r3
 800d2b8:	898b      	ldrh	r3, [r1, #12]
 800d2ba:	05db      	lsls	r3, r3, #23
 800d2bc:	4605      	mov	r5, r0
 800d2be:	460c      	mov	r4, r1
 800d2c0:	4616      	mov	r6, r2
 800d2c2:	d505      	bpl.n	800d2d0 <__swrite+0x1e>
 800d2c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2c8:	2302      	movs	r3, #2
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f001 fc1e 	bl	800eb0c <_lseek_r>
 800d2d0:	89a3      	ldrh	r3, [r4, #12]
 800d2d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d2da:	81a3      	strh	r3, [r4, #12]
 800d2dc:	4632      	mov	r2, r6
 800d2de:	463b      	mov	r3, r7
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e6:	f000 bb75 	b.w	800d9d4 <_write_r>

0800d2ea <__sseek>:
 800d2ea:	b510      	push	{r4, lr}
 800d2ec:	460c      	mov	r4, r1
 800d2ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2f2:	f001 fc0b 	bl	800eb0c <_lseek_r>
 800d2f6:	1c43      	adds	r3, r0, #1
 800d2f8:	89a3      	ldrh	r3, [r4, #12]
 800d2fa:	bf15      	itete	ne
 800d2fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d2fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d302:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d306:	81a3      	strheq	r3, [r4, #12]
 800d308:	bf18      	it	ne
 800d30a:	81a3      	strhne	r3, [r4, #12]
 800d30c:	bd10      	pop	{r4, pc}

0800d30e <__sclose>:
 800d30e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d312:	f000 bb8f 	b.w	800da34 <_close_r>

0800d316 <strcpy>:
 800d316:	4603      	mov	r3, r0
 800d318:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d31c:	f803 2b01 	strb.w	r2, [r3], #1
 800d320:	2a00      	cmp	r2, #0
 800d322:	d1f9      	bne.n	800d318 <strcpy+0x2>
 800d324:	4770      	bx	lr

0800d326 <strncmp>:
 800d326:	b510      	push	{r4, lr}
 800d328:	b16a      	cbz	r2, 800d346 <strncmp+0x20>
 800d32a:	3901      	subs	r1, #1
 800d32c:	1884      	adds	r4, r0, r2
 800d32e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d332:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d336:	4293      	cmp	r3, r2
 800d338:	d103      	bne.n	800d342 <strncmp+0x1c>
 800d33a:	42a0      	cmp	r0, r4
 800d33c:	d001      	beq.n	800d342 <strncmp+0x1c>
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d1f5      	bne.n	800d32e <strncmp+0x8>
 800d342:	1a98      	subs	r0, r3, r2
 800d344:	bd10      	pop	{r4, pc}
 800d346:	4610      	mov	r0, r2
 800d348:	e7fc      	b.n	800d344 <strncmp+0x1e>
	...

0800d34c <_strtol_l.isra.0>:
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d352:	d001      	beq.n	800d358 <_strtol_l.isra.0+0xc>
 800d354:	2b24      	cmp	r3, #36	; 0x24
 800d356:	d906      	bls.n	800d366 <_strtol_l.isra.0+0x1a>
 800d358:	f7fe fca6 	bl	800bca8 <__errno>
 800d35c:	2316      	movs	r3, #22
 800d35e:	6003      	str	r3, [r0, #0]
 800d360:	2000      	movs	r0, #0
 800d362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d366:	4f3a      	ldr	r7, [pc, #232]	; (800d450 <_strtol_l.isra.0+0x104>)
 800d368:	468e      	mov	lr, r1
 800d36a:	4676      	mov	r6, lr
 800d36c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d370:	5de5      	ldrb	r5, [r4, r7]
 800d372:	f015 0508 	ands.w	r5, r5, #8
 800d376:	d1f8      	bne.n	800d36a <_strtol_l.isra.0+0x1e>
 800d378:	2c2d      	cmp	r4, #45	; 0x2d
 800d37a:	d134      	bne.n	800d3e6 <_strtol_l.isra.0+0x9a>
 800d37c:	f89e 4000 	ldrb.w	r4, [lr]
 800d380:	f04f 0801 	mov.w	r8, #1
 800d384:	f106 0e02 	add.w	lr, r6, #2
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d05c      	beq.n	800d446 <_strtol_l.isra.0+0xfa>
 800d38c:	2b10      	cmp	r3, #16
 800d38e:	d10c      	bne.n	800d3aa <_strtol_l.isra.0+0x5e>
 800d390:	2c30      	cmp	r4, #48	; 0x30
 800d392:	d10a      	bne.n	800d3aa <_strtol_l.isra.0+0x5e>
 800d394:	f89e 4000 	ldrb.w	r4, [lr]
 800d398:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d39c:	2c58      	cmp	r4, #88	; 0x58
 800d39e:	d14d      	bne.n	800d43c <_strtol_l.isra.0+0xf0>
 800d3a0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800d3a4:	2310      	movs	r3, #16
 800d3a6:	f10e 0e02 	add.w	lr, lr, #2
 800d3aa:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800d3ae:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d3b2:	2600      	movs	r6, #0
 800d3b4:	fbbc f9f3 	udiv	r9, ip, r3
 800d3b8:	4635      	mov	r5, r6
 800d3ba:	fb03 ca19 	mls	sl, r3, r9, ip
 800d3be:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d3c2:	2f09      	cmp	r7, #9
 800d3c4:	d818      	bhi.n	800d3f8 <_strtol_l.isra.0+0xac>
 800d3c6:	463c      	mov	r4, r7
 800d3c8:	42a3      	cmp	r3, r4
 800d3ca:	dd24      	ble.n	800d416 <_strtol_l.isra.0+0xca>
 800d3cc:	2e00      	cmp	r6, #0
 800d3ce:	db1f      	blt.n	800d410 <_strtol_l.isra.0+0xc4>
 800d3d0:	45a9      	cmp	r9, r5
 800d3d2:	d31d      	bcc.n	800d410 <_strtol_l.isra.0+0xc4>
 800d3d4:	d101      	bne.n	800d3da <_strtol_l.isra.0+0x8e>
 800d3d6:	45a2      	cmp	sl, r4
 800d3d8:	db1a      	blt.n	800d410 <_strtol_l.isra.0+0xc4>
 800d3da:	fb05 4503 	mla	r5, r5, r3, r4
 800d3de:	2601      	movs	r6, #1
 800d3e0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d3e4:	e7eb      	b.n	800d3be <_strtol_l.isra.0+0x72>
 800d3e6:	2c2b      	cmp	r4, #43	; 0x2b
 800d3e8:	bf08      	it	eq
 800d3ea:	f89e 4000 	ldrbeq.w	r4, [lr]
 800d3ee:	46a8      	mov	r8, r5
 800d3f0:	bf08      	it	eq
 800d3f2:	f106 0e02 	addeq.w	lr, r6, #2
 800d3f6:	e7c7      	b.n	800d388 <_strtol_l.isra.0+0x3c>
 800d3f8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d3fc:	2f19      	cmp	r7, #25
 800d3fe:	d801      	bhi.n	800d404 <_strtol_l.isra.0+0xb8>
 800d400:	3c37      	subs	r4, #55	; 0x37
 800d402:	e7e1      	b.n	800d3c8 <_strtol_l.isra.0+0x7c>
 800d404:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d408:	2f19      	cmp	r7, #25
 800d40a:	d804      	bhi.n	800d416 <_strtol_l.isra.0+0xca>
 800d40c:	3c57      	subs	r4, #87	; 0x57
 800d40e:	e7db      	b.n	800d3c8 <_strtol_l.isra.0+0x7c>
 800d410:	f04f 36ff 	mov.w	r6, #4294967295
 800d414:	e7e4      	b.n	800d3e0 <_strtol_l.isra.0+0x94>
 800d416:	2e00      	cmp	r6, #0
 800d418:	da05      	bge.n	800d426 <_strtol_l.isra.0+0xda>
 800d41a:	2322      	movs	r3, #34	; 0x22
 800d41c:	6003      	str	r3, [r0, #0]
 800d41e:	4665      	mov	r5, ip
 800d420:	b942      	cbnz	r2, 800d434 <_strtol_l.isra.0+0xe8>
 800d422:	4628      	mov	r0, r5
 800d424:	e79d      	b.n	800d362 <_strtol_l.isra.0+0x16>
 800d426:	f1b8 0f00 	cmp.w	r8, #0
 800d42a:	d000      	beq.n	800d42e <_strtol_l.isra.0+0xe2>
 800d42c:	426d      	negs	r5, r5
 800d42e:	2a00      	cmp	r2, #0
 800d430:	d0f7      	beq.n	800d422 <_strtol_l.isra.0+0xd6>
 800d432:	b10e      	cbz	r6, 800d438 <_strtol_l.isra.0+0xec>
 800d434:	f10e 31ff 	add.w	r1, lr, #4294967295
 800d438:	6011      	str	r1, [r2, #0]
 800d43a:	e7f2      	b.n	800d422 <_strtol_l.isra.0+0xd6>
 800d43c:	2430      	movs	r4, #48	; 0x30
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d1b3      	bne.n	800d3aa <_strtol_l.isra.0+0x5e>
 800d442:	2308      	movs	r3, #8
 800d444:	e7b1      	b.n	800d3aa <_strtol_l.isra.0+0x5e>
 800d446:	2c30      	cmp	r4, #48	; 0x30
 800d448:	d0a4      	beq.n	800d394 <_strtol_l.isra.0+0x48>
 800d44a:	230a      	movs	r3, #10
 800d44c:	e7ad      	b.n	800d3aa <_strtol_l.isra.0+0x5e>
 800d44e:	bf00      	nop
 800d450:	080116df 	.word	0x080116df

0800d454 <_strtol_r>:
 800d454:	f7ff bf7a 	b.w	800d34c <_strtol_l.isra.0>

0800d458 <_strtoul_l.isra.0>:
 800d458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d45c:	4e3b      	ldr	r6, [pc, #236]	; (800d54c <_strtoul_l.isra.0+0xf4>)
 800d45e:	4686      	mov	lr, r0
 800d460:	468c      	mov	ip, r1
 800d462:	4660      	mov	r0, ip
 800d464:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800d468:	5da5      	ldrb	r5, [r4, r6]
 800d46a:	f015 0508 	ands.w	r5, r5, #8
 800d46e:	d1f8      	bne.n	800d462 <_strtoul_l.isra.0+0xa>
 800d470:	2c2d      	cmp	r4, #45	; 0x2d
 800d472:	d134      	bne.n	800d4de <_strtoul_l.isra.0+0x86>
 800d474:	f89c 4000 	ldrb.w	r4, [ip]
 800d478:	f04f 0801 	mov.w	r8, #1
 800d47c:	f100 0c02 	add.w	ip, r0, #2
 800d480:	2b00      	cmp	r3, #0
 800d482:	d05e      	beq.n	800d542 <_strtoul_l.isra.0+0xea>
 800d484:	2b10      	cmp	r3, #16
 800d486:	d10c      	bne.n	800d4a2 <_strtoul_l.isra.0+0x4a>
 800d488:	2c30      	cmp	r4, #48	; 0x30
 800d48a:	d10a      	bne.n	800d4a2 <_strtoul_l.isra.0+0x4a>
 800d48c:	f89c 0000 	ldrb.w	r0, [ip]
 800d490:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d494:	2858      	cmp	r0, #88	; 0x58
 800d496:	d14f      	bne.n	800d538 <_strtoul_l.isra.0+0xe0>
 800d498:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800d49c:	2310      	movs	r3, #16
 800d49e:	f10c 0c02 	add.w	ip, ip, #2
 800d4a2:	f04f 37ff 	mov.w	r7, #4294967295
 800d4a6:	2500      	movs	r5, #0
 800d4a8:	fbb7 f7f3 	udiv	r7, r7, r3
 800d4ac:	fb03 f907 	mul.w	r9, r3, r7
 800d4b0:	ea6f 0909 	mvn.w	r9, r9
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800d4ba:	2e09      	cmp	r6, #9
 800d4bc:	d818      	bhi.n	800d4f0 <_strtoul_l.isra.0+0x98>
 800d4be:	4634      	mov	r4, r6
 800d4c0:	42a3      	cmp	r3, r4
 800d4c2:	dd24      	ble.n	800d50e <_strtoul_l.isra.0+0xb6>
 800d4c4:	2d00      	cmp	r5, #0
 800d4c6:	db1f      	blt.n	800d508 <_strtoul_l.isra.0+0xb0>
 800d4c8:	4287      	cmp	r7, r0
 800d4ca:	d31d      	bcc.n	800d508 <_strtoul_l.isra.0+0xb0>
 800d4cc:	d101      	bne.n	800d4d2 <_strtoul_l.isra.0+0x7a>
 800d4ce:	45a1      	cmp	r9, r4
 800d4d0:	db1a      	blt.n	800d508 <_strtoul_l.isra.0+0xb0>
 800d4d2:	fb00 4003 	mla	r0, r0, r3, r4
 800d4d6:	2501      	movs	r5, #1
 800d4d8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800d4dc:	e7eb      	b.n	800d4b6 <_strtoul_l.isra.0+0x5e>
 800d4de:	2c2b      	cmp	r4, #43	; 0x2b
 800d4e0:	bf08      	it	eq
 800d4e2:	f89c 4000 	ldrbeq.w	r4, [ip]
 800d4e6:	46a8      	mov	r8, r5
 800d4e8:	bf08      	it	eq
 800d4ea:	f100 0c02 	addeq.w	ip, r0, #2
 800d4ee:	e7c7      	b.n	800d480 <_strtoul_l.isra.0+0x28>
 800d4f0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800d4f4:	2e19      	cmp	r6, #25
 800d4f6:	d801      	bhi.n	800d4fc <_strtoul_l.isra.0+0xa4>
 800d4f8:	3c37      	subs	r4, #55	; 0x37
 800d4fa:	e7e1      	b.n	800d4c0 <_strtoul_l.isra.0+0x68>
 800d4fc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800d500:	2e19      	cmp	r6, #25
 800d502:	d804      	bhi.n	800d50e <_strtoul_l.isra.0+0xb6>
 800d504:	3c57      	subs	r4, #87	; 0x57
 800d506:	e7db      	b.n	800d4c0 <_strtoul_l.isra.0+0x68>
 800d508:	f04f 35ff 	mov.w	r5, #4294967295
 800d50c:	e7e4      	b.n	800d4d8 <_strtoul_l.isra.0+0x80>
 800d50e:	2d00      	cmp	r5, #0
 800d510:	da07      	bge.n	800d522 <_strtoul_l.isra.0+0xca>
 800d512:	2322      	movs	r3, #34	; 0x22
 800d514:	f8ce 3000 	str.w	r3, [lr]
 800d518:	f04f 30ff 	mov.w	r0, #4294967295
 800d51c:	b942      	cbnz	r2, 800d530 <_strtoul_l.isra.0+0xd8>
 800d51e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d522:	f1b8 0f00 	cmp.w	r8, #0
 800d526:	d000      	beq.n	800d52a <_strtoul_l.isra.0+0xd2>
 800d528:	4240      	negs	r0, r0
 800d52a:	2a00      	cmp	r2, #0
 800d52c:	d0f7      	beq.n	800d51e <_strtoul_l.isra.0+0xc6>
 800d52e:	b10d      	cbz	r5, 800d534 <_strtoul_l.isra.0+0xdc>
 800d530:	f10c 31ff 	add.w	r1, ip, #4294967295
 800d534:	6011      	str	r1, [r2, #0]
 800d536:	e7f2      	b.n	800d51e <_strtoul_l.isra.0+0xc6>
 800d538:	2430      	movs	r4, #48	; 0x30
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d1b1      	bne.n	800d4a2 <_strtoul_l.isra.0+0x4a>
 800d53e:	2308      	movs	r3, #8
 800d540:	e7af      	b.n	800d4a2 <_strtoul_l.isra.0+0x4a>
 800d542:	2c30      	cmp	r4, #48	; 0x30
 800d544:	d0a2      	beq.n	800d48c <_strtoul_l.isra.0+0x34>
 800d546:	230a      	movs	r3, #10
 800d548:	e7ab      	b.n	800d4a2 <_strtoul_l.isra.0+0x4a>
 800d54a:	bf00      	nop
 800d54c:	080116df 	.word	0x080116df

0800d550 <_strtoul_r>:
 800d550:	f7ff bf82 	b.w	800d458 <_strtoul_l.isra.0>

0800d554 <strtoul>:
 800d554:	4613      	mov	r3, r2
 800d556:	460a      	mov	r2, r1
 800d558:	4601      	mov	r1, r0
 800d55a:	4802      	ldr	r0, [pc, #8]	; (800d564 <strtoul+0x10>)
 800d55c:	6800      	ldr	r0, [r0, #0]
 800d55e:	f7ff bf7b 	b.w	800d458 <_strtoul_l.isra.0>
 800d562:	bf00      	nop
 800d564:	20000020 	.word	0x20000020

0800d568 <__tzcalc_limits>:
 800d568:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56c:	4680      	mov	r8, r0
 800d56e:	f001 fa15 	bl	800e99c <__gettzinfo>
 800d572:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800d576:	4598      	cmp	r8, r3
 800d578:	f340 8098 	ble.w	800d6ac <__tzcalc_limits+0x144>
 800d57c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 800d580:	4443      	add	r3, r8
 800d582:	109b      	asrs	r3, r3, #2
 800d584:	f240 126d 	movw	r2, #365	; 0x16d
 800d588:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 800d58c:	fb02 3505 	mla	r5, r2, r5, r3
 800d590:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800d594:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 800d598:	fb93 f3f2 	sdiv	r3, r3, r2
 800d59c:	441d      	add	r5, r3
 800d59e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800d5a2:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 800d5a6:	fb98 f7f3 	sdiv	r7, r8, r3
 800d5aa:	fb03 8717 	mls	r7, r3, r7, r8
 800d5ae:	4442      	add	r2, r8
 800d5b0:	fab7 fc87 	clz	ip, r7
 800d5b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800d5b8:	f008 0303 	and.w	r3, r8, #3
 800d5bc:	4415      	add	r5, r2
 800d5be:	2264      	movs	r2, #100	; 0x64
 800d5c0:	f8c0 8004 	str.w	r8, [r0, #4]
 800d5c4:	fb98 f6f2 	sdiv	r6, r8, r2
 800d5c8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800d5cc:	fb02 8616 	mls	r6, r2, r6, r8
 800d5d0:	4604      	mov	r4, r0
 800d5d2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800d5d6:	9300      	str	r3, [sp, #0]
 800d5d8:	f04f 0e07 	mov.w	lr, #7
 800d5dc:	7a22      	ldrb	r2, [r4, #8]
 800d5de:	6963      	ldr	r3, [r4, #20]
 800d5e0:	2a4a      	cmp	r2, #74	; 0x4a
 800d5e2:	d128      	bne.n	800d636 <__tzcalc_limits+0xce>
 800d5e4:	9900      	ldr	r1, [sp, #0]
 800d5e6:	18ea      	adds	r2, r5, r3
 800d5e8:	b901      	cbnz	r1, 800d5ec <__tzcalc_limits+0x84>
 800d5ea:	b906      	cbnz	r6, 800d5ee <__tzcalc_limits+0x86>
 800d5ec:	bb0f      	cbnz	r7, 800d632 <__tzcalc_limits+0xca>
 800d5ee:	2b3b      	cmp	r3, #59	; 0x3b
 800d5f0:	bfd4      	ite	le
 800d5f2:	2300      	movle	r3, #0
 800d5f4:	2301      	movgt	r3, #1
 800d5f6:	4413      	add	r3, r2
 800d5f8:	1e5a      	subs	r2, r3, #1
 800d5fa:	69a3      	ldr	r3, [r4, #24]
 800d5fc:	492c      	ldr	r1, [pc, #176]	; (800d6b0 <__tzcalc_limits+0x148>)
 800d5fe:	fb01 3202 	mla	r2, r1, r2, r3
 800d602:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d604:	4413      	add	r3, r2
 800d606:	461a      	mov	r2, r3
 800d608:	17db      	asrs	r3, r3, #31
 800d60a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800d60e:	3428      	adds	r4, #40	; 0x28
 800d610:	45a3      	cmp	fp, r4
 800d612:	d1e3      	bne.n	800d5dc <__tzcalc_limits+0x74>
 800d614:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 800d618:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 800d61c:	4294      	cmp	r4, r2
 800d61e:	eb75 0303 	sbcs.w	r3, r5, r3
 800d622:	bfb4      	ite	lt
 800d624:	2301      	movlt	r3, #1
 800d626:	2300      	movge	r3, #0
 800d628:	6003      	str	r3, [r0, #0]
 800d62a:	2001      	movs	r0, #1
 800d62c:	b003      	add	sp, #12
 800d62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d632:	2300      	movs	r3, #0
 800d634:	e7df      	b.n	800d5f6 <__tzcalc_limits+0x8e>
 800d636:	2a44      	cmp	r2, #68	; 0x44
 800d638:	d101      	bne.n	800d63e <__tzcalc_limits+0xd6>
 800d63a:	18ea      	adds	r2, r5, r3
 800d63c:	e7dd      	b.n	800d5fa <__tzcalc_limits+0x92>
 800d63e:	9a00      	ldr	r2, [sp, #0]
 800d640:	bb72      	cbnz	r2, 800d6a0 <__tzcalc_limits+0x138>
 800d642:	2e00      	cmp	r6, #0
 800d644:	bf0c      	ite	eq
 800d646:	46e0      	moveq	r8, ip
 800d648:	f04f 0801 	movne.w	r8, #1
 800d64c:	4919      	ldr	r1, [pc, #100]	; (800d6b4 <__tzcalc_limits+0x14c>)
 800d64e:	68e2      	ldr	r2, [r4, #12]
 800d650:	9201      	str	r2, [sp, #4]
 800d652:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800d656:	fb0a 1808 	mla	r8, sl, r8, r1
 800d65a:	462a      	mov	r2, r5
 800d65c:	f04f 0900 	mov.w	r9, #0
 800d660:	f1a8 0804 	sub.w	r8, r8, #4
 800d664:	9901      	ldr	r1, [sp, #4]
 800d666:	f109 0901 	add.w	r9, r9, #1
 800d66a:	4549      	cmp	r1, r9
 800d66c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 800d670:	dc18      	bgt.n	800d6a4 <__tzcalc_limits+0x13c>
 800d672:	f102 0804 	add.w	r8, r2, #4
 800d676:	fb98 f9fe 	sdiv	r9, r8, lr
 800d67a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 800d67e:	eba8 0909 	sub.w	r9, r8, r9
 800d682:	ebb3 0909 	subs.w	r9, r3, r9
 800d686:	6923      	ldr	r3, [r4, #16]
 800d688:	f103 33ff 	add.w	r3, r3, #4294967295
 800d68c:	bf48      	it	mi
 800d68e:	f109 0907 	addmi.w	r9, r9, #7
 800d692:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800d696:	444b      	add	r3, r9
 800d698:	4553      	cmp	r3, sl
 800d69a:	da05      	bge.n	800d6a8 <__tzcalc_limits+0x140>
 800d69c:	441a      	add	r2, r3
 800d69e:	e7ac      	b.n	800d5fa <__tzcalc_limits+0x92>
 800d6a0:	46e0      	mov	r8, ip
 800d6a2:	e7d3      	b.n	800d64c <__tzcalc_limits+0xe4>
 800d6a4:	4452      	add	r2, sl
 800d6a6:	e7dd      	b.n	800d664 <__tzcalc_limits+0xfc>
 800d6a8:	3b07      	subs	r3, #7
 800d6aa:	e7f5      	b.n	800d698 <__tzcalc_limits+0x130>
 800d6ac:	2000      	movs	r0, #0
 800d6ae:	e7bd      	b.n	800d62c <__tzcalc_limits+0xc4>
 800d6b0:	00015180 	.word	0x00015180
 800d6b4:	080115d4 	.word	0x080115d4

0800d6b8 <__tz_lock>:
 800d6b8:	4801      	ldr	r0, [pc, #4]	; (800d6c0 <__tz_lock+0x8>)
 800d6ba:	f7fe bd32 	b.w	800c122 <__retarget_lock_acquire>
 800d6be:	bf00      	nop
 800d6c0:	200050b3 	.word	0x200050b3

0800d6c4 <__tz_unlock>:
 800d6c4:	4801      	ldr	r0, [pc, #4]	; (800d6cc <__tz_unlock+0x8>)
 800d6c6:	f7fe bd2e 	b.w	800c126 <__retarget_lock_release>
 800d6ca:	bf00      	nop
 800d6cc:	200050b3 	.word	0x200050b3

0800d6d0 <_tzset_unlocked>:
 800d6d0:	4b01      	ldr	r3, [pc, #4]	; (800d6d8 <_tzset_unlocked+0x8>)
 800d6d2:	6818      	ldr	r0, [r3, #0]
 800d6d4:	f000 b802 	b.w	800d6dc <_tzset_unlocked_r>
 800d6d8:	20000020 	.word	0x20000020

0800d6dc <_tzset_unlocked_r>:
 800d6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6e0:	b08d      	sub	sp, #52	; 0x34
 800d6e2:	4607      	mov	r7, r0
 800d6e4:	f001 f95a 	bl	800e99c <__gettzinfo>
 800d6e8:	49ae      	ldr	r1, [pc, #696]	; (800d9a4 <_tzset_unlocked_r+0x2c8>)
 800d6ea:	4eaf      	ldr	r6, [pc, #700]	; (800d9a8 <_tzset_unlocked_r+0x2cc>)
 800d6ec:	4605      	mov	r5, r0
 800d6ee:	4638      	mov	r0, r7
 800d6f0:	f001 f94c 	bl	800e98c <_getenv_r>
 800d6f4:	4604      	mov	r4, r0
 800d6f6:	b970      	cbnz	r0, 800d716 <_tzset_unlocked_r+0x3a>
 800d6f8:	4bac      	ldr	r3, [pc, #688]	; (800d9ac <_tzset_unlocked_r+0x2d0>)
 800d6fa:	4aad      	ldr	r2, [pc, #692]	; (800d9b0 <_tzset_unlocked_r+0x2d4>)
 800d6fc:	6018      	str	r0, [r3, #0]
 800d6fe:	4bad      	ldr	r3, [pc, #692]	; (800d9b4 <_tzset_unlocked_r+0x2d8>)
 800d700:	6018      	str	r0, [r3, #0]
 800d702:	4bad      	ldr	r3, [pc, #692]	; (800d9b8 <_tzset_unlocked_r+0x2dc>)
 800d704:	6830      	ldr	r0, [r6, #0]
 800d706:	e9c3 2200 	strd	r2, r2, [r3]
 800d70a:	f7fe fd17 	bl	800c13c <free>
 800d70e:	6034      	str	r4, [r6, #0]
 800d710:	b00d      	add	sp, #52	; 0x34
 800d712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d716:	6831      	ldr	r1, [r6, #0]
 800d718:	2900      	cmp	r1, #0
 800d71a:	d15f      	bne.n	800d7dc <_tzset_unlocked_r+0x100>
 800d71c:	6830      	ldr	r0, [r6, #0]
 800d71e:	f7fe fd0d 	bl	800c13c <free>
 800d722:	4620      	mov	r0, r4
 800d724:	f7f2 fd7e 	bl	8000224 <strlen>
 800d728:	1c41      	adds	r1, r0, #1
 800d72a:	4638      	mov	r0, r7
 800d72c:	f7ff f80c 	bl	800c748 <_malloc_r>
 800d730:	6030      	str	r0, [r6, #0]
 800d732:	2800      	cmp	r0, #0
 800d734:	d157      	bne.n	800d7e6 <_tzset_unlocked_r+0x10a>
 800d736:	7823      	ldrb	r3, [r4, #0]
 800d738:	4aa0      	ldr	r2, [pc, #640]	; (800d9bc <_tzset_unlocked_r+0x2e0>)
 800d73a:	49a1      	ldr	r1, [pc, #644]	; (800d9c0 <_tzset_unlocked_r+0x2e4>)
 800d73c:	2b3a      	cmp	r3, #58	; 0x3a
 800d73e:	bf08      	it	eq
 800d740:	3401      	addeq	r4, #1
 800d742:	ae0a      	add	r6, sp, #40	; 0x28
 800d744:	4633      	mov	r3, r6
 800d746:	4620      	mov	r0, r4
 800d748:	f002 f88a 	bl	800f860 <siscanf>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	dddf      	ble.n	800d710 <_tzset_unlocked_r+0x34>
 800d750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d752:	18e7      	adds	r7, r4, r3
 800d754:	5ce3      	ldrb	r3, [r4, r3]
 800d756:	2b2d      	cmp	r3, #45	; 0x2d
 800d758:	d149      	bne.n	800d7ee <_tzset_unlocked_r+0x112>
 800d75a:	3701      	adds	r7, #1
 800d75c:	f04f 34ff 	mov.w	r4, #4294967295
 800d760:	f10d 0a20 	add.w	sl, sp, #32
 800d764:	f10d 0b1e 	add.w	fp, sp, #30
 800d768:	f04f 0800 	mov.w	r8, #0
 800d76c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 800d770:	4994      	ldr	r1, [pc, #592]	; (800d9c4 <_tzset_unlocked_r+0x2e8>)
 800d772:	9603      	str	r6, [sp, #12]
 800d774:	f8cd b000 	str.w	fp, [sp]
 800d778:	4633      	mov	r3, r6
 800d77a:	aa07      	add	r2, sp, #28
 800d77c:	4638      	mov	r0, r7
 800d77e:	f8ad 801e 	strh.w	r8, [sp, #30]
 800d782:	f8ad 8020 	strh.w	r8, [sp, #32]
 800d786:	f002 f86b 	bl	800f860 <siscanf>
 800d78a:	4540      	cmp	r0, r8
 800d78c:	ddc0      	ble.n	800d710 <_tzset_unlocked_r+0x34>
 800d78e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d792:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800d796:	f8df 9238 	ldr.w	r9, [pc, #568]	; 800d9d0 <_tzset_unlocked_r+0x2f4>
 800d79a:	213c      	movs	r1, #60	; 0x3c
 800d79c:	fb01 2203 	mla	r2, r1, r3, r2
 800d7a0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800d7a4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800d7a8:	fb01 2303 	mla	r3, r1, r3, r2
 800d7ac:	435c      	muls	r4, r3
 800d7ae:	62ac      	str	r4, [r5, #40]	; 0x28
 800d7b0:	4c81      	ldr	r4, [pc, #516]	; (800d9b8 <_tzset_unlocked_r+0x2dc>)
 800d7b2:	4b82      	ldr	r3, [pc, #520]	; (800d9bc <_tzset_unlocked_r+0x2e0>)
 800d7b4:	6023      	str	r3, [r4, #0]
 800d7b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7b8:	4981      	ldr	r1, [pc, #516]	; (800d9c0 <_tzset_unlocked_r+0x2e4>)
 800d7ba:	441f      	add	r7, r3
 800d7bc:	464a      	mov	r2, r9
 800d7be:	4633      	mov	r3, r6
 800d7c0:	4638      	mov	r0, r7
 800d7c2:	f002 f84d 	bl	800f860 <siscanf>
 800d7c6:	4540      	cmp	r0, r8
 800d7c8:	dc16      	bgt.n	800d7f8 <_tzset_unlocked_r+0x11c>
 800d7ca:	6823      	ldr	r3, [r4, #0]
 800d7cc:	6063      	str	r3, [r4, #4]
 800d7ce:	4b77      	ldr	r3, [pc, #476]	; (800d9ac <_tzset_unlocked_r+0x2d0>)
 800d7d0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d7d2:	601a      	str	r2, [r3, #0]
 800d7d4:	4b77      	ldr	r3, [pc, #476]	; (800d9b4 <_tzset_unlocked_r+0x2d8>)
 800d7d6:	f8c3 8000 	str.w	r8, [r3]
 800d7da:	e799      	b.n	800d710 <_tzset_unlocked_r+0x34>
 800d7dc:	f7f2 fd18 	bl	8000210 <strcmp>
 800d7e0:	2800      	cmp	r0, #0
 800d7e2:	d19b      	bne.n	800d71c <_tzset_unlocked_r+0x40>
 800d7e4:	e794      	b.n	800d710 <_tzset_unlocked_r+0x34>
 800d7e6:	4621      	mov	r1, r4
 800d7e8:	f7ff fd95 	bl	800d316 <strcpy>
 800d7ec:	e7a3      	b.n	800d736 <_tzset_unlocked_r+0x5a>
 800d7ee:	2b2b      	cmp	r3, #43	; 0x2b
 800d7f0:	bf08      	it	eq
 800d7f2:	3701      	addeq	r7, #1
 800d7f4:	2401      	movs	r4, #1
 800d7f6:	e7b3      	b.n	800d760 <_tzset_unlocked_r+0x84>
 800d7f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7fa:	f8c4 9004 	str.w	r9, [r4, #4]
 800d7fe:	18fc      	adds	r4, r7, r3
 800d800:	5cfb      	ldrb	r3, [r7, r3]
 800d802:	2b2d      	cmp	r3, #45	; 0x2d
 800d804:	f040 808b 	bne.w	800d91e <_tzset_unlocked_r+0x242>
 800d808:	3401      	adds	r4, #1
 800d80a:	f04f 37ff 	mov.w	r7, #4294967295
 800d80e:	2300      	movs	r3, #0
 800d810:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d814:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d818:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d81c:	930a      	str	r3, [sp, #40]	; 0x28
 800d81e:	e9cd a602 	strd	sl, r6, [sp, #8]
 800d822:	e9cd b600 	strd	fp, r6, [sp]
 800d826:	4967      	ldr	r1, [pc, #412]	; (800d9c4 <_tzset_unlocked_r+0x2e8>)
 800d828:	4633      	mov	r3, r6
 800d82a:	aa07      	add	r2, sp, #28
 800d82c:	4620      	mov	r0, r4
 800d82e:	f002 f817 	bl	800f860 <siscanf>
 800d832:	2800      	cmp	r0, #0
 800d834:	dc78      	bgt.n	800d928 <_tzset_unlocked_r+0x24c>
 800d836:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 800d838:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 800d83c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d83e:	652f      	str	r7, [r5, #80]	; 0x50
 800d840:	441c      	add	r4, r3
 800d842:	462f      	mov	r7, r5
 800d844:	f04f 0900 	mov.w	r9, #0
 800d848:	7823      	ldrb	r3, [r4, #0]
 800d84a:	2b2c      	cmp	r3, #44	; 0x2c
 800d84c:	bf08      	it	eq
 800d84e:	3401      	addeq	r4, #1
 800d850:	f894 8000 	ldrb.w	r8, [r4]
 800d854:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 800d858:	d178      	bne.n	800d94c <_tzset_unlocked_r+0x270>
 800d85a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 800d85e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800d862:	ab09      	add	r3, sp, #36	; 0x24
 800d864:	9300      	str	r3, [sp, #0]
 800d866:	4958      	ldr	r1, [pc, #352]	; (800d9c8 <_tzset_unlocked_r+0x2ec>)
 800d868:	9603      	str	r6, [sp, #12]
 800d86a:	4633      	mov	r3, r6
 800d86c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800d870:	4620      	mov	r0, r4
 800d872:	f001 fff5 	bl	800f860 <siscanf>
 800d876:	2803      	cmp	r0, #3
 800d878:	f47f af4a 	bne.w	800d710 <_tzset_unlocked_r+0x34>
 800d87c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800d880:	1e4b      	subs	r3, r1, #1
 800d882:	2b0b      	cmp	r3, #11
 800d884:	f63f af44 	bhi.w	800d710 <_tzset_unlocked_r+0x34>
 800d888:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800d88c:	1e53      	subs	r3, r2, #1
 800d88e:	2b04      	cmp	r3, #4
 800d890:	f63f af3e 	bhi.w	800d710 <_tzset_unlocked_r+0x34>
 800d894:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800d898:	2b06      	cmp	r3, #6
 800d89a:	f63f af39 	bhi.w	800d710 <_tzset_unlocked_r+0x34>
 800d89e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800d8a2:	f887 8008 	strb.w	r8, [r7, #8]
 800d8a6:	617b      	str	r3, [r7, #20]
 800d8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8aa:	eb04 0803 	add.w	r8, r4, r3
 800d8ae:	2302      	movs	r3, #2
 800d8b0:	f8ad 301c 	strh.w	r3, [sp, #28]
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	f8ad 301e 	strh.w	r3, [sp, #30]
 800d8ba:	f8ad 3020 	strh.w	r3, [sp, #32]
 800d8be:	930a      	str	r3, [sp, #40]	; 0x28
 800d8c0:	f898 3000 	ldrb.w	r3, [r8]
 800d8c4:	2b2f      	cmp	r3, #47	; 0x2f
 800d8c6:	d109      	bne.n	800d8dc <_tzset_unlocked_r+0x200>
 800d8c8:	e9cd a602 	strd	sl, r6, [sp, #8]
 800d8cc:	e9cd b600 	strd	fp, r6, [sp]
 800d8d0:	493e      	ldr	r1, [pc, #248]	; (800d9cc <_tzset_unlocked_r+0x2f0>)
 800d8d2:	4633      	mov	r3, r6
 800d8d4:	aa07      	add	r2, sp, #28
 800d8d6:	4640      	mov	r0, r8
 800d8d8:	f001 ffc2 	bl	800f860 <siscanf>
 800d8dc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d8e0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800d8e4:	213c      	movs	r1, #60	; 0x3c
 800d8e6:	fb01 2203 	mla	r2, r1, r3, r2
 800d8ea:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800d8ee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800d8f2:	fb01 2303 	mla	r3, r1, r3, r2
 800d8f6:	61bb      	str	r3, [r7, #24]
 800d8f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d8fa:	3728      	adds	r7, #40	; 0x28
 800d8fc:	4444      	add	r4, r8
 800d8fe:	f1b9 0f00 	cmp.w	r9, #0
 800d902:	d020      	beq.n	800d946 <_tzset_unlocked_r+0x26a>
 800d904:	6868      	ldr	r0, [r5, #4]
 800d906:	f7ff fe2f 	bl	800d568 <__tzcalc_limits>
 800d90a:	4b28      	ldr	r3, [pc, #160]	; (800d9ac <_tzset_unlocked_r+0x2d0>)
 800d90c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d90e:	601a      	str	r2, [r3, #0]
 800d910:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800d912:	1a9b      	subs	r3, r3, r2
 800d914:	4a27      	ldr	r2, [pc, #156]	; (800d9b4 <_tzset_unlocked_r+0x2d8>)
 800d916:	bf18      	it	ne
 800d918:	2301      	movne	r3, #1
 800d91a:	6013      	str	r3, [r2, #0]
 800d91c:	e6f8      	b.n	800d710 <_tzset_unlocked_r+0x34>
 800d91e:	2b2b      	cmp	r3, #43	; 0x2b
 800d920:	bf08      	it	eq
 800d922:	3401      	addeq	r4, #1
 800d924:	2701      	movs	r7, #1
 800d926:	e772      	b.n	800d80e <_tzset_unlocked_r+0x132>
 800d928:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800d92c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800d930:	213c      	movs	r1, #60	; 0x3c
 800d932:	fb01 2203 	mla	r2, r1, r3, r2
 800d936:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800d93a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800d93e:	fb01 2303 	mla	r3, r1, r3, r2
 800d942:	435f      	muls	r7, r3
 800d944:	e77a      	b.n	800d83c <_tzset_unlocked_r+0x160>
 800d946:	f04f 0901 	mov.w	r9, #1
 800d94a:	e77d      	b.n	800d848 <_tzset_unlocked_r+0x16c>
 800d94c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800d950:	bf06      	itte	eq
 800d952:	3401      	addeq	r4, #1
 800d954:	4643      	moveq	r3, r8
 800d956:	2344      	movne	r3, #68	; 0x44
 800d958:	220a      	movs	r2, #10
 800d95a:	a90b      	add	r1, sp, #44	; 0x2c
 800d95c:	4620      	mov	r0, r4
 800d95e:	9305      	str	r3, [sp, #20]
 800d960:	f7ff fdf8 	bl	800d554 <strtoul>
 800d964:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800d968:	9b05      	ldr	r3, [sp, #20]
 800d96a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800d96e:	45a0      	cmp	r8, r4
 800d970:	d114      	bne.n	800d99c <_tzset_unlocked_r+0x2c0>
 800d972:	234d      	movs	r3, #77	; 0x4d
 800d974:	f1b9 0f00 	cmp.w	r9, #0
 800d978:	d107      	bne.n	800d98a <_tzset_unlocked_r+0x2ae>
 800d97a:	722b      	strb	r3, [r5, #8]
 800d97c:	2103      	movs	r1, #3
 800d97e:	2302      	movs	r3, #2
 800d980:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800d984:	f8c5 9014 	str.w	r9, [r5, #20]
 800d988:	e791      	b.n	800d8ae <_tzset_unlocked_r+0x1d2>
 800d98a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800d98e:	220b      	movs	r2, #11
 800d990:	2301      	movs	r3, #1
 800d992:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800d996:	2300      	movs	r3, #0
 800d998:	63eb      	str	r3, [r5, #60]	; 0x3c
 800d99a:	e788      	b.n	800d8ae <_tzset_unlocked_r+0x1d2>
 800d99c:	b280      	uxth	r0, r0
 800d99e:	723b      	strb	r3, [r7, #8]
 800d9a0:	6178      	str	r0, [r7, #20]
 800d9a2:	e784      	b.n	800d8ae <_tzset_unlocked_r+0x1d2>
 800d9a4:	08011666 	.word	0x08011666
 800d9a8:	20004ed0 	.word	0x20004ed0
 800d9ac:	20004ed8 	.word	0x20004ed8
 800d9b0:	08011669 	.word	0x08011669
 800d9b4:	20004ed4 	.word	0x20004ed4
 800d9b8:	20000084 	.word	0x20000084
 800d9bc:	20004ec3 	.word	0x20004ec3
 800d9c0:	0801166d 	.word	0x0801166d
 800d9c4:	08011690 	.word	0x08011690
 800d9c8:	0801167c 	.word	0x0801167c
 800d9cc:	0801168f 	.word	0x0801168f
 800d9d0:	20004eb8 	.word	0x20004eb8

0800d9d4 <_write_r>:
 800d9d4:	b538      	push	{r3, r4, r5, lr}
 800d9d6:	4d07      	ldr	r5, [pc, #28]	; (800d9f4 <_write_r+0x20>)
 800d9d8:	4604      	mov	r4, r0
 800d9da:	4608      	mov	r0, r1
 800d9dc:	4611      	mov	r1, r2
 800d9de:	2200      	movs	r2, #0
 800d9e0:	602a      	str	r2, [r5, #0]
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	f7f4 f863 	bl	8001aae <_write>
 800d9e8:	1c43      	adds	r3, r0, #1
 800d9ea:	d102      	bne.n	800d9f2 <_write_r+0x1e>
 800d9ec:	682b      	ldr	r3, [r5, #0]
 800d9ee:	b103      	cbz	r3, 800d9f2 <_write_r+0x1e>
 800d9f0:	6023      	str	r3, [r4, #0]
 800d9f2:	bd38      	pop	{r3, r4, r5, pc}
 800d9f4:	200050b8 	.word	0x200050b8

0800d9f8 <__assert_func>:
 800d9f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9fa:	4614      	mov	r4, r2
 800d9fc:	461a      	mov	r2, r3
 800d9fe:	4b09      	ldr	r3, [pc, #36]	; (800da24 <__assert_func+0x2c>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	4605      	mov	r5, r0
 800da04:	68d8      	ldr	r0, [r3, #12]
 800da06:	b14c      	cbz	r4, 800da1c <__assert_func+0x24>
 800da08:	4b07      	ldr	r3, [pc, #28]	; (800da28 <__assert_func+0x30>)
 800da0a:	9100      	str	r1, [sp, #0]
 800da0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800da10:	4906      	ldr	r1, [pc, #24]	; (800da2c <__assert_func+0x34>)
 800da12:	462b      	mov	r3, r5
 800da14:	f000 ff6e 	bl	800e8f4 <fiprintf>
 800da18:	f7fe f93e 	bl	800bc98 <abort>
 800da1c:	4b04      	ldr	r3, [pc, #16]	; (800da30 <__assert_func+0x38>)
 800da1e:	461c      	mov	r4, r3
 800da20:	e7f3      	b.n	800da0a <__assert_func+0x12>
 800da22:	bf00      	nop
 800da24:	20000020 	.word	0x20000020
 800da28:	080116a2 	.word	0x080116a2
 800da2c:	080116af 	.word	0x080116af
 800da30:	080116dd 	.word	0x080116dd

0800da34 <_close_r>:
 800da34:	b538      	push	{r3, r4, r5, lr}
 800da36:	4d06      	ldr	r5, [pc, #24]	; (800da50 <_close_r+0x1c>)
 800da38:	2300      	movs	r3, #0
 800da3a:	4604      	mov	r4, r0
 800da3c:	4608      	mov	r0, r1
 800da3e:	602b      	str	r3, [r5, #0]
 800da40:	f7f4 f851 	bl	8001ae6 <_close>
 800da44:	1c43      	adds	r3, r0, #1
 800da46:	d102      	bne.n	800da4e <_close_r+0x1a>
 800da48:	682b      	ldr	r3, [r5, #0]
 800da4a:	b103      	cbz	r3, 800da4e <_close_r+0x1a>
 800da4c:	6023      	str	r3, [r4, #0]
 800da4e:	bd38      	pop	{r3, r4, r5, pc}
 800da50:	200050b8 	.word	0x200050b8

0800da54 <div>:
 800da54:	2900      	cmp	r1, #0
 800da56:	b510      	push	{r4, lr}
 800da58:	fb91 f4f2 	sdiv	r4, r1, r2
 800da5c:	fb02 1314 	mls	r3, r2, r4, r1
 800da60:	db06      	blt.n	800da70 <div+0x1c>
 800da62:	2b00      	cmp	r3, #0
 800da64:	da01      	bge.n	800da6a <div+0x16>
 800da66:	3401      	adds	r4, #1
 800da68:	1a9b      	subs	r3, r3, r2
 800da6a:	e9c0 4300 	strd	r4, r3, [r0]
 800da6e:	bd10      	pop	{r4, pc}
 800da70:	2b00      	cmp	r3, #0
 800da72:	bfc4      	itt	gt
 800da74:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800da78:	189b      	addgt	r3, r3, r2
 800da7a:	e7f6      	b.n	800da6a <div+0x16>

0800da7c <quorem>:
 800da7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da80:	6903      	ldr	r3, [r0, #16]
 800da82:	690c      	ldr	r4, [r1, #16]
 800da84:	42a3      	cmp	r3, r4
 800da86:	4607      	mov	r7, r0
 800da88:	f2c0 8081 	blt.w	800db8e <quorem+0x112>
 800da8c:	3c01      	subs	r4, #1
 800da8e:	f101 0814 	add.w	r8, r1, #20
 800da92:	f100 0514 	add.w	r5, r0, #20
 800da96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da9a:	9301      	str	r3, [sp, #4]
 800da9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800daa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800daa4:	3301      	adds	r3, #1
 800daa6:	429a      	cmp	r2, r3
 800daa8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800daac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dab0:	fbb2 f6f3 	udiv	r6, r2, r3
 800dab4:	d331      	bcc.n	800db1a <quorem+0x9e>
 800dab6:	f04f 0e00 	mov.w	lr, #0
 800daba:	4640      	mov	r0, r8
 800dabc:	46ac      	mov	ip, r5
 800dabe:	46f2      	mov	sl, lr
 800dac0:	f850 2b04 	ldr.w	r2, [r0], #4
 800dac4:	b293      	uxth	r3, r2
 800dac6:	fb06 e303 	mla	r3, r6, r3, lr
 800daca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dace:	b29b      	uxth	r3, r3
 800dad0:	ebaa 0303 	sub.w	r3, sl, r3
 800dad4:	0c12      	lsrs	r2, r2, #16
 800dad6:	f8dc a000 	ldr.w	sl, [ip]
 800dada:	fb06 e202 	mla	r2, r6, r2, lr
 800dade:	fa13 f38a 	uxtah	r3, r3, sl
 800dae2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dae6:	fa1f fa82 	uxth.w	sl, r2
 800daea:	f8dc 2000 	ldr.w	r2, [ip]
 800daee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800daf2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dafc:	4581      	cmp	r9, r0
 800dafe:	f84c 3b04 	str.w	r3, [ip], #4
 800db02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800db06:	d2db      	bcs.n	800dac0 <quorem+0x44>
 800db08:	f855 300b 	ldr.w	r3, [r5, fp]
 800db0c:	b92b      	cbnz	r3, 800db1a <quorem+0x9e>
 800db0e:	9b01      	ldr	r3, [sp, #4]
 800db10:	3b04      	subs	r3, #4
 800db12:	429d      	cmp	r5, r3
 800db14:	461a      	mov	r2, r3
 800db16:	d32e      	bcc.n	800db76 <quorem+0xfa>
 800db18:	613c      	str	r4, [r7, #16]
 800db1a:	4638      	mov	r0, r7
 800db1c:	f001 faa4 	bl	800f068 <__mcmp>
 800db20:	2800      	cmp	r0, #0
 800db22:	db24      	blt.n	800db6e <quorem+0xf2>
 800db24:	3601      	adds	r6, #1
 800db26:	4628      	mov	r0, r5
 800db28:	f04f 0c00 	mov.w	ip, #0
 800db2c:	f858 2b04 	ldr.w	r2, [r8], #4
 800db30:	f8d0 e000 	ldr.w	lr, [r0]
 800db34:	b293      	uxth	r3, r2
 800db36:	ebac 0303 	sub.w	r3, ip, r3
 800db3a:	0c12      	lsrs	r2, r2, #16
 800db3c:	fa13 f38e 	uxtah	r3, r3, lr
 800db40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800db44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800db48:	b29b      	uxth	r3, r3
 800db4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800db4e:	45c1      	cmp	r9, r8
 800db50:	f840 3b04 	str.w	r3, [r0], #4
 800db54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800db58:	d2e8      	bcs.n	800db2c <quorem+0xb0>
 800db5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db62:	b922      	cbnz	r2, 800db6e <quorem+0xf2>
 800db64:	3b04      	subs	r3, #4
 800db66:	429d      	cmp	r5, r3
 800db68:	461a      	mov	r2, r3
 800db6a:	d30a      	bcc.n	800db82 <quorem+0x106>
 800db6c:	613c      	str	r4, [r7, #16]
 800db6e:	4630      	mov	r0, r6
 800db70:	b003      	add	sp, #12
 800db72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db76:	6812      	ldr	r2, [r2, #0]
 800db78:	3b04      	subs	r3, #4
 800db7a:	2a00      	cmp	r2, #0
 800db7c:	d1cc      	bne.n	800db18 <quorem+0x9c>
 800db7e:	3c01      	subs	r4, #1
 800db80:	e7c7      	b.n	800db12 <quorem+0x96>
 800db82:	6812      	ldr	r2, [r2, #0]
 800db84:	3b04      	subs	r3, #4
 800db86:	2a00      	cmp	r2, #0
 800db88:	d1f0      	bne.n	800db6c <quorem+0xf0>
 800db8a:	3c01      	subs	r4, #1
 800db8c:	e7eb      	b.n	800db66 <quorem+0xea>
 800db8e:	2000      	movs	r0, #0
 800db90:	e7ee      	b.n	800db70 <quorem+0xf4>
 800db92:	0000      	movs	r0, r0
 800db94:	0000      	movs	r0, r0
	...

0800db98 <_dtoa_r>:
 800db98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db9c:	ed2d 8b02 	vpush	{d8}
 800dba0:	ec57 6b10 	vmov	r6, r7, d0
 800dba4:	b095      	sub	sp, #84	; 0x54
 800dba6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dba8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800dbac:	9105      	str	r1, [sp, #20]
 800dbae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800dbb2:	4604      	mov	r4, r0
 800dbb4:	9209      	str	r2, [sp, #36]	; 0x24
 800dbb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800dbb8:	b975      	cbnz	r5, 800dbd8 <_dtoa_r+0x40>
 800dbba:	2010      	movs	r0, #16
 800dbbc:	f7fe fab6 	bl	800c12c <malloc>
 800dbc0:	4602      	mov	r2, r0
 800dbc2:	6260      	str	r0, [r4, #36]	; 0x24
 800dbc4:	b920      	cbnz	r0, 800dbd0 <_dtoa_r+0x38>
 800dbc6:	4bb2      	ldr	r3, [pc, #712]	; (800de90 <_dtoa_r+0x2f8>)
 800dbc8:	21ea      	movs	r1, #234	; 0xea
 800dbca:	48b2      	ldr	r0, [pc, #712]	; (800de94 <_dtoa_r+0x2fc>)
 800dbcc:	f7ff ff14 	bl	800d9f8 <__assert_func>
 800dbd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dbd4:	6005      	str	r5, [r0, #0]
 800dbd6:	60c5      	str	r5, [r0, #12]
 800dbd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbda:	6819      	ldr	r1, [r3, #0]
 800dbdc:	b151      	cbz	r1, 800dbf4 <_dtoa_r+0x5c>
 800dbde:	685a      	ldr	r2, [r3, #4]
 800dbe0:	604a      	str	r2, [r1, #4]
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	4093      	lsls	r3, r2
 800dbe6:	608b      	str	r3, [r1, #8]
 800dbe8:	4620      	mov	r0, r4
 800dbea:	f000 ffff 	bl	800ebec <_Bfree>
 800dbee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	601a      	str	r2, [r3, #0]
 800dbf4:	1e3b      	subs	r3, r7, #0
 800dbf6:	bfb9      	ittee	lt
 800dbf8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dbfc:	9303      	strlt	r3, [sp, #12]
 800dbfe:	2300      	movge	r3, #0
 800dc00:	f8c8 3000 	strge.w	r3, [r8]
 800dc04:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800dc08:	4ba3      	ldr	r3, [pc, #652]	; (800de98 <_dtoa_r+0x300>)
 800dc0a:	bfbc      	itt	lt
 800dc0c:	2201      	movlt	r2, #1
 800dc0e:	f8c8 2000 	strlt.w	r2, [r8]
 800dc12:	ea33 0309 	bics.w	r3, r3, r9
 800dc16:	d11b      	bne.n	800dc50 <_dtoa_r+0xb8>
 800dc18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dc1a:	f242 730f 	movw	r3, #9999	; 0x270f
 800dc1e:	6013      	str	r3, [r2, #0]
 800dc20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dc24:	4333      	orrs	r3, r6
 800dc26:	f000 857a 	beq.w	800e71e <_dtoa_r+0xb86>
 800dc2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc2c:	b963      	cbnz	r3, 800dc48 <_dtoa_r+0xb0>
 800dc2e:	4b9b      	ldr	r3, [pc, #620]	; (800de9c <_dtoa_r+0x304>)
 800dc30:	e024      	b.n	800dc7c <_dtoa_r+0xe4>
 800dc32:	4b9b      	ldr	r3, [pc, #620]	; (800dea0 <_dtoa_r+0x308>)
 800dc34:	9300      	str	r3, [sp, #0]
 800dc36:	3308      	adds	r3, #8
 800dc38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dc3a:	6013      	str	r3, [r2, #0]
 800dc3c:	9800      	ldr	r0, [sp, #0]
 800dc3e:	b015      	add	sp, #84	; 0x54
 800dc40:	ecbd 8b02 	vpop	{d8}
 800dc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc48:	4b94      	ldr	r3, [pc, #592]	; (800de9c <_dtoa_r+0x304>)
 800dc4a:	9300      	str	r3, [sp, #0]
 800dc4c:	3303      	adds	r3, #3
 800dc4e:	e7f3      	b.n	800dc38 <_dtoa_r+0xa0>
 800dc50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc54:	2200      	movs	r2, #0
 800dc56:	ec51 0b17 	vmov	r0, r1, d7
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800dc60:	f7f2 ff62 	bl	8000b28 <__aeabi_dcmpeq>
 800dc64:	4680      	mov	r8, r0
 800dc66:	b158      	cbz	r0, 800dc80 <_dtoa_r+0xe8>
 800dc68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	6013      	str	r3, [r2, #0]
 800dc6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	f000 8551 	beq.w	800e718 <_dtoa_r+0xb80>
 800dc76:	488b      	ldr	r0, [pc, #556]	; (800dea4 <_dtoa_r+0x30c>)
 800dc78:	6018      	str	r0, [r3, #0]
 800dc7a:	1e43      	subs	r3, r0, #1
 800dc7c:	9300      	str	r3, [sp, #0]
 800dc7e:	e7dd      	b.n	800dc3c <_dtoa_r+0xa4>
 800dc80:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800dc84:	aa12      	add	r2, sp, #72	; 0x48
 800dc86:	a913      	add	r1, sp, #76	; 0x4c
 800dc88:	4620      	mov	r0, r4
 800dc8a:	f001 fa91 	bl	800f1b0 <__d2b>
 800dc8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dc92:	4683      	mov	fp, r0
 800dc94:	2d00      	cmp	r5, #0
 800dc96:	d07c      	beq.n	800dd92 <_dtoa_r+0x1fa>
 800dc98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc9a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800dc9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dca2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800dca6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dcaa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dcae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dcb2:	4b7d      	ldr	r3, [pc, #500]	; (800dea8 <_dtoa_r+0x310>)
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	4639      	mov	r1, r7
 800dcba:	f7f2 fb15 	bl	80002e8 <__aeabi_dsub>
 800dcbe:	a36e      	add	r3, pc, #440	; (adr r3, 800de78 <_dtoa_r+0x2e0>)
 800dcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc4:	f7f2 fcc8 	bl	8000658 <__aeabi_dmul>
 800dcc8:	a36d      	add	r3, pc, #436	; (adr r3, 800de80 <_dtoa_r+0x2e8>)
 800dcca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcce:	f7f2 fb0d 	bl	80002ec <__adddf3>
 800dcd2:	4606      	mov	r6, r0
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	460f      	mov	r7, r1
 800dcd8:	f7f2 fc54 	bl	8000584 <__aeabi_i2d>
 800dcdc:	a36a      	add	r3, pc, #424	; (adr r3, 800de88 <_dtoa_r+0x2f0>)
 800dcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce2:	f7f2 fcb9 	bl	8000658 <__aeabi_dmul>
 800dce6:	4602      	mov	r2, r0
 800dce8:	460b      	mov	r3, r1
 800dcea:	4630      	mov	r0, r6
 800dcec:	4639      	mov	r1, r7
 800dcee:	f7f2 fafd 	bl	80002ec <__adddf3>
 800dcf2:	4606      	mov	r6, r0
 800dcf4:	460f      	mov	r7, r1
 800dcf6:	f7f2 ff5f 	bl	8000bb8 <__aeabi_d2iz>
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	4682      	mov	sl, r0
 800dcfe:	2300      	movs	r3, #0
 800dd00:	4630      	mov	r0, r6
 800dd02:	4639      	mov	r1, r7
 800dd04:	f7f2 ff1a 	bl	8000b3c <__aeabi_dcmplt>
 800dd08:	b148      	cbz	r0, 800dd1e <_dtoa_r+0x186>
 800dd0a:	4650      	mov	r0, sl
 800dd0c:	f7f2 fc3a 	bl	8000584 <__aeabi_i2d>
 800dd10:	4632      	mov	r2, r6
 800dd12:	463b      	mov	r3, r7
 800dd14:	f7f2 ff08 	bl	8000b28 <__aeabi_dcmpeq>
 800dd18:	b908      	cbnz	r0, 800dd1e <_dtoa_r+0x186>
 800dd1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd1e:	f1ba 0f16 	cmp.w	sl, #22
 800dd22:	d854      	bhi.n	800ddce <_dtoa_r+0x236>
 800dd24:	4b61      	ldr	r3, [pc, #388]	; (800deac <_dtoa_r+0x314>)
 800dd26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dd32:	f7f2 ff03 	bl	8000b3c <__aeabi_dcmplt>
 800dd36:	2800      	cmp	r0, #0
 800dd38:	d04b      	beq.n	800ddd2 <_dtoa_r+0x23a>
 800dd3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd3e:	2300      	movs	r3, #0
 800dd40:	930e      	str	r3, [sp, #56]	; 0x38
 800dd42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dd44:	1b5d      	subs	r5, r3, r5
 800dd46:	1e6b      	subs	r3, r5, #1
 800dd48:	9304      	str	r3, [sp, #16]
 800dd4a:	bf43      	ittte	mi
 800dd4c:	2300      	movmi	r3, #0
 800dd4e:	f1c5 0801 	rsbmi	r8, r5, #1
 800dd52:	9304      	strmi	r3, [sp, #16]
 800dd54:	f04f 0800 	movpl.w	r8, #0
 800dd58:	f1ba 0f00 	cmp.w	sl, #0
 800dd5c:	db3b      	blt.n	800ddd6 <_dtoa_r+0x23e>
 800dd5e:	9b04      	ldr	r3, [sp, #16]
 800dd60:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800dd64:	4453      	add	r3, sl
 800dd66:	9304      	str	r3, [sp, #16]
 800dd68:	2300      	movs	r3, #0
 800dd6a:	9306      	str	r3, [sp, #24]
 800dd6c:	9b05      	ldr	r3, [sp, #20]
 800dd6e:	2b09      	cmp	r3, #9
 800dd70:	d869      	bhi.n	800de46 <_dtoa_r+0x2ae>
 800dd72:	2b05      	cmp	r3, #5
 800dd74:	bfc4      	itt	gt
 800dd76:	3b04      	subgt	r3, #4
 800dd78:	9305      	strgt	r3, [sp, #20]
 800dd7a:	9b05      	ldr	r3, [sp, #20]
 800dd7c:	f1a3 0302 	sub.w	r3, r3, #2
 800dd80:	bfcc      	ite	gt
 800dd82:	2500      	movgt	r5, #0
 800dd84:	2501      	movle	r5, #1
 800dd86:	2b03      	cmp	r3, #3
 800dd88:	d869      	bhi.n	800de5e <_dtoa_r+0x2c6>
 800dd8a:	e8df f003 	tbb	[pc, r3]
 800dd8e:	4e2c      	.short	0x4e2c
 800dd90:	5a4c      	.short	0x5a4c
 800dd92:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800dd96:	441d      	add	r5, r3
 800dd98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dd9c:	2b20      	cmp	r3, #32
 800dd9e:	bfc1      	itttt	gt
 800dda0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dda4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dda8:	fa09 f303 	lslgt.w	r3, r9, r3
 800ddac:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ddb0:	bfda      	itte	le
 800ddb2:	f1c3 0320 	rsble	r3, r3, #32
 800ddb6:	fa06 f003 	lslle.w	r0, r6, r3
 800ddba:	4318      	orrgt	r0, r3
 800ddbc:	f7f2 fbd2 	bl	8000564 <__aeabi_ui2d>
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	4606      	mov	r6, r0
 800ddc4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ddc8:	3d01      	subs	r5, #1
 800ddca:	9310      	str	r3, [sp, #64]	; 0x40
 800ddcc:	e771      	b.n	800dcb2 <_dtoa_r+0x11a>
 800ddce:	2301      	movs	r3, #1
 800ddd0:	e7b6      	b.n	800dd40 <_dtoa_r+0x1a8>
 800ddd2:	900e      	str	r0, [sp, #56]	; 0x38
 800ddd4:	e7b5      	b.n	800dd42 <_dtoa_r+0x1aa>
 800ddd6:	f1ca 0300 	rsb	r3, sl, #0
 800ddda:	9306      	str	r3, [sp, #24]
 800dddc:	2300      	movs	r3, #0
 800ddde:	eba8 080a 	sub.w	r8, r8, sl
 800dde2:	930d      	str	r3, [sp, #52]	; 0x34
 800dde4:	e7c2      	b.n	800dd6c <_dtoa_r+0x1d4>
 800dde6:	2300      	movs	r3, #0
 800dde8:	9308      	str	r3, [sp, #32]
 800ddea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	dc39      	bgt.n	800de64 <_dtoa_r+0x2cc>
 800ddf0:	f04f 0901 	mov.w	r9, #1
 800ddf4:	f8cd 9004 	str.w	r9, [sp, #4]
 800ddf8:	464b      	mov	r3, r9
 800ddfa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ddfe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800de00:	2200      	movs	r2, #0
 800de02:	6042      	str	r2, [r0, #4]
 800de04:	2204      	movs	r2, #4
 800de06:	f102 0614 	add.w	r6, r2, #20
 800de0a:	429e      	cmp	r6, r3
 800de0c:	6841      	ldr	r1, [r0, #4]
 800de0e:	d92f      	bls.n	800de70 <_dtoa_r+0x2d8>
 800de10:	4620      	mov	r0, r4
 800de12:	f000 feab 	bl	800eb6c <_Balloc>
 800de16:	9000      	str	r0, [sp, #0]
 800de18:	2800      	cmp	r0, #0
 800de1a:	d14b      	bne.n	800deb4 <_dtoa_r+0x31c>
 800de1c:	4b24      	ldr	r3, [pc, #144]	; (800deb0 <_dtoa_r+0x318>)
 800de1e:	4602      	mov	r2, r0
 800de20:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800de24:	e6d1      	b.n	800dbca <_dtoa_r+0x32>
 800de26:	2301      	movs	r3, #1
 800de28:	e7de      	b.n	800dde8 <_dtoa_r+0x250>
 800de2a:	2300      	movs	r3, #0
 800de2c:	9308      	str	r3, [sp, #32]
 800de2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de30:	eb0a 0903 	add.w	r9, sl, r3
 800de34:	f109 0301 	add.w	r3, r9, #1
 800de38:	2b01      	cmp	r3, #1
 800de3a:	9301      	str	r3, [sp, #4]
 800de3c:	bfb8      	it	lt
 800de3e:	2301      	movlt	r3, #1
 800de40:	e7dd      	b.n	800ddfe <_dtoa_r+0x266>
 800de42:	2301      	movs	r3, #1
 800de44:	e7f2      	b.n	800de2c <_dtoa_r+0x294>
 800de46:	2501      	movs	r5, #1
 800de48:	2300      	movs	r3, #0
 800de4a:	9305      	str	r3, [sp, #20]
 800de4c:	9508      	str	r5, [sp, #32]
 800de4e:	f04f 39ff 	mov.w	r9, #4294967295
 800de52:	2200      	movs	r2, #0
 800de54:	f8cd 9004 	str.w	r9, [sp, #4]
 800de58:	2312      	movs	r3, #18
 800de5a:	9209      	str	r2, [sp, #36]	; 0x24
 800de5c:	e7cf      	b.n	800ddfe <_dtoa_r+0x266>
 800de5e:	2301      	movs	r3, #1
 800de60:	9308      	str	r3, [sp, #32]
 800de62:	e7f4      	b.n	800de4e <_dtoa_r+0x2b6>
 800de64:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800de68:	f8cd 9004 	str.w	r9, [sp, #4]
 800de6c:	464b      	mov	r3, r9
 800de6e:	e7c6      	b.n	800ddfe <_dtoa_r+0x266>
 800de70:	3101      	adds	r1, #1
 800de72:	6041      	str	r1, [r0, #4]
 800de74:	0052      	lsls	r2, r2, #1
 800de76:	e7c6      	b.n	800de06 <_dtoa_r+0x26e>
 800de78:	636f4361 	.word	0x636f4361
 800de7c:	3fd287a7 	.word	0x3fd287a7
 800de80:	8b60c8b3 	.word	0x8b60c8b3
 800de84:	3fc68a28 	.word	0x3fc68a28
 800de88:	509f79fb 	.word	0x509f79fb
 800de8c:	3fd34413 	.word	0x3fd34413
 800de90:	080114fc 	.word	0x080114fc
 800de94:	080117ec 	.word	0x080117ec
 800de98:	7ff00000 	.word	0x7ff00000
 800de9c:	080117e8 	.word	0x080117e8
 800dea0:	080117df 	.word	0x080117df
 800dea4:	080119da 	.word	0x080119da
 800dea8:	3ff80000 	.word	0x3ff80000
 800deac:	080118f0 	.word	0x080118f0
 800deb0:	0801184b 	.word	0x0801184b
 800deb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800deb6:	9a00      	ldr	r2, [sp, #0]
 800deb8:	601a      	str	r2, [r3, #0]
 800deba:	9b01      	ldr	r3, [sp, #4]
 800debc:	2b0e      	cmp	r3, #14
 800debe:	f200 80ad 	bhi.w	800e01c <_dtoa_r+0x484>
 800dec2:	2d00      	cmp	r5, #0
 800dec4:	f000 80aa 	beq.w	800e01c <_dtoa_r+0x484>
 800dec8:	f1ba 0f00 	cmp.w	sl, #0
 800decc:	dd36      	ble.n	800df3c <_dtoa_r+0x3a4>
 800dece:	4ac3      	ldr	r2, [pc, #780]	; (800e1dc <_dtoa_r+0x644>)
 800ded0:	f00a 030f 	and.w	r3, sl, #15
 800ded4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ded8:	ed93 7b00 	vldr	d7, [r3]
 800dedc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800dee0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800dee4:	eeb0 8a47 	vmov.f32	s16, s14
 800dee8:	eef0 8a67 	vmov.f32	s17, s15
 800deec:	d016      	beq.n	800df1c <_dtoa_r+0x384>
 800deee:	4bbc      	ldr	r3, [pc, #752]	; (800e1e0 <_dtoa_r+0x648>)
 800def0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800def4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800def8:	f7f2 fcd8 	bl	80008ac <__aeabi_ddiv>
 800defc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df00:	f007 070f 	and.w	r7, r7, #15
 800df04:	2503      	movs	r5, #3
 800df06:	4eb6      	ldr	r6, [pc, #728]	; (800e1e0 <_dtoa_r+0x648>)
 800df08:	b957      	cbnz	r7, 800df20 <_dtoa_r+0x388>
 800df0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df0e:	ec53 2b18 	vmov	r2, r3, d8
 800df12:	f7f2 fccb 	bl	80008ac <__aeabi_ddiv>
 800df16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df1a:	e029      	b.n	800df70 <_dtoa_r+0x3d8>
 800df1c:	2502      	movs	r5, #2
 800df1e:	e7f2      	b.n	800df06 <_dtoa_r+0x36e>
 800df20:	07f9      	lsls	r1, r7, #31
 800df22:	d508      	bpl.n	800df36 <_dtoa_r+0x39e>
 800df24:	ec51 0b18 	vmov	r0, r1, d8
 800df28:	e9d6 2300 	ldrd	r2, r3, [r6]
 800df2c:	f7f2 fb94 	bl	8000658 <__aeabi_dmul>
 800df30:	ec41 0b18 	vmov	d8, r0, r1
 800df34:	3501      	adds	r5, #1
 800df36:	107f      	asrs	r7, r7, #1
 800df38:	3608      	adds	r6, #8
 800df3a:	e7e5      	b.n	800df08 <_dtoa_r+0x370>
 800df3c:	f000 80a6 	beq.w	800e08c <_dtoa_r+0x4f4>
 800df40:	f1ca 0600 	rsb	r6, sl, #0
 800df44:	4ba5      	ldr	r3, [pc, #660]	; (800e1dc <_dtoa_r+0x644>)
 800df46:	4fa6      	ldr	r7, [pc, #664]	; (800e1e0 <_dtoa_r+0x648>)
 800df48:	f006 020f 	and.w	r2, r6, #15
 800df4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800df58:	f7f2 fb7e 	bl	8000658 <__aeabi_dmul>
 800df5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df60:	1136      	asrs	r6, r6, #4
 800df62:	2300      	movs	r3, #0
 800df64:	2502      	movs	r5, #2
 800df66:	2e00      	cmp	r6, #0
 800df68:	f040 8085 	bne.w	800e076 <_dtoa_r+0x4de>
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d1d2      	bne.n	800df16 <_dtoa_r+0x37e>
 800df70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df72:	2b00      	cmp	r3, #0
 800df74:	f000 808c 	beq.w	800e090 <_dtoa_r+0x4f8>
 800df78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800df7c:	4b99      	ldr	r3, [pc, #612]	; (800e1e4 <_dtoa_r+0x64c>)
 800df7e:	2200      	movs	r2, #0
 800df80:	4630      	mov	r0, r6
 800df82:	4639      	mov	r1, r7
 800df84:	f7f2 fdda 	bl	8000b3c <__aeabi_dcmplt>
 800df88:	2800      	cmp	r0, #0
 800df8a:	f000 8081 	beq.w	800e090 <_dtoa_r+0x4f8>
 800df8e:	9b01      	ldr	r3, [sp, #4]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d07d      	beq.n	800e090 <_dtoa_r+0x4f8>
 800df94:	f1b9 0f00 	cmp.w	r9, #0
 800df98:	dd3c      	ble.n	800e014 <_dtoa_r+0x47c>
 800df9a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800df9e:	9307      	str	r3, [sp, #28]
 800dfa0:	2200      	movs	r2, #0
 800dfa2:	4b91      	ldr	r3, [pc, #580]	; (800e1e8 <_dtoa_r+0x650>)
 800dfa4:	4630      	mov	r0, r6
 800dfa6:	4639      	mov	r1, r7
 800dfa8:	f7f2 fb56 	bl	8000658 <__aeabi_dmul>
 800dfac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfb0:	3501      	adds	r5, #1
 800dfb2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800dfb6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dfba:	4628      	mov	r0, r5
 800dfbc:	f7f2 fae2 	bl	8000584 <__aeabi_i2d>
 800dfc0:	4632      	mov	r2, r6
 800dfc2:	463b      	mov	r3, r7
 800dfc4:	f7f2 fb48 	bl	8000658 <__aeabi_dmul>
 800dfc8:	4b88      	ldr	r3, [pc, #544]	; (800e1ec <_dtoa_r+0x654>)
 800dfca:	2200      	movs	r2, #0
 800dfcc:	f7f2 f98e 	bl	80002ec <__adddf3>
 800dfd0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dfd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfd8:	9303      	str	r3, [sp, #12]
 800dfda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d15c      	bne.n	800e09a <_dtoa_r+0x502>
 800dfe0:	4b83      	ldr	r3, [pc, #524]	; (800e1f0 <_dtoa_r+0x658>)
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	4630      	mov	r0, r6
 800dfe6:	4639      	mov	r1, r7
 800dfe8:	f7f2 f97e 	bl	80002e8 <__aeabi_dsub>
 800dfec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dff0:	4606      	mov	r6, r0
 800dff2:	460f      	mov	r7, r1
 800dff4:	f7f2 fdc0 	bl	8000b78 <__aeabi_dcmpgt>
 800dff8:	2800      	cmp	r0, #0
 800dffa:	f040 8296 	bne.w	800e52a <_dtoa_r+0x992>
 800dffe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e002:	4630      	mov	r0, r6
 800e004:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e008:	4639      	mov	r1, r7
 800e00a:	f7f2 fd97 	bl	8000b3c <__aeabi_dcmplt>
 800e00e:	2800      	cmp	r0, #0
 800e010:	f040 8288 	bne.w	800e524 <_dtoa_r+0x98c>
 800e014:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e018:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e01c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e01e:	2b00      	cmp	r3, #0
 800e020:	f2c0 8158 	blt.w	800e2d4 <_dtoa_r+0x73c>
 800e024:	f1ba 0f0e 	cmp.w	sl, #14
 800e028:	f300 8154 	bgt.w	800e2d4 <_dtoa_r+0x73c>
 800e02c:	4b6b      	ldr	r3, [pc, #428]	; (800e1dc <_dtoa_r+0x644>)
 800e02e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e032:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e038:	2b00      	cmp	r3, #0
 800e03a:	f280 80e3 	bge.w	800e204 <_dtoa_r+0x66c>
 800e03e:	9b01      	ldr	r3, [sp, #4]
 800e040:	2b00      	cmp	r3, #0
 800e042:	f300 80df 	bgt.w	800e204 <_dtoa_r+0x66c>
 800e046:	f040 826d 	bne.w	800e524 <_dtoa_r+0x98c>
 800e04a:	4b69      	ldr	r3, [pc, #420]	; (800e1f0 <_dtoa_r+0x658>)
 800e04c:	2200      	movs	r2, #0
 800e04e:	4640      	mov	r0, r8
 800e050:	4649      	mov	r1, r9
 800e052:	f7f2 fb01 	bl	8000658 <__aeabi_dmul>
 800e056:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e05a:	f7f2 fd83 	bl	8000b64 <__aeabi_dcmpge>
 800e05e:	9e01      	ldr	r6, [sp, #4]
 800e060:	4637      	mov	r7, r6
 800e062:	2800      	cmp	r0, #0
 800e064:	f040 8243 	bne.w	800e4ee <_dtoa_r+0x956>
 800e068:	9d00      	ldr	r5, [sp, #0]
 800e06a:	2331      	movs	r3, #49	; 0x31
 800e06c:	f805 3b01 	strb.w	r3, [r5], #1
 800e070:	f10a 0a01 	add.w	sl, sl, #1
 800e074:	e23f      	b.n	800e4f6 <_dtoa_r+0x95e>
 800e076:	07f2      	lsls	r2, r6, #31
 800e078:	d505      	bpl.n	800e086 <_dtoa_r+0x4ee>
 800e07a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e07e:	f7f2 faeb 	bl	8000658 <__aeabi_dmul>
 800e082:	3501      	adds	r5, #1
 800e084:	2301      	movs	r3, #1
 800e086:	1076      	asrs	r6, r6, #1
 800e088:	3708      	adds	r7, #8
 800e08a:	e76c      	b.n	800df66 <_dtoa_r+0x3ce>
 800e08c:	2502      	movs	r5, #2
 800e08e:	e76f      	b.n	800df70 <_dtoa_r+0x3d8>
 800e090:	9b01      	ldr	r3, [sp, #4]
 800e092:	f8cd a01c 	str.w	sl, [sp, #28]
 800e096:	930c      	str	r3, [sp, #48]	; 0x30
 800e098:	e78d      	b.n	800dfb6 <_dtoa_r+0x41e>
 800e09a:	9900      	ldr	r1, [sp, #0]
 800e09c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e09e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e0a0:	4b4e      	ldr	r3, [pc, #312]	; (800e1dc <_dtoa_r+0x644>)
 800e0a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e0a6:	4401      	add	r1, r0
 800e0a8:	9102      	str	r1, [sp, #8]
 800e0aa:	9908      	ldr	r1, [sp, #32]
 800e0ac:	eeb0 8a47 	vmov.f32	s16, s14
 800e0b0:	eef0 8a67 	vmov.f32	s17, s15
 800e0b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e0bc:	2900      	cmp	r1, #0
 800e0be:	d045      	beq.n	800e14c <_dtoa_r+0x5b4>
 800e0c0:	494c      	ldr	r1, [pc, #304]	; (800e1f4 <_dtoa_r+0x65c>)
 800e0c2:	2000      	movs	r0, #0
 800e0c4:	f7f2 fbf2 	bl	80008ac <__aeabi_ddiv>
 800e0c8:	ec53 2b18 	vmov	r2, r3, d8
 800e0cc:	f7f2 f90c 	bl	80002e8 <__aeabi_dsub>
 800e0d0:	9d00      	ldr	r5, [sp, #0]
 800e0d2:	ec41 0b18 	vmov	d8, r0, r1
 800e0d6:	4639      	mov	r1, r7
 800e0d8:	4630      	mov	r0, r6
 800e0da:	f7f2 fd6d 	bl	8000bb8 <__aeabi_d2iz>
 800e0de:	900c      	str	r0, [sp, #48]	; 0x30
 800e0e0:	f7f2 fa50 	bl	8000584 <__aeabi_i2d>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	460b      	mov	r3, r1
 800e0e8:	4630      	mov	r0, r6
 800e0ea:	4639      	mov	r1, r7
 800e0ec:	f7f2 f8fc 	bl	80002e8 <__aeabi_dsub>
 800e0f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e0f2:	3330      	adds	r3, #48	; 0x30
 800e0f4:	f805 3b01 	strb.w	r3, [r5], #1
 800e0f8:	ec53 2b18 	vmov	r2, r3, d8
 800e0fc:	4606      	mov	r6, r0
 800e0fe:	460f      	mov	r7, r1
 800e100:	f7f2 fd1c 	bl	8000b3c <__aeabi_dcmplt>
 800e104:	2800      	cmp	r0, #0
 800e106:	d165      	bne.n	800e1d4 <_dtoa_r+0x63c>
 800e108:	4632      	mov	r2, r6
 800e10a:	463b      	mov	r3, r7
 800e10c:	4935      	ldr	r1, [pc, #212]	; (800e1e4 <_dtoa_r+0x64c>)
 800e10e:	2000      	movs	r0, #0
 800e110:	f7f2 f8ea 	bl	80002e8 <__aeabi_dsub>
 800e114:	ec53 2b18 	vmov	r2, r3, d8
 800e118:	f7f2 fd10 	bl	8000b3c <__aeabi_dcmplt>
 800e11c:	2800      	cmp	r0, #0
 800e11e:	f040 80b9 	bne.w	800e294 <_dtoa_r+0x6fc>
 800e122:	9b02      	ldr	r3, [sp, #8]
 800e124:	429d      	cmp	r5, r3
 800e126:	f43f af75 	beq.w	800e014 <_dtoa_r+0x47c>
 800e12a:	4b2f      	ldr	r3, [pc, #188]	; (800e1e8 <_dtoa_r+0x650>)
 800e12c:	ec51 0b18 	vmov	r0, r1, d8
 800e130:	2200      	movs	r2, #0
 800e132:	f7f2 fa91 	bl	8000658 <__aeabi_dmul>
 800e136:	4b2c      	ldr	r3, [pc, #176]	; (800e1e8 <_dtoa_r+0x650>)
 800e138:	ec41 0b18 	vmov	d8, r0, r1
 800e13c:	2200      	movs	r2, #0
 800e13e:	4630      	mov	r0, r6
 800e140:	4639      	mov	r1, r7
 800e142:	f7f2 fa89 	bl	8000658 <__aeabi_dmul>
 800e146:	4606      	mov	r6, r0
 800e148:	460f      	mov	r7, r1
 800e14a:	e7c4      	b.n	800e0d6 <_dtoa_r+0x53e>
 800e14c:	ec51 0b17 	vmov	r0, r1, d7
 800e150:	f7f2 fa82 	bl	8000658 <__aeabi_dmul>
 800e154:	9b02      	ldr	r3, [sp, #8]
 800e156:	9d00      	ldr	r5, [sp, #0]
 800e158:	930c      	str	r3, [sp, #48]	; 0x30
 800e15a:	ec41 0b18 	vmov	d8, r0, r1
 800e15e:	4639      	mov	r1, r7
 800e160:	4630      	mov	r0, r6
 800e162:	f7f2 fd29 	bl	8000bb8 <__aeabi_d2iz>
 800e166:	9011      	str	r0, [sp, #68]	; 0x44
 800e168:	f7f2 fa0c 	bl	8000584 <__aeabi_i2d>
 800e16c:	4602      	mov	r2, r0
 800e16e:	460b      	mov	r3, r1
 800e170:	4630      	mov	r0, r6
 800e172:	4639      	mov	r1, r7
 800e174:	f7f2 f8b8 	bl	80002e8 <__aeabi_dsub>
 800e178:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e17a:	3330      	adds	r3, #48	; 0x30
 800e17c:	f805 3b01 	strb.w	r3, [r5], #1
 800e180:	9b02      	ldr	r3, [sp, #8]
 800e182:	429d      	cmp	r5, r3
 800e184:	4606      	mov	r6, r0
 800e186:	460f      	mov	r7, r1
 800e188:	f04f 0200 	mov.w	r2, #0
 800e18c:	d134      	bne.n	800e1f8 <_dtoa_r+0x660>
 800e18e:	4b19      	ldr	r3, [pc, #100]	; (800e1f4 <_dtoa_r+0x65c>)
 800e190:	ec51 0b18 	vmov	r0, r1, d8
 800e194:	f7f2 f8aa 	bl	80002ec <__adddf3>
 800e198:	4602      	mov	r2, r0
 800e19a:	460b      	mov	r3, r1
 800e19c:	4630      	mov	r0, r6
 800e19e:	4639      	mov	r1, r7
 800e1a0:	f7f2 fcea 	bl	8000b78 <__aeabi_dcmpgt>
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	d175      	bne.n	800e294 <_dtoa_r+0x6fc>
 800e1a8:	ec53 2b18 	vmov	r2, r3, d8
 800e1ac:	4911      	ldr	r1, [pc, #68]	; (800e1f4 <_dtoa_r+0x65c>)
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	f7f2 f89a 	bl	80002e8 <__aeabi_dsub>
 800e1b4:	4602      	mov	r2, r0
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	4630      	mov	r0, r6
 800e1ba:	4639      	mov	r1, r7
 800e1bc:	f7f2 fcbe 	bl	8000b3c <__aeabi_dcmplt>
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	f43f af27 	beq.w	800e014 <_dtoa_r+0x47c>
 800e1c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e1c8:	1e6b      	subs	r3, r5, #1
 800e1ca:	930c      	str	r3, [sp, #48]	; 0x30
 800e1cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e1d0:	2b30      	cmp	r3, #48	; 0x30
 800e1d2:	d0f8      	beq.n	800e1c6 <_dtoa_r+0x62e>
 800e1d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e1d8:	e04a      	b.n	800e270 <_dtoa_r+0x6d8>
 800e1da:	bf00      	nop
 800e1dc:	080118f0 	.word	0x080118f0
 800e1e0:	080118c8 	.word	0x080118c8
 800e1e4:	3ff00000 	.word	0x3ff00000
 800e1e8:	40240000 	.word	0x40240000
 800e1ec:	401c0000 	.word	0x401c0000
 800e1f0:	40140000 	.word	0x40140000
 800e1f4:	3fe00000 	.word	0x3fe00000
 800e1f8:	4baf      	ldr	r3, [pc, #700]	; (800e4b8 <_dtoa_r+0x920>)
 800e1fa:	f7f2 fa2d 	bl	8000658 <__aeabi_dmul>
 800e1fe:	4606      	mov	r6, r0
 800e200:	460f      	mov	r7, r1
 800e202:	e7ac      	b.n	800e15e <_dtoa_r+0x5c6>
 800e204:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e208:	9d00      	ldr	r5, [sp, #0]
 800e20a:	4642      	mov	r2, r8
 800e20c:	464b      	mov	r3, r9
 800e20e:	4630      	mov	r0, r6
 800e210:	4639      	mov	r1, r7
 800e212:	f7f2 fb4b 	bl	80008ac <__aeabi_ddiv>
 800e216:	f7f2 fccf 	bl	8000bb8 <__aeabi_d2iz>
 800e21a:	9002      	str	r0, [sp, #8]
 800e21c:	f7f2 f9b2 	bl	8000584 <__aeabi_i2d>
 800e220:	4642      	mov	r2, r8
 800e222:	464b      	mov	r3, r9
 800e224:	f7f2 fa18 	bl	8000658 <__aeabi_dmul>
 800e228:	4602      	mov	r2, r0
 800e22a:	460b      	mov	r3, r1
 800e22c:	4630      	mov	r0, r6
 800e22e:	4639      	mov	r1, r7
 800e230:	f7f2 f85a 	bl	80002e8 <__aeabi_dsub>
 800e234:	9e02      	ldr	r6, [sp, #8]
 800e236:	9f01      	ldr	r7, [sp, #4]
 800e238:	3630      	adds	r6, #48	; 0x30
 800e23a:	f805 6b01 	strb.w	r6, [r5], #1
 800e23e:	9e00      	ldr	r6, [sp, #0]
 800e240:	1bae      	subs	r6, r5, r6
 800e242:	42b7      	cmp	r7, r6
 800e244:	4602      	mov	r2, r0
 800e246:	460b      	mov	r3, r1
 800e248:	d137      	bne.n	800e2ba <_dtoa_r+0x722>
 800e24a:	f7f2 f84f 	bl	80002ec <__adddf3>
 800e24e:	4642      	mov	r2, r8
 800e250:	464b      	mov	r3, r9
 800e252:	4606      	mov	r6, r0
 800e254:	460f      	mov	r7, r1
 800e256:	f7f2 fc8f 	bl	8000b78 <__aeabi_dcmpgt>
 800e25a:	b9c8      	cbnz	r0, 800e290 <_dtoa_r+0x6f8>
 800e25c:	4642      	mov	r2, r8
 800e25e:	464b      	mov	r3, r9
 800e260:	4630      	mov	r0, r6
 800e262:	4639      	mov	r1, r7
 800e264:	f7f2 fc60 	bl	8000b28 <__aeabi_dcmpeq>
 800e268:	b110      	cbz	r0, 800e270 <_dtoa_r+0x6d8>
 800e26a:	9b02      	ldr	r3, [sp, #8]
 800e26c:	07d9      	lsls	r1, r3, #31
 800e26e:	d40f      	bmi.n	800e290 <_dtoa_r+0x6f8>
 800e270:	4620      	mov	r0, r4
 800e272:	4659      	mov	r1, fp
 800e274:	f000 fcba 	bl	800ebec <_Bfree>
 800e278:	2300      	movs	r3, #0
 800e27a:	702b      	strb	r3, [r5, #0]
 800e27c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e27e:	f10a 0001 	add.w	r0, sl, #1
 800e282:	6018      	str	r0, [r3, #0]
 800e284:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e286:	2b00      	cmp	r3, #0
 800e288:	f43f acd8 	beq.w	800dc3c <_dtoa_r+0xa4>
 800e28c:	601d      	str	r5, [r3, #0]
 800e28e:	e4d5      	b.n	800dc3c <_dtoa_r+0xa4>
 800e290:	f8cd a01c 	str.w	sl, [sp, #28]
 800e294:	462b      	mov	r3, r5
 800e296:	461d      	mov	r5, r3
 800e298:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e29c:	2a39      	cmp	r2, #57	; 0x39
 800e29e:	d108      	bne.n	800e2b2 <_dtoa_r+0x71a>
 800e2a0:	9a00      	ldr	r2, [sp, #0]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d1f7      	bne.n	800e296 <_dtoa_r+0x6fe>
 800e2a6:	9a07      	ldr	r2, [sp, #28]
 800e2a8:	9900      	ldr	r1, [sp, #0]
 800e2aa:	3201      	adds	r2, #1
 800e2ac:	9207      	str	r2, [sp, #28]
 800e2ae:	2230      	movs	r2, #48	; 0x30
 800e2b0:	700a      	strb	r2, [r1, #0]
 800e2b2:	781a      	ldrb	r2, [r3, #0]
 800e2b4:	3201      	adds	r2, #1
 800e2b6:	701a      	strb	r2, [r3, #0]
 800e2b8:	e78c      	b.n	800e1d4 <_dtoa_r+0x63c>
 800e2ba:	4b7f      	ldr	r3, [pc, #508]	; (800e4b8 <_dtoa_r+0x920>)
 800e2bc:	2200      	movs	r2, #0
 800e2be:	f7f2 f9cb 	bl	8000658 <__aeabi_dmul>
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	4606      	mov	r6, r0
 800e2c8:	460f      	mov	r7, r1
 800e2ca:	f7f2 fc2d 	bl	8000b28 <__aeabi_dcmpeq>
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	d09b      	beq.n	800e20a <_dtoa_r+0x672>
 800e2d2:	e7cd      	b.n	800e270 <_dtoa_r+0x6d8>
 800e2d4:	9a08      	ldr	r2, [sp, #32]
 800e2d6:	2a00      	cmp	r2, #0
 800e2d8:	f000 80c4 	beq.w	800e464 <_dtoa_r+0x8cc>
 800e2dc:	9a05      	ldr	r2, [sp, #20]
 800e2de:	2a01      	cmp	r2, #1
 800e2e0:	f300 80a8 	bgt.w	800e434 <_dtoa_r+0x89c>
 800e2e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e2e6:	2a00      	cmp	r2, #0
 800e2e8:	f000 80a0 	beq.w	800e42c <_dtoa_r+0x894>
 800e2ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e2f0:	9e06      	ldr	r6, [sp, #24]
 800e2f2:	4645      	mov	r5, r8
 800e2f4:	9a04      	ldr	r2, [sp, #16]
 800e2f6:	2101      	movs	r1, #1
 800e2f8:	441a      	add	r2, r3
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	4498      	add	r8, r3
 800e2fe:	9204      	str	r2, [sp, #16]
 800e300:	f000 fd30 	bl	800ed64 <__i2b>
 800e304:	4607      	mov	r7, r0
 800e306:	2d00      	cmp	r5, #0
 800e308:	dd0b      	ble.n	800e322 <_dtoa_r+0x78a>
 800e30a:	9b04      	ldr	r3, [sp, #16]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	dd08      	ble.n	800e322 <_dtoa_r+0x78a>
 800e310:	42ab      	cmp	r3, r5
 800e312:	9a04      	ldr	r2, [sp, #16]
 800e314:	bfa8      	it	ge
 800e316:	462b      	movge	r3, r5
 800e318:	eba8 0803 	sub.w	r8, r8, r3
 800e31c:	1aed      	subs	r5, r5, r3
 800e31e:	1ad3      	subs	r3, r2, r3
 800e320:	9304      	str	r3, [sp, #16]
 800e322:	9b06      	ldr	r3, [sp, #24]
 800e324:	b1fb      	cbz	r3, 800e366 <_dtoa_r+0x7ce>
 800e326:	9b08      	ldr	r3, [sp, #32]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	f000 809f 	beq.w	800e46c <_dtoa_r+0x8d4>
 800e32e:	2e00      	cmp	r6, #0
 800e330:	dd11      	ble.n	800e356 <_dtoa_r+0x7be>
 800e332:	4639      	mov	r1, r7
 800e334:	4632      	mov	r2, r6
 800e336:	4620      	mov	r0, r4
 800e338:	f000 fdd0 	bl	800eedc <__pow5mult>
 800e33c:	465a      	mov	r2, fp
 800e33e:	4601      	mov	r1, r0
 800e340:	4607      	mov	r7, r0
 800e342:	4620      	mov	r0, r4
 800e344:	f000 fd24 	bl	800ed90 <__multiply>
 800e348:	4659      	mov	r1, fp
 800e34a:	9007      	str	r0, [sp, #28]
 800e34c:	4620      	mov	r0, r4
 800e34e:	f000 fc4d 	bl	800ebec <_Bfree>
 800e352:	9b07      	ldr	r3, [sp, #28]
 800e354:	469b      	mov	fp, r3
 800e356:	9b06      	ldr	r3, [sp, #24]
 800e358:	1b9a      	subs	r2, r3, r6
 800e35a:	d004      	beq.n	800e366 <_dtoa_r+0x7ce>
 800e35c:	4659      	mov	r1, fp
 800e35e:	4620      	mov	r0, r4
 800e360:	f000 fdbc 	bl	800eedc <__pow5mult>
 800e364:	4683      	mov	fp, r0
 800e366:	2101      	movs	r1, #1
 800e368:	4620      	mov	r0, r4
 800e36a:	f000 fcfb 	bl	800ed64 <__i2b>
 800e36e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e370:	2b00      	cmp	r3, #0
 800e372:	4606      	mov	r6, r0
 800e374:	dd7c      	ble.n	800e470 <_dtoa_r+0x8d8>
 800e376:	461a      	mov	r2, r3
 800e378:	4601      	mov	r1, r0
 800e37a:	4620      	mov	r0, r4
 800e37c:	f000 fdae 	bl	800eedc <__pow5mult>
 800e380:	9b05      	ldr	r3, [sp, #20]
 800e382:	2b01      	cmp	r3, #1
 800e384:	4606      	mov	r6, r0
 800e386:	dd76      	ble.n	800e476 <_dtoa_r+0x8de>
 800e388:	2300      	movs	r3, #0
 800e38a:	9306      	str	r3, [sp, #24]
 800e38c:	6933      	ldr	r3, [r6, #16]
 800e38e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e392:	6918      	ldr	r0, [r3, #16]
 800e394:	f000 fc96 	bl	800ecc4 <__hi0bits>
 800e398:	f1c0 0020 	rsb	r0, r0, #32
 800e39c:	9b04      	ldr	r3, [sp, #16]
 800e39e:	4418      	add	r0, r3
 800e3a0:	f010 001f 	ands.w	r0, r0, #31
 800e3a4:	f000 8086 	beq.w	800e4b4 <_dtoa_r+0x91c>
 800e3a8:	f1c0 0320 	rsb	r3, r0, #32
 800e3ac:	2b04      	cmp	r3, #4
 800e3ae:	dd7f      	ble.n	800e4b0 <_dtoa_r+0x918>
 800e3b0:	f1c0 001c 	rsb	r0, r0, #28
 800e3b4:	9b04      	ldr	r3, [sp, #16]
 800e3b6:	4403      	add	r3, r0
 800e3b8:	4480      	add	r8, r0
 800e3ba:	4405      	add	r5, r0
 800e3bc:	9304      	str	r3, [sp, #16]
 800e3be:	f1b8 0f00 	cmp.w	r8, #0
 800e3c2:	dd05      	ble.n	800e3d0 <_dtoa_r+0x838>
 800e3c4:	4659      	mov	r1, fp
 800e3c6:	4642      	mov	r2, r8
 800e3c8:	4620      	mov	r0, r4
 800e3ca:	f000 fde1 	bl	800ef90 <__lshift>
 800e3ce:	4683      	mov	fp, r0
 800e3d0:	9b04      	ldr	r3, [sp, #16]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	dd05      	ble.n	800e3e2 <_dtoa_r+0x84a>
 800e3d6:	4631      	mov	r1, r6
 800e3d8:	461a      	mov	r2, r3
 800e3da:	4620      	mov	r0, r4
 800e3dc:	f000 fdd8 	bl	800ef90 <__lshift>
 800e3e0:	4606      	mov	r6, r0
 800e3e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d069      	beq.n	800e4bc <_dtoa_r+0x924>
 800e3e8:	4631      	mov	r1, r6
 800e3ea:	4658      	mov	r0, fp
 800e3ec:	f000 fe3c 	bl	800f068 <__mcmp>
 800e3f0:	2800      	cmp	r0, #0
 800e3f2:	da63      	bge.n	800e4bc <_dtoa_r+0x924>
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	4659      	mov	r1, fp
 800e3f8:	220a      	movs	r2, #10
 800e3fa:	4620      	mov	r0, r4
 800e3fc:	f000 fc18 	bl	800ec30 <__multadd>
 800e400:	9b08      	ldr	r3, [sp, #32]
 800e402:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e406:	4683      	mov	fp, r0
 800e408:	2b00      	cmp	r3, #0
 800e40a:	f000 818f 	beq.w	800e72c <_dtoa_r+0xb94>
 800e40e:	4639      	mov	r1, r7
 800e410:	2300      	movs	r3, #0
 800e412:	220a      	movs	r2, #10
 800e414:	4620      	mov	r0, r4
 800e416:	f000 fc0b 	bl	800ec30 <__multadd>
 800e41a:	f1b9 0f00 	cmp.w	r9, #0
 800e41e:	4607      	mov	r7, r0
 800e420:	f300 808e 	bgt.w	800e540 <_dtoa_r+0x9a8>
 800e424:	9b05      	ldr	r3, [sp, #20]
 800e426:	2b02      	cmp	r3, #2
 800e428:	dc50      	bgt.n	800e4cc <_dtoa_r+0x934>
 800e42a:	e089      	b.n	800e540 <_dtoa_r+0x9a8>
 800e42c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e42e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e432:	e75d      	b.n	800e2f0 <_dtoa_r+0x758>
 800e434:	9b01      	ldr	r3, [sp, #4]
 800e436:	1e5e      	subs	r6, r3, #1
 800e438:	9b06      	ldr	r3, [sp, #24]
 800e43a:	42b3      	cmp	r3, r6
 800e43c:	bfbf      	itttt	lt
 800e43e:	9b06      	ldrlt	r3, [sp, #24]
 800e440:	9606      	strlt	r6, [sp, #24]
 800e442:	1af2      	sublt	r2, r6, r3
 800e444:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e446:	bfb6      	itet	lt
 800e448:	189b      	addlt	r3, r3, r2
 800e44a:	1b9e      	subge	r6, r3, r6
 800e44c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e44e:	9b01      	ldr	r3, [sp, #4]
 800e450:	bfb8      	it	lt
 800e452:	2600      	movlt	r6, #0
 800e454:	2b00      	cmp	r3, #0
 800e456:	bfb5      	itete	lt
 800e458:	eba8 0503 	sublt.w	r5, r8, r3
 800e45c:	9b01      	ldrge	r3, [sp, #4]
 800e45e:	2300      	movlt	r3, #0
 800e460:	4645      	movge	r5, r8
 800e462:	e747      	b.n	800e2f4 <_dtoa_r+0x75c>
 800e464:	9e06      	ldr	r6, [sp, #24]
 800e466:	9f08      	ldr	r7, [sp, #32]
 800e468:	4645      	mov	r5, r8
 800e46a:	e74c      	b.n	800e306 <_dtoa_r+0x76e>
 800e46c:	9a06      	ldr	r2, [sp, #24]
 800e46e:	e775      	b.n	800e35c <_dtoa_r+0x7c4>
 800e470:	9b05      	ldr	r3, [sp, #20]
 800e472:	2b01      	cmp	r3, #1
 800e474:	dc18      	bgt.n	800e4a8 <_dtoa_r+0x910>
 800e476:	9b02      	ldr	r3, [sp, #8]
 800e478:	b9b3      	cbnz	r3, 800e4a8 <_dtoa_r+0x910>
 800e47a:	9b03      	ldr	r3, [sp, #12]
 800e47c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e480:	b9a3      	cbnz	r3, 800e4ac <_dtoa_r+0x914>
 800e482:	9b03      	ldr	r3, [sp, #12]
 800e484:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e488:	0d1b      	lsrs	r3, r3, #20
 800e48a:	051b      	lsls	r3, r3, #20
 800e48c:	b12b      	cbz	r3, 800e49a <_dtoa_r+0x902>
 800e48e:	9b04      	ldr	r3, [sp, #16]
 800e490:	3301      	adds	r3, #1
 800e492:	9304      	str	r3, [sp, #16]
 800e494:	f108 0801 	add.w	r8, r8, #1
 800e498:	2301      	movs	r3, #1
 800e49a:	9306      	str	r3, [sp, #24]
 800e49c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	f47f af74 	bne.w	800e38c <_dtoa_r+0x7f4>
 800e4a4:	2001      	movs	r0, #1
 800e4a6:	e779      	b.n	800e39c <_dtoa_r+0x804>
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	e7f6      	b.n	800e49a <_dtoa_r+0x902>
 800e4ac:	9b02      	ldr	r3, [sp, #8]
 800e4ae:	e7f4      	b.n	800e49a <_dtoa_r+0x902>
 800e4b0:	d085      	beq.n	800e3be <_dtoa_r+0x826>
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	301c      	adds	r0, #28
 800e4b6:	e77d      	b.n	800e3b4 <_dtoa_r+0x81c>
 800e4b8:	40240000 	.word	0x40240000
 800e4bc:	9b01      	ldr	r3, [sp, #4]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	dc38      	bgt.n	800e534 <_dtoa_r+0x99c>
 800e4c2:	9b05      	ldr	r3, [sp, #20]
 800e4c4:	2b02      	cmp	r3, #2
 800e4c6:	dd35      	ble.n	800e534 <_dtoa_r+0x99c>
 800e4c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e4cc:	f1b9 0f00 	cmp.w	r9, #0
 800e4d0:	d10d      	bne.n	800e4ee <_dtoa_r+0x956>
 800e4d2:	4631      	mov	r1, r6
 800e4d4:	464b      	mov	r3, r9
 800e4d6:	2205      	movs	r2, #5
 800e4d8:	4620      	mov	r0, r4
 800e4da:	f000 fba9 	bl	800ec30 <__multadd>
 800e4de:	4601      	mov	r1, r0
 800e4e0:	4606      	mov	r6, r0
 800e4e2:	4658      	mov	r0, fp
 800e4e4:	f000 fdc0 	bl	800f068 <__mcmp>
 800e4e8:	2800      	cmp	r0, #0
 800e4ea:	f73f adbd 	bgt.w	800e068 <_dtoa_r+0x4d0>
 800e4ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4f0:	9d00      	ldr	r5, [sp, #0]
 800e4f2:	ea6f 0a03 	mvn.w	sl, r3
 800e4f6:	f04f 0800 	mov.w	r8, #0
 800e4fa:	4631      	mov	r1, r6
 800e4fc:	4620      	mov	r0, r4
 800e4fe:	f000 fb75 	bl	800ebec <_Bfree>
 800e502:	2f00      	cmp	r7, #0
 800e504:	f43f aeb4 	beq.w	800e270 <_dtoa_r+0x6d8>
 800e508:	f1b8 0f00 	cmp.w	r8, #0
 800e50c:	d005      	beq.n	800e51a <_dtoa_r+0x982>
 800e50e:	45b8      	cmp	r8, r7
 800e510:	d003      	beq.n	800e51a <_dtoa_r+0x982>
 800e512:	4641      	mov	r1, r8
 800e514:	4620      	mov	r0, r4
 800e516:	f000 fb69 	bl	800ebec <_Bfree>
 800e51a:	4639      	mov	r1, r7
 800e51c:	4620      	mov	r0, r4
 800e51e:	f000 fb65 	bl	800ebec <_Bfree>
 800e522:	e6a5      	b.n	800e270 <_dtoa_r+0x6d8>
 800e524:	2600      	movs	r6, #0
 800e526:	4637      	mov	r7, r6
 800e528:	e7e1      	b.n	800e4ee <_dtoa_r+0x956>
 800e52a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e52c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e530:	4637      	mov	r7, r6
 800e532:	e599      	b.n	800e068 <_dtoa_r+0x4d0>
 800e534:	9b08      	ldr	r3, [sp, #32]
 800e536:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f000 80fd 	beq.w	800e73a <_dtoa_r+0xba2>
 800e540:	2d00      	cmp	r5, #0
 800e542:	dd05      	ble.n	800e550 <_dtoa_r+0x9b8>
 800e544:	4639      	mov	r1, r7
 800e546:	462a      	mov	r2, r5
 800e548:	4620      	mov	r0, r4
 800e54a:	f000 fd21 	bl	800ef90 <__lshift>
 800e54e:	4607      	mov	r7, r0
 800e550:	9b06      	ldr	r3, [sp, #24]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d05c      	beq.n	800e610 <_dtoa_r+0xa78>
 800e556:	6879      	ldr	r1, [r7, #4]
 800e558:	4620      	mov	r0, r4
 800e55a:	f000 fb07 	bl	800eb6c <_Balloc>
 800e55e:	4605      	mov	r5, r0
 800e560:	b928      	cbnz	r0, 800e56e <_dtoa_r+0x9d6>
 800e562:	4b80      	ldr	r3, [pc, #512]	; (800e764 <_dtoa_r+0xbcc>)
 800e564:	4602      	mov	r2, r0
 800e566:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e56a:	f7ff bb2e 	b.w	800dbca <_dtoa_r+0x32>
 800e56e:	693a      	ldr	r2, [r7, #16]
 800e570:	3202      	adds	r2, #2
 800e572:	0092      	lsls	r2, r2, #2
 800e574:	f107 010c 	add.w	r1, r7, #12
 800e578:	300c      	adds	r0, #12
 800e57a:	f7fd fde7 	bl	800c14c <memcpy>
 800e57e:	2201      	movs	r2, #1
 800e580:	4629      	mov	r1, r5
 800e582:	4620      	mov	r0, r4
 800e584:	f000 fd04 	bl	800ef90 <__lshift>
 800e588:	9b00      	ldr	r3, [sp, #0]
 800e58a:	3301      	adds	r3, #1
 800e58c:	9301      	str	r3, [sp, #4]
 800e58e:	9b00      	ldr	r3, [sp, #0]
 800e590:	444b      	add	r3, r9
 800e592:	9307      	str	r3, [sp, #28]
 800e594:	9b02      	ldr	r3, [sp, #8]
 800e596:	f003 0301 	and.w	r3, r3, #1
 800e59a:	46b8      	mov	r8, r7
 800e59c:	9306      	str	r3, [sp, #24]
 800e59e:	4607      	mov	r7, r0
 800e5a0:	9b01      	ldr	r3, [sp, #4]
 800e5a2:	4631      	mov	r1, r6
 800e5a4:	3b01      	subs	r3, #1
 800e5a6:	4658      	mov	r0, fp
 800e5a8:	9302      	str	r3, [sp, #8]
 800e5aa:	f7ff fa67 	bl	800da7c <quorem>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	3330      	adds	r3, #48	; 0x30
 800e5b2:	9004      	str	r0, [sp, #16]
 800e5b4:	4641      	mov	r1, r8
 800e5b6:	4658      	mov	r0, fp
 800e5b8:	9308      	str	r3, [sp, #32]
 800e5ba:	f000 fd55 	bl	800f068 <__mcmp>
 800e5be:	463a      	mov	r2, r7
 800e5c0:	4681      	mov	r9, r0
 800e5c2:	4631      	mov	r1, r6
 800e5c4:	4620      	mov	r0, r4
 800e5c6:	f000 fd6b 	bl	800f0a0 <__mdiff>
 800e5ca:	68c2      	ldr	r2, [r0, #12]
 800e5cc:	9b08      	ldr	r3, [sp, #32]
 800e5ce:	4605      	mov	r5, r0
 800e5d0:	bb02      	cbnz	r2, 800e614 <_dtoa_r+0xa7c>
 800e5d2:	4601      	mov	r1, r0
 800e5d4:	4658      	mov	r0, fp
 800e5d6:	f000 fd47 	bl	800f068 <__mcmp>
 800e5da:	9b08      	ldr	r3, [sp, #32]
 800e5dc:	4602      	mov	r2, r0
 800e5de:	4629      	mov	r1, r5
 800e5e0:	4620      	mov	r0, r4
 800e5e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e5e6:	f000 fb01 	bl	800ebec <_Bfree>
 800e5ea:	9b05      	ldr	r3, [sp, #20]
 800e5ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5ee:	9d01      	ldr	r5, [sp, #4]
 800e5f0:	ea43 0102 	orr.w	r1, r3, r2
 800e5f4:	9b06      	ldr	r3, [sp, #24]
 800e5f6:	430b      	orrs	r3, r1
 800e5f8:	9b08      	ldr	r3, [sp, #32]
 800e5fa:	d10d      	bne.n	800e618 <_dtoa_r+0xa80>
 800e5fc:	2b39      	cmp	r3, #57	; 0x39
 800e5fe:	d029      	beq.n	800e654 <_dtoa_r+0xabc>
 800e600:	f1b9 0f00 	cmp.w	r9, #0
 800e604:	dd01      	ble.n	800e60a <_dtoa_r+0xa72>
 800e606:	9b04      	ldr	r3, [sp, #16]
 800e608:	3331      	adds	r3, #49	; 0x31
 800e60a:	9a02      	ldr	r2, [sp, #8]
 800e60c:	7013      	strb	r3, [r2, #0]
 800e60e:	e774      	b.n	800e4fa <_dtoa_r+0x962>
 800e610:	4638      	mov	r0, r7
 800e612:	e7b9      	b.n	800e588 <_dtoa_r+0x9f0>
 800e614:	2201      	movs	r2, #1
 800e616:	e7e2      	b.n	800e5de <_dtoa_r+0xa46>
 800e618:	f1b9 0f00 	cmp.w	r9, #0
 800e61c:	db06      	blt.n	800e62c <_dtoa_r+0xa94>
 800e61e:	9905      	ldr	r1, [sp, #20]
 800e620:	ea41 0909 	orr.w	r9, r1, r9
 800e624:	9906      	ldr	r1, [sp, #24]
 800e626:	ea59 0101 	orrs.w	r1, r9, r1
 800e62a:	d120      	bne.n	800e66e <_dtoa_r+0xad6>
 800e62c:	2a00      	cmp	r2, #0
 800e62e:	ddec      	ble.n	800e60a <_dtoa_r+0xa72>
 800e630:	4659      	mov	r1, fp
 800e632:	2201      	movs	r2, #1
 800e634:	4620      	mov	r0, r4
 800e636:	9301      	str	r3, [sp, #4]
 800e638:	f000 fcaa 	bl	800ef90 <__lshift>
 800e63c:	4631      	mov	r1, r6
 800e63e:	4683      	mov	fp, r0
 800e640:	f000 fd12 	bl	800f068 <__mcmp>
 800e644:	2800      	cmp	r0, #0
 800e646:	9b01      	ldr	r3, [sp, #4]
 800e648:	dc02      	bgt.n	800e650 <_dtoa_r+0xab8>
 800e64a:	d1de      	bne.n	800e60a <_dtoa_r+0xa72>
 800e64c:	07da      	lsls	r2, r3, #31
 800e64e:	d5dc      	bpl.n	800e60a <_dtoa_r+0xa72>
 800e650:	2b39      	cmp	r3, #57	; 0x39
 800e652:	d1d8      	bne.n	800e606 <_dtoa_r+0xa6e>
 800e654:	9a02      	ldr	r2, [sp, #8]
 800e656:	2339      	movs	r3, #57	; 0x39
 800e658:	7013      	strb	r3, [r2, #0]
 800e65a:	462b      	mov	r3, r5
 800e65c:	461d      	mov	r5, r3
 800e65e:	3b01      	subs	r3, #1
 800e660:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e664:	2a39      	cmp	r2, #57	; 0x39
 800e666:	d050      	beq.n	800e70a <_dtoa_r+0xb72>
 800e668:	3201      	adds	r2, #1
 800e66a:	701a      	strb	r2, [r3, #0]
 800e66c:	e745      	b.n	800e4fa <_dtoa_r+0x962>
 800e66e:	2a00      	cmp	r2, #0
 800e670:	dd03      	ble.n	800e67a <_dtoa_r+0xae2>
 800e672:	2b39      	cmp	r3, #57	; 0x39
 800e674:	d0ee      	beq.n	800e654 <_dtoa_r+0xabc>
 800e676:	3301      	adds	r3, #1
 800e678:	e7c7      	b.n	800e60a <_dtoa_r+0xa72>
 800e67a:	9a01      	ldr	r2, [sp, #4]
 800e67c:	9907      	ldr	r1, [sp, #28]
 800e67e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e682:	428a      	cmp	r2, r1
 800e684:	d02a      	beq.n	800e6dc <_dtoa_r+0xb44>
 800e686:	4659      	mov	r1, fp
 800e688:	2300      	movs	r3, #0
 800e68a:	220a      	movs	r2, #10
 800e68c:	4620      	mov	r0, r4
 800e68e:	f000 facf 	bl	800ec30 <__multadd>
 800e692:	45b8      	cmp	r8, r7
 800e694:	4683      	mov	fp, r0
 800e696:	f04f 0300 	mov.w	r3, #0
 800e69a:	f04f 020a 	mov.w	r2, #10
 800e69e:	4641      	mov	r1, r8
 800e6a0:	4620      	mov	r0, r4
 800e6a2:	d107      	bne.n	800e6b4 <_dtoa_r+0xb1c>
 800e6a4:	f000 fac4 	bl	800ec30 <__multadd>
 800e6a8:	4680      	mov	r8, r0
 800e6aa:	4607      	mov	r7, r0
 800e6ac:	9b01      	ldr	r3, [sp, #4]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	9301      	str	r3, [sp, #4]
 800e6b2:	e775      	b.n	800e5a0 <_dtoa_r+0xa08>
 800e6b4:	f000 fabc 	bl	800ec30 <__multadd>
 800e6b8:	4639      	mov	r1, r7
 800e6ba:	4680      	mov	r8, r0
 800e6bc:	2300      	movs	r3, #0
 800e6be:	220a      	movs	r2, #10
 800e6c0:	4620      	mov	r0, r4
 800e6c2:	f000 fab5 	bl	800ec30 <__multadd>
 800e6c6:	4607      	mov	r7, r0
 800e6c8:	e7f0      	b.n	800e6ac <_dtoa_r+0xb14>
 800e6ca:	f1b9 0f00 	cmp.w	r9, #0
 800e6ce:	9a00      	ldr	r2, [sp, #0]
 800e6d0:	bfcc      	ite	gt
 800e6d2:	464d      	movgt	r5, r9
 800e6d4:	2501      	movle	r5, #1
 800e6d6:	4415      	add	r5, r2
 800e6d8:	f04f 0800 	mov.w	r8, #0
 800e6dc:	4659      	mov	r1, fp
 800e6de:	2201      	movs	r2, #1
 800e6e0:	4620      	mov	r0, r4
 800e6e2:	9301      	str	r3, [sp, #4]
 800e6e4:	f000 fc54 	bl	800ef90 <__lshift>
 800e6e8:	4631      	mov	r1, r6
 800e6ea:	4683      	mov	fp, r0
 800e6ec:	f000 fcbc 	bl	800f068 <__mcmp>
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	dcb2      	bgt.n	800e65a <_dtoa_r+0xac2>
 800e6f4:	d102      	bne.n	800e6fc <_dtoa_r+0xb64>
 800e6f6:	9b01      	ldr	r3, [sp, #4]
 800e6f8:	07db      	lsls	r3, r3, #31
 800e6fa:	d4ae      	bmi.n	800e65a <_dtoa_r+0xac2>
 800e6fc:	462b      	mov	r3, r5
 800e6fe:	461d      	mov	r5, r3
 800e700:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e704:	2a30      	cmp	r2, #48	; 0x30
 800e706:	d0fa      	beq.n	800e6fe <_dtoa_r+0xb66>
 800e708:	e6f7      	b.n	800e4fa <_dtoa_r+0x962>
 800e70a:	9a00      	ldr	r2, [sp, #0]
 800e70c:	429a      	cmp	r2, r3
 800e70e:	d1a5      	bne.n	800e65c <_dtoa_r+0xac4>
 800e710:	f10a 0a01 	add.w	sl, sl, #1
 800e714:	2331      	movs	r3, #49	; 0x31
 800e716:	e779      	b.n	800e60c <_dtoa_r+0xa74>
 800e718:	4b13      	ldr	r3, [pc, #76]	; (800e768 <_dtoa_r+0xbd0>)
 800e71a:	f7ff baaf 	b.w	800dc7c <_dtoa_r+0xe4>
 800e71e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e720:	2b00      	cmp	r3, #0
 800e722:	f47f aa86 	bne.w	800dc32 <_dtoa_r+0x9a>
 800e726:	4b11      	ldr	r3, [pc, #68]	; (800e76c <_dtoa_r+0xbd4>)
 800e728:	f7ff baa8 	b.w	800dc7c <_dtoa_r+0xe4>
 800e72c:	f1b9 0f00 	cmp.w	r9, #0
 800e730:	dc03      	bgt.n	800e73a <_dtoa_r+0xba2>
 800e732:	9b05      	ldr	r3, [sp, #20]
 800e734:	2b02      	cmp	r3, #2
 800e736:	f73f aec9 	bgt.w	800e4cc <_dtoa_r+0x934>
 800e73a:	9d00      	ldr	r5, [sp, #0]
 800e73c:	4631      	mov	r1, r6
 800e73e:	4658      	mov	r0, fp
 800e740:	f7ff f99c 	bl	800da7c <quorem>
 800e744:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e748:	f805 3b01 	strb.w	r3, [r5], #1
 800e74c:	9a00      	ldr	r2, [sp, #0]
 800e74e:	1aaa      	subs	r2, r5, r2
 800e750:	4591      	cmp	r9, r2
 800e752:	ddba      	ble.n	800e6ca <_dtoa_r+0xb32>
 800e754:	4659      	mov	r1, fp
 800e756:	2300      	movs	r3, #0
 800e758:	220a      	movs	r2, #10
 800e75a:	4620      	mov	r0, r4
 800e75c:	f000 fa68 	bl	800ec30 <__multadd>
 800e760:	4683      	mov	fp, r0
 800e762:	e7eb      	b.n	800e73c <_dtoa_r+0xba4>
 800e764:	0801184b 	.word	0x0801184b
 800e768:	080119d9 	.word	0x080119d9
 800e76c:	080117df 	.word	0x080117df

0800e770 <__sflush_r>:
 800e770:	898a      	ldrh	r2, [r1, #12]
 800e772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e776:	4605      	mov	r5, r0
 800e778:	0710      	lsls	r0, r2, #28
 800e77a:	460c      	mov	r4, r1
 800e77c:	d458      	bmi.n	800e830 <__sflush_r+0xc0>
 800e77e:	684b      	ldr	r3, [r1, #4]
 800e780:	2b00      	cmp	r3, #0
 800e782:	dc05      	bgt.n	800e790 <__sflush_r+0x20>
 800e784:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e786:	2b00      	cmp	r3, #0
 800e788:	dc02      	bgt.n	800e790 <__sflush_r+0x20>
 800e78a:	2000      	movs	r0, #0
 800e78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e790:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e792:	2e00      	cmp	r6, #0
 800e794:	d0f9      	beq.n	800e78a <__sflush_r+0x1a>
 800e796:	2300      	movs	r3, #0
 800e798:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e79c:	682f      	ldr	r7, [r5, #0]
 800e79e:	602b      	str	r3, [r5, #0]
 800e7a0:	d032      	beq.n	800e808 <__sflush_r+0x98>
 800e7a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e7a4:	89a3      	ldrh	r3, [r4, #12]
 800e7a6:	075a      	lsls	r2, r3, #29
 800e7a8:	d505      	bpl.n	800e7b6 <__sflush_r+0x46>
 800e7aa:	6863      	ldr	r3, [r4, #4]
 800e7ac:	1ac0      	subs	r0, r0, r3
 800e7ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e7b0:	b10b      	cbz	r3, 800e7b6 <__sflush_r+0x46>
 800e7b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e7b4:	1ac0      	subs	r0, r0, r3
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7bc:	6a21      	ldr	r1, [r4, #32]
 800e7be:	4628      	mov	r0, r5
 800e7c0:	47b0      	blx	r6
 800e7c2:	1c43      	adds	r3, r0, #1
 800e7c4:	89a3      	ldrh	r3, [r4, #12]
 800e7c6:	d106      	bne.n	800e7d6 <__sflush_r+0x66>
 800e7c8:	6829      	ldr	r1, [r5, #0]
 800e7ca:	291d      	cmp	r1, #29
 800e7cc:	d82c      	bhi.n	800e828 <__sflush_r+0xb8>
 800e7ce:	4a2a      	ldr	r2, [pc, #168]	; (800e878 <__sflush_r+0x108>)
 800e7d0:	40ca      	lsrs	r2, r1
 800e7d2:	07d6      	lsls	r6, r2, #31
 800e7d4:	d528      	bpl.n	800e828 <__sflush_r+0xb8>
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	6062      	str	r2, [r4, #4]
 800e7da:	04d9      	lsls	r1, r3, #19
 800e7dc:	6922      	ldr	r2, [r4, #16]
 800e7de:	6022      	str	r2, [r4, #0]
 800e7e0:	d504      	bpl.n	800e7ec <__sflush_r+0x7c>
 800e7e2:	1c42      	adds	r2, r0, #1
 800e7e4:	d101      	bne.n	800e7ea <__sflush_r+0x7a>
 800e7e6:	682b      	ldr	r3, [r5, #0]
 800e7e8:	b903      	cbnz	r3, 800e7ec <__sflush_r+0x7c>
 800e7ea:	6560      	str	r0, [r4, #84]	; 0x54
 800e7ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7ee:	602f      	str	r7, [r5, #0]
 800e7f0:	2900      	cmp	r1, #0
 800e7f2:	d0ca      	beq.n	800e78a <__sflush_r+0x1a>
 800e7f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7f8:	4299      	cmp	r1, r3
 800e7fa:	d002      	beq.n	800e802 <__sflush_r+0x92>
 800e7fc:	4628      	mov	r0, r5
 800e7fe:	f7fd ff53 	bl	800c6a8 <_free_r>
 800e802:	2000      	movs	r0, #0
 800e804:	6360      	str	r0, [r4, #52]	; 0x34
 800e806:	e7c1      	b.n	800e78c <__sflush_r+0x1c>
 800e808:	6a21      	ldr	r1, [r4, #32]
 800e80a:	2301      	movs	r3, #1
 800e80c:	4628      	mov	r0, r5
 800e80e:	47b0      	blx	r6
 800e810:	1c41      	adds	r1, r0, #1
 800e812:	d1c7      	bne.n	800e7a4 <__sflush_r+0x34>
 800e814:	682b      	ldr	r3, [r5, #0]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d0c4      	beq.n	800e7a4 <__sflush_r+0x34>
 800e81a:	2b1d      	cmp	r3, #29
 800e81c:	d001      	beq.n	800e822 <__sflush_r+0xb2>
 800e81e:	2b16      	cmp	r3, #22
 800e820:	d101      	bne.n	800e826 <__sflush_r+0xb6>
 800e822:	602f      	str	r7, [r5, #0]
 800e824:	e7b1      	b.n	800e78a <__sflush_r+0x1a>
 800e826:	89a3      	ldrh	r3, [r4, #12]
 800e828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e82c:	81a3      	strh	r3, [r4, #12]
 800e82e:	e7ad      	b.n	800e78c <__sflush_r+0x1c>
 800e830:	690f      	ldr	r7, [r1, #16]
 800e832:	2f00      	cmp	r7, #0
 800e834:	d0a9      	beq.n	800e78a <__sflush_r+0x1a>
 800e836:	0793      	lsls	r3, r2, #30
 800e838:	680e      	ldr	r6, [r1, #0]
 800e83a:	bf08      	it	eq
 800e83c:	694b      	ldreq	r3, [r1, #20]
 800e83e:	600f      	str	r7, [r1, #0]
 800e840:	bf18      	it	ne
 800e842:	2300      	movne	r3, #0
 800e844:	eba6 0807 	sub.w	r8, r6, r7
 800e848:	608b      	str	r3, [r1, #8]
 800e84a:	f1b8 0f00 	cmp.w	r8, #0
 800e84e:	dd9c      	ble.n	800e78a <__sflush_r+0x1a>
 800e850:	6a21      	ldr	r1, [r4, #32]
 800e852:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e854:	4643      	mov	r3, r8
 800e856:	463a      	mov	r2, r7
 800e858:	4628      	mov	r0, r5
 800e85a:	47b0      	blx	r6
 800e85c:	2800      	cmp	r0, #0
 800e85e:	dc06      	bgt.n	800e86e <__sflush_r+0xfe>
 800e860:	89a3      	ldrh	r3, [r4, #12]
 800e862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e866:	81a3      	strh	r3, [r4, #12]
 800e868:	f04f 30ff 	mov.w	r0, #4294967295
 800e86c:	e78e      	b.n	800e78c <__sflush_r+0x1c>
 800e86e:	4407      	add	r7, r0
 800e870:	eba8 0800 	sub.w	r8, r8, r0
 800e874:	e7e9      	b.n	800e84a <__sflush_r+0xda>
 800e876:	bf00      	nop
 800e878:	20400001 	.word	0x20400001

0800e87c <_fflush_r>:
 800e87c:	b538      	push	{r3, r4, r5, lr}
 800e87e:	690b      	ldr	r3, [r1, #16]
 800e880:	4605      	mov	r5, r0
 800e882:	460c      	mov	r4, r1
 800e884:	b913      	cbnz	r3, 800e88c <_fflush_r+0x10>
 800e886:	2500      	movs	r5, #0
 800e888:	4628      	mov	r0, r5
 800e88a:	bd38      	pop	{r3, r4, r5, pc}
 800e88c:	b118      	cbz	r0, 800e896 <_fflush_r+0x1a>
 800e88e:	6983      	ldr	r3, [r0, #24]
 800e890:	b90b      	cbnz	r3, 800e896 <_fflush_r+0x1a>
 800e892:	f7fd fa67 	bl	800bd64 <__sinit>
 800e896:	4b14      	ldr	r3, [pc, #80]	; (800e8e8 <_fflush_r+0x6c>)
 800e898:	429c      	cmp	r4, r3
 800e89a:	d11b      	bne.n	800e8d4 <_fflush_r+0x58>
 800e89c:	686c      	ldr	r4, [r5, #4]
 800e89e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d0ef      	beq.n	800e886 <_fflush_r+0xa>
 800e8a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e8a8:	07d0      	lsls	r0, r2, #31
 800e8aa:	d404      	bmi.n	800e8b6 <_fflush_r+0x3a>
 800e8ac:	0599      	lsls	r1, r3, #22
 800e8ae:	d402      	bmi.n	800e8b6 <_fflush_r+0x3a>
 800e8b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8b2:	f7fd fc37 	bl	800c124 <__retarget_lock_acquire_recursive>
 800e8b6:	4628      	mov	r0, r5
 800e8b8:	4621      	mov	r1, r4
 800e8ba:	f7ff ff59 	bl	800e770 <__sflush_r>
 800e8be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8c0:	07da      	lsls	r2, r3, #31
 800e8c2:	4605      	mov	r5, r0
 800e8c4:	d4e0      	bmi.n	800e888 <_fflush_r+0xc>
 800e8c6:	89a3      	ldrh	r3, [r4, #12]
 800e8c8:	059b      	lsls	r3, r3, #22
 800e8ca:	d4dd      	bmi.n	800e888 <_fflush_r+0xc>
 800e8cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8ce:	f7fd fc2b 	bl	800c128 <__retarget_lock_release_recursive>
 800e8d2:	e7d9      	b.n	800e888 <_fflush_r+0xc>
 800e8d4:	4b05      	ldr	r3, [pc, #20]	; (800e8ec <_fflush_r+0x70>)
 800e8d6:	429c      	cmp	r4, r3
 800e8d8:	d101      	bne.n	800e8de <_fflush_r+0x62>
 800e8da:	68ac      	ldr	r4, [r5, #8]
 800e8dc:	e7df      	b.n	800e89e <_fflush_r+0x22>
 800e8de:	4b04      	ldr	r3, [pc, #16]	; (800e8f0 <_fflush_r+0x74>)
 800e8e0:	429c      	cmp	r4, r3
 800e8e2:	bf08      	it	eq
 800e8e4:	68ec      	ldreq	r4, [r5, #12]
 800e8e6:	e7da      	b.n	800e89e <_fflush_r+0x22>
 800e8e8:	080114b8 	.word	0x080114b8
 800e8ec:	080114d8 	.word	0x080114d8
 800e8f0:	08011498 	.word	0x08011498

0800e8f4 <fiprintf>:
 800e8f4:	b40e      	push	{r1, r2, r3}
 800e8f6:	b503      	push	{r0, r1, lr}
 800e8f8:	4601      	mov	r1, r0
 800e8fa:	ab03      	add	r3, sp, #12
 800e8fc:	4805      	ldr	r0, [pc, #20]	; (800e914 <fiprintf+0x20>)
 800e8fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800e902:	6800      	ldr	r0, [r0, #0]
 800e904:	9301      	str	r3, [sp, #4]
 800e906:	f000 fe69 	bl	800f5dc <_vfiprintf_r>
 800e90a:	b002      	add	sp, #8
 800e90c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e910:	b003      	add	sp, #12
 800e912:	4770      	bx	lr
 800e914:	20000020 	.word	0x20000020

0800e918 <_findenv_r>:
 800e918:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e91c:	4607      	mov	r7, r0
 800e91e:	4689      	mov	r9, r1
 800e920:	4616      	mov	r6, r2
 800e922:	f001 f897 	bl	800fa54 <__env_lock>
 800e926:	4b18      	ldr	r3, [pc, #96]	; (800e988 <_findenv_r+0x70>)
 800e928:	681c      	ldr	r4, [r3, #0]
 800e92a:	469a      	mov	sl, r3
 800e92c:	b134      	cbz	r4, 800e93c <_findenv_r+0x24>
 800e92e:	464b      	mov	r3, r9
 800e930:	4698      	mov	r8, r3
 800e932:	f813 1b01 	ldrb.w	r1, [r3], #1
 800e936:	b139      	cbz	r1, 800e948 <_findenv_r+0x30>
 800e938:	293d      	cmp	r1, #61	; 0x3d
 800e93a:	d1f9      	bne.n	800e930 <_findenv_r+0x18>
 800e93c:	4638      	mov	r0, r7
 800e93e:	f001 f88f 	bl	800fa60 <__env_unlock>
 800e942:	2000      	movs	r0, #0
 800e944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e948:	eba8 0809 	sub.w	r8, r8, r9
 800e94c:	46a3      	mov	fp, r4
 800e94e:	f854 0b04 	ldr.w	r0, [r4], #4
 800e952:	2800      	cmp	r0, #0
 800e954:	d0f2      	beq.n	800e93c <_findenv_r+0x24>
 800e956:	4642      	mov	r2, r8
 800e958:	4649      	mov	r1, r9
 800e95a:	f7fe fce4 	bl	800d326 <strncmp>
 800e95e:	2800      	cmp	r0, #0
 800e960:	d1f4      	bne.n	800e94c <_findenv_r+0x34>
 800e962:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e966:	eb03 0508 	add.w	r5, r3, r8
 800e96a:	f813 3008 	ldrb.w	r3, [r3, r8]
 800e96e:	2b3d      	cmp	r3, #61	; 0x3d
 800e970:	d1ec      	bne.n	800e94c <_findenv_r+0x34>
 800e972:	f8da 3000 	ldr.w	r3, [sl]
 800e976:	ebab 0303 	sub.w	r3, fp, r3
 800e97a:	109b      	asrs	r3, r3, #2
 800e97c:	4638      	mov	r0, r7
 800e97e:	6033      	str	r3, [r6, #0]
 800e980:	f001 f86e 	bl	800fa60 <__env_unlock>
 800e984:	1c68      	adds	r0, r5, #1
 800e986:	e7dd      	b.n	800e944 <_findenv_r+0x2c>
 800e988:	20000008 	.word	0x20000008

0800e98c <_getenv_r>:
 800e98c:	b507      	push	{r0, r1, r2, lr}
 800e98e:	aa01      	add	r2, sp, #4
 800e990:	f7ff ffc2 	bl	800e918 <_findenv_r>
 800e994:	b003      	add	sp, #12
 800e996:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800e99c <__gettzinfo>:
 800e99c:	4800      	ldr	r0, [pc, #0]	; (800e9a0 <__gettzinfo+0x4>)
 800e99e:	4770      	bx	lr
 800e9a0:	20000090 	.word	0x20000090

0800e9a4 <gmtime_r>:
 800e9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9a8:	e9d0 6700 	ldrd	r6, r7, [r0]
 800e9ac:	460c      	mov	r4, r1
 800e9ae:	4a51      	ldr	r2, [pc, #324]	; (800eaf4 <gmtime_r+0x150>)
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	4630      	mov	r0, r6
 800e9b4:	4639      	mov	r1, r7
 800e9b6:	f7f2 f927 	bl	8000c08 <__aeabi_ldivmod>
 800e9ba:	4639      	mov	r1, r7
 800e9bc:	4605      	mov	r5, r0
 800e9be:	4a4d      	ldr	r2, [pc, #308]	; (800eaf4 <gmtime_r+0x150>)
 800e9c0:	4630      	mov	r0, r6
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	f7f2 f920 	bl	8000c08 <__aeabi_ldivmod>
 800e9c8:	2a00      	cmp	r2, #0
 800e9ca:	bfbc      	itt	lt
 800e9cc:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800e9d0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800e9d4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800e9d8:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800e9dc:	fbb2 f3f1 	udiv	r3, r2, r1
 800e9e0:	fb01 2213 	mls	r2, r1, r3, r2
 800e9e4:	f04f 013c 	mov.w	r1, #60	; 0x3c
 800e9e8:	bfac      	ite	ge
 800e9ea:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 800e9ee:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 800e9f2:	60a3      	str	r3, [r4, #8]
 800e9f4:	fbb2 f3f1 	udiv	r3, r2, r1
 800e9f8:	fb01 2213 	mls	r2, r1, r3, r2
 800e9fc:	6063      	str	r3, [r4, #4]
 800e9fe:	6022      	str	r2, [r4, #0]
 800ea00:	1cc3      	adds	r3, r0, #3
 800ea02:	2207      	movs	r2, #7
 800ea04:	fb93 f2f2 	sdiv	r2, r3, r2
 800ea08:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 800ea0c:	1a9b      	subs	r3, r3, r2
 800ea0e:	bf48      	it	mi
 800ea10:	3307      	addmi	r3, #7
 800ea12:	2800      	cmp	r0, #0
 800ea14:	61a3      	str	r3, [r4, #24]
 800ea16:	bfb8      	it	lt
 800ea18:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 800ea1c:	4936      	ldr	r1, [pc, #216]	; (800eaf8 <gmtime_r+0x154>)
 800ea1e:	bfae      	itee	ge
 800ea20:	fb90 f1f1 	sdivge	r1, r0, r1
 800ea24:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 800ea28:	fb93 f1f1 	sdivlt	r1, r3, r1
 800ea2c:	4b33      	ldr	r3, [pc, #204]	; (800eafc <gmtime_r+0x158>)
 800ea2e:	fb03 0001 	mla	r0, r3, r1, r0
 800ea32:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800ea36:	fbb0 f2f2 	udiv	r2, r0, r2
 800ea3a:	4402      	add	r2, r0
 800ea3c:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 800ea40:	fbb0 f3fc 	udiv	r3, r0, ip
 800ea44:	1ad2      	subs	r2, r2, r3
 800ea46:	f240 176d 	movw	r7, #365	; 0x16d
 800ea4a:	4b2d      	ldr	r3, [pc, #180]	; (800eb00 <gmtime_r+0x15c>)
 800ea4c:	fbb0 f3f3 	udiv	r3, r0, r3
 800ea50:	2664      	movs	r6, #100	; 0x64
 800ea52:	1ad3      	subs	r3, r2, r3
 800ea54:	fbb3 f5f7 	udiv	r5, r3, r7
 800ea58:	fbb3 f3fc 	udiv	r3, r3, ip
 800ea5c:	fbb5 f2f6 	udiv	r2, r5, r6
 800ea60:	1ad3      	subs	r3, r2, r3
 800ea62:	4403      	add	r3, r0
 800ea64:	fb07 3315 	mls	r3, r7, r5, r3
 800ea68:	2099      	movs	r0, #153	; 0x99
 800ea6a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800ea6e:	f10c 0c02 	add.w	ip, ip, #2
 800ea72:	f103 0e01 	add.w	lr, r3, #1
 800ea76:	fbbc f7f0 	udiv	r7, ip, r0
 800ea7a:	4378      	muls	r0, r7
 800ea7c:	3002      	adds	r0, #2
 800ea7e:	f04f 0805 	mov.w	r8, #5
 800ea82:	fbb0 f0f8 	udiv	r0, r0, r8
 800ea86:	ebae 0000 	sub.w	r0, lr, r0
 800ea8a:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 800ea8e:	45f4      	cmp	ip, lr
 800ea90:	bf94      	ite	ls
 800ea92:	f04f 0c02 	movls.w	ip, #2
 800ea96:	f06f 0c09 	mvnhi.w	ip, #9
 800ea9a:	4467      	add	r7, ip
 800ea9c:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 800eaa0:	fb0c 5101 	mla	r1, ip, r1, r5
 800eaa4:	2f01      	cmp	r7, #1
 800eaa6:	bf98      	it	ls
 800eaa8:	3101      	addls	r1, #1
 800eaaa:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800eaae:	d30c      	bcc.n	800eaca <gmtime_r+0x126>
 800eab0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800eab4:	61e3      	str	r3, [r4, #28]
 800eab6:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 800eaba:	2300      	movs	r3, #0
 800eabc:	60e0      	str	r0, [r4, #12]
 800eabe:	e9c4 7104 	strd	r7, r1, [r4, #16]
 800eac2:	6223      	str	r3, [r4, #32]
 800eac4:	4620      	mov	r0, r4
 800eac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaca:	f015 0f03 	tst.w	r5, #3
 800eace:	d102      	bne.n	800ead6 <gmtime_r+0x132>
 800ead0:	fb06 5212 	mls	r2, r6, r2, r5
 800ead4:	b95a      	cbnz	r2, 800eaee <gmtime_r+0x14a>
 800ead6:	f44f 76c8 	mov.w	r6, #400	; 0x190
 800eada:	fbb5 f2f6 	udiv	r2, r5, r6
 800eade:	fb06 5212 	mls	r2, r6, r2, r5
 800eae2:	fab2 f282 	clz	r2, r2
 800eae6:	0952      	lsrs	r2, r2, #5
 800eae8:	333b      	adds	r3, #59	; 0x3b
 800eaea:	4413      	add	r3, r2
 800eaec:	e7e2      	b.n	800eab4 <gmtime_r+0x110>
 800eaee:	2201      	movs	r2, #1
 800eaf0:	e7fa      	b.n	800eae8 <gmtime_r+0x144>
 800eaf2:	bf00      	nop
 800eaf4:	00015180 	.word	0x00015180
 800eaf8:	00023ab1 	.word	0x00023ab1
 800eafc:	fffdc54f 	.word	0xfffdc54f
 800eb00:	00023ab0 	.word	0x00023ab0

0800eb04 <_localeconv_r>:
 800eb04:	4800      	ldr	r0, [pc, #0]	; (800eb08 <_localeconv_r+0x4>)
 800eb06:	4770      	bx	lr
 800eb08:	200001d8 	.word	0x200001d8

0800eb0c <_lseek_r>:
 800eb0c:	b538      	push	{r3, r4, r5, lr}
 800eb0e:	4d07      	ldr	r5, [pc, #28]	; (800eb2c <_lseek_r+0x20>)
 800eb10:	4604      	mov	r4, r0
 800eb12:	4608      	mov	r0, r1
 800eb14:	4611      	mov	r1, r2
 800eb16:	2200      	movs	r2, #0
 800eb18:	602a      	str	r2, [r5, #0]
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	f7f3 f80a 	bl	8001b34 <_lseek>
 800eb20:	1c43      	adds	r3, r0, #1
 800eb22:	d102      	bne.n	800eb2a <_lseek_r+0x1e>
 800eb24:	682b      	ldr	r3, [r5, #0]
 800eb26:	b103      	cbz	r3, 800eb2a <_lseek_r+0x1e>
 800eb28:	6023      	str	r3, [r4, #0]
 800eb2a:	bd38      	pop	{r3, r4, r5, pc}
 800eb2c:	200050b8 	.word	0x200050b8

0800eb30 <__ascii_mbtowc>:
 800eb30:	b082      	sub	sp, #8
 800eb32:	b901      	cbnz	r1, 800eb36 <__ascii_mbtowc+0x6>
 800eb34:	a901      	add	r1, sp, #4
 800eb36:	b142      	cbz	r2, 800eb4a <__ascii_mbtowc+0x1a>
 800eb38:	b14b      	cbz	r3, 800eb4e <__ascii_mbtowc+0x1e>
 800eb3a:	7813      	ldrb	r3, [r2, #0]
 800eb3c:	600b      	str	r3, [r1, #0]
 800eb3e:	7812      	ldrb	r2, [r2, #0]
 800eb40:	1e10      	subs	r0, r2, #0
 800eb42:	bf18      	it	ne
 800eb44:	2001      	movne	r0, #1
 800eb46:	b002      	add	sp, #8
 800eb48:	4770      	bx	lr
 800eb4a:	4610      	mov	r0, r2
 800eb4c:	e7fb      	b.n	800eb46 <__ascii_mbtowc+0x16>
 800eb4e:	f06f 0001 	mvn.w	r0, #1
 800eb52:	e7f8      	b.n	800eb46 <__ascii_mbtowc+0x16>

0800eb54 <__malloc_lock>:
 800eb54:	4801      	ldr	r0, [pc, #4]	; (800eb5c <__malloc_lock+0x8>)
 800eb56:	f7fd bae5 	b.w	800c124 <__retarget_lock_acquire_recursive>
 800eb5a:	bf00      	nop
 800eb5c:	200050b0 	.word	0x200050b0

0800eb60 <__malloc_unlock>:
 800eb60:	4801      	ldr	r0, [pc, #4]	; (800eb68 <__malloc_unlock+0x8>)
 800eb62:	f7fd bae1 	b.w	800c128 <__retarget_lock_release_recursive>
 800eb66:	bf00      	nop
 800eb68:	200050b0 	.word	0x200050b0

0800eb6c <_Balloc>:
 800eb6c:	b570      	push	{r4, r5, r6, lr}
 800eb6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eb70:	4604      	mov	r4, r0
 800eb72:	460d      	mov	r5, r1
 800eb74:	b976      	cbnz	r6, 800eb94 <_Balloc+0x28>
 800eb76:	2010      	movs	r0, #16
 800eb78:	f7fd fad8 	bl	800c12c <malloc>
 800eb7c:	4602      	mov	r2, r0
 800eb7e:	6260      	str	r0, [r4, #36]	; 0x24
 800eb80:	b920      	cbnz	r0, 800eb8c <_Balloc+0x20>
 800eb82:	4b18      	ldr	r3, [pc, #96]	; (800ebe4 <_Balloc+0x78>)
 800eb84:	4818      	ldr	r0, [pc, #96]	; (800ebe8 <_Balloc+0x7c>)
 800eb86:	2166      	movs	r1, #102	; 0x66
 800eb88:	f7fe ff36 	bl	800d9f8 <__assert_func>
 800eb8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb90:	6006      	str	r6, [r0, #0]
 800eb92:	60c6      	str	r6, [r0, #12]
 800eb94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800eb96:	68f3      	ldr	r3, [r6, #12]
 800eb98:	b183      	cbz	r3, 800ebbc <_Balloc+0x50>
 800eb9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb9c:	68db      	ldr	r3, [r3, #12]
 800eb9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eba2:	b9b8      	cbnz	r0, 800ebd4 <_Balloc+0x68>
 800eba4:	2101      	movs	r1, #1
 800eba6:	fa01 f605 	lsl.w	r6, r1, r5
 800ebaa:	1d72      	adds	r2, r6, #5
 800ebac:	0092      	lsls	r2, r2, #2
 800ebae:	4620      	mov	r0, r4
 800ebb0:	f000 fb5a 	bl	800f268 <_calloc_r>
 800ebb4:	b160      	cbz	r0, 800ebd0 <_Balloc+0x64>
 800ebb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ebba:	e00e      	b.n	800ebda <_Balloc+0x6e>
 800ebbc:	2221      	movs	r2, #33	; 0x21
 800ebbe:	2104      	movs	r1, #4
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	f000 fb51 	bl	800f268 <_calloc_r>
 800ebc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ebc8:	60f0      	str	r0, [r6, #12]
 800ebca:	68db      	ldr	r3, [r3, #12]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d1e4      	bne.n	800eb9a <_Balloc+0x2e>
 800ebd0:	2000      	movs	r0, #0
 800ebd2:	bd70      	pop	{r4, r5, r6, pc}
 800ebd4:	6802      	ldr	r2, [r0, #0]
 800ebd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ebda:	2300      	movs	r3, #0
 800ebdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ebe0:	e7f7      	b.n	800ebd2 <_Balloc+0x66>
 800ebe2:	bf00      	nop
 800ebe4:	080114fc 	.word	0x080114fc
 800ebe8:	08011866 	.word	0x08011866

0800ebec <_Bfree>:
 800ebec:	b570      	push	{r4, r5, r6, lr}
 800ebee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ebf0:	4605      	mov	r5, r0
 800ebf2:	460c      	mov	r4, r1
 800ebf4:	b976      	cbnz	r6, 800ec14 <_Bfree+0x28>
 800ebf6:	2010      	movs	r0, #16
 800ebf8:	f7fd fa98 	bl	800c12c <malloc>
 800ebfc:	4602      	mov	r2, r0
 800ebfe:	6268      	str	r0, [r5, #36]	; 0x24
 800ec00:	b920      	cbnz	r0, 800ec0c <_Bfree+0x20>
 800ec02:	4b09      	ldr	r3, [pc, #36]	; (800ec28 <_Bfree+0x3c>)
 800ec04:	4809      	ldr	r0, [pc, #36]	; (800ec2c <_Bfree+0x40>)
 800ec06:	218a      	movs	r1, #138	; 0x8a
 800ec08:	f7fe fef6 	bl	800d9f8 <__assert_func>
 800ec0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ec10:	6006      	str	r6, [r0, #0]
 800ec12:	60c6      	str	r6, [r0, #12]
 800ec14:	b13c      	cbz	r4, 800ec26 <_Bfree+0x3a>
 800ec16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ec18:	6862      	ldr	r2, [r4, #4]
 800ec1a:	68db      	ldr	r3, [r3, #12]
 800ec1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ec20:	6021      	str	r1, [r4, #0]
 800ec22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ec26:	bd70      	pop	{r4, r5, r6, pc}
 800ec28:	080114fc 	.word	0x080114fc
 800ec2c:	08011866 	.word	0x08011866

0800ec30 <__multadd>:
 800ec30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec34:	690e      	ldr	r6, [r1, #16]
 800ec36:	4607      	mov	r7, r0
 800ec38:	4698      	mov	r8, r3
 800ec3a:	460c      	mov	r4, r1
 800ec3c:	f101 0014 	add.w	r0, r1, #20
 800ec40:	2300      	movs	r3, #0
 800ec42:	6805      	ldr	r5, [r0, #0]
 800ec44:	b2a9      	uxth	r1, r5
 800ec46:	fb02 8101 	mla	r1, r2, r1, r8
 800ec4a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ec4e:	0c2d      	lsrs	r5, r5, #16
 800ec50:	fb02 c505 	mla	r5, r2, r5, ip
 800ec54:	b289      	uxth	r1, r1
 800ec56:	3301      	adds	r3, #1
 800ec58:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ec5c:	429e      	cmp	r6, r3
 800ec5e:	f840 1b04 	str.w	r1, [r0], #4
 800ec62:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ec66:	dcec      	bgt.n	800ec42 <__multadd+0x12>
 800ec68:	f1b8 0f00 	cmp.w	r8, #0
 800ec6c:	d022      	beq.n	800ecb4 <__multadd+0x84>
 800ec6e:	68a3      	ldr	r3, [r4, #8]
 800ec70:	42b3      	cmp	r3, r6
 800ec72:	dc19      	bgt.n	800eca8 <__multadd+0x78>
 800ec74:	6861      	ldr	r1, [r4, #4]
 800ec76:	4638      	mov	r0, r7
 800ec78:	3101      	adds	r1, #1
 800ec7a:	f7ff ff77 	bl	800eb6c <_Balloc>
 800ec7e:	4605      	mov	r5, r0
 800ec80:	b928      	cbnz	r0, 800ec8e <__multadd+0x5e>
 800ec82:	4602      	mov	r2, r0
 800ec84:	4b0d      	ldr	r3, [pc, #52]	; (800ecbc <__multadd+0x8c>)
 800ec86:	480e      	ldr	r0, [pc, #56]	; (800ecc0 <__multadd+0x90>)
 800ec88:	21b5      	movs	r1, #181	; 0xb5
 800ec8a:	f7fe feb5 	bl	800d9f8 <__assert_func>
 800ec8e:	6922      	ldr	r2, [r4, #16]
 800ec90:	3202      	adds	r2, #2
 800ec92:	f104 010c 	add.w	r1, r4, #12
 800ec96:	0092      	lsls	r2, r2, #2
 800ec98:	300c      	adds	r0, #12
 800ec9a:	f7fd fa57 	bl	800c14c <memcpy>
 800ec9e:	4621      	mov	r1, r4
 800eca0:	4638      	mov	r0, r7
 800eca2:	f7ff ffa3 	bl	800ebec <_Bfree>
 800eca6:	462c      	mov	r4, r5
 800eca8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ecac:	3601      	adds	r6, #1
 800ecae:	f8c3 8014 	str.w	r8, [r3, #20]
 800ecb2:	6126      	str	r6, [r4, #16]
 800ecb4:	4620      	mov	r0, r4
 800ecb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecba:	bf00      	nop
 800ecbc:	0801184b 	.word	0x0801184b
 800ecc0:	08011866 	.word	0x08011866

0800ecc4 <__hi0bits>:
 800ecc4:	0c03      	lsrs	r3, r0, #16
 800ecc6:	041b      	lsls	r3, r3, #16
 800ecc8:	b9d3      	cbnz	r3, 800ed00 <__hi0bits+0x3c>
 800ecca:	0400      	lsls	r0, r0, #16
 800eccc:	2310      	movs	r3, #16
 800ecce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ecd2:	bf04      	itt	eq
 800ecd4:	0200      	lsleq	r0, r0, #8
 800ecd6:	3308      	addeq	r3, #8
 800ecd8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ecdc:	bf04      	itt	eq
 800ecde:	0100      	lsleq	r0, r0, #4
 800ece0:	3304      	addeq	r3, #4
 800ece2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ece6:	bf04      	itt	eq
 800ece8:	0080      	lsleq	r0, r0, #2
 800ecea:	3302      	addeq	r3, #2
 800ecec:	2800      	cmp	r0, #0
 800ecee:	db05      	blt.n	800ecfc <__hi0bits+0x38>
 800ecf0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ecf4:	f103 0301 	add.w	r3, r3, #1
 800ecf8:	bf08      	it	eq
 800ecfa:	2320      	moveq	r3, #32
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	4770      	bx	lr
 800ed00:	2300      	movs	r3, #0
 800ed02:	e7e4      	b.n	800ecce <__hi0bits+0xa>

0800ed04 <__lo0bits>:
 800ed04:	6803      	ldr	r3, [r0, #0]
 800ed06:	f013 0207 	ands.w	r2, r3, #7
 800ed0a:	4601      	mov	r1, r0
 800ed0c:	d00b      	beq.n	800ed26 <__lo0bits+0x22>
 800ed0e:	07da      	lsls	r2, r3, #31
 800ed10:	d424      	bmi.n	800ed5c <__lo0bits+0x58>
 800ed12:	0798      	lsls	r0, r3, #30
 800ed14:	bf49      	itett	mi
 800ed16:	085b      	lsrmi	r3, r3, #1
 800ed18:	089b      	lsrpl	r3, r3, #2
 800ed1a:	2001      	movmi	r0, #1
 800ed1c:	600b      	strmi	r3, [r1, #0]
 800ed1e:	bf5c      	itt	pl
 800ed20:	600b      	strpl	r3, [r1, #0]
 800ed22:	2002      	movpl	r0, #2
 800ed24:	4770      	bx	lr
 800ed26:	b298      	uxth	r0, r3
 800ed28:	b9b0      	cbnz	r0, 800ed58 <__lo0bits+0x54>
 800ed2a:	0c1b      	lsrs	r3, r3, #16
 800ed2c:	2010      	movs	r0, #16
 800ed2e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ed32:	bf04      	itt	eq
 800ed34:	0a1b      	lsreq	r3, r3, #8
 800ed36:	3008      	addeq	r0, #8
 800ed38:	071a      	lsls	r2, r3, #28
 800ed3a:	bf04      	itt	eq
 800ed3c:	091b      	lsreq	r3, r3, #4
 800ed3e:	3004      	addeq	r0, #4
 800ed40:	079a      	lsls	r2, r3, #30
 800ed42:	bf04      	itt	eq
 800ed44:	089b      	lsreq	r3, r3, #2
 800ed46:	3002      	addeq	r0, #2
 800ed48:	07da      	lsls	r2, r3, #31
 800ed4a:	d403      	bmi.n	800ed54 <__lo0bits+0x50>
 800ed4c:	085b      	lsrs	r3, r3, #1
 800ed4e:	f100 0001 	add.w	r0, r0, #1
 800ed52:	d005      	beq.n	800ed60 <__lo0bits+0x5c>
 800ed54:	600b      	str	r3, [r1, #0]
 800ed56:	4770      	bx	lr
 800ed58:	4610      	mov	r0, r2
 800ed5a:	e7e8      	b.n	800ed2e <__lo0bits+0x2a>
 800ed5c:	2000      	movs	r0, #0
 800ed5e:	4770      	bx	lr
 800ed60:	2020      	movs	r0, #32
 800ed62:	4770      	bx	lr

0800ed64 <__i2b>:
 800ed64:	b510      	push	{r4, lr}
 800ed66:	460c      	mov	r4, r1
 800ed68:	2101      	movs	r1, #1
 800ed6a:	f7ff feff 	bl	800eb6c <_Balloc>
 800ed6e:	4602      	mov	r2, r0
 800ed70:	b928      	cbnz	r0, 800ed7e <__i2b+0x1a>
 800ed72:	4b05      	ldr	r3, [pc, #20]	; (800ed88 <__i2b+0x24>)
 800ed74:	4805      	ldr	r0, [pc, #20]	; (800ed8c <__i2b+0x28>)
 800ed76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ed7a:	f7fe fe3d 	bl	800d9f8 <__assert_func>
 800ed7e:	2301      	movs	r3, #1
 800ed80:	6144      	str	r4, [r0, #20]
 800ed82:	6103      	str	r3, [r0, #16]
 800ed84:	bd10      	pop	{r4, pc}
 800ed86:	bf00      	nop
 800ed88:	0801184b 	.word	0x0801184b
 800ed8c:	08011866 	.word	0x08011866

0800ed90 <__multiply>:
 800ed90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed94:	4614      	mov	r4, r2
 800ed96:	690a      	ldr	r2, [r1, #16]
 800ed98:	6923      	ldr	r3, [r4, #16]
 800ed9a:	429a      	cmp	r2, r3
 800ed9c:	bfb8      	it	lt
 800ed9e:	460b      	movlt	r3, r1
 800eda0:	460d      	mov	r5, r1
 800eda2:	bfbc      	itt	lt
 800eda4:	4625      	movlt	r5, r4
 800eda6:	461c      	movlt	r4, r3
 800eda8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800edac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800edb0:	68ab      	ldr	r3, [r5, #8]
 800edb2:	6869      	ldr	r1, [r5, #4]
 800edb4:	eb0a 0709 	add.w	r7, sl, r9
 800edb8:	42bb      	cmp	r3, r7
 800edba:	b085      	sub	sp, #20
 800edbc:	bfb8      	it	lt
 800edbe:	3101      	addlt	r1, #1
 800edc0:	f7ff fed4 	bl	800eb6c <_Balloc>
 800edc4:	b930      	cbnz	r0, 800edd4 <__multiply+0x44>
 800edc6:	4602      	mov	r2, r0
 800edc8:	4b42      	ldr	r3, [pc, #264]	; (800eed4 <__multiply+0x144>)
 800edca:	4843      	ldr	r0, [pc, #268]	; (800eed8 <__multiply+0x148>)
 800edcc:	f240 115d 	movw	r1, #349	; 0x15d
 800edd0:	f7fe fe12 	bl	800d9f8 <__assert_func>
 800edd4:	f100 0614 	add.w	r6, r0, #20
 800edd8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800eddc:	4633      	mov	r3, r6
 800edde:	2200      	movs	r2, #0
 800ede0:	4543      	cmp	r3, r8
 800ede2:	d31e      	bcc.n	800ee22 <__multiply+0x92>
 800ede4:	f105 0c14 	add.w	ip, r5, #20
 800ede8:	f104 0314 	add.w	r3, r4, #20
 800edec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800edf0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800edf4:	9202      	str	r2, [sp, #8]
 800edf6:	ebac 0205 	sub.w	r2, ip, r5
 800edfa:	3a15      	subs	r2, #21
 800edfc:	f022 0203 	bic.w	r2, r2, #3
 800ee00:	3204      	adds	r2, #4
 800ee02:	f105 0115 	add.w	r1, r5, #21
 800ee06:	458c      	cmp	ip, r1
 800ee08:	bf38      	it	cc
 800ee0a:	2204      	movcc	r2, #4
 800ee0c:	9201      	str	r2, [sp, #4]
 800ee0e:	9a02      	ldr	r2, [sp, #8]
 800ee10:	9303      	str	r3, [sp, #12]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d808      	bhi.n	800ee28 <__multiply+0x98>
 800ee16:	2f00      	cmp	r7, #0
 800ee18:	dc55      	bgt.n	800eec6 <__multiply+0x136>
 800ee1a:	6107      	str	r7, [r0, #16]
 800ee1c:	b005      	add	sp, #20
 800ee1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee22:	f843 2b04 	str.w	r2, [r3], #4
 800ee26:	e7db      	b.n	800ede0 <__multiply+0x50>
 800ee28:	f8b3 a000 	ldrh.w	sl, [r3]
 800ee2c:	f1ba 0f00 	cmp.w	sl, #0
 800ee30:	d020      	beq.n	800ee74 <__multiply+0xe4>
 800ee32:	f105 0e14 	add.w	lr, r5, #20
 800ee36:	46b1      	mov	r9, r6
 800ee38:	2200      	movs	r2, #0
 800ee3a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ee3e:	f8d9 b000 	ldr.w	fp, [r9]
 800ee42:	b2a1      	uxth	r1, r4
 800ee44:	fa1f fb8b 	uxth.w	fp, fp
 800ee48:	fb0a b101 	mla	r1, sl, r1, fp
 800ee4c:	4411      	add	r1, r2
 800ee4e:	f8d9 2000 	ldr.w	r2, [r9]
 800ee52:	0c24      	lsrs	r4, r4, #16
 800ee54:	0c12      	lsrs	r2, r2, #16
 800ee56:	fb0a 2404 	mla	r4, sl, r4, r2
 800ee5a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ee5e:	b289      	uxth	r1, r1
 800ee60:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ee64:	45f4      	cmp	ip, lr
 800ee66:	f849 1b04 	str.w	r1, [r9], #4
 800ee6a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ee6e:	d8e4      	bhi.n	800ee3a <__multiply+0xaa>
 800ee70:	9901      	ldr	r1, [sp, #4]
 800ee72:	5072      	str	r2, [r6, r1]
 800ee74:	9a03      	ldr	r2, [sp, #12]
 800ee76:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ee7a:	3304      	adds	r3, #4
 800ee7c:	f1b9 0f00 	cmp.w	r9, #0
 800ee80:	d01f      	beq.n	800eec2 <__multiply+0x132>
 800ee82:	6834      	ldr	r4, [r6, #0]
 800ee84:	f105 0114 	add.w	r1, r5, #20
 800ee88:	46b6      	mov	lr, r6
 800ee8a:	f04f 0a00 	mov.w	sl, #0
 800ee8e:	880a      	ldrh	r2, [r1, #0]
 800ee90:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ee94:	fb09 b202 	mla	r2, r9, r2, fp
 800ee98:	4492      	add	sl, r2
 800ee9a:	b2a4      	uxth	r4, r4
 800ee9c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800eea0:	f84e 4b04 	str.w	r4, [lr], #4
 800eea4:	f851 4b04 	ldr.w	r4, [r1], #4
 800eea8:	f8be 2000 	ldrh.w	r2, [lr]
 800eeac:	0c24      	lsrs	r4, r4, #16
 800eeae:	fb09 2404 	mla	r4, r9, r4, r2
 800eeb2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800eeb6:	458c      	cmp	ip, r1
 800eeb8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800eebc:	d8e7      	bhi.n	800ee8e <__multiply+0xfe>
 800eebe:	9a01      	ldr	r2, [sp, #4]
 800eec0:	50b4      	str	r4, [r6, r2]
 800eec2:	3604      	adds	r6, #4
 800eec4:	e7a3      	b.n	800ee0e <__multiply+0x7e>
 800eec6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d1a5      	bne.n	800ee1a <__multiply+0x8a>
 800eece:	3f01      	subs	r7, #1
 800eed0:	e7a1      	b.n	800ee16 <__multiply+0x86>
 800eed2:	bf00      	nop
 800eed4:	0801184b 	.word	0x0801184b
 800eed8:	08011866 	.word	0x08011866

0800eedc <__pow5mult>:
 800eedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eee0:	4615      	mov	r5, r2
 800eee2:	f012 0203 	ands.w	r2, r2, #3
 800eee6:	4606      	mov	r6, r0
 800eee8:	460f      	mov	r7, r1
 800eeea:	d007      	beq.n	800eefc <__pow5mult+0x20>
 800eeec:	4c25      	ldr	r4, [pc, #148]	; (800ef84 <__pow5mult+0xa8>)
 800eeee:	3a01      	subs	r2, #1
 800eef0:	2300      	movs	r3, #0
 800eef2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eef6:	f7ff fe9b 	bl	800ec30 <__multadd>
 800eefa:	4607      	mov	r7, r0
 800eefc:	10ad      	asrs	r5, r5, #2
 800eefe:	d03d      	beq.n	800ef7c <__pow5mult+0xa0>
 800ef00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ef02:	b97c      	cbnz	r4, 800ef24 <__pow5mult+0x48>
 800ef04:	2010      	movs	r0, #16
 800ef06:	f7fd f911 	bl	800c12c <malloc>
 800ef0a:	4602      	mov	r2, r0
 800ef0c:	6270      	str	r0, [r6, #36]	; 0x24
 800ef0e:	b928      	cbnz	r0, 800ef1c <__pow5mult+0x40>
 800ef10:	4b1d      	ldr	r3, [pc, #116]	; (800ef88 <__pow5mult+0xac>)
 800ef12:	481e      	ldr	r0, [pc, #120]	; (800ef8c <__pow5mult+0xb0>)
 800ef14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ef18:	f7fe fd6e 	bl	800d9f8 <__assert_func>
 800ef1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ef20:	6004      	str	r4, [r0, #0]
 800ef22:	60c4      	str	r4, [r0, #12]
 800ef24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ef28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ef2c:	b94c      	cbnz	r4, 800ef42 <__pow5mult+0x66>
 800ef2e:	f240 2171 	movw	r1, #625	; 0x271
 800ef32:	4630      	mov	r0, r6
 800ef34:	f7ff ff16 	bl	800ed64 <__i2b>
 800ef38:	2300      	movs	r3, #0
 800ef3a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ef3e:	4604      	mov	r4, r0
 800ef40:	6003      	str	r3, [r0, #0]
 800ef42:	f04f 0900 	mov.w	r9, #0
 800ef46:	07eb      	lsls	r3, r5, #31
 800ef48:	d50a      	bpl.n	800ef60 <__pow5mult+0x84>
 800ef4a:	4639      	mov	r1, r7
 800ef4c:	4622      	mov	r2, r4
 800ef4e:	4630      	mov	r0, r6
 800ef50:	f7ff ff1e 	bl	800ed90 <__multiply>
 800ef54:	4639      	mov	r1, r7
 800ef56:	4680      	mov	r8, r0
 800ef58:	4630      	mov	r0, r6
 800ef5a:	f7ff fe47 	bl	800ebec <_Bfree>
 800ef5e:	4647      	mov	r7, r8
 800ef60:	106d      	asrs	r5, r5, #1
 800ef62:	d00b      	beq.n	800ef7c <__pow5mult+0xa0>
 800ef64:	6820      	ldr	r0, [r4, #0]
 800ef66:	b938      	cbnz	r0, 800ef78 <__pow5mult+0x9c>
 800ef68:	4622      	mov	r2, r4
 800ef6a:	4621      	mov	r1, r4
 800ef6c:	4630      	mov	r0, r6
 800ef6e:	f7ff ff0f 	bl	800ed90 <__multiply>
 800ef72:	6020      	str	r0, [r4, #0]
 800ef74:	f8c0 9000 	str.w	r9, [r0]
 800ef78:	4604      	mov	r4, r0
 800ef7a:	e7e4      	b.n	800ef46 <__pow5mult+0x6a>
 800ef7c:	4638      	mov	r0, r7
 800ef7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef82:	bf00      	nop
 800ef84:	080119b8 	.word	0x080119b8
 800ef88:	080114fc 	.word	0x080114fc
 800ef8c:	08011866 	.word	0x08011866

0800ef90 <__lshift>:
 800ef90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef94:	460c      	mov	r4, r1
 800ef96:	6849      	ldr	r1, [r1, #4]
 800ef98:	6923      	ldr	r3, [r4, #16]
 800ef9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ef9e:	68a3      	ldr	r3, [r4, #8]
 800efa0:	4607      	mov	r7, r0
 800efa2:	4691      	mov	r9, r2
 800efa4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800efa8:	f108 0601 	add.w	r6, r8, #1
 800efac:	42b3      	cmp	r3, r6
 800efae:	db0b      	blt.n	800efc8 <__lshift+0x38>
 800efb0:	4638      	mov	r0, r7
 800efb2:	f7ff fddb 	bl	800eb6c <_Balloc>
 800efb6:	4605      	mov	r5, r0
 800efb8:	b948      	cbnz	r0, 800efce <__lshift+0x3e>
 800efba:	4602      	mov	r2, r0
 800efbc:	4b28      	ldr	r3, [pc, #160]	; (800f060 <__lshift+0xd0>)
 800efbe:	4829      	ldr	r0, [pc, #164]	; (800f064 <__lshift+0xd4>)
 800efc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800efc4:	f7fe fd18 	bl	800d9f8 <__assert_func>
 800efc8:	3101      	adds	r1, #1
 800efca:	005b      	lsls	r3, r3, #1
 800efcc:	e7ee      	b.n	800efac <__lshift+0x1c>
 800efce:	2300      	movs	r3, #0
 800efd0:	f100 0114 	add.w	r1, r0, #20
 800efd4:	f100 0210 	add.w	r2, r0, #16
 800efd8:	4618      	mov	r0, r3
 800efda:	4553      	cmp	r3, sl
 800efdc:	db33      	blt.n	800f046 <__lshift+0xb6>
 800efde:	6920      	ldr	r0, [r4, #16]
 800efe0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800efe4:	f104 0314 	add.w	r3, r4, #20
 800efe8:	f019 091f 	ands.w	r9, r9, #31
 800efec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eff0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eff4:	d02b      	beq.n	800f04e <__lshift+0xbe>
 800eff6:	f1c9 0e20 	rsb	lr, r9, #32
 800effa:	468a      	mov	sl, r1
 800effc:	2200      	movs	r2, #0
 800effe:	6818      	ldr	r0, [r3, #0]
 800f000:	fa00 f009 	lsl.w	r0, r0, r9
 800f004:	4302      	orrs	r2, r0
 800f006:	f84a 2b04 	str.w	r2, [sl], #4
 800f00a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f00e:	459c      	cmp	ip, r3
 800f010:	fa22 f20e 	lsr.w	r2, r2, lr
 800f014:	d8f3      	bhi.n	800effe <__lshift+0x6e>
 800f016:	ebac 0304 	sub.w	r3, ip, r4
 800f01a:	3b15      	subs	r3, #21
 800f01c:	f023 0303 	bic.w	r3, r3, #3
 800f020:	3304      	adds	r3, #4
 800f022:	f104 0015 	add.w	r0, r4, #21
 800f026:	4584      	cmp	ip, r0
 800f028:	bf38      	it	cc
 800f02a:	2304      	movcc	r3, #4
 800f02c:	50ca      	str	r2, [r1, r3]
 800f02e:	b10a      	cbz	r2, 800f034 <__lshift+0xa4>
 800f030:	f108 0602 	add.w	r6, r8, #2
 800f034:	3e01      	subs	r6, #1
 800f036:	4638      	mov	r0, r7
 800f038:	612e      	str	r6, [r5, #16]
 800f03a:	4621      	mov	r1, r4
 800f03c:	f7ff fdd6 	bl	800ebec <_Bfree>
 800f040:	4628      	mov	r0, r5
 800f042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f046:	f842 0f04 	str.w	r0, [r2, #4]!
 800f04a:	3301      	adds	r3, #1
 800f04c:	e7c5      	b.n	800efda <__lshift+0x4a>
 800f04e:	3904      	subs	r1, #4
 800f050:	f853 2b04 	ldr.w	r2, [r3], #4
 800f054:	f841 2f04 	str.w	r2, [r1, #4]!
 800f058:	459c      	cmp	ip, r3
 800f05a:	d8f9      	bhi.n	800f050 <__lshift+0xc0>
 800f05c:	e7ea      	b.n	800f034 <__lshift+0xa4>
 800f05e:	bf00      	nop
 800f060:	0801184b 	.word	0x0801184b
 800f064:	08011866 	.word	0x08011866

0800f068 <__mcmp>:
 800f068:	b530      	push	{r4, r5, lr}
 800f06a:	6902      	ldr	r2, [r0, #16]
 800f06c:	690c      	ldr	r4, [r1, #16]
 800f06e:	1b12      	subs	r2, r2, r4
 800f070:	d10e      	bne.n	800f090 <__mcmp+0x28>
 800f072:	f100 0314 	add.w	r3, r0, #20
 800f076:	3114      	adds	r1, #20
 800f078:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f07c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f080:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f084:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f088:	42a5      	cmp	r5, r4
 800f08a:	d003      	beq.n	800f094 <__mcmp+0x2c>
 800f08c:	d305      	bcc.n	800f09a <__mcmp+0x32>
 800f08e:	2201      	movs	r2, #1
 800f090:	4610      	mov	r0, r2
 800f092:	bd30      	pop	{r4, r5, pc}
 800f094:	4283      	cmp	r3, r0
 800f096:	d3f3      	bcc.n	800f080 <__mcmp+0x18>
 800f098:	e7fa      	b.n	800f090 <__mcmp+0x28>
 800f09a:	f04f 32ff 	mov.w	r2, #4294967295
 800f09e:	e7f7      	b.n	800f090 <__mcmp+0x28>

0800f0a0 <__mdiff>:
 800f0a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0a4:	460c      	mov	r4, r1
 800f0a6:	4606      	mov	r6, r0
 800f0a8:	4611      	mov	r1, r2
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	4617      	mov	r7, r2
 800f0ae:	f7ff ffdb 	bl	800f068 <__mcmp>
 800f0b2:	1e05      	subs	r5, r0, #0
 800f0b4:	d110      	bne.n	800f0d8 <__mdiff+0x38>
 800f0b6:	4629      	mov	r1, r5
 800f0b8:	4630      	mov	r0, r6
 800f0ba:	f7ff fd57 	bl	800eb6c <_Balloc>
 800f0be:	b930      	cbnz	r0, 800f0ce <__mdiff+0x2e>
 800f0c0:	4b39      	ldr	r3, [pc, #228]	; (800f1a8 <__mdiff+0x108>)
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	f240 2132 	movw	r1, #562	; 0x232
 800f0c8:	4838      	ldr	r0, [pc, #224]	; (800f1ac <__mdiff+0x10c>)
 800f0ca:	f7fe fc95 	bl	800d9f8 <__assert_func>
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f0d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0d8:	bfa4      	itt	ge
 800f0da:	463b      	movge	r3, r7
 800f0dc:	4627      	movge	r7, r4
 800f0de:	4630      	mov	r0, r6
 800f0e0:	6879      	ldr	r1, [r7, #4]
 800f0e2:	bfa6      	itte	ge
 800f0e4:	461c      	movge	r4, r3
 800f0e6:	2500      	movge	r5, #0
 800f0e8:	2501      	movlt	r5, #1
 800f0ea:	f7ff fd3f 	bl	800eb6c <_Balloc>
 800f0ee:	b920      	cbnz	r0, 800f0fa <__mdiff+0x5a>
 800f0f0:	4b2d      	ldr	r3, [pc, #180]	; (800f1a8 <__mdiff+0x108>)
 800f0f2:	4602      	mov	r2, r0
 800f0f4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f0f8:	e7e6      	b.n	800f0c8 <__mdiff+0x28>
 800f0fa:	693e      	ldr	r6, [r7, #16]
 800f0fc:	60c5      	str	r5, [r0, #12]
 800f0fe:	6925      	ldr	r5, [r4, #16]
 800f100:	f107 0114 	add.w	r1, r7, #20
 800f104:	f104 0914 	add.w	r9, r4, #20
 800f108:	f100 0e14 	add.w	lr, r0, #20
 800f10c:	f107 0210 	add.w	r2, r7, #16
 800f110:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f114:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f118:	46f2      	mov	sl, lr
 800f11a:	2700      	movs	r7, #0
 800f11c:	f859 3b04 	ldr.w	r3, [r9], #4
 800f120:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f124:	fa1f f883 	uxth.w	r8, r3
 800f128:	fa17 f78b 	uxtah	r7, r7, fp
 800f12c:	0c1b      	lsrs	r3, r3, #16
 800f12e:	eba7 0808 	sub.w	r8, r7, r8
 800f132:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f136:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f13a:	fa1f f888 	uxth.w	r8, r8
 800f13e:	141f      	asrs	r7, r3, #16
 800f140:	454d      	cmp	r5, r9
 800f142:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f146:	f84a 3b04 	str.w	r3, [sl], #4
 800f14a:	d8e7      	bhi.n	800f11c <__mdiff+0x7c>
 800f14c:	1b2b      	subs	r3, r5, r4
 800f14e:	3b15      	subs	r3, #21
 800f150:	f023 0303 	bic.w	r3, r3, #3
 800f154:	3304      	adds	r3, #4
 800f156:	3415      	adds	r4, #21
 800f158:	42a5      	cmp	r5, r4
 800f15a:	bf38      	it	cc
 800f15c:	2304      	movcc	r3, #4
 800f15e:	4419      	add	r1, r3
 800f160:	4473      	add	r3, lr
 800f162:	469e      	mov	lr, r3
 800f164:	460d      	mov	r5, r1
 800f166:	4565      	cmp	r5, ip
 800f168:	d30e      	bcc.n	800f188 <__mdiff+0xe8>
 800f16a:	f10c 0203 	add.w	r2, ip, #3
 800f16e:	1a52      	subs	r2, r2, r1
 800f170:	f022 0203 	bic.w	r2, r2, #3
 800f174:	3903      	subs	r1, #3
 800f176:	458c      	cmp	ip, r1
 800f178:	bf38      	it	cc
 800f17a:	2200      	movcc	r2, #0
 800f17c:	441a      	add	r2, r3
 800f17e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f182:	b17b      	cbz	r3, 800f1a4 <__mdiff+0x104>
 800f184:	6106      	str	r6, [r0, #16]
 800f186:	e7a5      	b.n	800f0d4 <__mdiff+0x34>
 800f188:	f855 8b04 	ldr.w	r8, [r5], #4
 800f18c:	fa17 f488 	uxtah	r4, r7, r8
 800f190:	1422      	asrs	r2, r4, #16
 800f192:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f196:	b2a4      	uxth	r4, r4
 800f198:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f19c:	f84e 4b04 	str.w	r4, [lr], #4
 800f1a0:	1417      	asrs	r7, r2, #16
 800f1a2:	e7e0      	b.n	800f166 <__mdiff+0xc6>
 800f1a4:	3e01      	subs	r6, #1
 800f1a6:	e7ea      	b.n	800f17e <__mdiff+0xde>
 800f1a8:	0801184b 	.word	0x0801184b
 800f1ac:	08011866 	.word	0x08011866

0800f1b0 <__d2b>:
 800f1b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f1b4:	4689      	mov	r9, r1
 800f1b6:	2101      	movs	r1, #1
 800f1b8:	ec57 6b10 	vmov	r6, r7, d0
 800f1bc:	4690      	mov	r8, r2
 800f1be:	f7ff fcd5 	bl	800eb6c <_Balloc>
 800f1c2:	4604      	mov	r4, r0
 800f1c4:	b930      	cbnz	r0, 800f1d4 <__d2b+0x24>
 800f1c6:	4602      	mov	r2, r0
 800f1c8:	4b25      	ldr	r3, [pc, #148]	; (800f260 <__d2b+0xb0>)
 800f1ca:	4826      	ldr	r0, [pc, #152]	; (800f264 <__d2b+0xb4>)
 800f1cc:	f240 310a 	movw	r1, #778	; 0x30a
 800f1d0:	f7fe fc12 	bl	800d9f8 <__assert_func>
 800f1d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f1d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f1dc:	bb35      	cbnz	r5, 800f22c <__d2b+0x7c>
 800f1de:	2e00      	cmp	r6, #0
 800f1e0:	9301      	str	r3, [sp, #4]
 800f1e2:	d028      	beq.n	800f236 <__d2b+0x86>
 800f1e4:	4668      	mov	r0, sp
 800f1e6:	9600      	str	r6, [sp, #0]
 800f1e8:	f7ff fd8c 	bl	800ed04 <__lo0bits>
 800f1ec:	9900      	ldr	r1, [sp, #0]
 800f1ee:	b300      	cbz	r0, 800f232 <__d2b+0x82>
 800f1f0:	9a01      	ldr	r2, [sp, #4]
 800f1f2:	f1c0 0320 	rsb	r3, r0, #32
 800f1f6:	fa02 f303 	lsl.w	r3, r2, r3
 800f1fa:	430b      	orrs	r3, r1
 800f1fc:	40c2      	lsrs	r2, r0
 800f1fe:	6163      	str	r3, [r4, #20]
 800f200:	9201      	str	r2, [sp, #4]
 800f202:	9b01      	ldr	r3, [sp, #4]
 800f204:	61a3      	str	r3, [r4, #24]
 800f206:	2b00      	cmp	r3, #0
 800f208:	bf14      	ite	ne
 800f20a:	2202      	movne	r2, #2
 800f20c:	2201      	moveq	r2, #1
 800f20e:	6122      	str	r2, [r4, #16]
 800f210:	b1d5      	cbz	r5, 800f248 <__d2b+0x98>
 800f212:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f216:	4405      	add	r5, r0
 800f218:	f8c9 5000 	str.w	r5, [r9]
 800f21c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f220:	f8c8 0000 	str.w	r0, [r8]
 800f224:	4620      	mov	r0, r4
 800f226:	b003      	add	sp, #12
 800f228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f22c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f230:	e7d5      	b.n	800f1de <__d2b+0x2e>
 800f232:	6161      	str	r1, [r4, #20]
 800f234:	e7e5      	b.n	800f202 <__d2b+0x52>
 800f236:	a801      	add	r0, sp, #4
 800f238:	f7ff fd64 	bl	800ed04 <__lo0bits>
 800f23c:	9b01      	ldr	r3, [sp, #4]
 800f23e:	6163      	str	r3, [r4, #20]
 800f240:	2201      	movs	r2, #1
 800f242:	6122      	str	r2, [r4, #16]
 800f244:	3020      	adds	r0, #32
 800f246:	e7e3      	b.n	800f210 <__d2b+0x60>
 800f248:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f24c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f250:	f8c9 0000 	str.w	r0, [r9]
 800f254:	6918      	ldr	r0, [r3, #16]
 800f256:	f7ff fd35 	bl	800ecc4 <__hi0bits>
 800f25a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f25e:	e7df      	b.n	800f220 <__d2b+0x70>
 800f260:	0801184b 	.word	0x0801184b
 800f264:	08011866 	.word	0x08011866

0800f268 <_calloc_r>:
 800f268:	b513      	push	{r0, r1, r4, lr}
 800f26a:	434a      	muls	r2, r1
 800f26c:	4611      	mov	r1, r2
 800f26e:	9201      	str	r2, [sp, #4]
 800f270:	f7fd fa6a 	bl	800c748 <_malloc_r>
 800f274:	4604      	mov	r4, r0
 800f276:	b118      	cbz	r0, 800f280 <_calloc_r+0x18>
 800f278:	9a01      	ldr	r2, [sp, #4]
 800f27a:	2100      	movs	r1, #0
 800f27c:	f7fc ff8e 	bl	800c19c <memset>
 800f280:	4620      	mov	r0, r4
 800f282:	b002      	add	sp, #8
 800f284:	bd10      	pop	{r4, pc}

0800f286 <_realloc_r>:
 800f286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f288:	4607      	mov	r7, r0
 800f28a:	4614      	mov	r4, r2
 800f28c:	460e      	mov	r6, r1
 800f28e:	b921      	cbnz	r1, 800f29a <_realloc_r+0x14>
 800f290:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f294:	4611      	mov	r1, r2
 800f296:	f7fd ba57 	b.w	800c748 <_malloc_r>
 800f29a:	b922      	cbnz	r2, 800f2a6 <_realloc_r+0x20>
 800f29c:	f7fd fa04 	bl	800c6a8 <_free_r>
 800f2a0:	4625      	mov	r5, r4
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2a6:	f000 fc45 	bl	800fb34 <_malloc_usable_size_r>
 800f2aa:	42a0      	cmp	r0, r4
 800f2ac:	d20f      	bcs.n	800f2ce <_realloc_r+0x48>
 800f2ae:	4621      	mov	r1, r4
 800f2b0:	4638      	mov	r0, r7
 800f2b2:	f7fd fa49 	bl	800c748 <_malloc_r>
 800f2b6:	4605      	mov	r5, r0
 800f2b8:	2800      	cmp	r0, #0
 800f2ba:	d0f2      	beq.n	800f2a2 <_realloc_r+0x1c>
 800f2bc:	4631      	mov	r1, r6
 800f2be:	4622      	mov	r2, r4
 800f2c0:	f7fc ff44 	bl	800c14c <memcpy>
 800f2c4:	4631      	mov	r1, r6
 800f2c6:	4638      	mov	r0, r7
 800f2c8:	f7fd f9ee 	bl	800c6a8 <_free_r>
 800f2cc:	e7e9      	b.n	800f2a2 <_realloc_r+0x1c>
 800f2ce:	4635      	mov	r5, r6
 800f2d0:	e7e7      	b.n	800f2a2 <_realloc_r+0x1c>

0800f2d2 <__ssputs_r>:
 800f2d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2d6:	688e      	ldr	r6, [r1, #8]
 800f2d8:	429e      	cmp	r6, r3
 800f2da:	4682      	mov	sl, r0
 800f2dc:	460c      	mov	r4, r1
 800f2de:	4690      	mov	r8, r2
 800f2e0:	461f      	mov	r7, r3
 800f2e2:	d838      	bhi.n	800f356 <__ssputs_r+0x84>
 800f2e4:	898a      	ldrh	r2, [r1, #12]
 800f2e6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f2ea:	d032      	beq.n	800f352 <__ssputs_r+0x80>
 800f2ec:	6825      	ldr	r5, [r4, #0]
 800f2ee:	6909      	ldr	r1, [r1, #16]
 800f2f0:	eba5 0901 	sub.w	r9, r5, r1
 800f2f4:	6965      	ldr	r5, [r4, #20]
 800f2f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f2fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f2fe:	3301      	adds	r3, #1
 800f300:	444b      	add	r3, r9
 800f302:	106d      	asrs	r5, r5, #1
 800f304:	429d      	cmp	r5, r3
 800f306:	bf38      	it	cc
 800f308:	461d      	movcc	r5, r3
 800f30a:	0553      	lsls	r3, r2, #21
 800f30c:	d531      	bpl.n	800f372 <__ssputs_r+0xa0>
 800f30e:	4629      	mov	r1, r5
 800f310:	f7fd fa1a 	bl	800c748 <_malloc_r>
 800f314:	4606      	mov	r6, r0
 800f316:	b950      	cbnz	r0, 800f32e <__ssputs_r+0x5c>
 800f318:	230c      	movs	r3, #12
 800f31a:	f8ca 3000 	str.w	r3, [sl]
 800f31e:	89a3      	ldrh	r3, [r4, #12]
 800f320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f324:	81a3      	strh	r3, [r4, #12]
 800f326:	f04f 30ff 	mov.w	r0, #4294967295
 800f32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f32e:	6921      	ldr	r1, [r4, #16]
 800f330:	464a      	mov	r2, r9
 800f332:	f7fc ff0b 	bl	800c14c <memcpy>
 800f336:	89a3      	ldrh	r3, [r4, #12]
 800f338:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f33c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f340:	81a3      	strh	r3, [r4, #12]
 800f342:	6126      	str	r6, [r4, #16]
 800f344:	6165      	str	r5, [r4, #20]
 800f346:	444e      	add	r6, r9
 800f348:	eba5 0509 	sub.w	r5, r5, r9
 800f34c:	6026      	str	r6, [r4, #0]
 800f34e:	60a5      	str	r5, [r4, #8]
 800f350:	463e      	mov	r6, r7
 800f352:	42be      	cmp	r6, r7
 800f354:	d900      	bls.n	800f358 <__ssputs_r+0x86>
 800f356:	463e      	mov	r6, r7
 800f358:	4632      	mov	r2, r6
 800f35a:	6820      	ldr	r0, [r4, #0]
 800f35c:	4641      	mov	r1, r8
 800f35e:	f7fc ff03 	bl	800c168 <memmove>
 800f362:	68a3      	ldr	r3, [r4, #8]
 800f364:	6822      	ldr	r2, [r4, #0]
 800f366:	1b9b      	subs	r3, r3, r6
 800f368:	4432      	add	r2, r6
 800f36a:	60a3      	str	r3, [r4, #8]
 800f36c:	6022      	str	r2, [r4, #0]
 800f36e:	2000      	movs	r0, #0
 800f370:	e7db      	b.n	800f32a <__ssputs_r+0x58>
 800f372:	462a      	mov	r2, r5
 800f374:	f7ff ff87 	bl	800f286 <_realloc_r>
 800f378:	4606      	mov	r6, r0
 800f37a:	2800      	cmp	r0, #0
 800f37c:	d1e1      	bne.n	800f342 <__ssputs_r+0x70>
 800f37e:	6921      	ldr	r1, [r4, #16]
 800f380:	4650      	mov	r0, sl
 800f382:	f7fd f991 	bl	800c6a8 <_free_r>
 800f386:	e7c7      	b.n	800f318 <__ssputs_r+0x46>

0800f388 <_svfiprintf_r>:
 800f388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f38c:	4698      	mov	r8, r3
 800f38e:	898b      	ldrh	r3, [r1, #12]
 800f390:	061b      	lsls	r3, r3, #24
 800f392:	b09d      	sub	sp, #116	; 0x74
 800f394:	4607      	mov	r7, r0
 800f396:	460d      	mov	r5, r1
 800f398:	4614      	mov	r4, r2
 800f39a:	d50e      	bpl.n	800f3ba <_svfiprintf_r+0x32>
 800f39c:	690b      	ldr	r3, [r1, #16]
 800f39e:	b963      	cbnz	r3, 800f3ba <_svfiprintf_r+0x32>
 800f3a0:	2140      	movs	r1, #64	; 0x40
 800f3a2:	f7fd f9d1 	bl	800c748 <_malloc_r>
 800f3a6:	6028      	str	r0, [r5, #0]
 800f3a8:	6128      	str	r0, [r5, #16]
 800f3aa:	b920      	cbnz	r0, 800f3b6 <_svfiprintf_r+0x2e>
 800f3ac:	230c      	movs	r3, #12
 800f3ae:	603b      	str	r3, [r7, #0]
 800f3b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f3b4:	e0d1      	b.n	800f55a <_svfiprintf_r+0x1d2>
 800f3b6:	2340      	movs	r3, #64	; 0x40
 800f3b8:	616b      	str	r3, [r5, #20]
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	9309      	str	r3, [sp, #36]	; 0x24
 800f3be:	2320      	movs	r3, #32
 800f3c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f3c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f3c8:	2330      	movs	r3, #48	; 0x30
 800f3ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f574 <_svfiprintf_r+0x1ec>
 800f3ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f3d2:	f04f 0901 	mov.w	r9, #1
 800f3d6:	4623      	mov	r3, r4
 800f3d8:	469a      	mov	sl, r3
 800f3da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f3de:	b10a      	cbz	r2, 800f3e4 <_svfiprintf_r+0x5c>
 800f3e0:	2a25      	cmp	r2, #37	; 0x25
 800f3e2:	d1f9      	bne.n	800f3d8 <_svfiprintf_r+0x50>
 800f3e4:	ebba 0b04 	subs.w	fp, sl, r4
 800f3e8:	d00b      	beq.n	800f402 <_svfiprintf_r+0x7a>
 800f3ea:	465b      	mov	r3, fp
 800f3ec:	4622      	mov	r2, r4
 800f3ee:	4629      	mov	r1, r5
 800f3f0:	4638      	mov	r0, r7
 800f3f2:	f7ff ff6e 	bl	800f2d2 <__ssputs_r>
 800f3f6:	3001      	adds	r0, #1
 800f3f8:	f000 80aa 	beq.w	800f550 <_svfiprintf_r+0x1c8>
 800f3fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f3fe:	445a      	add	r2, fp
 800f400:	9209      	str	r2, [sp, #36]	; 0x24
 800f402:	f89a 3000 	ldrb.w	r3, [sl]
 800f406:	2b00      	cmp	r3, #0
 800f408:	f000 80a2 	beq.w	800f550 <_svfiprintf_r+0x1c8>
 800f40c:	2300      	movs	r3, #0
 800f40e:	f04f 32ff 	mov.w	r2, #4294967295
 800f412:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f416:	f10a 0a01 	add.w	sl, sl, #1
 800f41a:	9304      	str	r3, [sp, #16]
 800f41c:	9307      	str	r3, [sp, #28]
 800f41e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f422:	931a      	str	r3, [sp, #104]	; 0x68
 800f424:	4654      	mov	r4, sl
 800f426:	2205      	movs	r2, #5
 800f428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f42c:	4851      	ldr	r0, [pc, #324]	; (800f574 <_svfiprintf_r+0x1ec>)
 800f42e:	f7f0 ff07 	bl	8000240 <memchr>
 800f432:	9a04      	ldr	r2, [sp, #16]
 800f434:	b9d8      	cbnz	r0, 800f46e <_svfiprintf_r+0xe6>
 800f436:	06d0      	lsls	r0, r2, #27
 800f438:	bf44      	itt	mi
 800f43a:	2320      	movmi	r3, #32
 800f43c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f440:	0711      	lsls	r1, r2, #28
 800f442:	bf44      	itt	mi
 800f444:	232b      	movmi	r3, #43	; 0x2b
 800f446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f44a:	f89a 3000 	ldrb.w	r3, [sl]
 800f44e:	2b2a      	cmp	r3, #42	; 0x2a
 800f450:	d015      	beq.n	800f47e <_svfiprintf_r+0xf6>
 800f452:	9a07      	ldr	r2, [sp, #28]
 800f454:	4654      	mov	r4, sl
 800f456:	2000      	movs	r0, #0
 800f458:	f04f 0c0a 	mov.w	ip, #10
 800f45c:	4621      	mov	r1, r4
 800f45e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f462:	3b30      	subs	r3, #48	; 0x30
 800f464:	2b09      	cmp	r3, #9
 800f466:	d94e      	bls.n	800f506 <_svfiprintf_r+0x17e>
 800f468:	b1b0      	cbz	r0, 800f498 <_svfiprintf_r+0x110>
 800f46a:	9207      	str	r2, [sp, #28]
 800f46c:	e014      	b.n	800f498 <_svfiprintf_r+0x110>
 800f46e:	eba0 0308 	sub.w	r3, r0, r8
 800f472:	fa09 f303 	lsl.w	r3, r9, r3
 800f476:	4313      	orrs	r3, r2
 800f478:	9304      	str	r3, [sp, #16]
 800f47a:	46a2      	mov	sl, r4
 800f47c:	e7d2      	b.n	800f424 <_svfiprintf_r+0x9c>
 800f47e:	9b03      	ldr	r3, [sp, #12]
 800f480:	1d19      	adds	r1, r3, #4
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	9103      	str	r1, [sp, #12]
 800f486:	2b00      	cmp	r3, #0
 800f488:	bfbb      	ittet	lt
 800f48a:	425b      	neglt	r3, r3
 800f48c:	f042 0202 	orrlt.w	r2, r2, #2
 800f490:	9307      	strge	r3, [sp, #28]
 800f492:	9307      	strlt	r3, [sp, #28]
 800f494:	bfb8      	it	lt
 800f496:	9204      	strlt	r2, [sp, #16]
 800f498:	7823      	ldrb	r3, [r4, #0]
 800f49a:	2b2e      	cmp	r3, #46	; 0x2e
 800f49c:	d10c      	bne.n	800f4b8 <_svfiprintf_r+0x130>
 800f49e:	7863      	ldrb	r3, [r4, #1]
 800f4a0:	2b2a      	cmp	r3, #42	; 0x2a
 800f4a2:	d135      	bne.n	800f510 <_svfiprintf_r+0x188>
 800f4a4:	9b03      	ldr	r3, [sp, #12]
 800f4a6:	1d1a      	adds	r2, r3, #4
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	9203      	str	r2, [sp, #12]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	bfb8      	it	lt
 800f4b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f4b4:	3402      	adds	r4, #2
 800f4b6:	9305      	str	r3, [sp, #20]
 800f4b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f584 <_svfiprintf_r+0x1fc>
 800f4bc:	7821      	ldrb	r1, [r4, #0]
 800f4be:	2203      	movs	r2, #3
 800f4c0:	4650      	mov	r0, sl
 800f4c2:	f7f0 febd 	bl	8000240 <memchr>
 800f4c6:	b140      	cbz	r0, 800f4da <_svfiprintf_r+0x152>
 800f4c8:	2340      	movs	r3, #64	; 0x40
 800f4ca:	eba0 000a 	sub.w	r0, r0, sl
 800f4ce:	fa03 f000 	lsl.w	r0, r3, r0
 800f4d2:	9b04      	ldr	r3, [sp, #16]
 800f4d4:	4303      	orrs	r3, r0
 800f4d6:	3401      	adds	r4, #1
 800f4d8:	9304      	str	r3, [sp, #16]
 800f4da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4de:	4826      	ldr	r0, [pc, #152]	; (800f578 <_svfiprintf_r+0x1f0>)
 800f4e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f4e4:	2206      	movs	r2, #6
 800f4e6:	f7f0 feab 	bl	8000240 <memchr>
 800f4ea:	2800      	cmp	r0, #0
 800f4ec:	d038      	beq.n	800f560 <_svfiprintf_r+0x1d8>
 800f4ee:	4b23      	ldr	r3, [pc, #140]	; (800f57c <_svfiprintf_r+0x1f4>)
 800f4f0:	bb1b      	cbnz	r3, 800f53a <_svfiprintf_r+0x1b2>
 800f4f2:	9b03      	ldr	r3, [sp, #12]
 800f4f4:	3307      	adds	r3, #7
 800f4f6:	f023 0307 	bic.w	r3, r3, #7
 800f4fa:	3308      	adds	r3, #8
 800f4fc:	9303      	str	r3, [sp, #12]
 800f4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f500:	4433      	add	r3, r6
 800f502:	9309      	str	r3, [sp, #36]	; 0x24
 800f504:	e767      	b.n	800f3d6 <_svfiprintf_r+0x4e>
 800f506:	fb0c 3202 	mla	r2, ip, r2, r3
 800f50a:	460c      	mov	r4, r1
 800f50c:	2001      	movs	r0, #1
 800f50e:	e7a5      	b.n	800f45c <_svfiprintf_r+0xd4>
 800f510:	2300      	movs	r3, #0
 800f512:	3401      	adds	r4, #1
 800f514:	9305      	str	r3, [sp, #20]
 800f516:	4619      	mov	r1, r3
 800f518:	f04f 0c0a 	mov.w	ip, #10
 800f51c:	4620      	mov	r0, r4
 800f51e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f522:	3a30      	subs	r2, #48	; 0x30
 800f524:	2a09      	cmp	r2, #9
 800f526:	d903      	bls.n	800f530 <_svfiprintf_r+0x1a8>
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d0c5      	beq.n	800f4b8 <_svfiprintf_r+0x130>
 800f52c:	9105      	str	r1, [sp, #20]
 800f52e:	e7c3      	b.n	800f4b8 <_svfiprintf_r+0x130>
 800f530:	fb0c 2101 	mla	r1, ip, r1, r2
 800f534:	4604      	mov	r4, r0
 800f536:	2301      	movs	r3, #1
 800f538:	e7f0      	b.n	800f51c <_svfiprintf_r+0x194>
 800f53a:	ab03      	add	r3, sp, #12
 800f53c:	9300      	str	r3, [sp, #0]
 800f53e:	462a      	mov	r2, r5
 800f540:	4b0f      	ldr	r3, [pc, #60]	; (800f580 <_svfiprintf_r+0x1f8>)
 800f542:	a904      	add	r1, sp, #16
 800f544:	4638      	mov	r0, r7
 800f546:	f7fd f9f9 	bl	800c93c <_printf_float>
 800f54a:	1c42      	adds	r2, r0, #1
 800f54c:	4606      	mov	r6, r0
 800f54e:	d1d6      	bne.n	800f4fe <_svfiprintf_r+0x176>
 800f550:	89ab      	ldrh	r3, [r5, #12]
 800f552:	065b      	lsls	r3, r3, #25
 800f554:	f53f af2c 	bmi.w	800f3b0 <_svfiprintf_r+0x28>
 800f558:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f55a:	b01d      	add	sp, #116	; 0x74
 800f55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f560:	ab03      	add	r3, sp, #12
 800f562:	9300      	str	r3, [sp, #0]
 800f564:	462a      	mov	r2, r5
 800f566:	4b06      	ldr	r3, [pc, #24]	; (800f580 <_svfiprintf_r+0x1f8>)
 800f568:	a904      	add	r1, sp, #16
 800f56a:	4638      	mov	r0, r7
 800f56c:	f7fd fc8a 	bl	800ce84 <_printf_i>
 800f570:	e7eb      	b.n	800f54a <_svfiprintf_r+0x1c2>
 800f572:	bf00      	nop
 800f574:	080119c4 	.word	0x080119c4
 800f578:	080119ce 	.word	0x080119ce
 800f57c:	0800c93d 	.word	0x0800c93d
 800f580:	0800f2d3 	.word	0x0800f2d3
 800f584:	080119ca 	.word	0x080119ca

0800f588 <__sfputc_r>:
 800f588:	6893      	ldr	r3, [r2, #8]
 800f58a:	3b01      	subs	r3, #1
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	b410      	push	{r4}
 800f590:	6093      	str	r3, [r2, #8]
 800f592:	da08      	bge.n	800f5a6 <__sfputc_r+0x1e>
 800f594:	6994      	ldr	r4, [r2, #24]
 800f596:	42a3      	cmp	r3, r4
 800f598:	db01      	blt.n	800f59e <__sfputc_r+0x16>
 800f59a:	290a      	cmp	r1, #10
 800f59c:	d103      	bne.n	800f5a6 <__sfputc_r+0x1e>
 800f59e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5a2:	f000 b989 	b.w	800f8b8 <__swbuf_r>
 800f5a6:	6813      	ldr	r3, [r2, #0]
 800f5a8:	1c58      	adds	r0, r3, #1
 800f5aa:	6010      	str	r0, [r2, #0]
 800f5ac:	7019      	strb	r1, [r3, #0]
 800f5ae:	4608      	mov	r0, r1
 800f5b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5b4:	4770      	bx	lr

0800f5b6 <__sfputs_r>:
 800f5b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5b8:	4606      	mov	r6, r0
 800f5ba:	460f      	mov	r7, r1
 800f5bc:	4614      	mov	r4, r2
 800f5be:	18d5      	adds	r5, r2, r3
 800f5c0:	42ac      	cmp	r4, r5
 800f5c2:	d101      	bne.n	800f5c8 <__sfputs_r+0x12>
 800f5c4:	2000      	movs	r0, #0
 800f5c6:	e007      	b.n	800f5d8 <__sfputs_r+0x22>
 800f5c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5cc:	463a      	mov	r2, r7
 800f5ce:	4630      	mov	r0, r6
 800f5d0:	f7ff ffda 	bl	800f588 <__sfputc_r>
 800f5d4:	1c43      	adds	r3, r0, #1
 800f5d6:	d1f3      	bne.n	800f5c0 <__sfputs_r+0xa>
 800f5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f5dc <_vfiprintf_r>:
 800f5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5e0:	460d      	mov	r5, r1
 800f5e2:	b09d      	sub	sp, #116	; 0x74
 800f5e4:	4614      	mov	r4, r2
 800f5e6:	4698      	mov	r8, r3
 800f5e8:	4606      	mov	r6, r0
 800f5ea:	b118      	cbz	r0, 800f5f4 <_vfiprintf_r+0x18>
 800f5ec:	6983      	ldr	r3, [r0, #24]
 800f5ee:	b90b      	cbnz	r3, 800f5f4 <_vfiprintf_r+0x18>
 800f5f0:	f7fc fbb8 	bl	800bd64 <__sinit>
 800f5f4:	4b89      	ldr	r3, [pc, #548]	; (800f81c <_vfiprintf_r+0x240>)
 800f5f6:	429d      	cmp	r5, r3
 800f5f8:	d11b      	bne.n	800f632 <_vfiprintf_r+0x56>
 800f5fa:	6875      	ldr	r5, [r6, #4]
 800f5fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5fe:	07d9      	lsls	r1, r3, #31
 800f600:	d405      	bmi.n	800f60e <_vfiprintf_r+0x32>
 800f602:	89ab      	ldrh	r3, [r5, #12]
 800f604:	059a      	lsls	r2, r3, #22
 800f606:	d402      	bmi.n	800f60e <_vfiprintf_r+0x32>
 800f608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f60a:	f7fc fd8b 	bl	800c124 <__retarget_lock_acquire_recursive>
 800f60e:	89ab      	ldrh	r3, [r5, #12]
 800f610:	071b      	lsls	r3, r3, #28
 800f612:	d501      	bpl.n	800f618 <_vfiprintf_r+0x3c>
 800f614:	692b      	ldr	r3, [r5, #16]
 800f616:	b9eb      	cbnz	r3, 800f654 <_vfiprintf_r+0x78>
 800f618:	4629      	mov	r1, r5
 800f61a:	4630      	mov	r0, r6
 800f61c:	f000 f9ac 	bl	800f978 <__swsetup_r>
 800f620:	b1c0      	cbz	r0, 800f654 <_vfiprintf_r+0x78>
 800f622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f624:	07dc      	lsls	r4, r3, #31
 800f626:	d50e      	bpl.n	800f646 <_vfiprintf_r+0x6a>
 800f628:	f04f 30ff 	mov.w	r0, #4294967295
 800f62c:	b01d      	add	sp, #116	; 0x74
 800f62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f632:	4b7b      	ldr	r3, [pc, #492]	; (800f820 <_vfiprintf_r+0x244>)
 800f634:	429d      	cmp	r5, r3
 800f636:	d101      	bne.n	800f63c <_vfiprintf_r+0x60>
 800f638:	68b5      	ldr	r5, [r6, #8]
 800f63a:	e7df      	b.n	800f5fc <_vfiprintf_r+0x20>
 800f63c:	4b79      	ldr	r3, [pc, #484]	; (800f824 <_vfiprintf_r+0x248>)
 800f63e:	429d      	cmp	r5, r3
 800f640:	bf08      	it	eq
 800f642:	68f5      	ldreq	r5, [r6, #12]
 800f644:	e7da      	b.n	800f5fc <_vfiprintf_r+0x20>
 800f646:	89ab      	ldrh	r3, [r5, #12]
 800f648:	0598      	lsls	r0, r3, #22
 800f64a:	d4ed      	bmi.n	800f628 <_vfiprintf_r+0x4c>
 800f64c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f64e:	f7fc fd6b 	bl	800c128 <__retarget_lock_release_recursive>
 800f652:	e7e9      	b.n	800f628 <_vfiprintf_r+0x4c>
 800f654:	2300      	movs	r3, #0
 800f656:	9309      	str	r3, [sp, #36]	; 0x24
 800f658:	2320      	movs	r3, #32
 800f65a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f65e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f662:	2330      	movs	r3, #48	; 0x30
 800f664:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f828 <_vfiprintf_r+0x24c>
 800f668:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f66c:	f04f 0901 	mov.w	r9, #1
 800f670:	4623      	mov	r3, r4
 800f672:	469a      	mov	sl, r3
 800f674:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f678:	b10a      	cbz	r2, 800f67e <_vfiprintf_r+0xa2>
 800f67a:	2a25      	cmp	r2, #37	; 0x25
 800f67c:	d1f9      	bne.n	800f672 <_vfiprintf_r+0x96>
 800f67e:	ebba 0b04 	subs.w	fp, sl, r4
 800f682:	d00b      	beq.n	800f69c <_vfiprintf_r+0xc0>
 800f684:	465b      	mov	r3, fp
 800f686:	4622      	mov	r2, r4
 800f688:	4629      	mov	r1, r5
 800f68a:	4630      	mov	r0, r6
 800f68c:	f7ff ff93 	bl	800f5b6 <__sfputs_r>
 800f690:	3001      	adds	r0, #1
 800f692:	f000 80aa 	beq.w	800f7ea <_vfiprintf_r+0x20e>
 800f696:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f698:	445a      	add	r2, fp
 800f69a:	9209      	str	r2, [sp, #36]	; 0x24
 800f69c:	f89a 3000 	ldrb.w	r3, [sl]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	f000 80a2 	beq.w	800f7ea <_vfiprintf_r+0x20e>
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f6ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6b0:	f10a 0a01 	add.w	sl, sl, #1
 800f6b4:	9304      	str	r3, [sp, #16]
 800f6b6:	9307      	str	r3, [sp, #28]
 800f6b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f6bc:	931a      	str	r3, [sp, #104]	; 0x68
 800f6be:	4654      	mov	r4, sl
 800f6c0:	2205      	movs	r2, #5
 800f6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6c6:	4858      	ldr	r0, [pc, #352]	; (800f828 <_vfiprintf_r+0x24c>)
 800f6c8:	f7f0 fdba 	bl	8000240 <memchr>
 800f6cc:	9a04      	ldr	r2, [sp, #16]
 800f6ce:	b9d8      	cbnz	r0, 800f708 <_vfiprintf_r+0x12c>
 800f6d0:	06d1      	lsls	r1, r2, #27
 800f6d2:	bf44      	itt	mi
 800f6d4:	2320      	movmi	r3, #32
 800f6d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6da:	0713      	lsls	r3, r2, #28
 800f6dc:	bf44      	itt	mi
 800f6de:	232b      	movmi	r3, #43	; 0x2b
 800f6e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6e4:	f89a 3000 	ldrb.w	r3, [sl]
 800f6e8:	2b2a      	cmp	r3, #42	; 0x2a
 800f6ea:	d015      	beq.n	800f718 <_vfiprintf_r+0x13c>
 800f6ec:	9a07      	ldr	r2, [sp, #28]
 800f6ee:	4654      	mov	r4, sl
 800f6f0:	2000      	movs	r0, #0
 800f6f2:	f04f 0c0a 	mov.w	ip, #10
 800f6f6:	4621      	mov	r1, r4
 800f6f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6fc:	3b30      	subs	r3, #48	; 0x30
 800f6fe:	2b09      	cmp	r3, #9
 800f700:	d94e      	bls.n	800f7a0 <_vfiprintf_r+0x1c4>
 800f702:	b1b0      	cbz	r0, 800f732 <_vfiprintf_r+0x156>
 800f704:	9207      	str	r2, [sp, #28]
 800f706:	e014      	b.n	800f732 <_vfiprintf_r+0x156>
 800f708:	eba0 0308 	sub.w	r3, r0, r8
 800f70c:	fa09 f303 	lsl.w	r3, r9, r3
 800f710:	4313      	orrs	r3, r2
 800f712:	9304      	str	r3, [sp, #16]
 800f714:	46a2      	mov	sl, r4
 800f716:	e7d2      	b.n	800f6be <_vfiprintf_r+0xe2>
 800f718:	9b03      	ldr	r3, [sp, #12]
 800f71a:	1d19      	adds	r1, r3, #4
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	9103      	str	r1, [sp, #12]
 800f720:	2b00      	cmp	r3, #0
 800f722:	bfbb      	ittet	lt
 800f724:	425b      	neglt	r3, r3
 800f726:	f042 0202 	orrlt.w	r2, r2, #2
 800f72a:	9307      	strge	r3, [sp, #28]
 800f72c:	9307      	strlt	r3, [sp, #28]
 800f72e:	bfb8      	it	lt
 800f730:	9204      	strlt	r2, [sp, #16]
 800f732:	7823      	ldrb	r3, [r4, #0]
 800f734:	2b2e      	cmp	r3, #46	; 0x2e
 800f736:	d10c      	bne.n	800f752 <_vfiprintf_r+0x176>
 800f738:	7863      	ldrb	r3, [r4, #1]
 800f73a:	2b2a      	cmp	r3, #42	; 0x2a
 800f73c:	d135      	bne.n	800f7aa <_vfiprintf_r+0x1ce>
 800f73e:	9b03      	ldr	r3, [sp, #12]
 800f740:	1d1a      	adds	r2, r3, #4
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	9203      	str	r2, [sp, #12]
 800f746:	2b00      	cmp	r3, #0
 800f748:	bfb8      	it	lt
 800f74a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f74e:	3402      	adds	r4, #2
 800f750:	9305      	str	r3, [sp, #20]
 800f752:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f838 <_vfiprintf_r+0x25c>
 800f756:	7821      	ldrb	r1, [r4, #0]
 800f758:	2203      	movs	r2, #3
 800f75a:	4650      	mov	r0, sl
 800f75c:	f7f0 fd70 	bl	8000240 <memchr>
 800f760:	b140      	cbz	r0, 800f774 <_vfiprintf_r+0x198>
 800f762:	2340      	movs	r3, #64	; 0x40
 800f764:	eba0 000a 	sub.w	r0, r0, sl
 800f768:	fa03 f000 	lsl.w	r0, r3, r0
 800f76c:	9b04      	ldr	r3, [sp, #16]
 800f76e:	4303      	orrs	r3, r0
 800f770:	3401      	adds	r4, #1
 800f772:	9304      	str	r3, [sp, #16]
 800f774:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f778:	482c      	ldr	r0, [pc, #176]	; (800f82c <_vfiprintf_r+0x250>)
 800f77a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f77e:	2206      	movs	r2, #6
 800f780:	f7f0 fd5e 	bl	8000240 <memchr>
 800f784:	2800      	cmp	r0, #0
 800f786:	d03f      	beq.n	800f808 <_vfiprintf_r+0x22c>
 800f788:	4b29      	ldr	r3, [pc, #164]	; (800f830 <_vfiprintf_r+0x254>)
 800f78a:	bb1b      	cbnz	r3, 800f7d4 <_vfiprintf_r+0x1f8>
 800f78c:	9b03      	ldr	r3, [sp, #12]
 800f78e:	3307      	adds	r3, #7
 800f790:	f023 0307 	bic.w	r3, r3, #7
 800f794:	3308      	adds	r3, #8
 800f796:	9303      	str	r3, [sp, #12]
 800f798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f79a:	443b      	add	r3, r7
 800f79c:	9309      	str	r3, [sp, #36]	; 0x24
 800f79e:	e767      	b.n	800f670 <_vfiprintf_r+0x94>
 800f7a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7a4:	460c      	mov	r4, r1
 800f7a6:	2001      	movs	r0, #1
 800f7a8:	e7a5      	b.n	800f6f6 <_vfiprintf_r+0x11a>
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	3401      	adds	r4, #1
 800f7ae:	9305      	str	r3, [sp, #20]
 800f7b0:	4619      	mov	r1, r3
 800f7b2:	f04f 0c0a 	mov.w	ip, #10
 800f7b6:	4620      	mov	r0, r4
 800f7b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7bc:	3a30      	subs	r2, #48	; 0x30
 800f7be:	2a09      	cmp	r2, #9
 800f7c0:	d903      	bls.n	800f7ca <_vfiprintf_r+0x1ee>
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d0c5      	beq.n	800f752 <_vfiprintf_r+0x176>
 800f7c6:	9105      	str	r1, [sp, #20]
 800f7c8:	e7c3      	b.n	800f752 <_vfiprintf_r+0x176>
 800f7ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7ce:	4604      	mov	r4, r0
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	e7f0      	b.n	800f7b6 <_vfiprintf_r+0x1da>
 800f7d4:	ab03      	add	r3, sp, #12
 800f7d6:	9300      	str	r3, [sp, #0]
 800f7d8:	462a      	mov	r2, r5
 800f7da:	4b16      	ldr	r3, [pc, #88]	; (800f834 <_vfiprintf_r+0x258>)
 800f7dc:	a904      	add	r1, sp, #16
 800f7de:	4630      	mov	r0, r6
 800f7e0:	f7fd f8ac 	bl	800c93c <_printf_float>
 800f7e4:	4607      	mov	r7, r0
 800f7e6:	1c78      	adds	r0, r7, #1
 800f7e8:	d1d6      	bne.n	800f798 <_vfiprintf_r+0x1bc>
 800f7ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7ec:	07d9      	lsls	r1, r3, #31
 800f7ee:	d405      	bmi.n	800f7fc <_vfiprintf_r+0x220>
 800f7f0:	89ab      	ldrh	r3, [r5, #12]
 800f7f2:	059a      	lsls	r2, r3, #22
 800f7f4:	d402      	bmi.n	800f7fc <_vfiprintf_r+0x220>
 800f7f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7f8:	f7fc fc96 	bl	800c128 <__retarget_lock_release_recursive>
 800f7fc:	89ab      	ldrh	r3, [r5, #12]
 800f7fe:	065b      	lsls	r3, r3, #25
 800f800:	f53f af12 	bmi.w	800f628 <_vfiprintf_r+0x4c>
 800f804:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f806:	e711      	b.n	800f62c <_vfiprintf_r+0x50>
 800f808:	ab03      	add	r3, sp, #12
 800f80a:	9300      	str	r3, [sp, #0]
 800f80c:	462a      	mov	r2, r5
 800f80e:	4b09      	ldr	r3, [pc, #36]	; (800f834 <_vfiprintf_r+0x258>)
 800f810:	a904      	add	r1, sp, #16
 800f812:	4630      	mov	r0, r6
 800f814:	f7fd fb36 	bl	800ce84 <_printf_i>
 800f818:	e7e4      	b.n	800f7e4 <_vfiprintf_r+0x208>
 800f81a:	bf00      	nop
 800f81c:	080114b8 	.word	0x080114b8
 800f820:	080114d8 	.word	0x080114d8
 800f824:	08011498 	.word	0x08011498
 800f828:	080119c4 	.word	0x080119c4
 800f82c:	080119ce 	.word	0x080119ce
 800f830:	0800c93d 	.word	0x0800c93d
 800f834:	0800f5b7 	.word	0x0800f5b7
 800f838:	080119ca 	.word	0x080119ca

0800f83c <_read_r>:
 800f83c:	b538      	push	{r3, r4, r5, lr}
 800f83e:	4d07      	ldr	r5, [pc, #28]	; (800f85c <_read_r+0x20>)
 800f840:	4604      	mov	r4, r0
 800f842:	4608      	mov	r0, r1
 800f844:	4611      	mov	r1, r2
 800f846:	2200      	movs	r2, #0
 800f848:	602a      	str	r2, [r5, #0]
 800f84a:	461a      	mov	r2, r3
 800f84c:	f7f2 f912 	bl	8001a74 <_read>
 800f850:	1c43      	adds	r3, r0, #1
 800f852:	d102      	bne.n	800f85a <_read_r+0x1e>
 800f854:	682b      	ldr	r3, [r5, #0]
 800f856:	b103      	cbz	r3, 800f85a <_read_r+0x1e>
 800f858:	6023      	str	r3, [r4, #0]
 800f85a:	bd38      	pop	{r3, r4, r5, pc}
 800f85c:	200050b8 	.word	0x200050b8

0800f860 <siscanf>:
 800f860:	b40e      	push	{r1, r2, r3}
 800f862:	b510      	push	{r4, lr}
 800f864:	b09f      	sub	sp, #124	; 0x7c
 800f866:	ac21      	add	r4, sp, #132	; 0x84
 800f868:	f44f 7101 	mov.w	r1, #516	; 0x204
 800f86c:	f854 2b04 	ldr.w	r2, [r4], #4
 800f870:	9201      	str	r2, [sp, #4]
 800f872:	f8ad 101c 	strh.w	r1, [sp, #28]
 800f876:	9004      	str	r0, [sp, #16]
 800f878:	9008      	str	r0, [sp, #32]
 800f87a:	f7f0 fcd3 	bl	8000224 <strlen>
 800f87e:	4b0c      	ldr	r3, [pc, #48]	; (800f8b0 <siscanf+0x50>)
 800f880:	9005      	str	r0, [sp, #20]
 800f882:	9009      	str	r0, [sp, #36]	; 0x24
 800f884:	930d      	str	r3, [sp, #52]	; 0x34
 800f886:	480b      	ldr	r0, [pc, #44]	; (800f8b4 <siscanf+0x54>)
 800f888:	9a01      	ldr	r2, [sp, #4]
 800f88a:	6800      	ldr	r0, [r0, #0]
 800f88c:	9403      	str	r4, [sp, #12]
 800f88e:	2300      	movs	r3, #0
 800f890:	9311      	str	r3, [sp, #68]	; 0x44
 800f892:	9316      	str	r3, [sp, #88]	; 0x58
 800f894:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f898:	f8ad 301e 	strh.w	r3, [sp, #30]
 800f89c:	a904      	add	r1, sp, #16
 800f89e:	4623      	mov	r3, r4
 800f8a0:	f000 f9aa 	bl	800fbf8 <__ssvfiscanf_r>
 800f8a4:	b01f      	add	sp, #124	; 0x7c
 800f8a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f8aa:	b003      	add	sp, #12
 800f8ac:	4770      	bx	lr
 800f8ae:	bf00      	nop
 800f8b0:	0800d2af 	.word	0x0800d2af
 800f8b4:	20000020 	.word	0x20000020

0800f8b8 <__swbuf_r>:
 800f8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8ba:	460e      	mov	r6, r1
 800f8bc:	4614      	mov	r4, r2
 800f8be:	4605      	mov	r5, r0
 800f8c0:	b118      	cbz	r0, 800f8ca <__swbuf_r+0x12>
 800f8c2:	6983      	ldr	r3, [r0, #24]
 800f8c4:	b90b      	cbnz	r3, 800f8ca <__swbuf_r+0x12>
 800f8c6:	f7fc fa4d 	bl	800bd64 <__sinit>
 800f8ca:	4b21      	ldr	r3, [pc, #132]	; (800f950 <__swbuf_r+0x98>)
 800f8cc:	429c      	cmp	r4, r3
 800f8ce:	d12b      	bne.n	800f928 <__swbuf_r+0x70>
 800f8d0:	686c      	ldr	r4, [r5, #4]
 800f8d2:	69a3      	ldr	r3, [r4, #24]
 800f8d4:	60a3      	str	r3, [r4, #8]
 800f8d6:	89a3      	ldrh	r3, [r4, #12]
 800f8d8:	071a      	lsls	r2, r3, #28
 800f8da:	d52f      	bpl.n	800f93c <__swbuf_r+0x84>
 800f8dc:	6923      	ldr	r3, [r4, #16]
 800f8de:	b36b      	cbz	r3, 800f93c <__swbuf_r+0x84>
 800f8e0:	6923      	ldr	r3, [r4, #16]
 800f8e2:	6820      	ldr	r0, [r4, #0]
 800f8e4:	1ac0      	subs	r0, r0, r3
 800f8e6:	6963      	ldr	r3, [r4, #20]
 800f8e8:	b2f6      	uxtb	r6, r6
 800f8ea:	4283      	cmp	r3, r0
 800f8ec:	4637      	mov	r7, r6
 800f8ee:	dc04      	bgt.n	800f8fa <__swbuf_r+0x42>
 800f8f0:	4621      	mov	r1, r4
 800f8f2:	4628      	mov	r0, r5
 800f8f4:	f7fe ffc2 	bl	800e87c <_fflush_r>
 800f8f8:	bb30      	cbnz	r0, 800f948 <__swbuf_r+0x90>
 800f8fa:	68a3      	ldr	r3, [r4, #8]
 800f8fc:	3b01      	subs	r3, #1
 800f8fe:	60a3      	str	r3, [r4, #8]
 800f900:	6823      	ldr	r3, [r4, #0]
 800f902:	1c5a      	adds	r2, r3, #1
 800f904:	6022      	str	r2, [r4, #0]
 800f906:	701e      	strb	r6, [r3, #0]
 800f908:	6963      	ldr	r3, [r4, #20]
 800f90a:	3001      	adds	r0, #1
 800f90c:	4283      	cmp	r3, r0
 800f90e:	d004      	beq.n	800f91a <__swbuf_r+0x62>
 800f910:	89a3      	ldrh	r3, [r4, #12]
 800f912:	07db      	lsls	r3, r3, #31
 800f914:	d506      	bpl.n	800f924 <__swbuf_r+0x6c>
 800f916:	2e0a      	cmp	r6, #10
 800f918:	d104      	bne.n	800f924 <__swbuf_r+0x6c>
 800f91a:	4621      	mov	r1, r4
 800f91c:	4628      	mov	r0, r5
 800f91e:	f7fe ffad 	bl	800e87c <_fflush_r>
 800f922:	b988      	cbnz	r0, 800f948 <__swbuf_r+0x90>
 800f924:	4638      	mov	r0, r7
 800f926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f928:	4b0a      	ldr	r3, [pc, #40]	; (800f954 <__swbuf_r+0x9c>)
 800f92a:	429c      	cmp	r4, r3
 800f92c:	d101      	bne.n	800f932 <__swbuf_r+0x7a>
 800f92e:	68ac      	ldr	r4, [r5, #8]
 800f930:	e7cf      	b.n	800f8d2 <__swbuf_r+0x1a>
 800f932:	4b09      	ldr	r3, [pc, #36]	; (800f958 <__swbuf_r+0xa0>)
 800f934:	429c      	cmp	r4, r3
 800f936:	bf08      	it	eq
 800f938:	68ec      	ldreq	r4, [r5, #12]
 800f93a:	e7ca      	b.n	800f8d2 <__swbuf_r+0x1a>
 800f93c:	4621      	mov	r1, r4
 800f93e:	4628      	mov	r0, r5
 800f940:	f000 f81a 	bl	800f978 <__swsetup_r>
 800f944:	2800      	cmp	r0, #0
 800f946:	d0cb      	beq.n	800f8e0 <__swbuf_r+0x28>
 800f948:	f04f 37ff 	mov.w	r7, #4294967295
 800f94c:	e7ea      	b.n	800f924 <__swbuf_r+0x6c>
 800f94e:	bf00      	nop
 800f950:	080114b8 	.word	0x080114b8
 800f954:	080114d8 	.word	0x080114d8
 800f958:	08011498 	.word	0x08011498

0800f95c <__ascii_wctomb>:
 800f95c:	b149      	cbz	r1, 800f972 <__ascii_wctomb+0x16>
 800f95e:	2aff      	cmp	r2, #255	; 0xff
 800f960:	bf85      	ittet	hi
 800f962:	238a      	movhi	r3, #138	; 0x8a
 800f964:	6003      	strhi	r3, [r0, #0]
 800f966:	700a      	strbls	r2, [r1, #0]
 800f968:	f04f 30ff 	movhi.w	r0, #4294967295
 800f96c:	bf98      	it	ls
 800f96e:	2001      	movls	r0, #1
 800f970:	4770      	bx	lr
 800f972:	4608      	mov	r0, r1
 800f974:	4770      	bx	lr
	...

0800f978 <__swsetup_r>:
 800f978:	4b32      	ldr	r3, [pc, #200]	; (800fa44 <__swsetup_r+0xcc>)
 800f97a:	b570      	push	{r4, r5, r6, lr}
 800f97c:	681d      	ldr	r5, [r3, #0]
 800f97e:	4606      	mov	r6, r0
 800f980:	460c      	mov	r4, r1
 800f982:	b125      	cbz	r5, 800f98e <__swsetup_r+0x16>
 800f984:	69ab      	ldr	r3, [r5, #24]
 800f986:	b913      	cbnz	r3, 800f98e <__swsetup_r+0x16>
 800f988:	4628      	mov	r0, r5
 800f98a:	f7fc f9eb 	bl	800bd64 <__sinit>
 800f98e:	4b2e      	ldr	r3, [pc, #184]	; (800fa48 <__swsetup_r+0xd0>)
 800f990:	429c      	cmp	r4, r3
 800f992:	d10f      	bne.n	800f9b4 <__swsetup_r+0x3c>
 800f994:	686c      	ldr	r4, [r5, #4]
 800f996:	89a3      	ldrh	r3, [r4, #12]
 800f998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f99c:	0719      	lsls	r1, r3, #28
 800f99e:	d42c      	bmi.n	800f9fa <__swsetup_r+0x82>
 800f9a0:	06dd      	lsls	r5, r3, #27
 800f9a2:	d411      	bmi.n	800f9c8 <__swsetup_r+0x50>
 800f9a4:	2309      	movs	r3, #9
 800f9a6:	6033      	str	r3, [r6, #0]
 800f9a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f9ac:	81a3      	strh	r3, [r4, #12]
 800f9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800f9b2:	e03e      	b.n	800fa32 <__swsetup_r+0xba>
 800f9b4:	4b25      	ldr	r3, [pc, #148]	; (800fa4c <__swsetup_r+0xd4>)
 800f9b6:	429c      	cmp	r4, r3
 800f9b8:	d101      	bne.n	800f9be <__swsetup_r+0x46>
 800f9ba:	68ac      	ldr	r4, [r5, #8]
 800f9bc:	e7eb      	b.n	800f996 <__swsetup_r+0x1e>
 800f9be:	4b24      	ldr	r3, [pc, #144]	; (800fa50 <__swsetup_r+0xd8>)
 800f9c0:	429c      	cmp	r4, r3
 800f9c2:	bf08      	it	eq
 800f9c4:	68ec      	ldreq	r4, [r5, #12]
 800f9c6:	e7e6      	b.n	800f996 <__swsetup_r+0x1e>
 800f9c8:	0758      	lsls	r0, r3, #29
 800f9ca:	d512      	bpl.n	800f9f2 <__swsetup_r+0x7a>
 800f9cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f9ce:	b141      	cbz	r1, 800f9e2 <__swsetup_r+0x6a>
 800f9d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9d4:	4299      	cmp	r1, r3
 800f9d6:	d002      	beq.n	800f9de <__swsetup_r+0x66>
 800f9d8:	4630      	mov	r0, r6
 800f9da:	f7fc fe65 	bl	800c6a8 <_free_r>
 800f9de:	2300      	movs	r3, #0
 800f9e0:	6363      	str	r3, [r4, #52]	; 0x34
 800f9e2:	89a3      	ldrh	r3, [r4, #12]
 800f9e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f9e8:	81a3      	strh	r3, [r4, #12]
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	6063      	str	r3, [r4, #4]
 800f9ee:	6923      	ldr	r3, [r4, #16]
 800f9f0:	6023      	str	r3, [r4, #0]
 800f9f2:	89a3      	ldrh	r3, [r4, #12]
 800f9f4:	f043 0308 	orr.w	r3, r3, #8
 800f9f8:	81a3      	strh	r3, [r4, #12]
 800f9fa:	6923      	ldr	r3, [r4, #16]
 800f9fc:	b94b      	cbnz	r3, 800fa12 <__swsetup_r+0x9a>
 800f9fe:	89a3      	ldrh	r3, [r4, #12]
 800fa00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fa04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fa08:	d003      	beq.n	800fa12 <__swsetup_r+0x9a>
 800fa0a:	4621      	mov	r1, r4
 800fa0c:	4630      	mov	r0, r6
 800fa0e:	f000 f851 	bl	800fab4 <__smakebuf_r>
 800fa12:	89a0      	ldrh	r0, [r4, #12]
 800fa14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa18:	f010 0301 	ands.w	r3, r0, #1
 800fa1c:	d00a      	beq.n	800fa34 <__swsetup_r+0xbc>
 800fa1e:	2300      	movs	r3, #0
 800fa20:	60a3      	str	r3, [r4, #8]
 800fa22:	6963      	ldr	r3, [r4, #20]
 800fa24:	425b      	negs	r3, r3
 800fa26:	61a3      	str	r3, [r4, #24]
 800fa28:	6923      	ldr	r3, [r4, #16]
 800fa2a:	b943      	cbnz	r3, 800fa3e <__swsetup_r+0xc6>
 800fa2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fa30:	d1ba      	bne.n	800f9a8 <__swsetup_r+0x30>
 800fa32:	bd70      	pop	{r4, r5, r6, pc}
 800fa34:	0781      	lsls	r1, r0, #30
 800fa36:	bf58      	it	pl
 800fa38:	6963      	ldrpl	r3, [r4, #20]
 800fa3a:	60a3      	str	r3, [r4, #8]
 800fa3c:	e7f4      	b.n	800fa28 <__swsetup_r+0xb0>
 800fa3e:	2000      	movs	r0, #0
 800fa40:	e7f7      	b.n	800fa32 <__swsetup_r+0xba>
 800fa42:	bf00      	nop
 800fa44:	20000020 	.word	0x20000020
 800fa48:	080114b8 	.word	0x080114b8
 800fa4c:	080114d8 	.word	0x080114d8
 800fa50:	08011498 	.word	0x08011498

0800fa54 <__env_lock>:
 800fa54:	4801      	ldr	r0, [pc, #4]	; (800fa5c <__env_lock+0x8>)
 800fa56:	f7fc bb65 	b.w	800c124 <__retarget_lock_acquire_recursive>
 800fa5a:	bf00      	nop
 800fa5c:	200050ae 	.word	0x200050ae

0800fa60 <__env_unlock>:
 800fa60:	4801      	ldr	r0, [pc, #4]	; (800fa68 <__env_unlock+0x8>)
 800fa62:	f7fc bb61 	b.w	800c128 <__retarget_lock_release_recursive>
 800fa66:	bf00      	nop
 800fa68:	200050ae 	.word	0x200050ae

0800fa6c <__swhatbuf_r>:
 800fa6c:	b570      	push	{r4, r5, r6, lr}
 800fa6e:	460e      	mov	r6, r1
 800fa70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa74:	2900      	cmp	r1, #0
 800fa76:	b096      	sub	sp, #88	; 0x58
 800fa78:	4614      	mov	r4, r2
 800fa7a:	461d      	mov	r5, r3
 800fa7c:	da07      	bge.n	800fa8e <__swhatbuf_r+0x22>
 800fa7e:	2300      	movs	r3, #0
 800fa80:	602b      	str	r3, [r5, #0]
 800fa82:	89b3      	ldrh	r3, [r6, #12]
 800fa84:	061a      	lsls	r2, r3, #24
 800fa86:	d410      	bmi.n	800faaa <__swhatbuf_r+0x3e>
 800fa88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa8c:	e00e      	b.n	800faac <__swhatbuf_r+0x40>
 800fa8e:	466a      	mov	r2, sp
 800fa90:	f000 fbea 	bl	8010268 <_fstat_r>
 800fa94:	2800      	cmp	r0, #0
 800fa96:	dbf2      	blt.n	800fa7e <__swhatbuf_r+0x12>
 800fa98:	9a01      	ldr	r2, [sp, #4]
 800fa9a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fa9e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800faa2:	425a      	negs	r2, r3
 800faa4:	415a      	adcs	r2, r3
 800faa6:	602a      	str	r2, [r5, #0]
 800faa8:	e7ee      	b.n	800fa88 <__swhatbuf_r+0x1c>
 800faaa:	2340      	movs	r3, #64	; 0x40
 800faac:	2000      	movs	r0, #0
 800faae:	6023      	str	r3, [r4, #0]
 800fab0:	b016      	add	sp, #88	; 0x58
 800fab2:	bd70      	pop	{r4, r5, r6, pc}

0800fab4 <__smakebuf_r>:
 800fab4:	898b      	ldrh	r3, [r1, #12]
 800fab6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fab8:	079d      	lsls	r5, r3, #30
 800faba:	4606      	mov	r6, r0
 800fabc:	460c      	mov	r4, r1
 800fabe:	d507      	bpl.n	800fad0 <__smakebuf_r+0x1c>
 800fac0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fac4:	6023      	str	r3, [r4, #0]
 800fac6:	6123      	str	r3, [r4, #16]
 800fac8:	2301      	movs	r3, #1
 800faca:	6163      	str	r3, [r4, #20]
 800facc:	b002      	add	sp, #8
 800face:	bd70      	pop	{r4, r5, r6, pc}
 800fad0:	ab01      	add	r3, sp, #4
 800fad2:	466a      	mov	r2, sp
 800fad4:	f7ff ffca 	bl	800fa6c <__swhatbuf_r>
 800fad8:	9900      	ldr	r1, [sp, #0]
 800fada:	4605      	mov	r5, r0
 800fadc:	4630      	mov	r0, r6
 800fade:	f7fc fe33 	bl	800c748 <_malloc_r>
 800fae2:	b948      	cbnz	r0, 800faf8 <__smakebuf_r+0x44>
 800fae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fae8:	059a      	lsls	r2, r3, #22
 800faea:	d4ef      	bmi.n	800facc <__smakebuf_r+0x18>
 800faec:	f023 0303 	bic.w	r3, r3, #3
 800faf0:	f043 0302 	orr.w	r3, r3, #2
 800faf4:	81a3      	strh	r3, [r4, #12]
 800faf6:	e7e3      	b.n	800fac0 <__smakebuf_r+0xc>
 800faf8:	4b0d      	ldr	r3, [pc, #52]	; (800fb30 <__smakebuf_r+0x7c>)
 800fafa:	62b3      	str	r3, [r6, #40]	; 0x28
 800fafc:	89a3      	ldrh	r3, [r4, #12]
 800fafe:	6020      	str	r0, [r4, #0]
 800fb00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb04:	81a3      	strh	r3, [r4, #12]
 800fb06:	9b00      	ldr	r3, [sp, #0]
 800fb08:	6163      	str	r3, [r4, #20]
 800fb0a:	9b01      	ldr	r3, [sp, #4]
 800fb0c:	6120      	str	r0, [r4, #16]
 800fb0e:	b15b      	cbz	r3, 800fb28 <__smakebuf_r+0x74>
 800fb10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb14:	4630      	mov	r0, r6
 800fb16:	f000 fbb9 	bl	801028c <_isatty_r>
 800fb1a:	b128      	cbz	r0, 800fb28 <__smakebuf_r+0x74>
 800fb1c:	89a3      	ldrh	r3, [r4, #12]
 800fb1e:	f023 0303 	bic.w	r3, r3, #3
 800fb22:	f043 0301 	orr.w	r3, r3, #1
 800fb26:	81a3      	strh	r3, [r4, #12]
 800fb28:	89a0      	ldrh	r0, [r4, #12]
 800fb2a:	4305      	orrs	r5, r0
 800fb2c:	81a5      	strh	r5, [r4, #12]
 800fb2e:	e7cd      	b.n	800facc <__smakebuf_r+0x18>
 800fb30:	0800bcfd 	.word	0x0800bcfd

0800fb34 <_malloc_usable_size_r>:
 800fb34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb38:	1f18      	subs	r0, r3, #4
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	bfbc      	itt	lt
 800fb3e:	580b      	ldrlt	r3, [r1, r0]
 800fb40:	18c0      	addlt	r0, r0, r3
 800fb42:	4770      	bx	lr

0800fb44 <_sungetc_r>:
 800fb44:	b538      	push	{r3, r4, r5, lr}
 800fb46:	1c4b      	adds	r3, r1, #1
 800fb48:	4614      	mov	r4, r2
 800fb4a:	d103      	bne.n	800fb54 <_sungetc_r+0x10>
 800fb4c:	f04f 35ff 	mov.w	r5, #4294967295
 800fb50:	4628      	mov	r0, r5
 800fb52:	bd38      	pop	{r3, r4, r5, pc}
 800fb54:	8993      	ldrh	r3, [r2, #12]
 800fb56:	f023 0320 	bic.w	r3, r3, #32
 800fb5a:	8193      	strh	r3, [r2, #12]
 800fb5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fb5e:	6852      	ldr	r2, [r2, #4]
 800fb60:	b2cd      	uxtb	r5, r1
 800fb62:	b18b      	cbz	r3, 800fb88 <_sungetc_r+0x44>
 800fb64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fb66:	4293      	cmp	r3, r2
 800fb68:	dd08      	ble.n	800fb7c <_sungetc_r+0x38>
 800fb6a:	6823      	ldr	r3, [r4, #0]
 800fb6c:	1e5a      	subs	r2, r3, #1
 800fb6e:	6022      	str	r2, [r4, #0]
 800fb70:	f803 5c01 	strb.w	r5, [r3, #-1]
 800fb74:	6863      	ldr	r3, [r4, #4]
 800fb76:	3301      	adds	r3, #1
 800fb78:	6063      	str	r3, [r4, #4]
 800fb7a:	e7e9      	b.n	800fb50 <_sungetc_r+0xc>
 800fb7c:	4621      	mov	r1, r4
 800fb7e:	f000 fb39 	bl	80101f4 <__submore>
 800fb82:	2800      	cmp	r0, #0
 800fb84:	d0f1      	beq.n	800fb6a <_sungetc_r+0x26>
 800fb86:	e7e1      	b.n	800fb4c <_sungetc_r+0x8>
 800fb88:	6921      	ldr	r1, [r4, #16]
 800fb8a:	6823      	ldr	r3, [r4, #0]
 800fb8c:	b151      	cbz	r1, 800fba4 <_sungetc_r+0x60>
 800fb8e:	4299      	cmp	r1, r3
 800fb90:	d208      	bcs.n	800fba4 <_sungetc_r+0x60>
 800fb92:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800fb96:	42a9      	cmp	r1, r5
 800fb98:	d104      	bne.n	800fba4 <_sungetc_r+0x60>
 800fb9a:	3b01      	subs	r3, #1
 800fb9c:	3201      	adds	r2, #1
 800fb9e:	6023      	str	r3, [r4, #0]
 800fba0:	6062      	str	r2, [r4, #4]
 800fba2:	e7d5      	b.n	800fb50 <_sungetc_r+0xc>
 800fba4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800fba8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fbac:	6363      	str	r3, [r4, #52]	; 0x34
 800fbae:	2303      	movs	r3, #3
 800fbb0:	63a3      	str	r3, [r4, #56]	; 0x38
 800fbb2:	4623      	mov	r3, r4
 800fbb4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800fbb8:	6023      	str	r3, [r4, #0]
 800fbba:	2301      	movs	r3, #1
 800fbbc:	e7dc      	b.n	800fb78 <_sungetc_r+0x34>

0800fbbe <__ssrefill_r>:
 800fbbe:	b510      	push	{r4, lr}
 800fbc0:	460c      	mov	r4, r1
 800fbc2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800fbc4:	b169      	cbz	r1, 800fbe2 <__ssrefill_r+0x24>
 800fbc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fbca:	4299      	cmp	r1, r3
 800fbcc:	d001      	beq.n	800fbd2 <__ssrefill_r+0x14>
 800fbce:	f7fc fd6b 	bl	800c6a8 <_free_r>
 800fbd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fbd4:	6063      	str	r3, [r4, #4]
 800fbd6:	2000      	movs	r0, #0
 800fbd8:	6360      	str	r0, [r4, #52]	; 0x34
 800fbda:	b113      	cbz	r3, 800fbe2 <__ssrefill_r+0x24>
 800fbdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800fbde:	6023      	str	r3, [r4, #0]
 800fbe0:	bd10      	pop	{r4, pc}
 800fbe2:	6923      	ldr	r3, [r4, #16]
 800fbe4:	6023      	str	r3, [r4, #0]
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	6063      	str	r3, [r4, #4]
 800fbea:	89a3      	ldrh	r3, [r4, #12]
 800fbec:	f043 0320 	orr.w	r3, r3, #32
 800fbf0:	81a3      	strh	r3, [r4, #12]
 800fbf2:	f04f 30ff 	mov.w	r0, #4294967295
 800fbf6:	e7f3      	b.n	800fbe0 <__ssrefill_r+0x22>

0800fbf8 <__ssvfiscanf_r>:
 800fbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbfc:	460c      	mov	r4, r1
 800fbfe:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800fc02:	2100      	movs	r1, #0
 800fc04:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800fc08:	49b2      	ldr	r1, [pc, #712]	; (800fed4 <__ssvfiscanf_r+0x2dc>)
 800fc0a:	91a0      	str	r1, [sp, #640]	; 0x280
 800fc0c:	f10d 0804 	add.w	r8, sp, #4
 800fc10:	49b1      	ldr	r1, [pc, #708]	; (800fed8 <__ssvfiscanf_r+0x2e0>)
 800fc12:	4fb2      	ldr	r7, [pc, #712]	; (800fedc <__ssvfiscanf_r+0x2e4>)
 800fc14:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800fee0 <__ssvfiscanf_r+0x2e8>
 800fc18:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800fc1c:	4606      	mov	r6, r0
 800fc1e:	91a1      	str	r1, [sp, #644]	; 0x284
 800fc20:	9300      	str	r3, [sp, #0]
 800fc22:	f892 a000 	ldrb.w	sl, [r2]
 800fc26:	f1ba 0f00 	cmp.w	sl, #0
 800fc2a:	f000 8151 	beq.w	800fed0 <__ssvfiscanf_r+0x2d8>
 800fc2e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800fc32:	f013 0308 	ands.w	r3, r3, #8
 800fc36:	f102 0501 	add.w	r5, r2, #1
 800fc3a:	d019      	beq.n	800fc70 <__ssvfiscanf_r+0x78>
 800fc3c:	6863      	ldr	r3, [r4, #4]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	dd0f      	ble.n	800fc62 <__ssvfiscanf_r+0x6a>
 800fc42:	6823      	ldr	r3, [r4, #0]
 800fc44:	781a      	ldrb	r2, [r3, #0]
 800fc46:	5cba      	ldrb	r2, [r7, r2]
 800fc48:	0712      	lsls	r2, r2, #28
 800fc4a:	d401      	bmi.n	800fc50 <__ssvfiscanf_r+0x58>
 800fc4c:	462a      	mov	r2, r5
 800fc4e:	e7e8      	b.n	800fc22 <__ssvfiscanf_r+0x2a>
 800fc50:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fc52:	3201      	adds	r2, #1
 800fc54:	9245      	str	r2, [sp, #276]	; 0x114
 800fc56:	6862      	ldr	r2, [r4, #4]
 800fc58:	3301      	adds	r3, #1
 800fc5a:	3a01      	subs	r2, #1
 800fc5c:	6062      	str	r2, [r4, #4]
 800fc5e:	6023      	str	r3, [r4, #0]
 800fc60:	e7ec      	b.n	800fc3c <__ssvfiscanf_r+0x44>
 800fc62:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fc64:	4621      	mov	r1, r4
 800fc66:	4630      	mov	r0, r6
 800fc68:	4798      	blx	r3
 800fc6a:	2800      	cmp	r0, #0
 800fc6c:	d0e9      	beq.n	800fc42 <__ssvfiscanf_r+0x4a>
 800fc6e:	e7ed      	b.n	800fc4c <__ssvfiscanf_r+0x54>
 800fc70:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800fc74:	f040 8083 	bne.w	800fd7e <__ssvfiscanf_r+0x186>
 800fc78:	9341      	str	r3, [sp, #260]	; 0x104
 800fc7a:	9343      	str	r3, [sp, #268]	; 0x10c
 800fc7c:	7853      	ldrb	r3, [r2, #1]
 800fc7e:	2b2a      	cmp	r3, #42	; 0x2a
 800fc80:	bf02      	ittt	eq
 800fc82:	2310      	moveq	r3, #16
 800fc84:	1c95      	addeq	r5, r2, #2
 800fc86:	9341      	streq	r3, [sp, #260]	; 0x104
 800fc88:	220a      	movs	r2, #10
 800fc8a:	46ab      	mov	fp, r5
 800fc8c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800fc90:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800fc94:	2b09      	cmp	r3, #9
 800fc96:	d91d      	bls.n	800fcd4 <__ssvfiscanf_r+0xdc>
 800fc98:	4891      	ldr	r0, [pc, #580]	; (800fee0 <__ssvfiscanf_r+0x2e8>)
 800fc9a:	2203      	movs	r2, #3
 800fc9c:	f7f0 fad0 	bl	8000240 <memchr>
 800fca0:	b140      	cbz	r0, 800fcb4 <__ssvfiscanf_r+0xbc>
 800fca2:	2301      	movs	r3, #1
 800fca4:	eba0 0009 	sub.w	r0, r0, r9
 800fca8:	fa03 f000 	lsl.w	r0, r3, r0
 800fcac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fcae:	4318      	orrs	r0, r3
 800fcb0:	9041      	str	r0, [sp, #260]	; 0x104
 800fcb2:	465d      	mov	r5, fp
 800fcb4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fcb8:	2b78      	cmp	r3, #120	; 0x78
 800fcba:	d806      	bhi.n	800fcca <__ssvfiscanf_r+0xd2>
 800fcbc:	2b57      	cmp	r3, #87	; 0x57
 800fcbe:	d810      	bhi.n	800fce2 <__ssvfiscanf_r+0xea>
 800fcc0:	2b25      	cmp	r3, #37	; 0x25
 800fcc2:	d05c      	beq.n	800fd7e <__ssvfiscanf_r+0x186>
 800fcc4:	d856      	bhi.n	800fd74 <__ssvfiscanf_r+0x17c>
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d074      	beq.n	800fdb4 <__ssvfiscanf_r+0x1bc>
 800fcca:	2303      	movs	r3, #3
 800fccc:	9347      	str	r3, [sp, #284]	; 0x11c
 800fcce:	230a      	movs	r3, #10
 800fcd0:	9342      	str	r3, [sp, #264]	; 0x108
 800fcd2:	e081      	b.n	800fdd8 <__ssvfiscanf_r+0x1e0>
 800fcd4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800fcd6:	fb02 1303 	mla	r3, r2, r3, r1
 800fcda:	3b30      	subs	r3, #48	; 0x30
 800fcdc:	9343      	str	r3, [sp, #268]	; 0x10c
 800fcde:	465d      	mov	r5, fp
 800fce0:	e7d3      	b.n	800fc8a <__ssvfiscanf_r+0x92>
 800fce2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800fce6:	2a20      	cmp	r2, #32
 800fce8:	d8ef      	bhi.n	800fcca <__ssvfiscanf_r+0xd2>
 800fcea:	a101      	add	r1, pc, #4	; (adr r1, 800fcf0 <__ssvfiscanf_r+0xf8>)
 800fcec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fcf0:	0800fdc3 	.word	0x0800fdc3
 800fcf4:	0800fccb 	.word	0x0800fccb
 800fcf8:	0800fccb 	.word	0x0800fccb
 800fcfc:	0800fe21 	.word	0x0800fe21
 800fd00:	0800fccb 	.word	0x0800fccb
 800fd04:	0800fccb 	.word	0x0800fccb
 800fd08:	0800fccb 	.word	0x0800fccb
 800fd0c:	0800fccb 	.word	0x0800fccb
 800fd10:	0800fccb 	.word	0x0800fccb
 800fd14:	0800fccb 	.word	0x0800fccb
 800fd18:	0800fccb 	.word	0x0800fccb
 800fd1c:	0800fe37 	.word	0x0800fe37
 800fd20:	0800fe0d 	.word	0x0800fe0d
 800fd24:	0800fd7b 	.word	0x0800fd7b
 800fd28:	0800fd7b 	.word	0x0800fd7b
 800fd2c:	0800fd7b 	.word	0x0800fd7b
 800fd30:	0800fccb 	.word	0x0800fccb
 800fd34:	0800fe11 	.word	0x0800fe11
 800fd38:	0800fccb 	.word	0x0800fccb
 800fd3c:	0800fccb 	.word	0x0800fccb
 800fd40:	0800fccb 	.word	0x0800fccb
 800fd44:	0800fccb 	.word	0x0800fccb
 800fd48:	0800fe47 	.word	0x0800fe47
 800fd4c:	0800fe19 	.word	0x0800fe19
 800fd50:	0800fdbb 	.word	0x0800fdbb
 800fd54:	0800fccb 	.word	0x0800fccb
 800fd58:	0800fccb 	.word	0x0800fccb
 800fd5c:	0800fe43 	.word	0x0800fe43
 800fd60:	0800fccb 	.word	0x0800fccb
 800fd64:	0800fe0d 	.word	0x0800fe0d
 800fd68:	0800fccb 	.word	0x0800fccb
 800fd6c:	0800fccb 	.word	0x0800fccb
 800fd70:	0800fdc3 	.word	0x0800fdc3
 800fd74:	3b45      	subs	r3, #69	; 0x45
 800fd76:	2b02      	cmp	r3, #2
 800fd78:	d8a7      	bhi.n	800fcca <__ssvfiscanf_r+0xd2>
 800fd7a:	2305      	movs	r3, #5
 800fd7c:	e02b      	b.n	800fdd6 <__ssvfiscanf_r+0x1de>
 800fd7e:	6863      	ldr	r3, [r4, #4]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	dd0d      	ble.n	800fda0 <__ssvfiscanf_r+0x1a8>
 800fd84:	6823      	ldr	r3, [r4, #0]
 800fd86:	781a      	ldrb	r2, [r3, #0]
 800fd88:	4552      	cmp	r2, sl
 800fd8a:	f040 80a1 	bne.w	800fed0 <__ssvfiscanf_r+0x2d8>
 800fd8e:	3301      	adds	r3, #1
 800fd90:	6862      	ldr	r2, [r4, #4]
 800fd92:	6023      	str	r3, [r4, #0]
 800fd94:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800fd96:	3a01      	subs	r2, #1
 800fd98:	3301      	adds	r3, #1
 800fd9a:	6062      	str	r2, [r4, #4]
 800fd9c:	9345      	str	r3, [sp, #276]	; 0x114
 800fd9e:	e755      	b.n	800fc4c <__ssvfiscanf_r+0x54>
 800fda0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fda2:	4621      	mov	r1, r4
 800fda4:	4630      	mov	r0, r6
 800fda6:	4798      	blx	r3
 800fda8:	2800      	cmp	r0, #0
 800fdaa:	d0eb      	beq.n	800fd84 <__ssvfiscanf_r+0x18c>
 800fdac:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fdae:	2800      	cmp	r0, #0
 800fdb0:	f040 8084 	bne.w	800febc <__ssvfiscanf_r+0x2c4>
 800fdb4:	f04f 30ff 	mov.w	r0, #4294967295
 800fdb8:	e086      	b.n	800fec8 <__ssvfiscanf_r+0x2d0>
 800fdba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fdbc:	f042 0220 	orr.w	r2, r2, #32
 800fdc0:	9241      	str	r2, [sp, #260]	; 0x104
 800fdc2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800fdc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fdc8:	9241      	str	r2, [sp, #260]	; 0x104
 800fdca:	2210      	movs	r2, #16
 800fdcc:	2b6f      	cmp	r3, #111	; 0x6f
 800fdce:	9242      	str	r2, [sp, #264]	; 0x108
 800fdd0:	bf34      	ite	cc
 800fdd2:	2303      	movcc	r3, #3
 800fdd4:	2304      	movcs	r3, #4
 800fdd6:	9347      	str	r3, [sp, #284]	; 0x11c
 800fdd8:	6863      	ldr	r3, [r4, #4]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	dd41      	ble.n	800fe62 <__ssvfiscanf_r+0x26a>
 800fdde:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fde0:	0659      	lsls	r1, r3, #25
 800fde2:	d404      	bmi.n	800fdee <__ssvfiscanf_r+0x1f6>
 800fde4:	6823      	ldr	r3, [r4, #0]
 800fde6:	781a      	ldrb	r2, [r3, #0]
 800fde8:	5cba      	ldrb	r2, [r7, r2]
 800fdea:	0712      	lsls	r2, r2, #28
 800fdec:	d440      	bmi.n	800fe70 <__ssvfiscanf_r+0x278>
 800fdee:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800fdf0:	2b02      	cmp	r3, #2
 800fdf2:	dc4f      	bgt.n	800fe94 <__ssvfiscanf_r+0x29c>
 800fdf4:	466b      	mov	r3, sp
 800fdf6:	4622      	mov	r2, r4
 800fdf8:	a941      	add	r1, sp, #260	; 0x104
 800fdfa:	4630      	mov	r0, r6
 800fdfc:	f000 f874 	bl	800fee8 <_scanf_chars>
 800fe00:	2801      	cmp	r0, #1
 800fe02:	d065      	beq.n	800fed0 <__ssvfiscanf_r+0x2d8>
 800fe04:	2802      	cmp	r0, #2
 800fe06:	f47f af21 	bne.w	800fc4c <__ssvfiscanf_r+0x54>
 800fe0a:	e7cf      	b.n	800fdac <__ssvfiscanf_r+0x1b4>
 800fe0c:	220a      	movs	r2, #10
 800fe0e:	e7dd      	b.n	800fdcc <__ssvfiscanf_r+0x1d4>
 800fe10:	2300      	movs	r3, #0
 800fe12:	9342      	str	r3, [sp, #264]	; 0x108
 800fe14:	2303      	movs	r3, #3
 800fe16:	e7de      	b.n	800fdd6 <__ssvfiscanf_r+0x1de>
 800fe18:	2308      	movs	r3, #8
 800fe1a:	9342      	str	r3, [sp, #264]	; 0x108
 800fe1c:	2304      	movs	r3, #4
 800fe1e:	e7da      	b.n	800fdd6 <__ssvfiscanf_r+0x1de>
 800fe20:	4629      	mov	r1, r5
 800fe22:	4640      	mov	r0, r8
 800fe24:	f000 f9ac 	bl	8010180 <__sccl>
 800fe28:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fe2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe2e:	9341      	str	r3, [sp, #260]	; 0x104
 800fe30:	4605      	mov	r5, r0
 800fe32:	2301      	movs	r3, #1
 800fe34:	e7cf      	b.n	800fdd6 <__ssvfiscanf_r+0x1de>
 800fe36:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fe38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe3c:	9341      	str	r3, [sp, #260]	; 0x104
 800fe3e:	2300      	movs	r3, #0
 800fe40:	e7c9      	b.n	800fdd6 <__ssvfiscanf_r+0x1de>
 800fe42:	2302      	movs	r3, #2
 800fe44:	e7c7      	b.n	800fdd6 <__ssvfiscanf_r+0x1de>
 800fe46:	9841      	ldr	r0, [sp, #260]	; 0x104
 800fe48:	06c3      	lsls	r3, r0, #27
 800fe4a:	f53f aeff 	bmi.w	800fc4c <__ssvfiscanf_r+0x54>
 800fe4e:	9b00      	ldr	r3, [sp, #0]
 800fe50:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fe52:	1d19      	adds	r1, r3, #4
 800fe54:	9100      	str	r1, [sp, #0]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	07c0      	lsls	r0, r0, #31
 800fe5a:	bf4c      	ite	mi
 800fe5c:	801a      	strhmi	r2, [r3, #0]
 800fe5e:	601a      	strpl	r2, [r3, #0]
 800fe60:	e6f4      	b.n	800fc4c <__ssvfiscanf_r+0x54>
 800fe62:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fe64:	4621      	mov	r1, r4
 800fe66:	4630      	mov	r0, r6
 800fe68:	4798      	blx	r3
 800fe6a:	2800      	cmp	r0, #0
 800fe6c:	d0b7      	beq.n	800fdde <__ssvfiscanf_r+0x1e6>
 800fe6e:	e79d      	b.n	800fdac <__ssvfiscanf_r+0x1b4>
 800fe70:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fe72:	3201      	adds	r2, #1
 800fe74:	9245      	str	r2, [sp, #276]	; 0x114
 800fe76:	6862      	ldr	r2, [r4, #4]
 800fe78:	3a01      	subs	r2, #1
 800fe7a:	2a00      	cmp	r2, #0
 800fe7c:	6062      	str	r2, [r4, #4]
 800fe7e:	dd02      	ble.n	800fe86 <__ssvfiscanf_r+0x28e>
 800fe80:	3301      	adds	r3, #1
 800fe82:	6023      	str	r3, [r4, #0]
 800fe84:	e7ae      	b.n	800fde4 <__ssvfiscanf_r+0x1ec>
 800fe86:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fe88:	4621      	mov	r1, r4
 800fe8a:	4630      	mov	r0, r6
 800fe8c:	4798      	blx	r3
 800fe8e:	2800      	cmp	r0, #0
 800fe90:	d0a8      	beq.n	800fde4 <__ssvfiscanf_r+0x1ec>
 800fe92:	e78b      	b.n	800fdac <__ssvfiscanf_r+0x1b4>
 800fe94:	2b04      	cmp	r3, #4
 800fe96:	dc06      	bgt.n	800fea6 <__ssvfiscanf_r+0x2ae>
 800fe98:	466b      	mov	r3, sp
 800fe9a:	4622      	mov	r2, r4
 800fe9c:	a941      	add	r1, sp, #260	; 0x104
 800fe9e:	4630      	mov	r0, r6
 800fea0:	f000 f87a 	bl	800ff98 <_scanf_i>
 800fea4:	e7ac      	b.n	800fe00 <__ssvfiscanf_r+0x208>
 800fea6:	4b0f      	ldr	r3, [pc, #60]	; (800fee4 <__ssvfiscanf_r+0x2ec>)
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	f43f aecf 	beq.w	800fc4c <__ssvfiscanf_r+0x54>
 800feae:	466b      	mov	r3, sp
 800feb0:	4622      	mov	r2, r4
 800feb2:	a941      	add	r1, sp, #260	; 0x104
 800feb4:	4630      	mov	r0, r6
 800feb6:	f3af 8000 	nop.w
 800feba:	e7a1      	b.n	800fe00 <__ssvfiscanf_r+0x208>
 800febc:	89a3      	ldrh	r3, [r4, #12]
 800febe:	f013 0f40 	tst.w	r3, #64	; 0x40
 800fec2:	bf18      	it	ne
 800fec4:	f04f 30ff 	movne.w	r0, #4294967295
 800fec8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800fecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fed0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fed2:	e7f9      	b.n	800fec8 <__ssvfiscanf_r+0x2d0>
 800fed4:	0800fb45 	.word	0x0800fb45
 800fed8:	0800fbbf 	.word	0x0800fbbf
 800fedc:	080116df 	.word	0x080116df
 800fee0:	080119ca 	.word	0x080119ca
 800fee4:	00000000 	.word	0x00000000

0800fee8 <_scanf_chars>:
 800fee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800feec:	4615      	mov	r5, r2
 800feee:	688a      	ldr	r2, [r1, #8]
 800fef0:	4680      	mov	r8, r0
 800fef2:	460c      	mov	r4, r1
 800fef4:	b932      	cbnz	r2, 800ff04 <_scanf_chars+0x1c>
 800fef6:	698a      	ldr	r2, [r1, #24]
 800fef8:	2a00      	cmp	r2, #0
 800fefa:	bf0c      	ite	eq
 800fefc:	2201      	moveq	r2, #1
 800fefe:	f04f 32ff 	movne.w	r2, #4294967295
 800ff02:	608a      	str	r2, [r1, #8]
 800ff04:	6822      	ldr	r2, [r4, #0]
 800ff06:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800ff94 <_scanf_chars+0xac>
 800ff0a:	06d1      	lsls	r1, r2, #27
 800ff0c:	bf5f      	itttt	pl
 800ff0e:	681a      	ldrpl	r2, [r3, #0]
 800ff10:	1d11      	addpl	r1, r2, #4
 800ff12:	6019      	strpl	r1, [r3, #0]
 800ff14:	6816      	ldrpl	r6, [r2, #0]
 800ff16:	2700      	movs	r7, #0
 800ff18:	69a0      	ldr	r0, [r4, #24]
 800ff1a:	b188      	cbz	r0, 800ff40 <_scanf_chars+0x58>
 800ff1c:	2801      	cmp	r0, #1
 800ff1e:	d107      	bne.n	800ff30 <_scanf_chars+0x48>
 800ff20:	682b      	ldr	r3, [r5, #0]
 800ff22:	781a      	ldrb	r2, [r3, #0]
 800ff24:	6963      	ldr	r3, [r4, #20]
 800ff26:	5c9b      	ldrb	r3, [r3, r2]
 800ff28:	b953      	cbnz	r3, 800ff40 <_scanf_chars+0x58>
 800ff2a:	bb27      	cbnz	r7, 800ff76 <_scanf_chars+0x8e>
 800ff2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff30:	2802      	cmp	r0, #2
 800ff32:	d120      	bne.n	800ff76 <_scanf_chars+0x8e>
 800ff34:	682b      	ldr	r3, [r5, #0]
 800ff36:	781b      	ldrb	r3, [r3, #0]
 800ff38:	f813 3009 	ldrb.w	r3, [r3, r9]
 800ff3c:	071b      	lsls	r3, r3, #28
 800ff3e:	d41a      	bmi.n	800ff76 <_scanf_chars+0x8e>
 800ff40:	6823      	ldr	r3, [r4, #0]
 800ff42:	06da      	lsls	r2, r3, #27
 800ff44:	bf5e      	ittt	pl
 800ff46:	682b      	ldrpl	r3, [r5, #0]
 800ff48:	781b      	ldrbpl	r3, [r3, #0]
 800ff4a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800ff4e:	682a      	ldr	r2, [r5, #0]
 800ff50:	686b      	ldr	r3, [r5, #4]
 800ff52:	3201      	adds	r2, #1
 800ff54:	602a      	str	r2, [r5, #0]
 800ff56:	68a2      	ldr	r2, [r4, #8]
 800ff58:	3b01      	subs	r3, #1
 800ff5a:	3a01      	subs	r2, #1
 800ff5c:	606b      	str	r3, [r5, #4]
 800ff5e:	3701      	adds	r7, #1
 800ff60:	60a2      	str	r2, [r4, #8]
 800ff62:	b142      	cbz	r2, 800ff76 <_scanf_chars+0x8e>
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	dcd7      	bgt.n	800ff18 <_scanf_chars+0x30>
 800ff68:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ff6c:	4629      	mov	r1, r5
 800ff6e:	4640      	mov	r0, r8
 800ff70:	4798      	blx	r3
 800ff72:	2800      	cmp	r0, #0
 800ff74:	d0d0      	beq.n	800ff18 <_scanf_chars+0x30>
 800ff76:	6823      	ldr	r3, [r4, #0]
 800ff78:	f013 0310 	ands.w	r3, r3, #16
 800ff7c:	d105      	bne.n	800ff8a <_scanf_chars+0xa2>
 800ff7e:	68e2      	ldr	r2, [r4, #12]
 800ff80:	3201      	adds	r2, #1
 800ff82:	60e2      	str	r2, [r4, #12]
 800ff84:	69a2      	ldr	r2, [r4, #24]
 800ff86:	b102      	cbz	r2, 800ff8a <_scanf_chars+0xa2>
 800ff88:	7033      	strb	r3, [r6, #0]
 800ff8a:	6923      	ldr	r3, [r4, #16]
 800ff8c:	441f      	add	r7, r3
 800ff8e:	6127      	str	r7, [r4, #16]
 800ff90:	2000      	movs	r0, #0
 800ff92:	e7cb      	b.n	800ff2c <_scanf_chars+0x44>
 800ff94:	080116df 	.word	0x080116df

0800ff98 <_scanf_i>:
 800ff98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff9c:	4698      	mov	r8, r3
 800ff9e:	4b74      	ldr	r3, [pc, #464]	; (8010170 <_scanf_i+0x1d8>)
 800ffa0:	460c      	mov	r4, r1
 800ffa2:	4682      	mov	sl, r0
 800ffa4:	4616      	mov	r6, r2
 800ffa6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ffaa:	b087      	sub	sp, #28
 800ffac:	ab03      	add	r3, sp, #12
 800ffae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ffb2:	4b70      	ldr	r3, [pc, #448]	; (8010174 <_scanf_i+0x1dc>)
 800ffb4:	69a1      	ldr	r1, [r4, #24]
 800ffb6:	4a70      	ldr	r2, [pc, #448]	; (8010178 <_scanf_i+0x1e0>)
 800ffb8:	2903      	cmp	r1, #3
 800ffba:	bf18      	it	ne
 800ffbc:	461a      	movne	r2, r3
 800ffbe:	68a3      	ldr	r3, [r4, #8]
 800ffc0:	9201      	str	r2, [sp, #4]
 800ffc2:	1e5a      	subs	r2, r3, #1
 800ffc4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ffc8:	bf88      	it	hi
 800ffca:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ffce:	4627      	mov	r7, r4
 800ffd0:	bf82      	ittt	hi
 800ffd2:	eb03 0905 	addhi.w	r9, r3, r5
 800ffd6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ffda:	60a3      	strhi	r3, [r4, #8]
 800ffdc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ffe0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800ffe4:	bf98      	it	ls
 800ffe6:	f04f 0900 	movls.w	r9, #0
 800ffea:	6023      	str	r3, [r4, #0]
 800ffec:	463d      	mov	r5, r7
 800ffee:	f04f 0b00 	mov.w	fp, #0
 800fff2:	6831      	ldr	r1, [r6, #0]
 800fff4:	ab03      	add	r3, sp, #12
 800fff6:	7809      	ldrb	r1, [r1, #0]
 800fff8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fffc:	2202      	movs	r2, #2
 800fffe:	f7f0 f91f 	bl	8000240 <memchr>
 8010002:	b328      	cbz	r0, 8010050 <_scanf_i+0xb8>
 8010004:	f1bb 0f01 	cmp.w	fp, #1
 8010008:	d159      	bne.n	80100be <_scanf_i+0x126>
 801000a:	6862      	ldr	r2, [r4, #4]
 801000c:	b92a      	cbnz	r2, 801001a <_scanf_i+0x82>
 801000e:	6822      	ldr	r2, [r4, #0]
 8010010:	2308      	movs	r3, #8
 8010012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010016:	6063      	str	r3, [r4, #4]
 8010018:	6022      	str	r2, [r4, #0]
 801001a:	6822      	ldr	r2, [r4, #0]
 801001c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8010020:	6022      	str	r2, [r4, #0]
 8010022:	68a2      	ldr	r2, [r4, #8]
 8010024:	1e51      	subs	r1, r2, #1
 8010026:	60a1      	str	r1, [r4, #8]
 8010028:	b192      	cbz	r2, 8010050 <_scanf_i+0xb8>
 801002a:	6832      	ldr	r2, [r6, #0]
 801002c:	1c51      	adds	r1, r2, #1
 801002e:	6031      	str	r1, [r6, #0]
 8010030:	7812      	ldrb	r2, [r2, #0]
 8010032:	f805 2b01 	strb.w	r2, [r5], #1
 8010036:	6872      	ldr	r2, [r6, #4]
 8010038:	3a01      	subs	r2, #1
 801003a:	2a00      	cmp	r2, #0
 801003c:	6072      	str	r2, [r6, #4]
 801003e:	dc07      	bgt.n	8010050 <_scanf_i+0xb8>
 8010040:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8010044:	4631      	mov	r1, r6
 8010046:	4650      	mov	r0, sl
 8010048:	4790      	blx	r2
 801004a:	2800      	cmp	r0, #0
 801004c:	f040 8085 	bne.w	801015a <_scanf_i+0x1c2>
 8010050:	f10b 0b01 	add.w	fp, fp, #1
 8010054:	f1bb 0f03 	cmp.w	fp, #3
 8010058:	d1cb      	bne.n	800fff2 <_scanf_i+0x5a>
 801005a:	6863      	ldr	r3, [r4, #4]
 801005c:	b90b      	cbnz	r3, 8010062 <_scanf_i+0xca>
 801005e:	230a      	movs	r3, #10
 8010060:	6063      	str	r3, [r4, #4]
 8010062:	6863      	ldr	r3, [r4, #4]
 8010064:	4945      	ldr	r1, [pc, #276]	; (801017c <_scanf_i+0x1e4>)
 8010066:	6960      	ldr	r0, [r4, #20]
 8010068:	1ac9      	subs	r1, r1, r3
 801006a:	f000 f889 	bl	8010180 <__sccl>
 801006e:	f04f 0b00 	mov.w	fp, #0
 8010072:	68a3      	ldr	r3, [r4, #8]
 8010074:	6822      	ldr	r2, [r4, #0]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d03d      	beq.n	80100f6 <_scanf_i+0x15e>
 801007a:	6831      	ldr	r1, [r6, #0]
 801007c:	6960      	ldr	r0, [r4, #20]
 801007e:	f891 c000 	ldrb.w	ip, [r1]
 8010082:	f810 000c 	ldrb.w	r0, [r0, ip]
 8010086:	2800      	cmp	r0, #0
 8010088:	d035      	beq.n	80100f6 <_scanf_i+0x15e>
 801008a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801008e:	d124      	bne.n	80100da <_scanf_i+0x142>
 8010090:	0510      	lsls	r0, r2, #20
 8010092:	d522      	bpl.n	80100da <_scanf_i+0x142>
 8010094:	f10b 0b01 	add.w	fp, fp, #1
 8010098:	f1b9 0f00 	cmp.w	r9, #0
 801009c:	d003      	beq.n	80100a6 <_scanf_i+0x10e>
 801009e:	3301      	adds	r3, #1
 80100a0:	f109 39ff 	add.w	r9, r9, #4294967295
 80100a4:	60a3      	str	r3, [r4, #8]
 80100a6:	6873      	ldr	r3, [r6, #4]
 80100a8:	3b01      	subs	r3, #1
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	6073      	str	r3, [r6, #4]
 80100ae:	dd1b      	ble.n	80100e8 <_scanf_i+0x150>
 80100b0:	6833      	ldr	r3, [r6, #0]
 80100b2:	3301      	adds	r3, #1
 80100b4:	6033      	str	r3, [r6, #0]
 80100b6:	68a3      	ldr	r3, [r4, #8]
 80100b8:	3b01      	subs	r3, #1
 80100ba:	60a3      	str	r3, [r4, #8]
 80100bc:	e7d9      	b.n	8010072 <_scanf_i+0xda>
 80100be:	f1bb 0f02 	cmp.w	fp, #2
 80100c2:	d1ae      	bne.n	8010022 <_scanf_i+0x8a>
 80100c4:	6822      	ldr	r2, [r4, #0]
 80100c6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80100ca:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80100ce:	d1bf      	bne.n	8010050 <_scanf_i+0xb8>
 80100d0:	2310      	movs	r3, #16
 80100d2:	6063      	str	r3, [r4, #4]
 80100d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80100d8:	e7a2      	b.n	8010020 <_scanf_i+0x88>
 80100da:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80100de:	6022      	str	r2, [r4, #0]
 80100e0:	780b      	ldrb	r3, [r1, #0]
 80100e2:	f805 3b01 	strb.w	r3, [r5], #1
 80100e6:	e7de      	b.n	80100a6 <_scanf_i+0x10e>
 80100e8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80100ec:	4631      	mov	r1, r6
 80100ee:	4650      	mov	r0, sl
 80100f0:	4798      	blx	r3
 80100f2:	2800      	cmp	r0, #0
 80100f4:	d0df      	beq.n	80100b6 <_scanf_i+0x11e>
 80100f6:	6823      	ldr	r3, [r4, #0]
 80100f8:	05d9      	lsls	r1, r3, #23
 80100fa:	d50d      	bpl.n	8010118 <_scanf_i+0x180>
 80100fc:	42bd      	cmp	r5, r7
 80100fe:	d909      	bls.n	8010114 <_scanf_i+0x17c>
 8010100:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8010104:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010108:	4632      	mov	r2, r6
 801010a:	4650      	mov	r0, sl
 801010c:	4798      	blx	r3
 801010e:	f105 39ff 	add.w	r9, r5, #4294967295
 8010112:	464d      	mov	r5, r9
 8010114:	42bd      	cmp	r5, r7
 8010116:	d028      	beq.n	801016a <_scanf_i+0x1d2>
 8010118:	6822      	ldr	r2, [r4, #0]
 801011a:	f012 0210 	ands.w	r2, r2, #16
 801011e:	d113      	bne.n	8010148 <_scanf_i+0x1b0>
 8010120:	702a      	strb	r2, [r5, #0]
 8010122:	6863      	ldr	r3, [r4, #4]
 8010124:	9e01      	ldr	r6, [sp, #4]
 8010126:	4639      	mov	r1, r7
 8010128:	4650      	mov	r0, sl
 801012a:	47b0      	blx	r6
 801012c:	f8d8 3000 	ldr.w	r3, [r8]
 8010130:	6821      	ldr	r1, [r4, #0]
 8010132:	1d1a      	adds	r2, r3, #4
 8010134:	f8c8 2000 	str.w	r2, [r8]
 8010138:	f011 0f20 	tst.w	r1, #32
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	d00f      	beq.n	8010160 <_scanf_i+0x1c8>
 8010140:	6018      	str	r0, [r3, #0]
 8010142:	68e3      	ldr	r3, [r4, #12]
 8010144:	3301      	adds	r3, #1
 8010146:	60e3      	str	r3, [r4, #12]
 8010148:	1bed      	subs	r5, r5, r7
 801014a:	44ab      	add	fp, r5
 801014c:	6925      	ldr	r5, [r4, #16]
 801014e:	445d      	add	r5, fp
 8010150:	6125      	str	r5, [r4, #16]
 8010152:	2000      	movs	r0, #0
 8010154:	b007      	add	sp, #28
 8010156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801015a:	f04f 0b00 	mov.w	fp, #0
 801015e:	e7ca      	b.n	80100f6 <_scanf_i+0x15e>
 8010160:	07ca      	lsls	r2, r1, #31
 8010162:	bf4c      	ite	mi
 8010164:	8018      	strhmi	r0, [r3, #0]
 8010166:	6018      	strpl	r0, [r3, #0]
 8010168:	e7eb      	b.n	8010142 <_scanf_i+0x1aa>
 801016a:	2001      	movs	r0, #1
 801016c:	e7f2      	b.n	8010154 <_scanf_i+0x1bc>
 801016e:	bf00      	nop
 8010170:	08011364 	.word	0x08011364
 8010174:	0800d551 	.word	0x0800d551
 8010178:	0800d455 	.word	0x0800d455
 801017c:	080119ee 	.word	0x080119ee

08010180 <__sccl>:
 8010180:	b570      	push	{r4, r5, r6, lr}
 8010182:	780b      	ldrb	r3, [r1, #0]
 8010184:	4604      	mov	r4, r0
 8010186:	2b5e      	cmp	r3, #94	; 0x5e
 8010188:	bf0b      	itete	eq
 801018a:	784b      	ldrbeq	r3, [r1, #1]
 801018c:	1c48      	addne	r0, r1, #1
 801018e:	1c88      	addeq	r0, r1, #2
 8010190:	2200      	movne	r2, #0
 8010192:	bf08      	it	eq
 8010194:	2201      	moveq	r2, #1
 8010196:	1e61      	subs	r1, r4, #1
 8010198:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801019c:	f801 2f01 	strb.w	r2, [r1, #1]!
 80101a0:	42a9      	cmp	r1, r5
 80101a2:	d1fb      	bne.n	801019c <__sccl+0x1c>
 80101a4:	b90b      	cbnz	r3, 80101aa <__sccl+0x2a>
 80101a6:	3801      	subs	r0, #1
 80101a8:	bd70      	pop	{r4, r5, r6, pc}
 80101aa:	f082 0101 	eor.w	r1, r2, #1
 80101ae:	54e1      	strb	r1, [r4, r3]
 80101b0:	1c42      	adds	r2, r0, #1
 80101b2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80101b6:	2d2d      	cmp	r5, #45	; 0x2d
 80101b8:	f102 36ff 	add.w	r6, r2, #4294967295
 80101bc:	4610      	mov	r0, r2
 80101be:	d006      	beq.n	80101ce <__sccl+0x4e>
 80101c0:	2d5d      	cmp	r5, #93	; 0x5d
 80101c2:	d0f1      	beq.n	80101a8 <__sccl+0x28>
 80101c4:	b90d      	cbnz	r5, 80101ca <__sccl+0x4a>
 80101c6:	4630      	mov	r0, r6
 80101c8:	e7ee      	b.n	80101a8 <__sccl+0x28>
 80101ca:	462b      	mov	r3, r5
 80101cc:	e7ef      	b.n	80101ae <__sccl+0x2e>
 80101ce:	7816      	ldrb	r6, [r2, #0]
 80101d0:	2e5d      	cmp	r6, #93	; 0x5d
 80101d2:	d0fa      	beq.n	80101ca <__sccl+0x4a>
 80101d4:	42b3      	cmp	r3, r6
 80101d6:	dcf8      	bgt.n	80101ca <__sccl+0x4a>
 80101d8:	4618      	mov	r0, r3
 80101da:	3001      	adds	r0, #1
 80101dc:	4286      	cmp	r6, r0
 80101de:	5421      	strb	r1, [r4, r0]
 80101e0:	dcfb      	bgt.n	80101da <__sccl+0x5a>
 80101e2:	43d8      	mvns	r0, r3
 80101e4:	4430      	add	r0, r6
 80101e6:	1c5d      	adds	r5, r3, #1
 80101e8:	42b3      	cmp	r3, r6
 80101ea:	bfa8      	it	ge
 80101ec:	2000      	movge	r0, #0
 80101ee:	182b      	adds	r3, r5, r0
 80101f0:	3202      	adds	r2, #2
 80101f2:	e7de      	b.n	80101b2 <__sccl+0x32>

080101f4 <__submore>:
 80101f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101f8:	460c      	mov	r4, r1
 80101fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80101fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010200:	4299      	cmp	r1, r3
 8010202:	d11d      	bne.n	8010240 <__submore+0x4c>
 8010204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010208:	f7fc fa9e 	bl	800c748 <_malloc_r>
 801020c:	b918      	cbnz	r0, 8010216 <__submore+0x22>
 801020e:	f04f 30ff 	mov.w	r0, #4294967295
 8010212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801021a:	63a3      	str	r3, [r4, #56]	; 0x38
 801021c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010220:	6360      	str	r0, [r4, #52]	; 0x34
 8010222:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010226:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801022a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801022e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010232:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8010236:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801023a:	6020      	str	r0, [r4, #0]
 801023c:	2000      	movs	r0, #0
 801023e:	e7e8      	b.n	8010212 <__submore+0x1e>
 8010240:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010242:	0077      	lsls	r7, r6, #1
 8010244:	463a      	mov	r2, r7
 8010246:	f7ff f81e 	bl	800f286 <_realloc_r>
 801024a:	4605      	mov	r5, r0
 801024c:	2800      	cmp	r0, #0
 801024e:	d0de      	beq.n	801020e <__submore+0x1a>
 8010250:	eb00 0806 	add.w	r8, r0, r6
 8010254:	4601      	mov	r1, r0
 8010256:	4632      	mov	r2, r6
 8010258:	4640      	mov	r0, r8
 801025a:	f7fb ff77 	bl	800c14c <memcpy>
 801025e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010262:	f8c4 8000 	str.w	r8, [r4]
 8010266:	e7e9      	b.n	801023c <__submore+0x48>

08010268 <_fstat_r>:
 8010268:	b538      	push	{r3, r4, r5, lr}
 801026a:	4d07      	ldr	r5, [pc, #28]	; (8010288 <_fstat_r+0x20>)
 801026c:	2300      	movs	r3, #0
 801026e:	4604      	mov	r4, r0
 8010270:	4608      	mov	r0, r1
 8010272:	4611      	mov	r1, r2
 8010274:	602b      	str	r3, [r5, #0]
 8010276:	f7f1 fc42 	bl	8001afe <_fstat>
 801027a:	1c43      	adds	r3, r0, #1
 801027c:	d102      	bne.n	8010284 <_fstat_r+0x1c>
 801027e:	682b      	ldr	r3, [r5, #0]
 8010280:	b103      	cbz	r3, 8010284 <_fstat_r+0x1c>
 8010282:	6023      	str	r3, [r4, #0]
 8010284:	bd38      	pop	{r3, r4, r5, pc}
 8010286:	bf00      	nop
 8010288:	200050b8 	.word	0x200050b8

0801028c <_isatty_r>:
 801028c:	b538      	push	{r3, r4, r5, lr}
 801028e:	4d06      	ldr	r5, [pc, #24]	; (80102a8 <_isatty_r+0x1c>)
 8010290:	2300      	movs	r3, #0
 8010292:	4604      	mov	r4, r0
 8010294:	4608      	mov	r0, r1
 8010296:	602b      	str	r3, [r5, #0]
 8010298:	f7f1 fc41 	bl	8001b1e <_isatty>
 801029c:	1c43      	adds	r3, r0, #1
 801029e:	d102      	bne.n	80102a6 <_isatty_r+0x1a>
 80102a0:	682b      	ldr	r3, [r5, #0]
 80102a2:	b103      	cbz	r3, 80102a6 <_isatty_r+0x1a>
 80102a4:	6023      	str	r3, [r4, #0]
 80102a6:	bd38      	pop	{r3, r4, r5, pc}
 80102a8:	200050b8 	.word	0x200050b8

080102ac <_init>:
 80102ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ae:	bf00      	nop
 80102b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102b2:	bc08      	pop	{r3}
 80102b4:	469e      	mov	lr, r3
 80102b6:	4770      	bx	lr

080102b8 <_fini>:
 80102b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ba:	bf00      	nop
 80102bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80102be:	bc08      	pop	{r3}
 80102c0:	469e      	mov	lr, r3
 80102c2:	4770      	bx	lr
